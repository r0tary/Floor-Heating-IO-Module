
Zigbee_OnOff_Server_Coord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017f8  080159e0  080159e0  000259e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080171d8  080171d8  000271d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080171e0  080171e0  000271e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080171e4  080171e4  000271e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  080171e8  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000094  08017274  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001af8  200000a8  08017285  000300a8  2**3
                  ALLOC
  9 ._user_heap_stack 0001a000  20001ba0  08017285  00031ba0  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000a76  200300e4  200300e4  00040000  2**2
                  ALLOC
 14 .comment      00006e06  00000000  00000000  000300d9  2**0
                  CONTENTS, READONLY
 15 .iar.rtmodel  00000288  00000000  00000000  00036edf  2**0
                  CONTENTS, READONLY
 16 .iar_vfe_header 00000030  00000000  00000000  00037168  2**2
                  CONTENTS, READONLY
 17 .debug_info   0003ff13  00000000  00000000  00037198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007610  00000000  00000000  000770ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000037c4  00000000  00000000  0007e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000201c  00000000  00000000  00081e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002bc81  00000000  00000000  00083ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00036d96  00000000  00000000  000afb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0010122f  00000000  00000000  000e68b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000d01c  00000000  00000000  001e7ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000d5  00000000  00000000  001f4b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    000060ce  00000000  00000000  001f4bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_pubnames 00001560  00000000  00000000  001faca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macinfo 00000665  00000000  00000000  001fc207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_types  000028ab  00000000  00000000  001fc86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000018  00000000  00000000  001ff117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a8 	.word	0x200000a8
 800015c:	00000000 	.word	0x00000000
 8000160:	080159c8 	.word	0x080159c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ac 	.word	0x200000ac
 800017c:	080159c8 	.word	0x080159c8

08000180 <is_little_endian>:
 8000180:	b081      	sub	sp, #4
 8000182:	2001      	movs	r0, #1
 8000184:	f8ad 0000 	strh.w	r0, [sp]
 8000188:	4668      	mov	r0, sp
 800018a:	7800      	ldrb	r0, [r0, #0]
 800018c:	2801      	cmp	r0, #1
 800018e:	d101      	bne.n	8000194 <??is_little_endian_0>
 8000190:	2001      	movs	r0, #1
 8000192:	e000      	b.n	8000196 <??is_little_endian_1>

08000194 <??is_little_endian_0>:
 8000194:	2000      	movs	r0, #0

08000196 <??is_little_endian_1>:
 8000196:	b2c0      	uxtb	r0, r0
 8000198:	b001      	add	sp, #4
 800019a:	4770      	bx	lr

0800019c <pletoh16>:
 800019c:	0001      	movs	r1, r0
 800019e:	7808      	ldrb	r0, [r1, #0]
 80001a0:	7849      	ldrb	r1, [r1, #1]
 80001a2:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80001a6:	b280      	uxth	r0, r0
 80001a8:	4770      	bx	lr

080001aa <pletoh24>:
 80001aa:	b510      	push	{r4, lr}
 80001ac:	0004      	movs	r4, r0
 80001ae:	0020      	movs	r0, r4
 80001b0:	f7ff fff4 	bl	800019c <pletoh16>
 80001b4:	b280      	uxth	r0, r0
 80001b6:	78a1      	ldrb	r1, [r4, #2]
 80001b8:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 80001bc:	bd10      	pop	{r4, pc}

080001be <pletoh32>:
 80001be:	b538      	push	{r3, r4, r5, lr}
 80001c0:	0004      	movs	r4, r0
 80001c2:	0020      	movs	r0, r4
 80001c4:	f7ff ffea 	bl	800019c <pletoh16>
 80001c8:	0005      	movs	r5, r0
 80001ca:	b2ad      	uxth	r5, r5
 80001cc:	1ca0      	adds	r0, r4, #2
 80001ce:	f7ff ffe5 	bl	800019c <pletoh16>
 80001d2:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 80001d6:	0028      	movs	r0, r5
 80001d8:	bd32      	pop	{r1, r4, r5, pc}

080001da <pletoh40>:
 80001da:	b510      	push	{r4, lr}
 80001dc:	0004      	movs	r4, r0
 80001de:	0020      	movs	r0, r4
 80001e0:	f7ff ffed 	bl	80001be <pletoh32>
 80001e4:	7921      	ldrb	r1, [r4, #4]
 80001e6:	bd10      	pop	{r4, pc}

080001e8 <pletoh48>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	0004      	movs	r4, r0
 80001ec:	0020      	movs	r0, r4
 80001ee:	f7ff fff4 	bl	80001da <pletoh40>
 80001f2:	7962      	ldrb	r2, [r4, #5]
 80001f4:	2300      	movs	r3, #0
 80001f6:	0213      	lsls	r3, r2, #8
 80001f8:	2200      	movs	r2, #0
 80001fa:	4310      	orrs	r0, r2
 80001fc:	4319      	orrs	r1, r3
 80001fe:	bd10      	pop	{r4, pc}

08000200 <pletoh56>:
 8000200:	b510      	push	{r4, lr}
 8000202:	0004      	movs	r4, r0
 8000204:	0020      	movs	r0, r4
 8000206:	f7ff ffef 	bl	80001e8 <pletoh48>
 800020a:	79a2      	ldrb	r2, [r4, #6]
 800020c:	2300      	movs	r3, #0
 800020e:	0413      	lsls	r3, r2, #16
 8000210:	2200      	movs	r2, #0
 8000212:	4310      	orrs	r0, r2
 8000214:	4319      	orrs	r1, r3
 8000216:	bd10      	pop	{r4, pc}

08000218 <pletoh64>:
 8000218:	b538      	push	{r3, r4, r5, lr}
 800021a:	0005      	movs	r5, r0
 800021c:	0028      	movs	r0, r5
 800021e:	f7ff ffce 	bl	80001be <pletoh32>
 8000222:	0004      	movs	r4, r0
 8000224:	1d28      	adds	r0, r5, #4
 8000226:	f7ff ffca 	bl	80001be <pletoh32>
 800022a:	0003      	movs	r3, r0
 800022c:	0022      	movs	r2, r4
 800022e:	0010      	movs	r0, r2
 8000230:	0019      	movs	r1, r3
 8000232:	bd34      	pop	{r2, r4, r5, pc}

08000234 <putle16>:
 8000234:	7001      	strb	r1, [r0, #0]
 8000236:	000a      	movs	r2, r1
 8000238:	b292      	uxth	r2, r2
 800023a:	0a12      	lsrs	r2, r2, #8
 800023c:	7042      	strb	r2, [r0, #1]
 800023e:	4770      	bx	lr

08000240 <putle24>:
 8000240:	b538      	push	{r3, r4, r5, lr}
 8000242:	0004      	movs	r4, r0
 8000244:	000d      	movs	r5, r1
 8000246:	0029      	movs	r1, r5
 8000248:	b289      	uxth	r1, r1
 800024a:	0020      	movs	r0, r4
 800024c:	f7ff fff2 	bl	8000234 <putle16>
 8000250:	0028      	movs	r0, r5
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	70a0      	strb	r0, [r4, #2]
 8000256:	bd31      	pop	{r0, r4, r5, pc}

08000258 <putle32>:
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	0004      	movs	r4, r0
 800025c:	000d      	movs	r5, r1
 800025e:	0029      	movs	r1, r5
 8000260:	0020      	movs	r0, r4
 8000262:	f7ff ffed 	bl	8000240 <putle24>
 8000266:	0028      	movs	r0, r5
 8000268:	0e00      	lsrs	r0, r0, #24
 800026a:	70e0      	strb	r0, [r4, #3]
 800026c:	bd31      	pop	{r0, r4, r5, pc}

0800026e <putle40>:
 800026e:	b570      	push	{r4, r5, r6, lr}
 8000270:	0006      	movs	r6, r0
 8000272:	0014      	movs	r4, r2
 8000274:	001d      	movs	r5, r3
 8000276:	0021      	movs	r1, r4
 8000278:	0030      	movs	r0, r6
 800027a:	f7ff ffed 	bl	8000258 <putle32>
 800027e:	7135      	strb	r5, [r6, #4]
 8000280:	bd70      	pop	{r4, r5, r6, pc}

08000282 <putle48>:
 8000282:	b570      	push	{r4, r5, r6, lr}
 8000284:	0006      	movs	r6, r0
 8000286:	0014      	movs	r4, r2
 8000288:	001d      	movs	r5, r3
 800028a:	0022      	movs	r2, r4
 800028c:	002b      	movs	r3, r5
 800028e:	0030      	movs	r0, r6
 8000290:	f7ff ffed 	bl	800026e <putle40>
 8000294:	0020      	movs	r0, r4
 8000296:	0029      	movs	r1, r5
 8000298:	0a08      	lsrs	r0, r1, #8
 800029a:	2100      	movs	r1, #0
 800029c:	7170      	strb	r0, [r6, #5]
 800029e:	bd70      	pop	{r4, r5, r6, pc}

080002a0 <putle56>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	0006      	movs	r6, r0
 80002a4:	0014      	movs	r4, r2
 80002a6:	001d      	movs	r5, r3
 80002a8:	0022      	movs	r2, r4
 80002aa:	002b      	movs	r3, r5
 80002ac:	0030      	movs	r0, r6
 80002ae:	f7ff ffe8 	bl	8000282 <putle48>
 80002b2:	0020      	movs	r0, r4
 80002b4:	0029      	movs	r1, r5
 80002b6:	0c08      	lsrs	r0, r1, #16
 80002b8:	2100      	movs	r1, #0
 80002ba:	71b0      	strb	r0, [r6, #6]
 80002bc:	bd70      	pop	{r4, r5, r6, pc}

080002be <putle64>:
 80002be:	b570      	push	{r4, r5, r6, lr}
 80002c0:	0006      	movs	r6, r0
 80002c2:	0014      	movs	r4, r2
 80002c4:	001d      	movs	r5, r3
 80002c6:	0022      	movs	r2, r4
 80002c8:	002b      	movs	r3, r5
 80002ca:	0030      	movs	r0, r6
 80002cc:	f7ff ffe8 	bl	80002a0 <putle56>
 80002d0:	0020      	movs	r0, r4
 80002d2:	0029      	movs	r1, r5
 80002d4:	0e08      	lsrs	r0, r1, #24
 80002d6:	2100      	movs	r1, #0
 80002d8:	71f0      	strb	r0, [r6, #7]
 80002da:	bd70      	pop	{r4, r5, r6, pc}

080002dc <ZbZclAttrAddSorted>:
 80002dc:	b430      	push	{r4, r5}
 80002de:	0002      	movs	r2, r0
 80002e0:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80002e2:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 80002e6:	42a0      	cmp	r0, r4
 80002e8:	d001      	beq.n	80002ee <??ZbZclAttrAddSorted_0>
 80002ea:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80002ec:	e000      	b.n	80002f0 <??ZbZclAttrAddSorted_1>

080002ee <??ZbZclAttrAddSorted_0>:
 80002ee:	2000      	movs	r0, #0

080002f0 <??ZbZclAttrAddSorted_1>:
 80002f0:	2800      	cmp	r0, #0
 80002f2:	d017      	beq.n	8000324 <??ZbZclAttrAddSorted_2>
 80002f4:	0003      	movs	r3, r0
 80002f6:	688c      	ldr	r4, [r1, #8]
 80002f8:	8824      	ldrh	r4, [r4, #0]
 80002fa:	689d      	ldr	r5, [r3, #8]
 80002fc:	882d      	ldrh	r5, [r5, #0]
 80002fe:	42ac      	cmp	r4, r5
 8000300:	d207      	bcs.n	8000312 <??ZbZclAttrAddSorted_3>
 8000302:	600b      	str	r3, [r1, #0]
 8000304:	685c      	ldr	r4, [r3, #4]
 8000306:	604c      	str	r4, [r1, #4]
 8000308:	680c      	ldr	r4, [r1, #0]
 800030a:	6061      	str	r1, [r4, #4]
 800030c:	684c      	ldr	r4, [r1, #4]
 800030e:	6021      	str	r1, [r4, #0]
 8000310:	e011      	b.n	8000336 <??ZbZclAttrAddSorted_4>

08000312 <??ZbZclAttrAddSorted_3>:
 8000312:	6804      	ldr	r4, [r0, #0]
 8000314:	f112 0524 	adds.w	r5, r2, #36	; 0x24
 8000318:	42ac      	cmp	r4, r5
 800031a:	d001      	beq.n	8000320 <??ZbZclAttrAddSorted_5>
 800031c:	6800      	ldr	r0, [r0, #0]
 800031e:	e7e7      	b.n	80002f0 <??ZbZclAttrAddSorted_1>

08000320 <??ZbZclAttrAddSorted_5>:
 8000320:	2000      	movs	r0, #0
 8000322:	e7e5      	b.n	80002f0 <??ZbZclAttrAddSorted_1>

08000324 <??ZbZclAttrAddSorted_2>:
 8000324:	f112 0424 	adds.w	r4, r2, #36	; 0x24
 8000328:	600c      	str	r4, [r1, #0]
 800032a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800032c:	604c      	str	r4, [r1, #4]
 800032e:	680c      	ldr	r4, [r1, #0]
 8000330:	6061      	str	r1, [r4, #4]
 8000332:	684c      	ldr	r4, [r1, #4]
 8000334:	6021      	str	r1, [r4, #0]

08000336 <??ZbZclAttrAddSorted_4>:
 8000336:	bc30      	pop	{r4, r5}
 8000338:	4770      	bx	lr

0800033a <ZbZclAttrFind>:
 800033a:	b430      	push	{r4, r5}
 800033c:	0003      	movs	r3, r0
 800033e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000340:	f113 0224 	adds.w	r2, r3, #36	; 0x24
 8000344:	4290      	cmp	r0, r2
 8000346:	d001      	beq.n	800034c <??ZbZclAttrFind_0>
 8000348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800034a:	e000      	b.n	800034e <??ZbZclAttrFind_1>

0800034c <??ZbZclAttrFind_0>:
 800034c:	2200      	movs	r2, #0

0800034e <??ZbZclAttrFind_1>:
 800034e:	2a00      	cmp	r2, #0
 8000350:	d012      	beq.n	8000378 <??ZbZclAttrFind_2>
 8000352:	0014      	movs	r4, r2
 8000354:	68a0      	ldr	r0, [r4, #8]
 8000356:	8800      	ldrh	r0, [r0, #0]
 8000358:	000d      	movs	r5, r1
 800035a:	b2ad      	uxth	r5, r5
 800035c:	42a8      	cmp	r0, r5
 800035e:	d005      	beq.n	800036c <??ZbZclAttrFind_3>
 8000360:	6810      	ldr	r0, [r2, #0]
 8000362:	f113 0524 	adds.w	r5, r3, #36	; 0x24
 8000366:	42a8      	cmp	r0, r5
 8000368:	d004      	beq.n	8000374 <??ZbZclAttrFind_4>
 800036a:	e001      	b.n	8000370 <??ZbZclAttrFind_5>

0800036c <??ZbZclAttrFind_3>:
 800036c:	0020      	movs	r0, r4
 800036e:	e004      	b.n	800037a <??ZbZclAttrFind_6>

08000370 <??ZbZclAttrFind_5>:
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	e7ec      	b.n	800034e <??ZbZclAttrFind_1>

08000374 <??ZbZclAttrFind_4>:
 8000374:	2200      	movs	r2, #0
 8000376:	e7ea      	b.n	800034e <??ZbZclAttrFind_1>

08000378 <??ZbZclAttrFind_2>:
 8000378:	2000      	movs	r0, #0

0800037a <??ZbZclAttrFind_6>:
 800037a:	bc30      	pop	{r4, r5}
 800037c:	4770      	bx	lr

0800037e <ZbZclAttrHandleDiscover>:
 800037e:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000382:	b09f      	sub	sp, #124	; 0x7c
 8000384:	0004      	movs	r4, r0
 8000386:	000d      	movs	r5, r1
 8000388:	0016      	movs	r6, r2
 800038a:	2708      	movs	r7, #8
 800038c:	f05f 0800 	movs.w	r8, #0
 8000390:	f10d 0908 	add.w	r9, sp, #8
 8000394:	4642      	mov	r2, r8
 8000396:	0039      	movs	r1, r7
 8000398:	4648      	mov	r0, r9
 800039a:	f005 fc8f 	bl	8005cbc <__aeabi_memset>
 800039e:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80003a0:	2803      	cmp	r0, #3
 80003a2:	d206      	bcs.n	80003b2 <??ZbZclAttrHandleDiscover_0>
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	002a      	movs	r2, r5
 80003a8:	0031      	movs	r1, r6
 80003aa:	0020      	movs	r0, r4
 80003ac:	f012 f87d 	bl	80124aa <ZbZclSendDefaultResponse>
 80003b0:	e070      	b.n	8000494 <??ZbZclAttrHandleDiscover_1>

080003b2 <??ZbZclAttrHandleDiscover_0>:
 80003b2:	f05f 0800 	movs.w	r8, #0
 80003b6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80003b8:	4641      	mov	r1, r8
 80003ba:	b2c9      	uxtb	r1, r1
 80003bc:	4408      	add	r0, r1
 80003be:	f7ff feed 	bl	800019c <pletoh16>
 80003c2:	0007      	movs	r7, r0
 80003c4:	f118 0802 	adds.w	r8, r8, #2
 80003c8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80003ca:	4641      	mov	r1, r8
 80003cc:	b2c9      	uxtb	r1, r1
 80003ce:	5c40      	ldrb	r0, [r0, r1]
 80003d0:	f88d 0004 	strb.w	r0, [sp, #4]
 80003d4:	f118 0801 	adds.w	r8, r8, #1
 80003d8:	2000      	movs	r0, #0
 80003da:	f88d 0008 	strb.w	r0, [sp, #8]
 80003de:	7868      	ldrb	r0, [r5, #1]
 80003e0:	f88d 0009 	strb.w	r0, [sp, #9]
 80003e4:	78a8      	ldrb	r0, [r5, #2]
 80003e6:	2800      	cmp	r0, #0
 80003e8:	d101      	bne.n	80003ee <??ZbZclAttrHandleDiscover_2>
 80003ea:	2001      	movs	r0, #1
 80003ec:	e000      	b.n	80003f0 <??ZbZclAttrHandleDiscover_3>

080003ee <??ZbZclAttrHandleDiscover_2>:
 80003ee:	2000      	movs	r0, #0

080003f0 <??ZbZclAttrHandleDiscover_3>:
 80003f0:	f88d 000a 	strb.w	r0, [sp, #10]
 80003f4:	2001      	movs	r0, #1
 80003f6:	f88d 000b 	strb.w	r0, [sp, #11]
 80003fa:	88a8      	ldrh	r0, [r5, #4]
 80003fc:	f8ad 000c 	strh.w	r0, [sp, #12]
 8000400:	79a8      	ldrb	r0, [r5, #6]
 8000402:	f88d 000e 	strb.w	r0, [sp, #14]
 8000406:	200d      	movs	r0, #13
 8000408:	f88d 000f 	strb.w	r0, [sp, #15]
 800040c:	2239      	movs	r2, #57	; 0x39
 800040e:	a910      	add	r1, sp, #64	; 0x40
 8000410:	a802      	add	r0, sp, #8
 8000412:	f004 fa43 	bl	800489c <ZbZclAppendHeader>
 8000416:	4682      	mov	sl, r0
 8000418:	f1ba 0f00 	cmp.w	sl, #0
 800041c:	d506      	bpl.n	800042c <??ZbZclAttrHandleDiscover_4>
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	002a      	movs	r2, r5
 8000422:	0031      	movs	r1, r6
 8000424:	0020      	movs	r0, r4
 8000426:	f012 f840 	bl	80124aa <ZbZclSendDefaultResponse>
 800042a:	e033      	b.n	8000494 <??ZbZclAttrHandleDiscover_1>

0800042c <??ZbZclAttrHandleDiscover_4>:
 800042c:	f1da 0039 	rsbs	r0, sl, #57	; 0x39
 8000430:	9000      	str	r0, [sp, #0]
 8000432:	a810      	add	r0, sp, #64	; 0x40
 8000434:	eb00 030a 	add.w	r3, r0, sl
 8000438:	aa01      	add	r2, sp, #4
 800043a:	0039      	movs	r1, r7
 800043c:	b289      	uxth	r1, r1
 800043e:	0020      	movs	r0, r4
 8000440:	f000 f82b 	bl	800049a <ZbZclAttrDiscoverGetList>
 8000444:	4681      	mov	r9, r0
 8000446:	eb19 090a 	adds.w	r9, r9, sl
 800044a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800044e:	2800      	cmp	r0, #0
 8000450:	d104      	bne.n	800045c <??ZbZclAttrHandleDiscover_5>
 8000452:	0030      	movs	r0, r6
 8000454:	f011 faa3 	bl	801199e <ZbApsAddrIsBcast>
 8000458:	2800      	cmp	r0, #0
 800045a:	d11b      	bne.n	8000494 <??ZbZclAttrHandleDiscover_1>

0800045c <??ZbZclAttrHandleDiscover_5>:
 800045c:	0032      	movs	r2, r6
 800045e:	a904      	add	r1, sp, #16
 8000460:	0020      	movs	r0, r4
 8000462:	f003 fcc2 	bl	8003dea <ZbZclClusterInitApsdeReq>
 8000466:	a804      	add	r0, sp, #16
 8000468:	f116 0110 	adds.w	r1, r6, #16
 800046c:	2210      	movs	r2, #16
 800046e:	f014 fbbe 	bl	8014bee <__aeabi_memcpy>
 8000472:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 8000476:	f003 fc50 	bl	8003d1a <ZbZclTxOptsFromSecurityStatus>
 800047a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 800047e:	a810      	add	r0, sp, #64	; 0x40
 8000480:	900a      	str	r0, [sp, #40]	; 0x28
 8000482:	4648      	mov	r0, r9
 8000484:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8000488:	2300      	movs	r3, #0
 800048a:	2200      	movs	r2, #0
 800048c:	a904      	add	r1, sp, #16
 800048e:	68a0      	ldr	r0, [r4, #8]
 8000490:	f011 fa10 	bl	80118b4 <ZbApsdeDataReqCallback>

08000494 <??ZbZclAttrHandleDiscover_1>:
 8000494:	b020      	add	sp, #128	; 0x80
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800049a <ZbZclAttrDiscoverGetList>:
 800049a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800049e:	0005      	movs	r5, r0
 80004a0:	0016      	movs	r6, r2
 80004a2:	001f      	movs	r7, r3
 80004a4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80004a8:	f05f 0a00 	movs.w	sl, #0
 80004ac:	f05f 0b00 	movs.w	fp, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f807 000b 	strb.w	r0, [r7, fp]
 80004b6:	f11b 0b01 	adds.w	fp, fp, #1
 80004ba:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80004bc:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 80004c0:	4288      	cmp	r0, r1
 80004c2:	d001      	beq.n	80004c8 <??ZbZclAttrDiscoverGetList_0>
 80004c4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80004c6:	e000      	b.n	80004ca <??ZbZclAttrDiscoverGetList_1>

080004c8 <??ZbZclAttrDiscoverGetList_0>:
 80004c8:	2400      	movs	r4, #0

080004ca <??ZbZclAttrDiscoverGetList_1>:
 80004ca:	2c00      	cmp	r4, #0
 80004cc:	d030      	beq.n	8000530 <??ZbZclAttrDiscoverGetList_2>
 80004ce:	46a1      	mov	r9, r4
 80004d0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80004d4:	8800      	ldrh	r0, [r0, #0]
 80004d6:	f8bd 1000 	ldrh.w	r1, [sp]
 80004da:	4288      	cmp	r0, r1
 80004dc:	d31f      	bcc.n	800051e <??ZbZclAttrDiscoverGetList_3>

080004de <??ZbZclAttrDiscoverGetList_4>:
 80004de:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80004e2:	8880      	ldrh	r0, [r0, #4]
 80004e4:	0400      	lsls	r0, r0, #16
 80004e6:	d41a      	bmi.n	800051e <??ZbZclAttrDiscoverGetList_3>

080004e8 <??ZbZclAttrDiscoverGetList_5>:
 80004e8:	4650      	mov	r0, sl
 80004ea:	7831      	ldrb	r1, [r6, #0]
 80004ec:	b2c0      	uxtb	r0, r0
 80004ee:	4288      	cmp	r0, r1
 80004f0:	d21e      	bcs.n	8000530 <??ZbZclAttrDiscoverGetList_2>

080004f2 <??ZbZclAttrDiscoverGetList_6>:
 80004f2:	f11b 0003 	adds.w	r0, fp, #3
 80004f6:	4580      	cmp	r8, r0
 80004f8:	d31a      	bcc.n	8000530 <??ZbZclAttrDiscoverGetList_2>

080004fa <??ZbZclAttrDiscoverGetList_7>:
 80004fa:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80004fe:	8801      	ldrh	r1, [r0, #0]
 8000500:	eb07 000b 	add.w	r0, r7, fp
 8000504:	f7ff fe96 	bl	8000234 <putle16>
 8000508:	f11b 0b02 	adds.w	fp, fp, #2
 800050c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000510:	7880      	ldrb	r0, [r0, #2]
 8000512:	f807 000b 	strb.w	r0, [r7, fp]
 8000516:	f11b 0b01 	adds.w	fp, fp, #1
 800051a:	f11a 0a01 	adds.w	sl, sl, #1

0800051e <??ZbZclAttrDiscoverGetList_3>:
 800051e:	6820      	ldr	r0, [r4, #0]
 8000520:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8000524:	4288      	cmp	r0, r1
 8000526:	d001      	beq.n	800052c <??ZbZclAttrDiscoverGetList_8>
 8000528:	6824      	ldr	r4, [r4, #0]
 800052a:	e7ce      	b.n	80004ca <??ZbZclAttrDiscoverGetList_1>

0800052c <??ZbZclAttrDiscoverGetList_8>:
 800052c:	2400      	movs	r4, #0
 800052e:	e7cc      	b.n	80004ca <??ZbZclAttrDiscoverGetList_1>

08000530 <??ZbZclAttrDiscoverGetList_2>:
 8000530:	2c00      	cmp	r4, #0
 8000532:	d101      	bne.n	8000538 <??ZbZclAttrDiscoverGetList_9>
 8000534:	2001      	movs	r0, #1
 8000536:	7038      	strb	r0, [r7, #0]

08000538 <??ZbZclAttrDiscoverGetList_9>:
 8000538:	f886 a000 	strb.w	sl, [r6]
 800053c:	4658      	mov	r0, fp
 800053e:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000542 <ZbZclAttrRead>:
 8000542:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	4680      	mov	r8, r0
 800054a:	0014      	movs	r4, r2
 800054c:	001d      	movs	r5, r3
 800054e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8000550:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8000554:	4640      	mov	r0, r8
 8000556:	f7ff fef0 	bl	800033a <ZbZclAttrFind>
 800055a:	0007      	movs	r7, r0
 800055c:	2f00      	cmp	r7, #0
 800055e:	d101      	bne.n	8000564 <??ZbZclAttrRead_0>
 8000560:	2086      	movs	r0, #134	; 0x86
 8000562:	e03c      	b.n	80005de <??ZbZclAttrRead_1>

08000564 <??ZbZclAttrRead_0>:
 8000564:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8000568:	2800      	cmp	r0, #0
 800056a:	d005      	beq.n	8000578 <??ZbZclAttrRead_2>
 800056c:	68b8      	ldr	r0, [r7, #8]
 800056e:	7900      	ldrb	r0, [r0, #4]
 8000570:	0780      	lsls	r0, r0, #30
 8000572:	d401      	bmi.n	8000578 <??ZbZclAttrRead_2>
 8000574:	208c      	movs	r0, #140	; 0x8c
 8000576:	e032      	b.n	80005de <??ZbZclAttrRead_1>

08000578 <??ZbZclAttrRead_2>:
 8000578:	2c00      	cmp	r4, #0
 800057a:	d002      	beq.n	8000582 <??ZbZclAttrRead_3>
 800057c:	68b8      	ldr	r0, [r7, #8]
 800057e:	7880      	ldrb	r0, [r0, #2]
 8000580:	7020      	strb	r0, [r4, #0]

08000582 <??ZbZclAttrRead_3>:
 8000582:	2d00      	cmp	r5, #0
 8000584:	d001      	beq.n	800058a <??ZbZclAttrRead_4>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d105      	bne.n	8000596 <??ZbZclAttrRead_5>

0800058a <??ZbZclAttrRead_4>:
 800058a:	2c00      	cmp	r4, #0
 800058c:	d001      	beq.n	8000592 <??ZbZclAttrRead_6>
 800058e:	2000      	movs	r0, #0
 8000590:	e025      	b.n	80005de <??ZbZclAttrRead_1>

08000592 <??ZbZclAttrRead_6>:
 8000592:	2089      	movs	r0, #137	; 0x89
 8000594:	e023      	b.n	80005de <??ZbZclAttrRead_1>

08000596 <??ZbZclAttrRead_5>:
 8000596:	68b8      	ldr	r0, [r7, #8]
 8000598:	7900      	ldrb	r0, [r0, #4]
 800059a:	06c0      	lsls	r0, r0, #27
 800059c:	d519      	bpl.n	80005d2 <??ZbZclAttrRead_7>
 800059e:	f05f 0920 	movs.w	r9, #32
 80005a2:	f05f 0a00 	movs.w	sl, #0
 80005a6:	46eb      	mov	fp, sp
 80005a8:	4652      	mov	r2, sl
 80005aa:	4649      	mov	r1, r9
 80005ac:	4658      	mov	r0, fp
 80005ae:	f005 fb85 	bl	8005cbc <__aeabi_memset>
 80005b2:	68b8      	ldr	r0, [r7, #8]
 80005b4:	9000      	str	r0, [sp, #0]
 80005b6:	2000      	movs	r0, #0
 80005b8:	f88d 0004 	strb.w	r0, [sp, #4]
 80005bc:	9502      	str	r5, [sp, #8]
 80005be:	9603      	str	r6, [sp, #12]
 80005c0:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 80005c4:	9007      	str	r0, [sp, #28]
 80005c6:	466a      	mov	r2, sp
 80005c8:	0039      	movs	r1, r7
 80005ca:	4640      	mov	r0, r8
 80005cc:	f001 fce6 	bl	8001f9c <ZbZclAttrCallbackExec>
 80005d0:	e005      	b.n	80005de <??ZbZclAttrRead_1>

080005d2 <??ZbZclAttrRead_7>:
 80005d2:	0033      	movs	r3, r6
 80005d4:	002a      	movs	r2, r5
 80005d6:	0039      	movs	r1, r7
 80005d8:	4640      	mov	r0, r8
 80005da:	f000 f803 	bl	80005e4 <ZbZclAttrDefaultRead>

080005de <??ZbZclAttrRead_1>:
 80005de:	b009      	add	sp, #36	; 0x24
 80005e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080005e4 <ZbZclAttrDefaultRead>:
 80005e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e8:	0005      	movs	r5, r0
 80005ea:	000e      	movs	r6, r1
 80005ec:	0017      	movs	r7, r2
 80005ee:	001c      	movs	r4, r3
 80005f0:	f05f 0800 	movs.w	r8, #0
 80005f4:	f05f 0900 	movs.w	r9, #0
 80005f8:	68b0      	ldr	r0, [r6, #8]
 80005fa:	7880      	ldrb	r0, [r0, #2]
 80005fc:	2808      	cmp	r0, #8
 80005fe:	d065      	beq.n	80006cc <??ZbZclAttrDefaultRead_0>
 8000600:	2809      	cmp	r0, #9
 8000602:	d06b      	beq.n	80006dc <??ZbZclAttrDefaultRead_1>
 8000604:	280a      	cmp	r0, #10
 8000606:	d071      	beq.n	80006ec <??ZbZclAttrDefaultRead_2>
 8000608:	280b      	cmp	r0, #11
 800060a:	d077      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 800060c:	280c      	cmp	r0, #12
 800060e:	d07d      	beq.n	800070c <??ZbZclAttrDefaultRead_4>
 8000610:	280d      	cmp	r0, #13
 8000612:	f000 8083 	beq.w	800071c <??ZbZclAttrDefaultRead_5>
 8000616:	280e      	cmp	r0, #14
 8000618:	f000 8088 	beq.w	800072c <??ZbZclAttrDefaultRead_6>
 800061c:	280f      	cmp	r0, #15
 800061e:	f000 808d 	beq.w	800073c <??ZbZclAttrDefaultRead_7>
 8000622:	2810      	cmp	r0, #16
 8000624:	d052      	beq.n	80006cc <??ZbZclAttrDefaultRead_0>
 8000626:	2818      	cmp	r0, #24
 8000628:	d050      	beq.n	80006cc <??ZbZclAttrDefaultRead_0>
 800062a:	2819      	cmp	r0, #25
 800062c:	d056      	beq.n	80006dc <??ZbZclAttrDefaultRead_1>
 800062e:	281a      	cmp	r0, #26
 8000630:	d05c      	beq.n	80006ec <??ZbZclAttrDefaultRead_2>
 8000632:	281b      	cmp	r0, #27
 8000634:	d062      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 8000636:	281c      	cmp	r0, #28
 8000638:	d068      	beq.n	800070c <??ZbZclAttrDefaultRead_4>
 800063a:	281d      	cmp	r0, #29
 800063c:	d06e      	beq.n	800071c <??ZbZclAttrDefaultRead_5>
 800063e:	281e      	cmp	r0, #30
 8000640:	d074      	beq.n	800072c <??ZbZclAttrDefaultRead_6>
 8000642:	281f      	cmp	r0, #31
 8000644:	d07a      	beq.n	800073c <??ZbZclAttrDefaultRead_7>
 8000646:	2820      	cmp	r0, #32
 8000648:	d040      	beq.n	80006cc <??ZbZclAttrDefaultRead_0>
 800064a:	2821      	cmp	r0, #33	; 0x21
 800064c:	d046      	beq.n	80006dc <??ZbZclAttrDefaultRead_1>
 800064e:	2822      	cmp	r0, #34	; 0x22
 8000650:	d04c      	beq.n	80006ec <??ZbZclAttrDefaultRead_2>
 8000652:	2823      	cmp	r0, #35	; 0x23
 8000654:	d052      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 8000656:	2824      	cmp	r0, #36	; 0x24
 8000658:	d058      	beq.n	800070c <??ZbZclAttrDefaultRead_4>
 800065a:	2825      	cmp	r0, #37	; 0x25
 800065c:	d05e      	beq.n	800071c <??ZbZclAttrDefaultRead_5>
 800065e:	2826      	cmp	r0, #38	; 0x26
 8000660:	d064      	beq.n	800072c <??ZbZclAttrDefaultRead_6>
 8000662:	2827      	cmp	r0, #39	; 0x27
 8000664:	d06a      	beq.n	800073c <??ZbZclAttrDefaultRead_7>
 8000666:	2828      	cmp	r0, #40	; 0x28
 8000668:	d030      	beq.n	80006cc <??ZbZclAttrDefaultRead_0>
 800066a:	2829      	cmp	r0, #41	; 0x29
 800066c:	d036      	beq.n	80006dc <??ZbZclAttrDefaultRead_1>
 800066e:	282a      	cmp	r0, #42	; 0x2a
 8000670:	d03c      	beq.n	80006ec <??ZbZclAttrDefaultRead_2>
 8000672:	282b      	cmp	r0, #43	; 0x2b
 8000674:	d042      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 8000676:	282c      	cmp	r0, #44	; 0x2c
 8000678:	d048      	beq.n	800070c <??ZbZclAttrDefaultRead_4>
 800067a:	282d      	cmp	r0, #45	; 0x2d
 800067c:	d04e      	beq.n	800071c <??ZbZclAttrDefaultRead_5>
 800067e:	282e      	cmp	r0, #46	; 0x2e
 8000680:	d054      	beq.n	800072c <??ZbZclAttrDefaultRead_6>
 8000682:	282f      	cmp	r0, #47	; 0x2f
 8000684:	d05a      	beq.n	800073c <??ZbZclAttrDefaultRead_7>
 8000686:	2830      	cmp	r0, #48	; 0x30
 8000688:	d020      	beq.n	80006cc <??ZbZclAttrDefaultRead_0>
 800068a:	2831      	cmp	r0, #49	; 0x31
 800068c:	d026      	beq.n	80006dc <??ZbZclAttrDefaultRead_1>
 800068e:	2838      	cmp	r0, #56	; 0x38
 8000690:	d024      	beq.n	80006dc <??ZbZclAttrDefaultRead_1>
 8000692:	2839      	cmp	r0, #57	; 0x39
 8000694:	d032      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 8000696:	283a      	cmp	r0, #58	; 0x3a
 8000698:	d050      	beq.n	800073c <??ZbZclAttrDefaultRead_7>
 800069a:	2841      	cmp	r0, #65	; 0x41
 800069c:	d05e      	beq.n	800075c <??ZbZclAttrDefaultRead_8>
 800069e:	2842      	cmp	r0, #66	; 0x42
 80006a0:	d05c      	beq.n	800075c <??ZbZclAttrDefaultRead_8>
 80006a2:	2843      	cmp	r0, #67	; 0x43
 80006a4:	d071      	beq.n	800078a <??ZbZclAttrDefaultRead_9>
 80006a6:	2844      	cmp	r0, #68	; 0x44
 80006a8:	d06f      	beq.n	800078a <??ZbZclAttrDefaultRead_9>
 80006aa:	28e0      	cmp	r0, #224	; 0xe0
 80006ac:	d026      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 80006ae:	28e1      	cmp	r0, #225	; 0xe1
 80006b0:	d024      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 80006b2:	28e2      	cmp	r0, #226	; 0xe2
 80006b4:	d022      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 80006b6:	28e8      	cmp	r0, #232	; 0xe8
 80006b8:	d010      	beq.n	80006dc <??ZbZclAttrDefaultRead_1>
 80006ba:	28e9      	cmp	r0, #233	; 0xe9
 80006bc:	d00e      	beq.n	80006dc <??ZbZclAttrDefaultRead_1>
 80006be:	28ea      	cmp	r0, #234	; 0xea
 80006c0:	d01c      	beq.n	80006fc <??ZbZclAttrDefaultRead_3>
 80006c2:	28f0      	cmp	r0, #240	; 0xf0
 80006c4:	d03a      	beq.n	800073c <??ZbZclAttrDefaultRead_7>
 80006c6:	28f1      	cmp	r0, #241	; 0xf1
 80006c8:	d040      	beq.n	800074c <??ZbZclAttrDefaultRead_10>
 80006ca:	e078      	b.n	80007be <??ZbZclAttrDefaultRead_11>

080006cc <??ZbZclAttrDefaultRead_0>:
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d102      	bne.n	80006d6 <??ZbZclAttrDefaultRead_12>
 80006d0:	2089      	movs	r0, #137	; 0x89
 80006d2:	4681      	mov	r9, r0
 80006d4:	e075      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

080006d6 <??ZbZclAttrDefaultRead_12>:
 80006d6:	2001      	movs	r0, #1
 80006d8:	4680      	mov	r8, r0
 80006da:	e072      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

080006dc <??ZbZclAttrDefaultRead_1>:
 80006dc:	2c02      	cmp	r4, #2
 80006de:	d202      	bcs.n	80006e6 <??ZbZclAttrDefaultRead_14>
 80006e0:	2089      	movs	r0, #137	; 0x89
 80006e2:	4681      	mov	r9, r0
 80006e4:	e06d      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

080006e6 <??ZbZclAttrDefaultRead_14>:
 80006e6:	2002      	movs	r0, #2
 80006e8:	4680      	mov	r8, r0
 80006ea:	e06a      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

080006ec <??ZbZclAttrDefaultRead_2>:
 80006ec:	2c03      	cmp	r4, #3
 80006ee:	d202      	bcs.n	80006f6 <??ZbZclAttrDefaultRead_15>
 80006f0:	2089      	movs	r0, #137	; 0x89
 80006f2:	4681      	mov	r9, r0
 80006f4:	e065      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

080006f6 <??ZbZclAttrDefaultRead_15>:
 80006f6:	2003      	movs	r0, #3
 80006f8:	4680      	mov	r8, r0
 80006fa:	e062      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

080006fc <??ZbZclAttrDefaultRead_3>:
 80006fc:	2c04      	cmp	r4, #4
 80006fe:	d202      	bcs.n	8000706 <??ZbZclAttrDefaultRead_16>
 8000700:	2089      	movs	r0, #137	; 0x89
 8000702:	4681      	mov	r9, r0
 8000704:	e05d      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000706 <??ZbZclAttrDefaultRead_16>:
 8000706:	2004      	movs	r0, #4
 8000708:	4680      	mov	r8, r0
 800070a:	e05a      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

0800070c <??ZbZclAttrDefaultRead_4>:
 800070c:	2c05      	cmp	r4, #5
 800070e:	d202      	bcs.n	8000716 <??ZbZclAttrDefaultRead_17>
 8000710:	2089      	movs	r0, #137	; 0x89
 8000712:	4681      	mov	r9, r0
 8000714:	e055      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000716 <??ZbZclAttrDefaultRead_17>:
 8000716:	2005      	movs	r0, #5
 8000718:	4680      	mov	r8, r0
 800071a:	e052      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

0800071c <??ZbZclAttrDefaultRead_5>:
 800071c:	2c06      	cmp	r4, #6
 800071e:	d202      	bcs.n	8000726 <??ZbZclAttrDefaultRead_18>
 8000720:	2089      	movs	r0, #137	; 0x89
 8000722:	4681      	mov	r9, r0
 8000724:	e04d      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000726 <??ZbZclAttrDefaultRead_18>:
 8000726:	2006      	movs	r0, #6
 8000728:	4680      	mov	r8, r0
 800072a:	e04a      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

0800072c <??ZbZclAttrDefaultRead_6>:
 800072c:	2c07      	cmp	r4, #7
 800072e:	d202      	bcs.n	8000736 <??ZbZclAttrDefaultRead_19>
 8000730:	2089      	movs	r0, #137	; 0x89
 8000732:	4681      	mov	r9, r0
 8000734:	e045      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000736 <??ZbZclAttrDefaultRead_19>:
 8000736:	2007      	movs	r0, #7
 8000738:	4680      	mov	r8, r0
 800073a:	e042      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

0800073c <??ZbZclAttrDefaultRead_7>:
 800073c:	2c08      	cmp	r4, #8
 800073e:	d202      	bcs.n	8000746 <??ZbZclAttrDefaultRead_20>
 8000740:	2089      	movs	r0, #137	; 0x89
 8000742:	4681      	mov	r9, r0
 8000744:	e03d      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000746 <??ZbZclAttrDefaultRead_20>:
 8000746:	2008      	movs	r0, #8
 8000748:	4680      	mov	r8, r0
 800074a:	e03a      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

0800074c <??ZbZclAttrDefaultRead_10>:
 800074c:	2c10      	cmp	r4, #16
 800074e:	d202      	bcs.n	8000756 <??ZbZclAttrDefaultRead_21>
 8000750:	2089      	movs	r0, #137	; 0x89
 8000752:	4681      	mov	r9, r0
 8000754:	e035      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000756 <??ZbZclAttrDefaultRead_21>:
 8000756:	2010      	movs	r0, #16
 8000758:	4680      	mov	r8, r0
 800075a:	e032      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

0800075c <??ZbZclAttrDefaultRead_8>:
 800075c:	2c00      	cmp	r4, #0
 800075e:	d102      	bne.n	8000766 <??ZbZclAttrDefaultRead_22>
 8000760:	2089      	movs	r0, #137	; 0x89
 8000762:	4681      	mov	r9, r0
 8000764:	e02d      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000766 <??ZbZclAttrDefaultRead_22>:
 8000766:	68f0      	ldr	r0, [r6, #12]
 8000768:	7800      	ldrb	r0, [r0, #0]
 800076a:	0001      	movs	r1, r0
 800076c:	b2c9      	uxtb	r1, r1
 800076e:	29ff      	cmp	r1, #255	; 0xff
 8000770:	d101      	bne.n	8000776 <??ZbZclAttrDefaultRead_23>
 8000772:	2100      	movs	r1, #0
 8000774:	0008      	movs	r0, r1

08000776 <??ZbZclAttrDefaultRead_23>:
 8000776:	0001      	movs	r1, r0
 8000778:	b2c9      	uxtb	r1, r1
 800077a:	1c49      	adds	r1, r1, #1
 800077c:	4688      	mov	r8, r1
 800077e:	4544      	cmp	r4, r8
 8000780:	d202      	bcs.n	8000788 <??ZbZclAttrDefaultRead_24>
 8000782:	2189      	movs	r1, #137	; 0x89
 8000784:	4689      	mov	r9, r1
 8000786:	e01c      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000788 <??ZbZclAttrDefaultRead_24>:
 8000788:	e01b      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

0800078a <??ZbZclAttrDefaultRead_9>:
 800078a:	2c00      	cmp	r4, #0
 800078c:	d102      	bne.n	8000794 <??ZbZclAttrDefaultRead_25>
 800078e:	2089      	movs	r0, #137	; 0x89
 8000790:	4681      	mov	r9, r0
 8000792:	e016      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

08000794 <??ZbZclAttrDefaultRead_25>:
 8000794:	68f0      	ldr	r0, [r6, #12]
 8000796:	f7ff fd01 	bl	800019c <pletoh16>
 800079a:	0001      	movs	r1, r0
 800079c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a0:	b289      	uxth	r1, r1
 80007a2:	4291      	cmp	r1, r2
 80007a4:	d101      	bne.n	80007aa <??ZbZclAttrDefaultRead_26>
 80007a6:	2100      	movs	r1, #0
 80007a8:	0008      	movs	r0, r1

080007aa <??ZbZclAttrDefaultRead_26>:
 80007aa:	0001      	movs	r1, r0
 80007ac:	b289      	uxth	r1, r1
 80007ae:	1c89      	adds	r1, r1, #2
 80007b0:	4688      	mov	r8, r1
 80007b2:	4544      	cmp	r4, r8
 80007b4:	d202      	bcs.n	80007bc <??ZbZclAttrDefaultRead_27>
 80007b6:	2189      	movs	r1, #137	; 0x89
 80007b8:	4689      	mov	r9, r1
 80007ba:	e002      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

080007bc <??ZbZclAttrDefaultRead_27>:
 80007bc:	e001      	b.n	80007c2 <??ZbZclAttrDefaultRead_13>

080007be <??ZbZclAttrDefaultRead_11>:
 80007be:	2086      	movs	r0, #134	; 0x86
 80007c0:	4681      	mov	r9, r0

080007c2 <??ZbZclAttrDefaultRead_13>:
 80007c2:	4648      	mov	r0, r9
 80007c4:	b2c0      	uxtb	r0, r0
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d109      	bne.n	80007de <??ZbZclAttrDefaultRead_28>
 80007ca:	f8cd 8000 	str.w	r8, [sp]
 80007ce:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80007d2:	46bb      	mov	fp, r7
 80007d4:	9a00      	ldr	r2, [sp, #0]
 80007d6:	4651      	mov	r1, sl
 80007d8:	4658      	mov	r0, fp
 80007da:	f014 fa08 	bl	8014bee <__aeabi_memcpy>

080007de <??ZbZclAttrDefaultRead_28>:
 80007de:	4648      	mov	r0, r9
 80007e0:	b2c0      	uxtb	r0, r0
 80007e2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007e6 <ZbZclAttrWrite>:
 80007e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007ea:	b096      	sub	sp, #88	; 0x58
 80007ec:	4680      	mov	r8, r0
 80007ee:	4699      	mov	r9, r3
 80007f0:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 80007f4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80007f6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80007fa:	4640      	mov	r0, r8
 80007fc:	f7ff fd9d 	bl	800033a <ZbZclAttrFind>
 8000800:	0006      	movs	r6, r0
 8000802:	2e00      	cmp	r6, #0
 8000804:	d101      	bne.n	800080a <??ZbZclAttrWrite_0>
 8000806:	2086      	movs	r0, #134	; 0x86
 8000808:	e0a2      	b.n	8000950 <??ZbZclAttrWrite_1>

0800080a <??ZbZclAttrWrite_0>:
 800080a:	68b0      	ldr	r0, [r6, #8]
 800080c:	7900      	ldrb	r0, [r0, #4]
 800080e:	f010 0001 	ands.w	r0, r0, #1
 8000812:	b2c0      	uxtb	r0, r0
 8000814:	2800      	cmp	r0, #0
 8000816:	d105      	bne.n	8000824 <??ZbZclAttrWrite_2>
 8000818:	0038      	movs	r0, r7
 800081a:	b280      	uxth	r0, r0
 800081c:	0780      	lsls	r0, r0, #30
 800081e:	d401      	bmi.n	8000824 <??ZbZclAttrWrite_2>
 8000820:	2088      	movs	r0, #136	; 0x88
 8000822:	e095      	b.n	8000950 <??ZbZclAttrWrite_1>

08000824 <??ZbZclAttrWrite_2>:
 8000824:	2300      	movs	r3, #0
 8000826:	4652      	mov	r2, sl
 8000828:	4649      	mov	r1, r9
 800082a:	68b0      	ldr	r0, [r6, #8]
 800082c:	7880      	ldrb	r0, [r0, #2]
 800082e:	f000 fcb0 	bl	8001192 <ZbZclAttrParseLength>
 8000832:	9005      	str	r0, [sp, #20]
 8000834:	9805      	ldr	r0, [sp, #20]
 8000836:	2800      	cmp	r0, #0
 8000838:	d501      	bpl.n	800083e <??ZbZclAttrWrite_3>
 800083a:	2087      	movs	r0, #135	; 0x87
 800083c:	e088      	b.n	8000950 <??ZbZclAttrWrite_1>

0800083e <??ZbZclAttrWrite_3>:
 800083e:	68b0      	ldr	r0, [r6, #8]
 8000840:	7880      	ldrb	r0, [r0, #2]
 8000842:	f000 ff83 	bl	800174c <ZbZclAttrIsInteger>
 8000846:	2800      	cmp	r0, #0
 8000848:	d026      	beq.n	8000898 <??ZbZclAttrWrite_4>
 800084a:	aa04      	add	r2, sp, #16
 800084c:	4649      	mov	r1, r9
 800084e:	68b0      	ldr	r0, [r6, #8]
 8000850:	7880      	ldrb	r0, [r0, #2]
 8000852:	f000 fe4d 	bl	80014f0 <ZbZclParseInteger>
 8000856:	0004      	movs	r4, r0
 8000858:	000d      	movs	r5, r1
 800085a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800085e:	2800      	cmp	r0, #0
 8000860:	d002      	beq.n	8000868 <??ZbZclAttrWrite_5>
 8000862:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000866:	e073      	b.n	8000950 <??ZbZclAttrWrite_1>

08000868 <??ZbZclAttrWrite_5>:
 8000868:	68b0      	ldr	r0, [r6, #8]
 800086a:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 800086e:	f005 ff89 	bl	8006784 <__aeabi_d2lz>
 8000872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000876:	68b0      	ldr	r0, [r6, #8]
 8000878:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800087c:	f005 ff82 	bl	8006784 <__aeabi_d2lz>
 8000880:	e9cd 0100 	strd	r0, r1, [sp]
 8000884:	68b0      	ldr	r0, [r6, #8]
 8000886:	7882      	ldrb	r2, [r0, #2]
 8000888:	0020      	movs	r0, r4
 800088a:	0029      	movs	r1, r5
 800088c:	f000 ff74 	bl	8001778 <ZbZclAttrIntegerRangeCheck>
 8000890:	2800      	cmp	r0, #0
 8000892:	d101      	bne.n	8000898 <??ZbZclAttrWrite_4>
 8000894:	2087      	movs	r0, #135	; 0x87
 8000896:	e05b      	b.n	8000950 <??ZbZclAttrWrite_1>

08000898 <??ZbZclAttrWrite_4>:
 8000898:	68b0      	ldr	r0, [r6, #8]
 800089a:	7900      	ldrb	r0, [r0, #4]
 800089c:	0680      	lsls	r0, r0, #26
 800089e:	d522      	bpl.n	80008e6 <??ZbZclAttrWrite_6>
 80008a0:	2420      	movs	r4, #32
 80008a2:	2500      	movs	r5, #0
 80008a4:	f10d 0b18 	add.w	fp, sp, #24
 80008a8:	002a      	movs	r2, r5
 80008aa:	0021      	movs	r1, r4
 80008ac:	4658      	mov	r0, fp
 80008ae:	f005 fa05 	bl	8005cbc <__aeabi_memset>
 80008b2:	68b0      	ldr	r0, [r6, #8]
 80008b4:	9006      	str	r0, [sp, #24]
 80008b6:	2001      	movs	r0, #1
 80008b8:	f88d 001c 	strb.w	r0, [sp, #28]
 80008bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80008be:	900c      	str	r0, [sp, #48]	; 0x30
 80008c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80008c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80008c8:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 80008cc:	68f0      	ldr	r0, [r6, #12]
 80008ce:	900b      	str	r0, [sp, #44]	; 0x2c
 80008d0:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 80008d4:	900d      	str	r0, [sp, #52]	; 0x34
 80008d6:	aa06      	add	r2, sp, #24
 80008d8:	0031      	movs	r1, r6
 80008da:	4640      	mov	r0, r8
 80008dc:	f001 fb5e 	bl	8001f9c <ZbZclAttrCallbackExec>
 80008e0:	f88d 0010 	strb.w	r0, [sp, #16]
 80008e4:	e028      	b.n	8000938 <??ZbZclAttrWrite_7>

080008e6 <??ZbZclAttrWrite_6>:
 80008e6:	003b      	movs	r3, r7
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	464a      	mov	r2, r9
 80008ec:	0031      	movs	r1, r6
 80008ee:	4640      	mov	r0, r8
 80008f0:	f000 f85e 	bl	80009b0 <ZbZclAttrDefaultWrite>
 80008f4:	f88d 0010 	strb.w	r0, [sp, #16]
 80008f8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d11b      	bne.n	8000938 <??ZbZclAttrWrite_7>
 8000900:	68b0      	ldr	r0, [r6, #8]
 8000902:	7900      	ldrb	r0, [r0, #4]
 8000904:	0640      	lsls	r0, r0, #25
 8000906:	d517      	bpl.n	8000938 <??ZbZclAttrWrite_7>
 8000908:	2420      	movs	r4, #32
 800090a:	2500      	movs	r5, #0
 800090c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8000910:	002a      	movs	r2, r5
 8000912:	0021      	movs	r1, r4
 8000914:	4658      	mov	r0, fp
 8000916:	f005 f9d1 	bl	8005cbc <__aeabi_memset>
 800091a:	68b0      	ldr	r0, [r6, #8]
 800091c:	900e      	str	r0, [sp, #56]	; 0x38
 800091e:	2002      	movs	r0, #2
 8000920:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 8000924:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000926:	9014      	str	r0, [sp, #80]	; 0x50
 8000928:	f8d8 0054 	ldr.w	r0, [r8, #84]	; 0x54
 800092c:	9015      	str	r0, [sp, #84]	; 0x54
 800092e:	aa0e      	add	r2, sp, #56	; 0x38
 8000930:	0031      	movs	r1, r6
 8000932:	4640      	mov	r0, r8
 8000934:	f001 fb32 	bl	8001f9c <ZbZclAttrCallbackExec>

08000938 <??ZbZclAttrWrite_7>:
 8000938:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800093c:	2800      	cmp	r0, #0
 800093e:	d002      	beq.n	8000946 <??ZbZclAttrWrite_8>
 8000940:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000944:	e004      	b.n	8000950 <??ZbZclAttrWrite_1>

08000946 <??ZbZclAttrWrite_8>:
 8000946:	0031      	movs	r1, r6
 8000948:	4640      	mov	r0, r8
 800094a:	f000 f804 	bl	8000956 <ZbZclAttrPostWrite>
 800094e:	2000      	movs	r0, #0

08000950 <??ZbZclAttrWrite_1>:
 8000950:	b019      	add	sp, #100	; 0x64
 8000952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000956 <ZbZclAttrPostWrite>:
 8000956:	b538      	push	{r3, r4, r5, lr}
 8000958:	0005      	movs	r5, r0
 800095a:	000c      	movs	r4, r1
 800095c:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800095e:	2800      	cmp	r0, #0
 8000960:	d004      	beq.n	800096c <??ZbZclAttrPostWrite_0>
 8000962:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000966:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8000968:	f011 fa7e 	bl	8011e68 <ZbTimerReset>

0800096c <??ZbZclAttrPostWrite_0>:
 800096c:	2c00      	cmp	r4, #0
 800096e:	d005      	beq.n	800097c <??ZbZclAttrPostWrite_1>
 8000970:	2200      	movs	r2, #0
 8000972:	68a0      	ldr	r0, [r4, #8]
 8000974:	8801      	ldrh	r1, [r0, #0]
 8000976:	0028      	movs	r0, r5
 8000978:	f001 ffcb 	bl	8002912 <zcl_attr_reporting_check>

0800097c <??ZbZclAttrPostWrite_1>:
 800097c:	bd31      	pop	{r0, r4, r5, pc}

0800097e <ZbZclAttrPersist>:
 800097e:	b570      	push	{r4, r5, r6, lr}
 8000980:	0005      	movs	r5, r0
 8000982:	000e      	movs	r6, r1
 8000984:	0031      	movs	r1, r6
 8000986:	b289      	uxth	r1, r1
 8000988:	0028      	movs	r0, r5
 800098a:	f7ff fcd6 	bl	800033a <ZbZclAttrFind>
 800098e:	0004      	movs	r4, r0
 8000990:	2c00      	cmp	r4, #0
 8000992:	d101      	bne.n	8000998 <??ZbZclAttrPersist_0>
 8000994:	2000      	movs	r0, #0
 8000996:	e00a      	b.n	80009ae <??ZbZclAttrPersist_1>

08000998 <??ZbZclAttrPersist_0>:
 8000998:	68a0      	ldr	r0, [r4, #8]
 800099a:	7900      	ldrb	r0, [r0, #4]
 800099c:	0740      	lsls	r0, r0, #29
 800099e:	d401      	bmi.n	80009a4 <??ZbZclAttrPersist_2>
 80009a0:	2000      	movs	r0, #0
 80009a2:	e004      	b.n	80009ae <??ZbZclAttrPersist_1>

080009a4 <??ZbZclAttrPersist_2>:
 80009a4:	0021      	movs	r1, r4
 80009a6:	0028      	movs	r0, r5
 80009a8:	f7ff ffd5 	bl	8000956 <ZbZclAttrPostWrite>
 80009ac:	2001      	movs	r0, #1

080009ae <??ZbZclAttrPersist_1>:
 80009ae:	bd70      	pop	{r4, r5, r6, pc}

080009b0 <ZbZclAttrDefaultWrite>:
 80009b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b4:	0006      	movs	r6, r0
 80009b6:	000f      	movs	r7, r1
 80009b8:	0014      	movs	r4, r2
 80009ba:	4698      	mov	r8, r3
 80009bc:	2500      	movs	r5, #0
 80009be:	f05f 0900 	movs.w	r9, #0
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d101      	bne.n	80009ca <??ZbZclAttrDefaultWrite_0>
 80009c6:	2001      	movs	r0, #1
 80009c8:	e0d6      	b.n	8000b78 <??ZbZclAttrDefaultWrite_1>

080009ca <??ZbZclAttrDefaultWrite_0>:
 80009ca:	68b8      	ldr	r0, [r7, #8]
 80009cc:	7880      	ldrb	r0, [r0, #2]
 80009ce:	2808      	cmp	r0, #8
 80009d0:	d062      	beq.n	8000a98 <??ZbZclAttrDefaultWrite_2>
 80009d2:	2809      	cmp	r0, #9
 80009d4:	d063      	beq.n	8000a9e <??ZbZclAttrDefaultWrite_3>
 80009d6:	280a      	cmp	r0, #10
 80009d8:	d064      	beq.n	8000aa4 <??ZbZclAttrDefaultWrite_4>
 80009da:	280b      	cmp	r0, #11
 80009dc:	d065      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 80009de:	280c      	cmp	r0, #12
 80009e0:	d066      	beq.n	8000ab0 <??ZbZclAttrDefaultWrite_6>
 80009e2:	280d      	cmp	r0, #13
 80009e4:	d067      	beq.n	8000ab6 <??ZbZclAttrDefaultWrite_7>
 80009e6:	280e      	cmp	r0, #14
 80009e8:	d068      	beq.n	8000abc <??ZbZclAttrDefaultWrite_8>
 80009ea:	280f      	cmp	r0, #15
 80009ec:	d069      	beq.n	8000ac2 <??ZbZclAttrDefaultWrite_9>
 80009ee:	2810      	cmp	r0, #16
 80009f0:	d052      	beq.n	8000a98 <??ZbZclAttrDefaultWrite_2>
 80009f2:	2818      	cmp	r0, #24
 80009f4:	d050      	beq.n	8000a98 <??ZbZclAttrDefaultWrite_2>
 80009f6:	2819      	cmp	r0, #25
 80009f8:	d051      	beq.n	8000a9e <??ZbZclAttrDefaultWrite_3>
 80009fa:	281a      	cmp	r0, #26
 80009fc:	d052      	beq.n	8000aa4 <??ZbZclAttrDefaultWrite_4>
 80009fe:	281b      	cmp	r0, #27
 8000a00:	d053      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 8000a02:	281c      	cmp	r0, #28
 8000a04:	d054      	beq.n	8000ab0 <??ZbZclAttrDefaultWrite_6>
 8000a06:	281d      	cmp	r0, #29
 8000a08:	d055      	beq.n	8000ab6 <??ZbZclAttrDefaultWrite_7>
 8000a0a:	281e      	cmp	r0, #30
 8000a0c:	d056      	beq.n	8000abc <??ZbZclAttrDefaultWrite_8>
 8000a0e:	281f      	cmp	r0, #31
 8000a10:	d057      	beq.n	8000ac2 <??ZbZclAttrDefaultWrite_9>
 8000a12:	2820      	cmp	r0, #32
 8000a14:	d040      	beq.n	8000a98 <??ZbZclAttrDefaultWrite_2>
 8000a16:	2821      	cmp	r0, #33	; 0x21
 8000a18:	d041      	beq.n	8000a9e <??ZbZclAttrDefaultWrite_3>
 8000a1a:	2822      	cmp	r0, #34	; 0x22
 8000a1c:	d042      	beq.n	8000aa4 <??ZbZclAttrDefaultWrite_4>
 8000a1e:	2823      	cmp	r0, #35	; 0x23
 8000a20:	d043      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 8000a22:	2824      	cmp	r0, #36	; 0x24
 8000a24:	d044      	beq.n	8000ab0 <??ZbZclAttrDefaultWrite_6>
 8000a26:	2825      	cmp	r0, #37	; 0x25
 8000a28:	d045      	beq.n	8000ab6 <??ZbZclAttrDefaultWrite_7>
 8000a2a:	2826      	cmp	r0, #38	; 0x26
 8000a2c:	d046      	beq.n	8000abc <??ZbZclAttrDefaultWrite_8>
 8000a2e:	2827      	cmp	r0, #39	; 0x27
 8000a30:	d047      	beq.n	8000ac2 <??ZbZclAttrDefaultWrite_9>
 8000a32:	2828      	cmp	r0, #40	; 0x28
 8000a34:	d030      	beq.n	8000a98 <??ZbZclAttrDefaultWrite_2>
 8000a36:	2829      	cmp	r0, #41	; 0x29
 8000a38:	d031      	beq.n	8000a9e <??ZbZclAttrDefaultWrite_3>
 8000a3a:	282a      	cmp	r0, #42	; 0x2a
 8000a3c:	d032      	beq.n	8000aa4 <??ZbZclAttrDefaultWrite_4>
 8000a3e:	282b      	cmp	r0, #43	; 0x2b
 8000a40:	d033      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 8000a42:	282c      	cmp	r0, #44	; 0x2c
 8000a44:	d034      	beq.n	8000ab0 <??ZbZclAttrDefaultWrite_6>
 8000a46:	282d      	cmp	r0, #45	; 0x2d
 8000a48:	d035      	beq.n	8000ab6 <??ZbZclAttrDefaultWrite_7>
 8000a4a:	282e      	cmp	r0, #46	; 0x2e
 8000a4c:	d036      	beq.n	8000abc <??ZbZclAttrDefaultWrite_8>
 8000a4e:	282f      	cmp	r0, #47	; 0x2f
 8000a50:	d037      	beq.n	8000ac2 <??ZbZclAttrDefaultWrite_9>
 8000a52:	2830      	cmp	r0, #48	; 0x30
 8000a54:	d020      	beq.n	8000a98 <??ZbZclAttrDefaultWrite_2>
 8000a56:	2831      	cmp	r0, #49	; 0x31
 8000a58:	d021      	beq.n	8000a9e <??ZbZclAttrDefaultWrite_3>
 8000a5a:	2838      	cmp	r0, #56	; 0x38
 8000a5c:	d01f      	beq.n	8000a9e <??ZbZclAttrDefaultWrite_3>
 8000a5e:	2839      	cmp	r0, #57	; 0x39
 8000a60:	d023      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 8000a62:	283a      	cmp	r0, #58	; 0x3a
 8000a64:	d02d      	beq.n	8000ac2 <??ZbZclAttrDefaultWrite_9>
 8000a66:	2841      	cmp	r0, #65	; 0x41
 8000a68:	d031      	beq.n	8000ace <??ZbZclAttrDefaultWrite_10>
 8000a6a:	2842      	cmp	r0, #66	; 0x42
 8000a6c:	d02f      	beq.n	8000ace <??ZbZclAttrDefaultWrite_10>
 8000a6e:	2843      	cmp	r0, #67	; 0x43
 8000a70:	d049      	beq.n	8000b06 <??ZbZclAttrDefaultWrite_11>
 8000a72:	2844      	cmp	r0, #68	; 0x44
 8000a74:	d047      	beq.n	8000b06 <??ZbZclAttrDefaultWrite_11>
 8000a76:	28e0      	cmp	r0, #224	; 0xe0
 8000a78:	d017      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 8000a7a:	28e1      	cmp	r0, #225	; 0xe1
 8000a7c:	d015      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 8000a7e:	28e2      	cmp	r0, #226	; 0xe2
 8000a80:	d013      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 8000a82:	28e8      	cmp	r0, #232	; 0xe8
 8000a84:	d00b      	beq.n	8000a9e <??ZbZclAttrDefaultWrite_3>
 8000a86:	28e9      	cmp	r0, #233	; 0xe9
 8000a88:	d009      	beq.n	8000a9e <??ZbZclAttrDefaultWrite_3>
 8000a8a:	28ea      	cmp	r0, #234	; 0xea
 8000a8c:	d00d      	beq.n	8000aaa <??ZbZclAttrDefaultWrite_5>
 8000a8e:	28f0      	cmp	r0, #240	; 0xf0
 8000a90:	d017      	beq.n	8000ac2 <??ZbZclAttrDefaultWrite_9>
 8000a92:	28f1      	cmp	r0, #241	; 0xf1
 8000a94:	d018      	beq.n	8000ac8 <??ZbZclAttrDefaultWrite_12>
 8000a96:	e058      	b.n	8000b4a <??ZbZclAttrDefaultWrite_13>

08000a98 <??ZbZclAttrDefaultWrite_2>:
 8000a98:	2001      	movs	r0, #1
 8000a9a:	0005      	movs	r5, r0
 8000a9c:	e057      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000a9e <??ZbZclAttrDefaultWrite_3>:
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	0005      	movs	r5, r0
 8000aa2:	e054      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000aa4 <??ZbZclAttrDefaultWrite_4>:
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	0005      	movs	r5, r0
 8000aa8:	e051      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000aaa <??ZbZclAttrDefaultWrite_5>:
 8000aaa:	2004      	movs	r0, #4
 8000aac:	0005      	movs	r5, r0
 8000aae:	e04e      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000ab0 <??ZbZclAttrDefaultWrite_6>:
 8000ab0:	2005      	movs	r0, #5
 8000ab2:	0005      	movs	r5, r0
 8000ab4:	e04b      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000ab6 <??ZbZclAttrDefaultWrite_7>:
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	0005      	movs	r5, r0
 8000aba:	e048      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000abc <??ZbZclAttrDefaultWrite_8>:
 8000abc:	2007      	movs	r0, #7
 8000abe:	0005      	movs	r5, r0
 8000ac0:	e045      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000ac2 <??ZbZclAttrDefaultWrite_9>:
 8000ac2:	2008      	movs	r0, #8
 8000ac4:	0005      	movs	r5, r0
 8000ac6:	e042      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000ac8 <??ZbZclAttrDefaultWrite_12>:
 8000ac8:	2010      	movs	r0, #16
 8000aca:	0005      	movs	r5, r0
 8000acc:	e03f      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000ace <??ZbZclAttrDefaultWrite_10>:
 8000ace:	6938      	ldr	r0, [r7, #16]
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d102      	bne.n	8000ada <??ZbZclAttrDefaultWrite_15>
 8000ad4:	2089      	movs	r0, #137	; 0x89
 8000ad6:	4681      	mov	r9, r0
 8000ad8:	e039      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000ada <??ZbZclAttrDefaultWrite_15>:
 8000ada:	7820      	ldrb	r0, [r4, #0]
 8000adc:	0001      	movs	r1, r0
 8000ade:	b2c9      	uxtb	r1, r1
 8000ae0:	29ff      	cmp	r1, #255	; 0xff
 8000ae2:	d105      	bne.n	8000af0 <??ZbZclAttrDefaultWrite_16>
 8000ae4:	21ff      	movs	r1, #255	; 0xff
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	7011      	strb	r1, [r2, #0]
 8000aea:	2100      	movs	r1, #0
 8000aec:	000d      	movs	r5, r1
 8000aee:	e02e      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000af0 <??ZbZclAttrDefaultWrite_16>:
 8000af0:	0001      	movs	r1, r0
 8000af2:	b2c9      	uxtb	r1, r1
 8000af4:	1c49      	adds	r1, r1, #1
 8000af6:	000d      	movs	r5, r1
 8000af8:	6939      	ldr	r1, [r7, #16]
 8000afa:	42a9      	cmp	r1, r5
 8000afc:	d202      	bcs.n	8000b04 <??ZbZclAttrDefaultWrite_17>
 8000afe:	2189      	movs	r1, #137	; 0x89
 8000b00:	4689      	mov	r9, r1
 8000b02:	e024      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000b04 <??ZbZclAttrDefaultWrite_17>:
 8000b04:	e023      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000b06 <??ZbZclAttrDefaultWrite_11>:
 8000b06:	6938      	ldr	r0, [r7, #16]
 8000b08:	2802      	cmp	r0, #2
 8000b0a:	d202      	bcs.n	8000b12 <??ZbZclAttrDefaultWrite_18>
 8000b0c:	2089      	movs	r0, #137	; 0x89
 8000b0e:	4681      	mov	r9, r0
 8000b10:	e01d      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000b12 <??ZbZclAttrDefaultWrite_18>:
 8000b12:	0020      	movs	r0, r4
 8000b14:	f7ff fb42 	bl	800019c <pletoh16>
 8000b18:	4682      	mov	sl, r0
 8000b1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b1e:	4650      	mov	r0, sl
 8000b20:	000a      	movs	r2, r1
 8000b22:	b280      	uxth	r0, r0
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d105      	bne.n	8000b34 <??ZbZclAttrDefaultWrite_19>
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fb83 	bl	8000234 <putle16>
 8000b2e:	2000      	movs	r0, #0
 8000b30:	0005      	movs	r5, r0
 8000b32:	e00c      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000b34 <??ZbZclAttrDefaultWrite_19>:
 8000b34:	4650      	mov	r0, sl
 8000b36:	b280      	uxth	r0, r0
 8000b38:	1c80      	adds	r0, r0, #2
 8000b3a:	0005      	movs	r5, r0
 8000b3c:	6938      	ldr	r0, [r7, #16]
 8000b3e:	42a8      	cmp	r0, r5
 8000b40:	d202      	bcs.n	8000b48 <??ZbZclAttrDefaultWrite_20>
 8000b42:	2089      	movs	r0, #137	; 0x89
 8000b44:	4681      	mov	r9, r0
 8000b46:	e002      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000b48 <??ZbZclAttrDefaultWrite_20>:
 8000b48:	e001      	b.n	8000b4e <??ZbZclAttrDefaultWrite_14>

08000b4a <??ZbZclAttrDefaultWrite_13>:
 8000b4a:	2086      	movs	r0, #134	; 0x86
 8000b4c:	4681      	mov	r9, r0

08000b4e <??ZbZclAttrDefaultWrite_14>:
 8000b4e:	4648      	mov	r0, r9
 8000b50:	b2c0      	uxtb	r0, r0
 8000b52:	2800      	cmp	r0, #0
 8000b54:	d10e      	bne.n	8000b74 <??ZbZclAttrDefaultWrite_21>
 8000b56:	4640      	mov	r0, r8
 8000b58:	b280      	uxth	r0, r0
 8000b5a:	07c0      	lsls	r0, r0, #31
 8000b5c:	d40a      	bmi.n	8000b74 <??ZbZclAttrDefaultWrite_21>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d008      	beq.n	8000b74 <??ZbZclAttrDefaultWrite_21>
 8000b62:	9500      	str	r5, [sp, #0]
 8000b64:	46a2      	mov	sl, r4
 8000b66:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8000b6a:	9a00      	ldr	r2, [sp, #0]
 8000b6c:	4651      	mov	r1, sl
 8000b6e:	4658      	mov	r0, fp
 8000b70:	f014 f83d 	bl	8014bee <__aeabi_memcpy>

08000b74 <??ZbZclAttrDefaultWrite_21>:
 8000b74:	4648      	mov	r0, r9
 8000b76:	b2c0      	uxtb	r0, r0

08000b78 <??ZbZclAttrDefaultWrite_1>:
 8000b78:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b7c <ZbZclAttrDefaultValue>:
 8000b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b80:	0004      	movs	r4, r0
 8000b82:	4688      	mov	r8, r1
 8000b84:	0015      	movs	r5, r2
 8000b86:	2600      	movs	r6, #0
 8000b88:	f05f 37ff 	movs.w	r7, #4294967295
 8000b8c:	0020      	movs	r0, r4
 8000b8e:	b2c0      	uxtb	r0, r0
 8000b90:	2800      	cmp	r0, #0
 8000b92:	f000 80a1 	beq.w	8000cd8 <??ZbZclAttrDefaultValue_0>
 8000b96:	2808      	cmp	r0, #8
 8000b98:	f000 80e7 	beq.w	8000d6a <??ZbZclAttrDefaultValue_1>
 8000b9c:	2809      	cmp	r0, #9
 8000b9e:	f000 80da 	beq.w	8000d56 <??ZbZclAttrDefaultValue_2>
 8000ba2:	280a      	cmp	r0, #10
 8000ba4:	f000 80cd 	beq.w	8000d42 <??ZbZclAttrDefaultValue_3>
 8000ba8:	280b      	cmp	r0, #11
 8000baa:	f000 80c0 	beq.w	8000d2e <??ZbZclAttrDefaultValue_4>
 8000bae:	280c      	cmp	r0, #12
 8000bb0:	f000 80b3 	beq.w	8000d1a <??ZbZclAttrDefaultValue_5>
 8000bb4:	280d      	cmp	r0, #13
 8000bb6:	f000 80a6 	beq.w	8000d06 <??ZbZclAttrDefaultValue_6>
 8000bba:	280e      	cmp	r0, #14
 8000bbc:	f000 8099 	beq.w	8000cf2 <??ZbZclAttrDefaultValue_7>
 8000bc0:	280f      	cmp	r0, #15
 8000bc2:	f000 808c 	beq.w	8000cde <??ZbZclAttrDefaultValue_8>
 8000bc6:	2810      	cmp	r0, #16
 8000bc8:	f000 80db 	beq.w	8000d82 <??ZbZclAttrDefaultValue_9>
 8000bcc:	2818      	cmp	r0, #24
 8000bce:	f000 8126 	beq.w	8000e1e <??ZbZclAttrDefaultValue_10>
 8000bd2:	2819      	cmp	r0, #25
 8000bd4:	f000 8119 	beq.w	8000e0a <??ZbZclAttrDefaultValue_11>
 8000bd8:	281a      	cmp	r0, #26
 8000bda:	f000 810c 	beq.w	8000df6 <??ZbZclAttrDefaultValue_12>
 8000bde:	281b      	cmp	r0, #27
 8000be0:	f000 80ff 	beq.w	8000de2 <??ZbZclAttrDefaultValue_13>
 8000be4:	281c      	cmp	r0, #28
 8000be6:	f000 80f2 	beq.w	8000dce <??ZbZclAttrDefaultValue_14>
 8000bea:	281d      	cmp	r0, #29
 8000bec:	f000 80e5 	beq.w	8000dba <??ZbZclAttrDefaultValue_15>
 8000bf0:	281e      	cmp	r0, #30
 8000bf2:	f000 80d8 	beq.w	8000da6 <??ZbZclAttrDefaultValue_16>
 8000bf6:	281f      	cmp	r0, #31
 8000bf8:	f000 80cb 	beq.w	8000d92 <??ZbZclAttrDefaultValue_17>
 8000bfc:	2820      	cmp	r0, #32
 8000bfe:	f000 80b4 	beq.w	8000d6a <??ZbZclAttrDefaultValue_1>
 8000c02:	2821      	cmp	r0, #33	; 0x21
 8000c04:	f000 80a7 	beq.w	8000d56 <??ZbZclAttrDefaultValue_2>
 8000c08:	2822      	cmp	r0, #34	; 0x22
 8000c0a:	f000 809a 	beq.w	8000d42 <??ZbZclAttrDefaultValue_3>
 8000c0e:	2823      	cmp	r0, #35	; 0x23
 8000c10:	f000 808d 	beq.w	8000d2e <??ZbZclAttrDefaultValue_4>
 8000c14:	2824      	cmp	r0, #36	; 0x24
 8000c16:	f000 8080 	beq.w	8000d1a <??ZbZclAttrDefaultValue_5>
 8000c1a:	2825      	cmp	r0, #37	; 0x25
 8000c1c:	d073      	beq.n	8000d06 <??ZbZclAttrDefaultValue_6>
 8000c1e:	2826      	cmp	r0, #38	; 0x26
 8000c20:	d067      	beq.n	8000cf2 <??ZbZclAttrDefaultValue_7>
 8000c22:	2827      	cmp	r0, #39	; 0x27
 8000c24:	d05b      	beq.n	8000cde <??ZbZclAttrDefaultValue_8>
 8000c26:	2828      	cmp	r0, #40	; 0x28
 8000c28:	f000 814b 	beq.w	8000ec2 <??ZbZclAttrDefaultValue_18>
 8000c2c:	2829      	cmp	r0, #41	; 0x29
 8000c2e:	f000 813e 	beq.w	8000eae <??ZbZclAttrDefaultValue_19>
 8000c32:	282a      	cmp	r0, #42	; 0x2a
 8000c34:	f000 8131 	beq.w	8000e9a <??ZbZclAttrDefaultValue_20>
 8000c38:	282b      	cmp	r0, #43	; 0x2b
 8000c3a:	f000 8124 	beq.w	8000e86 <??ZbZclAttrDefaultValue_21>
 8000c3e:	282c      	cmp	r0, #44	; 0x2c
 8000c40:	f000 8117 	beq.w	8000e72 <??ZbZclAttrDefaultValue_22>
 8000c44:	282d      	cmp	r0, #45	; 0x2d
 8000c46:	f000 810a 	beq.w	8000e5e <??ZbZclAttrDefaultValue_23>
 8000c4a:	282e      	cmp	r0, #46	; 0x2e
 8000c4c:	f000 80fd 	beq.w	8000e4a <??ZbZclAttrDefaultValue_24>
 8000c50:	282f      	cmp	r0, #47	; 0x2f
 8000c52:	f000 80f0 	beq.w	8000e36 <??ZbZclAttrDefaultValue_25>
 8000c56:	2830      	cmp	r0, #48	; 0x30
 8000c58:	f000 8087 	beq.w	8000d6a <??ZbZclAttrDefaultValue_1>
 8000c5c:	2831      	cmp	r0, #49	; 0x31
 8000c5e:	d07a      	beq.n	8000d56 <??ZbZclAttrDefaultValue_2>
 8000c60:	2838      	cmp	r0, #56	; 0x38
 8000c62:	f000 813a 	beq.w	8000eda <??ZbZclAttrDefaultValue_26>
 8000c66:	2839      	cmp	r0, #57	; 0x39
 8000c68:	f000 8142 	beq.w	8000ef0 <??ZbZclAttrDefaultValue_27>
 8000c6c:	283a      	cmp	r0, #58	; 0x3a
 8000c6e:	f000 8149 	beq.w	8000f04 <??ZbZclAttrDefaultValue_28>
 8000c72:	2841      	cmp	r0, #65	; 0x41
 8000c74:	f000 8152 	beq.w	8000f1c <??ZbZclAttrDefaultValue_29>
 8000c78:	2842      	cmp	r0, #66	; 0x42
 8000c7a:	f000 8159 	beq.w	8000f30 <??ZbZclAttrDefaultValue_30>
 8000c7e:	2843      	cmp	r0, #67	; 0x43
 8000c80:	f000 8160 	beq.w	8000f44 <??ZbZclAttrDefaultValue_31>
 8000c84:	2844      	cmp	r0, #68	; 0x44
 8000c86:	f000 8168 	beq.w	8000f5a <??ZbZclAttrDefaultValue_32>
 8000c8a:	2848      	cmp	r0, #72	; 0x48
 8000c8c:	f000 818b 	beq.w	8000fa6 <??ZbZclAttrDefaultValue_33>
 8000c90:	284c      	cmp	r0, #76	; 0x4c
 8000c92:	f000 8192 	beq.w	8000fba <??ZbZclAttrDefaultValue_34>
 8000c96:	2850      	cmp	r0, #80	; 0x50
 8000c98:	f000 8199 	beq.w	8000fce <??ZbZclAttrDefaultValue_35>
 8000c9c:	2851      	cmp	r0, #81	; 0x51
 8000c9e:	f000 81a0 	beq.w	8000fe2 <??ZbZclAttrDefaultValue_36>
 8000ca2:	28e0      	cmp	r0, #224	; 0xe0
 8000ca4:	f000 81a7 	beq.w	8000ff6 <??ZbZclAttrDefaultValue_37>
 8000ca8:	28e1      	cmp	r0, #225	; 0xe1
 8000caa:	f000 81ae 	beq.w	800100a <??ZbZclAttrDefaultValue_38>
 8000cae:	28e2      	cmp	r0, #226	; 0xe2
 8000cb0:	f000 81b5 	beq.w	800101e <??ZbZclAttrDefaultValue_39>
 8000cb4:	28e8      	cmp	r0, #232	; 0xe8
 8000cb6:	f000 81bc 	beq.w	8001032 <??ZbZclAttrDefaultValue_40>
 8000cba:	28e9      	cmp	r0, #233	; 0xe9
 8000cbc:	f000 81c3 	beq.w	8001046 <??ZbZclAttrDefaultValue_41>
 8000cc0:	28ea      	cmp	r0, #234	; 0xea
 8000cc2:	f000 81ca 	beq.w	800105a <??ZbZclAttrDefaultValue_42>
 8000cc6:	28f0      	cmp	r0, #240	; 0xf0
 8000cc8:	f000 8152 	beq.w	8000f70 <??ZbZclAttrDefaultValue_43>
 8000ccc:	28f1      	cmp	r0, #241	; 0xf1
 8000cce:	f000 815b 	beq.w	8000f88 <??ZbZclAttrDefaultValue_44>
 8000cd2:	28ff      	cmp	r0, #255	; 0xff
 8000cd4:	f040 81cb 	bne.w	800106e <??ZbZclAttrDefaultValue_45>

08000cd8 <??ZbZclAttrDefaultValue_0>:
 8000cd8:	2000      	movs	r0, #0
 8000cda:	0007      	movs	r7, r0
 8000cdc:	e1c7      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000cde <??ZbZclAttrDefaultValue_8>:
 8000cde:	1c70      	adds	r0, r6, #1
 8000ce0:	4285      	cmp	r5, r0
 8000ce2:	f0c0 81c4 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000ce6 <??ZbZclAttrDefaultValue_47>:
 8000ce6:	20ff      	movs	r0, #255	; 0xff
 8000ce8:	f888 0000 	strb.w	r0, [r8]
 8000cec:	f118 0801 	adds.w	r8, r8, #1
 8000cf0:	1c76      	adds	r6, r6, #1

08000cf2 <??ZbZclAttrDefaultValue_7>:
 8000cf2:	1c70      	adds	r0, r6, #1
 8000cf4:	4285      	cmp	r5, r0
 8000cf6:	f0c0 81ba 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000cfa <??ZbZclAttrDefaultValue_48>:
 8000cfa:	20ff      	movs	r0, #255	; 0xff
 8000cfc:	f888 0000 	strb.w	r0, [r8]
 8000d00:	f118 0801 	adds.w	r8, r8, #1
 8000d04:	1c76      	adds	r6, r6, #1

08000d06 <??ZbZclAttrDefaultValue_6>:
 8000d06:	1c70      	adds	r0, r6, #1
 8000d08:	4285      	cmp	r5, r0
 8000d0a:	f0c0 81b0 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000d0e <??ZbZclAttrDefaultValue_49>:
 8000d0e:	20ff      	movs	r0, #255	; 0xff
 8000d10:	f888 0000 	strb.w	r0, [r8]
 8000d14:	f118 0801 	adds.w	r8, r8, #1
 8000d18:	1c76      	adds	r6, r6, #1

08000d1a <??ZbZclAttrDefaultValue_5>:
 8000d1a:	1c70      	adds	r0, r6, #1
 8000d1c:	4285      	cmp	r5, r0
 8000d1e:	f0c0 81a6 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000d22 <??ZbZclAttrDefaultValue_50>:
 8000d22:	20ff      	movs	r0, #255	; 0xff
 8000d24:	f888 0000 	strb.w	r0, [r8]
 8000d28:	f118 0801 	adds.w	r8, r8, #1
 8000d2c:	1c76      	adds	r6, r6, #1

08000d2e <??ZbZclAttrDefaultValue_4>:
 8000d2e:	1c70      	adds	r0, r6, #1
 8000d30:	4285      	cmp	r5, r0
 8000d32:	f0c0 819c 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000d36 <??ZbZclAttrDefaultValue_51>:
 8000d36:	20ff      	movs	r0, #255	; 0xff
 8000d38:	f888 0000 	strb.w	r0, [r8]
 8000d3c:	f118 0801 	adds.w	r8, r8, #1
 8000d40:	1c76      	adds	r6, r6, #1

08000d42 <??ZbZclAttrDefaultValue_3>:
 8000d42:	1c70      	adds	r0, r6, #1
 8000d44:	4285      	cmp	r5, r0
 8000d46:	f0c0 8192 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000d4a <??ZbZclAttrDefaultValue_52>:
 8000d4a:	20ff      	movs	r0, #255	; 0xff
 8000d4c:	f888 0000 	strb.w	r0, [r8]
 8000d50:	f118 0801 	adds.w	r8, r8, #1
 8000d54:	1c76      	adds	r6, r6, #1

08000d56 <??ZbZclAttrDefaultValue_2>:
 8000d56:	1c70      	adds	r0, r6, #1
 8000d58:	4285      	cmp	r5, r0
 8000d5a:	f0c0 8188 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000d5e <??ZbZclAttrDefaultValue_53>:
 8000d5e:	20ff      	movs	r0, #255	; 0xff
 8000d60:	f888 0000 	strb.w	r0, [r8]
 8000d64:	f118 0801 	adds.w	r8, r8, #1
 8000d68:	1c76      	adds	r6, r6, #1

08000d6a <??ZbZclAttrDefaultValue_1>:
 8000d6a:	1c70      	adds	r0, r6, #1
 8000d6c:	4285      	cmp	r5, r0
 8000d6e:	f0c0 817e 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000d72 <??ZbZclAttrDefaultValue_54>:
 8000d72:	20ff      	movs	r0, #255	; 0xff
 8000d74:	f888 0000 	strb.w	r0, [r8]
 8000d78:	f118 0801 	adds.w	r8, r8, #1
 8000d7c:	1c76      	adds	r6, r6, #1
 8000d7e:	0037      	movs	r7, r6
 8000d80:	e175      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000d82 <??ZbZclAttrDefaultValue_9>:
 8000d82:	2000      	movs	r0, #0
 8000d84:	f888 0000 	strb.w	r0, [r8]
 8000d88:	f118 0801 	adds.w	r8, r8, #1
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	0007      	movs	r7, r0
 8000d90:	e16d      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000d92 <??ZbZclAttrDefaultValue_17>:
 8000d92:	1c70      	adds	r0, r6, #1
 8000d94:	4285      	cmp	r5, r0
 8000d96:	f0c0 816a 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000d9a <??ZbZclAttrDefaultValue_55>:
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f888 0000 	strb.w	r0, [r8]
 8000da0:	f118 0801 	adds.w	r8, r8, #1
 8000da4:	1c76      	adds	r6, r6, #1

08000da6 <??ZbZclAttrDefaultValue_16>:
 8000da6:	1c70      	adds	r0, r6, #1
 8000da8:	4285      	cmp	r5, r0
 8000daa:	f0c0 8160 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000dae <??ZbZclAttrDefaultValue_56>:
 8000dae:	2000      	movs	r0, #0
 8000db0:	f888 0000 	strb.w	r0, [r8]
 8000db4:	f118 0801 	adds.w	r8, r8, #1
 8000db8:	1c76      	adds	r6, r6, #1

08000dba <??ZbZclAttrDefaultValue_15>:
 8000dba:	1c70      	adds	r0, r6, #1
 8000dbc:	4285      	cmp	r5, r0
 8000dbe:	f0c0 8156 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000dc2 <??ZbZclAttrDefaultValue_57>:
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f888 0000 	strb.w	r0, [r8]
 8000dc8:	f118 0801 	adds.w	r8, r8, #1
 8000dcc:	1c76      	adds	r6, r6, #1

08000dce <??ZbZclAttrDefaultValue_14>:
 8000dce:	1c70      	adds	r0, r6, #1
 8000dd0:	4285      	cmp	r5, r0
 8000dd2:	f0c0 814c 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000dd6 <??ZbZclAttrDefaultValue_58>:
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f888 0000 	strb.w	r0, [r8]
 8000ddc:	f118 0801 	adds.w	r8, r8, #1
 8000de0:	1c76      	adds	r6, r6, #1

08000de2 <??ZbZclAttrDefaultValue_13>:
 8000de2:	1c70      	adds	r0, r6, #1
 8000de4:	4285      	cmp	r5, r0
 8000de6:	f0c0 8142 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000dea <??ZbZclAttrDefaultValue_59>:
 8000dea:	2000      	movs	r0, #0
 8000dec:	f888 0000 	strb.w	r0, [r8]
 8000df0:	f118 0801 	adds.w	r8, r8, #1
 8000df4:	1c76      	adds	r6, r6, #1

08000df6 <??ZbZclAttrDefaultValue_12>:
 8000df6:	1c70      	adds	r0, r6, #1
 8000df8:	4285      	cmp	r5, r0
 8000dfa:	f0c0 8138 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000dfe <??ZbZclAttrDefaultValue_60>:
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f888 0000 	strb.w	r0, [r8]
 8000e04:	f118 0801 	adds.w	r8, r8, #1
 8000e08:	1c76      	adds	r6, r6, #1

08000e0a <??ZbZclAttrDefaultValue_11>:
 8000e0a:	1c70      	adds	r0, r6, #1
 8000e0c:	4285      	cmp	r5, r0
 8000e0e:	f0c0 812e 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000e12 <??ZbZclAttrDefaultValue_61>:
 8000e12:	2000      	movs	r0, #0
 8000e14:	f888 0000 	strb.w	r0, [r8]
 8000e18:	f118 0801 	adds.w	r8, r8, #1
 8000e1c:	1c76      	adds	r6, r6, #1

08000e1e <??ZbZclAttrDefaultValue_10>:
 8000e1e:	1c70      	adds	r0, r6, #1
 8000e20:	4285      	cmp	r5, r0
 8000e22:	f0c0 8124 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000e26 <??ZbZclAttrDefaultValue_62>:
 8000e26:	2000      	movs	r0, #0
 8000e28:	f888 0000 	strb.w	r0, [r8]
 8000e2c:	f118 0801 	adds.w	r8, r8, #1
 8000e30:	1c76      	adds	r6, r6, #1
 8000e32:	0037      	movs	r7, r6
 8000e34:	e11b      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000e36 <??ZbZclAttrDefaultValue_25>:
 8000e36:	1c70      	adds	r0, r6, #1
 8000e38:	4285      	cmp	r5, r0
 8000e3a:	f0c0 8118 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000e3e <??ZbZclAttrDefaultValue_63>:
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f888 0000 	strb.w	r0, [r8]
 8000e44:	f118 0801 	adds.w	r8, r8, #1
 8000e48:	1c76      	adds	r6, r6, #1

08000e4a <??ZbZclAttrDefaultValue_24>:
 8000e4a:	1c70      	adds	r0, r6, #1
 8000e4c:	4285      	cmp	r5, r0
 8000e4e:	f0c0 810e 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000e52 <??ZbZclAttrDefaultValue_64>:
 8000e52:	2000      	movs	r0, #0
 8000e54:	f888 0000 	strb.w	r0, [r8]
 8000e58:	f118 0801 	adds.w	r8, r8, #1
 8000e5c:	1c76      	adds	r6, r6, #1

08000e5e <??ZbZclAttrDefaultValue_23>:
 8000e5e:	1c70      	adds	r0, r6, #1
 8000e60:	4285      	cmp	r5, r0
 8000e62:	f0c0 8104 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000e66 <??ZbZclAttrDefaultValue_65>:
 8000e66:	2000      	movs	r0, #0
 8000e68:	f888 0000 	strb.w	r0, [r8]
 8000e6c:	f118 0801 	adds.w	r8, r8, #1
 8000e70:	1c76      	adds	r6, r6, #1

08000e72 <??ZbZclAttrDefaultValue_22>:
 8000e72:	1c70      	adds	r0, r6, #1
 8000e74:	4285      	cmp	r5, r0
 8000e76:	f0c0 80fa 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000e7a <??ZbZclAttrDefaultValue_66>:
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f888 0000 	strb.w	r0, [r8]
 8000e80:	f118 0801 	adds.w	r8, r8, #1
 8000e84:	1c76      	adds	r6, r6, #1

08000e86 <??ZbZclAttrDefaultValue_21>:
 8000e86:	1c70      	adds	r0, r6, #1
 8000e88:	4285      	cmp	r5, r0
 8000e8a:	f0c0 80f0 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000e8e <??ZbZclAttrDefaultValue_67>:
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f888 0000 	strb.w	r0, [r8]
 8000e94:	f118 0801 	adds.w	r8, r8, #1
 8000e98:	1c76      	adds	r6, r6, #1

08000e9a <??ZbZclAttrDefaultValue_20>:
 8000e9a:	1c70      	adds	r0, r6, #1
 8000e9c:	4285      	cmp	r5, r0
 8000e9e:	f0c0 80e6 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000ea2 <??ZbZclAttrDefaultValue_68>:
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f888 0000 	strb.w	r0, [r8]
 8000ea8:	f118 0801 	adds.w	r8, r8, #1
 8000eac:	1c76      	adds	r6, r6, #1

08000eae <??ZbZclAttrDefaultValue_19>:
 8000eae:	1c70      	adds	r0, r6, #1
 8000eb0:	4285      	cmp	r5, r0
 8000eb2:	f0c0 80dc 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000eb6 <??ZbZclAttrDefaultValue_69>:
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f888 0000 	strb.w	r0, [r8]
 8000ebc:	f118 0801 	adds.w	r8, r8, #1
 8000ec0:	1c76      	adds	r6, r6, #1

08000ec2 <??ZbZclAttrDefaultValue_18>:
 8000ec2:	1c70      	adds	r0, r6, #1
 8000ec4:	4285      	cmp	r5, r0
 8000ec6:	f0c0 80d2 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000eca <??ZbZclAttrDefaultValue_70>:
 8000eca:	2080      	movs	r0, #128	; 0x80
 8000ecc:	f888 0000 	strb.w	r0, [r8]
 8000ed0:	f118 0801 	adds.w	r8, r8, #1
 8000ed4:	1c76      	adds	r6, r6, #1
 8000ed6:	0037      	movs	r7, r6
 8000ed8:	e0c9      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000eda <??ZbZclAttrDefaultValue_26>:
 8000eda:	2d02      	cmp	r5, #2
 8000edc:	f0c0 80c7 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000ee0 <??ZbZclAttrDefaultValue_71>:
 8000ee0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	f7ff f9a5 	bl	8000234 <putle16>
 8000eea:	2002      	movs	r0, #2
 8000eec:	0007      	movs	r7, r0
 8000eee:	e0be      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000ef0 <??ZbZclAttrDefaultValue_27>:
 8000ef0:	2d04      	cmp	r5, #4
 8000ef2:	f0c0 80bc 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000ef6 <??ZbZclAttrDefaultValue_72>:
 8000ef6:	495f      	ldr	r1, [pc, #380]	; (8001074 <??DataTable1>)
 8000ef8:	4640      	mov	r0, r8
 8000efa:	f7ff f9ad 	bl	8000258 <putle32>
 8000efe:	2004      	movs	r0, #4
 8000f00:	0007      	movs	r7, r0
 8000f02:	e0b4      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000f04 <??ZbZclAttrDefaultValue_28>:
 8000f04:	2d08      	cmp	r5, #8
 8000f06:	f0c0 80b2 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000f0a <??ZbZclAttrDefaultValue_73>:
 8000f0a:	f07f 0201 	mvns.w	r2, #1
 8000f0e:	4b5a      	ldr	r3, [pc, #360]	; (8001078 <??DataTable1_1>)
 8000f10:	4640      	mov	r0, r8
 8000f12:	f7ff f9d4 	bl	80002be <putle64>
 8000f16:	2008      	movs	r0, #8
 8000f18:	0007      	movs	r7, r0
 8000f1a:	e0a8      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000f1c <??ZbZclAttrDefaultValue_29>:
 8000f1c:	2d02      	cmp	r5, #2
 8000f1e:	f0c0 80a6 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000f22 <??ZbZclAttrDefaultValue_74>:
 8000f22:	21ff      	movs	r1, #255	; 0xff
 8000f24:	4640      	mov	r0, r8
 8000f26:	f7ff f985 	bl	8000234 <putle16>
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	0007      	movs	r7, r0
 8000f2e:	e09e      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000f30 <??ZbZclAttrDefaultValue_30>:
 8000f30:	2d02      	cmp	r5, #2
 8000f32:	f0c0 809c 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000f36 <??ZbZclAttrDefaultValue_75>:
 8000f36:	21ff      	movs	r1, #255	; 0xff
 8000f38:	4640      	mov	r0, r8
 8000f3a:	f7ff f97b 	bl	8000234 <putle16>
 8000f3e:	2002      	movs	r0, #2
 8000f40:	0007      	movs	r7, r0
 8000f42:	e094      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000f44 <??ZbZclAttrDefaultValue_31>:
 8000f44:	2d04      	cmp	r5, #4
 8000f46:	f0c0 8092 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000f4a <??ZbZclAttrDefaultValue_76>:
 8000f4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f4e:	4640      	mov	r0, r8
 8000f50:	f7ff f982 	bl	8000258 <putle32>
 8000f54:	2004      	movs	r0, #4
 8000f56:	0007      	movs	r7, r0
 8000f58:	e089      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000f5a <??ZbZclAttrDefaultValue_32>:
 8000f5a:	2d04      	cmp	r5, #4
 8000f5c:	f0c0 8087 	bcc.w	800106e <??ZbZclAttrDefaultValue_45>

08000f60 <??ZbZclAttrDefaultValue_77>:
 8000f60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f64:	4640      	mov	r0, r8
 8000f66:	f7ff f977 	bl	8000258 <putle32>
 8000f6a:	2004      	movs	r0, #4
 8000f6c:	0007      	movs	r7, r0
 8000f6e:	e07e      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000f70 <??ZbZclAttrDefaultValue_43>:
 8000f70:	2d08      	cmp	r5, #8
 8000f72:	d37c      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08000f74 <??ZbZclAttrDefaultValue_78>:
 8000f74:	f05f 32ff 	movs.w	r2, #4294967295
 8000f78:	f05f 33ff 	movs.w	r3, #4294967295
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	f7ff f99e 	bl	80002be <putle64>
 8000f82:	2008      	movs	r0, #8
 8000f84:	0007      	movs	r7, r0
 8000f86:	e072      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000f88 <??ZbZclAttrDefaultValue_44>:
 8000f88:	2d10      	cmp	r5, #16
 8000f8a:	d370      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08000f8c <??ZbZclAttrDefaultValue_79>:
 8000f8c:	f05f 0910 	movs.w	r9, #16
 8000f90:	f05f 0a00 	movs.w	sl, #0
 8000f94:	46c3      	mov	fp, r8
 8000f96:	4652      	mov	r2, sl
 8000f98:	4649      	mov	r1, r9
 8000f9a:	4658      	mov	r0, fp
 8000f9c:	f004 fe8e 	bl	8005cbc <__aeabi_memset>
 8000fa0:	2010      	movs	r0, #16
 8000fa2:	0007      	movs	r7, r0
 8000fa4:	e063      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000fa6 <??ZbZclAttrDefaultValue_33>:
 8000fa6:	2d02      	cmp	r5, #2
 8000fa8:	d361      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08000faa <??ZbZclAttrDefaultValue_80>:
 8000faa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fae:	4640      	mov	r0, r8
 8000fb0:	f7ff f940 	bl	8000234 <putle16>
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	0007      	movs	r7, r0
 8000fb8:	e059      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000fba <??ZbZclAttrDefaultValue_34>:
 8000fba:	2d02      	cmp	r5, #2
 8000fbc:	d357      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08000fbe <??ZbZclAttrDefaultValue_81>:
 8000fbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fc2:	4640      	mov	r0, r8
 8000fc4:	f7ff f936 	bl	8000234 <putle16>
 8000fc8:	2002      	movs	r0, #2
 8000fca:	0007      	movs	r7, r0
 8000fcc:	e04f      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000fce <??ZbZclAttrDefaultValue_35>:
 8000fce:	2d02      	cmp	r5, #2
 8000fd0:	d34d      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08000fd2 <??ZbZclAttrDefaultValue_82>:
 8000fd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	f7ff f92c 	bl	8000234 <putle16>
 8000fdc:	2002      	movs	r0, #2
 8000fde:	0007      	movs	r7, r0
 8000fe0:	e045      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000fe2 <??ZbZclAttrDefaultValue_36>:
 8000fe2:	2d02      	cmp	r5, #2
 8000fe4:	d343      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08000fe6 <??ZbZclAttrDefaultValue_83>:
 8000fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fea:	4640      	mov	r0, r8
 8000fec:	f7ff f922 	bl	8000234 <putle16>
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	0007      	movs	r7, r0
 8000ff4:	e03b      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08000ff6 <??ZbZclAttrDefaultValue_37>:
 8000ff6:	2d04      	cmp	r5, #4
 8000ff8:	d339      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08000ffa <??ZbZclAttrDefaultValue_84>:
 8000ffa:	f05f 31ff 	movs.w	r1, #4294967295
 8000ffe:	4640      	mov	r0, r8
 8001000:	f7ff f92a 	bl	8000258 <putle32>
 8001004:	2004      	movs	r0, #4
 8001006:	0007      	movs	r7, r0
 8001008:	e031      	b.n	800106e <??ZbZclAttrDefaultValue_45>

0800100a <??ZbZclAttrDefaultValue_38>:
 800100a:	2d04      	cmp	r5, #4
 800100c:	d32f      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

0800100e <??ZbZclAttrDefaultValue_85>:
 800100e:	f05f 31ff 	movs.w	r1, #4294967295
 8001012:	4640      	mov	r0, r8
 8001014:	f7ff f920 	bl	8000258 <putle32>
 8001018:	2004      	movs	r0, #4
 800101a:	0007      	movs	r7, r0
 800101c:	e027      	b.n	800106e <??ZbZclAttrDefaultValue_45>

0800101e <??ZbZclAttrDefaultValue_39>:
 800101e:	2d04      	cmp	r5, #4
 8001020:	d325      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08001022 <??ZbZclAttrDefaultValue_86>:
 8001022:	f05f 31ff 	movs.w	r1, #4294967295
 8001026:	4640      	mov	r0, r8
 8001028:	f7ff f916 	bl	8000258 <putle32>
 800102c:	2004      	movs	r0, #4
 800102e:	0007      	movs	r7, r0
 8001030:	e01d      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08001032 <??ZbZclAttrDefaultValue_40>:
 8001032:	2d02      	cmp	r5, #2
 8001034:	d31b      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

08001036 <??ZbZclAttrDefaultValue_87>:
 8001036:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800103a:	4640      	mov	r0, r8
 800103c:	f7ff f8fa 	bl	8000234 <putle16>
 8001040:	2002      	movs	r0, #2
 8001042:	0007      	movs	r7, r0
 8001044:	e013      	b.n	800106e <??ZbZclAttrDefaultValue_45>

08001046 <??ZbZclAttrDefaultValue_41>:
 8001046:	2d02      	cmp	r5, #2
 8001048:	d311      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

0800104a <??ZbZclAttrDefaultValue_88>:
 800104a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800104e:	4640      	mov	r0, r8
 8001050:	f7ff f8f0 	bl	8000234 <putle16>
 8001054:	2002      	movs	r0, #2
 8001056:	0007      	movs	r7, r0
 8001058:	e009      	b.n	800106e <??ZbZclAttrDefaultValue_45>

0800105a <??ZbZclAttrDefaultValue_42>:
 800105a:	2d04      	cmp	r5, #4
 800105c:	d307      	bcc.n	800106e <??ZbZclAttrDefaultValue_45>

0800105e <??ZbZclAttrDefaultValue_89>:
 800105e:	f05f 31ff 	movs.w	r1, #4294967295
 8001062:	4640      	mov	r0, r8
 8001064:	f7ff f8f8 	bl	8000258 <putle32>
 8001068:	2004      	movs	r0, #4
 800106a:	0007      	movs	r7, r0
 800106c:	e7ff      	b.n	800106e <??ZbZclAttrDefaultValue_45>

0800106e <??ZbZclAttrDefaultValue_45>:
 800106e:	0038      	movs	r0, r7
 8001070:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001074 <??DataTable1>:
 8001074:	fffe 00ff                                   ....

08001078 <??DataTable1_1>:
 8001078:	ffff 001f                                   ....

0800107c <ZbZclAttrTypeLength>:
 800107c:	0001      	movs	r1, r0
 800107e:	0008      	movs	r0, r1
 8001080:	b2c0      	uxtb	r0, r0
 8001082:	2800      	cmp	r0, #0
 8001084:	f000 8081 	beq.w	800118a <??ZbZclAttrTypeLength_0>
 8001088:	2808      	cmp	r0, #8
 800108a:	d06c      	beq.n	8001166 <??ZbZclAttrTypeLength_1>
 800108c:	2809      	cmp	r0, #9
 800108e:	d06c      	beq.n	800116a <??ZbZclAttrTypeLength_2>
 8001090:	280a      	cmp	r0, #10
 8001092:	d06c      	beq.n	800116e <??ZbZclAttrTypeLength_3>
 8001094:	280b      	cmp	r0, #11
 8001096:	d06c      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 8001098:	280c      	cmp	r0, #12
 800109a:	d06c      	beq.n	8001176 <??ZbZclAttrTypeLength_5>
 800109c:	280d      	cmp	r0, #13
 800109e:	d06c      	beq.n	800117a <??ZbZclAttrTypeLength_6>
 80010a0:	280e      	cmp	r0, #14
 80010a2:	d06c      	beq.n	800117e <??ZbZclAttrTypeLength_7>
 80010a4:	280f      	cmp	r0, #15
 80010a6:	d06c      	beq.n	8001182 <??ZbZclAttrTypeLength_8>
 80010a8:	2810      	cmp	r0, #16
 80010aa:	d05c      	beq.n	8001166 <??ZbZclAttrTypeLength_1>
 80010ac:	2818      	cmp	r0, #24
 80010ae:	d05a      	beq.n	8001166 <??ZbZclAttrTypeLength_1>
 80010b0:	2819      	cmp	r0, #25
 80010b2:	d05a      	beq.n	800116a <??ZbZclAttrTypeLength_2>
 80010b4:	281a      	cmp	r0, #26
 80010b6:	d05a      	beq.n	800116e <??ZbZclAttrTypeLength_3>
 80010b8:	281b      	cmp	r0, #27
 80010ba:	d05a      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 80010bc:	281c      	cmp	r0, #28
 80010be:	d05a      	beq.n	8001176 <??ZbZclAttrTypeLength_5>
 80010c0:	281d      	cmp	r0, #29
 80010c2:	d05a      	beq.n	800117a <??ZbZclAttrTypeLength_6>
 80010c4:	281e      	cmp	r0, #30
 80010c6:	d05a      	beq.n	800117e <??ZbZclAttrTypeLength_7>
 80010c8:	281f      	cmp	r0, #31
 80010ca:	d05a      	beq.n	8001182 <??ZbZclAttrTypeLength_8>
 80010cc:	2820      	cmp	r0, #32
 80010ce:	d04a      	beq.n	8001166 <??ZbZclAttrTypeLength_1>
 80010d0:	2821      	cmp	r0, #33	; 0x21
 80010d2:	d04a      	beq.n	800116a <??ZbZclAttrTypeLength_2>
 80010d4:	2822      	cmp	r0, #34	; 0x22
 80010d6:	d04a      	beq.n	800116e <??ZbZclAttrTypeLength_3>
 80010d8:	2823      	cmp	r0, #35	; 0x23
 80010da:	d04a      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 80010dc:	2824      	cmp	r0, #36	; 0x24
 80010de:	d04a      	beq.n	8001176 <??ZbZclAttrTypeLength_5>
 80010e0:	2825      	cmp	r0, #37	; 0x25
 80010e2:	d04a      	beq.n	800117a <??ZbZclAttrTypeLength_6>
 80010e4:	2826      	cmp	r0, #38	; 0x26
 80010e6:	d04a      	beq.n	800117e <??ZbZclAttrTypeLength_7>
 80010e8:	2827      	cmp	r0, #39	; 0x27
 80010ea:	d04a      	beq.n	8001182 <??ZbZclAttrTypeLength_8>
 80010ec:	2828      	cmp	r0, #40	; 0x28
 80010ee:	d03a      	beq.n	8001166 <??ZbZclAttrTypeLength_1>
 80010f0:	2829      	cmp	r0, #41	; 0x29
 80010f2:	d03a      	beq.n	800116a <??ZbZclAttrTypeLength_2>
 80010f4:	282a      	cmp	r0, #42	; 0x2a
 80010f6:	d03a      	beq.n	800116e <??ZbZclAttrTypeLength_3>
 80010f8:	282b      	cmp	r0, #43	; 0x2b
 80010fa:	d03a      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 80010fc:	282c      	cmp	r0, #44	; 0x2c
 80010fe:	d03a      	beq.n	8001176 <??ZbZclAttrTypeLength_5>
 8001100:	282d      	cmp	r0, #45	; 0x2d
 8001102:	d03a      	beq.n	800117a <??ZbZclAttrTypeLength_6>
 8001104:	282e      	cmp	r0, #46	; 0x2e
 8001106:	d03a      	beq.n	800117e <??ZbZclAttrTypeLength_7>
 8001108:	282f      	cmp	r0, #47	; 0x2f
 800110a:	d03a      	beq.n	8001182 <??ZbZclAttrTypeLength_8>
 800110c:	2830      	cmp	r0, #48	; 0x30
 800110e:	d02a      	beq.n	8001166 <??ZbZclAttrTypeLength_1>
 8001110:	2831      	cmp	r0, #49	; 0x31
 8001112:	d02a      	beq.n	800116a <??ZbZclAttrTypeLength_2>
 8001114:	2838      	cmp	r0, #56	; 0x38
 8001116:	d028      	beq.n	800116a <??ZbZclAttrTypeLength_2>
 8001118:	2839      	cmp	r0, #57	; 0x39
 800111a:	d02a      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 800111c:	283a      	cmp	r0, #58	; 0x3a
 800111e:	d030      	beq.n	8001182 <??ZbZclAttrTypeLength_8>
 8001120:	2841      	cmp	r0, #65	; 0x41
 8001122:	d032      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 8001124:	2842      	cmp	r0, #66	; 0x42
 8001126:	d030      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 8001128:	2843      	cmp	r0, #67	; 0x43
 800112a:	d02e      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 800112c:	2844      	cmp	r0, #68	; 0x44
 800112e:	d02c      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 8001130:	2848      	cmp	r0, #72	; 0x48
 8001132:	d02a      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 8001134:	284c      	cmp	r0, #76	; 0x4c
 8001136:	d028      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 8001138:	2850      	cmp	r0, #80	; 0x50
 800113a:	d026      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 800113c:	2851      	cmp	r0, #81	; 0x51
 800113e:	d024      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 8001140:	28e0      	cmp	r0, #224	; 0xe0
 8001142:	d016      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 8001144:	28e1      	cmp	r0, #225	; 0xe1
 8001146:	d014      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 8001148:	28e2      	cmp	r0, #226	; 0xe2
 800114a:	d012      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 800114c:	28e8      	cmp	r0, #232	; 0xe8
 800114e:	d00c      	beq.n	800116a <??ZbZclAttrTypeLength_2>
 8001150:	28e9      	cmp	r0, #233	; 0xe9
 8001152:	d00a      	beq.n	800116a <??ZbZclAttrTypeLength_2>
 8001154:	28ea      	cmp	r0, #234	; 0xea
 8001156:	d00c      	beq.n	8001172 <??ZbZclAttrTypeLength_4>
 8001158:	28f0      	cmp	r0, #240	; 0xf0
 800115a:	d012      	beq.n	8001182 <??ZbZclAttrTypeLength_8>
 800115c:	28f1      	cmp	r0, #241	; 0xf1
 800115e:	d012      	beq.n	8001186 <??ZbZclAttrTypeLength_9>
 8001160:	28ff      	cmp	r0, #255	; 0xff
 8001162:	d012      	beq.n	800118a <??ZbZclAttrTypeLength_0>
 8001164:	e013      	b.n	800118e <??ZbZclAttrTypeLength_10>

08001166 <??ZbZclAttrTypeLength_1>:
 8001166:	2001      	movs	r0, #1
 8001168:	e012      	b.n	8001190 <??ZbZclAttrTypeLength_11>

0800116a <??ZbZclAttrTypeLength_2>:
 800116a:	2002      	movs	r0, #2
 800116c:	e010      	b.n	8001190 <??ZbZclAttrTypeLength_11>

0800116e <??ZbZclAttrTypeLength_3>:
 800116e:	2003      	movs	r0, #3
 8001170:	e00e      	b.n	8001190 <??ZbZclAttrTypeLength_11>

08001172 <??ZbZclAttrTypeLength_4>:
 8001172:	2004      	movs	r0, #4
 8001174:	e00c      	b.n	8001190 <??ZbZclAttrTypeLength_11>

08001176 <??ZbZclAttrTypeLength_5>:
 8001176:	2005      	movs	r0, #5
 8001178:	e00a      	b.n	8001190 <??ZbZclAttrTypeLength_11>

0800117a <??ZbZclAttrTypeLength_6>:
 800117a:	2006      	movs	r0, #6
 800117c:	e008      	b.n	8001190 <??ZbZclAttrTypeLength_11>

0800117e <??ZbZclAttrTypeLength_7>:
 800117e:	2007      	movs	r0, #7
 8001180:	e006      	b.n	8001190 <??ZbZclAttrTypeLength_11>

08001182 <??ZbZclAttrTypeLength_8>:
 8001182:	2008      	movs	r0, #8
 8001184:	e004      	b.n	8001190 <??ZbZclAttrTypeLength_11>

08001186 <??ZbZclAttrTypeLength_9>:
 8001186:	2010      	movs	r0, #16
 8001188:	e002      	b.n	8001190 <??ZbZclAttrTypeLength_11>

0800118a <??ZbZclAttrTypeLength_0>:
 800118a:	2000      	movs	r0, #0
 800118c:	e000      	b.n	8001190 <??ZbZclAttrTypeLength_11>

0800118e <??ZbZclAttrTypeLength_10>:
 800118e:	2000      	movs	r0, #0

08001190 <??ZbZclAttrTypeLength_11>:
 8001190:	4770      	bx	lr

08001192 <ZbZclAttrParseLength>:
 8001192:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001196:	0006      	movs	r6, r0
 8001198:	000c      	movs	r4, r1
 800119a:	0015      	movs	r5, r2
 800119c:	001f      	movs	r7, r3
 800119e:	0038      	movs	r0, r7
 80011a0:	b2c0      	uxtb	r0, r0
 80011a2:	280f      	cmp	r0, #15
 80011a4:	d302      	bcc.n	80011ac <??ZbZclAttrParseLength_0>
 80011a6:	f05f 30ff 	movs.w	r0, #4294967295
 80011aa:	e0a1      	b.n	80012f0 <??ZbZclAttrParseLength_1>

080011ac <??ZbZclAttrParseLength_0>:
 80011ac:	0030      	movs	r0, r6
 80011ae:	b2c0      	uxtb	r0, r0
 80011b0:	f7ff ff64 	bl	800107c <ZbZclAttrTypeLength>
 80011b4:	0001      	movs	r1, r0
 80011b6:	2901      	cmp	r1, #1
 80011b8:	db06      	blt.n	80011c8 <??ZbZclAttrParseLength_2>
 80011ba:	428d      	cmp	r5, r1
 80011bc:	d202      	bcs.n	80011c4 <??ZbZclAttrParseLength_3>
 80011be:	f05f 30ff 	movs.w	r0, #4294967295
 80011c2:	e095      	b.n	80012f0 <??ZbZclAttrParseLength_1>

080011c4 <??ZbZclAttrParseLength_3>:
 80011c4:	0008      	movs	r0, r1
 80011c6:	e093      	b.n	80012f0 <??ZbZclAttrParseLength_1>

080011c8 <??ZbZclAttrParseLength_2>:
 80011c8:	2c00      	cmp	r4, #0
 80011ca:	d101      	bne.n	80011d0 <??ZbZclAttrParseLength_4>
 80011cc:	0028      	movs	r0, r5
 80011ce:	e08f      	b.n	80012f0 <??ZbZclAttrParseLength_1>

080011d0 <??ZbZclAttrParseLength_4>:
 80011d0:	f05f 39ff 	movs.w	r9, #4294967295
 80011d4:	0030      	movs	r0, r6
 80011d6:	b2c0      	uxtb	r0, r0
 80011d8:	3841      	subs	r0, #65	; 0x41
 80011da:	2801      	cmp	r0, #1
 80011dc:	d90a      	bls.n	80011f4 <??ZbZclAttrParseLength_5>
 80011de:	1e80      	subs	r0, r0, #2
 80011e0:	2801      	cmp	r0, #1
 80011e2:	d914      	bls.n	800120e <??ZbZclAttrParseLength_6>
 80011e4:	1f40      	subs	r0, r0, #5
 80011e6:	d027      	beq.n	8001238 <??ZbZclAttrParseLength_7>
 80011e8:	1f00      	subs	r0, r0, #4
 80011ea:	d04b      	beq.n	8001284 <??ZbZclAttrParseLength_8>
 80011ec:	1f00      	subs	r0, r0, #4
 80011ee:	2801      	cmp	r0, #1
 80011f0:	d922      	bls.n	8001238 <??ZbZclAttrParseLength_7>
 80011f2:	e074      	b.n	80012de <??ZbZclAttrParseLength_10>

080011f4 <??ZbZclAttrParseLength_5>:
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d072      	beq.n	80012de <??ZbZclAttrParseLength_10>

080011f8 <??ZbZclAttrParseLength_11>:
 80011f8:	7820      	ldrb	r0, [r4, #0]
 80011fa:	28ff      	cmp	r0, #255	; 0xff
 80011fc:	d102      	bne.n	8001204 <??ZbZclAttrParseLength_12>
 80011fe:	f05f 0901 	movs.w	r9, #1
 8001202:	e003      	b.n	800120c <??ZbZclAttrParseLength_13>

08001204 <??ZbZclAttrParseLength_12>:
 8001204:	f894 9000 	ldrb.w	r9, [r4]
 8001208:	f119 0901 	adds.w	r9, r9, #1

0800120c <??ZbZclAttrParseLength_13>:
 800120c:	e067      	b.n	80012de <??ZbZclAttrParseLength_10>

0800120e <??ZbZclAttrParseLength_6>:
 800120e:	2d02      	cmp	r5, #2
 8001210:	d365      	bcc.n	80012de <??ZbZclAttrParseLength_10>

08001212 <??ZbZclAttrParseLength_14>:
 8001212:	0020      	movs	r0, r4
 8001214:	f7fe ffc2 	bl	800019c <pletoh16>
 8001218:	4680      	mov	r8, r0
 800121a:	4640      	mov	r0, r8
 800121c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001220:	b280      	uxth	r0, r0
 8001222:	4288      	cmp	r0, r1
 8001224:	d102      	bne.n	800122c <??ZbZclAttrParseLength_15>
 8001226:	f05f 0902 	movs.w	r9, #2
 800122a:	e004      	b.n	8001236 <??ZbZclAttrParseLength_16>

0800122c <??ZbZclAttrParseLength_15>:
 800122c:	46c1      	mov	r9, r8
 800122e:	fa1f f989 	uxth.w	r9, r9
 8001232:	f119 0902 	adds.w	r9, r9, #2

08001236 <??ZbZclAttrParseLength_16>:
 8001236:	e052      	b.n	80012de <??ZbZclAttrParseLength_10>

08001238 <??ZbZclAttrParseLength_7>:
 8001238:	2d03      	cmp	r5, #3
 800123a:	d350      	bcc.n	80012de <??ZbZclAttrParseLength_10>

0800123c <??ZbZclAttrParseLength_17>:
 800123c:	7820      	ldrb	r0, [r4, #0]
 800123e:	4683      	mov	fp, r0
 8001240:	1c60      	adds	r0, r4, #1
 8001242:	f7fe ffab 	bl	800019c <pletoh16>
 8001246:	4680      	mov	r8, r0
 8001248:	2003      	movs	r0, #3
 800124a:	4681      	mov	r9, r0

0800124c <??ZbZclAttrParseLength_18>:
 800124c:	4640      	mov	r0, r8
 800124e:	b280      	uxth	r0, r0
 8001250:	2800      	cmp	r0, #0
 8001252:	d016      	beq.n	8001282 <??ZbZclAttrParseLength_19>
 8001254:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8001258:	4640      	mov	r0, r8
 800125a:	b280      	uxth	r0, r0
 800125c:	4550      	cmp	r0, sl
 800125e:	d010      	beq.n	8001282 <??ZbZclAttrParseLength_19>
 8001260:	1c7b      	adds	r3, r7, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	ebb5 0209 	subs.w	r2, r5, r9
 8001268:	eb04 0109 	add.w	r1, r4, r9
 800126c:	4658      	mov	r0, fp
 800126e:	b2c0      	uxtb	r0, r0
 8001270:	f7ff ff8f 	bl	8001192 <ZbZclAttrParseLength>
 8001274:	2800      	cmp	r0, #0
 8001276:	d43b      	bmi.n	80012f0 <??ZbZclAttrParseLength_1>

08001278 <??ZbZclAttrParseLength_20>:
 8001278:	eb10 0909 	adds.w	r9, r0, r9
 800127c:	eb1a 0808 	adds.w	r8, sl, r8
 8001280:	e7e4      	b.n	800124c <??ZbZclAttrParseLength_18>

08001282 <??ZbZclAttrParseLength_19>:
 8001282:	e02c      	b.n	80012de <??ZbZclAttrParseLength_10>

08001284 <??ZbZclAttrParseLength_8>:
 8001284:	2d02      	cmp	r5, #2
 8001286:	d32a      	bcc.n	80012de <??ZbZclAttrParseLength_10>

08001288 <??ZbZclAttrParseLength_21>:
 8001288:	0020      	movs	r0, r4
 800128a:	f7fe ff87 	bl	800019c <pletoh16>
 800128e:	4680      	mov	r8, r0
 8001290:	2002      	movs	r0, #2
 8001292:	4681      	mov	r9, r0

08001294 <??ZbZclAttrParseLength_22>:
 8001294:	4640      	mov	r0, r8
 8001296:	b280      	uxth	r0, r0
 8001298:	2800      	cmp	r0, #0
 800129a:	d01f      	beq.n	80012dc <??ZbZclAttrParseLength_23>
 800129c:	f64f 7aff 	movw	sl, #65535	; 0xffff
 80012a0:	4640      	mov	r0, r8
 80012a2:	b280      	uxth	r0, r0
 80012a4:	4550      	cmp	r0, sl
 80012a6:	d019      	beq.n	80012dc <??ZbZclAttrParseLength_23>
 80012a8:	f119 0001 	adds.w	r0, r9, #1
 80012ac:	4285      	cmp	r5, r0
 80012ae:	d315      	bcc.n	80012dc <??ZbZclAttrParseLength_23>

080012b0 <??ZbZclAttrParseLength_24>:
 80012b0:	f814 0009 	ldrb.w	r0, [r4, r9]
 80012b4:	4683      	mov	fp, r0
 80012b6:	f119 0901 	adds.w	r9, r9, #1
 80012ba:	1c7b      	adds	r3, r7, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	ebb5 0209 	subs.w	r2, r5, r9
 80012c2:	eb04 0109 	add.w	r1, r4, r9
 80012c6:	4658      	mov	r0, fp
 80012c8:	b2c0      	uxtb	r0, r0
 80012ca:	f7ff ff62 	bl	8001192 <ZbZclAttrParseLength>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d404      	bmi.n	80012dc <??ZbZclAttrParseLength_23>

080012d2 <??ZbZclAttrParseLength_25>:
 80012d2:	eb10 0909 	adds.w	r9, r0, r9
 80012d6:	eb1a 0808 	adds.w	r8, sl, r8
 80012da:	e7db      	b.n	8001294 <??ZbZclAttrParseLength_22>

080012dc <??ZbZclAttrParseLength_23>:
 80012dc:	e7ff      	b.n	80012de <??ZbZclAttrParseLength_10>

080012de <??ZbZclAttrParseLength_10>:
 80012de:	f1b9 0f00 	cmp.w	r9, #0
 80012e2:	d401      	bmi.n	80012e8 <??ZbZclAttrParseLength_26>
 80012e4:	454d      	cmp	r5, r9
 80012e6:	d202      	bcs.n	80012ee <??ZbZclAttrParseLength_27>

080012e8 <??ZbZclAttrParseLength_26>:
 80012e8:	f05f 30ff 	movs.w	r0, #4294967295
 80012ec:	e000      	b.n	80012f0 <??ZbZclAttrParseLength_1>

080012ee <??ZbZclAttrParseLength_27>:
 80012ee:	4648      	mov	r0, r9

080012f0 <??ZbZclAttrParseLength_1>:
 80012f0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012f4 <ZbZclAttrIsAnalog>:
 80012f4:	0001      	movs	r1, r0
 80012f6:	0008      	movs	r0, r1
 80012f8:	b2c0      	uxtb	r0, r0
 80012fa:	2820      	cmp	r0, #32
 80012fc:	db05      	blt.n	800130a <??ZbZclAttrIsAnalog_0>
 80012fe:	0008      	movs	r0, r1
 8001300:	b2c0      	uxtb	r0, r0
 8001302:	2828      	cmp	r0, #40	; 0x28
 8001304:	da01      	bge.n	800130a <??ZbZclAttrIsAnalog_0>
 8001306:	2001      	movs	r0, #1
 8001308:	e026      	b.n	8001358 <??ZbZclAttrIsAnalog_1>

0800130a <??ZbZclAttrIsAnalog_0>:
 800130a:	0008      	movs	r0, r1
 800130c:	b2c0      	uxtb	r0, r0
 800130e:	2828      	cmp	r0, #40	; 0x28
 8001310:	db05      	blt.n	800131e <??ZbZclAttrIsAnalog_2>
 8001312:	0008      	movs	r0, r1
 8001314:	b2c0      	uxtb	r0, r0
 8001316:	2830      	cmp	r0, #48	; 0x30
 8001318:	da01      	bge.n	800131e <??ZbZclAttrIsAnalog_2>
 800131a:	2001      	movs	r0, #1
 800131c:	e01c      	b.n	8001358 <??ZbZclAttrIsAnalog_1>

0800131e <??ZbZclAttrIsAnalog_2>:
 800131e:	0008      	movs	r0, r1
 8001320:	b2c0      	uxtb	r0, r0
 8001322:	2838      	cmp	r0, #56	; 0x38
 8001324:	d007      	beq.n	8001336 <??ZbZclAttrIsAnalog_3>
 8001326:	0008      	movs	r0, r1
 8001328:	b2c0      	uxtb	r0, r0
 800132a:	2839      	cmp	r0, #57	; 0x39
 800132c:	d003      	beq.n	8001336 <??ZbZclAttrIsAnalog_3>
 800132e:	0008      	movs	r0, r1
 8001330:	b2c0      	uxtb	r0, r0
 8001332:	283a      	cmp	r0, #58	; 0x3a
 8001334:	d101      	bne.n	800133a <??ZbZclAttrIsAnalog_4>

08001336 <??ZbZclAttrIsAnalog_3>:
 8001336:	2001      	movs	r0, #1
 8001338:	e00e      	b.n	8001358 <??ZbZclAttrIsAnalog_1>

0800133a <??ZbZclAttrIsAnalog_4>:
 800133a:	0008      	movs	r0, r1
 800133c:	b2c0      	uxtb	r0, r0
 800133e:	28e0      	cmp	r0, #224	; 0xe0
 8001340:	d007      	beq.n	8001352 <??ZbZclAttrIsAnalog_5>
 8001342:	0008      	movs	r0, r1
 8001344:	b2c0      	uxtb	r0, r0
 8001346:	28e1      	cmp	r0, #225	; 0xe1
 8001348:	d003      	beq.n	8001352 <??ZbZclAttrIsAnalog_5>
 800134a:	0008      	movs	r0, r1
 800134c:	b2c0      	uxtb	r0, r0
 800134e:	28e2      	cmp	r0, #226	; 0xe2
 8001350:	d101      	bne.n	8001356 <??ZbZclAttrIsAnalog_6>

08001352 <??ZbZclAttrIsAnalog_5>:
 8001352:	2001      	movs	r0, #1
 8001354:	e000      	b.n	8001358 <??ZbZclAttrIsAnalog_1>

08001356 <??ZbZclAttrIsAnalog_6>:
 8001356:	2000      	movs	r0, #0

08001358 <??ZbZclAttrIsAnalog_1>:
 8001358:	4770      	bx	lr
	...

0800135c <ZbZclAppendInteger>:
 800135c:	b4f0      	push	{r4, r5, r6, r7}
 800135e:	0004      	movs	r4, r0
 8001360:	000d      	movs	r5, r1
 8001362:	9904      	ldr	r1, [sp, #16]
 8001364:	2700      	movs	r7, #0
 8001366:	2600      	movs	r6, #0
 8001368:	0010      	movs	r0, r2
 800136a:	b2c0      	uxtb	r0, r0
 800136c:	2808      	cmp	r0, #8
 800136e:	f000 80b2 	beq.w	80014d6 <??ZbZclAppendInteger_0>
 8001372:	2809      	cmp	r0, #9
 8001374:	f000 80a4 	beq.w	80014c0 <??ZbZclAppendInteger_1>
 8001378:	280a      	cmp	r0, #10
 800137a:	f000 8096 	beq.w	80014aa <??ZbZclAppendInteger_2>
 800137e:	280b      	cmp	r0, #11
 8001380:	f000 8088 	beq.w	8001494 <??ZbZclAppendInteger_3>
 8001384:	280c      	cmp	r0, #12
 8001386:	d07a      	beq.n	800147e <??ZbZclAppendInteger_4>
 8001388:	280d      	cmp	r0, #13
 800138a:	d06d      	beq.n	8001468 <??ZbZclAppendInteger_5>
 800138c:	280e      	cmp	r0, #14
 800138e:	d060      	beq.n	8001452 <??ZbZclAppendInteger_6>
 8001390:	280f      	cmp	r0, #15
 8001392:	d053      	beq.n	800143c <??ZbZclAppendInteger_7>
 8001394:	2810      	cmp	r0, #16
 8001396:	d042      	beq.n	800141e <??ZbZclAppendInteger_8>
 8001398:	2818      	cmp	r0, #24
 800139a:	f000 809c 	beq.w	80014d6 <??ZbZclAppendInteger_0>
 800139e:	2819      	cmp	r0, #25
 80013a0:	f000 808e 	beq.w	80014c0 <??ZbZclAppendInteger_1>
 80013a4:	281a      	cmp	r0, #26
 80013a6:	f000 8080 	beq.w	80014aa <??ZbZclAppendInteger_2>
 80013aa:	281b      	cmp	r0, #27
 80013ac:	d072      	beq.n	8001494 <??ZbZclAppendInteger_3>
 80013ae:	281c      	cmp	r0, #28
 80013b0:	d065      	beq.n	800147e <??ZbZclAppendInteger_4>
 80013b2:	281d      	cmp	r0, #29
 80013b4:	d058      	beq.n	8001468 <??ZbZclAppendInteger_5>
 80013b6:	281e      	cmp	r0, #30
 80013b8:	d04b      	beq.n	8001452 <??ZbZclAppendInteger_6>
 80013ba:	281f      	cmp	r0, #31
 80013bc:	d03e      	beq.n	800143c <??ZbZclAppendInteger_7>
 80013be:	2820      	cmp	r0, #32
 80013c0:	f000 8089 	beq.w	80014d6 <??ZbZclAppendInteger_0>
 80013c4:	2821      	cmp	r0, #33	; 0x21
 80013c6:	d07b      	beq.n	80014c0 <??ZbZclAppendInteger_1>
 80013c8:	2822      	cmp	r0, #34	; 0x22
 80013ca:	d06e      	beq.n	80014aa <??ZbZclAppendInteger_2>
 80013cc:	2823      	cmp	r0, #35	; 0x23
 80013ce:	d061      	beq.n	8001494 <??ZbZclAppendInteger_3>
 80013d0:	2824      	cmp	r0, #36	; 0x24
 80013d2:	d054      	beq.n	800147e <??ZbZclAppendInteger_4>
 80013d4:	2825      	cmp	r0, #37	; 0x25
 80013d6:	d047      	beq.n	8001468 <??ZbZclAppendInteger_5>
 80013d8:	2826      	cmp	r0, #38	; 0x26
 80013da:	d03a      	beq.n	8001452 <??ZbZclAppendInteger_6>
 80013dc:	2827      	cmp	r0, #39	; 0x27
 80013de:	d02d      	beq.n	800143c <??ZbZclAppendInteger_7>
 80013e0:	2828      	cmp	r0, #40	; 0x28
 80013e2:	d078      	beq.n	80014d6 <??ZbZclAppendInteger_0>
 80013e4:	2829      	cmp	r0, #41	; 0x29
 80013e6:	d06b      	beq.n	80014c0 <??ZbZclAppendInteger_1>
 80013e8:	282a      	cmp	r0, #42	; 0x2a
 80013ea:	d05e      	beq.n	80014aa <??ZbZclAppendInteger_2>
 80013ec:	282b      	cmp	r0, #43	; 0x2b
 80013ee:	d051      	beq.n	8001494 <??ZbZclAppendInteger_3>
 80013f0:	282c      	cmp	r0, #44	; 0x2c
 80013f2:	d044      	beq.n	800147e <??ZbZclAppendInteger_4>
 80013f4:	282d      	cmp	r0, #45	; 0x2d
 80013f6:	d037      	beq.n	8001468 <??ZbZclAppendInteger_5>
 80013f8:	282e      	cmp	r0, #46	; 0x2e
 80013fa:	d02a      	beq.n	8001452 <??ZbZclAppendInteger_6>
 80013fc:	282f      	cmp	r0, #47	; 0x2f
 80013fe:	d01d      	beq.n	800143c <??ZbZclAppendInteger_7>
 8001400:	2830      	cmp	r0, #48	; 0x30
 8001402:	d068      	beq.n	80014d6 <??ZbZclAppendInteger_0>
 8001404:	2831      	cmp	r0, #49	; 0x31
 8001406:	d05b      	beq.n	80014c0 <??ZbZclAppendInteger_1>
 8001408:	28e2      	cmp	r0, #226	; 0xe2
 800140a:	d043      	beq.n	8001494 <??ZbZclAppendInteger_3>
 800140c:	28e8      	cmp	r0, #232	; 0xe8
 800140e:	d057      	beq.n	80014c0 <??ZbZclAppendInteger_1>
 8001410:	28e9      	cmp	r0, #233	; 0xe9
 8001412:	d055      	beq.n	80014c0 <??ZbZclAppendInteger_1>
 8001414:	28ea      	cmp	r0, #234	; 0xea
 8001416:	d03d      	beq.n	8001494 <??ZbZclAppendInteger_3>
 8001418:	28f0      	cmp	r0, #240	; 0xf0
 800141a:	d00f      	beq.n	800143c <??ZbZclAppendInteger_7>
 800141c:	e064      	b.n	80014e8 <??ZbZclAppendInteger_9>

0800141e <??ZbZclAppendInteger_8>:
 800141e:	2900      	cmp	r1, #0
 8001420:	d102      	bne.n	8001428 <??ZbZclAppendInteger_10>
 8001422:	f05f 30ff 	movs.w	r0, #4294967295
 8001426:	e061      	b.n	80014ec <??ZbZclAppendInteger_11>

08001428 <??ZbZclAppendInteger_10>:
 8001428:	2d00      	cmp	r5, #0
 800142a:	d101      	bne.n	8001430 <??ZbZclAppendInteger_12>
 800142c:	2c00      	cmp	r4, #0
 800142e:	d001      	beq.n	8001434 <??ZbZclAppendInteger_13>

08001430 <??ZbZclAppendInteger_12>:
 8001430:	2001      	movs	r0, #1
 8001432:	e000      	b.n	8001436 <??ZbZclAppendInteger_14>

08001434 <??ZbZclAppendInteger_13>:
 8001434:	2000      	movs	r0, #0

08001436 <??ZbZclAppendInteger_14>:
 8001436:	7018      	strb	r0, [r3, #0]
 8001438:	2001      	movs	r0, #1
 800143a:	e057      	b.n	80014ec <??ZbZclAppendInteger_11>

0800143c <??ZbZclAppendInteger_7>:
 800143c:	428f      	cmp	r7, r1
 800143e:	d302      	bcc.n	8001446 <??ZbZclAppendInteger_15>
 8001440:	f05f 30ff 	movs.w	r0, #4294967295
 8001444:	e052      	b.n	80014ec <??ZbZclAppendInteger_11>

08001446 <??ZbZclAppendInteger_15>:
 8001446:	55dc      	strb	r4, [r3, r7]
 8001448:	1c7f      	adds	r7, r7, #1
 800144a:	0a24      	lsrs	r4, r4, #8
 800144c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001450:	0a2d      	lsrs	r5, r5, #8

08001452 <??ZbZclAppendInteger_6>:
 8001452:	428f      	cmp	r7, r1
 8001454:	d302      	bcc.n	800145c <??ZbZclAppendInteger_16>
 8001456:	f05f 30ff 	movs.w	r0, #4294967295
 800145a:	e047      	b.n	80014ec <??ZbZclAppendInteger_11>

0800145c <??ZbZclAppendInteger_16>:
 800145c:	55dc      	strb	r4, [r3, r7]
 800145e:	1c7f      	adds	r7, r7, #1
 8001460:	0a24      	lsrs	r4, r4, #8
 8001462:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001466:	0a2d      	lsrs	r5, r5, #8

08001468 <??ZbZclAppendInteger_5>:
 8001468:	428f      	cmp	r7, r1
 800146a:	d302      	bcc.n	8001472 <??ZbZclAppendInteger_17>
 800146c:	f05f 30ff 	movs.w	r0, #4294967295
 8001470:	e03c      	b.n	80014ec <??ZbZclAppendInteger_11>

08001472 <??ZbZclAppendInteger_17>:
 8001472:	55dc      	strb	r4, [r3, r7]
 8001474:	1c7f      	adds	r7, r7, #1
 8001476:	0a24      	lsrs	r4, r4, #8
 8001478:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800147c:	0a2d      	lsrs	r5, r5, #8

0800147e <??ZbZclAppendInteger_4>:
 800147e:	428f      	cmp	r7, r1
 8001480:	d302      	bcc.n	8001488 <??ZbZclAppendInteger_18>
 8001482:	f05f 30ff 	movs.w	r0, #4294967295
 8001486:	e031      	b.n	80014ec <??ZbZclAppendInteger_11>

08001488 <??ZbZclAppendInteger_18>:
 8001488:	55dc      	strb	r4, [r3, r7]
 800148a:	1c7f      	adds	r7, r7, #1
 800148c:	0a24      	lsrs	r4, r4, #8
 800148e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001492:	0a2d      	lsrs	r5, r5, #8

08001494 <??ZbZclAppendInteger_3>:
 8001494:	428f      	cmp	r7, r1
 8001496:	d302      	bcc.n	800149e <??ZbZclAppendInteger_19>
 8001498:	f05f 30ff 	movs.w	r0, #4294967295
 800149c:	e026      	b.n	80014ec <??ZbZclAppendInteger_11>

0800149e <??ZbZclAppendInteger_19>:
 800149e:	55dc      	strb	r4, [r3, r7]
 80014a0:	1c7f      	adds	r7, r7, #1
 80014a2:	0a24      	lsrs	r4, r4, #8
 80014a4:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80014a8:	0a2d      	lsrs	r5, r5, #8

080014aa <??ZbZclAppendInteger_2>:
 80014aa:	428f      	cmp	r7, r1
 80014ac:	d302      	bcc.n	80014b4 <??ZbZclAppendInteger_20>
 80014ae:	f05f 30ff 	movs.w	r0, #4294967295
 80014b2:	e01b      	b.n	80014ec <??ZbZclAppendInteger_11>

080014b4 <??ZbZclAppendInteger_20>:
 80014b4:	55dc      	strb	r4, [r3, r7]
 80014b6:	1c7f      	adds	r7, r7, #1
 80014b8:	0a24      	lsrs	r4, r4, #8
 80014ba:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80014be:	0a2d      	lsrs	r5, r5, #8

080014c0 <??ZbZclAppendInteger_1>:
 80014c0:	428f      	cmp	r7, r1
 80014c2:	d302      	bcc.n	80014ca <??ZbZclAppendInteger_21>
 80014c4:	f05f 30ff 	movs.w	r0, #4294967295
 80014c8:	e010      	b.n	80014ec <??ZbZclAppendInteger_11>

080014ca <??ZbZclAppendInteger_21>:
 80014ca:	55dc      	strb	r4, [r3, r7]
 80014cc:	1c7f      	adds	r7, r7, #1
 80014ce:	0a24      	lsrs	r4, r4, #8
 80014d0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80014d4:	0a2d      	lsrs	r5, r5, #8

080014d6 <??ZbZclAppendInteger_0>:
 80014d6:	428f      	cmp	r7, r1
 80014d8:	d302      	bcc.n	80014e0 <??ZbZclAppendInteger_22>
 80014da:	f05f 30ff 	movs.w	r0, #4294967295
 80014de:	e005      	b.n	80014ec <??ZbZclAppendInteger_11>

080014e0 <??ZbZclAppendInteger_22>:
 80014e0:	55dc      	strb	r4, [r3, r7]
 80014e2:	1c7f      	adds	r7, r7, #1
 80014e4:	0038      	movs	r0, r7
 80014e6:	e001      	b.n	80014ec <??ZbZclAppendInteger_11>

080014e8 <??ZbZclAppendInteger_9>:
 80014e8:	f05f 30ff 	movs.w	r0, #4294967295

080014ec <??ZbZclAppendInteger_11>:
 80014ec:	bcf0      	pop	{r4, r5, r6, r7}
 80014ee:	4770      	bx	lr

080014f0 <ZbZclParseInteger>:
 80014f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014f4:	4683      	mov	fp, r0
 80014f6:	000e      	movs	r6, r1
 80014f8:	4692      	mov	sl, r2
 80014fa:	2700      	movs	r7, #0
 80014fc:	2400      	movs	r4, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	f05f 0800 	movs.w	r8, #0
 8001504:	f05f 0900 	movs.w	r9, #0
 8001508:	4658      	mov	r0, fp
 800150a:	b2c0      	uxtb	r0, r0
 800150c:	f000 f91e 	bl	800174c <ZbZclAttrIsInteger>
 8001510:	2800      	cmp	r0, #0
 8001512:	d105      	bne.n	8001520 <??ZbZclParseInteger_0>
 8001514:	208d      	movs	r0, #141	; 0x8d
 8001516:	f88a 0000 	strb.w	r0, [sl]
 800151a:	2000      	movs	r0, #0
 800151c:	2100      	movs	r1, #0
 800151e:	e113      	b.n	8001748 <??ZbZclParseInteger_1>

08001520 <??ZbZclParseInteger_0>:
 8001520:	2000      	movs	r0, #0
 8001522:	f88a 0000 	strb.w	r0, [sl]
 8001526:	4658      	mov	r0, fp
 8001528:	b2c0      	uxtb	r0, r0
 800152a:	2808      	cmp	r0, #8
 800152c:	f000 8097 	beq.w	800165e <??ZbZclParseInteger_2>
 8001530:	2809      	cmp	r0, #9
 8001532:	f000 808a 	beq.w	800164a <??ZbZclParseInteger_3>
 8001536:	280a      	cmp	r0, #10
 8001538:	d07d      	beq.n	8001636 <??ZbZclParseInteger_4>
 800153a:	280b      	cmp	r0, #11
 800153c:	d071      	beq.n	8001622 <??ZbZclParseInteger_5>
 800153e:	280c      	cmp	r0, #12
 8001540:	d065      	beq.n	800160e <??ZbZclParseInteger_6>
 8001542:	280d      	cmp	r0, #13
 8001544:	d059      	beq.n	80015fa <??ZbZclParseInteger_7>
 8001546:	280e      	cmp	r0, #14
 8001548:	d04d      	beq.n	80015e6 <??ZbZclParseInteger_8>
 800154a:	280f      	cmp	r0, #15
 800154c:	d046      	beq.n	80015dc <??ZbZclParseInteger_9>
 800154e:	2810      	cmp	r0, #16
 8001550:	f000 8085 	beq.w	800165e <??ZbZclParseInteger_2>
 8001554:	2818      	cmp	r0, #24
 8001556:	f000 8082 	beq.w	800165e <??ZbZclParseInteger_2>
 800155a:	2819      	cmp	r0, #25
 800155c:	d075      	beq.n	800164a <??ZbZclParseInteger_3>
 800155e:	281a      	cmp	r0, #26
 8001560:	d069      	beq.n	8001636 <??ZbZclParseInteger_4>
 8001562:	281b      	cmp	r0, #27
 8001564:	d05d      	beq.n	8001622 <??ZbZclParseInteger_5>
 8001566:	281c      	cmp	r0, #28
 8001568:	d051      	beq.n	800160e <??ZbZclParseInteger_6>
 800156a:	281d      	cmp	r0, #29
 800156c:	d045      	beq.n	80015fa <??ZbZclParseInteger_7>
 800156e:	281e      	cmp	r0, #30
 8001570:	d039      	beq.n	80015e6 <??ZbZclParseInteger_8>
 8001572:	281f      	cmp	r0, #31
 8001574:	d032      	beq.n	80015dc <??ZbZclParseInteger_9>
 8001576:	2820      	cmp	r0, #32
 8001578:	d071      	beq.n	800165e <??ZbZclParseInteger_2>
 800157a:	2821      	cmp	r0, #33	; 0x21
 800157c:	d065      	beq.n	800164a <??ZbZclParseInteger_3>
 800157e:	2822      	cmp	r0, #34	; 0x22
 8001580:	d059      	beq.n	8001636 <??ZbZclParseInteger_4>
 8001582:	2823      	cmp	r0, #35	; 0x23
 8001584:	d04d      	beq.n	8001622 <??ZbZclParseInteger_5>
 8001586:	2824      	cmp	r0, #36	; 0x24
 8001588:	d041      	beq.n	800160e <??ZbZclParseInteger_6>
 800158a:	2825      	cmp	r0, #37	; 0x25
 800158c:	d035      	beq.n	80015fa <??ZbZclParseInteger_7>
 800158e:	2826      	cmp	r0, #38	; 0x26
 8001590:	d029      	beq.n	80015e6 <??ZbZclParseInteger_8>
 8001592:	2827      	cmp	r0, #39	; 0x27
 8001594:	d022      	beq.n	80015dc <??ZbZclParseInteger_9>
 8001596:	2828      	cmp	r0, #40	; 0x28
 8001598:	f000 80ac 	beq.w	80016f4 <??ZbZclParseInteger_10>
 800159c:	2829      	cmp	r0, #41	; 0x29
 800159e:	f000 809f 	beq.w	80016e0 <??ZbZclParseInteger_11>
 80015a2:	282a      	cmp	r0, #42	; 0x2a
 80015a4:	f000 8092 	beq.w	80016cc <??ZbZclParseInteger_12>
 80015a8:	282b      	cmp	r0, #43	; 0x2b
 80015aa:	f000 8085 	beq.w	80016b8 <??ZbZclParseInteger_13>
 80015ae:	282c      	cmp	r0, #44	; 0x2c
 80015b0:	d078      	beq.n	80016a4 <??ZbZclParseInteger_14>
 80015b2:	282d      	cmp	r0, #45	; 0x2d
 80015b4:	d06c      	beq.n	8001690 <??ZbZclParseInteger_15>
 80015b6:	282e      	cmp	r0, #46	; 0x2e
 80015b8:	d060      	beq.n	800167c <??ZbZclParseInteger_16>
 80015ba:	282f      	cmp	r0, #47	; 0x2f
 80015bc:	d059      	beq.n	8001672 <??ZbZclParseInteger_17>
 80015be:	2830      	cmp	r0, #48	; 0x30
 80015c0:	d04d      	beq.n	800165e <??ZbZclParseInteger_2>
 80015c2:	2831      	cmp	r0, #49	; 0x31
 80015c4:	d041      	beq.n	800164a <??ZbZclParseInteger_3>
 80015c6:	28e2      	cmp	r0, #226	; 0xe2
 80015c8:	d02b      	beq.n	8001622 <??ZbZclParseInteger_5>
 80015ca:	28e8      	cmp	r0, #232	; 0xe8
 80015cc:	d03d      	beq.n	800164a <??ZbZclParseInteger_3>
 80015ce:	28e9      	cmp	r0, #233	; 0xe9
 80015d0:	d03b      	beq.n	800164a <??ZbZclParseInteger_3>
 80015d2:	28ea      	cmp	r0, #234	; 0xea
 80015d4:	d025      	beq.n	8001622 <??ZbZclParseInteger_5>
 80015d6:	28f0      	cmp	r0, #240	; 0xf0
 80015d8:	f040 80b1 	bne.w	800173e <??ZbZclParseInteger_18>

080015dc <??ZbZclParseInteger_9>:
 80015dc:	5df0      	ldrb	r0, [r6, r7]
 80015de:	2100      	movs	r1, #0
 80015e0:	4304      	orrs	r4, r0
 80015e2:	430d      	orrs	r5, r1
 80015e4:	1c7f      	adds	r7, r7, #1

080015e6 <??ZbZclParseInteger_8>:
 80015e6:	5df0      	ldrb	r0, [r6, r7]
 80015e8:	2100      	movs	r1, #0
 80015ea:	003a      	movs	r2, r7
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	00d2      	lsls	r2, r2, #3
 80015f0:	f004 fc06 	bl	8005e00 <__aeabi_llsl>
 80015f4:	4304      	orrs	r4, r0
 80015f6:	430d      	orrs	r5, r1
 80015f8:	1c7f      	adds	r7, r7, #1

080015fa <??ZbZclParseInteger_7>:
 80015fa:	5df0      	ldrb	r0, [r6, r7]
 80015fc:	2100      	movs	r1, #0
 80015fe:	003a      	movs	r2, r7
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	00d2      	lsls	r2, r2, #3
 8001604:	f004 fbfc 	bl	8005e00 <__aeabi_llsl>
 8001608:	4304      	orrs	r4, r0
 800160a:	430d      	orrs	r5, r1
 800160c:	1c7f      	adds	r7, r7, #1

0800160e <??ZbZclParseInteger_6>:
 800160e:	5df0      	ldrb	r0, [r6, r7]
 8001610:	2100      	movs	r1, #0
 8001612:	003a      	movs	r2, r7
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	00d2      	lsls	r2, r2, #3
 8001618:	f004 fbf2 	bl	8005e00 <__aeabi_llsl>
 800161c:	4304      	orrs	r4, r0
 800161e:	430d      	orrs	r5, r1
 8001620:	1c7f      	adds	r7, r7, #1

08001622 <??ZbZclParseInteger_5>:
 8001622:	5df0      	ldrb	r0, [r6, r7]
 8001624:	2100      	movs	r1, #0
 8001626:	003a      	movs	r2, r7
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	00d2      	lsls	r2, r2, #3
 800162c:	f004 fbe8 	bl	8005e00 <__aeabi_llsl>
 8001630:	4304      	orrs	r4, r0
 8001632:	430d      	orrs	r5, r1
 8001634:	1c7f      	adds	r7, r7, #1

08001636 <??ZbZclParseInteger_4>:
 8001636:	5df0      	ldrb	r0, [r6, r7]
 8001638:	2100      	movs	r1, #0
 800163a:	003a      	movs	r2, r7
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	00d2      	lsls	r2, r2, #3
 8001640:	f004 fbde 	bl	8005e00 <__aeabi_llsl>
 8001644:	4304      	orrs	r4, r0
 8001646:	430d      	orrs	r5, r1
 8001648:	1c7f      	adds	r7, r7, #1

0800164a <??ZbZclParseInteger_3>:
 800164a:	5df0      	ldrb	r0, [r6, r7]
 800164c:	2100      	movs	r1, #0
 800164e:	003a      	movs	r2, r7
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	00d2      	lsls	r2, r2, #3
 8001654:	f004 fbd4 	bl	8005e00 <__aeabi_llsl>
 8001658:	4304      	orrs	r4, r0
 800165a:	430d      	orrs	r5, r1
 800165c:	1c7f      	adds	r7, r7, #1

0800165e <??ZbZclParseInteger_2>:
 800165e:	5df0      	ldrb	r0, [r6, r7]
 8001660:	2100      	movs	r1, #0
 8001662:	003a      	movs	r2, r7
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	00d2      	lsls	r2, r2, #3
 8001668:	f004 fbca 	bl	8005e00 <__aeabi_llsl>
 800166c:	4320      	orrs	r0, r4
 800166e:	4329      	orrs	r1, r5
 8001670:	e06a      	b.n	8001748 <??ZbZclParseInteger_1>

08001672 <??ZbZclParseInteger_17>:
 8001672:	5df0      	ldrb	r0, [r6, r7]
 8001674:	2100      	movs	r1, #0
 8001676:	4304      	orrs	r4, r0
 8001678:	430d      	orrs	r5, r1
 800167a:	1c7f      	adds	r7, r7, #1

0800167c <??ZbZclParseInteger_16>:
 800167c:	5df0      	ldrb	r0, [r6, r7]
 800167e:	2100      	movs	r1, #0
 8001680:	003a      	movs	r2, r7
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	00d2      	lsls	r2, r2, #3
 8001686:	f004 fbbb 	bl	8005e00 <__aeabi_llsl>
 800168a:	4304      	orrs	r4, r0
 800168c:	430d      	orrs	r5, r1
 800168e:	1c7f      	adds	r7, r7, #1

08001690 <??ZbZclParseInteger_15>:
 8001690:	5df0      	ldrb	r0, [r6, r7]
 8001692:	2100      	movs	r1, #0
 8001694:	003a      	movs	r2, r7
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	00d2      	lsls	r2, r2, #3
 800169a:	f004 fbb1 	bl	8005e00 <__aeabi_llsl>
 800169e:	4304      	orrs	r4, r0
 80016a0:	430d      	orrs	r5, r1
 80016a2:	1c7f      	adds	r7, r7, #1

080016a4 <??ZbZclParseInteger_14>:
 80016a4:	5df0      	ldrb	r0, [r6, r7]
 80016a6:	2100      	movs	r1, #0
 80016a8:	003a      	movs	r2, r7
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	00d2      	lsls	r2, r2, #3
 80016ae:	f004 fba7 	bl	8005e00 <__aeabi_llsl>
 80016b2:	4304      	orrs	r4, r0
 80016b4:	430d      	orrs	r5, r1
 80016b6:	1c7f      	adds	r7, r7, #1

080016b8 <??ZbZclParseInteger_13>:
 80016b8:	5df0      	ldrb	r0, [r6, r7]
 80016ba:	2100      	movs	r1, #0
 80016bc:	003a      	movs	r2, r7
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	00d2      	lsls	r2, r2, #3
 80016c2:	f004 fb9d 	bl	8005e00 <__aeabi_llsl>
 80016c6:	4304      	orrs	r4, r0
 80016c8:	430d      	orrs	r5, r1
 80016ca:	1c7f      	adds	r7, r7, #1

080016cc <??ZbZclParseInteger_12>:
 80016cc:	5df0      	ldrb	r0, [r6, r7]
 80016ce:	2100      	movs	r1, #0
 80016d0:	003a      	movs	r2, r7
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	f004 fb93 	bl	8005e00 <__aeabi_llsl>
 80016da:	4304      	orrs	r4, r0
 80016dc:	430d      	orrs	r5, r1
 80016de:	1c7f      	adds	r7, r7, #1

080016e0 <??ZbZclParseInteger_11>:
 80016e0:	5df0      	ldrb	r0, [r6, r7]
 80016e2:	2100      	movs	r1, #0
 80016e4:	003a      	movs	r2, r7
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	00d2      	lsls	r2, r2, #3
 80016ea:	f004 fb89 	bl	8005e00 <__aeabi_llsl>
 80016ee:	4304      	orrs	r4, r0
 80016f0:	430d      	orrs	r5, r1
 80016f2:	1c7f      	adds	r7, r7, #1

080016f4 <??ZbZclParseInteger_10>:
 80016f4:	5df0      	ldrb	r0, [r6, r7]
 80016f6:	2100      	movs	r1, #0
 80016f8:	003a      	movs	r2, r7
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	00d2      	lsls	r2, r2, #3
 80016fe:	f004 fb7f 	bl	8005e00 <__aeabi_llsl>
 8001702:	4320      	orrs	r0, r4
 8001704:	4329      	orrs	r1, r5
 8001706:	003a      	movs	r2, r7
 8001708:	1c57      	adds	r7, r2, #1
 800170a:	5cb2      	ldrb	r2, [r6, r2]
 800170c:	0612      	lsls	r2, r2, #24
 800170e:	d515      	bpl.n	800173c <??ZbZclParseInteger_19>
 8001710:	2f08      	cmp	r7, #8
 8001712:	d213      	bcs.n	800173c <??ZbZclParseInteger_19>
 8001714:	0004      	movs	r4, r0
 8001716:	000d      	movs	r5, r1
 8001718:	2001      	movs	r0, #1
 800171a:	2100      	movs	r1, #0
 800171c:	f1d7 0208 	rsbs	r2, r7, #8
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	00d2      	lsls	r2, r2, #3
 8001724:	f004 fb6c 	bl	8005e00 <__aeabi_llsl>
 8001728:	1e40      	subs	r0, r0, #1
 800172a:	f171 0100 	sbcs.w	r1, r1, #0
 800172e:	003a      	movs	r2, r7
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	00d2      	lsls	r2, r2, #3
 8001734:	f004 fb64 	bl	8005e00 <__aeabi_llsl>
 8001738:	4320      	orrs	r0, r4
 800173a:	4329      	orrs	r1, r5

0800173c <??ZbZclParseInteger_19>:
 800173c:	e004      	b.n	8001748 <??ZbZclParseInteger_1>

0800173e <??ZbZclParseInteger_18>:
 800173e:	208d      	movs	r0, #141	; 0x8d
 8001740:	f88a 0000 	strb.w	r0, [sl]
 8001744:	2000      	movs	r0, #0
 8001746:	2100      	movs	r1, #0

08001748 <??ZbZclParseInteger_1>:
 8001748:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800174c <ZbZclAttrIsInteger>:
 800174c:	0001      	movs	r1, r0
 800174e:	2200      	movs	r2, #0
 8001750:	0008      	movs	r0, r1
 8001752:	b2c0      	uxtb	r0, r0
 8001754:	3808      	subs	r0, #8
 8001756:	2808      	cmp	r0, #8
 8001758:	d909      	bls.n	800176e <??ZbZclAttrIsInteger_0>
 800175a:	3810      	subs	r0, #16
 800175c:	2819      	cmp	r0, #25
 800175e:	d906      	bls.n	800176e <??ZbZclAttrIsInteger_0>
 8001760:	38ca      	subs	r0, #202	; 0xca
 8001762:	d004      	beq.n	800176e <??ZbZclAttrIsInteger_0>
 8001764:	1f80      	subs	r0, r0, #6
 8001766:	2802      	cmp	r0, #2
 8001768:	d901      	bls.n	800176e <??ZbZclAttrIsInteger_0>
 800176a:	3808      	subs	r0, #8
 800176c:	d101      	bne.n	8001772 <??ZbZclAttrIsInteger_1>

0800176e <??ZbZclAttrIsInteger_0>:
 800176e:	2001      	movs	r0, #1
 8001770:	e000      	b.n	8001774 <??ZbZclAttrIsInteger_2>

08001772 <??ZbZclAttrIsInteger_1>:
 8001772:	2000      	movs	r0, #0

08001774 <??ZbZclAttrIsInteger_2>:
 8001774:	b2c0      	uxtb	r0, r0
 8001776:	4770      	bx	lr

08001778 <ZbZclAttrIntegerRangeCheck>:
 8001778:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800177c:	0004      	movs	r4, r0
 800177e:	000d      	movs	r5, r1
 8001780:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8001784:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8001788:	0010      	movs	r0, r2
 800178a:	b2c0      	uxtb	r0, r0
 800178c:	2810      	cmp	r0, #16
 800178e:	d045      	beq.n	800181c <??ZbZclAttrIntegerRangeCheck_0>
 8001790:	2818      	cmp	r0, #24
 8001792:	d051      	beq.n	8001838 <??ZbZclAttrIntegerRangeCheck_1>
 8001794:	2819      	cmp	r0, #25
 8001796:	d060      	beq.n	800185a <??ZbZclAttrIntegerRangeCheck_2>
 8001798:	281a      	cmp	r0, #26
 800179a:	d072      	beq.n	8001882 <??ZbZclAttrIntegerRangeCheck_3>
 800179c:	281b      	cmp	r0, #27
 800179e:	f000 8086 	beq.w	80018ae <??ZbZclAttrIntegerRangeCheck_4>
 80017a2:	281c      	cmp	r0, #28
 80017a4:	f000 8098 	beq.w	80018d8 <??ZbZclAttrIntegerRangeCheck_5>
 80017a8:	281d      	cmp	r0, #29
 80017aa:	f000 80a7 	beq.w	80018fc <??ZbZclAttrIntegerRangeCheck_6>
 80017ae:	281e      	cmp	r0, #30
 80017b0:	f000 80b9 	beq.w	8001926 <??ZbZclAttrIntegerRangeCheck_7>
 80017b4:	281f      	cmp	r0, #31
 80017b6:	f000 80cd 	beq.w	8001954 <??ZbZclAttrIntegerRangeCheck_8>
 80017ba:	2820      	cmp	r0, #32
 80017bc:	d03c      	beq.n	8001838 <??ZbZclAttrIntegerRangeCheck_1>
 80017be:	2821      	cmp	r0, #33	; 0x21
 80017c0:	d04b      	beq.n	800185a <??ZbZclAttrIntegerRangeCheck_2>
 80017c2:	2822      	cmp	r0, #34	; 0x22
 80017c4:	d05d      	beq.n	8001882 <??ZbZclAttrIntegerRangeCheck_3>
 80017c6:	2823      	cmp	r0, #35	; 0x23
 80017c8:	d071      	beq.n	80018ae <??ZbZclAttrIntegerRangeCheck_4>
 80017ca:	2824      	cmp	r0, #36	; 0x24
 80017cc:	f000 8084 	beq.w	80018d8 <??ZbZclAttrIntegerRangeCheck_5>
 80017d0:	2825      	cmp	r0, #37	; 0x25
 80017d2:	f000 8093 	beq.w	80018fc <??ZbZclAttrIntegerRangeCheck_6>
 80017d6:	2826      	cmp	r0, #38	; 0x26
 80017d8:	f000 80a5 	beq.w	8001926 <??ZbZclAttrIntegerRangeCheck_7>
 80017dc:	2827      	cmp	r0, #39	; 0x27
 80017de:	f000 80b9 	beq.w	8001954 <??ZbZclAttrIntegerRangeCheck_8>
 80017e2:	2828      	cmp	r0, #40	; 0x28
 80017e4:	f000 80c1 	beq.w	800196a <??ZbZclAttrIntegerRangeCheck_9>
 80017e8:	2829      	cmp	r0, #41	; 0x29
 80017ea:	f000 80d9 	beq.w	80019a0 <??ZbZclAttrIntegerRangeCheck_10>
 80017ee:	282a      	cmp	r0, #42	; 0x2a
 80017f0:	f000 80f0 	beq.w	80019d4 <??ZbZclAttrIntegerRangeCheck_11>
 80017f4:	282b      	cmp	r0, #43	; 0x2b
 80017f6:	f000 8107 	beq.w	8001a08 <??ZbZclAttrIntegerRangeCheck_12>
 80017fa:	282c      	cmp	r0, #44	; 0x2c
 80017fc:	f000 8120 	beq.w	8001a40 <??ZbZclAttrIntegerRangeCheck_13>
 8001800:	282d      	cmp	r0, #45	; 0x2d
 8001802:	f000 8136 	beq.w	8001a72 <??ZbZclAttrIntegerRangeCheck_14>
 8001806:	282e      	cmp	r0, #46	; 0x2e
 8001808:	f000 814b 	beq.w	8001aa2 <??ZbZclAttrIntegerRangeCheck_15>
 800180c:	282f      	cmp	r0, #47	; 0x2f
 800180e:	f000 8160 	beq.w	8001ad2 <??ZbZclAttrIntegerRangeCheck_16>
 8001812:	2830      	cmp	r0, #48	; 0x30
 8001814:	d010      	beq.n	8001838 <??ZbZclAttrIntegerRangeCheck_1>
 8001816:	2831      	cmp	r0, #49	; 0x31
 8001818:	d01f      	beq.n	800185a <??ZbZclAttrIntegerRangeCheck_2>
 800181a:	e164      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

0800181c <??ZbZclAttrIntegerRangeCheck_0>:
 800181c:	2d00      	cmp	r5, #0
 800181e:	d103      	bne.n	8001828 <??ZbZclAttrIntegerRangeCheck_18>
 8001820:	2cff      	cmp	r4, #255	; 0xff
 8001822:	d101      	bne.n	8001828 <??ZbZclAttrIntegerRangeCheck_18>
 8001824:	2001      	movs	r0, #1
 8001826:	e176      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001828 <??ZbZclAttrIntegerRangeCheck_18>:
 8001828:	2d00      	cmp	r5, #0
 800182a:	db04      	blt.n	8001836 <??ZbZclAttrIntegerRangeCheck_20>
 800182c:	dc01      	bgt.n	8001832 <??ZbZclAttrIntegerRangeCheck_21>
 800182e:	2c02      	cmp	r4, #2
 8001830:	d301      	bcc.n	8001836 <??ZbZclAttrIntegerRangeCheck_20>

08001832 <??ZbZclAttrIntegerRangeCheck_21>:
 8001832:	2000      	movs	r0, #0
 8001834:	e16f      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001836 <??ZbZclAttrIntegerRangeCheck_20>:
 8001836:	e156      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001838 <??ZbZclAttrIntegerRangeCheck_1>:
 8001838:	2d00      	cmp	r5, #0
 800183a:	d103      	bne.n	8001844 <??ZbZclAttrIntegerRangeCheck_23>
 800183c:	2cff      	cmp	r4, #255	; 0xff
 800183e:	d101      	bne.n	8001844 <??ZbZclAttrIntegerRangeCheck_23>
 8001840:	2001      	movs	r0, #1
 8001842:	e168      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001844 <??ZbZclAttrIntegerRangeCheck_23>:
 8001844:	2d00      	cmp	r5, #0
 8001846:	d405      	bmi.n	8001854 <??ZbZclAttrIntegerRangeCheck_24>
 8001848:	2d00      	cmp	r5, #0
 800184a:	db05      	blt.n	8001858 <??ZbZclAttrIntegerRangeCheck_25>
 800184c:	dc02      	bgt.n	8001854 <??ZbZclAttrIntegerRangeCheck_24>
 800184e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001852:	d301      	bcc.n	8001858 <??ZbZclAttrIntegerRangeCheck_25>

08001854 <??ZbZclAttrIntegerRangeCheck_24>:
 8001854:	2000      	movs	r0, #0
 8001856:	e15e      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001858 <??ZbZclAttrIntegerRangeCheck_25>:
 8001858:	e145      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

0800185a <??ZbZclAttrIntegerRangeCheck_2>:
 800185a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800185e:	2100      	movs	r1, #0
 8001860:	428d      	cmp	r5, r1
 8001862:	d103      	bne.n	800186c <??ZbZclAttrIntegerRangeCheck_27>
 8001864:	4284      	cmp	r4, r0
 8001866:	d101      	bne.n	800186c <??ZbZclAttrIntegerRangeCheck_27>
 8001868:	2001      	movs	r0, #1
 800186a:	e154      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

0800186c <??ZbZclAttrIntegerRangeCheck_27>:
 800186c:	2d00      	cmp	r5, #0
 800186e:	d405      	bmi.n	800187c <??ZbZclAttrIntegerRangeCheck_28>
 8001870:	2d00      	cmp	r5, #0
 8001872:	db05      	blt.n	8001880 <??ZbZclAttrIntegerRangeCheck_29>
 8001874:	dc02      	bgt.n	800187c <??ZbZclAttrIntegerRangeCheck_28>
 8001876:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800187a:	d301      	bcc.n	8001880 <??ZbZclAttrIntegerRangeCheck_29>

0800187c <??ZbZclAttrIntegerRangeCheck_28>:
 800187c:	2000      	movs	r0, #0
 800187e:	e14a      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001880 <??ZbZclAttrIntegerRangeCheck_29>:
 8001880:	e131      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001882 <??ZbZclAttrIntegerRangeCheck_3>:
 8001882:	f07f 407f 	mvns.w	r0, #4278190080	; 0xff000000
 8001886:	2100      	movs	r1, #0
 8001888:	428d      	cmp	r5, r1
 800188a:	d103      	bne.n	8001894 <??ZbZclAttrIntegerRangeCheck_31>
 800188c:	4284      	cmp	r4, r0
 800188e:	d101      	bne.n	8001894 <??ZbZclAttrIntegerRangeCheck_31>
 8001890:	2001      	movs	r0, #1
 8001892:	e140      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001894 <??ZbZclAttrIntegerRangeCheck_31>:
 8001894:	2d00      	cmp	r5, #0
 8001896:	d407      	bmi.n	80018a8 <??ZbZclAttrIntegerRangeCheck_32>
 8001898:	f05f 7080 	movs.w	r0, #16777216	; 0x1000000
 800189c:	2100      	movs	r1, #0
 800189e:	428d      	cmp	r5, r1
 80018a0:	db04      	blt.n	80018ac <??ZbZclAttrIntegerRangeCheck_33>
 80018a2:	dc01      	bgt.n	80018a8 <??ZbZclAttrIntegerRangeCheck_32>
 80018a4:	4284      	cmp	r4, r0
 80018a6:	d301      	bcc.n	80018ac <??ZbZclAttrIntegerRangeCheck_33>

080018a8 <??ZbZclAttrIntegerRangeCheck_32>:
 80018a8:	2000      	movs	r0, #0
 80018aa:	e134      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

080018ac <??ZbZclAttrIntegerRangeCheck_33>:
 80018ac:	e11b      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

080018ae <??ZbZclAttrIntegerRangeCheck_4>:
 80018ae:	f05f 30ff 	movs.w	r0, #4294967295
 80018b2:	2100      	movs	r1, #0
 80018b4:	428d      	cmp	r5, r1
 80018b6:	d103      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_35>
 80018b8:	4284      	cmp	r4, r0
 80018ba:	d101      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_35>
 80018bc:	2001      	movs	r0, #1
 80018be:	e12a      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

080018c0 <??ZbZclAttrIntegerRangeCheck_35>:
 80018c0:	2d00      	cmp	r5, #0
 80018c2:	d406      	bmi.n	80018d2 <??ZbZclAttrIntegerRangeCheck_36>
 80018c4:	2000      	movs	r0, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	428d      	cmp	r5, r1
 80018ca:	db04      	blt.n	80018d6 <??ZbZclAttrIntegerRangeCheck_37>
 80018cc:	dc01      	bgt.n	80018d2 <??ZbZclAttrIntegerRangeCheck_36>
 80018ce:	4284      	cmp	r4, r0
 80018d0:	d301      	bcc.n	80018d6 <??ZbZclAttrIntegerRangeCheck_37>

080018d2 <??ZbZclAttrIntegerRangeCheck_36>:
 80018d2:	2000      	movs	r0, #0
 80018d4:	e11f      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

080018d6 <??ZbZclAttrIntegerRangeCheck_37>:
 80018d6:	e106      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

080018d8 <??ZbZclAttrIntegerRangeCheck_5>:
 80018d8:	2dff      	cmp	r5, #255	; 0xff
 80018da:	d104      	bne.n	80018e6 <??ZbZclAttrIntegerRangeCheck_39>
 80018dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80018e0:	d101      	bne.n	80018e6 <??ZbZclAttrIntegerRangeCheck_39>
 80018e2:	2001      	movs	r0, #1
 80018e4:	e117      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

080018e6 <??ZbZclAttrIntegerRangeCheck_39>:
 80018e6:	2d00      	cmp	r5, #0
 80018e8:	d405      	bmi.n	80018f6 <??ZbZclAttrIntegerRangeCheck_40>
 80018ea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80018ee:	db04      	blt.n	80018fa <??ZbZclAttrIntegerRangeCheck_41>
 80018f0:	dc01      	bgt.n	80018f6 <??ZbZclAttrIntegerRangeCheck_40>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d301      	bcc.n	80018fa <??ZbZclAttrIntegerRangeCheck_41>

080018f6 <??ZbZclAttrIntegerRangeCheck_40>:
 80018f6:	2000      	movs	r0, #0
 80018f8:	e10d      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

080018fa <??ZbZclAttrIntegerRangeCheck_41>:
 80018fa:	e0f4      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

080018fc <??ZbZclAttrIntegerRangeCheck_6>:
 80018fc:	f05f 30ff 	movs.w	r0, #4294967295
 8001900:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001904:	428d      	cmp	r5, r1
 8001906:	d103      	bne.n	8001910 <??ZbZclAttrIntegerRangeCheck_43>
 8001908:	4284      	cmp	r4, r0
 800190a:	d101      	bne.n	8001910 <??ZbZclAttrIntegerRangeCheck_43>
 800190c:	2001      	movs	r0, #1
 800190e:	e102      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001910 <??ZbZclAttrIntegerRangeCheck_43>:
 8001910:	2d00      	cmp	r5, #0
 8001912:	d405      	bmi.n	8001920 <??ZbZclAttrIntegerRangeCheck_44>
 8001914:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8001918:	db04      	blt.n	8001924 <??ZbZclAttrIntegerRangeCheck_45>
 800191a:	dc01      	bgt.n	8001920 <??ZbZclAttrIntegerRangeCheck_44>
 800191c:	2c00      	cmp	r4, #0
 800191e:	d301      	bcc.n	8001924 <??ZbZclAttrIntegerRangeCheck_45>

08001920 <??ZbZclAttrIntegerRangeCheck_44>:
 8001920:	2000      	movs	r0, #0
 8001922:	e0f8      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001924 <??ZbZclAttrIntegerRangeCheck_45>:
 8001924:	e0df      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001926 <??ZbZclAttrIntegerRangeCheck_7>:
 8001926:	f05f 30ff 	movs.w	r0, #4294967295
 800192a:	f07f 417f 	mvns.w	r1, #4278190080	; 0xff000000
 800192e:	428d      	cmp	r5, r1
 8001930:	d103      	bne.n	800193a <??ZbZclAttrIntegerRangeCheck_47>
 8001932:	4284      	cmp	r4, r0
 8001934:	d101      	bne.n	800193a <??ZbZclAttrIntegerRangeCheck_47>
 8001936:	2001      	movs	r0, #1
 8001938:	e0ed      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

0800193a <??ZbZclAttrIntegerRangeCheck_47>:
 800193a:	2d00      	cmp	r5, #0
 800193c:	d407      	bmi.n	800194e <??ZbZclAttrIntegerRangeCheck_48>
 800193e:	2000      	movs	r0, #0
 8001940:	f05f 7180 	movs.w	r1, #16777216	; 0x1000000
 8001944:	428d      	cmp	r5, r1
 8001946:	db04      	blt.n	8001952 <??ZbZclAttrIntegerRangeCheck_49>
 8001948:	dc01      	bgt.n	800194e <??ZbZclAttrIntegerRangeCheck_48>
 800194a:	4284      	cmp	r4, r0
 800194c:	d301      	bcc.n	8001952 <??ZbZclAttrIntegerRangeCheck_49>

0800194e <??ZbZclAttrIntegerRangeCheck_48>:
 800194e:	2000      	movs	r0, #0
 8001950:	e0e1      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001952 <??ZbZclAttrIntegerRangeCheck_49>:
 8001952:	e0c8      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001954 <??ZbZclAttrIntegerRangeCheck_8>:
 8001954:	f05f 30ff 	movs.w	r0, #4294967295
 8001958:	f05f 31ff 	movs.w	r1, #4294967295
 800195c:	428d      	cmp	r5, r1
 800195e:	d103      	bne.n	8001968 <??ZbZclAttrIntegerRangeCheck_51>
 8001960:	4284      	cmp	r4, r0
 8001962:	d101      	bne.n	8001968 <??ZbZclAttrIntegerRangeCheck_51>
 8001964:	2001      	movs	r0, #1
 8001966:	e0d6      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001968 <??ZbZclAttrIntegerRangeCheck_51>:
 8001968:	e0bd      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

0800196a <??ZbZclAttrIntegerRangeCheck_9>:
 800196a:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 800196e:	f05f 31ff 	movs.w	r1, #4294967295
 8001972:	428d      	cmp	r5, r1
 8001974:	d103      	bne.n	800197e <??ZbZclAttrIntegerRangeCheck_52>
 8001976:	4284      	cmp	r4, r0
 8001978:	d101      	bne.n	800197e <??ZbZclAttrIntegerRangeCheck_52>
 800197a:	2001      	movs	r0, #1
 800197c:	e0cb      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

0800197e <??ZbZclAttrIntegerRangeCheck_52>:
 800197e:	f07f 007f 	mvns.w	r0, #127	; 0x7f
 8001982:	f05f 31ff 	movs.w	r1, #4294967295
 8001986:	428d      	cmp	r5, r1
 8001988:	db07      	blt.n	800199a <??ZbZclAttrIntegerRangeCheck_53>
 800198a:	dc01      	bgt.n	8001990 <??ZbZclAttrIntegerRangeCheck_54>
 800198c:	4284      	cmp	r4, r0
 800198e:	d304      	bcc.n	800199a <??ZbZclAttrIntegerRangeCheck_53>

08001990 <??ZbZclAttrIntegerRangeCheck_54>:
 8001990:	2d00      	cmp	r5, #0
 8001992:	db04      	blt.n	800199e <??ZbZclAttrIntegerRangeCheck_55>
 8001994:	dc01      	bgt.n	800199a <??ZbZclAttrIntegerRangeCheck_53>
 8001996:	2c80      	cmp	r4, #128	; 0x80
 8001998:	d301      	bcc.n	800199e <??ZbZclAttrIntegerRangeCheck_55>

0800199a <??ZbZclAttrIntegerRangeCheck_53>:
 800199a:	2000      	movs	r0, #0
 800199c:	e0bb      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

0800199e <??ZbZclAttrIntegerRangeCheck_55>:
 800199e:	e0a2      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

080019a0 <??ZbZclAttrIntegerRangeCheck_10>:
 80019a0:	485e      	ldr	r0, [pc, #376]	; (8001b1c <??DataTable1>)
 80019a2:	f05f 31ff 	movs.w	r1, #4294967295
 80019a6:	428d      	cmp	r5, r1
 80019a8:	d103      	bne.n	80019b2 <??ZbZclAttrIntegerRangeCheck_57>
 80019aa:	4284      	cmp	r4, r0
 80019ac:	d101      	bne.n	80019b2 <??ZbZclAttrIntegerRangeCheck_57>
 80019ae:	2001      	movs	r0, #1
 80019b0:	e0b1      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

080019b2 <??ZbZclAttrIntegerRangeCheck_57>:
 80019b2:	485a      	ldr	r0, [pc, #360]	; (8001b1c <??DataTable1>)
 80019b4:	f05f 31ff 	movs.w	r1, #4294967295
 80019b8:	428d      	cmp	r5, r1
 80019ba:	db08      	blt.n	80019ce <??ZbZclAttrIntegerRangeCheck_58>
 80019bc:	dc01      	bgt.n	80019c2 <??ZbZclAttrIntegerRangeCheck_59>
 80019be:	4284      	cmp	r4, r0
 80019c0:	d305      	bcc.n	80019ce <??ZbZclAttrIntegerRangeCheck_58>

080019c2 <??ZbZclAttrIntegerRangeCheck_59>:
 80019c2:	2d00      	cmp	r5, #0
 80019c4:	db05      	blt.n	80019d2 <??ZbZclAttrIntegerRangeCheck_60>
 80019c6:	dc02      	bgt.n	80019ce <??ZbZclAttrIntegerRangeCheck_58>
 80019c8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80019cc:	d301      	bcc.n	80019d2 <??ZbZclAttrIntegerRangeCheck_60>

080019ce <??ZbZclAttrIntegerRangeCheck_58>:
 80019ce:	2000      	movs	r0, #0
 80019d0:	e0a1      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

080019d2 <??ZbZclAttrIntegerRangeCheck_60>:
 80019d2:	e088      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

080019d4 <??ZbZclAttrIntegerRangeCheck_11>:
 80019d4:	4852      	ldr	r0, [pc, #328]	; (8001b20 <??DataTable1_1>)
 80019d6:	f05f 31ff 	movs.w	r1, #4294967295
 80019da:	428d      	cmp	r5, r1
 80019dc:	d103      	bne.n	80019e6 <??ZbZclAttrIntegerRangeCheck_62>
 80019de:	4284      	cmp	r4, r0
 80019e0:	d101      	bne.n	80019e6 <??ZbZclAttrIntegerRangeCheck_62>
 80019e2:	2001      	movs	r0, #1
 80019e4:	e097      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

080019e6 <??ZbZclAttrIntegerRangeCheck_62>:
 80019e6:	484e      	ldr	r0, [pc, #312]	; (8001b20 <??DataTable1_1>)
 80019e8:	f05f 31ff 	movs.w	r1, #4294967295
 80019ec:	428d      	cmp	r5, r1
 80019ee:	db08      	blt.n	8001a02 <??ZbZclAttrIntegerRangeCheck_63>
 80019f0:	dc01      	bgt.n	80019f6 <??ZbZclAttrIntegerRangeCheck_64>
 80019f2:	4284      	cmp	r4, r0
 80019f4:	d305      	bcc.n	8001a02 <??ZbZclAttrIntegerRangeCheck_63>

080019f6 <??ZbZclAttrIntegerRangeCheck_64>:
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	db05      	blt.n	8001a06 <??ZbZclAttrIntegerRangeCheck_65>
 80019fa:	dc02      	bgt.n	8001a02 <??ZbZclAttrIntegerRangeCheck_63>
 80019fc:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8001a00:	d301      	bcc.n	8001a06 <??ZbZclAttrIntegerRangeCheck_65>

08001a02 <??ZbZclAttrIntegerRangeCheck_63>:
 8001a02:	2000      	movs	r0, #0
 8001a04:	e087      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001a06 <??ZbZclAttrIntegerRangeCheck_65>:
 8001a06:	e06e      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001a08 <??ZbZclAttrIntegerRangeCheck_12>:
 8001a08:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8001a0c:	f05f 31ff 	movs.w	r1, #4294967295
 8001a10:	428d      	cmp	r5, r1
 8001a12:	d103      	bne.n	8001a1c <??ZbZclAttrIntegerRangeCheck_67>
 8001a14:	4284      	cmp	r4, r0
 8001a16:	d101      	bne.n	8001a1c <??ZbZclAttrIntegerRangeCheck_67>
 8001a18:	2001      	movs	r0, #1
 8001a1a:	e07c      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001a1c <??ZbZclAttrIntegerRangeCheck_67>:
 8001a1c:	f05f 4000 	movs.w	r0, #2147483648	; 0x80000000
 8001a20:	f05f 31ff 	movs.w	r1, #4294967295
 8001a24:	428d      	cmp	r5, r1
 8001a26:	db08      	blt.n	8001a3a <??ZbZclAttrIntegerRangeCheck_68>
 8001a28:	dc01      	bgt.n	8001a2e <??ZbZclAttrIntegerRangeCheck_69>
 8001a2a:	4284      	cmp	r4, r0
 8001a2c:	d305      	bcc.n	8001a3a <??ZbZclAttrIntegerRangeCheck_68>

08001a2e <??ZbZclAttrIntegerRangeCheck_69>:
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	db05      	blt.n	8001a3e <??ZbZclAttrIntegerRangeCheck_70>
 8001a32:	dc02      	bgt.n	8001a3a <??ZbZclAttrIntegerRangeCheck_68>
 8001a34:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001a38:	d301      	bcc.n	8001a3e <??ZbZclAttrIntegerRangeCheck_70>

08001a3a <??ZbZclAttrIntegerRangeCheck_68>:
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	e06b      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001a3e <??ZbZclAttrIntegerRangeCheck_70>:
 8001a3e:	e052      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001a40 <??ZbZclAttrIntegerRangeCheck_13>:
 8001a40:	2000      	movs	r0, #0
 8001a42:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 8001a46:	428d      	cmp	r5, r1
 8001a48:	d103      	bne.n	8001a52 <??ZbZclAttrIntegerRangeCheck_72>
 8001a4a:	4284      	cmp	r4, r0
 8001a4c:	d101      	bne.n	8001a52 <??ZbZclAttrIntegerRangeCheck_72>
 8001a4e:	2001      	movs	r0, #1
 8001a50:	e061      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001a52 <??ZbZclAttrIntegerRangeCheck_72>:
 8001a52:	2000      	movs	r0, #0
 8001a54:	f07f 017f 	mvns.w	r1, #127	; 0x7f
 8001a58:	428d      	cmp	r5, r1
 8001a5a:	db07      	blt.n	8001a6c <??ZbZclAttrIntegerRangeCheck_73>
 8001a5c:	dc01      	bgt.n	8001a62 <??ZbZclAttrIntegerRangeCheck_74>
 8001a5e:	4284      	cmp	r4, r0
 8001a60:	d304      	bcc.n	8001a6c <??ZbZclAttrIntegerRangeCheck_73>

08001a62 <??ZbZclAttrIntegerRangeCheck_74>:
 8001a62:	2d80      	cmp	r5, #128	; 0x80
 8001a64:	db04      	blt.n	8001a70 <??ZbZclAttrIntegerRangeCheck_75>
 8001a66:	dc01      	bgt.n	8001a6c <??ZbZclAttrIntegerRangeCheck_73>
 8001a68:	2c00      	cmp	r4, #0
 8001a6a:	d301      	bcc.n	8001a70 <??ZbZclAttrIntegerRangeCheck_75>

08001a6c <??ZbZclAttrIntegerRangeCheck_73>:
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	e052      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001a70 <??ZbZclAttrIntegerRangeCheck_75>:
 8001a70:	e039      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001a72 <??ZbZclAttrIntegerRangeCheck_14>:
 8001a72:	2000      	movs	r0, #0
 8001a74:	4929      	ldr	r1, [pc, #164]	; (8001b1c <??DataTable1>)
 8001a76:	428d      	cmp	r5, r1
 8001a78:	d103      	bne.n	8001a82 <??ZbZclAttrIntegerRangeCheck_77>
 8001a7a:	4284      	cmp	r4, r0
 8001a7c:	d101      	bne.n	8001a82 <??ZbZclAttrIntegerRangeCheck_77>
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e049      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001a82 <??ZbZclAttrIntegerRangeCheck_77>:
 8001a82:	2000      	movs	r0, #0
 8001a84:	4925      	ldr	r1, [pc, #148]	; (8001b1c <??DataTable1>)
 8001a86:	428d      	cmp	r5, r1
 8001a88:	db08      	blt.n	8001a9c <??ZbZclAttrIntegerRangeCheck_78>
 8001a8a:	dc01      	bgt.n	8001a90 <??ZbZclAttrIntegerRangeCheck_79>
 8001a8c:	4284      	cmp	r4, r0
 8001a8e:	d305      	bcc.n	8001a9c <??ZbZclAttrIntegerRangeCheck_78>

08001a90 <??ZbZclAttrIntegerRangeCheck_79>:
 8001a90:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8001a94:	db04      	blt.n	8001aa0 <??ZbZclAttrIntegerRangeCheck_80>
 8001a96:	dc01      	bgt.n	8001a9c <??ZbZclAttrIntegerRangeCheck_78>
 8001a98:	2c00      	cmp	r4, #0
 8001a9a:	d301      	bcc.n	8001aa0 <??ZbZclAttrIntegerRangeCheck_80>

08001a9c <??ZbZclAttrIntegerRangeCheck_78>:
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e03a      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001aa0 <??ZbZclAttrIntegerRangeCheck_80>:
 8001aa0:	e021      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001aa2 <??ZbZclAttrIntegerRangeCheck_15>:
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	491e      	ldr	r1, [pc, #120]	; (8001b20 <??DataTable1_1>)
 8001aa6:	428d      	cmp	r5, r1
 8001aa8:	d103      	bne.n	8001ab2 <??ZbZclAttrIntegerRangeCheck_82>
 8001aaa:	4284      	cmp	r4, r0
 8001aac:	d101      	bne.n	8001ab2 <??ZbZclAttrIntegerRangeCheck_82>
 8001aae:	2001      	movs	r0, #1
 8001ab0:	e031      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001ab2 <??ZbZclAttrIntegerRangeCheck_82>:
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	491a      	ldr	r1, [pc, #104]	; (8001b20 <??DataTable1_1>)
 8001ab6:	428d      	cmp	r5, r1
 8001ab8:	db08      	blt.n	8001acc <??ZbZclAttrIntegerRangeCheck_83>
 8001aba:	dc01      	bgt.n	8001ac0 <??ZbZclAttrIntegerRangeCheck_84>
 8001abc:	4284      	cmp	r4, r0
 8001abe:	d305      	bcc.n	8001acc <??ZbZclAttrIntegerRangeCheck_83>

08001ac0 <??ZbZclAttrIntegerRangeCheck_84>:
 8001ac0:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 8001ac4:	db04      	blt.n	8001ad0 <??ZbZclAttrIntegerRangeCheck_85>
 8001ac6:	dc01      	bgt.n	8001acc <??ZbZclAttrIntegerRangeCheck_83>
 8001ac8:	2c00      	cmp	r4, #0
 8001aca:	d301      	bcc.n	8001ad0 <??ZbZclAttrIntegerRangeCheck_85>

08001acc <??ZbZclAttrIntegerRangeCheck_83>:
 8001acc:	2000      	movs	r0, #0
 8001ace:	e022      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001ad0 <??ZbZclAttrIntegerRangeCheck_85>:
 8001ad0:	e009      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001ad2 <??ZbZclAttrIntegerRangeCheck_16>:
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f05f 4100 	movs.w	r1, #2147483648	; 0x80000000
 8001ad8:	428d      	cmp	r5, r1
 8001ada:	d103      	bne.n	8001ae4 <??ZbZclAttrIntegerRangeCheck_87>
 8001adc:	4284      	cmp	r4, r0
 8001ade:	d101      	bne.n	8001ae4 <??ZbZclAttrIntegerRangeCheck_87>
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	e018      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001ae4 <??ZbZclAttrIntegerRangeCheck_87>:
 8001ae4:	e7ff      	b.n	8001ae6 <??ZbZclAttrIntegerRangeCheck_17>

08001ae6 <??ZbZclAttrIntegerRangeCheck_17>:
 8001ae6:	ea56 0008 	orrs.w	r0, r6, r8
 8001aea:	ea57 0109 	orrs.w	r1, r7, r9
 8001aee:	2900      	cmp	r1, #0
 8001af0:	d103      	bne.n	8001afa <??ZbZclAttrIntegerRangeCheck_88>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d101      	bne.n	8001afa <??ZbZclAttrIntegerRangeCheck_88>
 8001af6:	2001      	movs	r0, #1
 8001af8:	e00d      	b.n	8001b16 <??ZbZclAttrIntegerRangeCheck_19>

08001afa <??ZbZclAttrIntegerRangeCheck_88>:
 8001afa:	42bd      	cmp	r5, r7
 8001afc:	db09      	blt.n	8001b12 <??ZbZclAttrIntegerRangeCheck_89>
 8001afe:	dc01      	bgt.n	8001b04 <??ZbZclAttrIntegerRangeCheck_90>
 8001b00:	42b4      	cmp	r4, r6
 8001b02:	d306      	bcc.n	8001b12 <??ZbZclAttrIntegerRangeCheck_89>

08001b04 <??ZbZclAttrIntegerRangeCheck_90>:
 8001b04:	45a9      	cmp	r9, r5
 8001b06:	db04      	blt.n	8001b12 <??ZbZclAttrIntegerRangeCheck_89>
 8001b08:	dc01      	bgt.n	8001b0e <??ZbZclAttrIntegerRangeCheck_91>
 8001b0a:	45a0      	cmp	r8, r4
 8001b0c:	d301      	bcc.n	8001b12 <??ZbZclAttrIntegerRangeCheck_89>

08001b0e <??ZbZclAttrIntegerRangeCheck_91>:
 8001b0e:	2001      	movs	r0, #1
 8001b10:	e000      	b.n	8001b14 <??ZbZclAttrIntegerRangeCheck_92>

08001b12 <??ZbZclAttrIntegerRangeCheck_89>:
 8001b12:	2000      	movs	r0, #0

08001b14 <??ZbZclAttrIntegerRangeCheck_92>:
 8001b14:	b2c0      	uxtb	r0, r0

08001b16 <??ZbZclAttrIntegerRangeCheck_19>:
 8001b16:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001b1a:	4770      	bx	lr

08001b1c <??DataTable1>:
 8001b1c:	8000 ffff                                   ....

08001b20 <??DataTable1_1>:
 8001b20:	0000 ff80                                   ....

08001b24 <ZbZclAttrIntegerRead>:
 8001b24:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	0006      	movs	r6, r0
 8001b2c:	000f      	movs	r7, r1
 8001b2e:	0015      	movs	r5, r2
 8001b30:	001c      	movs	r4, r3
 8001b32:	2000      	movs	r0, #0
 8001b34:	f88d 0009 	strb.w	r0, [sp, #9]
 8001b38:	f05f 0808 	movs.w	r8, #8
 8001b3c:	f05f 0900 	movs.w	r9, #0
 8001b40:	f10d 0a0c 	add.w	sl, sp, #12
 8001b44:	464a      	mov	r2, r9
 8001b46:	4641      	mov	r1, r8
 8001b48:	4650      	mov	r0, sl
 8001b4a:	f004 f8b7 	bl	8005cbc <__aeabi_memset>
 8001b4e:	2000      	movs	r0, #0
 8001b50:	9001      	str	r0, [sp, #4]
 8001b52:	2008      	movs	r0, #8
 8001b54:	9000      	str	r0, [sp, #0]
 8001b56:	ab03      	add	r3, sp, #12
 8001b58:	f10d 0209 	add.w	r2, sp, #9
 8001b5c:	0039      	movs	r1, r7
 8001b5e:	b289      	uxth	r1, r1
 8001b60:	0030      	movs	r0, r6
 8001b62:	f7fe fcee 	bl	8000542 <ZbZclAttrRead>
 8001b66:	f88d 0008 	strb.w	r0, [sp, #8]
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	d002      	beq.n	8001b74 <??ZbZclAttrIntegerRead_0>
 8001b6e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001b72:	7020      	strb	r0, [r4, #0]

08001b74 <??ZbZclAttrIntegerRead_0>:
 8001b74:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d002      	beq.n	8001b82 <??ZbZclAttrIntegerRead_1>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	e01a      	b.n	8001bb8 <??ZbZclAttrIntegerRead_2>

08001b82 <??ZbZclAttrIntegerRead_1>:
 8001b82:	aa02      	add	r2, sp, #8
 8001b84:	a903      	add	r1, sp, #12
 8001b86:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001b8a:	f7ff fcb1 	bl	80014f0 <ZbZclParseInteger>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	000b      	movs	r3, r1
 8001b92:	2c00      	cmp	r4, #0
 8001b94:	d002      	beq.n	8001b9c <??ZbZclAttrIntegerRead_3>
 8001b96:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001b9a:	7020      	strb	r0, [r4, #0]

08001b9c <??ZbZclAttrIntegerRead_3>:
 8001b9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d002      	beq.n	8001baa <??ZbZclAttrIntegerRead_4>
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	e006      	b.n	8001bb8 <??ZbZclAttrIntegerRead_2>

08001baa <??ZbZclAttrIntegerRead_4>:
 8001baa:	2d00      	cmp	r5, #0
 8001bac:	d002      	beq.n	8001bb4 <??ZbZclAttrIntegerRead_5>
 8001bae:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001bb2:	7028      	strb	r0, [r5, #0]

08001bb4 <??ZbZclAttrIntegerRead_5>:
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	0019      	movs	r1, r3

08001bb8 <??ZbZclAttrIntegerRead_2>:
 8001bb8:	b006      	add	sp, #24
 8001bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001bbe <ZbZclAttrIntegerWrite>:
 8001bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	4680      	mov	r8, r0
 8001bc6:	4689      	mov	r9, r1
 8001bc8:	0014      	movs	r4, r2
 8001bca:	001d      	movs	r5, r3
 8001bcc:	f1b8 0f00 	cmp.w	r8, #0
 8001bd0:	d101      	bne.n	8001bd6 <??ZbZclAttrIntegerWrite_0>
 8001bd2:	2087      	movs	r0, #135	; 0x87
 8001bd4:	e042      	b.n	8001c5c <??ZbZclAttrIntegerWrite_1>

08001bd6 <??ZbZclAttrIntegerWrite_0>:
 8001bd6:	ab04      	add	r3, sp, #16
 8001bd8:	f10d 0211 	add.w	r2, sp, #17
 8001bdc:	4649      	mov	r1, r9
 8001bde:	b289      	uxth	r1, r1
 8001be0:	4640      	mov	r0, r8
 8001be2:	f7ff ff9f 	bl	8001b24 <ZbZclAttrIntegerRead>
 8001be6:	0006      	movs	r6, r0
 8001be8:	000f      	movs	r7, r1
 8001bea:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d002      	beq.n	8001bf8 <??ZbZclAttrIntegerWrite_2>
 8001bf2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001bf6:	e031      	b.n	8001c5c <??ZbZclAttrIntegerWrite_1>

08001bf8 <??ZbZclAttrIntegerWrite_2>:
 8001bf8:	42af      	cmp	r7, r5
 8001bfa:	d103      	bne.n	8001c04 <??ZbZclAttrIntegerWrite_3>
 8001bfc:	42a6      	cmp	r6, r4
 8001bfe:	d101      	bne.n	8001c04 <??ZbZclAttrIntegerWrite_3>
 8001c00:	2000      	movs	r0, #0
 8001c02:	e02b      	b.n	8001c5c <??ZbZclAttrIntegerWrite_1>

08001c04 <??ZbZclAttrIntegerWrite_3>:
 8001c04:	2000      	movs	r0, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	e9cd 0100 	strd	r0, r1, [sp]
 8001c14:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001c18:	0020      	movs	r0, r4
 8001c1a:	0029      	movs	r1, r5
 8001c1c:	f7ff fdac 	bl	8001778 <ZbZclAttrIntegerRangeCheck>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d101      	bne.n	8001c28 <??ZbZclAttrIntegerWrite_4>
 8001c24:	2087      	movs	r0, #135	; 0x87
 8001c26:	e019      	b.n	8001c5c <??ZbZclAttrIntegerWrite_1>

08001c28 <??ZbZclAttrIntegerWrite_4>:
 8001c28:	0022      	movs	r2, r4
 8001c2a:	002b      	movs	r3, r5
 8001c2c:	a805      	add	r0, sp, #20
 8001c2e:	f7fe fb46 	bl	80002be <putle64>
 8001c32:	2002      	movs	r0, #2
 8001c34:	9001      	str	r0, [sp, #4]
 8001c36:	2008      	movs	r0, #8
 8001c38:	9000      	str	r0, [sp, #0]
 8001c3a:	ab05      	add	r3, sp, #20
 8001c3c:	464a      	mov	r2, r9
 8001c3e:	b292      	uxth	r2, r2
 8001c40:	2100      	movs	r1, #0
 8001c42:	4640      	mov	r0, r8
 8001c44:	f7fe fdcf 	bl	80007e6 <ZbZclAttrWrite>
 8001c48:	f88d 0010 	strb.w	r0, [sp, #16]
 8001c4c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d002      	beq.n	8001c5a <??ZbZclAttrIntegerWrite_5>
 8001c54:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001c58:	e000      	b.n	8001c5c <??ZbZclAttrIntegerWrite_1>

08001c5a <??ZbZclAttrIntegerWrite_5>:
 8001c5a:	2000      	movs	r0, #0

08001c5c <??ZbZclAttrIntegerWrite_1>:
 8001c5c:	b007      	add	sp, #28
 8001c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c62 <ZbZclAttrIntegerIncrement>:
 8001c62:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	468b      	mov	fp, r1
 8001c6a:	0016      	movs	r6, r2
 8001c6c:	001f      	movs	r7, r3
 8001c6e:	f05f 0a00 	movs.w	sl, #0
 8001c72:	466b      	mov	r3, sp
 8001c74:	f10d 0201 	add.w	r2, sp, #1
 8001c78:	4659      	mov	r1, fp
 8001c7a:	b289      	uxth	r1, r1
 8001c7c:	9804      	ldr	r0, [sp, #16]
 8001c7e:	f7ff ff51 	bl	8001b24 <ZbZclAttrIntegerRead>
 8001c82:	0002      	movs	r2, r0
 8001c84:	000b      	movs	r3, r1
 8001c86:	f89d 0000 	ldrb.w	r0, [sp]
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d002      	beq.n	8001c94 <??ZbZclAttrIntegerIncrement_0>
 8001c8e:	f89d 0000 	ldrb.w	r0, [sp]
 8001c92:	e03e      	b.n	8001d12 <??ZbZclAttrIntegerIncrement_1>

08001c94 <??ZbZclAttrIntegerIncrement_0>:
 8001c94:	eb12 0806 	adds.w	r8, r2, r6
 8001c98:	eb53 0907 	adcs.w	r9, r3, r7
 8001c9c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ca0:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8001ca4:	f7ff f9ea 	bl	800107c <ZbZclAttrTypeLength>
 8001ca8:	9001      	str	r0, [sp, #4]
 8001caa:	9801      	ldr	r0, [sp, #4]
 8001cac:	2801      	cmp	r0, #1
 8001cae:	d017      	beq.n	8001ce0 <??ZbZclAttrIntegerIncrement_2>
 8001cb0:	2802      	cmp	r0, #2
 8001cb2:	d00b      	beq.n	8001ccc <??ZbZclAttrIntegerIncrement_3>
 8001cb4:	2804      	cmp	r0, #4
 8001cb6:	d002      	beq.n	8001cbe <??ZbZclAttrIntegerIncrement_4>
 8001cb8:	2808      	cmp	r0, #8
 8001cba:	d118      	bne.n	8001cee <??ZbZclAttrIntegerIncrement_5>

08001cbc <??ZbZclAttrIntegerIncrement_6>:
 8001cbc:	e019      	b.n	8001cf2 <??ZbZclAttrIntegerIncrement_7>

08001cbe <??ZbZclAttrIntegerIncrement_4>:
 8001cbe:	f038 0000 	bics.w	r0, r8, #0
 8001cc2:	f039 31ff 	bics.w	r1, r9, #4294967295
 8001cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cca:	e012      	b.n	8001cf2 <??ZbZclAttrIntegerIncrement_7>

08001ccc <??ZbZclAttrIntegerIncrement_3>:
 8001ccc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	ea18 0000 	ands.w	r0, r8, r0
 8001cd6:	ea19 0101 	ands.w	r1, r9, r1
 8001cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cde:	e008      	b.n	8001cf2 <??ZbZclAttrIntegerIncrement_7>

08001ce0 <??ZbZclAttrIntegerIncrement_2>:
 8001ce0:	f018 00ff 	ands.w	r0, r8, #255	; 0xff
 8001ce4:	f019 0100 	ands.w	r1, r9, #0
 8001ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cec:	e001      	b.n	8001cf2 <??ZbZclAttrIntegerIncrement_7>

08001cee <??ZbZclAttrIntegerIncrement_5>:
 8001cee:	2001      	movs	r0, #1
 8001cf0:	4682      	mov	sl, r0

08001cf2 <??ZbZclAttrIntegerIncrement_7>:
 8001cf2:	4650      	mov	r0, sl
 8001cf4:	b2c0      	uxtb	r0, r0
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d001      	beq.n	8001cfe <??ZbZclAttrIntegerIncrement_8>
 8001cfa:	2086      	movs	r0, #134	; 0x86
 8001cfc:	e009      	b.n	8001d12 <??ZbZclAttrIntegerIncrement_1>

08001cfe <??ZbZclAttrIntegerIncrement_8>:
 8001cfe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8001d02:	0022      	movs	r2, r4
 8001d04:	002b      	movs	r3, r5
 8001d06:	4659      	mov	r1, fp
 8001d08:	b289      	uxth	r1, r1
 8001d0a:	9804      	ldr	r0, [sp, #16]
 8001d0c:	f7ff ff57 	bl	8001bbe <ZbZclAttrIntegerWrite>
 8001d10:	2000      	movs	r0, #0

08001d12 <??ZbZclAttrIntegerIncrement_1>:
 8001d12:	b005      	add	sp, #20
 8001d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d18 <ZbZclAttrEuiRead>:
 8001d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	0005      	movs	r5, r0
 8001d20:	000e      	movs	r6, r1
 8001d22:	0014      	movs	r4, r2
 8001d24:	f05f 0808 	movs.w	r8, #8
 8001d28:	f05f 0900 	movs.w	r9, #0
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	464a      	mov	r2, r9
 8001d30:	4641      	mov	r1, r8
 8001d32:	0038      	movs	r0, r7
 8001d34:	f003 ffc2 	bl	8005cbc <__aeabi_memset>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	9001      	str	r0, [sp, #4]
 8001d3c:	2008      	movs	r0, #8
 8001d3e:	9000      	str	r0, [sp, #0]
 8001d40:	ab02      	add	r3, sp, #8
 8001d42:	2200      	movs	r2, #0
 8001d44:	0031      	movs	r1, r6
 8001d46:	b289      	uxth	r1, r1
 8001d48:	0028      	movs	r0, r5
 8001d4a:	f7fe fbfa 	bl	8000542 <ZbZclAttrRead>
 8001d4e:	0007      	movs	r7, r0
 8001d50:	2c00      	cmp	r4, #0
 8001d52:	d000      	beq.n	8001d56 <??ZbZclAttrEuiRead_0>
 8001d54:	7027      	strb	r7, [r4, #0]

08001d56 <??ZbZclAttrEuiRead_0>:
 8001d56:	0038      	movs	r0, r7
 8001d58:	b2c0      	uxtb	r0, r0
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d002      	beq.n	8001d64 <??ZbZclAttrEuiRead_1>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	e002      	b.n	8001d6a <??ZbZclAttrEuiRead_2>

08001d64 <??ZbZclAttrEuiRead_1>:
 8001d64:	a802      	add	r0, sp, #8
 8001d66:	f7fe fa57 	bl	8000218 <pletoh64>

08001d6a <??ZbZclAttrEuiRead_2>:
 8001d6a:	b005      	add	sp, #20
 8001d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001d70 <ZbZclAttrEuiWrite>:
 8001d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d74:	b085      	sub	sp, #20
 8001d76:	4680      	mov	r8, r0
 8001d78:	4689      	mov	r9, r1
 8001d7a:	0014      	movs	r4, r2
 8001d7c:	001d      	movs	r5, r3
 8001d7e:	f1b8 0f00 	cmp.w	r8, #0
 8001d82:	d101      	bne.n	8001d88 <??ZbZclAttrEuiWrite_0>
 8001d84:	2087      	movs	r0, #135	; 0x87
 8001d86:	e02e      	b.n	8001de6 <??ZbZclAttrEuiWrite_1>

08001d88 <??ZbZclAttrEuiWrite_0>:
 8001d88:	aa02      	add	r2, sp, #8
 8001d8a:	4649      	mov	r1, r9
 8001d8c:	b289      	uxth	r1, r1
 8001d8e:	4640      	mov	r0, r8
 8001d90:	f7ff ffc2 	bl	8001d18 <ZbZclAttrEuiRead>
 8001d94:	0006      	movs	r6, r0
 8001d96:	000f      	movs	r7, r1
 8001d98:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d002      	beq.n	8001da6 <??ZbZclAttrEuiWrite_2>
 8001da0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001da4:	e01f      	b.n	8001de6 <??ZbZclAttrEuiWrite_1>

08001da6 <??ZbZclAttrEuiWrite_2>:
 8001da6:	42af      	cmp	r7, r5
 8001da8:	d103      	bne.n	8001db2 <??ZbZclAttrEuiWrite_3>
 8001daa:	42a6      	cmp	r6, r4
 8001dac:	d101      	bne.n	8001db2 <??ZbZclAttrEuiWrite_3>
 8001dae:	2000      	movs	r0, #0
 8001db0:	e019      	b.n	8001de6 <??ZbZclAttrEuiWrite_1>

08001db2 <??ZbZclAttrEuiWrite_3>:
 8001db2:	0022      	movs	r2, r4
 8001db4:	002b      	movs	r3, r5
 8001db6:	a803      	add	r0, sp, #12
 8001db8:	f7fe fa81 	bl	80002be <putle64>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	9001      	str	r0, [sp, #4]
 8001dc0:	2008      	movs	r0, #8
 8001dc2:	9000      	str	r0, [sp, #0]
 8001dc4:	ab03      	add	r3, sp, #12
 8001dc6:	464a      	mov	r2, r9
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4640      	mov	r0, r8
 8001dce:	f7fe fd0a 	bl	80007e6 <ZbZclAttrWrite>
 8001dd2:	f88d 0008 	strb.w	r0, [sp, #8]
 8001dd6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d002      	beq.n	8001de4 <??ZbZclAttrEuiWrite_4>
 8001dde:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001de2:	e000      	b.n	8001de6 <??ZbZclAttrEuiWrite_1>

08001de4 <??ZbZclAttrEuiWrite_4>:
 8001de4:	2000      	movs	r0, #0

08001de6 <??ZbZclAttrEuiWrite_1>:
 8001de6:	b005      	add	sp, #20
 8001de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001dec <ZbZclAttrAppendList>:
 8001dec:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df0:	b089      	sub	sp, #36	; 0x24
 8001df2:	0007      	movs	r7, r0
 8001df4:	000e      	movs	r6, r1
 8001df6:	68b8      	ldr	r0, [r7, #8]
 8001df8:	9008      	str	r0, [sp, #32]
 8001dfa:	2e00      	cmp	r6, #0
 8001dfc:	d002      	beq.n	8001e04 <??ZbZclAttrAppendList_0>
 8001dfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001e00:	2800      	cmp	r0, #0
 8001e02:	d101      	bne.n	8001e08 <??ZbZclAttrAppendList_1>

08001e04 <??ZbZclAttrAppendList_0>:
 8001e04:	2000      	movs	r0, #0
 8001e06:	e0c6      	b.n	8001f96 <??ZbZclAttrAppendList_2>

08001e08 <??ZbZclAttrAppendList_1>:
 8001e08:	f05f 0800 	movs.w	r8, #0

08001e0c <??ZbZclAttrAppendList_3>:
 8001e0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001e0e:	4580      	cmp	r8, r0
 8001e10:	f080 80bd 	bcs.w	8001f8e <??ZbZclAttrAppendList_4>
 8001e14:	f05f 0928 	movs.w	r9, #40	; 0x28
 8001e18:	fb09 f008 	mul.w	r0, r9, r8
 8001e1c:	4430      	add	r0, r6
 8001e1e:	7900      	ldrb	r0, [r0, #4]
 8001e20:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8001e24:	d007      	beq.n	8001e36 <??ZbZclAttrAppendList_5>
 8001e26:	fb09 f008 	mul.w	r0, r9, r8
 8001e2a:	4430      	add	r0, r6
 8001e2c:	68c0      	ldr	r0, [r0, #12]
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d101      	bne.n	8001e36 <??ZbZclAttrAppendList_5>
 8001e32:	2001      	movs	r0, #1
 8001e34:	e0af      	b.n	8001f96 <??ZbZclAttrAppendList_2>

08001e36 <??ZbZclAttrAppendList_5>:
 8001e36:	fb09 f008 	mul.w	r0, r9, r8
 8001e3a:	5a31      	ldrh	r1, [r6, r0]
 8001e3c:	0038      	movs	r0, r7
 8001e3e:	f7fe fa7c 	bl	800033a <ZbZclAttrFind>
 8001e42:	0005      	movs	r5, r0
 8001e44:	2d00      	cmp	r5, #0
 8001e46:	d003      	beq.n	8001e50 <??ZbZclAttrAppendList_6>
 8001e48:	0029      	movs	r1, r5
 8001e4a:	0038      	movs	r0, r7
 8001e4c:	f000 f8b6 	bl	8001fbc <ZbZclAttrFreeAttr>

08001e50 <??ZbZclAttrAppendList_6>:
 8001e50:	2418      	movs	r4, #24
 8001e52:	f05f 0a00 	movs.w	sl, #0
 8001e56:	f10d 0b04 	add.w	fp, sp, #4
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	0021      	movs	r1, r4
 8001e5e:	4658      	mov	r0, fp
 8001e60:	f003 ff2c 	bl	8005cbc <__aeabi_memset>
 8001e64:	a801      	add	r0, sp, #4
 8001e66:	9001      	str	r0, [sp, #4]
 8001e68:	a801      	add	r0, sp, #4
 8001e6a:	9002      	str	r0, [sp, #8]
 8001e6c:	fb09 f008 	mul.w	r0, r9, r8
 8001e70:	4430      	add	r0, r6
 8001e72:	9003      	str	r0, [sp, #12]
 8001e74:	fb09 f008 	mul.w	r0, r9, r8
 8001e78:	4430      	add	r0, r6
 8001e7a:	7900      	ldrb	r0, [r0, #4]
 8001e7c:	0780      	lsls	r0, r0, #30
 8001e7e:	d50b      	bpl.n	8001e98 <??ZbZclAttrAppendList_7>
 8001e80:	fb09 f008 	mul.w	r0, r9, r8
 8001e84:	4430      	add	r0, r6
 8001e86:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8001e88:	f8ad 001a 	strh.w	r0, [sp, #26]
 8001e8c:	fb09 f008 	mul.w	r0, r9, r8
 8001e90:	4430      	add	r0, r6
 8001e92:	8c00      	ldrh	r0, [r0, #32]
 8001e94:	f8ad 0018 	strh.w	r0, [sp, #24]

08001e98 <??ZbZclAttrAppendList_7>:
 8001e98:	fb09 f008 	mul.w	r0, r9, r8
 8001e9c:	4430      	add	r0, r6
 8001e9e:	7900      	ldrb	r0, [r0, #4]
 8001ea0:	f010 0030 	ands.w	r0, r0, #48	; 0x30
 8001ea4:	2830      	cmp	r0, #48	; 0x30
 8001ea6:	d108      	bne.n	8001eba <??ZbZclAttrAppendList_8>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	9000      	str	r0, [sp, #0]
 8001eac:	fb09 f908 	mul.w	r9, r9, r8
 8001eb0:	eb06 0009 	add.w	r0, r6, r9
 8001eb4:	6880      	ldr	r0, [r0, #8]
 8001eb6:	9005      	str	r0, [sp, #20]
 8001eb8:	e034      	b.n	8001f24 <??ZbZclAttrAppendList_9>

08001eba <??ZbZclAttrAppendList_8>:
 8001eba:	fb09 f008 	mul.w	r0, r9, r8
 8001ebe:	4430      	add	r0, r6
 8001ec0:	6880      	ldr	r0, [r0, #8]
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d01f      	beq.n	8001f06 <??ZbZclAttrAppendList_10>
 8001ec6:	fb09 f908 	mul.w	r9, r9, r8
 8001eca:	eb06 0009 	add.w	r0, r6, r9
 8001ece:	6880      	ldr	r0, [r0, #8]
 8001ed0:	9005      	str	r0, [sp, #20]
 8001ed2:	9803      	ldr	r0, [sp, #12]
 8001ed4:	7880      	ldrb	r0, [r0, #2]
 8001ed6:	2841      	cmp	r0, #65	; 0x41
 8001ed8:	d003      	beq.n	8001ee2 <??ZbZclAttrAppendList_11>
 8001eda:	9803      	ldr	r0, [sp, #12]
 8001edc:	7880      	ldrb	r0, [r0, #2]
 8001ede:	2842      	cmp	r0, #66	; 0x42
 8001ee0:	d103      	bne.n	8001eea <??ZbZclAttrAppendList_12>

08001ee2 <??ZbZclAttrAppendList_11>:
 8001ee2:	9805      	ldr	r0, [sp, #20]
 8001ee4:	1c40      	adds	r0, r0, #1
 8001ee6:	9005      	str	r0, [sp, #20]
 8001ee8:	e00a      	b.n	8001f00 <??ZbZclAttrAppendList_13>

08001eea <??ZbZclAttrAppendList_12>:
 8001eea:	9803      	ldr	r0, [sp, #12]
 8001eec:	7880      	ldrb	r0, [r0, #2]
 8001eee:	2843      	cmp	r0, #67	; 0x43
 8001ef0:	d003      	beq.n	8001efa <??ZbZclAttrAppendList_14>
 8001ef2:	9803      	ldr	r0, [sp, #12]
 8001ef4:	7880      	ldrb	r0, [r0, #2]
 8001ef6:	2844      	cmp	r0, #68	; 0x44
 8001ef8:	d102      	bne.n	8001f00 <??ZbZclAttrAppendList_13>

08001efa <??ZbZclAttrAppendList_14>:
 8001efa:	9805      	ldr	r0, [sp, #20]
 8001efc:	1c80      	adds	r0, r0, #2
 8001efe:	9005      	str	r0, [sp, #20]

08001f00 <??ZbZclAttrAppendList_13>:
 8001f00:	9805      	ldr	r0, [sp, #20]
 8001f02:	9000      	str	r0, [sp, #0]
 8001f04:	e00e      	b.n	8001f24 <??ZbZclAttrAppendList_9>

08001f06 <??ZbZclAttrAppendList_10>:
 8001f06:	fb09 f908 	mul.w	r9, r9, r8
 8001f0a:	eb06 0009 	add.w	r0, r6, r9
 8001f0e:	7880      	ldrb	r0, [r0, #2]
 8001f10:	f7ff f8b4 	bl	800107c <ZbZclAttrTypeLength>
 8001f14:	9005      	str	r0, [sp, #20]
 8001f16:	9805      	ldr	r0, [sp, #20]
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d101      	bne.n	8001f20 <??ZbZclAttrAppendList_15>
 8001f1c:	208d      	movs	r0, #141	; 0x8d
 8001f1e:	e03a      	b.n	8001f96 <??ZbZclAttrAppendList_2>

08001f20 <??ZbZclAttrAppendList_15>:
 8001f20:	9805      	ldr	r0, [sp, #20]
 8001f22:	9000      	str	r0, [sp, #0]

08001f24 <??ZbZclAttrAppendList_9>:
 8001f24:	2300      	movs	r3, #0
 8001f26:	a236      	add	r2, pc, #216	; (adr r2, 8002000 <??DataTable1>)
 8001f28:	9900      	ldr	r1, [sp, #0]
 8001f2a:	3118      	adds	r1, #24
 8001f2c:	9808      	ldr	r0, [sp, #32]
 8001f2e:	f010 fc37 	bl	80127a0 <zb_heap_alloc>
 8001f32:	0004      	movs	r4, r0
 8001f34:	2c00      	cmp	r4, #0
 8001f36:	d101      	bne.n	8001f3c <??ZbZclAttrAppendList_16>
 8001f38:	2089      	movs	r0, #137	; 0x89
 8001f3a:	e02c      	b.n	8001f96 <??ZbZclAttrAppendList_2>

08001f3c <??ZbZclAttrAppendList_16>:
 8001f3c:	2518      	movs	r5, #24
 8001f3e:	f10d 0904 	add.w	r9, sp, #4
 8001f42:	46a2      	mov	sl, r4
 8001f44:	002a      	movs	r2, r5
 8001f46:	4649      	mov	r1, r9
 8001f48:	4650      	mov	r0, sl
 8001f4a:	f012 fe50 	bl	8014bee <__aeabi_memcpy>
 8001f4e:	9800      	ldr	r0, [sp, #0]
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d00c      	beq.n	8001f6e <??ZbZclAttrAppendList_17>
 8001f54:	f114 0018 	adds.w	r0, r4, #24
 8001f58:	60e0      	str	r0, [r4, #12]
 8001f5a:	9800      	ldr	r0, [sp, #0]
 8001f5c:	9007      	str	r0, [sp, #28]
 8001f5e:	2500      	movs	r5, #0
 8001f60:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8001f64:	002a      	movs	r2, r5
 8001f66:	9907      	ldr	r1, [sp, #28]
 8001f68:	4648      	mov	r0, r9
 8001f6a:	f003 fea7 	bl	8005cbc <__aeabi_memset>

08001f6e <??ZbZclAttrAppendList_17>:
 8001f6e:	0021      	movs	r1, r4
 8001f70:	0038      	movs	r0, r7
 8001f72:	f7fe f9b3 	bl	80002dc <ZbZclAttrAddSorted>
 8001f76:	68e0      	ldr	r0, [r4, #12]
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d005      	beq.n	8001f88 <??ZbZclAttrAppendList_18>
 8001f7c:	6922      	ldr	r2, [r4, #16]
 8001f7e:	68e1      	ldr	r1, [r4, #12]
 8001f80:	68a0      	ldr	r0, [r4, #8]
 8001f82:	7880      	ldrb	r0, [r0, #2]
 8001f84:	f7fe fdfa 	bl	8000b7c <ZbZclAttrDefaultValue>

08001f88 <??ZbZclAttrAppendList_18>:
 8001f88:	f118 0801 	adds.w	r8, r8, #1
 8001f8c:	e73e      	b.n	8001e0c <??ZbZclAttrAppendList_3>

08001f8e <??ZbZclAttrAppendList_4>:
 8001f8e:	0038      	movs	r0, r7
 8001f90:	f000 ff3a 	bl	8002e08 <zcl_reporting_create_default_reports>
 8001f94:	2000      	movs	r0, #0

08001f96 <??ZbZclAttrAppendList_2>:
 8001f96:	b00b      	add	sp, #44	; 0x2c
 8001f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f9c <ZbZclAttrCallbackExec>:
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	0004      	movs	r4, r0
 8001fa0:	000d      	movs	r5, r1
 8001fa2:	0016      	movs	r6, r2
 8001fa4:	68a8      	ldr	r0, [r5, #8]
 8001fa6:	68c0      	ldr	r0, [r0, #12]
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	d005      	beq.n	8001fb8 <??ZbZclAttrCallbackExec_0>
 8001fac:	0031      	movs	r1, r6
 8001fae:	0020      	movs	r0, r4
 8001fb0:	68aa      	ldr	r2, [r5, #8]
 8001fb2:	68d2      	ldr	r2, [r2, #12]
 8001fb4:	4790      	blx	r2
 8001fb6:	e000      	b.n	8001fba <??ZbZclAttrCallbackExec_1>

08001fb8 <??ZbZclAttrCallbackExec_0>:
 8001fb8:	2001      	movs	r0, #1

08001fba <??ZbZclAttrCallbackExec_1>:
 8001fba:	bd70      	pop	{r4, r5, r6, pc}

08001fbc <ZbZclAttrFreeAttr>:
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	0004      	movs	r4, r0
 8001fc0:	000d      	movs	r5, r1
 8001fc2:	68a8      	ldr	r0, [r5, #8]
 8001fc4:	7900      	ldrb	r0, [r0, #4]
 8001fc6:	0780      	lsls	r0, r0, #30
 8001fc8:	d50b      	bpl.n	8001fe2 <??ZbZclAttrFreeAttr_0>
 8001fca:	2200      	movs	r2, #0
 8001fcc:	68a8      	ldr	r0, [r5, #8]
 8001fce:	8801      	ldrh	r1, [r0, #0]
 8001fd0:	0020      	movs	r0, r4
 8001fd2:	f000 fdfd 	bl	8002bd0 <zcl_cluster_attr_report_delete>
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	68a8      	ldr	r0, [r5, #8]
 8001fda:	8801      	ldrh	r1, [r0, #0]
 8001fdc:	0020      	movs	r0, r4
 8001fde:	f000 fdf7 	bl	8002bd0 <zcl_cluster_attr_report_delete>

08001fe2 <??ZbZclAttrFreeAttr_0>:
 8001fe2:	6868      	ldr	r0, [r5, #4]
 8001fe4:	6829      	ldr	r1, [r5, #0]
 8001fe6:	6048      	str	r0, [r1, #4]
 8001fe8:	6828      	ldr	r0, [r5, #0]
 8001fea:	6869      	ldr	r1, [r5, #4]
 8001fec:	6008      	str	r0, [r1, #0]
 8001fee:	602d      	str	r5, [r5, #0]
 8001ff0:	606d      	str	r5, [r5, #4]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	a202      	add	r2, pc, #8	; (adr r2, 8002000 <??DataTable1>)
 8001ff6:	0029      	movs	r1, r5
 8001ff8:	68a0      	ldr	r0, [r4, #8]
 8001ffa:	f010 fbe0 	bl	80127be <zb_heap_free>
 8001ffe:	bd31      	pop	{r0, r4, r5, pc}

08002000 <??DataTable1>:
 8002000:	0000 0000                                   ....

08002004 <ZbZclAttrFreeList>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	0005      	movs	r5, r0

08002008 <??ZbZclAttrFreeList_0>:
 8002008:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800200a:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 800200e:	4288      	cmp	r0, r1
 8002010:	d001      	beq.n	8002016 <??ZbZclAttrFreeList_1>
 8002012:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002014:	e000      	b.n	8002018 <??ZbZclAttrFreeList_2>

08002016 <??ZbZclAttrFreeList_1>:
 8002016:	2400      	movs	r4, #0

08002018 <??ZbZclAttrFreeList_2>:
 8002018:	2c00      	cmp	r4, #0
 800201a:	d005      	beq.n	8002028 <??ZbZclAttrFreeList_3>

0800201c <??ZbZclAttrFreeList_4>:
 800201c:	0026      	movs	r6, r4
 800201e:	0031      	movs	r1, r6
 8002020:	0028      	movs	r0, r5
 8002022:	f7ff ffcb 	bl	8001fbc <ZbZclAttrFreeAttr>
 8002026:	e7ef      	b.n	8002008 <??ZbZclAttrFreeList_0>

08002028 <??ZbZclAttrFreeList_3>:
 8002028:	bd70      	pop	{r4, r5, r6, pc}
	...

0800202c <zcl_reporting_send_conf>:
 800202c:	000b      	movs	r3, r1
 800202e:	7e02      	ldrb	r2, [r0, #24]
 8002030:	2a00      	cmp	r2, #0
 8002032:	d004      	beq.n	800203e <??zcl_reporting_send_conf_0>
 8002034:	7e02      	ldrb	r2, [r0, #24]
 8002036:	2aa4      	cmp	r2, #164	; 0xa4
 8002038:	d001      	beq.n	800203e <??zcl_reporting_send_conf_0>
 800203a:	7e02      	ldrb	r2, [r0, #24]
 800203c:	2aa3      	cmp	r2, #163	; 0xa3

0800203e <??zcl_reporting_send_conf_0>:
 800203e:	4770      	bx	lr

08002040 <report_command_timer>:
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	0004      	movs	r4, r0
 8002044:	000d      	movs	r5, r1
 8002046:	002e      	movs	r6, r5
 8002048:	f116 0108 	adds.w	r1, r6, #8
 800204c:	6830      	ldr	r0, [r6, #0]
 800204e:	f000 f852 	bl	80020f6 <zcl_reporting_send_report>
 8002052:	6870      	ldr	r0, [r6, #4]
 8002054:	f00f fed6 	bl	8011e04 <ZbTimerFree>
 8002058:	2300      	movs	r3, #0
 800205a:	a2cf      	add	r2, pc, #828	; (adr r2, 8002398 <??DataTable4>)
 800205c:	0031      	movs	r1, r6
 800205e:	6830      	ldr	r0, [r6, #0]
 8002060:	6880      	ldr	r0, [r0, #8]
 8002062:	f010 fbac 	bl	80127be <zb_heap_free>
 8002066:	bd70      	pop	{r4, r5, r6, pc}

08002068 <zcl_reporting_queue_report>:
 8002068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206c:	0006      	movs	r6, r0
 800206e:	000f      	movs	r7, r1
 8002070:	0014      	movs	r4, r2
 8002072:	2c00      	cmp	r4, #0
 8002074:	d104      	bne.n	8002080 <??zcl_reporting_queue_report_0>
 8002076:	0039      	movs	r1, r7
 8002078:	0030      	movs	r0, r6
 800207a:	f000 f83c 	bl	80020f6 <zcl_reporting_send_report>
 800207e:	e037      	b.n	80020f0 <??zcl_reporting_queue_report_1>

08002080 <??zcl_reporting_queue_report_0>:
 8002080:	f20f 3814 	addw	r8, pc, #788	; 0x314
 8002084:	2300      	movs	r3, #0
 8002086:	4642      	mov	r2, r8
 8002088:	2198      	movs	r1, #152	; 0x98
 800208a:	68b0      	ldr	r0, [r6, #8]
 800208c:	f010 fb88 	bl	80127a0 <zb_heap_alloc>
 8002090:	0005      	movs	r5, r0
 8002092:	2d00      	cmp	r5, #0
 8002094:	d101      	bne.n	800209a <??zcl_reporting_queue_report_2>
 8002096:	2000      	movs	r0, #0
 8002098:	e02b      	b.n	80020f2 <??zcl_reporting_queue_report_3>

0800209a <??zcl_reporting_queue_report_2>:
 800209a:	f05f 0998 	movs.w	r9, #152	; 0x98
 800209e:	f05f 0a00 	movs.w	sl, #0
 80020a2:	46ab      	mov	fp, r5
 80020a4:	4652      	mov	r2, sl
 80020a6:	4649      	mov	r1, r9
 80020a8:	4658      	mov	r0, fp
 80020aa:	f003 fe07 	bl	8005cbc <__aeabi_memset>
 80020ae:	002a      	movs	r2, r5
 80020b0:	f8df 1c98 	ldr.w	r1, [pc, #3224]	; 8002d4c <??DataTable9>
 80020b4:	68b0      	ldr	r0, [r6, #8]
 80020b6:	f00f fe55 	bl	8011d64 <ZbTimerAlloc>
 80020ba:	6068      	str	r0, [r5, #4]
 80020bc:	6868      	ldr	r0, [r5, #4]
 80020be:	2800      	cmp	r0, #0
 80020c0:	d107      	bne.n	80020d2 <??zcl_reporting_queue_report_4>
 80020c2:	2300      	movs	r3, #0
 80020c4:	4642      	mov	r2, r8
 80020c6:	0029      	movs	r1, r5
 80020c8:	68b0      	ldr	r0, [r6, #8]
 80020ca:	f010 fb78 	bl	80127be <zb_heap_free>
 80020ce:	2000      	movs	r0, #0
 80020d0:	e00f      	b.n	80020f2 <??zcl_reporting_queue_report_3>

080020d2 <??zcl_reporting_queue_report_4>:
 80020d2:	602e      	str	r6, [r5, #0]
 80020d4:	f05f 0890 	movs.w	r8, #144	; 0x90
 80020d8:	46b9      	mov	r9, r7
 80020da:	f115 0a08 	adds.w	sl, r5, #8
 80020de:	4642      	mov	r2, r8
 80020e0:	4649      	mov	r1, r9
 80020e2:	4650      	mov	r0, sl
 80020e4:	f012 fd83 	bl	8014bee <__aeabi_memcpy>
 80020e8:	0021      	movs	r1, r4
 80020ea:	6868      	ldr	r0, [r5, #4]
 80020ec:	f00f febc 	bl	8011e68 <ZbTimerReset>

080020f0 <??zcl_reporting_queue_report_1>:
 80020f0:	2001      	movs	r0, #1

080020f2 <??zcl_reporting_queue_report_3>:
 80020f2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020f6 <zcl_reporting_send_report>:
 80020f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020fa:	b0cc      	sub	sp, #304	; 0x130
 80020fc:	0005      	movs	r5, r0
 80020fe:	000e      	movs	r6, r1
 8002100:	2400      	movs	r4, #0
 8002102:	2000      	movs	r0, #0
 8002104:	f88d 0004 	strb.w	r0, [sp, #4]
 8002108:	8a28      	ldrh	r0, [r5, #16]
 800210a:	2800      	cmp	r0, #0
 800210c:	d001      	beq.n	8002112 <??zcl_reporting_send_report_0>
 800210e:	2001      	movs	r0, #1
 8002110:	e000      	b.n	8002114 <??zcl_reporting_send_report_1>

08002112 <??zcl_reporting_send_report_0>:
 8002112:	2000      	movs	r0, #0

08002114 <??zcl_reporting_send_report_1>:
 8002114:	f88d 0005 	strb.w	r0, [sp, #5]
 8002118:	8a28      	ldrh	r0, [r5, #16]
 800211a:	f8ad 0008 	strh.w	r0, [sp, #8]
 800211e:	7f28      	ldrb	r0, [r5, #28]
 8002120:	2800      	cmp	r0, #0
 8002122:	d103      	bne.n	800212c <??zcl_reporting_send_report_2>
 8002124:	2001      	movs	r0, #1
 8002126:	f88d 0006 	strb.w	r0, [sp, #6]
 800212a:	e002      	b.n	8002132 <??zcl_reporting_send_report_3>

0800212c <??zcl_reporting_send_report_2>:
 800212c:	2000      	movs	r0, #0
 800212e:	f88d 0006 	strb.w	r0, [sp, #6]

08002132 <??zcl_reporting_send_report_3>:
 8002132:	2001      	movs	r0, #1
 8002134:	f88d 0007 	strb.w	r0, [sp, #7]
 8002138:	f010 f942 	bl	80123c0 <ZbZclGetNextSeqnum>
 800213c:	f88d 000a 	strb.w	r0, [sp, #10]
 8002140:	200a      	movs	r0, #10
 8002142:	f88d 000b 	strb.w	r0, [sp, #11]
 8002146:	2205      	movs	r2, #5
 8002148:	a903      	add	r1, sp, #12
 800214a:	a801      	add	r0, sp, #4
 800214c:	f002 fba6 	bl	800489c <ZbZclAppendHeader>
 8002150:	0007      	movs	r7, r0
 8002152:	2f01      	cmp	r7, #1
 8002154:	f2c0 8093 	blt.w	800227e <??zcl_reporting_send_report_4>

08002158 <??zcl_reporting_send_report_5>:
 8002158:	a91a      	add	r1, sp, #104	; 0x68
 800215a:	a803      	add	r0, sp, #12
 800215c:	0022      	movs	r2, r4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8002164:	0038      	movs	r0, r7
 8002166:	b2c0      	uxtb	r0, r0
 8002168:	aa1a      	add	r2, sp, #104	; 0x68
 800216a:	0023      	movs	r3, r4
 800216c:	b2db      	uxtb	r3, r3
 800216e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002172:	6050      	str	r0, [r2, #4]
 8002174:	1c64      	adds	r4, r4, #1
 8002176:	2000      	movs	r0, #0
 8002178:	4680      	mov	r8, r0

0800217a <??zcl_reporting_send_report_6>:
 800217a:	f1b8 0f0c 	cmp.w	r8, #12
 800217e:	d22e      	bcs.n	80021de <??zcl_reporting_send_report_7>
 8002180:	220c      	movs	r2, #12
 8002182:	fb02 f008 	mul.w	r0, r2, r8
 8002186:	4430      	add	r0, r6
 8002188:	7a00      	ldrb	r0, [r0, #8]
 800218a:	2800      	cmp	r0, #0
 800218c:	d027      	beq.n	80021de <??zcl_reporting_send_report_7>

0800218e <??zcl_reporting_send_report_8>:
 800218e:	fb02 f008 	mul.w	r0, r2, r8
 8002192:	4430      	add	r0, r6
 8002194:	3009      	adds	r0, #9
 8002196:	0023      	movs	r3, r4
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 800219e:	2003      	movs	r0, #3
 80021a0:	ab1a      	add	r3, sp, #104	; 0x68
 80021a2:	46a4      	mov	ip, r4
 80021a4:	fa5f fc8c 	uxtb.w	ip, ip
 80021a8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80021ac:	6058      	str	r0, [r3, #4]
 80021ae:	1c64      	adds	r4, r4, #1
 80021b0:	fb02 f008 	mul.w	r0, r2, r8
 80021b4:	4430      	add	r0, r6
 80021b6:	6840      	ldr	r0, [r0, #4]
 80021b8:	0023      	movs	r3, r4
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 80021c0:	fb02 f208 	mul.w	r2, r2, r8
 80021c4:	eb06 0002 	add.w	r0, r6, r2
 80021c8:	7a00      	ldrb	r0, [r0, #8]
 80021ca:	aa1a      	add	r2, sp, #104	; 0x68
 80021cc:	0023      	movs	r3, r4
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80021d4:	6050      	str	r0, [r2, #4]
 80021d6:	1c64      	adds	r4, r4, #1
 80021d8:	f118 0801 	adds.w	r8, r8, #1
 80021dc:	e7cd      	b.n	800217a <??zcl_reporting_send_report_6>

080021de <??zcl_reporting_send_report_7>:
 80021de:	2200      	movs	r2, #0
 80021e0:	a906      	add	r1, sp, #24
 80021e2:	0028      	movs	r0, r5
 80021e4:	f001 fe01 	bl	8003dea <ZbZclClusterInitApsdeReq>
 80021e8:	a806      	add	r0, sp, #24
 80021ea:	f8df 1b68 	ldr.w	r1, [pc, #2920]	; 8002d54 <??DataTable9_2>
 80021ee:	6809      	ldr	r1, [r1, #0]
 80021f0:	2210      	movs	r2, #16
 80021f2:	f012 fcfc 	bl	8014bee <__aeabi_memcpy>
 80021f6:	2001      	movs	r0, #1
 80021f8:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 80021fc:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8002200:	f050 0004 	orrs.w	r0, r0, #4
 8002204:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8002208:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800220c:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8002210:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8002214:	7ca8      	ldrb	r0, [r5, #18]
 8002216:	28ab      	cmp	r0, #171	; 0xab
 8002218:	d005      	beq.n	8002226 <??zcl_reporting_send_report_9>
 800221a:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800221e:	f050 0002 	orrs.w	r0, r0, #2
 8002222:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c

08002226 <??zcl_reporting_send_report_9>:
 8002226:	2001      	movs	r0, #1
 8002228:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 800222c:	2000      	movs	r0, #0
 800222e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8002232:	a81a      	add	r0, sp, #104	; 0x68
 8002234:	900c      	str	r0, [sp, #48]	; 0x30
 8002236:	0020      	movs	r0, r4
 8002238:	b2c0      	uxtb	r0, r0
 800223a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 800223e:	68ab      	ldr	r3, [r5, #8]
 8002240:	f8df 2b14 	ldr.w	r2, [pc, #2836]	; 8002d58 <??DataTable9_3>
 8002244:	a906      	add	r1, sp, #24
 8002246:	68a8      	ldr	r0, [r5, #8]
 8002248:	f00f fb34 	bl	80118b4 <ZbApsdeDataReqCallback>
 800224c:	f88d 0000 	strb.w	r0, [sp]
 8002250:	f89d 0000 	ldrb.w	r0, [sp]
 8002254:	2800      	cmp	r0, #0
 8002256:	d012      	beq.n	800227e <??zcl_reporting_send_report_4>
 8002258:	f05f 0920 	movs.w	r9, #32
 800225c:	f05f 0a00 	movs.w	sl, #0
 8002260:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8002264:	4652      	mov	r2, sl
 8002266:	4649      	mov	r1, r9
 8002268:	4658      	mov	r0, fp
 800226a:	f003 fd27 	bl	8005cbc <__aeabi_memset>
 800226e:	f89d 0000 	ldrb.w	r0, [sp]
 8002272:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8002276:	68a9      	ldr	r1, [r5, #8]
 8002278:	a812      	add	r0, sp, #72	; 0x48
 800227a:	f7ff fed7 	bl	800202c <zcl_reporting_send_conf>

0800227e <??zcl_reporting_send_report_4>:
 800227e:	f05f 0900 	movs.w	r9, #0

08002282 <??zcl_reporting_send_report_10>:
 8002282:	f1b9 0f0c 	cmp.w	r9, #12
 8002286:	d21e      	bcs.n	80022c6 <??zcl_reporting_send_report_11>
 8002288:	f05f 080c 	movs.w	r8, #12
 800228c:	fb08 f009 	mul.w	r0, r8, r9
 8002290:	4430      	add	r0, r6
 8002292:	6840      	ldr	r0, [r0, #4]
 8002294:	2800      	cmp	r0, #0
 8002296:	d016      	beq.n	80022c6 <??zcl_reporting_send_report_11>

08002298 <??zcl_reporting_send_report_12>:
 8002298:	2300      	movs	r3, #0
 800229a:	a23f      	add	r2, pc, #252	; (adr r2, 8002398 <??DataTable4>)
 800229c:	fb08 f009 	mul.w	r0, r8, r9
 80022a0:	4430      	add	r0, r6
 80022a2:	6841      	ldr	r1, [r0, #4]
 80022a4:	68a8      	ldr	r0, [r5, #8]
 80022a6:	f010 fa8a 	bl	80127be <zb_heap_free>
 80022aa:	2000      	movs	r0, #0
 80022ac:	fb08 f109 	mul.w	r1, r8, r9
 80022b0:	4431      	add	r1, r6
 80022b2:	6048      	str	r0, [r1, #4]
 80022b4:	2000      	movs	r0, #0
 80022b6:	fb08 f809 	mul.w	r8, r8, r9
 80022ba:	eb06 0108 	add.w	r1, r6, r8
 80022be:	7208      	strb	r0, [r1, #8]
 80022c0:	f119 0901 	adds.w	r9, r9, #1
 80022c4:	e7dd      	b.n	8002282 <??zcl_reporting_send_report_10>

080022c6 <??zcl_reporting_send_report_11>:
 80022c6:	b04d      	add	sp, #308	; 0x134
 80022c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080022cc <zcl_report_check_time>:
 80022cc:	4281      	cmp	r1, r0
 80022ce:	d201      	bcs.n	80022d4 <??zcl_report_check_time_0>
 80022d0:	0008      	movs	r0, r1
 80022d2:	e7ff      	b.n	80022d4 <??zcl_report_check_time_0>

080022d4 <??zcl_report_check_time_0>:
 80022d4:	4770      	bx	lr

080022d6 <zcl_report_kick>:
 80022d6:	b538      	push	{r3, r4, r5, lr}
 80022d8:	0004      	movs	r4, r0
 80022da:	000d      	movs	r5, r1
 80022dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022de:	2800      	cmp	r0, #0
 80022e0:	d101      	bne.n	80022e6 <??zcl_report_kick_0>
 80022e2:	2000      	movs	r0, #0
 80022e4:	e00d      	b.n	8002302 <??zcl_report_kick_1>

080022e6 <??zcl_report_kick_0>:
 80022e6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d001      	beq.n	80022f2 <??zcl_report_kick_2>
 80022ee:	2001      	movs	r0, #1
 80022f0:	e007      	b.n	8002302 <??zcl_report_kick_1>

080022f2 <??zcl_report_kick_2>:
 80022f2:	2001      	movs	r0, #1
 80022f4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80022f8:	0029      	movs	r1, r5
 80022fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022fc:	f00f fdb4 	bl	8011e68 <ZbTimerReset>
 8002300:	2001      	movs	r0, #1

08002302 <??zcl_report_kick_1>:
 8002302:	bd32      	pop	{r1, r4, r5, pc}

08002304 <ZbZclAttrReportKick>:
 8002304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002306:	0004      	movs	r4, r0
 8002308:	000d      	movs	r5, r1
 800230a:	0016      	movs	r6, r2
 800230c:	001f      	movs	r7, r3
 800230e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002310:	2800      	cmp	r0, #0
 8002312:	d001      	beq.n	8002318 <??ZbZclAttrReportKick_0>
 8002314:	2001      	movs	r0, #1
 8002316:	e010      	b.n	800233a <??ZbZclAttrReportKick_1>

08002318 <??ZbZclAttrReportKick_0>:
 8002318:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800231c:	6426      	str	r6, [r4, #64]	; 0x40
 800231e:	6467      	str	r7, [r4, #68]	; 0x44
 8002320:	2100      	movs	r1, #0
 8002322:	0020      	movs	r0, r4
 8002324:	f7ff ffd7 	bl	80022d6 <zcl_report_kick>
 8002328:	2800      	cmp	r0, #0
 800232a:	d105      	bne.n	8002338 <??ZbZclAttrReportKick_2>
 800232c:	2000      	movs	r0, #0
 800232e:	6420      	str	r0, [r4, #64]	; 0x40
 8002330:	2000      	movs	r0, #0
 8002332:	6460      	str	r0, [r4, #68]	; 0x44
 8002334:	2001      	movs	r0, #1
 8002336:	e000      	b.n	800233a <??ZbZclAttrReportKick_1>

08002338 <??ZbZclAttrReportKick_2>:
 8002338:	2000      	movs	r0, #0

0800233a <??ZbZclAttrReportKick_1>:
 800233a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800233c <zcl_report_append_attr>:
 800233c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002340:	0004      	movs	r4, r0
 8002342:	000d      	movs	r5, r1
 8002344:	0016      	movs	r6, r2
 8002346:	001f      	movs	r7, r3
 8002348:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800234c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8002350:	2300      	movs	r3, #0
 8002352:	a211      	add	r2, pc, #68	; (adr r2, 8002398 <??DataTable4>)
 8002354:	4649      	mov	r1, r9
 8002356:	0020      	movs	r0, r4
 8002358:	f010 fa22 	bl	80127a0 <zb_heap_alloc>
 800235c:	6068      	str	r0, [r5, #4]
 800235e:	6868      	ldr	r0, [r5, #4]
 8002360:	2800      	cmp	r0, #0
 8002362:	d101      	bne.n	8002368 <??zcl_report_append_attr_0>
 8002364:	2000      	movs	r0, #0
 8002366:	e014      	b.n	8002392 <??zcl_report_append_attr_1>

08002368 <??zcl_report_append_attr_0>:
 8002368:	f8cd 9000 	str.w	r9, [sp]
 800236c:	46c2      	mov	sl, r8
 800236e:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8002372:	9a00      	ldr	r2, [sp, #0]
 8002374:	4651      	mov	r1, sl
 8002376:	4658      	mov	r0, fp
 8002378:	f012 fc39 	bl	8014bee <__aeabi_memcpy>
 800237c:	f885 9008 	strb.w	r9, [r5, #8]
 8002380:	802e      	strh	r6, [r5, #0]
 8002382:	0031      	movs	r1, r6
 8002384:	b289      	uxth	r1, r1
 8002386:	f115 0009 	adds.w	r0, r5, #9
 800238a:	f7fd ff53 	bl	8000234 <putle16>
 800238e:	72ef      	strb	r7, [r5, #11]
 8002390:	2001      	movs	r0, #1

08002392 <??zcl_report_append_attr_1>:
 8002392:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002398 <??DataTable4>:
 8002398:	0000 0000                                   ....

0800239c <zcl_cluster_report_check_timeout>:
 800239c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023a0:	0006      	movs	r6, r0
 80023a2:	000f      	movs	r7, r1
 80023a4:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80023a6:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 80023aa:	4288      	cmp	r0, r1
 80023ac:	d001      	beq.n	80023b2 <??zcl_cluster_report_check_timeout_0>
 80023ae:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80023b0:	e000      	b.n	80023b4 <??zcl_cluster_report_check_timeout_1>

080023b2 <??zcl_cluster_report_check_timeout_0>:
 80023b2:	2000      	movs	r0, #0

080023b4 <??zcl_cluster_report_check_timeout_1>:
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d101      	bne.n	80023bc <??zcl_cluster_report_check_timeout_2>
 80023b8:	2000      	movs	r0, #0
 80023ba:	e042      	b.n	8002442 <??zcl_cluster_report_check_timeout_3>

080023bc <??zcl_cluster_report_check_timeout_2>:
 80023bc:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80023be:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 80023c2:	4288      	cmp	r0, r1
 80023c4:	d001      	beq.n	80023ca <??zcl_cluster_report_check_timeout_4>
 80023c6:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80023c8:	e000      	b.n	80023cc <??zcl_cluster_report_check_timeout_5>

080023ca <??zcl_cluster_report_check_timeout_4>:
 80023ca:	2500      	movs	r5, #0

080023cc <??zcl_cluster_report_check_timeout_5>:
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	d037      	beq.n	8002440 <??zcl_cluster_report_check_timeout_6>
 80023d0:	46a8      	mov	r8, r5
 80023d2:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 80023d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023da:	4288      	cmp	r0, r1
 80023dc:	d027      	beq.n	800242e <??zcl_cluster_report_check_timeout_7>

080023de <??zcl_cluster_report_check_timeout_8>:
 80023de:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d00e      	beq.n	8002404 <??zcl_cluster_report_check_timeout_9>
 80023e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80023ea:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 80023ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023f2:	fb00 1909 	mla	r9, r0, r9, r1
 80023f6:	4649      	mov	r1, r9
 80023f8:	0038      	movs	r0, r7
 80023fa:	f00f fd63 	bl	8011ec4 <ZbTimeoutRemaining>
 80023fe:	0004      	movs	r4, r0
 8002400:	2c00      	cmp	r4, #0
 8002402:	d114      	bne.n	800242e <??zcl_cluster_report_check_timeout_7>

08002404 <??zcl_cluster_report_check_timeout_9>:
 8002404:	f8b8 0022 	ldrh.w	r0, [r8, #34]	; 0x22
 8002408:	2800      	cmp	r0, #0
 800240a:	d010      	beq.n	800242e <??zcl_cluster_report_check_timeout_7>

0800240c <??zcl_cluster_report_check_timeout_10>:
 800240c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8002410:	f8b8 9022 	ldrh.w	r9, [r8, #34]	; 0x22
 8002414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002418:	fb00 1909 	mla	r9, r0, r9, r1
 800241c:	4649      	mov	r1, r9
 800241e:	0038      	movs	r0, r7
 8002420:	f00f fd50 	bl	8011ec4 <ZbTimeoutRemaining>
 8002424:	0004      	movs	r4, r0
 8002426:	2c00      	cmp	r4, #0
 8002428:	d101      	bne.n	800242e <??zcl_cluster_report_check_timeout_7>

0800242a <??zcl_cluster_report_check_timeout_11>:
 800242a:	2001      	movs	r0, #1
 800242c:	e009      	b.n	8002442 <??zcl_cluster_report_check_timeout_3>

0800242e <??zcl_cluster_report_check_timeout_7>:
 800242e:	6828      	ldr	r0, [r5, #0]
 8002430:	f116 0130 	adds.w	r1, r6, #48	; 0x30
 8002434:	4288      	cmp	r0, r1
 8002436:	d001      	beq.n	800243c <??zcl_cluster_report_check_timeout_12>
 8002438:	682d      	ldr	r5, [r5, #0]
 800243a:	e7c7      	b.n	80023cc <??zcl_cluster_report_check_timeout_5>

0800243c <??zcl_cluster_report_check_timeout_12>:
 800243c:	2500      	movs	r5, #0
 800243e:	e7c5      	b.n	80023cc <??zcl_cluster_report_check_timeout_5>

08002440 <??zcl_cluster_report_check_timeout_6>:
 8002440:	2000      	movs	r0, #0

08002442 <??zcl_cluster_report_check_timeout_3>:
 8002442:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08002448 <zcl_cluster_reports_timer>:
 8002448:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800244c:	b081      	sub	sp, #4
 800244e:	ed2d 8b04 	vpush	{d8-d9}
 8002452:	b0b0      	sub	sp, #192	; 0xc0
 8002454:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8002456:	9003      	str	r0, [sp, #12]
 8002458:	2000      	movs	r0, #0
 800245a:	9005      	str	r0, [sp, #20]
 800245c:	2000      	movs	r0, #0
 800245e:	9007      	str	r0, [sp, #28]
 8002460:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8002d5c <??DataTable9_4>
 8002464:	9006      	str	r0, [sp, #24]
 8002466:	2000      	movs	r0, #0
 8002468:	f88d 0010 	strb.w	r0, [sp, #16]
 800246c:	f05f 0b00 	movs.w	fp, #0
 8002470:	9803      	ldr	r0, [sp, #12]
 8002472:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8002476:	f88d 0009 	strb.w	r0, [sp, #9]
 800247a:	2000      	movs	r0, #0
 800247c:	f88d 000a 	strb.w	r0, [sp, #10]
 8002480:	2000      	movs	r0, #0
 8002482:	9903      	ldr	r1, [sp, #12]
 8002484:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
 8002488:	2000      	movs	r0, #0
 800248a:	9903      	ldr	r1, [sp, #12]
 800248c:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c
 8002490:	9803      	ldr	r0, [sp, #12]
 8002492:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002494:	9903      	ldr	r1, [sp, #12]
 8002496:	3130      	adds	r1, #48	; 0x30
 8002498:	4288      	cmp	r0, r1
 800249a:	d002      	beq.n	80024a2 <??zcl_cluster_reports_timer_1>
 800249c:	9803      	ldr	r0, [sp, #12]
 800249e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80024a0:	e000      	b.n	80024a4 <??zcl_cluster_reports_timer_2>

080024a2 <??zcl_cluster_reports_timer_1>:
 80024a2:	2000      	movs	r0, #0

080024a4 <??zcl_cluster_reports_timer_2>:
 80024a4:	2800      	cmp	r0, #0
 80024a6:	f000 81f7 	beq.w	8002898 <??zcl_cluster_reports_timer_3>

080024aa <??zcl_cluster_reports_timer_4>:
 80024aa:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80024ac:	f00f fed0 	bl	8012250 <ZbZclUptime>
 80024b0:	9009      	str	r0, [sp, #36]	; 0x24
 80024b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80024b4:	9803      	ldr	r0, [sp, #12]
 80024b6:	f7ff ff71 	bl	800239c <zcl_cluster_report_check_timeout>
 80024ba:	2800      	cmp	r0, #0
 80024bc:	d004      	beq.n	80024c8 <??zcl_cluster_reports_timer_5>
 80024be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024c0:	f510 707a 	adds.w	r0, r0, #1000	; 0x3e8
 80024c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80024c6:	e001      	b.n	80024cc <??zcl_cluster_reports_timer_6>

080024c8 <??zcl_cluster_reports_timer_5>:
 80024c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024ca:	900b      	str	r0, [sp, #44]	; 0x2c

080024cc <??zcl_cluster_reports_timer_6>:
 80024cc:	2490      	movs	r4, #144	; 0x90
 80024ce:	2500      	movs	r5, #0
 80024d0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80024d4:	002a      	movs	r2, r5
 80024d6:	0021      	movs	r1, r4
 80024d8:	4640      	mov	r0, r8
 80024da:	f003 fbef 	bl	8005cbc <__aeabi_memset>
 80024de:	2000      	movs	r0, #0
 80024e0:	4682      	mov	sl, r0
 80024e2:	2000      	movs	r0, #0
 80024e4:	f88d 0008 	strb.w	r0, [sp, #8]
 80024e8:	9803      	ldr	r0, [sp, #12]
 80024ea:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80024ec:	9903      	ldr	r1, [sp, #12]
 80024ee:	3130      	adds	r1, #48	; 0x30
 80024f0:	4288      	cmp	r0, r1
 80024f2:	d002      	beq.n	80024fa <??zcl_cluster_reports_timer_7>
 80024f4:	9803      	ldr	r0, [sp, #12]
 80024f6:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80024f8:	e000      	b.n	80024fc <??zcl_cluster_reports_timer_8>

080024fa <??zcl_cluster_reports_timer_7>:
 80024fa:	2600      	movs	r6, #0

080024fc <??zcl_cluster_reports_timer_8>:
 80024fc:	2e00      	cmp	r6, #0
 80024fe:	f000 817b 	beq.w	80027f8 <??zcl_cluster_reports_timer_9>
 8002502:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002506:	f88d 000b 	strb.w	r0, [sp, #11]
 800250a:	f8df 0850 	ldr.w	r0, [pc, #2128]	; 8002d5c <??DataTable9_4>
 800250e:	900a      	str	r0, [sp, #40]	; 0x28
 8002510:	0037      	movs	r7, r6
 8002512:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 8002514:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002518:	4288      	cmp	r0, r1
 800251a:	f000 8164 	beq.w	80027e6 <??zcl_cluster_reports_timer_10>

0800251e <??zcl_cluster_reports_timer_11>:
 800251e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002522:	2800      	cmp	r0, #0
 8002524:	d116      	bne.n	8002554 <??zcl_cluster_reports_timer_12>
 8002526:	8c38      	ldrh	r0, [r7, #32]
 8002528:	2800      	cmp	r0, #0
 800252a:	d013      	beq.n	8002554 <??zcl_cluster_reports_timer_12>
 800252c:	6939      	ldr	r1, [r7, #16]
 800252e:	8c3c      	ldrh	r4, [r7, #32]
 8002530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002534:	fb00 1404 	mla	r4, r0, r4, r1
 8002538:	0021      	movs	r1, r4
 800253a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800253c:	f00f fcc2 	bl	8011ec4 <ZbTimeoutRemaining>
 8002540:	9008      	str	r0, [sp, #32]
 8002542:	9808      	ldr	r0, [sp, #32]
 8002544:	2800      	cmp	r0, #0
 8002546:	d005      	beq.n	8002554 <??zcl_cluster_reports_timer_12>
 8002548:	9908      	ldr	r1, [sp, #32]
 800254a:	9806      	ldr	r0, [sp, #24]
 800254c:	f7ff febe 	bl	80022cc <zcl_report_check_time>
 8002550:	9006      	str	r0, [sp, #24]
 8002552:	e148      	b.n	80027e6 <??zcl_cluster_reports_timer_10>

08002554 <??zcl_cluster_reports_timer_12>:
 8002554:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002558:	2800      	cmp	r0, #0
 800255a:	d115      	bne.n	8002588 <??zcl_cluster_reports_timer_13>
 800255c:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800255e:	2800      	cmp	r0, #0
 8002560:	d012      	beq.n	8002588 <??zcl_cluster_reports_timer_13>
 8002562:	6939      	ldr	r1, [r7, #16]
 8002564:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8002566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800256a:	fb00 1404 	mla	r4, r0, r4, r1
 800256e:	0021      	movs	r1, r4
 8002570:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002572:	f00f fca7 	bl	8011ec4 <ZbTimeoutRemaining>
 8002576:	900a      	str	r0, [sp, #40]	; 0x28
 8002578:	980a      	ldr	r0, [sp, #40]	; 0x28
 800257a:	2800      	cmp	r0, #0
 800257c:	d104      	bne.n	8002588 <??zcl_cluster_reports_timer_13>
 800257e:	2001      	movs	r0, #1
 8002580:	f88d 000b 	strb.w	r0, [sp, #11]
 8002584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002586:	6138      	str	r0, [r7, #16]

08002588 <??zcl_cluster_reports_timer_13>:
 8002588:	9803      	ldr	r0, [sp, #12]
 800258a:	8982      	ldrh	r2, [r0, #12]
 800258c:	9803      	ldr	r0, [sp, #12]
 800258e:	7b81      	ldrb	r1, [r0, #14]
 8002590:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8002592:	f00f fae9 	bl	8011b68 <ZbApsBindSrcExists>
 8002596:	2800      	cmp	r0, #0
 8002598:	d105      	bne.n	80025a6 <??zcl_cluster_reports_timer_14>
 800259a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800259c:	9806      	ldr	r0, [sp, #24]
 800259e:	f7ff fe95 	bl	80022cc <zcl_report_check_time>
 80025a2:	9006      	str	r0, [sp, #24]
 80025a4:	e11f      	b.n	80027e6 <??zcl_cluster_reports_timer_10>

080025a6 <??zcl_cluster_reports_timer_14>:
 80025a6:	9805      	ldr	r0, [sp, #20]
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d10b      	bne.n	80025c4 <??zcl_cluster_reports_timer_15>
 80025ac:	2300      	movs	r3, #0
 80025ae:	a28a      	add	r2, pc, #552	; (adr r2, 80027d8 <??zcl_cluster_reports_timer_0>)
 80025b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b4:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80025b6:	f010 f8f3 	bl	80127a0 <zb_heap_alloc>
 80025ba:	9005      	str	r0, [sp, #20]
 80025bc:	9805      	ldr	r0, [sp, #20]
 80025be:	2800      	cmp	r0, #0
 80025c0:	f000 816a 	beq.w	8002898 <??zcl_cluster_reports_timer_3>

080025c4 <??zcl_cluster_reports_timer_15>:
 80025c4:	2000      	movs	r0, #0
 80025c6:	9001      	str	r0, [sp, #4]
 80025c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025cc:	9000      	str	r0, [sp, #0]
 80025ce:	9b05      	ldr	r3, [sp, #20]
 80025d0:	f10d 0211 	add.w	r2, sp, #17
 80025d4:	89b9      	ldrh	r1, [r7, #12]
 80025d6:	9803      	ldr	r0, [sp, #12]
 80025d8:	f7fd ffb3 	bl	8000542 <ZbZclAttrRead>
 80025dc:	2800      	cmp	r0, #0
 80025de:	d003      	beq.n	80025e8 <??zcl_cluster_reports_timer_16>
 80025e0:	0038      	movs	r0, r7
 80025e2:	f000 fb0a 	bl	8002bfa <zcl_reporting_disable>
 80025e6:	e094      	b.n	8002712 <??zcl_cluster_reports_timer_17>

080025e8 <??zcl_cluster_reports_timer_16>:
 80025e8:	2300      	movs	r3, #0
 80025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ee:	9905      	ldr	r1, [sp, #20]
 80025f0:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80025f4:	f7fe fdcd 	bl	8001192 <ZbZclAttrParseLength>
 80025f8:	9007      	str	r0, [sp, #28]
 80025fa:	9807      	ldr	r0, [sp, #28]
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d503      	bpl.n	8002608 <??zcl_cluster_reports_timer_18>
 8002600:	0038      	movs	r0, r7
 8002602:	f000 fafa 	bl	8002bfa <zcl_reporting_disable>
 8002606:	e084      	b.n	8002712 <??zcl_cluster_reports_timer_17>

08002608 <??zcl_cluster_reports_timer_18>:
 8002608:	9807      	ldr	r0, [sp, #28]
 800260a:	2800      	cmp	r0, #0
 800260c:	f000 8081 	beq.w	8002712 <??zcl_cluster_reports_timer_17>

08002610 <??zcl_cluster_reports_timer_19>:
 8002610:	7bb8      	ldrb	r0, [r7, #14]
 8002612:	2838      	cmp	r0, #56	; 0x38
 8002614:	db37      	blt.n	8002686 <??zcl_cluster_reports_timer_20>
 8002616:	7bb8      	ldrb	r0, [r7, #14]
 8002618:	283b      	cmp	r0, #59	; 0x3b
 800261a:	da34      	bge.n	8002686 <??zcl_cluster_reports_timer_20>
 800261c:	f10d 0201 	add.w	r2, sp, #1
 8002620:	9905      	ldr	r1, [sp, #20]
 8002622:	7bb8      	ldrb	r0, [r7, #14]
 8002624:	f002 fc07 	bl	8004e36 <ZbZclParseFloat>
 8002628:	eeb0 8a40 	vmov.f32	s16, s0
 800262c:	eef0 8a60 	vmov.f32	s17, s1
 8002630:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002634:	2800      	cmp	r0, #0
 8002636:	d003      	beq.n	8002640 <??zcl_cluster_reports_timer_21>
 8002638:	0038      	movs	r0, r7
 800263a:	f000 fade 	bl	8002bfa <zcl_reporting_disable>
 800263e:	e068      	b.n	8002712 <??zcl_cluster_reports_timer_17>

08002640 <??zcl_cluster_reports_timer_21>:
 8002640:	ec51 0b18 	vmov	r0, r1, d8
 8002644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002648:	f003 fbea 	bl	8005e20 <__aeabi_dsub>
 800264c:	ec41 0b19 	vmov	d9, r0, r1
 8002650:	ec51 0b19 	vmov	r0, r1, d9
 8002654:	2200      	movs	r2, #0
 8002656:	2300      	movs	r3, #0
 8002658:	f003 fffa 	bl	8006650 <__aeabi_cdcmpeq>
 800265c:	d205      	bcs.n	800266a <??zcl_cluster_reports_timer_22>
 800265e:	ec51 0b19 	vmov	r0, r1, d9
 8002662:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8002666:	ec41 0b19 	vmov	d9, r0, r1

0800266a <??zcl_cluster_reports_timer_22>:
 800266a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800266e:	2800      	cmp	r0, #0
 8002670:	d106      	bne.n	8002680 <??zcl_cluster_reports_timer_23>
 8002672:	ec51 0b19 	vmov	r0, r1, d9
 8002676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800267a:	f003 ffe9 	bl	8006650 <__aeabi_cdcmpeq>
 800267e:	d348      	bcc.n	8002712 <??zcl_cluster_reports_timer_17>

08002680 <??zcl_cluster_reports_timer_23>:
 8002680:	ed87 8b06 	vstr	d8, [r7, #24]
 8002684:	e040      	b.n	8002708 <??zcl_cluster_reports_timer_24>

08002686 <??zcl_cluster_reports_timer_20>:
 8002686:	7bb8      	ldrb	r0, [r7, #14]
 8002688:	f7fe fe34 	bl	80012f4 <ZbZclAttrIsAnalog>
 800268c:	2800      	cmp	r0, #0
 800268e:	d02b      	beq.n	80026e8 <??zcl_cluster_reports_timer_25>
 8002690:	466a      	mov	r2, sp
 8002692:	9905      	ldr	r1, [sp, #20]
 8002694:	7bb8      	ldrb	r0, [r7, #14]
 8002696:	f7fe ff2b 	bl	80014f0 <ZbZclParseInteger>
 800269a:	0004      	movs	r4, r0
 800269c:	000d      	movs	r5, r1
 800269e:	f89d 0000 	ldrb.w	r0, [sp]
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d003      	beq.n	80026ae <??zcl_cluster_reports_timer_26>
 80026a6:	0038      	movs	r0, r7
 80026a8:	f000 faa7 	bl	8002bfa <zcl_reporting_disable>
 80026ac:	e031      	b.n	8002712 <??zcl_cluster_reports_timer_17>

080026ae <??zcl_cluster_reports_timer_26>:
 80026ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026b2:	ebb4 0800 	subs.w	r8, r4, r0
 80026b6:	eb75 0901 	sbcs.w	r9, r5, r1
 80026ba:	f1b9 0f00 	cmp.w	r9, #0
 80026be:	d503      	bpl.n	80026c8 <??zcl_cluster_reports_timer_27>
 80026c0:	f1d8 0800 	rsbs	r8, r8, #0
 80026c4:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

080026c8 <??zcl_cluster_reports_timer_27>:
 80026c8:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80026cc:	2800      	cmp	r0, #0
 80026ce:	d108      	bne.n	80026e2 <??zcl_cluster_reports_timer_28>
 80026d0:	4640      	mov	r0, r8
 80026d2:	4649      	mov	r1, r9
 80026d4:	f003 fd2e 	bl	8006134 <__aeabi_l2d>
 80026d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026dc:	f003 ffb8 	bl	8006650 <__aeabi_cdcmpeq>
 80026e0:	d317      	bcc.n	8002712 <??zcl_cluster_reports_timer_17>

080026e2 <??zcl_cluster_reports_timer_28>:
 80026e2:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80026e6:	e00f      	b.n	8002708 <??zcl_cluster_reports_timer_24>

080026e8 <??zcl_cluster_reports_timer_25>:
 80026e8:	9a07      	ldr	r2, [sp, #28]
 80026ea:	9905      	ldr	r1, [sp, #20]
 80026ec:	2000      	movs	r0, #0
 80026ee:	f010 f875 	bl	80127dc <WpanCrc>
 80026f2:	0001      	movs	r1, r0
 80026f4:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d104      	bne.n	8002706 <??zcl_cluster_reports_timer_29>
 80026fc:	8b38      	ldrh	r0, [r7, #24]
 80026fe:	000a      	movs	r2, r1
 8002700:	b292      	uxth	r2, r2
 8002702:	4290      	cmp	r0, r2
 8002704:	d005      	beq.n	8002712 <??zcl_cluster_reports_timer_17>

08002706 <??zcl_cluster_reports_timer_29>:
 8002706:	8339      	strh	r1, [r7, #24]

08002708 <??zcl_cluster_reports_timer_24>:
 8002708:	2001      	movs	r0, #1
 800270a:	f88d 000b 	strb.w	r0, [sp, #11]
 800270e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002710:	6138      	str	r0, [r7, #16]

08002712 <??zcl_cluster_reports_timer_17>:
 8002712:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8002716:	2800      	cmp	r0, #0
 8002718:	d060      	beq.n	80027dc <??zcl_cluster_reports_timer_30>
 800271a:	9807      	ldr	r0, [sp, #28]
 800271c:	2800      	cmp	r0, #0
 800271e:	d05d      	beq.n	80027dc <??zcl_cluster_reports_timer_30>
 8002720:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002724:	1c40      	adds	r0, r0, #1
 8002726:	f88d 0010 	strb.w	r0, [sp, #16]
 800272a:	4650      	mov	r0, sl
 800272c:	b2c0      	uxtb	r0, r0
 800272e:	280c      	cmp	r0, #12
 8002730:	d007      	beq.n	8002742 <??zcl_cluster_reports_timer_31>
 8002732:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002736:	9907      	ldr	r1, [sp, #28]
 8002738:	fa51 f080 	uxtab	r0, r1, r0
 800273c:	1cc0      	adds	r0, r0, #3
 800273e:	2837      	cmp	r0, #55	; 0x37
 8002740:	d314      	bcc.n	800276c <??zcl_cluster_reports_timer_32>

08002742 <??zcl_cluster_reports_timer_31>:
 8002742:	465a      	mov	r2, fp
 8002744:	a90c      	add	r1, sp, #48	; 0x30
 8002746:	9803      	ldr	r0, [sp, #12]
 8002748:	f7ff fc8e 	bl	8002068 <zcl_reporting_queue_report>
 800274c:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 8002750:	2490      	movs	r4, #144	; 0x90
 8002752:	2500      	movs	r5, #0
 8002754:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8002758:	002a      	movs	r2, r5
 800275a:	0021      	movs	r1, r4
 800275c:	4640      	mov	r0, r8
 800275e:	f003 faad 	bl	8005cbc <__aeabi_memset>
 8002762:	2000      	movs	r0, #0
 8002764:	4682      	mov	sl, r0
 8002766:	2000      	movs	r0, #0
 8002768:	f88d 0008 	strb.w	r0, [sp, #8]

0800276c <??zcl_cluster_reports_timer_32>:
 800276c:	9807      	ldr	r0, [sp, #28]
 800276e:	9001      	str	r0, [sp, #4]
 8002770:	9805      	ldr	r0, [sp, #20]
 8002772:	9000      	str	r0, [sp, #0]
 8002774:	7bbb      	ldrb	r3, [r7, #14]
 8002776:	89ba      	ldrh	r2, [r7, #12]
 8002778:	a90c      	add	r1, sp, #48	; 0x30
 800277a:	4654      	mov	r4, sl
 800277c:	b2e4      	uxtb	r4, r4
 800277e:	200c      	movs	r0, #12
 8002780:	4344      	muls	r4, r0
 8002782:	4421      	add	r1, r4
 8002784:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8002786:	f7ff fdd9 	bl	800233c <zcl_report_append_attr>
 800278a:	2800      	cmp	r0, #0
 800278c:	d02b      	beq.n	80027e6 <??zcl_cluster_reports_timer_10>

0800278e <??zcl_cluster_reports_timer_33>:
 800278e:	f11a 0a01 	adds.w	sl, sl, #1
 8002792:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002796:	9807      	ldr	r0, [sp, #28]
 8002798:	1841      	adds	r1, r0, r1
 800279a:	1cc9      	adds	r1, r1, #3
 800279c:	f88d 1008 	strb.w	r1, [sp, #8]
 80027a0:	8c38      	ldrh	r0, [r7, #32]
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d005      	beq.n	80027b2 <??zcl_cluster_reports_timer_34>
 80027a6:	8c39      	ldrh	r1, [r7, #32]
 80027a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ac:	4341      	muls	r1, r0
 80027ae:	9108      	str	r1, [sp, #32]
 80027b0:	e00b      	b.n	80027ca <??zcl_cluster_reports_timer_35>

080027b2 <??zcl_cluster_reports_timer_34>:
 80027b2:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 80027b4:	2800      	cmp	r0, #0
 80027b6:	d005      	beq.n	80027c4 <??zcl_cluster_reports_timer_36>
 80027b8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80027ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027be:	4341      	muls	r1, r0
 80027c0:	9108      	str	r1, [sp, #32]
 80027c2:	e002      	b.n	80027ca <??zcl_cluster_reports_timer_35>

080027c4 <??zcl_cluster_reports_timer_36>:
 80027c4:	f8df 0594 	ldr.w	r0, [pc, #1428]	; 8002d5c <??DataTable9_4>
 80027c8:	9008      	str	r0, [sp, #32]

080027ca <??zcl_cluster_reports_timer_35>:
 80027ca:	9908      	ldr	r1, [sp, #32]
 80027cc:	9806      	ldr	r0, [sp, #24]
 80027ce:	f7ff fd7d 	bl	80022cc <zcl_report_check_time>
 80027d2:	9006      	str	r0, [sp, #24]
 80027d4:	e007      	b.n	80027e6 <??zcl_cluster_reports_timer_10>
 80027d6:	bf00      	nop

080027d8 <??zcl_cluster_reports_timer_0>:
 80027d8:	0000 0000                                   ....

080027dc <??zcl_cluster_reports_timer_30>:
 80027dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80027de:	9806      	ldr	r0, [sp, #24]
 80027e0:	f7ff fd74 	bl	80022cc <zcl_report_check_time>
 80027e4:	9006      	str	r0, [sp, #24]

080027e6 <??zcl_cluster_reports_timer_10>:
 80027e6:	6830      	ldr	r0, [r6, #0]
 80027e8:	9903      	ldr	r1, [sp, #12]
 80027ea:	3130      	adds	r1, #48	; 0x30
 80027ec:	4288      	cmp	r0, r1
 80027ee:	d001      	beq.n	80027f4 <??zcl_cluster_reports_timer_37>
 80027f0:	6836      	ldr	r6, [r6, #0]
 80027f2:	e683      	b.n	80024fc <??zcl_cluster_reports_timer_8>

080027f4 <??zcl_cluster_reports_timer_37>:
 80027f4:	2600      	movs	r6, #0
 80027f6:	e681      	b.n	80024fc <??zcl_cluster_reports_timer_8>

080027f8 <??zcl_cluster_reports_timer_9>:
 80027f8:	9805      	ldr	r0, [sp, #20]
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d04c      	beq.n	8002898 <??zcl_cluster_reports_timer_3>
 80027fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002802:	2800      	cmp	r0, #0
 8002804:	d042      	beq.n	800288c <??zcl_cluster_reports_timer_38>
 8002806:	2001      	movs	r0, #1
 8002808:	9007      	str	r0, [sp, #28]
 800280a:	2001      	movs	r0, #1
 800280c:	9905      	ldr	r1, [sp, #20]
 800280e:	7008      	strb	r0, [r1, #0]
 8002810:	4650      	mov	r0, sl
 8002812:	b2c0      	uxtb	r0, r0
 8002814:	280c      	cmp	r0, #12
 8002816:	d007      	beq.n	8002828 <??zcl_cluster_reports_timer_39>
 8002818:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800281c:	9907      	ldr	r1, [sp, #28]
 800281e:	fa51 f080 	uxtab	r0, r1, r0
 8002822:	1cc0      	adds	r0, r0, #3
 8002824:	2837      	cmp	r0, #55	; 0x37
 8002826:	d314      	bcc.n	8002852 <??zcl_cluster_reports_timer_40>

08002828 <??zcl_cluster_reports_timer_39>:
 8002828:	465a      	mov	r2, fp
 800282a:	a90c      	add	r1, sp, #48	; 0x30
 800282c:	9803      	ldr	r0, [sp, #12]
 800282e:	f7ff fc1b 	bl	8002068 <zcl_reporting_queue_report>
 8002832:	f11b 0bc8 	adds.w	fp, fp, #200	; 0xc8
 8002836:	2490      	movs	r4, #144	; 0x90
 8002838:	2500      	movs	r5, #0
 800283a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800283e:	002a      	movs	r2, r5
 8002840:	0021      	movs	r1, r4
 8002842:	4640      	mov	r0, r8
 8002844:	f003 fa3a 	bl	8005cbc <__aeabi_memset>
 8002848:	2000      	movs	r0, #0
 800284a:	4682      	mov	sl, r0
 800284c:	2000      	movs	r0, #0
 800284e:	f88d 0008 	strb.w	r0, [sp, #8]

08002852 <??zcl_cluster_reports_timer_40>:
 8002852:	9807      	ldr	r0, [sp, #28]
 8002854:	9001      	str	r0, [sp, #4]
 8002856:	9805      	ldr	r0, [sp, #20]
 8002858:	9000      	str	r0, [sp, #0]
 800285a:	2330      	movs	r3, #48	; 0x30
 800285c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002860:	a90c      	add	r1, sp, #48	; 0x30
 8002862:	4654      	mov	r4, sl
 8002864:	b2e4      	uxtb	r4, r4
 8002866:	200c      	movs	r0, #12
 8002868:	4344      	muls	r4, r0
 800286a:	4421      	add	r1, r4
 800286c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800286e:	f7ff fd65 	bl	800233c <zcl_report_append_attr>
 8002872:	2800      	cmp	r0, #0
 8002874:	d001      	beq.n	800287a <??zcl_cluster_reports_timer_41>
 8002876:	f11a 0a01 	adds.w	sl, sl, #1

0800287a <??zcl_cluster_reports_timer_41>:
 800287a:	4650      	mov	r0, sl
 800287c:	b2c0      	uxtb	r0, r0
 800287e:	2800      	cmp	r0, #0
 8002880:	d004      	beq.n	800288c <??zcl_cluster_reports_timer_38>
 8002882:	465a      	mov	r2, fp
 8002884:	a90c      	add	r1, sp, #48	; 0x30
 8002886:	9803      	ldr	r0, [sp, #12]
 8002888:	f7ff fbee 	bl	8002068 <zcl_reporting_queue_report>

0800288c <??zcl_cluster_reports_timer_38>:
 800288c:	2300      	movs	r3, #0
 800288e:	a2ba      	add	r2, pc, #744	; (adr r2, 8002b78 <??DataTable7>)
 8002890:	9905      	ldr	r1, [sp, #20]
 8002892:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8002894:	f00f ff93 	bl	80127be <zb_heap_free>

08002898 <??zcl_cluster_reports_timer_3>:
 8002898:	9806      	ldr	r0, [sp, #24]
 800289a:	28c8      	cmp	r0, #200	; 0xc8
 800289c:	d201      	bcs.n	80028a2 <??zcl_cluster_reports_timer_42>
 800289e:	20c8      	movs	r0, #200	; 0xc8
 80028a0:	9006      	str	r0, [sp, #24]

080028a2 <??zcl_cluster_reports_timer_42>:
 80028a2:	9803      	ldr	r0, [sp, #12]
 80028a4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d00c      	beq.n	80028c4 <??zcl_cluster_reports_timer_43>
 80028aa:	9803      	ldr	r0, [sp, #12]
 80028ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80028ae:	9906      	ldr	r1, [sp, #24]
 80028b0:	9803      	ldr	r0, [sp, #12]
 80028b2:	9b03      	ldr	r3, [sp, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4798      	blx	r3
 80028b8:	2000      	movs	r0, #0
 80028ba:	9903      	ldr	r1, [sp, #12]
 80028bc:	6408      	str	r0, [r1, #64]	; 0x40
 80028be:	2000      	movs	r0, #0
 80028c0:	9903      	ldr	r1, [sp, #12]
 80028c2:	6448      	str	r0, [r1, #68]	; 0x44

080028c4 <??zcl_cluster_reports_timer_43>:
 80028c4:	2301      	movs	r3, #1
 80028c6:	f10d 020a 	add.w	r2, sp, #10
 80028ca:	f240 410c 	movw	r1, #1036	; 0x40c
 80028ce:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80028d0:	f00f fb9e 	bl	8012010 <ZbNwkGet>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	d002      	beq.n	80028de <??zcl_cluster_reports_timer_44>
 80028d8:	2000      	movs	r0, #0
 80028da:	f88d 000a 	strb.w	r0, [sp, #10]

080028de <??zcl_cluster_reports_timer_44>:
 80028de:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d110      	bne.n	8002908 <??zcl_cluster_reports_timer_45>
 80028e6:	9803      	ldr	r0, [sp, #12]
 80028e8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80028ea:	9903      	ldr	r1, [sp, #12]
 80028ec:	3130      	adds	r1, #48	; 0x30
 80028ee:	4288      	cmp	r0, r1
 80028f0:	d002      	beq.n	80028f8 <??zcl_cluster_reports_timer_46>
 80028f2:	9803      	ldr	r0, [sp, #12]
 80028f4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80028f6:	e000      	b.n	80028fa <??zcl_cluster_reports_timer_47>

080028f8 <??zcl_cluster_reports_timer_46>:
 80028f8:	2000      	movs	r0, #0

080028fa <??zcl_cluster_reports_timer_47>:
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d004      	beq.n	8002908 <??zcl_cluster_reports_timer_45>
 80028fe:	9906      	ldr	r1, [sp, #24]
 8002900:	9803      	ldr	r0, [sp, #12]
 8002902:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002904:	f00f fab0 	bl	8011e68 <ZbTimerReset>

08002908 <??zcl_cluster_reports_timer_45>:
 8002908:	b030      	add	sp, #192	; 0xc0
 800290a:	ecbd 8b04 	vpop	{d8-d9}
 800290e:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002912 <zcl_attr_reporting_check>:
 8002912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002914:	0005      	movs	r5, r0
 8002916:	000e      	movs	r6, r1
 8002918:	0017      	movs	r7, r2
 800291a:	2000      	movs	r0, #0
 800291c:	f88d 0000 	strb.w	r0, [sp]
 8002920:	2301      	movs	r3, #1
 8002922:	466a      	mov	r2, sp
 8002924:	f240 410c 	movw	r1, #1036	; 0x40c
 8002928:	68a8      	ldr	r0, [r5, #8]
 800292a:	f00f fb71 	bl	8012010 <ZbNwkGet>
 800292e:	2800      	cmp	r0, #0
 8002930:	d002      	beq.n	8002938 <??zcl_attr_reporting_check_0>
 8002932:	2000      	movs	r0, #0
 8002934:	f88d 0000 	strb.w	r0, [sp]

08002938 <??zcl_attr_reporting_check_0>:
 8002938:	f89d 0000 	ldrb.w	r0, [sp]
 800293c:	2800      	cmp	r0, #0
 800293e:	d10d      	bne.n	800295c <??zcl_attr_reporting_check_1>
 8002940:	003a      	movs	r2, r7
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	0031      	movs	r1, r6
 8002946:	b289      	uxth	r1, r1
 8002948:	0028      	movs	r0, r5
 800294a:	f000 f81a 	bl	8002982 <zcl_reporting_find>
 800294e:	0004      	movs	r4, r0
 8002950:	2c00      	cmp	r4, #0
 8002952:	d003      	beq.n	800295c <??zcl_attr_reporting_check_1>
 8002954:	21c8      	movs	r1, #200	; 0xc8
 8002956:	0028      	movs	r0, r5
 8002958:	f7ff fcbd 	bl	80022d6 <zcl_report_kick>

0800295c <??zcl_attr_reporting_check_1>:
 800295c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800295e <ZbZclReportCleanup>:
 800295e:	b570      	push	{r4, r5, r6, lr}
 8002960:	0005      	movs	r5, r0

08002962 <??ZbZclReportCleanup_0>:
 8002962:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002964:	f115 0130 	adds.w	r1, r5, #48	; 0x30
 8002968:	4288      	cmp	r0, r1
 800296a:	d001      	beq.n	8002970 <??ZbZclReportCleanup_1>
 800296c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800296e:	e000      	b.n	8002972 <??ZbZclReportCleanup_2>

08002970 <??ZbZclReportCleanup_1>:
 8002970:	2400      	movs	r4, #0

08002972 <??ZbZclReportCleanup_2>:
 8002972:	2c00      	cmp	r4, #0
 8002974:	d004      	beq.n	8002980 <??ZbZclReportCleanup_3>

08002976 <??ZbZclReportCleanup_4>:
 8002976:	0026      	movs	r6, r4
 8002978:	0030      	movs	r0, r6
 800297a:	f000 f8ff 	bl	8002b7c <zcl_reporting_delete>
 800297e:	e7f0      	b.n	8002962 <??ZbZclReportCleanup_0>

08002980 <??ZbZclReportCleanup_3>:
 8002980:	bd70      	pop	{r4, r5, r6, pc}

08002982 <zcl_reporting_find>:
 8002982:	b470      	push	{r4, r5, r6}
 8002984:	0004      	movs	r4, r0
 8002986:	000b      	movs	r3, r1
 8002988:	0010      	movs	r0, r2
 800298a:	b2c0      	uxtb	r0, r0
 800298c:	2801      	cmp	r0, #1
 800298e:	d101      	bne.n	8002994 <??zcl_reporting_find_0>
 8002990:	2000      	movs	r0, #0
 8002992:	e01c      	b.n	80029ce <??zcl_reporting_find_1>

08002994 <??zcl_reporting_find_0>:
 8002994:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002996:	f114 0130 	adds.w	r1, r4, #48	; 0x30
 800299a:	4288      	cmp	r0, r1
 800299c:	d001      	beq.n	80029a2 <??zcl_reporting_find_2>
 800299e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80029a0:	e000      	b.n	80029a4 <??zcl_reporting_find_3>

080029a2 <??zcl_reporting_find_2>:
 80029a2:	2100      	movs	r1, #0

080029a4 <??zcl_reporting_find_3>:
 80029a4:	2900      	cmp	r1, #0
 80029a6:	d011      	beq.n	80029cc <??zcl_reporting_find_4>
 80029a8:	000d      	movs	r5, r1
 80029aa:	89a8      	ldrh	r0, [r5, #12]
 80029ac:	001e      	movs	r6, r3
 80029ae:	b2b6      	uxth	r6, r6
 80029b0:	42b0      	cmp	r0, r6
 80029b2:	d005      	beq.n	80029c0 <??zcl_reporting_find_5>
 80029b4:	6808      	ldr	r0, [r1, #0]
 80029b6:	f114 0630 	adds.w	r6, r4, #48	; 0x30
 80029ba:	42b0      	cmp	r0, r6
 80029bc:	d004      	beq.n	80029c8 <??zcl_reporting_find_6>
 80029be:	e001      	b.n	80029c4 <??zcl_reporting_find_7>

080029c0 <??zcl_reporting_find_5>:
 80029c0:	0028      	movs	r0, r5
 80029c2:	e004      	b.n	80029ce <??zcl_reporting_find_1>

080029c4 <??zcl_reporting_find_7>:
 80029c4:	6809      	ldr	r1, [r1, #0]
 80029c6:	e7ed      	b.n	80029a4 <??zcl_reporting_find_3>

080029c8 <??zcl_reporting_find_6>:
 80029c8:	2100      	movs	r1, #0
 80029ca:	e7eb      	b.n	80029a4 <??zcl_reporting_find_3>

080029cc <??zcl_reporting_find_4>:
 80029cc:	2000      	movs	r0, #0

080029ce <??zcl_reporting_find_1>:
 80029ce:	bc70      	pop	{r4, r5, r6}
 80029d0:	4770      	bx	lr

080029d2 <zcl_reporting_stack_event>:
 80029d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d6:	0006      	movs	r6, r0
 80029d8:	000f      	movs	r7, r1
 80029da:	4690      	mov	r8, r2
 80029dc:	4699      	mov	r9, r3
 80029de:	46ca      	mov	sl, r9
 80029e0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 80029e4:	d001      	beq.n	80029ea <??zcl_reporting_stack_event_0>
 80029e6:	2000      	movs	r0, #0
 80029e8:	e01b      	b.n	8002a22 <??zcl_reporting_stack_event_1>

080029ea <??zcl_reporting_stack_event_0>:
 80029ea:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 80029ee:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 80029f2:	4288      	cmp	r0, r1
 80029f4:	d002      	beq.n	80029fc <??zcl_reporting_stack_event_2>
 80029f6:	f8da 4030 	ldr.w	r4, [sl, #48]	; 0x30
 80029fa:	e000      	b.n	80029fe <??zcl_reporting_stack_event_3>

080029fc <??zcl_reporting_stack_event_2>:
 80029fc:	2400      	movs	r4, #0

080029fe <??zcl_reporting_stack_event_3>:
 80029fe:	2c00      	cmp	r4, #0
 8002a00:	d00e      	beq.n	8002a20 <??zcl_reporting_stack_event_4>
 8002a02:	0025      	movs	r5, r4
 8002a04:	2201      	movs	r2, #1
 8002a06:	0029      	movs	r1, r5
 8002a08:	0030      	movs	r0, r6
 8002a0a:	f000 f947 	bl	8002c9c <zcl_reporting_reset_defaults>
 8002a0e:	6820      	ldr	r0, [r4, #0]
 8002a10:	f11a 0130 	adds.w	r1, sl, #48	; 0x30
 8002a14:	4288      	cmp	r0, r1
 8002a16:	d001      	beq.n	8002a1c <??zcl_reporting_stack_event_5>
 8002a18:	6824      	ldr	r4, [r4, #0]
 8002a1a:	e7f0      	b.n	80029fe <??zcl_reporting_stack_event_3>

08002a1c <??zcl_reporting_stack_event_5>:
 8002a1c:	2400      	movs	r4, #0
 8002a1e:	e7ee      	b.n	80029fe <??zcl_reporting_stack_event_3>

08002a20 <??zcl_reporting_stack_event_4>:
 8002a20:	2000      	movs	r0, #0

08002a22 <??zcl_reporting_stack_event_1>:
 8002a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a26 <zcl_reporting_save_curr_val>:
 8002a26:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8002a2a:	0005      	movs	r5, r0
 8002a2c:	000e      	movs	r6, r1
 8002a2e:	68af      	ldr	r7, [r5, #8]
 8002a30:	f20f 1944 	addw	r9, pc, #324	; 0x144
 8002a34:	2300      	movs	r3, #0
 8002a36:	464a      	mov	r2, r9
 8002a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a3c:	0038      	movs	r0, r7
 8002a3e:	f00f feaf 	bl	80127a0 <zb_heap_alloc>
 8002a42:	0004      	movs	r4, r0
 8002a44:	2c00      	cmp	r4, #0
 8002a46:	d101      	bne.n	8002a4c <??zcl_reporting_save_curr_val_0>
 8002a48:	2089      	movs	r0, #137	; 0x89
 8002a4a:	e05d      	b.n	8002b08 <??zcl_reporting_save_curr_val_1>

08002a4c <??zcl_reporting_save_curr_val_0>:
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	9001      	str	r0, [sp, #4]
 8002a50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a54:	9000      	str	r0, [sp, #0]
 8002a56:	0023      	movs	r3, r4
 8002a58:	f10d 0209 	add.w	r2, sp, #9
 8002a5c:	89b1      	ldrh	r1, [r6, #12]
 8002a5e:	0028      	movs	r0, r5
 8002a60:	f7fd fd6f 	bl	8000542 <ZbZclAttrRead>
 8002a64:	f88d 0008 	strb.w	r0, [sp, #8]
 8002a68:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d002      	beq.n	8002a76 <??zcl_reporting_save_curr_val_2>
 8002a70:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002a74:	e048      	b.n	8002b08 <??zcl_reporting_save_curr_val_1>

08002a76 <??zcl_reporting_save_curr_val_2>:
 8002a76:	7bb0      	ldrb	r0, [r6, #14]
 8002a78:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002a7c:	4288      	cmp	r0, r1
 8002a7e:	d001      	beq.n	8002a84 <??zcl_reporting_save_curr_val_3>
 8002a80:	208d      	movs	r0, #141	; 0x8d
 8002a82:	e041      	b.n	8002b08 <??zcl_reporting_save_curr_val_1>

08002a84 <??zcl_reporting_save_curr_val_3>:
 8002a84:	2300      	movs	r3, #0
 8002a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8a:	0021      	movs	r1, r4
 8002a8c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002a90:	f7fe fb7f 	bl	8001192 <ZbZclAttrParseLength>
 8002a94:	4680      	mov	r8, r0
 8002a96:	f1b8 0f00 	cmp.w	r8, #0
 8002a9a:	d501      	bpl.n	8002aa0 <??zcl_reporting_save_curr_val_4>
 8002a9c:	2089      	movs	r0, #137	; 0x89
 8002a9e:	e033      	b.n	8002b08 <??zcl_reporting_save_curr_val_1>

08002aa0 <??zcl_reporting_save_curr_val_4>:
 8002aa0:	7bb0      	ldrb	r0, [r6, #14]
 8002aa2:	f7fe fc27 	bl	80012f4 <ZbZclAttrIsAnalog>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d106      	bne.n	8002ab8 <??zcl_reporting_save_curr_val_5>
 8002aaa:	4642      	mov	r2, r8
 8002aac:	0021      	movs	r1, r4
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f00f fe94 	bl	80127dc <WpanCrc>
 8002ab4:	8330      	strh	r0, [r6, #24]
 8002ab6:	e020      	b.n	8002afa <??zcl_reporting_save_curr_val_6>

08002ab8 <??zcl_reporting_save_curr_val_5>:
 8002ab8:	7bb0      	ldrb	r0, [r6, #14]
 8002aba:	f002 fce1 	bl	8005480 <ZbZclAttrIsFloat>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d00d      	beq.n	8002ade <??zcl_reporting_save_curr_val_7>
 8002ac2:	aa02      	add	r2, sp, #8
 8002ac4:	0021      	movs	r1, r4
 8002ac6:	7bb0      	ldrb	r0, [r6, #14]
 8002ac8:	f002 f9b5 	bl	8004e36 <ZbZclParseFloat>
 8002acc:	ed86 0b06 	vstr	d0, [r6, #24]
 8002ad0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d010      	beq.n	8002afa <??zcl_reporting_save_curr_val_6>
 8002ad8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002adc:	e014      	b.n	8002b08 <??zcl_reporting_save_curr_val_1>

08002ade <??zcl_reporting_save_curr_val_7>:
 8002ade:	aa02      	add	r2, sp, #8
 8002ae0:	0021      	movs	r1, r4
 8002ae2:	7bb0      	ldrb	r0, [r6, #14]
 8002ae4:	f7fe fd04 	bl	80014f0 <ZbZclParseInteger>
 8002ae8:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8002aec:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d002      	beq.n	8002afa <??zcl_reporting_save_curr_val_6>
 8002af4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002af8:	e006      	b.n	8002b08 <??zcl_reporting_save_curr_val_1>

08002afa <??zcl_reporting_save_curr_val_6>:
 8002afa:	2300      	movs	r3, #0
 8002afc:	464a      	mov	r2, r9
 8002afe:	0021      	movs	r1, r4
 8002b00:	0038      	movs	r0, r7
 8002b02:	f00f fe5c 	bl	80127be <zb_heap_free>
 8002b06:	2000      	movs	r0, #0

08002b08 <??zcl_reporting_save_curr_val_1>:
 8002b08:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08002b0c <zcl_reporting_create_new>:
 8002b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b10:	0006      	movs	r6, r0
 8002b12:	000f      	movs	r7, r1
 8002b14:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	89b9      	ldrh	r1, [r7, #12]
 8002b1c:	0030      	movs	r0, r6
 8002b1e:	f7ff ff30 	bl	8002982 <zcl_reporting_find>
 8002b22:	0005      	movs	r5, r0
 8002b24:	2d00      	cmp	r5, #0
 8002b26:	d001      	beq.n	8002b2c <??zcl_reporting_create_new_0>
 8002b28:	0028      	movs	r0, r5
 8002b2a:	e023      	b.n	8002b74 <??zcl_reporting_create_new_1>

08002b2c <??zcl_reporting_create_new_0>:
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	a212      	add	r2, pc, #72	; (adr r2, 8002b78 <??DataTable7>)
 8002b30:	2138      	movs	r1, #56	; 0x38
 8002b32:	4640      	mov	r0, r8
 8002b34:	f00f fe34 	bl	80127a0 <zb_heap_alloc>
 8002b38:	0004      	movs	r4, r0
 8002b3a:	2c00      	cmp	r4, #0
 8002b3c:	d101      	bne.n	8002b42 <??zcl_reporting_create_new_2>
 8002b3e:	2000      	movs	r0, #0
 8002b40:	e018      	b.n	8002b74 <??zcl_reporting_create_new_1>

08002b42 <??zcl_reporting_create_new_2>:
 8002b42:	2538      	movs	r5, #56	; 0x38
 8002b44:	46b9      	mov	r9, r7
 8002b46:	46a2      	mov	sl, r4
 8002b48:	002a      	movs	r2, r5
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	4650      	mov	r0, sl
 8002b4e:	f012 f84e 	bl	8014bee <__aeabi_memcpy>
 8002b52:	6024      	str	r4, [r4, #0]
 8002b54:	6064      	str	r4, [r4, #4]
 8002b56:	f116 0030 	adds.w	r0, r6, #48	; 0x30
 8002b5a:	6020      	str	r0, [r4, #0]
 8002b5c:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8002b5e:	6060      	str	r0, [r4, #4]
 8002b60:	6820      	ldr	r0, [r4, #0]
 8002b62:	6044      	str	r4, [r0, #4]
 8002b64:	6860      	ldr	r0, [r4, #4]
 8002b66:	6004      	str	r4, [r0, #0]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	0021      	movs	r1, r4
 8002b6c:	4640      	mov	r0, r8
 8002b6e:	f000 f895 	bl	8002c9c <zcl_reporting_reset_defaults>
 8002b72:	0020      	movs	r0, r4

08002b74 <??zcl_reporting_create_new_1>:
 8002b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b78 <??DataTable7>:
 8002b78:	0000 0000                                   ....

08002b7c <zcl_reporting_delete>:
 8002b7c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b7e:	0004      	movs	r4, r0
 8002b80:	68a5      	ldr	r5, [r4, #8]
 8002b82:	68ae      	ldr	r6, [r5, #8]
 8002b84:	2000      	movs	r0, #0
 8002b86:	f88d 0000 	strb.w	r0, [sp]
 8002b8a:	6860      	ldr	r0, [r4, #4]
 8002b8c:	6821      	ldr	r1, [r4, #0]
 8002b8e:	6048      	str	r0, [r1, #4]
 8002b90:	6820      	ldr	r0, [r4, #0]
 8002b92:	6861      	ldr	r1, [r4, #4]
 8002b94:	6008      	str	r0, [r1, #0]
 8002b96:	6024      	str	r4, [r4, #0]
 8002b98:	6064      	str	r4, [r4, #4]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	a26c      	add	r2, pc, #432	; (adr r2, 8002d50 <??DataTable9_1>)
 8002b9e:	0021      	movs	r1, r4
 8002ba0:	0030      	movs	r0, r6
 8002ba2:	f00f fe0c 	bl	80127be <zb_heap_free>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	466a      	mov	r2, sp
 8002baa:	f240 410c 	movw	r1, #1036	; 0x40c
 8002bae:	0030      	movs	r0, r6
 8002bb0:	f00f fa2e 	bl	8012010 <ZbNwkGet>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d002      	beq.n	8002bbe <??zcl_reporting_delete_0>
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f88d 0000 	strb.w	r0, [sp]

08002bbe <??zcl_reporting_delete_0>:
 8002bbe:	f89d 0000 	ldrb.w	r0, [sp]
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d103      	bne.n	8002bce <??zcl_reporting_delete_1>
 8002bc6:	21c8      	movs	r1, #200	; 0xc8
 8002bc8:	0028      	movs	r0, r5
 8002bca:	f7ff fb84 	bl	80022d6 <zcl_report_kick>

08002bce <??zcl_reporting_delete_1>:
 8002bce:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002bd0 <zcl_cluster_attr_report_delete>:
 8002bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd2:	0005      	movs	r5, r0
 8002bd4:	000e      	movs	r6, r1
 8002bd6:	0017      	movs	r7, r2
 8002bd8:	003a      	movs	r2, r7
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	0031      	movs	r1, r6
 8002bde:	b289      	uxth	r1, r1
 8002be0:	0028      	movs	r0, r5
 8002be2:	f7ff fece 	bl	8002982 <zcl_reporting_find>
 8002be6:	0004      	movs	r4, r0
 8002be8:	2c00      	cmp	r4, #0
 8002bea:	d101      	bne.n	8002bf0 <??zcl_cluster_attr_report_delete_0>
 8002bec:	2000      	movs	r0, #0
 8002bee:	e003      	b.n	8002bf8 <??zcl_cluster_attr_report_delete_1>

08002bf0 <??zcl_cluster_attr_report_delete_0>:
 8002bf0:	0020      	movs	r0, r4
 8002bf2:	f7ff ffc3 	bl	8002b7c <zcl_reporting_delete>
 8002bf6:	2001      	movs	r0, #1

08002bf8 <??zcl_cluster_attr_report_delete_1>:
 8002bf8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002bfa <zcl_reporting_disable>:
 8002bfa:	b538      	push	{r3, r4, r5, lr}
 8002bfc:	0004      	movs	r4, r0
 8002bfe:	68a0      	ldr	r0, [r4, #8]
 8002c00:	6885      	ldr	r5, [r0, #8]
 8002c02:	2000      	movs	r0, #0
 8002c04:	f88d 0000 	strb.w	r0, [sp]
 8002c08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c0c:	8460      	strh	r0, [r4, #34]	; 0x22
 8002c0e:	2000      	movs	r0, #0
 8002c10:	8420      	strh	r0, [r4, #32]
 8002c12:	2301      	movs	r3, #1
 8002c14:	466a      	mov	r2, sp
 8002c16:	f240 410c 	movw	r1, #1036	; 0x40c
 8002c1a:	0028      	movs	r0, r5
 8002c1c:	f00f f9f8 	bl	8012010 <ZbNwkGet>
 8002c20:	2800      	cmp	r0, #0
 8002c22:	d002      	beq.n	8002c2a <??zcl_reporting_disable_0>
 8002c24:	2000      	movs	r0, #0
 8002c26:	f88d 0000 	strb.w	r0, [sp]

08002c2a <??zcl_reporting_disable_0>:
 8002c2a:	f89d 0000 	ldrb.w	r0, [sp]
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d103      	bne.n	8002c3a <??zcl_reporting_disable_1>
 8002c32:	21c8      	movs	r1, #200	; 0xc8
 8002c34:	68a0      	ldr	r0, [r4, #8]
 8002c36:	f7ff fb4e 	bl	80022d6 <zcl_report_kick>

08002c3a <??zcl_reporting_disable_1>:
 8002c3a:	bd31      	pop	{r0, r4, r5, pc}

08002c3c <zcl_reporting_check_default_intvl>:
 8002c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c40:	880a      	ldrh	r2, [r1, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d00e      	beq.n	8002c64 <??zcl_reporting_check_default_intvl_0>
 8002c46:	880a      	ldrh	r2, [r1, #0]
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	d00b      	beq.n	8002c64 <??zcl_reporting_check_default_intvl_0>
 8002c4c:	880a      	ldrh	r2, [r1, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d102      	bne.n	8002c58 <??zcl_reporting_check_default_intvl_1>
 8002c52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c56:	800a      	strh	r2, [r1, #0]

08002c58 <??zcl_reporting_check_default_intvl_1>:
 8002c58:	880a      	ldrh	r2, [r1, #0]
 8002c5a:	8803      	ldrh	r3, [r0, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d201      	bcs.n	8002c64 <??zcl_reporting_check_default_intvl_0>
 8002c60:	2200      	movs	r2, #0
 8002c62:	8002      	strh	r2, [r0, #0]

08002c64 <??zcl_reporting_check_default_intvl_0>:
 8002c64:	4770      	bx	lr

08002c66 <zcl_reporting_config_attr_defaults>:
 8002c66:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002c68:	0004      	movs	r4, r0
 8002c6a:	000d      	movs	r5, r1
 8002c6c:	0016      	movs	r6, r2
 8002c6e:	8aa8      	ldrh	r0, [r5, #20]
 8002c70:	f8ad 0002 	strh.w	r0, [sp, #2]
 8002c74:	8ae8      	ldrh	r0, [r5, #22]
 8002c76:	f8ad 0000 	strh.w	r0, [sp]
 8002c7a:	4669      	mov	r1, sp
 8002c7c:	f10d 0002 	add.w	r0, sp, #2
 8002c80:	f7ff ffdc 	bl	8002c3c <zcl_reporting_check_default_intvl>
 8002c84:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8002c88:	84b0      	strh	r0, [r6, #36]	; 0x24
 8002c8a:	f8bd 0000 	ldrh.w	r0, [sp]
 8002c8e:	84f0      	strh	r0, [r6, #38]	; 0x26
 8002c90:	2200      	movs	r2, #0
 8002c92:	0031      	movs	r1, r6
 8002c94:	0020      	movs	r0, r4
 8002c96:	f000 f801 	bl	8002c9c <zcl_reporting_reset_defaults>
 8002c9a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002c9c <zcl_reporting_reset_defaults>:
 8002c9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002c9e:	0004      	movs	r4, r0
 8002ca0:	000d      	movs	r5, r1
 8002ca2:	0016      	movs	r6, r2
 8002ca4:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8002ca6:	8428      	strh	r0, [r5, #32]
 8002ca8:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8002caa:	8468      	strh	r0, [r5, #34]	; 0x22
 8002cac:	8c28      	ldrh	r0, [r5, #32]
 8002cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cb2:	4288      	cmp	r0, r1
 8002cb4:	d106      	bne.n	8002cc4 <??zcl_reporting_reset_defaults_0>
 8002cb6:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d103      	bne.n	8002cc4 <??zcl_reporting_reset_defaults_0>
 8002cbc:	203d      	movs	r0, #61	; 0x3d
 8002cbe:	8468      	strh	r0, [r5, #34]	; 0x22
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	8428      	strh	r0, [r5, #32]

08002cc4 <??zcl_reporting_reset_defaults_0>:
 8002cc4:	ed95 0b0c 	vldr	d0, [r5, #48]	; 0x30
 8002cc8:	ed85 0b0a 	vstr	d0, [r5, #40]	; 0x28
 8002ccc:	0020      	movs	r0, r4
 8002cce:	f00f fabf 	bl	8012250 <ZbZclUptime>
 8002cd2:	6128      	str	r0, [r5, #16]
 8002cd4:	0030      	movs	r0, r6
 8002cd6:	b2c0      	uxtb	r0, r0
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d013      	beq.n	8002d04 <??zcl_reporting_reset_defaults_1>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	466a      	mov	r2, sp
 8002ce0:	f240 410c 	movw	r1, #1036	; 0x40c
 8002ce4:	0020      	movs	r0, r4
 8002ce6:	f00f f993 	bl	8012010 <ZbNwkGet>
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d002      	beq.n	8002cf4 <??zcl_reporting_reset_defaults_2>
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f88d 0000 	strb.w	r0, [sp]

08002cf4 <??zcl_reporting_reset_defaults_2>:
 8002cf4:	f89d 0000 	ldrb.w	r0, [sp]
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d103      	bne.n	8002d04 <??zcl_reporting_reset_defaults_1>
 8002cfc:	21c8      	movs	r1, #200	; 0xc8
 8002cfe:	68a8      	ldr	r0, [r5, #8]
 8002d00:	f7ff fae9 	bl	80022d6 <zcl_report_kick>

08002d04 <??zcl_reporting_reset_defaults_1>:
 8002d04:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002d06 <zcl_reporting_epsilon_default>:
 8002d06:	b538      	push	{r3, r4, r5, lr}
 8002d08:	0004      	movs	r4, r0
 8002d0a:	000d      	movs	r5, r1
 8002d0c:	0028      	movs	r0, r5
 8002d0e:	b2c0      	uxtb	r0, r0
 8002d10:	2838      	cmp	r0, #56	; 0x38
 8002d12:	db09      	blt.n	8002d28 <??zcl_reporting_epsilon_default_0>
 8002d14:	0028      	movs	r0, r5
 8002d16:	b2c0      	uxtb	r0, r0
 8002d18:	283b      	cmp	r0, #59	; 0x3b
 8002d1a:	da05      	bge.n	8002d28 <??zcl_reporting_epsilon_default_0>
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f8df 1bbc 	ldr.w	r1, [pc, #3004]	; 80038dc <??DataTable11>
 8002d22:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8002d26:	e00f      	b.n	8002d48 <??zcl_reporting_epsilon_default_1>

08002d28 <??zcl_reporting_epsilon_default_0>:
 8002d28:	0028      	movs	r0, r5
 8002d2a:	b2c0      	uxtb	r0, r0
 8002d2c:	f7fe fae2 	bl	80012f4 <ZbZclAttrIsAnalog>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d005      	beq.n	8002d40 <??zcl_reporting_epsilon_default_2>
 8002d34:	2000      	movs	r0, #0
 8002d36:	f8df 1ba4 	ldr.w	r1, [pc, #2980]	; 80038dc <??DataTable11>
 8002d3a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
 8002d3e:	e003      	b.n	8002d48 <??zcl_reporting_epsilon_default_1>

08002d40 <??zcl_reporting_epsilon_default_2>:
 8002d40:	2000      	movs	r0, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08002d48 <??zcl_reporting_epsilon_default_1>:
 8002d48:	bd31      	pop	{r0, r4, r5, pc}
	...

08002d4c <??DataTable9>:
 8002d4c:	2041 0800                                   A ..

08002d50 <??DataTable9_1>:
 8002d50:	0000 0000                                   ....

08002d54 <??DataTable9_2>:
 8002d54:	002c 2000                                   ,.. 

08002d58 <??DataTable9_3>:
 8002d58:	202d 0800                                   - ..

08002d5c <??DataTable9_4>:
 8002d5c:	ee80 0036                                   ..6.

08002d60 <zcl_reporting_epsilon_check>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	0004      	movs	r4, r0
 8002d64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d68:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8002d6a:	4281      	cmp	r1, r0
 8002d6c:	d101      	bne.n	8002d72 <??zcl_reporting_epsilon_check_0>
 8002d6e:	2001      	movs	r0, #1
 8002d70:	e049      	b.n	8002e06 <??zcl_reporting_epsilon_check_1>

08002d72 <??zcl_reporting_epsilon_check_0>:
 8002d72:	8c21      	ldrh	r1, [r4, #32]
 8002d74:	4281      	cmp	r1, r0
 8002d76:	d104      	bne.n	8002d82 <??zcl_reporting_epsilon_check_2>
 8002d78:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d101      	bne.n	8002d82 <??zcl_reporting_epsilon_check_2>
 8002d7e:	2001      	movs	r0, #1
 8002d80:	e041      	b.n	8002e06 <??zcl_reporting_epsilon_check_1>

08002d82 <??zcl_reporting_epsilon_check_2>:
 8002d82:	7ba0      	ldrb	r0, [r4, #14]
 8002d84:	2838      	cmp	r0, #56	; 0x38
 8002d86:	db1d      	blt.n	8002dc4 <??zcl_reporting_epsilon_check_3>
 8002d88:	7ba0      	ldrb	r0, [r4, #14]
 8002d8a:	283b      	cmp	r0, #59	; 0x3b
 8002d8c:	da1a      	bge.n	8002dc4 <??zcl_reporting_epsilon_check_3>
 8002d8e:	8c20      	ldrh	r0, [r4, #32]
 8002d90:	2800      	cmp	r0, #0
 8002d92:	d108      	bne.n	8002da6 <??zcl_reporting_epsilon_check_4>
 8002d94:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002d98:	2000      	movs	r0, #0
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f003 fc58 	bl	8006650 <__aeabi_cdcmpeq>
 8002da0:	d101      	bne.n	8002da6 <??zcl_reporting_epsilon_check_4>
 8002da2:	2000      	movs	r0, #0
 8002da4:	e02f      	b.n	8002e06 <??zcl_reporting_epsilon_check_1>

08002da6 <??zcl_reporting_epsilon_check_4>:
 8002da6:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002daa:	2200      	movs	r2, #0
 8002dac:	2300      	movs	r3, #0
 8002dae:	f003 fc4f 	bl	8006650 <__aeabi_cdcmpeq>
 8002db2:	d205      	bcs.n	8002dc0 <??zcl_reporting_epsilon_check_5>
 8002db4:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002db8:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8002dbc:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08002dc0 <??zcl_reporting_epsilon_check_5>:
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	e020      	b.n	8002e06 <??zcl_reporting_epsilon_check_1>

08002dc4 <??zcl_reporting_epsilon_check_3>:
 8002dc4:	7ba0      	ldrb	r0, [r4, #14]
 8002dc6:	f7fe fa95 	bl	80012f4 <ZbZclAttrIsAnalog>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d01a      	beq.n	8002e04 <??zcl_reporting_epsilon_check_6>
 8002dce:	8c20      	ldrh	r0, [r4, #32]
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d108      	bne.n	8002de6 <??zcl_reporting_epsilon_check_7>
 8002dd4:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002dd8:	2000      	movs	r0, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f003 fc38 	bl	8006650 <__aeabi_cdcmpeq>
 8002de0:	d101      	bne.n	8002de6 <??zcl_reporting_epsilon_check_7>
 8002de2:	2000      	movs	r0, #0
 8002de4:	e00f      	b.n	8002e06 <??zcl_reporting_epsilon_check_1>

08002de6 <??zcl_reporting_epsilon_check_7>:
 8002de6:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002dea:	2200      	movs	r2, #0
 8002dec:	2300      	movs	r3, #0
 8002dee:	f003 fc2f 	bl	8006650 <__aeabi_cdcmpeq>
 8002df2:	d205      	bcs.n	8002e00 <??zcl_reporting_epsilon_check_8>
 8002df4:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002df8:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8002dfc:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28

08002e00 <??zcl_reporting_epsilon_check_8>:
 8002e00:	2001      	movs	r0, #1
 8002e02:	e000      	b.n	8002e06 <??zcl_reporting_epsilon_check_1>

08002e04 <??zcl_reporting_epsilon_check_6>:
 8002e04:	2001      	movs	r0, #1

08002e06 <??zcl_reporting_epsilon_check_1>:
 8002e06:	bd10      	pop	{r4, pc}

08002e08 <zcl_reporting_create_default_reports>:
 8002e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0c:	b090      	sub	sp, #64	; 0x40
 8002e0e:	0005      	movs	r5, r0
 8002e10:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002e12:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8002e16:	4288      	cmp	r0, r1
 8002e18:	d001      	beq.n	8002e1e <??zcl_reporting_create_default_reports_0>
 8002e1a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002e1c:	e000      	b.n	8002e20 <??zcl_reporting_create_default_reports_1>

08002e1e <??zcl_reporting_create_default_reports_0>:
 8002e1e:	2400      	movs	r4, #0

08002e20 <??zcl_reporting_create_default_reports_1>:
 8002e20:	2c00      	cmp	r4, #0
 8002e22:	d054      	beq.n	8002ece <??zcl_reporting_create_default_reports_2>
 8002e24:	0026      	movs	r6, r4
 8002e26:	68b0      	ldr	r0, [r6, #8]
 8002e28:	7900      	ldrb	r0, [r0, #4]
 8002e2a:	0780      	lsls	r0, r0, #30
 8002e2c:	d546      	bpl.n	8002ebc <??zcl_reporting_create_default_reports_3>

08002e2e <??zcl_reporting_create_default_reports_4>:
 8002e2e:	2200      	movs	r2, #0
 8002e30:	68b0      	ldr	r0, [r6, #8]
 8002e32:	8801      	ldrh	r1, [r0, #0]
 8002e34:	0028      	movs	r0, r5
 8002e36:	f7ff fda4 	bl	8002982 <zcl_reporting_find>
 8002e3a:	9001      	str	r0, [sp, #4]
 8002e3c:	9801      	ldr	r0, [sp, #4]
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d13c      	bne.n	8002ebc <??zcl_reporting_create_default_reports_3>

08002e42 <??zcl_reporting_create_default_reports_5>:
 8002e42:	2738      	movs	r7, #56	; 0x38
 8002e44:	f05f 0800 	movs.w	r8, #0
 8002e48:	f10d 0908 	add.w	r9, sp, #8
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	0039      	movs	r1, r7
 8002e50:	4648      	mov	r0, r9
 8002e52:	f002 ff33 	bl	8005cbc <__aeabi_memset>
 8002e56:	68b0      	ldr	r0, [r6, #8]
 8002e58:	8800      	ldrh	r0, [r0, #0]
 8002e5a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8002e5e:	9504      	str	r5, [sp, #16]
 8002e60:	68b0      	ldr	r0, [r6, #8]
 8002e62:	7880      	ldrb	r0, [r0, #2]
 8002e64:	f88d 0016 	strb.w	r0, [sp, #22]
 8002e68:	68b0      	ldr	r0, [r6, #8]
 8002e6a:	7881      	ldrb	r1, [r0, #2]
 8002e6c:	a802      	add	r0, sp, #8
 8002e6e:	f7ff ff4a 	bl	8002d06 <zcl_reporting_epsilon_default>
 8002e72:	f05f 0908 	movs.w	r9, #8
 8002e76:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8002e7a:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8002e7e:	464a      	mov	r2, r9
 8002e80:	4651      	mov	r1, sl
 8002e82:	4658      	mov	r0, fp
 8002e84:	f011 feb3 	bl	8014bee <__aeabi_memcpy>
 8002e88:	aa02      	add	r2, sp, #8
 8002e8a:	0031      	movs	r1, r6
 8002e8c:	68a8      	ldr	r0, [r5, #8]
 8002e8e:	f7ff feea 	bl	8002c66 <zcl_reporting_config_attr_defaults>
 8002e92:	a902      	add	r1, sp, #8
 8002e94:	0028      	movs	r0, r5
 8002e96:	f7ff fdc6 	bl	8002a26 <zcl_reporting_save_curr_val>
 8002e9a:	f88d 0000 	strb.w	r0, [sp]
 8002e9e:	f89d 0000 	ldrb.w	r0, [sp]
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d002      	beq.n	8002eac <??zcl_reporting_create_default_reports_6>
 8002ea6:	f89d 0000 	ldrb.w	r0, [sp]
 8002eaa:	e011      	b.n	8002ed0 <??zcl_reporting_create_default_reports_7>

08002eac <??zcl_reporting_create_default_reports_6>:
 8002eac:	a902      	add	r1, sp, #8
 8002eae:	0028      	movs	r0, r5
 8002eb0:	f7ff fe2c 	bl	8002b0c <zcl_reporting_create_new>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d101      	bne.n	8002ebc <??zcl_reporting_create_default_reports_3>
 8002eb8:	2089      	movs	r0, #137	; 0x89
 8002eba:	e009      	b.n	8002ed0 <??zcl_reporting_create_default_reports_7>

08002ebc <??zcl_reporting_create_default_reports_3>:
 8002ebc:	6820      	ldr	r0, [r4, #0]
 8002ebe:	f115 0124 	adds.w	r1, r5, #36	; 0x24
 8002ec2:	4288      	cmp	r0, r1
 8002ec4:	d001      	beq.n	8002eca <??zcl_reporting_create_default_reports_8>
 8002ec6:	6824      	ldr	r4, [r4, #0]
 8002ec8:	e7aa      	b.n	8002e20 <??zcl_reporting_create_default_reports_1>

08002eca <??zcl_reporting_create_default_reports_8>:
 8002eca:	2400      	movs	r4, #0
 8002ecc:	e7a8      	b.n	8002e20 <??zcl_reporting_create_default_reports_1>

08002ece <??zcl_reporting_create_default_reports_2>:
 8002ece:	2000      	movs	r0, #0

08002ed0 <??zcl_reporting_create_default_reports_7>:
 8002ed0:	b011      	add	sp, #68	; 0x44
 8002ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002ed6 <ZbZclHandleConfigReport>:
 8002ed6:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eda:	b0c8      	sub	sp, #288	; 0x120
 8002edc:	0004      	movs	r4, r0
 8002ede:	0015      	movs	r5, r2
 8002ee0:	68a0      	ldr	r0, [r4, #8]
 8002ee2:	9001      	str	r0, [sp, #4]
 8002ee4:	2700      	movs	r7, #0
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f88d 0003 	strb.w	r0, [sp, #3]
 8002eec:	2600      	movs	r6, #0
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f88d 0002 	strb.w	r0, [sp, #2]
 8002ef4:	f05f 0808 	movs.w	r8, #8
 8002ef8:	f05f 0900 	movs.w	r9, #0
 8002efc:	f10d 0a0c 	add.w	sl, sp, #12
 8002f00:	464a      	mov	r2, r9
 8002f02:	4641      	mov	r1, r8
 8002f04:	4650      	mov	r0, sl
 8002f06:	f002 fed9 	bl	8005cbc <__aeabi_memset>
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f88d 000c 	strb.w	r0, [sp, #12]
 8002f10:	9848      	ldr	r0, [sp, #288]	; 0x120
 8002f12:	7840      	ldrb	r0, [r0, #1]
 8002f14:	f88d 000d 	strb.w	r0, [sp, #13]
 8002f18:	9848      	ldr	r0, [sp, #288]	; 0x120
 8002f1a:	7880      	ldrb	r0, [r0, #2]
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d003      	beq.n	8002f28 <??ZbZclHandleConfigReport_0>
 8002f20:	2000      	movs	r0, #0
 8002f22:	f88d 000e 	strb.w	r0, [sp, #14]
 8002f26:	e002      	b.n	8002f2e <??ZbZclHandleConfigReport_1>

08002f28 <??ZbZclHandleConfigReport_0>:
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f88d 000e 	strb.w	r0, [sp, #14]

08002f2e <??ZbZclHandleConfigReport_1>:
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f88d 000f 	strb.w	r0, [sp, #15]
 8002f34:	9848      	ldr	r0, [sp, #288]	; 0x120
 8002f36:	8880      	ldrh	r0, [r0, #4]
 8002f38:	f8ad 0010 	strh.w	r0, [sp, #16]
 8002f3c:	9848      	ldr	r0, [sp, #288]	; 0x120
 8002f3e:	7980      	ldrb	r0, [r0, #6]
 8002f40:	f88d 0012 	strb.w	r0, [sp, #18]
 8002f44:	2007      	movs	r0, #7
 8002f46:	f88d 0013 	strb.w	r0, [sp, #19]
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	a916      	add	r1, sp, #88	; 0x58
 8002f4e:	a803      	add	r0, sp, #12
 8002f50:	f001 fca4 	bl	800489c <ZbZclAppendHeader>
 8002f54:	9005      	str	r0, [sp, #20]
 8002f56:	9805      	ldr	r0, [sp, #20]
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d506      	bpl.n	8002f6a <??ZbZclHandleConfigReport_2>
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8002f60:	0029      	movs	r1, r5
 8002f62:	0020      	movs	r0, r4
 8002f64:	f00f faa1 	bl	80124aa <ZbZclSendDefaultResponse>
 8002f68:	e22d      	b.n	80033c6 <??ZbZclHandleConfigReport_3>

08002f6a <??ZbZclHandleConfigReport_2>:
 8002f6a:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8002f6c:	4286      	cmp	r6, r0
 8002f6e:	f080 81ab 	bcs.w	80032c8 <??ZbZclHandleConfigReport_4>
 8002f72:	f05f 0900 	movs.w	r9, #0
 8002f76:	f05f 0838 	movs.w	r8, #56	; 0x38
 8002f7a:	f05f 0a00 	movs.w	sl, #0
 8002f7e:	f10d 0b18 	add.w	fp, sp, #24
 8002f82:	4652      	mov	r2, sl
 8002f84:	4641      	mov	r1, r8
 8002f86:	4658      	mov	r0, fp
 8002f88:	f002 fe98 	bl	8005cbc <__aeabi_memset>
 8002f8c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8002f8e:	1cf1      	adds	r1, r6, #3
 8002f90:	4288      	cmp	r0, r1
 8002f92:	d206      	bcs.n	8002fa2 <??ZbZclHandleConfigReport_5>
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8002f98:	0029      	movs	r1, r5
 8002f9a:	0020      	movs	r0, r4
 8002f9c:	f00f fa85 	bl	80124aa <ZbZclSendDefaultResponse>
 8002fa0:	e211      	b.n	80033c6 <??ZbZclHandleConfigReport_3>

08002fa2 <??ZbZclHandleConfigReport_5>:
 8002fa2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002fa4:	5d80      	ldrb	r0, [r0, r6]
 8002fa6:	f88d 0001 	strb.w	r0, [sp, #1]
 8002faa:	1c76      	adds	r6, r6, #1
 8002fac:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002fae:	4430      	add	r0, r6
 8002fb0:	f7fd f8f4 	bl	800019c <pletoh16>
 8002fb4:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8002fb8:	1cb6      	adds	r6, r6, #2
 8002fba:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	f040 8150 	bne.w	8003264 <??ZbZclHandleConfigReport_6>
 8002fc4:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8002fc6:	1cb1      	adds	r1, r6, #2
 8002fc8:	4288      	cmp	r0, r1
 8002fca:	d206      	bcs.n	8002fda <??ZbZclHandleConfigReport_7>
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8002fd0:	0029      	movs	r1, r5
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	f00f fa69 	bl	80124aa <ZbZclSendDefaultResponse>
 8002fd8:	e1f5      	b.n	80033c6 <??ZbZclHandleConfigReport_3>

08002fda <??ZbZclHandleConfigReport_7>:
 8002fda:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8002fdc:	1c71      	adds	r1, r6, #1
 8002fde:	4288      	cmp	r0, r1
 8002fe0:	f0c0 808f 	bcc.w	8003102 <??ZbZclHandleConfigReport_19>

08002fe4 <??ZbZclHandleConfigReport_9>:
 8002fe4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002fe6:	5d80      	ldrb	r0, [r0, r6]
 8002fe8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8002fec:	1c76      	adds	r6, r6, #1
 8002fee:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8002ff0:	1cb1      	adds	r1, r6, #2
 8002ff2:	4288      	cmp	r0, r1
 8002ff4:	f0c0 8085 	bcc.w	8003102 <??ZbZclHandleConfigReport_19>

08002ff8 <??ZbZclHandleConfigReport_10>:
 8002ff8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002ffa:	4430      	add	r0, r6
 8002ffc:	f7fd f8ce 	bl	800019c <pletoh16>
 8003000:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8003004:	1cb6      	adds	r6, r6, #2
 8003006:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003008:	1cb1      	adds	r1, r6, #2
 800300a:	4288      	cmp	r0, r1
 800300c:	d379      	bcc.n	8003102 <??ZbZclHandleConfigReport_19>

0800300e <??ZbZclHandleConfigReport_11>:
 800300e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003010:	4430      	add	r0, r6
 8003012:	f7fd f8c3 	bl	800019c <pletoh16>
 8003016:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800301a:	1cb6      	adds	r6, r6, #2
 800301c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800301e:	1c71      	adds	r1, r6, #1
 8003020:	4288      	cmp	r0, r1
 8003022:	d36e      	bcc.n	8003102 <??ZbZclHandleConfigReport_19>

08003024 <??ZbZclHandleConfigReport_12>:
 8003024:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003028:	2848      	cmp	r0, #72	; 0x48
 800302a:	d00b      	beq.n	8003044 <??ZbZclHandleConfigReport_13>
 800302c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003030:	284c      	cmp	r0, #76	; 0x4c
 8003032:	d007      	beq.n	8003044 <??ZbZclHandleConfigReport_13>
 8003034:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003038:	2850      	cmp	r0, #80	; 0x50
 800303a:	d003      	beq.n	8003044 <??ZbZclHandleConfigReport_13>
 800303c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003040:	2851      	cmp	r0, #81	; 0x51
 8003042:	d103      	bne.n	800304c <??ZbZclHandleConfigReport_14>

08003044 <??ZbZclHandleConfigReport_13>:
 8003044:	208c      	movs	r0, #140	; 0x8c
 8003046:	f88d 0000 	strb.w	r0, [sp]
 800304a:	e125      	b.n	8003298 <??ZbZclHandleConfigReport_15>

0800304c <??ZbZclHandleConfigReport_14>:
 800304c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003050:	2838      	cmp	r0, #56	; 0x38
 8003052:	db29      	blt.n	80030a8 <??ZbZclHandleConfigReport_16>
 8003054:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003058:	283b      	cmp	r0, #59	; 0x3b
 800305a:	da25      	bge.n	80030a8 <??ZbZclHandleConfigReport_16>
 800305c:	2300      	movs	r3, #0
 800305e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8003060:	1b92      	subs	r2, r2, r6
 8003062:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003064:	eb00 0106 	add.w	r1, r0, r6
 8003068:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800306c:	f7fe f891 	bl	8001192 <ZbZclAttrParseLength>
 8003070:	9002      	str	r0, [sp, #8]
 8003072:	9802      	ldr	r0, [sp, #8]
 8003074:	2800      	cmp	r0, #0
 8003076:	d503      	bpl.n	8003080 <??ZbZclHandleConfigReport_17>
 8003078:	2085      	movs	r0, #133	; 0x85
 800307a:	f88d 0000 	strb.w	r0, [sp]
 800307e:	e10b      	b.n	8003298 <??ZbZclHandleConfigReport_15>

08003080 <??ZbZclHandleConfigReport_17>:
 8003080:	466a      	mov	r2, sp
 8003082:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003084:	eb00 0106 	add.w	r1, r0, r6
 8003088:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800308c:	f001 fed3 	bl	8004e36 <ZbZclParseFloat>
 8003090:	ed8d 0b10 	vstr	d0, [sp, #64]	; 0x40
 8003094:	f89d 0000 	ldrb.w	r0, [sp]
 8003098:	2800      	cmp	r0, #0
 800309a:	f040 80fd 	bne.w	8003298 <??ZbZclHandleConfigReport_15>

0800309e <??ZbZclHandleConfigReport_18>:
 800309e:	9802      	ldr	r0, [sp, #8]
 80030a0:	1986      	adds	r6, r0, r6
 80030a2:	2001      	movs	r0, #1
 80030a4:	4681      	mov	r9, r0
 80030a6:	e02c      	b.n	8003102 <??ZbZclHandleConfigReport_19>

080030a8 <??ZbZclHandleConfigReport_16>:
 80030a8:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80030ac:	f7fe f922 	bl	80012f4 <ZbZclAttrIsAnalog>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d026      	beq.n	8003102 <??ZbZclHandleConfigReport_19>
 80030b4:	2300      	movs	r3, #0
 80030b6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 80030b8:	1b92      	subs	r2, r2, r6
 80030ba:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80030bc:	eb00 0106 	add.w	r1, r0, r6
 80030c0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80030c4:	f7fe f865 	bl	8001192 <ZbZclAttrParseLength>
 80030c8:	9002      	str	r0, [sp, #8]
 80030ca:	9802      	ldr	r0, [sp, #8]
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d503      	bpl.n	80030d8 <??ZbZclHandleConfigReport_20>
 80030d0:	2085      	movs	r0, #133	; 0x85
 80030d2:	f88d 0000 	strb.w	r0, [sp]
 80030d6:	e0df      	b.n	8003298 <??ZbZclHandleConfigReport_15>

080030d8 <??ZbZclHandleConfigReport_20>:
 80030d8:	466a      	mov	r2, sp
 80030da:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80030dc:	eb00 0106 	add.w	r1, r0, r6
 80030e0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80030e4:	f7fe fa04 	bl	80014f0 <ZbZclParseInteger>
 80030e8:	f003 f824 	bl	8006134 <__aeabi_l2d>
 80030ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030f0:	f89d 0000 	ldrb.w	r0, [sp]
 80030f4:	2800      	cmp	r0, #0
 80030f6:	f040 80cf 	bne.w	8003298 <??ZbZclHandleConfigReport_15>

080030fa <??ZbZclHandleConfigReport_21>:
 80030fa:	9802      	ldr	r0, [sp, #8]
 80030fc:	1986      	adds	r6, r0, r6
 80030fe:	2001      	movs	r0, #1
 8003100:	4681      	mov	r9, r0

08003102 <??ZbZclHandleConfigReport_19>:
 8003102:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003106:	0020      	movs	r0, r4
 8003108:	f7fd f917 	bl	800033a <ZbZclAttrFind>
 800310c:	4682      	mov	sl, r0
 800310e:	f1ba 0f00 	cmp.w	sl, #0
 8003112:	d103      	bne.n	800311c <??ZbZclHandleConfigReport_22>
 8003114:	2086      	movs	r0, #134	; 0x86
 8003116:	f88d 0000 	strb.w	r0, [sp]
 800311a:	e0bd      	b.n	8003298 <??ZbZclHandleConfigReport_15>

0800311c <??ZbZclHandleConfigReport_22>:
 800311c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8003120:	7900      	ldrb	r0, [r0, #4]
 8003122:	0780      	lsls	r0, r0, #30
 8003124:	d403      	bmi.n	800312e <??ZbZclHandleConfigReport_23>
 8003126:	208c      	movs	r0, #140	; 0x8c
 8003128:	f88d 0000 	strb.w	r0, [sp]
 800312c:	e0b4      	b.n	8003298 <??ZbZclHandleConfigReport_15>

0800312e <??ZbZclHandleConfigReport_23>:
 800312e:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8003132:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8003136:	4558      	cmp	r0, fp
 8003138:	d101      	bne.n	800313e <??ZbZclHandleConfigReport_24>
 800313a:	2000      	movs	r0, #0
 800313c:	4681      	mov	r9, r0

0800313e <??ZbZclHandleConfigReport_24>:
 800313e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003142:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003146:	0020      	movs	r0, r4
 8003148:	f7ff fc1b 	bl	8002982 <zcl_reporting_find>
 800314c:	4680      	mov	r8, r0
 800314e:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8003152:	4558      	cmp	r0, fp
 8003154:	d11b      	bne.n	800318e <??ZbZclHandleConfigReport_25>
 8003156:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 800315a:	2800      	cmp	r0, #0
 800315c:	d117      	bne.n	800318e <??ZbZclHandleConfigReport_25>
 800315e:	2000      	movs	r0, #0
 8003160:	4681      	mov	r9, r0
 8003162:	f1b8 0f00 	cmp.w	r8, #0
 8003166:	d00d      	beq.n	8003184 <??ZbZclHandleConfigReport_26>
 8003168:	f8b8 0024 	ldrh.w	r0, [r8, #36]	; 0x24
 800316c:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8003170:	f8b8 0026 	ldrh.w	r0, [r8, #38]	; 0x26
 8003174:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 8003178:	2200      	movs	r2, #0
 800317a:	a906      	add	r1, sp, #24
 800317c:	9801      	ldr	r0, [sp, #4]
 800317e:	f7ff fd8d 	bl	8002c9c <zcl_reporting_reset_defaults>
 8003182:	e004      	b.n	800318e <??ZbZclHandleConfigReport_25>

08003184 <??ZbZclHandleConfigReport_26>:
 8003184:	aa06      	add	r2, sp, #24
 8003186:	4651      	mov	r1, sl
 8003188:	9801      	ldr	r0, [sp, #4]
 800318a:	f7ff fd6c 	bl	8002c66 <zcl_reporting_config_attr_defaults>

0800318e <??ZbZclHandleConfigReport_25>:
 800318e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8003192:	f8da 1008 	ldr.w	r1, [sl, #8]
 8003196:	7889      	ldrb	r1, [r1, #2]
 8003198:	4288      	cmp	r0, r1
 800319a:	d003      	beq.n	80031a4 <??ZbZclHandleConfigReport_27>
 800319c:	208d      	movs	r0, #141	; 0x8d
 800319e:	f88d 0000 	strb.w	r0, [sp]
 80031a2:	e079      	b.n	8003298 <??ZbZclHandleConfigReport_15>

080031a4 <??ZbZclHandleConfigReport_27>:
 80031a4:	f1b8 0f00 	cmp.w	r8, #0
 80031a8:	d021      	beq.n	80031ee <??ZbZclHandleConfigReport_28>
 80031aa:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 80031ae:	f8a8 0020 	strh.w	r0, [r8, #32]
 80031b2:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 80031b6:	f8a8 0022 	strh.w	r0, [r8, #34]	; 0x22
 80031ba:	4648      	mov	r0, r9
 80031bc:	b2c0      	uxtb	r0, r0
 80031be:	2800      	cmp	r0, #0
 80031c0:	d00c      	beq.n	80031dc <??ZbZclHandleConfigReport_29>
 80031c2:	a806      	add	r0, sp, #24
 80031c4:	f7ff fdcc 	bl	8002d60 <zcl_reporting_epsilon_check>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d103      	bne.n	80031d4 <??ZbZclHandleConfigReport_30>
 80031cc:	2085      	movs	r0, #133	; 0x85
 80031ce:	f88d 0000 	strb.w	r0, [sp]
 80031d2:	e061      	b.n	8003298 <??ZbZclHandleConfigReport_15>

080031d4 <??ZbZclHandleConfigReport_30>:
 80031d4:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 80031d8:	ed88 0b0a 	vstr	d0, [r8, #40]	; 0x28

080031dc <??ZbZclHandleConfigReport_29>:
 80031dc:	9801      	ldr	r0, [sp, #4]
 80031de:	f00f f837 	bl	8012250 <ZbZclUptime>
 80031e2:	f8c8 0010 	str.w	r0, [r8, #16]
 80031e6:	2001      	movs	r0, #1
 80031e8:	f88d 0002 	strb.w	r0, [sp, #2]
 80031ec:	e6bd      	b.n	8002f6a <??ZbZclHandleConfigReport_2>

080031ee <??ZbZclHandleConfigReport_28>:
 80031ee:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 80031f2:	4558      	cmp	r0, fp
 80031f4:	f43f aeb9 	beq.w	8002f6a <??ZbZclHandleConfigReport_2>

080031f8 <??ZbZclHandleConfigReport_31>:
 80031f8:	9408      	str	r4, [sp, #32]
 80031fa:	4648      	mov	r0, r9
 80031fc:	b2c0      	uxtb	r0, r0
 80031fe:	2800      	cmp	r0, #0
 8003200:	d008      	beq.n	8003214 <??ZbZclHandleConfigReport_32>
 8003202:	a806      	add	r0, sp, #24
 8003204:	f7ff fdac 	bl	8002d60 <zcl_reporting_epsilon_check>
 8003208:	2800      	cmp	r0, #0
 800320a:	d108      	bne.n	800321e <??ZbZclHandleConfigReport_33>
 800320c:	2085      	movs	r0, #133	; 0x85
 800320e:	f88d 0000 	strb.w	r0, [sp]
 8003212:	e041      	b.n	8003298 <??ZbZclHandleConfigReport_15>

08003214 <??ZbZclHandleConfigReport_32>:
 8003214:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 8003218:	a806      	add	r0, sp, #24
 800321a:	f7ff fd74 	bl	8002d06 <zcl_reporting_epsilon_default>

0800321e <??ZbZclHandleConfigReport_33>:
 800321e:	2008      	movs	r0, #8
 8003220:	9015      	str	r0, [sp, #84]	; 0x54
 8003222:	a810      	add	r0, sp, #64	; 0x40
 8003224:	9014      	str	r0, [sp, #80]	; 0x50
 8003226:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 800322a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800322c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800322e:	4658      	mov	r0, fp
 8003230:	f011 fcdd 	bl	8014bee <__aeabi_memcpy>
 8003234:	a906      	add	r1, sp, #24
 8003236:	0020      	movs	r0, r4
 8003238:	f7ff fbf5 	bl	8002a26 <zcl_reporting_save_curr_val>
 800323c:	f88d 0000 	strb.w	r0, [sp]
 8003240:	f89d 0000 	ldrb.w	r0, [sp]
 8003244:	2800      	cmp	r0, #0
 8003246:	d127      	bne.n	8003298 <??ZbZclHandleConfigReport_15>

08003248 <??ZbZclHandleConfigReport_34>:
 8003248:	a906      	add	r1, sp, #24
 800324a:	0020      	movs	r0, r4
 800324c:	f7ff fc5e 	bl	8002b0c <zcl_reporting_create_new>
 8003250:	2800      	cmp	r0, #0
 8003252:	d103      	bne.n	800325c <??ZbZclHandleConfigReport_35>
 8003254:	2189      	movs	r1, #137	; 0x89
 8003256:	f88d 1000 	strb.w	r1, [sp]
 800325a:	e01d      	b.n	8003298 <??ZbZclHandleConfigReport_15>

0800325c <??ZbZclHandleConfigReport_35>:
 800325c:	2101      	movs	r1, #1
 800325e:	f88d 1002 	strb.w	r1, [sp, #2]
 8003262:	e682      	b.n	8002f6a <??ZbZclHandleConfigReport_2>

08003264 <??ZbZclHandleConfigReport_6>:
 8003264:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003268:	2801      	cmp	r0, #1
 800326a:	d10e      	bne.n	800328a <??ZbZclHandleConfigReport_36>
 800326c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 800326e:	1cb1      	adds	r1, r6, #2
 8003270:	4288      	cmp	r0, r1
 8003272:	d206      	bcs.n	8003282 <??ZbZclHandleConfigReport_37>
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	9a48      	ldr	r2, [sp, #288]	; 0x120
 8003278:	0029      	movs	r1, r5
 800327a:	0020      	movs	r0, r4
 800327c:	f00f f915 	bl	80124aa <ZbZclSendDefaultResponse>
 8003280:	e0a1      	b.n	80033c6 <??ZbZclHandleConfigReport_3>

08003282 <??ZbZclHandleConfigReport_37>:
 8003282:	208c      	movs	r0, #140	; 0x8c
 8003284:	f88d 0000 	strb.w	r0, [sp]
 8003288:	e006      	b.n	8003298 <??ZbZclHandleConfigReport_15>

0800328a <??ZbZclHandleConfigReport_36>:
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	9a48      	ldr	r2, [sp, #288]	; 0x120
 800328e:	0029      	movs	r1, r5
 8003290:	0020      	movs	r0, r4
 8003292:	f00f f90a 	bl	80124aa <ZbZclSendDefaultResponse>
 8003296:	e096      	b.n	80033c6 <??ZbZclHandleConfigReport_3>

08003298 <??ZbZclHandleConfigReport_15>:
 8003298:	f89d 0000 	ldrb.w	r0, [sp]
 800329c:	f88d 0003 	strb.w	r0, [sp, #3]
 80032a0:	1d38      	adds	r0, r7, #4
 80032a2:	2837      	cmp	r0, #55	; 0x37
 80032a4:	d210      	bcs.n	80032c8 <??ZbZclHandleConfigReport_4>

080032a6 <??ZbZclHandleConfigReport_38>:
 80032a6:	a83a      	add	r0, sp, #232	; 0xe8
 80032a8:	f89d 1000 	ldrb.w	r1, [sp]
 80032ac:	55c1      	strb	r1, [r0, r7]
 80032ae:	1c7f      	adds	r7, r7, #1
 80032b0:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80032b4:	55c1      	strb	r1, [r0, r7]
 80032b6:	1c7f      	adds	r7, r7, #1
 80032b8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80032bc:	a83a      	add	r0, sp, #232	; 0xe8
 80032be:	4438      	add	r0, r7
 80032c0:	f7fc ffb8 	bl	8000234 <putle16>
 80032c4:	1cbf      	adds	r7, r7, #2
 80032c6:	e650      	b.n	8002f6a <??ZbZclHandleConfigReport_2>

080032c8 <??ZbZclHandleConfigReport_4>:
 80032c8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d105      	bne.n	80032dc <??ZbZclHandleConfigReport_39>
 80032d0:	2000      	movs	r0, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	aa3a      	add	r2, sp, #232	; 0xe8
 80032d6:	5411      	strb	r1, [r2, r0]
 80032d8:	1c40      	adds	r0, r0, #1
 80032da:	0007      	movs	r7, r0

080032dc <??ZbZclHandleConfigReport_39>:
 80032dc:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d127      	bne.n	8003334 <??ZbZclHandleConfigReport_40>
 80032e4:	f05f 0920 	movs.w	r9, #32
 80032e8:	f05f 0800 	movs.w	r8, #0
 80032ec:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 80032f0:	4642      	mov	r2, r8
 80032f2:	4649      	mov	r1, r9
 80032f4:	4650      	mov	r0, sl
 80032f6:	f002 fce1 	bl	8005cbc <__aeabi_memset>
 80032fa:	9801      	ldr	r0, [sp, #4]
 80032fc:	f00e f9d6 	bl	80116ac <ZbExtendedAddress>
 8003300:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8003304:	8868      	ldrh	r0, [r5, #2]
 8003306:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
 800330a:	89a0      	ldrh	r0, [r4, #12]
 800330c:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
 8003310:	2003      	movs	r0, #3
 8003312:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
 8003316:	8a68      	ldrh	r0, [r5, #18]
 8003318:	f8ad 0072 	strh.w	r0, [sp, #114]	; 0x72
 800331c:	8ae8      	ldrh	r0, [r5, #22]
 800331e:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
 8003322:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8003326:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800332a:	aa30      	add	r2, sp, #192	; 0xc0
 800332c:	a918      	add	r1, sp, #96	; 0x60
 800332e:	9801      	ldr	r0, [sp, #4]
 8003330:	f00e fbec 	bl	8011b0c <ZbApsmeBindReq>

08003334 <??ZbZclHandleConfigReport_40>:
 8003334:	2200      	movs	r2, #0
 8003336:	a924      	add	r1, sp, #144	; 0x90
 8003338:	0020      	movs	r0, r4
 800333a:	f000 fd56 	bl	8003dea <ZbZclClusterInitApsdeReq>
 800333e:	a824      	add	r0, sp, #144	; 0x90
 8003340:	f115 0110 	adds.w	r1, r5, #16
 8003344:	2210      	movs	r2, #16
 8003346:	f011 fc52 	bl	8014bee <__aeabi_memcpy>
 800334a:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 800334e:	f000 fce4 	bl	8003d1a <ZbZclTxOptsFromSecurityStatus>
 8003352:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 8003356:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 800335a:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 800335e:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
 8003362:	2001      	movs	r0, #1
 8003364:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
 8003368:	2000      	movs	r0, #0
 800336a:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
 800336e:	a816      	add	r0, sp, #88	; 0x58
 8003370:	9020      	str	r0, [sp, #128]	; 0x80
 8003372:	a820      	add	r0, sp, #128	; 0x80
 8003374:	9905      	ldr	r1, [sp, #20]
 8003376:	6041      	str	r1, [r0, #4]
 8003378:	a93a      	add	r1, sp, #232	; 0xe8
 800337a:	6081      	str	r1, [r0, #8]
 800337c:	60c7      	str	r7, [r0, #12]
 800337e:	a820      	add	r0, sp, #128	; 0x80
 8003380:	902a      	str	r0, [sp, #168]	; 0xa8
 8003382:	2002      	movs	r0, #2
 8003384:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 8003388:	2300      	movs	r3, #0
 800338a:	2200      	movs	r2, #0
 800338c:	a924      	add	r1, sp, #144	; 0x90
 800338e:	9801      	ldr	r0, [sp, #4]
 8003390:	f00e fa90 	bl	80118b4 <ZbApsdeDataReqCallback>
 8003394:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8003398:	2800      	cmp	r0, #0
 800339a:	d014      	beq.n	80033c6 <??ZbZclHandleConfigReport_3>
 800339c:	2301      	movs	r3, #1
 800339e:	f10d 0201 	add.w	r2, sp, #1
 80033a2:	f240 410c 	movw	r1, #1036	; 0x40c
 80033a6:	9801      	ldr	r0, [sp, #4]
 80033a8:	f00e fe32 	bl	8012010 <ZbNwkGet>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d002      	beq.n	80033b6 <??ZbZclHandleConfigReport_42>
 80033b0:	2000      	movs	r0, #0
 80033b2:	f88d 0001 	strb.w	r0, [sp, #1]

080033b6 <??ZbZclHandleConfigReport_42>:
 80033b6:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d103      	bne.n	80033c6 <??ZbZclHandleConfigReport_3>
 80033be:	21c8      	movs	r1, #200	; 0xc8
 80033c0:	0020      	movs	r0, r4
 80033c2:	f7fe ff88 	bl	80022d6 <zcl_report_kick>

080033c6 <??ZbZclHandleConfigReport_3>:
 80033c6:	b049      	add	sp, #292	; 0x124
 80033c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080033cc <ZbZclHandleReadReport>:
 80033cc:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d0:	b09a      	sub	sp, #104	; 0x68
 80033d2:	4680      	mov	r8, r0
 80033d4:	4691      	mov	r9, r2
 80033d6:	f05f 0a00 	movs.w	sl, #0
 80033da:	2300      	movs	r3, #0
 80033dc:	a28c      	add	r2, pc, #560	; (adr r2, 8003610 <??DataTable10>)
 80033de:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 80033e2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80033e6:	f00f f9db 	bl	80127a0 <zb_heap_alloc>
 80033ea:	0007      	movs	r7, r0
 80033ec:	2f00      	cmp	r7, #0
 80033ee:	d106      	bne.n	80033fe <??ZbZclHandleReadReport_0>
 80033f0:	2389      	movs	r3, #137	; 0x89
 80033f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80033f4:	4649      	mov	r1, r9
 80033f6:	4640      	mov	r0, r8
 80033f8:	f00f f857 	bl	80124aa <ZbZclSendDefaultResponse>
 80033fc:	e105      	b.n	800360a <??ZbZclHandleReadReport_1>

080033fe <??ZbZclHandleReadReport_0>:
 80033fe:	2408      	movs	r4, #8
 8003400:	2500      	movs	r5, #0
 8003402:	ae01      	add	r6, sp, #4
 8003404:	002a      	movs	r2, r5
 8003406:	0021      	movs	r1, r4
 8003408:	0030      	movs	r0, r6
 800340a:	f002 fc57 	bl	8005cbc <__aeabi_memset>
 800340e:	2000      	movs	r0, #0
 8003410:	f88d 0004 	strb.w	r0, [sp, #4]
 8003414:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003416:	7840      	ldrb	r0, [r0, #1]
 8003418:	f88d 0005 	strb.w	r0, [sp, #5]
 800341c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800341e:	7880      	ldrb	r0, [r0, #2]
 8003420:	2800      	cmp	r0, #0
 8003422:	d103      	bne.n	800342c <??ZbZclHandleReadReport_2>
 8003424:	2001      	movs	r0, #1
 8003426:	f88d 0006 	strb.w	r0, [sp, #6]
 800342a:	e002      	b.n	8003432 <??ZbZclHandleReadReport_3>

0800342c <??ZbZclHandleReadReport_2>:
 800342c:	2000      	movs	r0, #0
 800342e:	f88d 0006 	strb.w	r0, [sp, #6]

08003432 <??ZbZclHandleReadReport_3>:
 8003432:	2001      	movs	r0, #1
 8003434:	f88d 0007 	strb.w	r0, [sp, #7]
 8003438:	981a      	ldr	r0, [sp, #104]	; 0x68
 800343a:	8880      	ldrh	r0, [r0, #4]
 800343c:	f8ad 0008 	strh.w	r0, [sp, #8]
 8003440:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003442:	7980      	ldrb	r0, [r0, #6]
 8003444:	f88d 000a 	strb.w	r0, [sp, #10]
 8003448:	2009      	movs	r0, #9
 800344a:	f88d 000b 	strb.w	r0, [sp, #11]
 800344e:	2205      	movs	r2, #5
 8003450:	0039      	movs	r1, r7
 8003452:	a801      	add	r0, sp, #4
 8003454:	f001 fa22 	bl	800489c <ZbZclAppendHeader>
 8003458:	0004      	movs	r4, r0
 800345a:	2c00      	cmp	r4, #0
 800345c:	d506      	bpl.n	800346c <??ZbZclHandleReadReport_4>
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003462:	4649      	mov	r1, r9
 8003464:	4640      	mov	r0, r8
 8003466:	f00f f820 	bl	80124aa <ZbZclSendDefaultResponse>
 800346a:	e0ce      	b.n	800360a <??ZbZclHandleReadReport_1>

0800346c <??ZbZclHandleReadReport_4>:
 800346c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 8003470:	4582      	cmp	sl, r0
 8003472:	f080 80a1 	bcs.w	80035b8 <??ZbZclHandleReadReport_5>
 8003476:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 800347a:	f11a 0103 	adds.w	r1, sl, #3
 800347e:	4288      	cmp	r0, r1
 8003480:	d206      	bcs.n	8003490 <??ZbZclHandleReadReport_6>
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003486:	4649      	mov	r1, r9
 8003488:	4640      	mov	r0, r8
 800348a:	f00f f80e 	bl	80124aa <ZbZclSendDefaultResponse>
 800348e:	e0bc      	b.n	800360a <??ZbZclHandleReadReport_1>

08003490 <??ZbZclHandleReadReport_6>:
 8003490:	4650      	mov	r0, sl
 8003492:	f110 0a01 	adds.w	sl, r0, #1
 8003496:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 800349a:	5c08      	ldrb	r0, [r1, r0]
 800349c:	2800      	cmp	r0, #0
 800349e:	d003      	beq.n	80034a8 <??ZbZclHandleReadReport_7>
 80034a0:	2001      	movs	r0, #1
 80034a2:	f88d 0000 	strb.w	r0, [sp]
 80034a6:	e002      	b.n	80034ae <??ZbZclHandleReadReport_8>

080034a8 <??ZbZclHandleReadReport_7>:
 80034a8:	2000      	movs	r0, #0
 80034aa:	f88d 0000 	strb.w	r0, [sp]

080034ae <??ZbZclHandleReadReport_8>:
 80034ae:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 80034b2:	4450      	add	r0, sl
 80034b4:	f7fc fe72 	bl	800019c <pletoh16>
 80034b8:	f8ad 0002 	strh.w	r0, [sp, #2]
 80034bc:	f11a 0a02 	adds.w	sl, sl, #2
 80034c0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80034c4:	4640      	mov	r0, r8
 80034c6:	f7fc ff38 	bl	800033a <ZbZclAttrFind>
 80034ca:	0006      	movs	r6, r0
 80034cc:	2e00      	cmp	r6, #0
 80034ce:	d102      	bne.n	80034d6 <??ZbZclHandleReadReport_9>
 80034d0:	f05f 0b86 	movs.w	fp, #134	; 0x86
 80034d4:	e05c      	b.n	8003590 <??ZbZclHandleReadReport_10>

080034d6 <??ZbZclHandleReadReport_9>:
 80034d6:	68b0      	ldr	r0, [r6, #8]
 80034d8:	7900      	ldrb	r0, [r0, #4]
 80034da:	0780      	lsls	r0, r0, #30
 80034dc:	d402      	bmi.n	80034e4 <??ZbZclHandleReadReport_11>
 80034de:	f05f 0b8c 	movs.w	fp, #140	; 0x8c
 80034e2:	e055      	b.n	8003590 <??ZbZclHandleReadReport_10>

080034e4 <??ZbZclHandleReadReport_11>:
 80034e4:	f89d 2000 	ldrb.w	r2, [sp]
 80034e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80034ec:	4640      	mov	r0, r8
 80034ee:	f7ff fa48 	bl	8002982 <zcl_reporting_find>
 80034f2:	0005      	movs	r5, r0
 80034f4:	2d00      	cmp	r5, #0
 80034f6:	d102      	bne.n	80034fe <??ZbZclHandleReadReport_12>
 80034f8:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 80034fc:	e048      	b.n	8003590 <??ZbZclHandleReadReport_10>

080034fe <??ZbZclHandleReadReport_12>:
 80034fe:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 8003500:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003504:	4288      	cmp	r0, r1
 8003506:	d102      	bne.n	800350e <??ZbZclHandleReadReport_13>
 8003508:	f05f 0b8b 	movs.w	fp, #139	; 0x8b
 800350c:	e040      	b.n	8003590 <??ZbZclHandleReadReport_10>

0800350e <??ZbZclHandleReadReport_13>:
 800350e:	2020      	movs	r0, #32
 8003510:	9005      	str	r0, [sp, #20]
 8003512:	2000      	movs	r0, #0
 8003514:	9004      	str	r0, [sp, #16]
 8003516:	f10d 0b18 	add.w	fp, sp, #24
 800351a:	9a04      	ldr	r2, [sp, #16]
 800351c:	9905      	ldr	r1, [sp, #20]
 800351e:	4658      	mov	r0, fp
 8003520:	f002 fbcc 	bl	8005cbc <__aeabi_memset>
 8003524:	f89d 0000 	ldrb.w	r0, [sp]
 8003528:	2800      	cmp	r0, #0
 800352a:	d003      	beq.n	8003534 <??ZbZclHandleReadReport_14>
 800352c:	2001      	movs	r0, #1
 800352e:	f88d 0018 	strb.w	r0, [sp, #24]
 8003532:	e002      	b.n	800353a <??ZbZclHandleReadReport_15>

08003534 <??ZbZclHandleReadReport_14>:
 8003534:	2000      	movs	r0, #0
 8003536:	f88d 0018 	strb.w	r0, [sp, #24]

0800353a <??ZbZclHandleReadReport_15>:
 800353a:	89a8      	ldrh	r0, [r5, #12]
 800353c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8003540:	7ba8      	ldrb	r0, [r5, #14]
 8003542:	f88d 001c 	strb.w	r0, [sp, #28]
 8003546:	8c28      	ldrh	r0, [r5, #32]
 8003548:	f8ad 001e 	strh.w	r0, [sp, #30]
 800354c:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 800354e:	f8ad 0020 	strh.w	r0, [sp, #32]
 8003552:	ed95 0b0a 	vldr	d0, [r5, #40]	; 0x28
 8003556:	ed8d 0b0a 	vstr	d0, [sp, #40]	; 0x28
 800355a:	2000      	movs	r0, #0
 800355c:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8003560:	2000      	movs	r0, #0
 8003562:	5538      	strb	r0, [r7, r4]
 8003564:	1c64      	adds	r4, r4, #1
 8003566:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 800356a:	0020      	movs	r0, r4
 800356c:	b280      	uxth	r0, r0
 800356e:	1a12      	subs	r2, r2, r0
 8003570:	eb07 0104 	add.w	r1, r7, r4
 8003574:	a806      	add	r0, sp, #24
 8003576:	f000 f895 	bl	80036a4 <zcl_append_report_config_record>
 800357a:	9003      	str	r0, [sp, #12]
 800357c:	9803      	ldr	r0, [sp, #12]
 800357e:	2800      	cmp	r0, #0
 8003580:	d503      	bpl.n	800358a <??ZbZclHandleReadReport_16>
 8003582:	1e64      	subs	r4, r4, #1
 8003584:	f05f 0b01 	movs.w	fp, #1
 8003588:	e002      	b.n	8003590 <??ZbZclHandleReadReport_10>

0800358a <??ZbZclHandleReadReport_16>:
 800358a:	9803      	ldr	r0, [sp, #12]
 800358c:	1904      	adds	r4, r0, r4
 800358e:	e76d      	b.n	800346c <??ZbZclHandleReadReport_4>

08003590 <??ZbZclHandleReadReport_10>:
 8003590:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 8003594:	1ce1      	adds	r1, r4, #3
 8003596:	4288      	cmp	r0, r1
 8003598:	d30e      	bcc.n	80035b8 <??ZbZclHandleReadReport_5>

0800359a <??ZbZclHandleReadReport_17>:
 800359a:	f807 b004 	strb.w	fp, [r7, r4]
 800359e:	1c64      	adds	r4, r4, #1
 80035a0:	f89d 0000 	ldrb.w	r0, [sp]
 80035a4:	5538      	strb	r0, [r7, r4]
 80035a6:	1c64      	adds	r4, r4, #1
 80035a8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80035ac:	eb07 0004 	add.w	r0, r7, r4
 80035b0:	f7fc fe40 	bl	8000234 <putle16>
 80035b4:	1ca4      	adds	r4, r4, #2
 80035b6:	e759      	b.n	800346c <??ZbZclHandleReadReport_4>

080035b8 <??ZbZclHandleReadReport_5>:
 80035b8:	464a      	mov	r2, r9
 80035ba:	a90e      	add	r1, sp, #56	; 0x38
 80035bc:	4640      	mov	r0, r8
 80035be:	f000 fc14 	bl	8003dea <ZbZclClusterInitApsdeReq>
 80035c2:	a80e      	add	r0, sp, #56	; 0x38
 80035c4:	f119 0110 	adds.w	r1, r9, #16
 80035c8:	2210      	movs	r2, #16
 80035ca:	f011 fb10 	bl	8014bee <__aeabi_memcpy>
 80035ce:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 80035d2:	f000 fba2 	bl	8003d1a <ZbZclTxOptsFromSecurityStatus>
 80035d6:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80035da:	2001      	movs	r0, #1
 80035dc:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
 80035e0:	2000      	movs	r0, #0
 80035e2:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
 80035e6:	9714      	str	r7, [sp, #80]	; 0x50
 80035e8:	0020      	movs	r0, r4
 80035ea:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80035ee:	2300      	movs	r3, #0
 80035f0:	2200      	movs	r2, #0
 80035f2:	a90e      	add	r1, sp, #56	; 0x38
 80035f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80035f8:	f00e f95c 	bl	80118b4 <ZbApsdeDataReqCallback>
 80035fc:	2300      	movs	r3, #0
 80035fe:	a204      	add	r2, pc, #16	; (adr r2, 8003610 <??DataTable10>)
 8003600:	0039      	movs	r1, r7
 8003602:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003606:	f00f f8da 	bl	80127be <zb_heap_free>

0800360a <??ZbZclHandleReadReport_1>:
 800360a:	b01b      	add	sp, #108	; 0x6c
 800360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003610 <??DataTable10>:
 8003610:	0000 0000                                   ....

08003614 <ZbZclHandleReportAttr>:
 8003614:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003618:	0004      	movs	r4, r0
 800361a:	000d      	movs	r5, r1
 800361c:	0016      	movs	r6, r2
 800361e:	f05f 0a00 	movs.w	sl, #0
 8003622:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003624:	2800      	cmp	r0, #0
 8003626:	d03b      	beq.n	80036a0 <??ZbZclHandleReportAttr_0>

08003628 <??ZbZclHandleReportAttr_1>:
 8003628:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 800362a:	4651      	mov	r1, sl
 800362c:	b289      	uxth	r1, r1
 800362e:	1cc9      	adds	r1, r1, #3
 8003630:	4288      	cmp	r0, r1
 8003632:	d335      	bcc.n	80036a0 <??ZbZclHandleReportAttr_0>

08003634 <??ZbZclHandleReportAttr_3>:
 8003634:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003636:	4651      	mov	r1, sl
 8003638:	b289      	uxth	r1, r1
 800363a:	4408      	add	r0, r1
 800363c:	f7fc fdae 	bl	800019c <pletoh16>
 8003640:	0007      	movs	r7, r0
 8003642:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003644:	4651      	mov	r1, sl
 8003646:	b289      	uxth	r1, r1
 8003648:	4408      	add	r0, r1
 800364a:	7880      	ldrb	r0, [r0, #2]
 800364c:	4680      	mov	r8, r0
 800364e:	f11a 0a03 	adds.w	sl, sl, #3
 8003652:	2300      	movs	r3, #0
 8003654:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8003656:	4650      	mov	r0, sl
 8003658:	b280      	uxth	r0, r0
 800365a:	1a12      	subs	r2, r2, r0
 800365c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800365e:	4651      	mov	r1, sl
 8003660:	b289      	uxth	r1, r1
 8003662:	4401      	add	r1, r0
 8003664:	4640      	mov	r0, r8
 8003666:	b2c0      	uxtb	r0, r0
 8003668:	f7fd fd93 	bl	8001192 <ZbZclAttrParseLength>
 800366c:	4681      	mov	r9, r0
 800366e:	f1b9 0f00 	cmp.w	r9, #0
 8003672:	d415      	bmi.n	80036a0 <??ZbZclHandleReportAttr_0>

08003674 <??ZbZclHandleReportAttr_4>:
 8003674:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8003676:	ebb0 000a 	subs.w	r0, r0, sl
 800367a:	b280      	uxth	r0, r0
 800367c:	9001      	str	r0, [sp, #4]
 800367e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003680:	4651      	mov	r1, sl
 8003682:	b289      	uxth	r1, r1
 8003684:	4408      	add	r0, r1
 8003686:	9000      	str	r0, [sp, #0]
 8003688:	4643      	mov	r3, r8
 800368a:	b2db      	uxtb	r3, r3
 800368c:	003a      	movs	r2, r7
 800368e:	b292      	uxth	r2, r2
 8003690:	0031      	movs	r1, r6
 8003692:	0020      	movs	r0, r4
 8003694:	f8d4 c05c 	ldr.w	ip, [r4, #92]	; 0x5c
 8003698:	47e0      	blx	ip
 800369a:	eb19 0a0a 	adds.w	sl, r9, sl
 800369e:	e7c3      	b.n	8003628 <??ZbZclHandleReportAttr_1>

080036a0 <??ZbZclHandleReportAttr_0>:
 80036a0:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

080036a4 <zcl_append_report_config_record>:
 80036a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a8:	0005      	movs	r5, r0
 80036aa:	000e      	movs	r6, r1
 80036ac:	4690      	mov	r8, r2
 80036ae:	2700      	movs	r7, #0
 80036b0:	7828      	ldrb	r0, [r5, #0]
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d003      	beq.n	80036be <??zcl_append_report_config_record_0>
 80036b6:	2801      	cmp	r0, #1
 80036b8:	f000 80f4 	beq.w	80038a4 <??zcl_append_report_config_record_1>
 80036bc:	e108      	b.n	80038d0 <??zcl_append_report_config_record_2>

080036be <??zcl_append_report_config_record_0>:
 80036be:	7928      	ldrb	r0, [r5, #4]
 80036c0:	f001 fede 	bl	8005480 <ZbZclAttrIsFloat>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d002      	beq.n	80036ce <??zcl_append_report_config_record_3>
 80036c8:	2001      	movs	r0, #1
 80036ca:	4681      	mov	r9, r0
 80036cc:	e009      	b.n	80036e2 <??zcl_append_report_config_record_4>

080036ce <??zcl_append_report_config_record_3>:
 80036ce:	7928      	ldrb	r0, [r5, #4]
 80036d0:	f7fd fe10 	bl	80012f4 <ZbZclAttrIsAnalog>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d002      	beq.n	80036de <??zcl_append_report_config_record_5>
 80036d8:	2001      	movs	r0, #1
 80036da:	4681      	mov	r9, r0
 80036dc:	e001      	b.n	80036e2 <??zcl_append_report_config_record_4>

080036de <??zcl_append_report_config_record_5>:
 80036de:	2000      	movs	r0, #0
 80036e0:	4681      	mov	r9, r0

080036e2 <??zcl_append_report_config_record_4>:
 80036e2:	f1b8 0f08 	cmp.w	r8, #8
 80036e6:	d202      	bcs.n	80036ee <??zcl_append_report_config_record_6>
 80036e8:	f05f 30ff 	movs.w	r0, #4294967295
 80036ec:	e0f3      	b.n	80038d6 <??zcl_append_report_config_record_7>

080036ee <??zcl_append_report_config_record_6>:
 80036ee:	7828      	ldrb	r0, [r5, #0]
 80036f0:	55f0      	strb	r0, [r6, r7]
 80036f2:	1c7f      	adds	r7, r7, #1
 80036f4:	8869      	ldrh	r1, [r5, #2]
 80036f6:	eb06 0007 	add.w	r0, r6, r7
 80036fa:	f7fc fd9b 	bl	8000234 <putle16>
 80036fe:	1cbf      	adds	r7, r7, #2
 8003700:	7928      	ldrb	r0, [r5, #4]
 8003702:	55f0      	strb	r0, [r6, r7]
 8003704:	1c7f      	adds	r7, r7, #1
 8003706:	88e9      	ldrh	r1, [r5, #6]
 8003708:	eb06 0007 	add.w	r0, r6, r7
 800370c:	f7fc fd92 	bl	8000234 <putle16>
 8003710:	1cbf      	adds	r7, r7, #2
 8003712:	8929      	ldrh	r1, [r5, #8]
 8003714:	eb06 0007 	add.w	r0, r6, r7
 8003718:	f7fc fd8c 	bl	8000234 <putle16>
 800371c:	1cbf      	adds	r7, r7, #2
 800371e:	4648      	mov	r0, r9
 8003720:	b2c0      	uxtb	r0, r0
 8003722:	2800      	cmp	r0, #0
 8003724:	f000 80bd 	beq.w	80038a2 <??zcl_append_report_config_record_8>
 8003728:	7928      	ldrb	r0, [r5, #4]
 800372a:	f7fd fca7 	bl	800107c <ZbZclAttrTypeLength>
 800372e:	0004      	movs	r4, r0
 8003730:	2c00      	cmp	r4, #0
 8003732:	d101      	bne.n	8003738 <??zcl_append_report_config_record_9>
 8003734:	2001      	movs	r0, #1
 8003736:	e0ce      	b.n	80038d6 <??zcl_append_report_config_record_7>

08003738 <??zcl_append_report_config_record_9>:
 8003738:	2c01      	cmp	r4, #1
 800373a:	d00e      	beq.n	800375a <??zcl_append_report_config_record_10>
 800373c:	f0c0 80af 	bcc.w	800389e <??zcl_append_report_config_record_11>
 8003740:	2c03      	cmp	r4, #3
 8003742:	d02f      	beq.n	80037a4 <??zcl_append_report_config_record_12>
 8003744:	d319      	bcc.n	800377a <??zcl_append_report_config_record_13>
 8003746:	2c05      	cmp	r4, #5
 8003748:	d054      	beq.n	80037f4 <??zcl_append_report_config_record_14>
 800374a:	d33f      	bcc.n	80037cc <??zcl_append_report_config_record_15>
 800374c:	2c07      	cmp	r4, #7
 800374e:	d07c      	beq.n	800384a <??zcl_append_report_config_record_16>
 8003750:	d365      	bcc.n	800381e <??zcl_append_report_config_record_17>
 8003752:	2c08      	cmp	r4, #8
 8003754:	f000 808e 	beq.w	8003874 <??zcl_append_report_config_record_18>
 8003758:	e0a1      	b.n	800389e <??zcl_append_report_config_record_11>

0800375a <??zcl_append_report_config_record_10>:
 800375a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800375e:	2201      	movs	r2, #1
 8003760:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <??DataTable11_1>)
 8003762:	f002 ff6d 	bl	8006640 <__aeabi_cdrcmple>
 8003766:	d801      	bhi.n	800376c <??zcl_append_report_config_record_19>
 8003768:	2001      	movs	r0, #1
 800376a:	e0b4      	b.n	80038d6 <??zcl_append_report_config_record_7>

0800376c <??zcl_append_report_config_record_19>:
 800376c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003770:	f002 ffa8 	bl	80066c4 <__aeabi_d2iz>
 8003774:	55f0      	strb	r0, [r6, r7]
 8003776:	1c7f      	adds	r7, r7, #1
 8003778:	e093      	b.n	80038a2 <??zcl_append_report_config_record_8>

0800377a <??zcl_append_report_config_record_13>:
 800377a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800377e:	2201      	movs	r2, #1
 8003780:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <??DataTable11_2>)
 8003782:	f002 ff5d 	bl	8006640 <__aeabi_cdrcmple>
 8003786:	d801      	bhi.n	800378c <??zcl_append_report_config_record_20>
 8003788:	2001      	movs	r0, #1
 800378a:	e0a4      	b.n	80038d6 <??zcl_append_report_config_record_7>

0800378c <??zcl_append_report_config_record_20>:
 800378c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003790:	f002 ff98 	bl	80066c4 <__aeabi_d2iz>
 8003794:	0001      	movs	r1, r0
 8003796:	b289      	uxth	r1, r1
 8003798:	eb06 0007 	add.w	r0, r6, r7
 800379c:	f7fc fd4a 	bl	8000234 <putle16>
 80037a0:	1cbf      	adds	r7, r7, #2
 80037a2:	e07e      	b.n	80038a2 <??zcl_append_report_config_record_8>

080037a4 <??zcl_append_report_config_record_12>:
 80037a4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80037a8:	4a4f      	ldr	r2, [pc, #316]	; (80038e8 <??DataTable11_3>)
 80037aa:	4b50      	ldr	r3, [pc, #320]	; (80038ec <??DataTable11_4>)
 80037ac:	f002 ff48 	bl	8006640 <__aeabi_cdrcmple>
 80037b0:	d801      	bhi.n	80037b6 <??zcl_append_report_config_record_21>
 80037b2:	2001      	movs	r0, #1
 80037b4:	e08f      	b.n	80038d6 <??zcl_append_report_config_record_7>

080037b6 <??zcl_append_report_config_record_21>:
 80037b6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80037ba:	f002 ffab 	bl	8006714 <__aeabi_d2uiz>
 80037be:	0001      	movs	r1, r0
 80037c0:	eb06 0007 	add.w	r0, r6, r7
 80037c4:	f7fc fd3c 	bl	8000240 <putle24>
 80037c8:	1cff      	adds	r7, r7, #3
 80037ca:	e06a      	b.n	80038a2 <??zcl_append_report_config_record_8>

080037cc <??zcl_append_report_config_record_15>:
 80037cc:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80037d0:	4a47      	ldr	r2, [pc, #284]	; (80038f0 <??DataTable11_5>)
 80037d2:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <??DataTable11_6>)
 80037d4:	f002 ff34 	bl	8006640 <__aeabi_cdrcmple>
 80037d8:	d801      	bhi.n	80037de <??zcl_append_report_config_record_22>
 80037da:	2001      	movs	r0, #1
 80037dc:	e07b      	b.n	80038d6 <??zcl_append_report_config_record_7>

080037de <??zcl_append_report_config_record_22>:
 80037de:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80037e2:	f002 ff97 	bl	8006714 <__aeabi_d2uiz>
 80037e6:	0001      	movs	r1, r0
 80037e8:	eb06 0007 	add.w	r0, r6, r7
 80037ec:	f7fc fd34 	bl	8000258 <putle32>
 80037f0:	1d3f      	adds	r7, r7, #4
 80037f2:	e056      	b.n	80038a2 <??zcl_append_report_config_record_8>

080037f4 <??zcl_append_report_config_record_14>:
 80037f4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80037f8:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <??DataTable11_7>)
 80037fa:	4b40      	ldr	r3, [pc, #256]	; (80038fc <??DataTable11_8>)
 80037fc:	f002 ff20 	bl	8006640 <__aeabi_cdrcmple>
 8003800:	d801      	bhi.n	8003806 <??zcl_append_report_config_record_23>
 8003802:	2001      	movs	r0, #1
 8003804:	e067      	b.n	80038d6 <??zcl_append_report_config_record_7>

08003806 <??zcl_append_report_config_record_23>:
 8003806:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800380a:	f002 ffd3 	bl	80067b4 <__aeabi_d2ulz>
 800380e:	0002      	movs	r2, r0
 8003810:	000b      	movs	r3, r1
 8003812:	eb06 0007 	add.w	r0, r6, r7
 8003816:	f7fc fd2a 	bl	800026e <putle40>
 800381a:	1d7f      	adds	r7, r7, #5
 800381c:	e041      	b.n	80038a2 <??zcl_append_report_config_record_8>

0800381e <??zcl_append_report_config_record_17>:
 800381e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003822:	f07f 021e 	mvns.w	r2, #30
 8003826:	4b36      	ldr	r3, [pc, #216]	; (8003900 <??DataTable11_9>)
 8003828:	f002 ff0a 	bl	8006640 <__aeabi_cdrcmple>
 800382c:	d801      	bhi.n	8003832 <??zcl_append_report_config_record_24>
 800382e:	2001      	movs	r0, #1
 8003830:	e051      	b.n	80038d6 <??zcl_append_report_config_record_7>

08003832 <??zcl_append_report_config_record_24>:
 8003832:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003836:	f002 ffbd 	bl	80067b4 <__aeabi_d2ulz>
 800383a:	0002      	movs	r2, r0
 800383c:	000b      	movs	r3, r1
 800383e:	eb06 0007 	add.w	r0, r6, r7
 8003842:	f7fc fd1e 	bl	8000282 <putle48>
 8003846:	1dbf      	adds	r7, r7, #6
 8003848:	e02b      	b.n	80038a2 <??zcl_append_report_config_record_8>

0800384a <??zcl_append_report_config_record_16>:
 800384a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800384e:	2201      	movs	r2, #1
 8003850:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <??DataTable11_10>)
 8003852:	f002 fef5 	bl	8006640 <__aeabi_cdrcmple>
 8003856:	d801      	bhi.n	800385c <??zcl_append_report_config_record_25>
 8003858:	2001      	movs	r0, #1
 800385a:	e03c      	b.n	80038d6 <??zcl_append_report_config_record_7>

0800385c <??zcl_append_report_config_record_25>:
 800385c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003860:	f002 ffa8 	bl	80067b4 <__aeabi_d2ulz>
 8003864:	0002      	movs	r2, r0
 8003866:	000b      	movs	r3, r1
 8003868:	eb06 0007 	add.w	r0, r6, r7
 800386c:	f7fc fd18 	bl	80002a0 <putle56>
 8003870:	1dff      	adds	r7, r7, #7
 8003872:	e016      	b.n	80038a2 <??zcl_append_report_config_record_8>

08003874 <??zcl_append_report_config_record_18>:
 8003874:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003878:	2201      	movs	r2, #1
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <??DataTable11_11>)
 800387c:	f002 fee0 	bl	8006640 <__aeabi_cdrcmple>
 8003880:	d801      	bhi.n	8003886 <??zcl_append_report_config_record_26>
 8003882:	2001      	movs	r0, #1
 8003884:	e027      	b.n	80038d6 <??zcl_append_report_config_record_7>

08003886 <??zcl_append_report_config_record_26>:
 8003886:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800388a:	f002 ff93 	bl	80067b4 <__aeabi_d2ulz>
 800388e:	0002      	movs	r2, r0
 8003890:	000b      	movs	r3, r1
 8003892:	eb06 0007 	add.w	r0, r6, r7
 8003896:	f7fc fd12 	bl	80002be <putle64>
 800389a:	3708      	adds	r7, #8
 800389c:	e001      	b.n	80038a2 <??zcl_append_report_config_record_8>

0800389e <??zcl_append_report_config_record_11>:
 800389e:	2001      	movs	r0, #1
 80038a0:	e019      	b.n	80038d6 <??zcl_append_report_config_record_7>

080038a2 <??zcl_append_report_config_record_8>:
 80038a2:	e017      	b.n	80038d4 <??zcl_append_report_config_record_27>

080038a4 <??zcl_append_report_config_record_1>:
 80038a4:	f1b8 0f08 	cmp.w	r8, #8
 80038a8:	d202      	bcs.n	80038b0 <??zcl_append_report_config_record_28>
 80038aa:	f05f 30ff 	movs.w	r0, #4294967295
 80038ae:	e012      	b.n	80038d6 <??zcl_append_report_config_record_7>

080038b0 <??zcl_append_report_config_record_28>:
 80038b0:	7828      	ldrb	r0, [r5, #0]
 80038b2:	55f0      	strb	r0, [r6, r7]
 80038b4:	1c7f      	adds	r7, r7, #1
 80038b6:	8869      	ldrh	r1, [r5, #2]
 80038b8:	eb06 0007 	add.w	r0, r6, r7
 80038bc:	f7fc fcba 	bl	8000234 <putle16>
 80038c0:	1cbf      	adds	r7, r7, #2
 80038c2:	8b29      	ldrh	r1, [r5, #24]
 80038c4:	eb06 0007 	add.w	r0, r6, r7
 80038c8:	f7fc fcb4 	bl	8000234 <putle16>
 80038cc:	1cbf      	adds	r7, r7, #2
 80038ce:	e001      	b.n	80038d4 <??zcl_append_report_config_record_27>

080038d0 <??zcl_append_report_config_record_2>:
 80038d0:	2001      	movs	r0, #1
 80038d2:	e000      	b.n	80038d6 <??zcl_append_report_config_record_7>

080038d4 <??zcl_append_report_config_record_27>:
 80038d4:	0038      	movs	r0, r7

080038d6 <??zcl_append_report_config_record_7>:
 80038d6:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080038dc <??DataTable11>:
 80038dc:	0000 3ff0                                   ...?

080038e0 <??DataTable11_1>:
 80038e0:	e000 406f                                   ..o@

080038e4 <??DataTable11_2>:
 80038e4:	ffe0 40ef                                   ...@

080038e8 <??DataTable11_3>:
 80038e8:	0001 e000                                   ....

080038ec <??DataTable11_4>:
 80038ec:	ffff 416f                                   ..oA

080038f0 <??DataTable11_5>:
 80038f0:	0001 ffe0                                   ....

080038f4 <??DataTable11_6>:
 80038f4:	ffff 41ef                                   ...A

080038f8 <??DataTable11_7>:
 80038f8:	e001 ffff                                   ....

080038fc <??DataTable11_8>:
 80038fc:	ffff 426f                                   ..oB

08003900 <??DataTable11_9>:
 8003900:	ffff 42ef                                   ...B

08003904 <??DataTable11_10>:
 8003904:	0000 4370                                   ..pC

08003908 <??DataTable11_11>:
 8003908:	0000 43f0                                   ...C

0800390c <ZbZclAttrReportConfigReq>:
 800390c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	b09b      	sub	sp, #108	; 0x6c
 8003912:	0004      	movs	r4, r0
 8003914:	000d      	movs	r5, r1
 8003916:	001e      	movs	r6, r3
 8003918:	2700      	movs	r7, #0
 800391a:	7c28      	ldrb	r0, [r5, #16]
 800391c:	2800      	cmp	r0, #0
 800391e:	d002      	beq.n	8003926 <??ZbZclAttrReportConfigReq_0>
 8003920:	7c28      	ldrb	r0, [r5, #16]
 8003922:	2807      	cmp	r0, #7
 8003924:	d301      	bcc.n	800392a <??ZbZclAttrReportConfigReq_1>

08003926 <??ZbZclAttrReportConfigReq_0>:
 8003926:	2001      	movs	r0, #1
 8003928:	e059      	b.n	80039de <??ZbZclAttrReportConfigReq_2>

0800392a <??ZbZclAttrReportConfigReq_1>:
 800392a:	f05f 0800 	movs.w	r8, #0

0800392e <??ZbZclAttrReportConfigReq_3>:
 800392e:	7c28      	ldrb	r0, [r5, #16]
 8003930:	4580      	cmp	r8, r0
 8003932:	d215      	bcs.n	8003960 <??ZbZclAttrReportConfigReq_4>
 8003934:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8003938:	4428      	add	r0, r5
 800393a:	f110 0918 	adds.w	r9, r0, #24
 800393e:	f1d7 0239 	rsbs	r2, r7, #57	; 0x39
 8003942:	a80c      	add	r0, sp, #48	; 0x30
 8003944:	eb00 0107 	add.w	r1, r0, r7
 8003948:	4648      	mov	r0, r9
 800394a:	f7ff feab 	bl	80036a4 <zcl_append_report_config_record>
 800394e:	0001      	movs	r1, r0
 8003950:	2901      	cmp	r1, #1
 8003952:	da01      	bge.n	8003958 <??ZbZclAttrReportConfigReq_5>
 8003954:	2001      	movs	r0, #1
 8003956:	e042      	b.n	80039de <??ZbZclAttrReportConfigReq_2>

08003958 <??ZbZclAttrReportConfigReq_5>:
 8003958:	19cf      	adds	r7, r1, r7
 800395a:	f118 0801 	adds.w	r8, r8, #1
 800395e:	e7e6      	b.n	800392e <??ZbZclAttrReportConfigReq_3>

08003960 <??ZbZclAttrReportConfigReq_4>:
 8003960:	f05f 0930 	movs.w	r9, #48	; 0x30
 8003964:	f05f 0a00 	movs.w	sl, #0
 8003968:	46eb      	mov	fp, sp
 800396a:	4652      	mov	r2, sl
 800396c:	4649      	mov	r1, r9
 800396e:	4658      	mov	r0, fp
 8003970:	f002 f9a4 	bl	8005cbc <__aeabi_memset>
 8003974:	2000      	movs	r0, #0
 8003976:	f88d 001a 	strb.w	r0, [sp, #26]
 800397a:	8a20      	ldrh	r0, [r4, #16]
 800397c:	2800      	cmp	r0, #0
 800397e:	d001      	beq.n	8003984 <??ZbZclAttrReportConfigReq_6>
 8003980:	2001      	movs	r0, #1
 8003982:	e000      	b.n	8003986 <??ZbZclAttrReportConfigReq_7>

08003984 <??ZbZclAttrReportConfigReq_6>:
 8003984:	2000      	movs	r0, #0

08003986 <??ZbZclAttrReportConfigReq_7>:
 8003986:	f88d 001b 	strb.w	r0, [sp, #27]
 800398a:	8a20      	ldrh	r0, [r4, #16]
 800398c:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003990:	2006      	movs	r0, #6
 8003992:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003996:	f00e fd13 	bl	80123c0 <ZbZclGetNextSeqnum>
 800399a:	f88d 0020 	strb.w	r0, [sp, #32]
 800399e:	4668      	mov	r0, sp
 80039a0:	0029      	movs	r1, r5
 80039a2:	2210      	movs	r2, #16
 80039a4:	f011 f923 	bl	8014bee <__aeabi_memcpy>
 80039a8:	8aa0      	ldrh	r0, [r4, #20]
 80039aa:	f8ad 0010 	strh.w	r0, [sp, #16]
 80039ae:	89a0      	ldrh	r0, [r4, #12]
 80039b0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80039b4:	7ba0      	ldrb	r0, [r4, #14]
 80039b6:	f8ad 0014 	strh.w	r0, [sp, #20]
 80039ba:	8ae0      	ldrh	r0, [r4, #22]
 80039bc:	f8ad 0016 	strh.w	r0, [sp, #22]
 80039c0:	7e20      	ldrb	r0, [r4, #24]
 80039c2:	f88d 0018 	strb.w	r0, [sp, #24]
 80039c6:	7e60      	ldrb	r0, [r4, #25]
 80039c8:	f88d 0019 	strb.w	r0, [sp, #25]
 80039cc:	a80c      	add	r0, sp, #48	; 0x30
 80039ce:	9009      	str	r0, [sp, #36]	; 0x24
 80039d0:	970a      	str	r7, [sp, #40]	; 0x28
 80039d2:	0033      	movs	r3, r6
 80039d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80039d6:	4669      	mov	r1, sp
 80039d8:	68a0      	ldr	r0, [r4, #8]
 80039da:	f00e fd19 	bl	8012410 <ZbZclCommandReq>

080039de <??ZbZclAttrReportConfigReq_2>:
 80039de:	b01d      	add	sp, #116	; 0x74
 80039e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080039e4 <ZbZclAttrReportReadReq>:
 80039e4:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e8:	b09b      	sub	sp, #108	; 0x6c
 80039ea:	0005      	movs	r5, r0
 80039ec:	000e      	movs	r6, r1
 80039ee:	001f      	movs	r7, r3
 80039f0:	2400      	movs	r4, #0
 80039f2:	7c30      	ldrb	r0, [r6, #16]
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d002      	beq.n	80039fe <??ZbZclAttrReportReadReq_0>
 80039f8:	7c30      	ldrb	r0, [r6, #16]
 80039fa:	2807      	cmp	r0, #7
 80039fc:	d301      	bcc.n	8003a02 <??ZbZclAttrReportReadReq_1>

080039fe <??ZbZclAttrReportReadReq_0>:
 80039fe:	2001      	movs	r0, #1
 8003a00:	e050      	b.n	8003aa4 <??ZbZclAttrReportReadReq_2>

08003a02 <??ZbZclAttrReportReadReq_1>:
 8003a02:	f05f 0800 	movs.w	r8, #0

08003a06 <??ZbZclAttrReportReadReq_3>:
 8003a06:	7c30      	ldrb	r0, [r6, #16]
 8003a08:	4580      	cmp	r8, r0
 8003a0a:	d217      	bcs.n	8003a3c <??ZbZclAttrReportReadReq_4>
 8003a0c:	1ce0      	adds	r0, r4, #3
 8003a0e:	283a      	cmp	r0, #58	; 0x3a
 8003a10:	d301      	bcc.n	8003a16 <??ZbZclAttrReportReadReq_5>
 8003a12:	2001      	movs	r0, #1
 8003a14:	e046      	b.n	8003aa4 <??ZbZclAttrReportReadReq_2>

08003a16 <??ZbZclAttrReportReadReq_5>:
 8003a16:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8003a1a:	4430      	add	r0, r6
 8003a1c:	7e00      	ldrb	r0, [r0, #24]
 8003a1e:	a90c      	add	r1, sp, #48	; 0x30
 8003a20:	5508      	strb	r0, [r1, r4]
 8003a22:	1c64      	adds	r4, r4, #1
 8003a24:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8003a28:	4430      	add	r0, r6
 8003a2a:	8b41      	ldrh	r1, [r0, #26]
 8003a2c:	a80c      	add	r0, sp, #48	; 0x30
 8003a2e:	4420      	add	r0, r4
 8003a30:	f7fc fc00 	bl	8000234 <putle16>
 8003a34:	1ca4      	adds	r4, r4, #2
 8003a36:	f118 0801 	adds.w	r8, r8, #1
 8003a3a:	e7e4      	b.n	8003a06 <??ZbZclAttrReportReadReq_3>

08003a3c <??ZbZclAttrReportReadReq_4>:
 8003a3c:	f05f 0930 	movs.w	r9, #48	; 0x30
 8003a40:	f05f 0a00 	movs.w	sl, #0
 8003a44:	46eb      	mov	fp, sp
 8003a46:	4652      	mov	r2, sl
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4658      	mov	r0, fp
 8003a4c:	f002 f936 	bl	8005cbc <__aeabi_memset>
 8003a50:	2000      	movs	r0, #0
 8003a52:	f88d 001a 	strb.w	r0, [sp, #26]
 8003a56:	2008      	movs	r0, #8
 8003a58:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003a5c:	f00e fcb0 	bl	80123c0 <ZbZclGetNextSeqnum>
 8003a60:	f88d 0020 	strb.w	r0, [sp, #32]
 8003a64:	4668      	mov	r0, sp
 8003a66:	0031      	movs	r1, r6
 8003a68:	2210      	movs	r2, #16
 8003a6a:	f011 f8c0 	bl	8014bee <__aeabi_memcpy>
 8003a6e:	8aa8      	ldrh	r0, [r5, #20]
 8003a70:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003a74:	89a8      	ldrh	r0, [r5, #12]
 8003a76:	f8ad 0012 	strh.w	r0, [sp, #18]
 8003a7a:	7ba8      	ldrb	r0, [r5, #14]
 8003a7c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003a80:	8ae8      	ldrh	r0, [r5, #22]
 8003a82:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003a86:	7e28      	ldrb	r0, [r5, #24]
 8003a88:	f88d 0018 	strb.w	r0, [sp, #24]
 8003a8c:	7e68      	ldrb	r0, [r5, #25]
 8003a8e:	f88d 0019 	strb.w	r0, [sp, #25]
 8003a92:	a80c      	add	r0, sp, #48	; 0x30
 8003a94:	9009      	str	r0, [sp, #36]	; 0x24
 8003a96:	940a      	str	r4, [sp, #40]	; 0x28
 8003a98:	003b      	movs	r3, r7
 8003a9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003a9c:	4669      	mov	r1, sp
 8003a9e:	68a8      	ldr	r0, [r5, #8]
 8003aa0:	f00e fcb6 	bl	8012410 <ZbZclCommandReq>

08003aa4 <??ZbZclAttrReportReadReq_2>:
 8003aa4:	b01d      	add	sp, #116	; 0x74
 8003aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003aaa <ZbZclAttrReportConfigDefault>:
 8003aaa:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aae:	0007      	movs	r7, r0
 8003ab0:	4688      	mov	r8, r1
 8003ab2:	4691      	mov	r9, r2
 8003ab4:	469a      	mov	sl, r3
 8003ab6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003ab8:	4641      	mov	r1, r8
 8003aba:	b289      	uxth	r1, r1
 8003abc:	0038      	movs	r0, r7
 8003abe:	f7fc fc3c 	bl	800033a <ZbZclAttrFind>
 8003ac2:	0005      	movs	r5, r0
 8003ac4:	2d00      	cmp	r5, #0
 8003ac6:	d101      	bne.n	8003acc <??ZbZclAttrReportConfigDefault_0>
 8003ac8:	2086      	movs	r0, #134	; 0x86
 8003aca:	e02b      	b.n	8003b24 <??ZbZclAttrReportConfigDefault_1>

08003acc <??ZbZclAttrReportConfigDefault_0>:
 8003acc:	68a8      	ldr	r0, [r5, #8]
 8003ace:	7900      	ldrb	r0, [r0, #4]
 8003ad0:	0780      	lsls	r0, r0, #30
 8003ad2:	d401      	bmi.n	8003ad8 <??ZbZclAttrReportConfigDefault_2>
 8003ad4:	208c      	movs	r0, #140	; 0x8c
 8003ad6:	e025      	b.n	8003b24 <??ZbZclAttrReportConfigDefault_1>

08003ad8 <??ZbZclAttrReportConfigDefault_2>:
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4641      	mov	r1, r8
 8003adc:	b289      	uxth	r1, r1
 8003ade:	0038      	movs	r0, r7
 8003ae0:	f7fe ff4f 	bl	8002982 <zcl_reporting_find>
 8003ae4:	0006      	movs	r6, r0
 8003ae6:	2e00      	cmp	r6, #0
 8003ae8:	d101      	bne.n	8003aee <??ZbZclAttrReportConfigDefault_3>
 8003aea:	208b      	movs	r0, #139	; 0x8b
 8003aec:	e01a      	b.n	8003b24 <??ZbZclAttrReportConfigDefault_1>

08003aee <??ZbZclAttrReportConfigDefault_3>:
 8003aee:	f8ad 9002 	strh.w	r9, [sp, #2]
 8003af2:	f8ad a000 	strh.w	sl, [sp]
 8003af6:	4669      	mov	r1, sp
 8003af8:	f10d 0002 	add.w	r0, sp, #2
 8003afc:	f7ff f89e 	bl	8002c3c <zcl_reporting_check_default_intvl>
 8003b00:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8003b04:	84b0      	strh	r0, [r6, #36]	; 0x24
 8003b06:	f8bd 0000 	ldrh.w	r0, [sp]
 8003b0a:	84f0      	strh	r0, [r6, #38]	; 0x26
 8003b0c:	2c00      	cmp	r4, #0
 8003b0e:	d003      	beq.n	8003b18 <??ZbZclAttrReportConfigDefault_4>
 8003b10:	ed94 0b00 	vldr	d0, [r4]
 8003b14:	ed86 0b0c 	vstr	d0, [r6, #48]	; 0x30

08003b18 <??ZbZclAttrReportConfigDefault_4>:
 8003b18:	2201      	movs	r2, #1
 8003b1a:	0031      	movs	r1, r6
 8003b1c:	68b8      	ldr	r0, [r7, #8]
 8003b1e:	f7ff f8bd 	bl	8002c9c <zcl_reporting_reset_defaults>
 8003b22:	2000      	movs	r0, #0

08003b24 <??ZbZclAttrReportConfigDefault_1>:
 8003b24:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08003b28 <ZbZclClusterReportCallbackAttach>:
 8003b28:	65c1      	str	r1, [r0, #92]	; 0x5c
 8003b2a:	4770      	bx	lr

08003b2c <ZbZclClusterGetEndpoint>:
 8003b2c:	7b80      	ldrb	r0, [r0, #14]
 8003b2e:	4770      	bx	lr

08003b30 <ZbZclClusterSetCallbackArg>:
 8003b30:	6541      	str	r1, [r0, #84]	; 0x54
 8003b32:	4770      	bx	lr

08003b34 <ZbZclClusterSetMfrCode>:
 8003b34:	8201      	strh	r1, [r0, #16]
 8003b36:	4770      	bx	lr

08003b38 <ZbZclClusterGetClusterId>:
 8003b38:	8980      	ldrh	r0, [r0, #12]
 8003b3a:	4770      	bx	lr

08003b3c <ZbZclClusterSetProfileId>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	0004      	movs	r4, r0
 8003b40:	000d      	movs	r5, r1
 8003b42:	82a5      	strh	r5, [r4, #20]
 8003b44:	7ba0      	ldrb	r0, [r4, #14]
 8003b46:	28ff      	cmp	r0, #255	; 0xff
 8003b48:	d008      	beq.n	8003b5c <??ZbZclClusterSetProfileId_0>
 8003b4a:	0020      	movs	r0, r4
 8003b4c:	f00e fdd4 	bl	80126f8 <ZbZclClusterUnbind>
 8003b50:	7f23      	ldrb	r3, [r4, #28]
 8003b52:	8aa2      	ldrh	r2, [r4, #20]
 8003b54:	7ba1      	ldrb	r1, [r4, #14]
 8003b56:	0020      	movs	r0, r4
 8003b58:	f00e fd8e 	bl	8012678 <ZbZclClusterBind>

08003b5c <??ZbZclClusterSetProfileId_0>:
 8003b5c:	bd31      	pop	{r0, r4, r5, pc}

08003b5e <ZbZclClusterGetProfileId>:
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	0004      	movs	r4, r0
 8003b62:	7ba1      	ldrb	r1, [r4, #14]
 8003b64:	68a0      	ldr	r0, [r4, #8]
 8003b66:	f00d feea 	bl	801193e <ZbApsEndpointProfile>
 8003b6a:	0001      	movs	r1, r0
 8003b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b70:	b289      	uxth	r1, r1
 8003b72:	4291      	cmp	r1, r2
 8003b74:	d101      	bne.n	8003b7a <??ZbZclClusterGetProfileId_0>
 8003b76:	8aa1      	ldrh	r1, [r4, #20]
 8003b78:	0008      	movs	r0, r1

08003b7a <??ZbZclClusterGetProfileId_0>:
 8003b7a:	b280      	uxth	r0, r0
 8003b7c:	bd10      	pop	{r4, pc}

08003b7e <ZbZclClusterSetMinSecurity>:
 8003b7e:	b430      	push	{r4, r5}
 8003b80:	0003      	movs	r3, r0
 8003b82:	2001      	movs	r0, #1
 8003b84:	7d9a      	ldrb	r2, [r3, #22]
 8003b86:	f012 0203 	ands.w	r2, r2, #3
 8003b8a:	2a01      	cmp	r2, #1
 8003b8c:	d101      	bne.n	8003b92 <??ZbZclClusterSetMinSecurity_0>
 8003b8e:	2401      	movs	r4, #1
 8003b90:	e000      	b.n	8003b94 <??ZbZclClusterSetMinSecurity_1>

08003b92 <??ZbZclClusterSetMinSecurity_0>:
 8003b92:	2400      	movs	r4, #0

08003b94 <??ZbZclClusterSetMinSecurity_1>:
 8003b94:	000a      	movs	r2, r1
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	2aab      	cmp	r2, #171	; 0xab
 8003b9a:	d01d      	beq.n	8003bd8 <??ZbZclClusterSetMinSecurity_2>
 8003b9c:	2aac      	cmp	r2, #172	; 0xac
 8003b9e:	d00f      	beq.n	8003bc0 <??ZbZclClusterSetMinSecurity_3>
 8003ba0:	2aaf      	cmp	r2, #175	; 0xaf
 8003ba2:	d123      	bne.n	8003bec <??ZbZclClusterSetMinSecurity_4>

08003ba4 <??ZbZclClusterSetMinSecurity_5>:
 8003ba4:	8add      	ldrh	r5, [r3, #22]
 8003ba6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8003baa:	4015      	ands	r5, r2
 8003bac:	82dd      	strh	r5, [r3, #22]
 8003bae:	8add      	ldrh	r5, [r3, #22]
 8003bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bb4:	4015      	ands	r5, r2
 8003bb6:	82dd      	strh	r5, [r3, #22]
 8003bb8:	0022      	movs	r2, r4
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	2a00      	cmp	r2, #0

08003bbe <??ZbZclClusterSetMinSecurity_6>:
 8003bbe:	e017      	b.n	8003bf0 <??ZbZclClusterSetMinSecurity_7>

08003bc0 <??ZbZclClusterSetMinSecurity_3>:
 8003bc0:	8ada      	ldrh	r2, [r3, #22]
 8003bc2:	f052 0202 	orrs.w	r2, r2, #2
 8003bc6:	82da      	strh	r2, [r3, #22]
 8003bc8:	8ada      	ldrh	r2, [r3, #22]
 8003bca:	f052 0201 	orrs.w	r2, r2, #1
 8003bce:	82da      	strh	r2, [r3, #22]
 8003bd0:	0022      	movs	r2, r4
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	2a00      	cmp	r2, #0

08003bd6 <??ZbZclClusterSetMinSecurity_8>:
 8003bd6:	e00b      	b.n	8003bf0 <??ZbZclClusterSetMinSecurity_7>

08003bd8 <??ZbZclClusterSetMinSecurity_2>:
 8003bd8:	8add      	ldrh	r5, [r3, #22]
 8003bda:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8003bde:	4015      	ands	r5, r2
 8003be0:	82dd      	strh	r5, [r3, #22]
 8003be2:	8ada      	ldrh	r2, [r3, #22]
 8003be4:	f052 0201 	orrs.w	r2, r2, #1
 8003be8:	82da      	strh	r2, [r3, #22]
 8003bea:	e001      	b.n	8003bf0 <??ZbZclClusterSetMinSecurity_7>

08003bec <??ZbZclClusterSetMinSecurity_4>:
 8003bec:	2200      	movs	r2, #0
 8003bee:	0010      	movs	r0, r2

08003bf0 <??ZbZclClusterSetMinSecurity_7>:
 8003bf0:	0002      	movs	r2, r0
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	2a00      	cmp	r2, #0
 8003bf6:	d000      	beq.n	8003bfa <??ZbZclClusterSetMinSecurity_9>
 8003bf8:	7499      	strb	r1, [r3, #18]

08003bfa <??ZbZclClusterSetMinSecurity_9>:
 8003bfa:	b2c0      	uxtb	r0, r0
 8003bfc:	bc30      	pop	{r4, r5}
 8003bfe:	4770      	bx	lr

08003c00 <ZbZclClusterCheckMinSecurity>:
 8003c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c04:	0004      	movs	r4, r0
 8003c06:	000d      	movs	r5, r1
 8003c08:	0016      	movs	r6, r2
 8003c0a:	2700      	movs	r7, #0
 8003c0c:	7ca0      	ldrb	r0, [r4, #18]
 8003c0e:	28af      	cmp	r0, #175	; 0xaf
 8003c10:	d102      	bne.n	8003c18 <??ZbZclClusterCheckMinSecurity_0>
 8003c12:	2001      	movs	r0, #1
 8003c14:	0007      	movs	r7, r0
 8003c16:	e073      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003c18 <??ZbZclClusterCheckMinSecurity_0>:
 8003c18:	7ca0      	ldrb	r0, [r4, #18]
 8003c1a:	28ac      	cmp	r0, #172	; 0xac
 8003c1c:	d10a      	bne.n	8003c34 <??ZbZclClusterCheckMinSecurity_2>
 8003c1e:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8003c22:	28ac      	cmp	r0, #172	; 0xac
 8003c24:	d003      	beq.n	8003c2e <??ZbZclClusterCheckMinSecurity_3>
 8003c26:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8003c2a:	28ab      	cmp	r0, #171	; 0xab
 8003c2c:	d101      	bne.n	8003c32 <??ZbZclClusterCheckMinSecurity_4>

08003c2e <??ZbZclClusterCheckMinSecurity_3>:
 8003c2e:	2001      	movs	r0, #1
 8003c30:	0007      	movs	r7, r0

08003c32 <??ZbZclClusterCheckMinSecurity_4>:
 8003c32:	e065      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003c34 <??ZbZclClusterCheckMinSecurity_2>:
 8003c34:	7ca0      	ldrb	r0, [r4, #18]
 8003c36:	28ab      	cmp	r0, #171	; 0xab
 8003c38:	d162      	bne.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>
 8003c3a:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8003c3e:	28ab      	cmp	r0, #171	; 0xab
 8003c40:	d102      	bne.n	8003c48 <??ZbZclClusterCheckMinSecurity_6>
 8003c42:	2001      	movs	r0, #1
 8003c44:	0007      	movs	r7, r0
 8003c46:	e05b      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003c48 <??ZbZclClusterCheckMinSecurity_6>:
 8003c48:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
 8003c4c:	28ac      	cmp	r0, #172	; 0xac
 8003c4e:	d157      	bne.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003c50 <??ZbZclClusterCheckMinSecurity_7>:
 8003c50:	89a0      	ldrh	r0, [r4, #12]
 8003c52:	2819      	cmp	r0, #25
 8003c54:	d114      	bne.n	8003c80 <??ZbZclClusterCheckMinSecurity_8>
 8003c56:	7f20      	ldrb	r0, [r4, #28]
 8003c58:	2801      	cmp	r0, #1
 8003c5a:	d111      	bne.n	8003c80 <??ZbZclClusterCheckMinSecurity_8>
 8003c5c:	0028      	movs	r0, r5
 8003c5e:	f00d fe9e 	bl	801199e <ZbApsAddrIsBcast>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d00b      	beq.n	8003c7e <??ZbZclClusterCheckMinSecurity_9>
 8003c66:	7830      	ldrb	r0, [r6, #0]
 8003c68:	2801      	cmp	r0, #1
 8003c6a:	d108      	bne.n	8003c7e <??ZbZclClusterCheckMinSecurity_9>
 8003c6c:	78b0      	ldrb	r0, [r6, #2]
 8003c6e:	2801      	cmp	r0, #1
 8003c70:	d105      	bne.n	8003c7e <??ZbZclClusterCheckMinSecurity_9>
 8003c72:	79f0      	ldrb	r0, [r6, #7]
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d102      	bne.n	8003c7e <??ZbZclClusterCheckMinSecurity_9>
 8003c78:	2001      	movs	r0, #1
 8003c7a:	0007      	movs	r7, r0
 8003c7c:	e040      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003c7e <??ZbZclClusterCheckMinSecurity_9>:
 8003c7e:	e03f      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003c80 <??ZbZclClusterCheckMinSecurity_8>:
 8003c80:	f240 7802 	movw	r8, #1794	; 0x702
 8003c84:	89a0      	ldrh	r0, [r4, #12]
 8003c86:	4540      	cmp	r0, r8
 8003c88:	d11a      	bne.n	8003cc0 <??ZbZclClusterCheckMinSecurity_10>
 8003c8a:	7f20      	ldrb	r0, [r4, #28]
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d117      	bne.n	8003cc0 <??ZbZclClusterCheckMinSecurity_10>
 8003c90:	7830      	ldrb	r0, [r6, #0]
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d114      	bne.n	8003cc0 <??ZbZclClusterCheckMinSecurity_10>
 8003c96:	79f0      	ldrb	r0, [r6, #7]
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d111      	bne.n	8003cc0 <??ZbZclClusterCheckMinSecurity_10>
 8003c9c:	78b0      	ldrb	r0, [r6, #2]
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d10e      	bne.n	8003cc0 <??ZbZclClusterCheckMinSecurity_10>
 8003ca2:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003ca4:	2802      	cmp	r0, #2
 8003ca6:	d30b      	bcc.n	8003cc0 <??ZbZclClusterCheckMinSecurity_10>
 8003ca8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003caa:	f7fc fa77 	bl	800019c <pletoh16>
 8003cae:	0001      	movs	r1, r0
 8003cb0:	f240 3206 	movw	r2, #774	; 0x306
 8003cb4:	b289      	uxth	r1, r1
 8003cb6:	4291      	cmp	r1, r2
 8003cb8:	d102      	bne.n	8003cc0 <??ZbZclClusterCheckMinSecurity_10>
 8003cba:	2101      	movs	r1, #1
 8003cbc:	000f      	movs	r7, r1
 8003cbe:	e01f      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003cc0 <??ZbZclClusterCheckMinSecurity_10>:
 8003cc0:	89a0      	ldrh	r0, [r4, #12]
 8003cc2:	4540      	cmp	r0, r8
 8003cc4:	d11b      	bne.n	8003cfe <??ZbZclClusterCheckMinSecurity_11>
 8003cc6:	7f20      	ldrb	r0, [r4, #28]
 8003cc8:	2801      	cmp	r0, #1
 8003cca:	d118      	bne.n	8003cfe <??ZbZclClusterCheckMinSecurity_11>
 8003ccc:	7830      	ldrb	r0, [r6, #0]
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d114      	bne.n	8003cfc <??ZbZclClusterCheckMinSecurity_12>
 8003cd2:	79f0      	ldrb	r0, [r6, #7]
 8003cd4:	2801      	cmp	r0, #1
 8003cd6:	d111      	bne.n	8003cfc <??ZbZclClusterCheckMinSecurity_12>
 8003cd8:	78b0      	ldrb	r0, [r6, #2]
 8003cda:	2801      	cmp	r0, #1
 8003cdc:	d10e      	bne.n	8003cfc <??ZbZclClusterCheckMinSecurity_12>
 8003cde:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 8003ce0:	2802      	cmp	r0, #2
 8003ce2:	d30b      	bcc.n	8003cfc <??ZbZclClusterCheckMinSecurity_12>
 8003ce4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003ce6:	f7fc fa59 	bl	800019c <pletoh16>
 8003cea:	0001      	movs	r1, r0
 8003cec:	f240 3206 	movw	r2, #774	; 0x306
 8003cf0:	b289      	uxth	r1, r1
 8003cf2:	4291      	cmp	r1, r2
 8003cf4:	d102      	bne.n	8003cfc <??ZbZclClusterCheckMinSecurity_12>
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	000f      	movs	r7, r1
 8003cfa:	e001      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003cfc <??ZbZclClusterCheckMinSecurity_12>:
 8003cfc:	e000      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003cfe <??ZbZclClusterCheckMinSecurity_11>:
 8003cfe:	e7ff      	b.n	8003d00 <??ZbZclClusterCheckMinSecurity_1>

08003d00 <??ZbZclClusterCheckMinSecurity_1>:
 8003d00:	0038      	movs	r0, r7
 8003d02:	b2c0      	uxtb	r0, r0
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d08 <ZbZclClusterSetTxOptions>:
 8003d08:	05ca      	lsls	r2, r1, #23
 8003d0a:	d400      	bmi.n	8003d0e <??ZbZclClusterSetTxOptions_0>

08003d0c <??ZbZclClusterSetTxOptions_1>:
 8003d0c:	82c1      	strh	r1, [r0, #22]

08003d0e <??ZbZclClusterSetTxOptions_0>:
 8003d0e:	4770      	bx	lr

08003d10 <ZbZclClusterGetTxOptions>:
 8003d10:	8ac0      	ldrh	r0, [r0, #22]
 8003d12:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8003d16:	4008      	ands	r0, r1
 8003d18:	4770      	bx	lr

08003d1a <ZbZclTxOptsFromSecurityStatus>:
 8003d1a:	0001      	movs	r1, r0
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f050 0004 	orrs.w	r0, r0, #4
 8003d22:	f050 0008 	orrs.w	r0, r0, #8
 8003d26:	000a      	movs	r2, r1
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	2aab      	cmp	r2, #171	; 0xab
 8003d2c:	d102      	bne.n	8003d34 <??ZbZclTxOptsFromSecurityStatus_0>
 8003d2e:	f050 0001 	orrs.w	r0, r0, #1
 8003d32:	e007      	b.n	8003d44 <??ZbZclTxOptsFromSecurityStatus_1>

08003d34 <??ZbZclTxOptsFromSecurityStatus_0>:
 8003d34:	000a      	movs	r2, r1
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	2aac      	cmp	r2, #172	; 0xac
 8003d3a:	d103      	bne.n	8003d44 <??ZbZclTxOptsFromSecurityStatus_1>
 8003d3c:	f050 0001 	orrs.w	r0, r0, #1
 8003d40:	f050 0002 	orrs.w	r0, r0, #2

08003d44 <??ZbZclTxOptsFromSecurityStatus_1>:
 8003d44:	b280      	uxth	r0, r0
 8003d46:	4770      	bx	lr

08003d48 <ZbZclClusterGetDirection>:
 8003d48:	7f00      	ldrb	r0, [r0, #28]
 8003d4a:	4770      	bx	lr

08003d4c <ZbZclClusterGetDirectionStr>:
 8003d4c:	0001      	movs	r1, r0
 8003d4e:	7f08      	ldrb	r0, [r1, #28]
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d003      	beq.n	8003d5c <??ZbZclClusterGetDirectionStr_0>
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d005      	beq.n	8003d64 <??ZbZclClusterGetDirectionStr_1>
 8003d58:	d302      	bcc.n	8003d60 <??ZbZclClusterGetDirectionStr_2>
 8003d5a:	e005      	b.n	8003d68 <??ZbZclClusterGetDirectionStr_3>

08003d5c <??ZbZclClusterGetDirectionStr_0>:
 8003d5c:	4803      	ldr	r0, [pc, #12]	; (8003d6c <??DataTable1>)
 8003d5e:	e004      	b.n	8003d6a <??ZbZclClusterGetDirectionStr_4>

08003d60 <??ZbZclClusterGetDirectionStr_2>:
 8003d60:	4803      	ldr	r0, [pc, #12]	; (8003d70 <??DataTable1_1>)
 8003d62:	e002      	b.n	8003d6a <??ZbZclClusterGetDirectionStr_4>

08003d64 <??ZbZclClusterGetDirectionStr_1>:
 8003d64:	4803      	ldr	r0, [pc, #12]	; (8003d74 <??DataTable1_2>)
 8003d66:	e000      	b.n	8003d6a <??ZbZclClusterGetDirectionStr_4>

08003d68 <??ZbZclClusterGetDirectionStr_3>:
 8003d68:	4803      	ldr	r0, [pc, #12]	; (8003d78 <??DataTable1_3>)

08003d6a <??ZbZclClusterGetDirectionStr_4>:
 8003d6a:	4770      	bx	lr

08003d6c <??DataTable1>:
 8003d6c:	6ce4 0801                                   .l..

08003d70 <??DataTable1_1>:
 8003d70:	6cec 0801                                   .l..

08003d74 <??DataTable1_2>:
 8003d74:	6cf4 0801                                   .l..

08003d78 <??DataTable1_3>:
 8003d78:	6cfc 0801                                   .l..

08003d7c <ZbZclClusterSetDiscoverRoute>:
 8003d7c:	7601      	strb	r1, [r0, #24]
 8003d7e:	4770      	bx	lr

08003d80 <ZbZclClusterSetRadius>:
 8003d80:	7641      	strb	r1, [r0, #25]
 8003d82:	4770      	bx	lr

08003d84 <ZbZclClusterGetRadius>:
 8003d84:	7e40      	ldrb	r0, [r0, #25]
 8003d86:	4770      	bx	lr

08003d88 <ZbZclClusterSetMaxAsduLength>:
 8003d88:	b410      	push	{r4}
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	000b      	movs	r3, r1
 8003d8e:	0018      	movs	r0, r3
 8003d90:	b280      	uxth	r0, r0
 8003d92:	f240 74d1 	movw	r4, #2001	; 0x7d1
 8003d96:	42a0      	cmp	r0, r4
 8003d98:	d301      	bcc.n	8003d9e <??ZbZclClusterSetMaxAsduLength_0>
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	e007      	b.n	8003dae <??ZbZclClusterSetMaxAsduLength_1>

08003d9e <??ZbZclClusterSetMaxAsduLength_0>:
 8003d9e:	0018      	movs	r0, r3
 8003da0:	b280      	uxth	r0, r0
 8003da2:	2839      	cmp	r0, #57	; 0x39
 8003da4:	d201      	bcs.n	8003daa <??ZbZclClusterSetMaxAsduLength_2>
 8003da6:	2039      	movs	r0, #57	; 0x39
 8003da8:	0003      	movs	r3, r0

08003daa <??ZbZclClusterSetMaxAsduLength_2>:
 8003daa:	8353      	strh	r3, [r2, #26]
 8003dac:	2001      	movs	r0, #1

08003dae <??ZbZclClusterSetMaxAsduLength_1>:
 8003dae:	bc10      	pop	{r4}
 8003db0:	4770      	bx	lr

08003db2 <ZbZclClusterGetMaxAsduLength>:
 8003db2:	8b40      	ldrh	r0, [r0, #26]
 8003db4:	4770      	bx	lr

08003db6 <ZbZclClusterInitCommandReq>:
 8003db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	0004      	movs	r4, r0
 8003dbc:	000d      	movs	r5, r1
 8003dbe:	2630      	movs	r6, #48	; 0x30
 8003dc0:	2700      	movs	r7, #0
 8003dc2:	46a8      	mov	r8, r5
 8003dc4:	003a      	movs	r2, r7
 8003dc6:	0031      	movs	r1, r6
 8003dc8:	4640      	mov	r0, r8
 8003dca:	f001 ff77 	bl	8005cbc <__aeabi_memset>
 8003dce:	8aa0      	ldrh	r0, [r4, #20]
 8003dd0:	8228      	strh	r0, [r5, #16]
 8003dd2:	89a0      	ldrh	r0, [r4, #12]
 8003dd4:	8268      	strh	r0, [r5, #18]
 8003dd6:	7ba0      	ldrb	r0, [r4, #14]
 8003dd8:	82a8      	strh	r0, [r5, #20]
 8003dda:	8ae0      	ldrh	r0, [r4, #22]
 8003ddc:	82e8      	strh	r0, [r5, #22]
 8003dde:	7e20      	ldrb	r0, [r4, #24]
 8003de0:	7628      	strb	r0, [r5, #24]
 8003de2:	7e60      	ldrb	r0, [r4, #25]
 8003de4:	7668      	strb	r0, [r5, #25]
 8003de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003dea <ZbZclClusterInitApsdeReq>:
 8003dea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dee:	0005      	movs	r5, r0
 8003df0:	000e      	movs	r6, r1
 8003df2:	0014      	movs	r4, r2
 8003df4:	2730      	movs	r7, #48	; 0x30
 8003df6:	f05f 0800 	movs.w	r8, #0
 8003dfa:	46b1      	mov	r9, r6
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	0039      	movs	r1, r7
 8003e00:	4648      	mov	r0, r9
 8003e02:	f001 ff5b 	bl	8005cbc <__aeabi_memset>
 8003e06:	8aa8      	ldrh	r0, [r5, #20]
 8003e08:	8230      	strh	r0, [r6, #16]
 8003e0a:	89a8      	ldrh	r0, [r5, #12]
 8003e0c:	8270      	strh	r0, [r6, #18]
 8003e0e:	7ba8      	ldrb	r0, [r5, #14]
 8003e10:	82b0      	strh	r0, [r6, #20]
 8003e12:	8ae8      	ldrh	r0, [r5, #22]
 8003e14:	84b0      	strh	r0, [r6, #36]	; 0x24
 8003e16:	7e28      	ldrb	r0, [r5, #24]
 8003e18:	f886 0026 	strb.w	r0, [r6, #38]	; 0x26
 8003e1c:	7e68      	ldrb	r0, [r5, #25]
 8003e1e:	f886 0027 	strb.w	r0, [r6, #39]	; 0x27
 8003e22:	2c00      	cmp	r4, #0
 8003e24:	d00b      	beq.n	8003e3e <??ZbZclClusterInitApsdeReq_0>
 8003e26:	8ab0      	ldrh	r0, [r6, #20]
 8003e28:	28ff      	cmp	r0, #255	; 0xff
 8003e2a:	d101      	bne.n	8003e30 <??ZbZclClusterInitApsdeReq_1>
 8003e2c:	8860      	ldrh	r0, [r4, #2]
 8003e2e:	82b0      	strh	r0, [r6, #20]

08003e30 <??ZbZclClusterInitApsdeReq_1>:
 8003e30:	8c20      	ldrh	r0, [r4, #32]
 8003e32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e36:	4288      	cmp	r0, r1
 8003e38:	d001      	beq.n	8003e3e <??ZbZclClusterInitApsdeReq_0>
 8003e3a:	8c20      	ldrh	r0, [r4, #32]
 8003e3c:	8230      	strh	r0, [r6, #16]

08003e3e <??ZbZclClusterInitApsdeReq_0>:
 8003e3e:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08003e44 <zcl_persist_handle_set>:
 8003e44:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e48:	0004      	movs	r4, r0
 8003e4a:	000d      	movs	r5, r1
 8003e4c:	0016      	movs	r6, r2
 8003e4e:	f05f 0b00 	movs.w	fp, #0

08003e52 <??zcl_persist_handle_set_0>:
 8003e52:	4658      	mov	r0, fp
 8003e54:	0031      	movs	r1, r6
 8003e56:	b280      	uxth	r0, r0
 8003e58:	b289      	uxth	r1, r1
 8003e5a:	4288      	cmp	r0, r1
 8003e5c:	d23c      	bcs.n	8003ed8 <??zcl_persist_handle_set_1>
 8003e5e:	0030      	movs	r0, r6
 8003e60:	b280      	uxth	r0, r0
 8003e62:	4659      	mov	r1, fp
 8003e64:	b289      	uxth	r1, r1
 8003e66:	1d09      	adds	r1, r1, #4
 8003e68:	4288      	cmp	r0, r1
 8003e6a:	d201      	bcs.n	8003e70 <??zcl_persist_handle_set_2>
 8003e6c:	2087      	movs	r0, #135	; 0x87
 8003e6e:	e034      	b.n	8003eda <??zcl_persist_handle_set_3>

08003e70 <??zcl_persist_handle_set_2>:
 8003e70:	4658      	mov	r0, fp
 8003e72:	b280      	uxth	r0, r0
 8003e74:	4428      	add	r0, r5
 8003e76:	f7fc f991 	bl	800019c <pletoh16>
 8003e7a:	0007      	movs	r7, r0
 8003e7c:	f11b 0b02 	adds.w	fp, fp, #2
 8003e80:	4658      	mov	r0, fp
 8003e82:	b280      	uxth	r0, r0
 8003e84:	4428      	add	r0, r5
 8003e86:	f7fc f989 	bl	800019c <pletoh16>
 8003e8a:	4680      	mov	r8, r0
 8003e8c:	f11b 0b02 	adds.w	fp, fp, #2
 8003e90:	0030      	movs	r0, r6
 8003e92:	b280      	uxth	r0, r0
 8003e94:	4641      	mov	r1, r8
 8003e96:	b289      	uxth	r1, r1
 8003e98:	fa11 f18b 	uxtah	r1, r1, fp
 8003e9c:	4288      	cmp	r0, r1
 8003e9e:	da01      	bge.n	8003ea4 <??zcl_persist_handle_set_4>
 8003ea0:	2087      	movs	r0, #135	; 0x87
 8003ea2:	e01a      	b.n	8003eda <??zcl_persist_handle_set_3>

08003ea4 <??zcl_persist_handle_set_4>:
 8003ea4:	4658      	mov	r0, fp
 8003ea6:	b280      	uxth	r0, r0
 8003ea8:	4428      	add	r0, r5
 8003eaa:	4681      	mov	r9, r0
 8003eac:	eb18 0b0b 	adds.w	fp, r8, fp
 8003eb0:	2006      	movs	r0, #6
 8003eb2:	9001      	str	r0, [sp, #4]
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	b280      	uxth	r0, r0
 8003eb8:	9000      	str	r0, [sp, #0]
 8003eba:	464b      	mov	r3, r9
 8003ebc:	003a      	movs	r2, r7
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	0020      	movs	r0, r4
 8003ec4:	f7fc fc8f 	bl	80007e6 <ZbZclAttrWrite>
 8003ec8:	4682      	mov	sl, r0
 8003eca:	4650      	mov	r0, sl
 8003ecc:	b2c0      	uxtb	r0, r0
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d0bf      	beq.n	8003e52 <??zcl_persist_handle_set_0>
 8003ed2:	4650      	mov	r0, sl
 8003ed4:	b2c0      	uxtb	r0, r0
 8003ed6:	e000      	b.n	8003eda <??zcl_persist_handle_set_3>

08003ed8 <??zcl_persist_handle_set_1>:
 8003ed8:	2000      	movs	r0, #0

08003eda <??zcl_persist_handle_set_3>:
 8003eda:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ede <ZbZclHandleReadAttr>:
 8003ede:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee2:	b092      	sub	sp, #72	; 0x48
 8003ee4:	0005      	movs	r5, r0
 8003ee6:	000e      	movs	r6, r1
 8003ee8:	0017      	movs	r7, r2
 8003eea:	f20f 19a4 	addw	r9, pc, #420	; 0x1a4
 8003eee:	2300      	movs	r3, #0
 8003ef0:	464a      	mov	r2, r9
 8003ef2:	8b69      	ldrh	r1, [r5, #26]
 8003ef4:	68a8      	ldr	r0, [r5, #8]
 8003ef6:	f00e fc53 	bl	80127a0 <zb_heap_alloc>
 8003efa:	0004      	movs	r4, r0
 8003efc:	2c00      	cmp	r4, #0
 8003efe:	d106      	bne.n	8003f0e <??ZbZclHandleReadAttr_0>
 8003f00:	2389      	movs	r3, #137	; 0x89
 8003f02:	0032      	movs	r2, r6
 8003f04:	0039      	movs	r1, r7
 8003f06:	0028      	movs	r0, r5
 8003f08:	f00e facf 	bl	80124aa <ZbZclSendDefaultResponse>
 8003f0c:	e0bd      	b.n	800408a <??ZbZclHandleReadAttr_1>

08003f0e <??ZbZclHandleReadAttr_0>:
 8003f0e:	f05f 0808 	movs.w	r8, #8
 8003f12:	f05f 0a00 	movs.w	sl, #0
 8003f16:	f10d 0b0c 	add.w	fp, sp, #12
 8003f1a:	4652      	mov	r2, sl
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	4658      	mov	r0, fp
 8003f20:	f001 fecc 	bl	8005cbc <__aeabi_memset>
 8003f24:	2000      	movs	r0, #0
 8003f26:	f88d 000c 	strb.w	r0, [sp, #12]
 8003f2a:	7870      	ldrb	r0, [r6, #1]
 8003f2c:	f88d 000d 	strb.w	r0, [sp, #13]
 8003f30:	78b0      	ldrb	r0, [r6, #2]
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d101      	bne.n	8003f3a <??ZbZclHandleReadAttr_2>
 8003f36:	2001      	movs	r0, #1
 8003f38:	e000      	b.n	8003f3c <??ZbZclHandleReadAttr_3>

08003f3a <??ZbZclHandleReadAttr_2>:
 8003f3a:	2000      	movs	r0, #0

08003f3c <??ZbZclHandleReadAttr_3>:
 8003f3c:	f88d 000e 	strb.w	r0, [sp, #14]
 8003f40:	2001      	movs	r0, #1
 8003f42:	f88d 000f 	strb.w	r0, [sp, #15]
 8003f46:	88b0      	ldrh	r0, [r6, #4]
 8003f48:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003f4c:	79b0      	ldrb	r0, [r6, #6]
 8003f4e:	f88d 0012 	strb.w	r0, [sp, #18]
 8003f52:	2001      	movs	r0, #1
 8003f54:	f88d 0013 	strb.w	r0, [sp, #19]
 8003f58:	8b6a      	ldrh	r2, [r5, #26]
 8003f5a:	0021      	movs	r1, r4
 8003f5c:	a803      	add	r0, sp, #12
 8003f5e:	f000 fc9d 	bl	800489c <ZbZclAppendHeader>
 8003f62:	4680      	mov	r8, r0
 8003f64:	f1b8 0f00 	cmp.w	r8, #0
 8003f68:	d50c      	bpl.n	8003f84 <??ZbZclHandleReadAttr_4>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	464a      	mov	r2, r9
 8003f6e:	0021      	movs	r1, r4
 8003f70:	68a8      	ldr	r0, [r5, #8]
 8003f72:	f00e fc24 	bl	80127be <zb_heap_free>
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	0032      	movs	r2, r6
 8003f7a:	0039      	movs	r1, r7
 8003f7c:	0028      	movs	r0, r5
 8003f7e:	f00e fa94 	bl	80124aa <ZbZclSendDefaultResponse>
 8003f82:	e082      	b.n	800408a <??ZbZclHandleReadAttr_1>

08003f84 <??ZbZclHandleReadAttr_4>:
 8003f84:	46c3      	mov	fp, r8

08003f86 <??ZbZclHandleReadAttr_5>:
 8003f86:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8003f88:	2802      	cmp	r0, #2
 8003f8a:	d353      	bcc.n	8004034 <??ZbZclHandleReadAttr_6>

08003f8c <??ZbZclHandleReadAttr_7>:
 8003f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f8e:	f7fc f905 	bl	800019c <pletoh16>
 8003f92:	f8ad 000a 	strh.w	r0, [sp, #10]
 8003f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f98:	1c80      	adds	r0, r0, #2
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003f9c:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 8003f9e:	1e80      	subs	r0, r0, #2
 8003fa0:	8538      	strh	r0, [r7, #40]	; 0x28
 8003fa2:	f11b 0004 	adds.w	r0, fp, #4
 8003fa6:	8b69      	ldrh	r1, [r5, #26]
 8003fa8:	4288      	cmp	r0, r1
 8003faa:	d243      	bcs.n	8004034 <??ZbZclHandleReadAttr_6>

08003fac <??ZbZclHandleReadAttr_8>:
 8003fac:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003fb0:	eb04 000b 	add.w	r0, r4, fp
 8003fb4:	f7fc f93e 	bl	8000234 <putle16>
 8003fb8:	f11b 0b02 	adds.w	fp, fp, #2
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	9001      	str	r0, [sp, #4]
 8003fc0:	8b68      	ldrh	r0, [r5, #26]
 8003fc2:	ebb0 000b 	subs.w	r0, r0, fp
 8003fc6:	1e80      	subs	r0, r0, #2
 8003fc8:	9000      	str	r0, [sp, #0]
 8003fca:	eb04 000b 	add.w	r0, r4, fp
 8003fce:	1c83      	adds	r3, r0, #2
 8003fd0:	aa02      	add	r2, sp, #8
 8003fd2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003fd6:	0028      	movs	r0, r5
 8003fd8:	f7fc fab3 	bl	8000542 <ZbZclAttrRead>
 8003fdc:	4682      	mov	sl, r0
 8003fde:	f804 a00b 	strb.w	sl, [r4, fp]
 8003fe2:	f11b 0b01 	adds.w	fp, fp, #1
 8003fe6:	4650      	mov	r0, sl
 8003fe8:	b2c0      	uxtb	r0, r0
 8003fea:	2889      	cmp	r0, #137	; 0x89
 8003fec:	d022      	beq.n	8004034 <??ZbZclHandleReadAttr_6>

08003fee <??ZbZclHandleReadAttr_9>:
 8003fee:	4650      	mov	r0, sl
 8003ff0:	b2c0      	uxtb	r0, r0
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d1c7      	bne.n	8003f86 <??ZbZclHandleReadAttr_5>

08003ff6 <??ZbZclHandleReadAttr_10>:
 8003ff6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003ffa:	f804 000b 	strb.w	r0, [r4, fp]
 8003ffe:	f11b 0b01 	adds.w	fp, fp, #1
 8004002:	2300      	movs	r3, #0
 8004004:	8b6a      	ldrh	r2, [r5, #26]
 8004006:	ebb2 020b 	subs.w	r2, r2, fp
 800400a:	eb04 010b 	add.w	r1, r4, fp
 800400e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004012:	f7fd f8be 	bl	8001192 <ZbZclAttrParseLength>
 8004016:	4680      	mov	r8, r0
 8004018:	f1b8 0f00 	cmp.w	r8, #0
 800401c:	d507      	bpl.n	800402e <??ZbZclHandleReadAttr_11>
 800401e:	f1bb 0b01 	subs.w	fp, fp, #1
 8004022:	2087      	movs	r0, #135	; 0x87
 8004024:	eb04 010b 	add.w	r1, r4, fp
 8004028:	f801 0c01 	strb.w	r0, [r1, #-1]
 800402c:	e7ab      	b.n	8003f86 <??ZbZclHandleReadAttr_5>

0800402e <??ZbZclHandleReadAttr_11>:
 800402e:	eb18 0b0b 	adds.w	fp, r8, fp
 8004032:	e7a8      	b.n	8003f86 <??ZbZclHandleReadAttr_5>

08004034 <??ZbZclHandleReadAttr_6>:
 8004034:	003a      	movs	r2, r7
 8004036:	a906      	add	r1, sp, #24
 8004038:	0028      	movs	r0, r5
 800403a:	f7ff fed6 	bl	8003dea <ZbZclClusterInitApsdeReq>
 800403e:	a806      	add	r0, sp, #24
 8004040:	f117 0110 	adds.w	r1, r7, #16
 8004044:	2210      	movs	r2, #16
 8004046:	f010 fdd2 	bl	8014bee <__aeabi_memcpy>
 800404a:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 800404e:	f7ff fe64 	bl	8003d1a <ZbZclTxOptsFromSecurityStatus>
 8004052:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8004056:	7da8      	ldrb	r0, [r5, #22]
 8004058:	0700      	lsls	r0, r0, #28
 800405a:	d406      	bmi.n	800406a <??ZbZclHandleReadAttr_12>
 800405c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8004060:	f64f 70f7 	movw	r0, #65527	; 0xfff7
 8004064:	4001      	ands	r1, r0
 8004066:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c

0800406a <??ZbZclHandleReadAttr_12>:
 800406a:	940c      	str	r4, [sp, #48]	; 0x30
 800406c:	4658      	mov	r0, fp
 800406e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8004072:	2300      	movs	r3, #0
 8004074:	2200      	movs	r2, #0
 8004076:	a906      	add	r1, sp, #24
 8004078:	68a8      	ldr	r0, [r5, #8]
 800407a:	f00d fc1b 	bl	80118b4 <ZbApsdeDataReqCallback>
 800407e:	2300      	movs	r3, #0
 8004080:	464a      	mov	r2, r9
 8004082:	0021      	movs	r1, r4
 8004084:	68a8      	ldr	r0, [r5, #8]
 8004086:	f00e fb9a 	bl	80127be <zb_heap_free>

0800408a <??ZbZclHandleReadAttr_1>:
 800408a:	b013      	add	sp, #76	; 0x4c
 800408c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004090 <??DataTable1>:
 8004090:	0000 0000                                   ....

08004094 <ZbZclHandleWriteAttr>:
 8004094:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004098:	b0a3      	sub	sp, #140	; 0x8c
 800409a:	0016      	movs	r6, r2
 800409c:	2701      	movs	r7, #1
 800409e:	2500      	movs	r5, #0
 80040a0:	2400      	movs	r4, #0
 80040a2:	f05f 0800 	movs.w	r8, #0
 80040a6:	9824      	ldr	r0, [sp, #144]	; 0x90
 80040a8:	79c0      	ldrb	r0, [r0, #7]
 80040aa:	f88d 000a 	strb.w	r0, [sp, #10]
 80040ae:	f05f 0900 	movs.w	r9, #0
 80040b2:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80040b6:	2802      	cmp	r0, #2
 80040b8:	d007      	beq.n	80040ca <??ZbZclHandleWriteAttr_0>
 80040ba:	2803      	cmp	r0, #3
 80040bc:	d003      	beq.n	80040c6 <??ZbZclHandleWriteAttr_1>
 80040be:	2805      	cmp	r0, #5
 80040c0:	f000 80c3 	beq.w	800424a <??ZbZclHandleWriteAttr_2>
 80040c4:	e116      	b.n	80042f4 <??ZbZclHandleWriteAttr_3>

080040c6 <??ZbZclHandleWriteAttr_1>:
 80040c6:	f059 0901 	orrs.w	r9, r9, #1

080040ca <??ZbZclHandleWriteAttr_0>:
 80040ca:	2008      	movs	r0, #8
 80040cc:	9001      	str	r0, [sp, #4]
 80040ce:	2000      	movs	r0, #0
 80040d0:	9000      	str	r0, [sp, #0]
 80040d2:	f10d 0b14 	add.w	fp, sp, #20
 80040d6:	9a00      	ldr	r2, [sp, #0]
 80040d8:	9901      	ldr	r1, [sp, #4]
 80040da:	4658      	mov	r0, fp
 80040dc:	f001 fdee 	bl	8005cbc <__aeabi_memset>
 80040e0:	2000      	movs	r0, #0
 80040e2:	f88d 0014 	strb.w	r0, [sp, #20]
 80040e6:	9824      	ldr	r0, [sp, #144]	; 0x90
 80040e8:	7840      	ldrb	r0, [r0, #1]
 80040ea:	f88d 0015 	strb.w	r0, [sp, #21]
 80040ee:	9824      	ldr	r0, [sp, #144]	; 0x90
 80040f0:	7880      	ldrb	r0, [r0, #2]
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d101      	bne.n	80040fa <??ZbZclHandleWriteAttr_4>
 80040f6:	2001      	movs	r0, #1
 80040f8:	e000      	b.n	80040fc <??ZbZclHandleWriteAttr_5>

080040fa <??ZbZclHandleWriteAttr_4>:
 80040fa:	2000      	movs	r0, #0

080040fc <??ZbZclHandleWriteAttr_5>:
 80040fc:	f88d 0016 	strb.w	r0, [sp, #22]
 8004100:	2001      	movs	r0, #1
 8004102:	f88d 0017 	strb.w	r0, [sp, #23]
 8004106:	9824      	ldr	r0, [sp, #144]	; 0x90
 8004108:	8880      	ldrh	r0, [r0, #4]
 800410a:	f8ad 0018 	strh.w	r0, [sp, #24]
 800410e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8004110:	7980      	ldrb	r0, [r0, #6]
 8004112:	f88d 001a 	strb.w	r0, [sp, #26]
 8004116:	2004      	movs	r0, #4
 8004118:	f88d 001b 	strb.w	r0, [sp, #27]
 800411c:	2239      	movs	r2, #57	; 0x39
 800411e:	a907      	add	r1, sp, #28
 8004120:	a805      	add	r0, sp, #20
 8004122:	f000 fbbb 	bl	800489c <ZbZclAppendHeader>
 8004126:	0005      	movs	r5, r0
 8004128:	2d00      	cmp	r5, #0
 800412a:	d502      	bpl.n	8004132 <??ZbZclHandleWriteAttr_6>
 800412c:	2080      	movs	r0, #128	; 0x80
 800412e:	4680      	mov	r8, r0
 8004130:	e0e2      	b.n	80042f8 <??ZbZclHandleWriteAttr_7>

08004132 <??ZbZclHandleWriteAttr_6>:
 8004132:	0032      	movs	r2, r6
 8004134:	a916      	add	r1, sp, #88	; 0x58
 8004136:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004138:	f7ff fe57 	bl	8003dea <ZbZclClusterInitApsdeReq>
 800413c:	a816      	add	r0, sp, #88	; 0x58
 800413e:	f116 0110 	adds.w	r1, r6, #16
 8004142:	2210      	movs	r2, #16
 8004144:	f010 fd53 	bl	8014bee <__aeabi_memcpy>
 8004148:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
 800414c:	f7ff fde5 	bl	8003d1a <ZbZclTxOptsFromSecurityStatus>
 8004150:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
 8004154:	2000      	movs	r0, #0
 8004156:	4682      	mov	sl, r0
 8004158:	2080      	movs	r0, #128	; 0x80
 800415a:	0007      	movs	r7, r0
 800415c:	2001      	movs	r0, #1
 800415e:	f88d 0008 	strb.w	r0, [sp, #8]
 8004162:	2000      	movs	r0, #0
 8004164:	0004      	movs	r4, r0

08004166 <??ZbZclHandleWriteAttr_8>:
 8004166:	f11a 0003 	adds.w	r0, sl, #3
 800416a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800416c:	4288      	cmp	r0, r1
 800416e:	d302      	bcc.n	8004176 <??ZbZclHandleWriteAttr_9>
 8004170:	2080      	movs	r0, #128	; 0x80
 8004172:	0007      	movs	r7, r0
 8004174:	e05c      	b.n	8004230 <??ZbZclHandleWriteAttr_10>

08004176 <??ZbZclHandleWriteAttr_9>:
 8004176:	1ce8      	adds	r0, r5, #3
 8004178:	283a      	cmp	r0, #58	; 0x3a
 800417a:	d305      	bcc.n	8004188 <??ZbZclHandleWriteAttr_11>
 800417c:	2001      	movs	r0, #1
 800417e:	f88d 0008 	strb.w	r0, [sp, #8]
 8004182:	2089      	movs	r0, #137	; 0x89
 8004184:	0007      	movs	r7, r0
 8004186:	e053      	b.n	8004230 <??ZbZclHandleWriteAttr_10>

08004188 <??ZbZclHandleWriteAttr_11>:
 8004188:	2000      	movs	r0, #0
 800418a:	f88d 0008 	strb.w	r0, [sp, #8]
 800418e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004190:	4450      	add	r0, sl
 8004192:	f7fc f803 	bl	800019c <pletoh16>
 8004196:	f8ad 000c 	strh.w	r0, [sp, #12]
 800419a:	f11a 0a02 	adds.w	sl, sl, #2
 800419e:	4650      	mov	r0, sl
 80041a0:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80041a2:	5c09      	ldrb	r1, [r1, r0]
 80041a4:	f88d 1009 	strb.w	r1, [sp, #9]
 80041a8:	4682      	mov	sl, r0
 80041aa:	f11a 0a01 	adds.w	sl, sl, #1
 80041ae:	2300      	movs	r3, #0
 80041b0:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80041b2:	ebb2 020a 	subs.w	r2, r2, sl
 80041b6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80041b8:	eb00 010a 	add.w	r1, r0, sl
 80041bc:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80041c0:	f7fc ffe7 	bl	8001192 <ZbZclAttrParseLength>
 80041c4:	9004      	str	r0, [sp, #16]
 80041c6:	9804      	ldr	r0, [sp, #16]
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d50c      	bpl.n	80041e6 <??ZbZclHandleWriteAttr_12>
 80041cc:	1c64      	adds	r4, r4, #1
 80041ce:	2087      	movs	r0, #135	; 0x87
 80041d0:	a907      	add	r1, sp, #28
 80041d2:	5548      	strb	r0, [r1, r5]
 80041d4:	1c6d      	adds	r5, r5, #1
 80041d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80041da:	a807      	add	r0, sp, #28
 80041dc:	4428      	add	r0, r5
 80041de:	f7fc f829 	bl	8000234 <putle16>
 80041e2:	1cad      	adds	r5, r5, #2
 80041e4:	e024      	b.n	8004230 <??ZbZclHandleWriteAttr_10>

080041e6 <??ZbZclHandleWriteAttr_12>:
 80041e6:	4648      	mov	r0, r9
 80041e8:	b280      	uxth	r0, r0
 80041ea:	9001      	str	r0, [sp, #4]
 80041ec:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80041ee:	ebb0 000a 	subs.w	r0, r0, sl
 80041f2:	9000      	str	r0, [sp, #0]
 80041f4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80041f6:	eb00 030a 	add.w	r3, r0, sl
 80041fa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80041fe:	f116 0110 	adds.w	r1, r6, #16
 8004202:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004204:	f7fc faef 	bl	80007e6 <ZbZclAttrWrite>
 8004208:	0007      	movs	r7, r0
 800420a:	9804      	ldr	r0, [sp, #16]
 800420c:	eb10 0a0a 	adds.w	sl, r0, sl
 8004210:	0038      	movs	r0, r7
 8004212:	b2c0      	uxtb	r0, r0
 8004214:	2800      	cmp	r0, #0
 8004216:	d0a6      	beq.n	8004166 <??ZbZclHandleWriteAttr_8>
 8004218:	1c64      	adds	r4, r4, #1
 800421a:	a807      	add	r0, sp, #28
 800421c:	5547      	strb	r7, [r0, r5]
 800421e:	1c6d      	adds	r5, r5, #1
 8004220:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8004224:	a807      	add	r0, sp, #28
 8004226:	4428      	add	r0, r5
 8004228:	f7fc f804 	bl	8000234 <putle16>
 800422c:	1cad      	adds	r5, r5, #2
 800422e:	e79a      	b.n	8004166 <??ZbZclHandleWriteAttr_8>

08004230 <??ZbZclHandleWriteAttr_10>:
 8004230:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004234:	2800      	cmp	r0, #0
 8004236:	d001      	beq.n	800423c <??ZbZclHandleWriteAttr_13>
 8004238:	46b8      	mov	r8, r7
 800423a:	e05d      	b.n	80042f8 <??ZbZclHandleWriteAttr_7>

0800423c <??ZbZclHandleWriteAttr_13>:
 800423c:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004240:	2802      	cmp	r0, #2
 8004242:	d001      	beq.n	8004248 <??ZbZclHandleWriteAttr_14>
 8004244:	2c00      	cmp	r4, #0
 8004246:	d000      	beq.n	800424a <??ZbZclHandleWriteAttr_2>

08004248 <??ZbZclHandleWriteAttr_14>:
 8004248:	e056      	b.n	80042f8 <??ZbZclHandleWriteAttr_7>

0800424a <??ZbZclHandleWriteAttr_2>:
 800424a:	2000      	movs	r0, #0
 800424c:	4682      	mov	sl, r0
 800424e:	f05f 0b00 	movs.w	fp, #0

08004252 <??ZbZclHandleWriteAttr_15>:
 8004252:	f11a 0003 	adds.w	r0, sl, #3
 8004256:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8004258:	4288      	cmp	r0, r1
 800425a:	d302      	bcc.n	8004262 <??ZbZclHandleWriteAttr_16>
 800425c:	465c      	mov	r4, fp
 800425e:	1c64      	adds	r4, r4, #1
 8004260:	e03b      	b.n	80042da <??ZbZclHandleWriteAttr_17>

08004262 <??ZbZclHandleWriteAttr_16>:
 8004262:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004264:	4450      	add	r0, sl
 8004266:	f7fb ff99 	bl	800019c <pletoh16>
 800426a:	f8ad 000c 	strh.w	r0, [sp, #12]
 800426e:	f11a 0a02 	adds.w	sl, sl, #2
 8004272:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004274:	f810 000a 	ldrb.w	r0, [r0, sl]
 8004278:	f88d 0009 	strb.w	r0, [sp, #9]
 800427c:	f11a 0a01 	adds.w	sl, sl, #1
 8004280:	2300      	movs	r3, #0
 8004282:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8004284:	ebb2 020a 	subs.w	r2, r2, sl
 8004288:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800428a:	eb00 010a 	add.w	r1, r0, sl
 800428e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004292:	f7fc ff7e 	bl	8001192 <ZbZclAttrParseLength>
 8004296:	9004      	str	r0, [sp, #16]
 8004298:	9804      	ldr	r0, [sp, #16]
 800429a:	2800      	cmp	r0, #0
 800429c:	d502      	bpl.n	80042a4 <??ZbZclHandleWriteAttr_18>
 800429e:	465c      	mov	r4, fp
 80042a0:	1c64      	adds	r4, r4, #1
 80042a2:	e01a      	b.n	80042da <??ZbZclHandleWriteAttr_17>

080042a4 <??ZbZclHandleWriteAttr_18>:
 80042a4:	2000      	movs	r0, #0
 80042a6:	9001      	str	r0, [sp, #4]
 80042a8:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 80042aa:	ebb0 000a 	subs.w	r0, r0, sl
 80042ae:	9000      	str	r0, [sp, #0]
 80042b0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80042b2:	eb00 030a 	add.w	r3, r0, sl
 80042b6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80042ba:	f116 0110 	adds.w	r1, r6, #16
 80042be:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80042c0:	f7fc fa91 	bl	80007e6 <ZbZclAttrWrite>
 80042c4:	0007      	movs	r7, r0
 80042c6:	0038      	movs	r0, r7
 80042c8:	b2c0      	uxtb	r0, r0
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d001      	beq.n	80042d2 <??ZbZclHandleWriteAttr_19>
 80042ce:	f11b 0b01 	adds.w	fp, fp, #1

080042d2 <??ZbZclHandleWriteAttr_19>:
 80042d2:	9804      	ldr	r0, [sp, #16]
 80042d4:	eb10 0a0a 	adds.w	sl, r0, sl
 80042d8:	e7bb      	b.n	8004252 <??ZbZclHandleWriteAttr_15>

080042da <??ZbZclHandleWriteAttr_17>:
 80042da:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80042de:	2803      	cmp	r0, #3
 80042e0:	d105      	bne.n	80042ee <??ZbZclHandleWriteAttr_20>
 80042e2:	2c00      	cmp	r4, #0
 80042e4:	d002      	beq.n	80042ec <??ZbZclHandleWriteAttr_21>
 80042e6:	2001      	movs	r0, #1
 80042e8:	4680      	mov	r8, r0
 80042ea:	e005      	b.n	80042f8 <??ZbZclHandleWriteAttr_7>

080042ec <??ZbZclHandleWriteAttr_21>:
 80042ec:	e004      	b.n	80042f8 <??ZbZclHandleWriteAttr_7>

080042ee <??ZbZclHandleWriteAttr_20>:
 80042ee:	20ff      	movs	r0, #255	; 0xff
 80042f0:	4680      	mov	r8, r0
 80042f2:	e001      	b.n	80042f8 <??ZbZclHandleWriteAttr_7>

080042f4 <??ZbZclHandleWriteAttr_3>:
 80042f4:	2081      	movs	r0, #129	; 0x81
 80042f6:	4680      	mov	r8, r0

080042f8 <??ZbZclHandleWriteAttr_7>:
 80042f8:	4640      	mov	r0, r8
 80042fa:	b2c0      	uxtb	r0, r0
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d00b      	beq.n	8004318 <??ZbZclHandleWriteAttr_22>
 8004300:	4640      	mov	r0, r8
 8004302:	b2c0      	uxtb	r0, r0
 8004304:	28ff      	cmp	r0, #255	; 0xff
 8004306:	d006      	beq.n	8004316 <??ZbZclHandleWriteAttr_23>
 8004308:	4643      	mov	r3, r8
 800430a:	b2db      	uxtb	r3, r3
 800430c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800430e:	0031      	movs	r1, r6
 8004310:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004312:	f00e f8ca 	bl	80124aa <ZbZclSendDefaultResponse>

08004316 <??ZbZclHandleWriteAttr_23>:
 8004316:	e01a      	b.n	800434e <??ZbZclHandleWriteAttr_24>

08004318 <??ZbZclHandleWriteAttr_22>:
 8004318:	2c00      	cmp	r4, #0
 800431a:	d10c      	bne.n	8004336 <??ZbZclHandleWriteAttr_25>
 800431c:	2d00      	cmp	r5, #0
 800431e:	d106      	bne.n	800432e <??ZbZclHandleWriteAttr_26>
 8004320:	2301      	movs	r3, #1
 8004322:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004324:	0031      	movs	r1, r6
 8004326:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004328:	f00e f8bf 	bl	80124aa <ZbZclSendDefaultResponse>
 800432c:	e00f      	b.n	800434e <??ZbZclHandleWriteAttr_24>

0800432e <??ZbZclHandleWriteAttr_26>:
 800432e:	2000      	movs	r0, #0
 8004330:	a907      	add	r1, sp, #28
 8004332:	5548      	strb	r0, [r1, r5]
 8004334:	1c6d      	adds	r5, r5, #1

08004336 <??ZbZclHandleWriteAttr_25>:
 8004336:	a807      	add	r0, sp, #28
 8004338:	901c      	str	r0, [sp, #112]	; 0x70
 800433a:	0028      	movs	r0, r5
 800433c:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
 8004340:	2300      	movs	r3, #0
 8004342:	2200      	movs	r2, #0
 8004344:	a916      	add	r1, sp, #88	; 0x58
 8004346:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8004348:	6880      	ldr	r0, [r0, #8]
 800434a:	f00d fab3 	bl	80118b4 <ZbApsdeDataReqCallback>

0800434e <??ZbZclHandleWriteAttr_24>:
 800434e:	b025      	add	sp, #148	; 0x94
 8004350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004354 <zcl_handle_command>:
 8004354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004358:	0004      	movs	r4, r0
 800435a:	000d      	movs	r5, r1
 800435c:	0016      	movs	r6, r2
 800435e:	79f7      	ldrb	r7, [r6, #7]
 8004360:	f115 0110 	adds.w	r1, r5, #16
 8004364:	68a0      	ldr	r0, [r4, #8]
 8004366:	f00d fb3d 	bl	80119e4 <ZbApsAddrIsLocal>
 800436a:	2800      	cmp	r0, #0
 800436c:	d121      	bne.n	80043b2 <??zcl_handle_command_0>

0800436e <??zcl_handle_command_1>:
 800436e:	89a0      	ldrh	r0, [r4, #12]
 8004370:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004374:	d01d      	beq.n	80043b2 <??zcl_handle_command_0>

08004376 <??zcl_handle_command_2>:
 8004376:	0032      	movs	r2, r6
 8004378:	0029      	movs	r1, r5
 800437a:	0020      	movs	r0, r4
 800437c:	f7ff fc40 	bl	8003c00 <ZbZclClusterCheckMinSecurity>
 8004380:	2800      	cmp	r0, #0
 8004382:	d107      	bne.n	8004394 <??zcl_handle_command_3>
 8004384:	2301      	movs	r3, #1
 8004386:	0032      	movs	r2, r6
 8004388:	0029      	movs	r1, r5
 800438a:	0020      	movs	r0, r4
 800438c:	f00e f88d 	bl	80124aa <ZbZclSendDefaultResponse>
 8004390:	2001      	movs	r0, #1
 8004392:	e0f7      	b.n	8004584 <??zcl_handle_command_4>

08004394 <??zcl_handle_command_3>:
 8004394:	0032      	movs	r2, r6
 8004396:	0029      	movs	r1, r5
 8004398:	68a0      	ldr	r0, [r4, #8]
 800439a:	f00d ff6c 	bl	8012276 <ZbZclDeviceLogCheckAllow>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d107      	bne.n	80043b2 <??zcl_handle_command_0>
 80043a2:	2301      	movs	r3, #1
 80043a4:	0032      	movs	r2, r6
 80043a6:	0029      	movs	r1, r5
 80043a8:	0020      	movs	r0, r4
 80043aa:	f00e f87e 	bl	80124aa <ZbZclSendDefaultResponse>
 80043ae:	2001      	movs	r0, #1
 80043b0:	e0e8      	b.n	8004584 <??zcl_handle_command_4>

080043b2 <??zcl_handle_command_0>:
 80043b2:	7830      	ldrb	r0, [r6, #0]
 80043b4:	2801      	cmp	r0, #1
 80043b6:	d13a      	bne.n	800442e <??zcl_handle_command_6>
 80043b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d107      	bne.n	80043ce <??zcl_handle_command_7>
 80043be:	2381      	movs	r3, #129	; 0x81
 80043c0:	0032      	movs	r2, r6
 80043c2:	0029      	movs	r1, r5
 80043c4:	0020      	movs	r0, r4
 80043c6:	f00e f870 	bl	80124aa <ZbZclSendDefaultResponse>
 80043ca:	2001      	movs	r0, #1
 80043cc:	e0da      	b.n	8004584 <??zcl_handle_command_4>

080043ce <??zcl_handle_command_7>:
 80043ce:	7870      	ldrb	r0, [r6, #1]
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d00e      	beq.n	80043f2 <??zcl_handle_command_8>
 80043d4:	8a20      	ldrh	r0, [r4, #16]
 80043d6:	2800      	cmp	r0, #0
 80043d8:	d003      	beq.n	80043e2 <??zcl_handle_command_9>
 80043da:	8a20      	ldrh	r0, [r4, #16]
 80043dc:	88b1      	ldrh	r1, [r6, #4]
 80043de:	4288      	cmp	r0, r1
 80043e0:	d012      	beq.n	8004408 <??zcl_handle_command_10>

080043e2 <??zcl_handle_command_9>:
 80043e2:	2381      	movs	r3, #129	; 0x81
 80043e4:	0032      	movs	r2, r6
 80043e6:	0029      	movs	r1, r5
 80043e8:	0020      	movs	r0, r4
 80043ea:	f00e f85e 	bl	80124aa <ZbZclSendDefaultResponse>
 80043ee:	2001      	movs	r0, #1
 80043f0:	e0c8      	b.n	8004584 <??zcl_handle_command_4>

080043f2 <??zcl_handle_command_8>:
 80043f2:	8a20      	ldrh	r0, [r4, #16]
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d007      	beq.n	8004408 <??zcl_handle_command_10>
 80043f8:	2381      	movs	r3, #129	; 0x81
 80043fa:	0032      	movs	r2, r6
 80043fc:	0029      	movs	r1, r5
 80043fe:	0020      	movs	r0, r4
 8004400:	f00e f853 	bl	80124aa <ZbZclSendDefaultResponse>
 8004404:	2001      	movs	r0, #1
 8004406:	e0bd      	b.n	8004584 <??zcl_handle_command_4>

08004408 <??zcl_handle_command_10>:
 8004408:	002a      	movs	r2, r5
 800440a:	0031      	movs	r1, r6
 800440c:	0020      	movs	r0, r4
 800440e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004410:	4798      	blx	r3
 8004412:	4680      	mov	r8, r0
 8004414:	4640      	mov	r0, r8
 8004416:	b2c0      	uxtb	r0, r0
 8004418:	28ff      	cmp	r0, #255	; 0xff
 800441a:	d006      	beq.n	800442a <??zcl_handle_command_11>
 800441c:	4643      	mov	r3, r8
 800441e:	b2db      	uxtb	r3, r3
 8004420:	0032      	movs	r2, r6
 8004422:	0029      	movs	r1, r5
 8004424:	0020      	movs	r0, r4
 8004426:	f00e f840 	bl	80124aa <ZbZclSendDefaultResponse>

0800442a <??zcl_handle_command_11>:
 800442a:	2001      	movs	r0, #1
 800442c:	e0aa      	b.n	8004584 <??zcl_handle_command_4>

0800442e <??zcl_handle_command_6>:
 800442e:	7830      	ldrb	r0, [r6, #0]
 8004430:	2800      	cmp	r0, #0
 8004432:	d007      	beq.n	8004444 <??zcl_handle_command_12>
 8004434:	2385      	movs	r3, #133	; 0x85
 8004436:	0032      	movs	r2, r6
 8004438:	0029      	movs	r1, r5
 800443a:	0020      	movs	r0, r4
 800443c:	f00e f835 	bl	80124aa <ZbZclSendDefaultResponse>
 8004440:	2001      	movs	r0, #1
 8004442:	e09f      	b.n	8004584 <??zcl_handle_command_4>

08004444 <??zcl_handle_command_12>:
 8004444:	0038      	movs	r0, r7
 8004446:	b2c0      	uxtb	r0, r0
 8004448:	2800      	cmp	r0, #0
 800444a:	d01c      	beq.n	8004486 <??zcl_handle_command_13>
 800444c:	2801      	cmp	r0, #1
 800444e:	d03f      	beq.n	80044d0 <??zcl_handle_command_14>
 8004450:	2802      	cmp	r0, #2
 8004452:	d01e      	beq.n	8004492 <??zcl_handle_command_15>
 8004454:	2803      	cmp	r0, #3
 8004456:	d01c      	beq.n	8004492 <??zcl_handle_command_15>
 8004458:	2804      	cmp	r0, #4
 800445a:	d039      	beq.n	80044d0 <??zcl_handle_command_14>
 800445c:	2805      	cmp	r0, #5
 800445e:	d018      	beq.n	8004492 <??zcl_handle_command_15>
 8004460:	2806      	cmp	r0, #6
 8004462:	d01c      	beq.n	800449e <??zcl_handle_command_16>
 8004464:	2807      	cmp	r0, #7
 8004466:	d033      	beq.n	80044d0 <??zcl_handle_command_14>
 8004468:	2808      	cmp	r0, #8
 800446a:	d01e      	beq.n	80044aa <??zcl_handle_command_17>
 800446c:	2809      	cmp	r0, #9
 800446e:	d02f      	beq.n	80044d0 <??zcl_handle_command_14>
 8004470:	280a      	cmp	r0, #10
 8004472:	d020      	beq.n	80044b6 <??zcl_handle_command_18>
 8004474:	280b      	cmp	r0, #11
 8004476:	d02a      	beq.n	80044ce <??zcl_handle_command_19>
 8004478:	280c      	cmp	r0, #12
 800447a:	d022      	beq.n	80044c2 <??zcl_handle_command_20>
 800447c:	280d      	cmp	r0, #13
 800447e:	d027      	beq.n	80044d0 <??zcl_handle_command_14>
 8004480:	2810      	cmp	r0, #16
 8004482:	d025      	beq.n	80044d0 <??zcl_handle_command_14>
 8004484:	e025      	b.n	80044d2 <??zcl_handle_command_21>

08004486 <??zcl_handle_command_13>:
 8004486:	002a      	movs	r2, r5
 8004488:	0031      	movs	r1, r6
 800448a:	0020      	movs	r0, r4
 800448c:	f7ff fd27 	bl	8003ede <ZbZclHandleReadAttr>
 8004490:	e077      	b.n	8004582 <??zcl_handle_command_22>

08004492 <??zcl_handle_command_15>:
 8004492:	002a      	movs	r2, r5
 8004494:	0031      	movs	r1, r6
 8004496:	0020      	movs	r0, r4
 8004498:	f7ff fdfc 	bl	8004094 <ZbZclHandleWriteAttr>
 800449c:	e071      	b.n	8004582 <??zcl_handle_command_22>

0800449e <??zcl_handle_command_16>:
 800449e:	002a      	movs	r2, r5
 80044a0:	0031      	movs	r1, r6
 80044a2:	0020      	movs	r0, r4
 80044a4:	f7fe fd17 	bl	8002ed6 <ZbZclHandleConfigReport>
 80044a8:	e06b      	b.n	8004582 <??zcl_handle_command_22>

080044aa <??zcl_handle_command_17>:
 80044aa:	002a      	movs	r2, r5
 80044ac:	0031      	movs	r1, r6
 80044ae:	0020      	movs	r0, r4
 80044b0:	f7fe ff8c 	bl	80033cc <ZbZclHandleReadReport>
 80044b4:	e065      	b.n	8004582 <??zcl_handle_command_22>

080044b6 <??zcl_handle_command_18>:
 80044b6:	002a      	movs	r2, r5
 80044b8:	0031      	movs	r1, r6
 80044ba:	0020      	movs	r0, r4
 80044bc:	f7ff f8aa 	bl	8003614 <ZbZclHandleReportAttr>
 80044c0:	e05f      	b.n	8004582 <??zcl_handle_command_22>

080044c2 <??zcl_handle_command_20>:
 80044c2:	002a      	movs	r2, r5
 80044c4:	0031      	movs	r1, r6
 80044c6:	0020      	movs	r0, r4
 80044c8:	f7fb ff59 	bl	800037e <ZbZclAttrHandleDiscover>
 80044cc:	e059      	b.n	8004582 <??zcl_handle_command_22>

080044ce <??zcl_handle_command_19>:
 80044ce:	e058      	b.n	8004582 <??zcl_handle_command_22>

080044d0 <??zcl_handle_command_14>:
 80044d0:	e057      	b.n	8004582 <??zcl_handle_command_22>

080044d2 <??zcl_handle_command_21>:
 80044d2:	7870      	ldrb	r0, [r6, #1]
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d04e      	beq.n	8004576 <??zcl_handle_command_23>
 80044d8:	88b0      	ldrh	r0, [r6, #4]
 80044da:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80044de:	4288      	cmp	r0, r1
 80044e0:	d141      	bne.n	8004566 <??zcl_handle_command_24>
 80044e2:	f115 0110 	adds.w	r1, r5, #16
 80044e6:	68a0      	ldr	r0, [r4, #8]
 80044e8:	f00d fa7c 	bl	80119e4 <ZbApsAddrIsLocal>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d107      	bne.n	8004500 <??zcl_handle_command_25>
 80044f0:	2381      	movs	r3, #129	; 0x81
 80044f2:	0032      	movs	r2, r6
 80044f4:	0029      	movs	r1, r5
 80044f6:	0020      	movs	r0, r4
 80044f8:	f00d ffd7 	bl	80124aa <ZbZclSendDefaultResponse>
 80044fc:	2001      	movs	r0, #1
 80044fe:	e041      	b.n	8004584 <??zcl_handle_command_4>

08004500 <??zcl_handle_command_25>:
 8004500:	0038      	movs	r0, r7
 8004502:	b2c0      	uxtb	r0, r0
 8004504:	28f0      	cmp	r0, #240	; 0xf0
 8004506:	d108      	bne.n	800451a <??zcl_handle_command_26>
 8004508:	78b0      	ldrb	r0, [r6, #2]
 800450a:	2800      	cmp	r0, #0
 800450c:	d131      	bne.n	8004572 <??zcl_handle_command_27>
 800450e:	002a      	movs	r2, r5
 8004510:	0031      	movs	r1, r6
 8004512:	0020      	movs	r0, r4
 8004514:	f001 faaf 	bl	8005a76 <ZbZclHandleGetSceneData>
 8004518:	e02b      	b.n	8004572 <??zcl_handle_command_27>

0800451a <??zcl_handle_command_26>:
 800451a:	0038      	movs	r0, r7
 800451c:	b2c0      	uxtb	r0, r0
 800451e:	28f1      	cmp	r0, #241	; 0xf1
 8004520:	d108      	bne.n	8004534 <??zcl_handle_command_28>
 8004522:	78b0      	ldrb	r0, [r6, #2]
 8004524:	2800      	cmp	r0, #0
 8004526:	d124      	bne.n	8004572 <??zcl_handle_command_27>
 8004528:	002a      	movs	r2, r5
 800452a:	0031      	movs	r1, r6
 800452c:	0020      	movs	r0, r4
 800452e:	f001 fb21 	bl	8005b74 <ZbZclHandleSetSceneData>
 8004532:	e01e      	b.n	8004572 <??zcl_handle_command_27>

08004534 <??zcl_handle_command_28>:
 8004534:	0038      	movs	r0, r7
 8004536:	b2c0      	uxtb	r0, r0
 8004538:	28f2      	cmp	r0, #242	; 0xf2
 800453a:	d10d      	bne.n	8004558 <??zcl_handle_command_29>
 800453c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800453e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004540:	0020      	movs	r0, r4
 8004542:	f7ff fc7f 	bl	8003e44 <zcl_persist_handle_set>
 8004546:	4680      	mov	r8, r0
 8004548:	4643      	mov	r3, r8
 800454a:	b2db      	uxtb	r3, r3
 800454c:	0032      	movs	r2, r6
 800454e:	0029      	movs	r1, r5
 8004550:	0020      	movs	r0, r4
 8004552:	f00d ffaa 	bl	80124aa <ZbZclSendDefaultResponse>
 8004556:	e00c      	b.n	8004572 <??zcl_handle_command_27>

08004558 <??zcl_handle_command_29>:
 8004558:	2381      	movs	r3, #129	; 0x81
 800455a:	0032      	movs	r2, r6
 800455c:	0029      	movs	r1, r5
 800455e:	0020      	movs	r0, r4
 8004560:	f00d ffa3 	bl	80124aa <ZbZclSendDefaultResponse>
 8004564:	e005      	b.n	8004572 <??zcl_handle_command_27>

08004566 <??zcl_handle_command_24>:
 8004566:	2381      	movs	r3, #129	; 0x81
 8004568:	0032      	movs	r2, r6
 800456a:	0029      	movs	r1, r5
 800456c:	0020      	movs	r0, r4
 800456e:	f00d ff9c 	bl	80124aa <ZbZclSendDefaultResponse>

08004572 <??zcl_handle_command_27>:
 8004572:	2001      	movs	r0, #1
 8004574:	e006      	b.n	8004584 <??zcl_handle_command_4>

08004576 <??zcl_handle_command_23>:
 8004576:	2381      	movs	r3, #129	; 0x81
 8004578:	0032      	movs	r2, r6
 800457a:	0029      	movs	r1, r5
 800457c:	0020      	movs	r0, r4
 800457e:	f00d ff94 	bl	80124aa <ZbZclSendDefaultResponse>

08004582 <??zcl_handle_command_22>:
 8004582:	2001      	movs	r0, #1

08004584 <??zcl_handle_command_4>:
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004588 <zcl_cluster_data_ind>:
 8004588:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800458a:	0004      	movs	r4, r0
 800458c:	000d      	movs	r5, r1
 800458e:	002e      	movs	r6, r5
 8004590:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004592:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004594:	4668      	mov	r0, sp
 8004596:	f000 f8fe 	bl	8004796 <ZbZclParseHeader>
 800459a:	0007      	movs	r7, r0
 800459c:	2f00      	cmp	r7, #0
 800459e:	d501      	bpl.n	80045a4 <??zcl_cluster_data_ind_0>
 80045a0:	2000      	movs	r0, #0
 80045a2:	e00a      	b.n	80045ba <??zcl_cluster_data_ind_1>

080045a4 <??zcl_cluster_data_ind_0>:
 80045a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80045a6:	4438      	add	r0, r7
 80045a8:	6260      	str	r0, [r4, #36]	; 0x24
 80045aa:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80045ac:	1bc0      	subs	r0, r0, r7
 80045ae:	8520      	strh	r0, [r4, #40]	; 0x28
 80045b0:	466a      	mov	r2, sp
 80045b2:	0021      	movs	r1, r4
 80045b4:	0030      	movs	r0, r6
 80045b6:	f7ff fecd 	bl	8004354 <zcl_handle_command>

080045ba <??zcl_cluster_data_ind_1>:
 80045ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080045bc <zcl_cluster_alarm_data_ind>:
 80045bc:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c0:	b098      	sub	sp, #96	; 0x60
 80045c2:	0004      	movs	r4, r0
 80045c4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80045c6:	26ff      	movs	r6, #255	; 0xff
 80045c8:	2700      	movs	r7, #0
 80045ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80045cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045ce:	a802      	add	r0, sp, #8
 80045d0:	f000 f8e1 	bl	8004796 <ZbZclParseHeader>
 80045d4:	4680      	mov	r8, r0
 80045d6:	f1b8 0f00 	cmp.w	r8, #0
 80045da:	d501      	bpl.n	80045e0 <??zcl_cluster_alarm_data_ind_0>
 80045dc:	2000      	movs	r0, #0
 80045de:	e0d7      	b.n	8004790 <??zcl_cluster_alarm_data_ind_1>

080045e0 <??zcl_cluster_alarm_data_ind_0>:
 80045e0:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80045e2:	ebb0 0008 	subs.w	r0, r0, r8
 80045e6:	8520      	strh	r0, [r4, #40]	; 0x28
 80045e8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80045ea:	2809      	cmp	r0, #9
 80045ec:	d001      	beq.n	80045f2 <??zcl_cluster_alarm_data_ind_2>
 80045ee:	2000      	movs	r0, #0
 80045f0:	e0ce      	b.n	8004790 <??zcl_cluster_alarm_data_ind_1>

080045f2 <??zcl_cluster_alarm_data_ind_2>:
 80045f2:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d001      	beq.n	80045fe <??zcl_cluster_alarm_data_ind_3>
 80045fa:	2000      	movs	r0, #0
 80045fc:	e0c8      	b.n	8004790 <??zcl_cluster_alarm_data_ind_1>

080045fe <??zcl_cluster_alarm_data_ind_3>:
 80045fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004602:	2801      	cmp	r0, #1
 8004604:	d001      	beq.n	800460a <??zcl_cluster_alarm_data_ind_4>
 8004606:	2000      	movs	r0, #0
 8004608:	e0c2      	b.n	8004790 <??zcl_cluster_alarm_data_ind_1>

0800460a <??zcl_cluster_alarm_data_ind_4>:
 800460a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800460e:	2800      	cmp	r0, #0
 8004610:	d002      	beq.n	8004618 <??zcl_cluster_alarm_data_ind_5>
 8004612:	2801      	cmp	r0, #1
 8004614:	d02a      	beq.n	800466c <??zcl_cluster_alarm_data_ind_6>
 8004616:	e03f      	b.n	8004698 <??zcl_cluster_alarm_data_ind_7>

08004618 <??zcl_cluster_alarm_data_ind_5>:
 8004618:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800461a:	f810 0008 	ldrb.w	r0, [r0, r8]
 800461e:	f88d 0004 	strb.w	r0, [sp, #4]
 8004622:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004624:	4440      	add	r0, r8
 8004626:	1c40      	adds	r0, r0, #1
 8004628:	f7fb fdb8 	bl	800019c <pletoh16>
 800462c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8004630:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8004634:	0028      	movs	r0, r5
 8004636:	f7ff fa7f 	bl	8003b38 <ZbZclClusterGetClusterId>
 800463a:	4581      	cmp	r9, r0
 800463c:	d12c      	bne.n	8004698 <??zcl_cluster_alarm_data_ind_7>

0800463e <??zcl_cluster_alarm_data_ind_9>:
 800463e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8004640:	2800      	cmp	r0, #0
 8004642:	d104      	bne.n	800464e <??zcl_cluster_alarm_data_ind_10>
 8004644:	2081      	movs	r0, #129	; 0x81
 8004646:	0006      	movs	r6, r0
 8004648:	2001      	movs	r0, #1
 800464a:	0007      	movs	r7, r0
 800464c:	e024      	b.n	8004698 <??zcl_cluster_alarm_data_ind_7>

0800464e <??zcl_cluster_alarm_data_ind_10>:
 800464e:	a802      	add	r0, sp, #8
 8004650:	9000      	str	r0, [sp, #0]
 8004652:	0023      	movs	r3, r4
 8004654:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004658:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800465c:	0028      	movs	r0, r5
 800465e:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 8004662:	47e0      	blx	ip
 8004664:	0006      	movs	r6, r0
 8004666:	2001      	movs	r0, #1
 8004668:	0007      	movs	r7, r0
 800466a:	e015      	b.n	8004698 <??zcl_cluster_alarm_data_ind_7>

0800466c <??zcl_cluster_alarm_data_ind_6>:
 800466c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800466e:	2800      	cmp	r0, #0
 8004670:	d104      	bne.n	800467c <??zcl_cluster_alarm_data_ind_11>
 8004672:	2081      	movs	r0, #129	; 0x81
 8004674:	0006      	movs	r6, r0
 8004676:	2001      	movs	r0, #1
 8004678:	0007      	movs	r7, r0
 800467a:	e00d      	b.n	8004698 <??zcl_cluster_alarm_data_ind_7>

0800467c <??zcl_cluster_alarm_data_ind_11>:
 800467c:	a802      	add	r0, sp, #8
 800467e:	9000      	str	r0, [sp, #0]
 8004680:	0023      	movs	r3, r4
 8004682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004686:	21ff      	movs	r1, #255	; 0xff
 8004688:	0028      	movs	r0, r5
 800468a:	f8d5 c04c 	ldr.w	ip, [r5, #76]	; 0x4c
 800468e:	47e0      	blx	ip
 8004690:	0006      	movs	r6, r0
 8004692:	2001      	movs	r0, #1
 8004694:	0007      	movs	r7, r0
 8004696:	e7ff      	b.n	8004698 <??zcl_cluster_alarm_data_ind_7>

08004698 <??zcl_cluster_alarm_data_ind_7>:
 8004698:	0030      	movs	r0, r6
 800469a:	b2c0      	uxtb	r0, r0
 800469c:	28ff      	cmp	r0, #255	; 0xff
 800469e:	d076      	beq.n	800478e <??zcl_cluster_alarm_data_ind_12>
 80046a0:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80046a4:	f88d 0000 	strb.w	r0, [sp]
 80046a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80046ac:	f88d 0002 	strb.w	r0, [sp, #2]
 80046b0:	f88d 6003 	strb.w	r6, [sp, #3]
 80046b4:	f05f 0a08 	movs.w	sl, #8
 80046b8:	f05f 0b00 	movs.w	fp, #0
 80046bc:	f10d 0908 	add.w	r9, sp, #8
 80046c0:	465a      	mov	r2, fp
 80046c2:	4651      	mov	r1, sl
 80046c4:	4648      	mov	r0, r9
 80046c6:	f001 faf9 	bl	8005cbc <__aeabi_memset>
 80046ca:	2000      	movs	r0, #0
 80046cc:	f88d 0008 	strb.w	r0, [sp, #8]
 80046d0:	2000      	movs	r0, #0
 80046d2:	f88d 0009 	strb.w	r0, [sp, #9]
 80046d6:	2001      	movs	r0, #1
 80046d8:	f88d 000a 	strb.w	r0, [sp, #10]
 80046dc:	2001      	movs	r0, #1
 80046de:	f88d 000b 	strb.w	r0, [sp, #11]
 80046e2:	2000      	movs	r0, #0
 80046e4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80046e8:	f89d 0000 	ldrb.w	r0, [sp]
 80046ec:	f88d 000e 	strb.w	r0, [sp, #14]
 80046f0:	200b      	movs	r0, #11
 80046f2:	f88d 000f 	strb.w	r0, [sp, #15]
 80046f6:	2205      	movs	r2, #5
 80046f8:	a905      	add	r1, sp, #20
 80046fa:	a802      	add	r0, sp, #8
 80046fc:	f000 f8ce 	bl	800489c <ZbZclAppendHeader>
 8004700:	4681      	mov	r9, r0
 8004702:	f1b9 0f00 	cmp.w	r9, #0
 8004706:	d501      	bpl.n	800470c <??zcl_cluster_alarm_data_ind_13>
 8004708:	2089      	movs	r0, #137	; 0x89
 800470a:	e041      	b.n	8004790 <??zcl_cluster_alarm_data_ind_1>

0800470c <??zcl_cluster_alarm_data_ind_13>:
 800470c:	a805      	add	r0, sp, #20
 800470e:	9014      	str	r0, [sp, #80]	; 0x50
 8004710:	a814      	add	r0, sp, #80	; 0x50
 8004712:	f8c0 9004 	str.w	r9, [r0, #4]
 8004716:	f10d 0102 	add.w	r1, sp, #2
 800471a:	6081      	str	r1, [r0, #8]
 800471c:	2002      	movs	r0, #2
 800471e:	9017      	str	r0, [sp, #92]	; 0x5c
 8004720:	2030      	movs	r0, #48	; 0x30
 8004722:	9004      	str	r0, [sp, #16]
 8004724:	f05f 0a00 	movs.w	sl, #0
 8004728:	f10d 0b20 	add.w	fp, sp, #32
 800472c:	4652      	mov	r2, sl
 800472e:	9904      	ldr	r1, [sp, #16]
 8004730:	4658      	mov	r0, fp
 8004732:	f001 fac3 	bl	8005cbc <__aeabi_memset>
 8004736:	a808      	add	r0, sp, #32
 8004738:	f114 0110 	adds.w	r1, r4, #16
 800473c:	2210      	movs	r2, #16
 800473e:	f010 fa56 	bl	8014bee <__aeabi_memcpy>
 8004742:	8aa8      	ldrh	r0, [r5, #20]
 8004744:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8004748:	2009      	movs	r0, #9
 800474a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800474e:	7ba8      	ldrb	r0, [r5, #14]
 8004750:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8004754:	a814      	add	r0, sp, #80	; 0x50
 8004756:	900e      	str	r0, [sp, #56]	; 0x38
 8004758:	2002      	movs	r0, #2
 800475a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800475e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8004762:	f7ff fada 	bl	8003d1a <ZbZclTxOptsFromSecurityStatus>
 8004766:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 800476a:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 800476e:	f450 7080 	orrs.w	r0, r0, #256	; 0x100
 8004772:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8004776:	2000      	movs	r0, #0
 8004778:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
 800477c:	2000      	movs	r0, #0
 800477e:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
 8004782:	2300      	movs	r3, #0
 8004784:	2200      	movs	r2, #0
 8004786:	a908      	add	r1, sp, #32
 8004788:	68a8      	ldr	r0, [r5, #8]
 800478a:	f00d f893 	bl	80118b4 <ZbApsdeDataReqCallback>

0800478e <??zcl_cluster_alarm_data_ind_12>:
 800478e:	0038      	movs	r0, r7

08004790 <??zcl_cluster_alarm_data_ind_1>:
 8004790:	b019      	add	sp, #100	; 0x64
 8004792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004796 <ZbZclParseHeader>:
 8004796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800479a:	0004      	movs	r4, r0
 800479c:	000d      	movs	r5, r1
 800479e:	0016      	movs	r6, r2
 80047a0:	2700      	movs	r7, #0
 80047a2:	2e03      	cmp	r6, #3
 80047a4:	d202      	bcs.n	80047ac <??ZbZclParseHeader_0>
 80047a6:	f05f 30ff 	movs.w	r0, #4294967295
 80047aa:	e035      	b.n	8004818 <??ZbZclParseHeader_1>

080047ac <??ZbZclParseHeader_0>:
 80047ac:	f05f 0808 	movs.w	r8, #8
 80047b0:	f05f 0900 	movs.w	r9, #0
 80047b4:	46a2      	mov	sl, r4
 80047b6:	464a      	mov	r2, r9
 80047b8:	4641      	mov	r1, r8
 80047ba:	4650      	mov	r0, sl
 80047bc:	f001 fa7e 	bl	8005cbc <__aeabi_memset>
 80047c0:	5de8      	ldrb	r0, [r5, r7]
 80047c2:	f010 0003 	ands.w	r0, r0, #3
 80047c6:	7020      	strb	r0, [r4, #0]
 80047c8:	5de8      	ldrb	r0, [r5, r7]
 80047ca:	b2c0      	uxtb	r0, r0
 80047cc:	0880      	lsrs	r0, r0, #2
 80047ce:	f010 0001 	ands.w	r0, r0, #1
 80047d2:	7060      	strb	r0, [r4, #1]
 80047d4:	5de8      	ldrb	r0, [r5, r7]
 80047d6:	b2c0      	uxtb	r0, r0
 80047d8:	08c0      	lsrs	r0, r0, #3
 80047da:	f010 0001 	ands.w	r0, r0, #1
 80047de:	70a0      	strb	r0, [r4, #2]
 80047e0:	5de8      	ldrb	r0, [r5, r7]
 80047e2:	b2c0      	uxtb	r0, r0
 80047e4:	0900      	lsrs	r0, r0, #4
 80047e6:	f010 0001 	ands.w	r0, r0, #1
 80047ea:	70e0      	strb	r0, [r4, #3]
 80047ec:	1c7f      	adds	r7, r7, #1
 80047ee:	7860      	ldrb	r0, [r4, #1]
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d00a      	beq.n	800480a <??ZbZclParseHeader_2>
 80047f4:	2e05      	cmp	r6, #5
 80047f6:	d202      	bcs.n	80047fe <??ZbZclParseHeader_3>
 80047f8:	f05f 30ff 	movs.w	r0, #4294967295
 80047fc:	e00c      	b.n	8004818 <??ZbZclParseHeader_1>

080047fe <??ZbZclParseHeader_3>:
 80047fe:	eb05 0007 	add.w	r0, r5, r7
 8004802:	f7fb fccb 	bl	800019c <pletoh16>
 8004806:	80a0      	strh	r0, [r4, #4]
 8004808:	1cbf      	adds	r7, r7, #2

0800480a <??ZbZclParseHeader_2>:
 800480a:	5de8      	ldrb	r0, [r5, r7]
 800480c:	71a0      	strb	r0, [r4, #6]
 800480e:	1c7f      	adds	r7, r7, #1
 8004810:	5de8      	ldrb	r0, [r5, r7]
 8004812:	71e0      	strb	r0, [r4, #7]
 8004814:	1c7f      	adds	r7, r7, #1
 8004816:	0038      	movs	r0, r7

08004818 <??ZbZclParseHeader_1>:
 8004818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800481c <ZbZclPrependHeader>:
 800481c:	b470      	push	{r4, r5, r6}
 800481e:	0003      	movs	r3, r0
 8004820:	2400      	movs	r4, #0
 8004822:	0015      	movs	r5, r2
 8004824:	2600      	movs	r6, #0
 8004826:	7858      	ldrb	r0, [r3, #1]
 8004828:	2800      	cmp	r0, #0
 800482a:	d004      	beq.n	8004836 <??ZbZclPrependHeader_0>
 800482c:	2a05      	cmp	r2, #5
 800482e:	d202      	bcs.n	8004836 <??ZbZclPrependHeader_0>
 8004830:	f05f 30ff 	movs.w	r0, #4294967295
 8004834:	e030      	b.n	8004898 <??ZbZclPrependHeader_1>

08004836 <??ZbZclPrependHeader_0>:
 8004836:	2a03      	cmp	r2, #3
 8004838:	d202      	bcs.n	8004840 <??ZbZclPrependHeader_2>
 800483a:	f05f 30ff 	movs.w	r0, #4294967295
 800483e:	e02b      	b.n	8004898 <??ZbZclPrependHeader_1>

08004840 <??ZbZclPrependHeader_2>:
 8004840:	1e6d      	subs	r5, r5, #1
 8004842:	79d8      	ldrb	r0, [r3, #7]
 8004844:	5548      	strb	r0, [r1, r5]
 8004846:	1c76      	adds	r6, r6, #1
 8004848:	1e6d      	subs	r5, r5, #1
 800484a:	7998      	ldrb	r0, [r3, #6]
 800484c:	5548      	strb	r0, [r1, r5]
 800484e:	1c76      	adds	r6, r6, #1
 8004850:	7858      	ldrb	r0, [r3, #1]
 8004852:	2800      	cmp	r0, #0
 8004854:	d009      	beq.n	800486a <??ZbZclPrependHeader_3>
 8004856:	1e6d      	subs	r5, r5, #1
 8004858:	8898      	ldrh	r0, [r3, #4]
 800485a:	b280      	uxth	r0, r0
 800485c:	0a00      	lsrs	r0, r0, #8
 800485e:	5548      	strb	r0, [r1, r5]
 8004860:	1c76      	adds	r6, r6, #1
 8004862:	1e6d      	subs	r5, r5, #1
 8004864:	8898      	ldrh	r0, [r3, #4]
 8004866:	5548      	strb	r0, [r1, r5]
 8004868:	1c76      	adds	r6, r6, #1

0800486a <??ZbZclPrependHeader_3>:
 800486a:	7818      	ldrb	r0, [r3, #0]
 800486c:	f010 0003 	ands.w	r0, r0, #3
 8004870:	4304      	orrs	r4, r0
 8004872:	7858      	ldrb	r0, [r3, #1]
 8004874:	2800      	cmp	r0, #0
 8004876:	d001      	beq.n	800487c <??ZbZclPrependHeader_4>
 8004878:	f054 0404 	orrs.w	r4, r4, #4

0800487c <??ZbZclPrependHeader_4>:
 800487c:	7898      	ldrb	r0, [r3, #2]
 800487e:	2801      	cmp	r0, #1
 8004880:	d101      	bne.n	8004886 <??ZbZclPrependHeader_5>
 8004882:	f054 0408 	orrs.w	r4, r4, #8

08004886 <??ZbZclPrependHeader_5>:
 8004886:	78d8      	ldrb	r0, [r3, #3]
 8004888:	2801      	cmp	r0, #1
 800488a:	d101      	bne.n	8004890 <??ZbZclPrependHeader_6>
 800488c:	f054 0410 	orrs.w	r4, r4, #16

08004890 <??ZbZclPrependHeader_6>:
 8004890:	1e6d      	subs	r5, r5, #1
 8004892:	554c      	strb	r4, [r1, r5]
 8004894:	1c76      	adds	r6, r6, #1
 8004896:	0030      	movs	r0, r6

08004898 <??ZbZclPrependHeader_1>:
 8004898:	bc70      	pop	{r4, r5, r6}
 800489a:	4770      	bx	lr

0800489c <ZbZclAppendHeader>:
 800489c:	b430      	push	{r4, r5}
 800489e:	0003      	movs	r3, r0
 80048a0:	2400      	movs	r4, #0
 80048a2:	2500      	movs	r5, #0
 80048a4:	7858      	ldrb	r0, [r3, #1]
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d004      	beq.n	80048b4 <??ZbZclAppendHeader_0>
 80048aa:	2a05      	cmp	r2, #5
 80048ac:	d202      	bcs.n	80048b4 <??ZbZclAppendHeader_0>
 80048ae:	f05f 30ff 	movs.w	r0, #4294967295
 80048b2:	e02b      	b.n	800490c <??ZbZclAppendHeader_1>

080048b4 <??ZbZclAppendHeader_0>:
 80048b4:	2a03      	cmp	r2, #3
 80048b6:	d202      	bcs.n	80048be <??ZbZclAppendHeader_2>
 80048b8:	f05f 30ff 	movs.w	r0, #4294967295
 80048bc:	e026      	b.n	800490c <??ZbZclAppendHeader_1>

080048be <??ZbZclAppendHeader_2>:
 80048be:	7818      	ldrb	r0, [r3, #0]
 80048c0:	f010 0003 	ands.w	r0, r0, #3
 80048c4:	4304      	orrs	r4, r0
 80048c6:	7858      	ldrb	r0, [r3, #1]
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d001      	beq.n	80048d0 <??ZbZclAppendHeader_3>
 80048cc:	f054 0404 	orrs.w	r4, r4, #4

080048d0 <??ZbZclAppendHeader_3>:
 80048d0:	7898      	ldrb	r0, [r3, #2]
 80048d2:	2801      	cmp	r0, #1
 80048d4:	d101      	bne.n	80048da <??ZbZclAppendHeader_4>
 80048d6:	f054 0408 	orrs.w	r4, r4, #8

080048da <??ZbZclAppendHeader_4>:
 80048da:	78d8      	ldrb	r0, [r3, #3]
 80048dc:	2801      	cmp	r0, #1
 80048de:	d101      	bne.n	80048e4 <??ZbZclAppendHeader_5>
 80048e0:	f054 0410 	orrs.w	r4, r4, #16

080048e4 <??ZbZclAppendHeader_5>:
 80048e4:	554c      	strb	r4, [r1, r5]
 80048e6:	1c6d      	adds	r5, r5, #1
 80048e8:	7858      	ldrb	r0, [r3, #1]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d007      	beq.n	80048fe <??ZbZclAppendHeader_6>
 80048ee:	8898      	ldrh	r0, [r3, #4]
 80048f0:	5548      	strb	r0, [r1, r5]
 80048f2:	1c6d      	adds	r5, r5, #1
 80048f4:	8898      	ldrh	r0, [r3, #4]
 80048f6:	b280      	uxth	r0, r0
 80048f8:	0a00      	lsrs	r0, r0, #8
 80048fa:	5548      	strb	r0, [r1, r5]
 80048fc:	1c6d      	adds	r5, r5, #1

080048fe <??ZbZclAppendHeader_6>:
 80048fe:	7998      	ldrb	r0, [r3, #6]
 8004900:	5548      	strb	r0, [r1, r5]
 8004902:	1c6d      	adds	r5, r5, #1
 8004904:	79d8      	ldrb	r0, [r3, #7]
 8004906:	5548      	strb	r0, [r1, r5]
 8004908:	1c6d      	adds	r5, r5, #1
 800490a:	0028      	movs	r0, r5

0800490c <??ZbZclAppendHeader_1>:
 800490c:	bc30      	pop	{r4, r5}
 800490e:	4770      	bx	lr

08004910 <ZbZclThermClientAlloc>:
 8004910:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8004912:	0005      	movs	r5, r0
 8004914:	000e      	movs	r6, r1
 8004916:	2001      	movs	r0, #1
 8004918:	9000      	str	r0, [sp, #0]
 800491a:	0033      	movs	r3, r6
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f240 2201 	movw	r2, #513	; 0x201
 8004922:	216c      	movs	r1, #108	; 0x6c
 8004924:	0028      	movs	r0, r5
 8004926:	f000 fdbc 	bl	80054a2 <ZbZclClusterAlloc>
 800492a:	0004      	movs	r4, r0
 800492c:	2c00      	cmp	r4, #0
 800492e:	d101      	bne.n	8004934 <??ZbZclThermClientAlloc_0>
 8004930:	2000      	movs	r0, #0
 8004932:	e003      	b.n	800493c <??ZbZclThermClientAlloc_1>

08004934 <??ZbZclThermClientAlloc_0>:
 8004934:	0020      	movs	r0, r4
 8004936:	f000 fe44 	bl	80055c2 <ZbZclClusterAttach>
 800493a:	0020      	movs	r0, r4

0800493c <??ZbZclThermClientAlloc_1>:
 800493c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800493e <ZbZclThermClientSetpointRaiseLower>:
 800493e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	0004      	movs	r4, r0
 8004946:	000d      	movs	r5, r1
 8004948:	0016      	movs	r6, r2
 800494a:	001f      	movs	r7, r3
 800494c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004950:	2000      	movs	r0, #0
 8004952:	4669      	mov	r1, sp
 8004954:	7832      	ldrb	r2, [r6, #0]
 8004956:	0003      	movs	r3, r0
 8004958:	b29b      	uxth	r3, r3
 800495a:	54ca      	strb	r2, [r1, r3]
 800495c:	1c40      	adds	r0, r0, #1
 800495e:	7872      	ldrb	r2, [r6, #1]
 8004960:	0003      	movs	r3, r0
 8004962:	b29b      	uxth	r3, r3
 8004964:	54ca      	strb	r2, [r1, r3]
 8004966:	1c40      	adds	r0, r0, #1
 8004968:	f8ad 0002 	strh.w	r0, [sp, #2]
 800496c:	f05f 0920 	movs.w	r9, #32
 8004970:	f05f 0a00 	movs.w	sl, #0
 8004974:	f10d 0b08 	add.w	fp, sp, #8
 8004978:	4652      	mov	r2, sl
 800497a:	4649      	mov	r1, r9
 800497c:	4658      	mov	r0, fp
 800497e:	f001 f99d 	bl	8005cbc <__aeabi_memset>
 8004982:	a802      	add	r0, sp, #8
 8004984:	0029      	movs	r1, r5
 8004986:	2210      	movs	r2, #16
 8004988:	f010 f931 	bl	8014bee <__aeabi_memcpy>
 800498c:	2000      	movs	r0, #0
 800498e:	f88d 0018 	strb.w	r0, [sp, #24]
 8004992:	2000      	movs	r0, #0
 8004994:	f88d 0019 	strb.w	r0, [sp, #25]
 8004998:	4668      	mov	r0, sp
 800499a:	9007      	str	r0, [sp, #28]
 800499c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80049a0:	9008      	str	r0, [sp, #32]
 80049a2:	4643      	mov	r3, r8
 80049a4:	003a      	movs	r2, r7
 80049a6:	a902      	add	r1, sp, #8
 80049a8:	0020      	movs	r0, r4
 80049aa:	f00d fdb4 	bl	8012516 <ZbZclClusterCommandReq>
 80049ae:	b00b      	add	sp, #44	; 0x2c
 80049b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080049b4 <ZbZclThermClientSetWeeklySched>:
 80049b4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b8:	b099      	sub	sp, #100	; 0x64
 80049ba:	0014      	movs	r4, r2
 80049bc:	001d      	movs	r5, r3
 80049be:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80049c0:	2700      	movs	r7, #0
 80049c2:	7820      	ldrb	r0, [r4, #0]
 80049c4:	280b      	cmp	r0, #11
 80049c6:	d301      	bcc.n	80049cc <??ZbZclThermClientSetWeeklySched_0>
 80049c8:	2001      	movs	r0, #1
 80049ca:	e065      	b.n	8004a98 <??ZbZclThermClientSetWeeklySched_1>

080049cc <??ZbZclThermClientSetWeeklySched_0>:
 80049cc:	a808      	add	r0, sp, #32
 80049ce:	7821      	ldrb	r1, [r4, #0]
 80049d0:	003a      	movs	r2, r7
 80049d2:	b292      	uxth	r2, r2
 80049d4:	5481      	strb	r1, [r0, r2]
 80049d6:	1c7f      	adds	r7, r7, #1
 80049d8:	7861      	ldrb	r1, [r4, #1]
 80049da:	003a      	movs	r2, r7
 80049dc:	b292      	uxth	r2, r2
 80049de:	5481      	strb	r1, [r0, r2]
 80049e0:	1c7f      	adds	r7, r7, #1
 80049e2:	78a1      	ldrb	r1, [r4, #2]
 80049e4:	003a      	movs	r2, r7
 80049e6:	b292      	uxth	r2, r2
 80049e8:	5481      	strb	r1, [r0, r2]
 80049ea:	1c7f      	adds	r7, r7, #1
 80049ec:	f05f 0800 	movs.w	r8, #0

080049f0 <??ZbZclThermClientSetWeeklySched_2>:
 80049f0:	7820      	ldrb	r0, [r4, #0]
 80049f2:	4580      	cmp	r8, r0
 80049f4:	d230      	bcs.n	8004a58 <??ZbZclThermClientSetWeeklySched_3>
 80049f6:	f05f 0906 	movs.w	r9, #6
 80049fa:	fb09 f008 	mul.w	r0, r9, r8
 80049fe:	4420      	add	r0, r4
 8004a00:	8881      	ldrh	r1, [r0, #4]
 8004a02:	a808      	add	r0, sp, #32
 8004a04:	003a      	movs	r2, r7
 8004a06:	b292      	uxth	r2, r2
 8004a08:	4410      	add	r0, r2
 8004a0a:	f7fb fc13 	bl	8000234 <putle16>
 8004a0e:	1cbf      	adds	r7, r7, #2
 8004a10:	78a0      	ldrb	r0, [r4, #2]
 8004a12:	07c0      	lsls	r0, r0, #31
 8004a14:	d50c      	bpl.n	8004a30 <??ZbZclThermClientSetWeeklySched_4>
 8004a16:	fb09 f008 	mul.w	r0, r9, r8
 8004a1a:	4420      	add	r0, r4
 8004a1c:	88c0      	ldrh	r0, [r0, #6]
 8004a1e:	0001      	movs	r1, r0
 8004a20:	b289      	uxth	r1, r1
 8004a22:	a808      	add	r0, sp, #32
 8004a24:	003a      	movs	r2, r7
 8004a26:	b292      	uxth	r2, r2
 8004a28:	4410      	add	r0, r2
 8004a2a:	f7fb fc03 	bl	8000234 <putle16>
 8004a2e:	1cbf      	adds	r7, r7, #2

08004a30 <??ZbZclThermClientSetWeeklySched_4>:
 8004a30:	78a0      	ldrb	r0, [r4, #2]
 8004a32:	0780      	lsls	r0, r0, #30
 8004a34:	d50d      	bpl.n	8004a52 <??ZbZclThermClientSetWeeklySched_5>
 8004a36:	fb09 f908 	mul.w	r9, r9, r8
 8004a3a:	eb04 0009 	add.w	r0, r4, r9
 8004a3e:	8900      	ldrh	r0, [r0, #8]
 8004a40:	0001      	movs	r1, r0
 8004a42:	b289      	uxth	r1, r1
 8004a44:	a808      	add	r0, sp, #32
 8004a46:	003a      	movs	r2, r7
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	4410      	add	r0, r2
 8004a4c:	f7fb fbf2 	bl	8000234 <putle16>
 8004a50:	1cbf      	adds	r7, r7, #2

08004a52 <??ZbZclThermClientSetWeeklySched_5>:
 8004a52:	f118 0801 	adds.w	r8, r8, #1
 8004a56:	e7cb      	b.n	80049f0 <??ZbZclThermClientSetWeeklySched_2>

08004a58 <??ZbZclThermClientSetWeeklySched_3>:
 8004a58:	f05f 0920 	movs.w	r9, #32
 8004a5c:	f05f 0a00 	movs.w	sl, #0
 8004a60:	46eb      	mov	fp, sp
 8004a62:	4652      	mov	r2, sl
 8004a64:	4649      	mov	r1, r9
 8004a66:	4658      	mov	r0, fp
 8004a68:	f001 f928 	bl	8005cbc <__aeabi_memset>
 8004a6c:	4668      	mov	r0, sp
 8004a6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a70:	2210      	movs	r2, #16
 8004a72:	f010 f8bc 	bl	8014bee <__aeabi_memcpy>
 8004a76:	2001      	movs	r0, #1
 8004a78:	f88d 0010 	strb.w	r0, [sp, #16]
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f88d 0011 	strb.w	r0, [sp, #17]
 8004a82:	a808      	add	r0, sp, #32
 8004a84:	9005      	str	r0, [sp, #20]
 8004a86:	0038      	movs	r0, r7
 8004a88:	b280      	uxth	r0, r0
 8004a8a:	9006      	str	r0, [sp, #24]
 8004a8c:	0033      	movs	r3, r6
 8004a8e:	002a      	movs	r2, r5
 8004a90:	4669      	mov	r1, sp
 8004a92:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004a94:	f00d fd3f 	bl	8012516 <ZbZclClusterCommandReq>

08004a98 <??ZbZclThermClientSetWeeklySched_1>:
 8004a98:	b01b      	add	sp, #108	; 0x6c
 8004a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a9e <ZbZclThermClientGetWeeklySched>:
 8004a9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	0004      	movs	r4, r0
 8004aa6:	000d      	movs	r5, r1
 8004aa8:	0016      	movs	r6, r2
 8004aaa:	001f      	movs	r7, r3
 8004aac:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	4669      	mov	r1, sp
 8004ab4:	7832      	ldrb	r2, [r6, #0]
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	54ca      	strb	r2, [r1, r3]
 8004abc:	1c40      	adds	r0, r0, #1
 8004abe:	7872      	ldrb	r2, [r6, #1]
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	54ca      	strb	r2, [r1, r3]
 8004ac6:	1c40      	adds	r0, r0, #1
 8004ac8:	f8ad 0002 	strh.w	r0, [sp, #2]
 8004acc:	f05f 0920 	movs.w	r9, #32
 8004ad0:	f05f 0a00 	movs.w	sl, #0
 8004ad4:	f10d 0b08 	add.w	fp, sp, #8
 8004ad8:	4652      	mov	r2, sl
 8004ada:	4649      	mov	r1, r9
 8004adc:	4658      	mov	r0, fp
 8004ade:	f001 f8ed 	bl	8005cbc <__aeabi_memset>
 8004ae2:	a802      	add	r0, sp, #8
 8004ae4:	0029      	movs	r1, r5
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	f010 f881 	bl	8014bee <__aeabi_memcpy>
 8004aec:	2002      	movs	r0, #2
 8004aee:	f88d 0018 	strb.w	r0, [sp, #24]
 8004af2:	2001      	movs	r0, #1
 8004af4:	f88d 0019 	strb.w	r0, [sp, #25]
 8004af8:	4668      	mov	r0, sp
 8004afa:	9007      	str	r0, [sp, #28]
 8004afc:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004b00:	9008      	str	r0, [sp, #32]
 8004b02:	4643      	mov	r3, r8
 8004b04:	003a      	movs	r2, r7
 8004b06:	a902      	add	r1, sp, #8
 8004b08:	0020      	movs	r0, r4
 8004b0a:	f00d fd04 	bl	8012516 <ZbZclClusterCommandReq>
 8004b0e:	b00b      	add	sp, #44	; 0x2c
 8004b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b14 <ZbZclThermClientClearWeeklySched>:
 8004b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	b088      	sub	sp, #32
 8004b1a:	0004      	movs	r4, r0
 8004b1c:	000d      	movs	r5, r1
 8004b1e:	0016      	movs	r6, r2
 8004b20:	001f      	movs	r7, r3
 8004b22:	f05f 0820 	movs.w	r8, #32
 8004b26:	f05f 0900 	movs.w	r9, #0
 8004b2a:	46ea      	mov	sl, sp
 8004b2c:	464a      	mov	r2, r9
 8004b2e:	4641      	mov	r1, r8
 8004b30:	4650      	mov	r0, sl
 8004b32:	f001 f8c3 	bl	8005cbc <__aeabi_memset>
 8004b36:	4668      	mov	r0, sp
 8004b38:	0029      	movs	r1, r5
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	f010 f857 	bl	8014bee <__aeabi_memcpy>
 8004b40:	2003      	movs	r0, #3
 8004b42:	f88d 0010 	strb.w	r0, [sp, #16]
 8004b46:	2000      	movs	r0, #0
 8004b48:	f88d 0011 	strb.w	r0, [sp, #17]
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	9005      	str	r0, [sp, #20]
 8004b50:	2000      	movs	r0, #0
 8004b52:	9006      	str	r0, [sp, #24]
 8004b54:	003b      	movs	r3, r7
 8004b56:	0032      	movs	r2, r6
 8004b58:	4669      	mov	r1, sp
 8004b5a:	0020      	movs	r0, r4
 8004b5c:	f00d fcdb 	bl	8012516 <ZbZclClusterCommandReq>
 8004b60:	b008      	add	sp, #32
 8004b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004b66 <ZbZclThermClientGetRelayStatusLog>:
 8004b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	0004      	movs	r4, r0
 8004b6e:	000d      	movs	r5, r1
 8004b70:	0016      	movs	r6, r2
 8004b72:	001f      	movs	r7, r3
 8004b74:	f05f 0820 	movs.w	r8, #32
 8004b78:	f05f 0900 	movs.w	r9, #0
 8004b7c:	46ea      	mov	sl, sp
 8004b7e:	464a      	mov	r2, r9
 8004b80:	4641      	mov	r1, r8
 8004b82:	4650      	mov	r0, sl
 8004b84:	f001 f89a 	bl	8005cbc <__aeabi_memset>
 8004b88:	4668      	mov	r0, sp
 8004b8a:	0029      	movs	r1, r5
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	f010 f82e 	bl	8014bee <__aeabi_memcpy>
 8004b92:	2004      	movs	r0, #4
 8004b94:	f88d 0010 	strb.w	r0, [sp, #16]
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f88d 0011 	strb.w	r0, [sp, #17]
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	9005      	str	r0, [sp, #20]
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	9006      	str	r0, [sp, #24]
 8004ba6:	003b      	movs	r3, r7
 8004ba8:	0032      	movs	r2, r6
 8004baa:	4669      	mov	r1, sp
 8004bac:	0020      	movs	r0, r4
 8004bae:	f00d fcb2 	bl	8012516 <ZbZclClusterCommandReq>
 8004bb2:	b008      	add	sp, #32
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004bb8 <ZbZclAppendFloat>:
 8004bb8:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	b081      	sub	sp, #4
 8004bbe:	ed2d 8b04 	vpush	{d8-d9}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	eeb0 8a40 	vmov.f32	s16, s0
 8004bc8:	eef0 8a60 	vmov.f32	s17, s1
 8004bcc:	000e      	movs	r6, r1
 8004bce:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8004bd2:	2838      	cmp	r0, #56	; 0x38
 8004bd4:	d149      	bne.n	8004c6a <??ZbZclAppendFloat_0>
 8004bd6:	2400      	movs	r4, #0
 8004bd8:	2510      	movs	r5, #16
 8004bda:	f07f 070e 	mvns.w	r7, #14
 8004bde:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004be0:	2802      	cmp	r0, #2
 8004be2:	d202      	bcs.n	8004bea <??ZbZclAppendFloat_1>
 8004be4:	f05f 30ff 	movs.w	r0, #4294967295
 8004be8:	e120      	b.n	8004e2c <??ZbZclAppendFloat_2>

08004bea <??ZbZclAppendFloat_1>:
 8004bea:	003a      	movs	r2, r7
 8004bec:	0029      	movs	r1, r5
 8004bee:	4668      	mov	r0, sp
 8004bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8004bf4:	eef0 0a68 	vmov.f32	s1, s17
 8004bf8:	f000 fb08 	bl	800520c <ZbZclFloatFrexp>
 8004bfc:	eeb0 9a40 	vmov.f32	s18, s0
 8004c00:	eef0 9a60 	vmov.f32	s19, s1
 8004c04:	f8dd 8000 	ldr.w	r8, [sp]
 8004c08:	ebb8 0807 	subs.w	r8, r8, r7
 8004c0c:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8004c10:	f418 48f8 	ands.w	r8, r8, #31744	; 0x7c00
 8004c14:	ec51 0b19 	vmov	r0, r1, d9
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f001 fd18 	bl	8006650 <__aeabi_cdcmpeq>
 8004c20:	d210      	bcs.n	8004c44 <??ZbZclAppendFloat_3>
 8004c22:	ec51 0b19 	vmov	r0, r1, d9
 8004c26:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8004c2a:	f001 fd4b 	bl	80066c4 <__aeabi_d2iz>
 8004c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c32:	fb10 f101 	smulbb	r1, r0, r1
 8004c36:	0589      	lsls	r1, r1, #22
 8004c38:	0d89      	lsrs	r1, r1, #22
 8004c3a:	ea58 0101 	orrs.w	r1, r8, r1
 8004c3e:	f451 4100 	orrs.w	r1, r1, #32768	; 0x8000
 8004c42:	e00b      	b.n	8004c5c <??ZbZclAppendFloat_4>

08004c44 <??ZbZclAppendFloat_3>:
 8004c44:	ec51 0b19 	vmov	r0, r1, d9
 8004c48:	f001 fd3c 	bl	80066c4 <__aeabi_d2iz>
 8004c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c50:	fb10 f101 	smulbb	r1, r0, r1
 8004c54:	0589      	lsls	r1, r1, #22
 8004c56:	0d89      	lsrs	r1, r1, #22
 8004c58:	ea58 0101 	orrs.w	r1, r8, r1

08004c5c <??ZbZclAppendFloat_4>:
 8004c5c:	7031      	strb	r1, [r6, #0]
 8004c5e:	0008      	movs	r0, r1
 8004c60:	b280      	uxth	r0, r0
 8004c62:	0a00      	lsrs	r0, r0, #8
 8004c64:	7070      	strb	r0, [r6, #1]
 8004c66:	2002      	movs	r0, #2
 8004c68:	e0e0      	b.n	8004e2c <??ZbZclAppendFloat_2>

08004c6a <??ZbZclAppendFloat_0>:
 8004c6a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8004c6e:	2839      	cmp	r0, #57	; 0x39
 8004c70:	d14e      	bne.n	8004d10 <??ZbZclAppendFloat_5>
 8004c72:	2400      	movs	r4, #0
 8004c74:	2580      	movs	r5, #128	; 0x80
 8004c76:	f07f 077e 	mvns.w	r7, #126	; 0x7e
 8004c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c7c:	2804      	cmp	r0, #4
 8004c7e:	d202      	bcs.n	8004c86 <??ZbZclAppendFloat_6>
 8004c80:	f05f 30ff 	movs.w	r0, #4294967295
 8004c84:	e0d2      	b.n	8004e2c <??ZbZclAppendFloat_2>

08004c86 <??ZbZclAppendFloat_6>:
 8004c86:	003a      	movs	r2, r7
 8004c88:	0029      	movs	r1, r5
 8004c8a:	4668      	mov	r0, sp
 8004c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8004c90:	eef0 0a68 	vmov.f32	s1, s17
 8004c94:	f000 faba 	bl	800520c <ZbZclFloatFrexp>
 8004c98:	eeb0 9a40 	vmov.f32	s18, s0
 8004c9c:	eef0 9a60 	vmov.f32	s19, s1
 8004ca0:	f8dd 8000 	ldr.w	r8, [sp]
 8004ca4:	ebb8 0807 	subs.w	r8, r8, r7
 8004ca8:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 8004cac:	f018 48ff 	ands.w	r8, r8, #2139095040	; 0x7f800000
 8004cb0:	ec51 0b19 	vmov	r0, r1, d9
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f001 fcca 	bl	8006650 <__aeabi_cdcmpeq>
 8004cbc:	d210      	bcs.n	8004ce0 <??ZbZclAppendFloat_7>
 8004cbe:	ec51 0b19 	vmov	r0, r1, d9
 8004cc2:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8004cc6:	f001 fd25 	bl	8006714 <__aeabi_d2uiz>
 8004cca:	0001      	movs	r1, r0
 8004ccc:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 8004cd0:	4341      	muls	r1, r0
 8004cd2:	0249      	lsls	r1, r1, #9
 8004cd4:	0a49      	lsrs	r1, r1, #9
 8004cd6:	ea58 0101 	orrs.w	r1, r8, r1
 8004cda:	f051 4100 	orrs.w	r1, r1, #2147483648	; 0x80000000
 8004cde:	e00b      	b.n	8004cf8 <??ZbZclAppendFloat_8>

08004ce0 <??ZbZclAppendFloat_7>:
 8004ce0:	ec51 0b19 	vmov	r0, r1, d9
 8004ce4:	f001 fd16 	bl	8006714 <__aeabi_d2uiz>
 8004ce8:	0001      	movs	r1, r0
 8004cea:	f45f 0000 	movs.w	r0, #8388608	; 0x800000
 8004cee:	4341      	muls	r1, r0
 8004cf0:	0249      	lsls	r1, r1, #9
 8004cf2:	0a49      	lsrs	r1, r1, #9
 8004cf4:	ea58 0101 	orrs.w	r1, r8, r1

08004cf8 <??ZbZclAppendFloat_8>:
 8004cf8:	7031      	strb	r1, [r6, #0]
 8004cfa:	0008      	movs	r0, r1
 8004cfc:	0a00      	lsrs	r0, r0, #8
 8004cfe:	7070      	strb	r0, [r6, #1]
 8004d00:	0008      	movs	r0, r1
 8004d02:	0c00      	lsrs	r0, r0, #16
 8004d04:	70b0      	strb	r0, [r6, #2]
 8004d06:	0008      	movs	r0, r1
 8004d08:	0e00      	lsrs	r0, r0, #24
 8004d0a:	70f0      	strb	r0, [r6, #3]
 8004d0c:	2004      	movs	r0, #4
 8004d0e:	e08d      	b.n	8004e2c <??ZbZclAppendFloat_2>

08004d10 <??ZbZclAppendFloat_5>:
 8004d10:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8004d14:	283a      	cmp	r0, #58	; 0x3a
 8004d16:	f040 8087 	bne.w	8004e28 <??ZbZclAppendFloat_9>
 8004d1a:	2400      	movs	r4, #0
 8004d1c:	2500      	movs	r5, #0
 8004d1e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8004d22:	f8df 8744 	ldr.w	r8, [pc, #1860]	; 8005468 <??DataTable3>
 8004d26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004d28:	2808      	cmp	r0, #8
 8004d2a:	d202      	bcs.n	8004d32 <??ZbZclAppendFloat_10>
 8004d2c:	f05f 30ff 	movs.w	r0, #4294967295
 8004d30:	e07c      	b.n	8004e2c <??ZbZclAppendFloat_2>

08004d32 <??ZbZclAppendFloat_10>:
 8004d32:	4642      	mov	r2, r8
 8004d34:	0039      	movs	r1, r7
 8004d36:	4668      	mov	r0, sp
 8004d38:	eeb0 0a48 	vmov.f32	s0, s16
 8004d3c:	eef0 0a68 	vmov.f32	s1, s17
 8004d40:	f000 fa64 	bl	800520c <ZbZclFloatFrexp>
 8004d44:	eeb0 9a40 	vmov.f32	s18, s0
 8004d48:	eef0 9a60 	vmov.f32	s19, s1
 8004d4c:	9800      	ldr	r0, [sp, #0]
 8004d4e:	17c1      	asrs	r1, r0, #31
 8004d50:	ea5f 79e8 	movs.w	r9, r8, asr #31
 8004d54:	ebb0 0008 	subs.w	r0, r0, r8
 8004d58:	eb71 0109 	sbcs.w	r1, r1, r9
 8004d5c:	0501      	lsls	r1, r0, #20
 8004d5e:	2000      	movs	r0, #0
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8df 3708 	ldr.w	r3, [pc, #1800]	; 800546c <??DataTable3_1>
 8004d66:	4010      	ands	r0, r2
 8004d68:	4019      	ands	r1, r3
 8004d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d6e:	ec51 0b19 	vmov	r0, r1, d9
 8004d72:	2200      	movs	r2, #0
 8004d74:	2300      	movs	r3, #0
 8004d76:	f001 fc6b 	bl	8006650 <__aeabi_cdcmpeq>
 8004d7a:	d21f      	bcs.n	8004dbc <??ZbZclAppendFloat_11>
 8004d7c:	ec51 0b19 	vmov	r0, r1, d9
 8004d80:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8004d84:	f001 fd16 	bl	80067b4 <__aeabi_d2ulz>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 8004d8e:	fba2 ab00 	umull	sl, fp, r2, r0
 8004d92:	fb02 bb01 	mla	fp, r2, r1, fp
 8004d96:	fb03 bb00 	mla	fp, r3, r0, fp
 8004d9a:	f05f 30ff 	movs.w	r0, #4294967295
 8004d9e:	f8df 16d0 	ldr.w	r1, [pc, #1744]	; 8005470 <??DataTable3_2>
 8004da2:	ea1a 0000 	ands.w	r0, sl, r0
 8004da6:	ea1b 0101 	ands.w	r1, fp, r1
 8004daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dae:	4310      	orrs	r0, r2
 8004db0:	4319      	orrs	r1, r3
 8004db2:	f050 0200 	orrs.w	r2, r0, #0
 8004db6:	f051 4300 	orrs.w	r3, r1, #2147483648	; 0x80000000
 8004dba:	e018      	b.n	8004dee <??ZbZclAppendFloat_12>

08004dbc <??ZbZclAppendFloat_11>:
 8004dbc:	ec51 0b19 	vmov	r0, r1, d9
 8004dc0:	f001 fcf8 	bl	80067b4 <__aeabi_d2ulz>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f45f 1380 	movs.w	r3, #1048576	; 0x100000
 8004dca:	fba2 ab00 	umull	sl, fp, r2, r0
 8004dce:	fb02 bb01 	mla	fp, r2, r1, fp
 8004dd2:	fb03 bb00 	mla	fp, r3, r0, fp
 8004dd6:	f05f 30ff 	movs.w	r0, #4294967295
 8004dda:	f8df 1694 	ldr.w	r1, [pc, #1684]	; 8005470 <??DataTable3_2>
 8004dde:	ea1a 0000 	ands.w	r0, sl, r0
 8004de2:	ea1b 0101 	ands.w	r1, fp, r1
 8004de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dea:	4302      	orrs	r2, r0
 8004dec:	430b      	orrs	r3, r1

08004dee <??ZbZclAppendFloat_12>:
 8004dee:	7032      	strb	r2, [r6, #0]
 8004df0:	0010      	movs	r0, r2
 8004df2:	b280      	uxth	r0, r0
 8004df4:	0a00      	lsrs	r0, r0, #8
 8004df6:	7070      	strb	r0, [r6, #1]
 8004df8:	0010      	movs	r0, r2
 8004dfa:	0c00      	lsrs	r0, r0, #16
 8004dfc:	70b0      	strb	r0, [r6, #2]
 8004dfe:	0010      	movs	r0, r2
 8004e00:	0e00      	lsrs	r0, r0, #24
 8004e02:	70f0      	strb	r0, [r6, #3]
 8004e04:	7133      	strb	r3, [r6, #4]
 8004e06:	0010      	movs	r0, r2
 8004e08:	0019      	movs	r1, r3
 8004e0a:	0a08      	lsrs	r0, r1, #8
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	7170      	strb	r0, [r6, #5]
 8004e10:	0010      	movs	r0, r2
 8004e12:	0019      	movs	r1, r3
 8004e14:	0c08      	lsrs	r0, r1, #16
 8004e16:	2100      	movs	r1, #0
 8004e18:	71b0      	strb	r0, [r6, #6]
 8004e1a:	0010      	movs	r0, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	0e08      	lsrs	r0, r1, #24
 8004e20:	2100      	movs	r1, #0
 8004e22:	71f0      	strb	r0, [r6, #7]
 8004e24:	2008      	movs	r0, #8
 8004e26:	e001      	b.n	8004e2c <??ZbZclAppendFloat_2>

08004e28 <??ZbZclAppendFloat_9>:
 8004e28:	f05f 30ff 	movs.w	r0, #4294967295

08004e2c <??ZbZclAppendFloat_2>:
 8004e2c:	b004      	add	sp, #16
 8004e2e:	ecbd 8b04 	vpop	{d8-d9}
 8004e32:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e36 <ZbZclParseFloat>:
 8004e36:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	ed2d 8b02 	vpush	{d8}
 8004e3e:	000e      	movs	r6, r1
 8004e40:	4691      	mov	r9, r2
 8004e42:	2000      	movs	r0, #0
 8004e44:	f889 0000 	strb.w	r0, [r9]
 8004e48:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004e4c:	2838      	cmp	r0, #56	; 0x38
 8004e4e:	d006      	beq.n	8004e5e <??ZbZclParseFloat_0>
 8004e50:	f0c0 8138 	bcc.w	80050c4 <??ZbZclParseFloat_1>
 8004e54:	283a      	cmp	r0, #58	; 0x3a
 8004e56:	f000 80ad 	beq.w	8004fb4 <??ZbZclParseFloat_2>
 8004e5a:	d354      	bcc.n	8004f06 <??ZbZclParseFloat_3>
 8004e5c:	e132      	b.n	80050c4 <??ZbZclParseFloat_1>

08004e5e <??ZbZclParseFloat_0>:
 8004e5e:	0030      	movs	r0, r6
 8004e60:	f7fb f99c 	bl	800019c <pletoh16>
 8004e64:	0004      	movs	r4, r0
 8004e66:	0020      	movs	r0, r4
 8004e68:	b280      	uxth	r0, r0
 8004e6a:	f410 40f8 	ands.w	r0, r0, #31744	; 0x7c00
 8004e6e:	f5b0 4ff8 	cmp.w	r0, #31744	; 0x7c00
 8004e72:	d121      	bne.n	8004eb8 <??ZbZclParseFloat_4>
 8004e74:	05a0      	lsls	r0, r4, #22
 8004e76:	d008      	beq.n	8004e8a <??ZbZclParseFloat_5>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f001 fab0 	bl	80063e4 <__aeabi_ddiv>
 8004e84:	ec41 0b10 	vmov	d0, r0, r1
 8004e88:	e127      	b.n	80050da <??ZbZclParseFloat_6>

08004e8a <??ZbZclParseFloat_5>:
 8004e8a:	0420      	lsls	r0, r4, #16
 8004e8c:	d50a      	bpl.n	8004ea4 <??ZbZclParseFloat_7>
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f8df 15e0 	ldr.w	r1, [pc, #1504]	; 8005474 <??DataTable3_3>
 8004e94:	2200      	movs	r2, #0
 8004e96:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8004e9a:	f001 faa3 	bl	80063e4 <__aeabi_ddiv>
 8004e9e:	ec41 0b10 	vmov	d0, r0, r1
 8004ea2:	e008      	b.n	8004eb6 <??ZbZclParseFloat_8>

08004ea4 <??ZbZclParseFloat_7>:
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f8df 15cc 	ldr.w	r1, [pc, #1484]	; 8005474 <??DataTable3_3>
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2300      	movs	r3, #0
 8004eae:	f001 fa99 	bl	80063e4 <__aeabi_ddiv>
 8004eb2:	ec41 0b10 	vmov	d0, r0, r1

08004eb6 <??ZbZclParseFloat_8>:
 8004eb6:	e110      	b.n	80050da <??ZbZclParseFloat_6>

08004eb8 <??ZbZclParseFloat_4>:
 8004eb8:	f3c4 2884 	ubfx	r8, r4, #10, #5
 8004ebc:	4645      	mov	r5, r8
 8004ebe:	b2ad      	uxth	r5, r5
 8004ec0:	3d0f      	subs	r5, #15
 8004ec2:	3d0a      	subs	r5, #10
 8004ec4:	f414 4ff8 	tst.w	r4, #31744	; 0x7c00
 8004ec8:	d004      	beq.n	8004ed4 <??ZbZclParseFloat_9>
 8004eca:	05a7      	lsls	r7, r4, #22
 8004ecc:	0dbf      	lsrs	r7, r7, #22
 8004ece:	f517 6780 	adds.w	r7, r7, #1024	; 0x400
 8004ed2:	e002      	b.n	8004eda <??ZbZclParseFloat_10>

08004ed4 <??ZbZclParseFloat_9>:
 8004ed4:	1c6d      	adds	r5, r5, #1
 8004ed6:	05a7      	lsls	r7, r4, #22
 8004ed8:	0dbf      	lsrs	r7, r7, #22

08004eda <??ZbZclParseFloat_10>:
 8004eda:	0038      	movs	r0, r7
 8004edc:	b280      	uxth	r0, r0
 8004ede:	f001 f8dd 	bl	800609c <__aeabi_ui2d>
 8004ee2:	ec41 0b18 	vmov	d8, r0, r1
 8004ee6:	0420      	lsls	r0, r4, #16
 8004ee8:	d505      	bpl.n	8004ef6 <??ZbZclParseFloat_11>
 8004eea:	ec51 0b18 	vmov	r0, r1, d8
 8004eee:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8004ef2:	ec41 0b18 	vmov	d8, r0, r1

08004ef6 <??ZbZclParseFloat_11>:
 8004ef6:	0028      	movs	r0, r5
 8004ef8:	eeb0 0a48 	vmov.f32	s0, s16
 8004efc:	eef0 0a68 	vmov.f32	s1, s17
 8004f00:	f000 f8ef 	bl	80050e2 <ZbZclFloatLdexp>
 8004f04:	e0e9      	b.n	80050da <??ZbZclParseFloat_6>

08004f06 <??ZbZclParseFloat_3>:
 8004f06:	0030      	movs	r0, r6
 8004f08:	f7fb f959 	bl	80001be <pletoh32>
 8004f0c:	0004      	movs	r4, r0
 8004f0e:	f014 40ff 	ands.w	r0, r4, #2139095040	; 0x7f800000
 8004f12:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004f16:	d121      	bne.n	8004f5c <??ZbZclParseFloat_12>
 8004f18:	0260      	lsls	r0, r4, #9
 8004f1a:	d008      	beq.n	8004f2e <??ZbZclParseFloat_13>
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	2100      	movs	r1, #0
 8004f20:	2200      	movs	r2, #0
 8004f22:	2300      	movs	r3, #0
 8004f24:	f001 fa5e 	bl	80063e4 <__aeabi_ddiv>
 8004f28:	ec41 0b10 	vmov	d0, r0, r1
 8004f2c:	e0d5      	b.n	80050da <??ZbZclParseFloat_6>

08004f2e <??ZbZclParseFloat_13>:
 8004f2e:	2c00      	cmp	r4, #0
 8004f30:	d50a      	bpl.n	8004f48 <??ZbZclParseFloat_14>
 8004f32:	2000      	movs	r0, #0
 8004f34:	f8df 153c 	ldr.w	r1, [pc, #1340]	; 8005474 <??DataTable3_3>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 8004f3e:	f001 fa51 	bl	80063e4 <__aeabi_ddiv>
 8004f42:	ec41 0b10 	vmov	d0, r0, r1
 8004f46:	e008      	b.n	8004f5a <??ZbZclParseFloat_15>

08004f48 <??ZbZclParseFloat_14>:
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 8005474 <??DataTable3_3>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	f001 fa47 	bl	80063e4 <__aeabi_ddiv>
 8004f56:	ec41 0b10 	vmov	d0, r0, r1

08004f5a <??ZbZclParseFloat_15>:
 8004f5a:	e0be      	b.n	80050da <??ZbZclParseFloat_6>

08004f5c <??ZbZclParseFloat_12>:
 8004f5c:	0025      	movs	r5, r4
 8004f5e:	0ded      	lsrs	r5, r5, #23
 8004f60:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8004f64:	002f      	movs	r7, r5
 8004f66:	b2bf      	uxth	r7, r7
 8004f68:	3f7f      	subs	r7, #127	; 0x7f
 8004f6a:	3f17      	subs	r7, #23
 8004f6c:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 8004f70:	d006      	beq.n	8004f80 <??ZbZclParseFloat_16>
 8004f72:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8004f76:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8004f7a:	f518 0800 	adds.w	r8, r8, #8388608	; 0x800000
 8004f7e:	e004      	b.n	8004f8a <??ZbZclParseFloat_17>

08004f80 <??ZbZclParseFloat_16>:
 8004f80:	1c7f      	adds	r7, r7, #1
 8004f82:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8004f86:	ea5f 2858 	movs.w	r8, r8, lsr #9

08004f8a <??ZbZclParseFloat_17>:
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	f001 f886 	bl	800609c <__aeabi_ui2d>
 8004f90:	ec41 0b18 	vmov	d8, r0, r1
 8004f94:	2c00      	cmp	r4, #0
 8004f96:	d505      	bpl.n	8004fa4 <??ZbZclParseFloat_18>
 8004f98:	ec51 0b18 	vmov	r0, r1, d8
 8004f9c:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8004fa0:	ec41 0b18 	vmov	d8, r0, r1

08004fa4 <??ZbZclParseFloat_18>:
 8004fa4:	0038      	movs	r0, r7
 8004fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8004faa:	eef0 0a68 	vmov.f32	s1, s17
 8004fae:	f000 f898 	bl	80050e2 <ZbZclFloatLdexp>
 8004fb2:	e092      	b.n	80050da <??ZbZclParseFloat_6>

08004fb4 <??ZbZclParseFloat_2>:
 8004fb4:	0030      	movs	r0, r6
 8004fb6:	f7fb f92f 	bl	8000218 <pletoh64>
 8004fba:	0004      	movs	r4, r0
 8004fbc:	000d      	movs	r5, r1
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 800546c <??DataTable3_1>
 8004fc4:	ea14 0200 	ands.w	r2, r4, r0
 8004fc8:	ea15 0301 	ands.w	r3, r5, r1
 8004fcc:	f05f 0a00 	movs.w	sl, #0
 8004fd0:	f8df b498 	ldr.w	fp, [pc, #1176]	; 800546c <??DataTable3_1>
 8004fd4:	455b      	cmp	r3, fp
 8004fd6:	d131      	bne.n	800503c <??ZbZclParseFloat_19>
 8004fd8:	4552      	cmp	r2, sl
 8004fda:	d12f      	bne.n	800503c <??ZbZclParseFloat_19>
 8004fdc:	f05f 30ff 	movs.w	r0, #4294967295
 8004fe0:	f8df 148c 	ldr.w	r1, [pc, #1164]	; 8005470 <??DataTable3_2>
 8004fe4:	4020      	ands	r0, r4
 8004fe6:	4029      	ands	r1, r5
 8004fe8:	2900      	cmp	r1, #0
 8004fea:	d101      	bne.n	8004ff0 <??ZbZclParseFloat_20>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d008      	beq.n	8005002 <??ZbZclParseFloat_21>

08004ff0 <??ZbZclParseFloat_20>:
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f001 f9f4 	bl	80063e4 <__aeabi_ddiv>
 8004ffc:	ec41 0b10 	vmov	d0, r0, r1
 8005000:	e06b      	b.n	80050da <??ZbZclParseFloat_6>

08005002 <??ZbZclParseFloat_21>:
 8005002:	f014 0000 	ands.w	r0, r4, #0
 8005006:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 800500a:	2900      	cmp	r1, #0
 800500c:	d101      	bne.n	8005012 <??ZbZclParseFloat_22>
 800500e:	2800      	cmp	r0, #0
 8005010:	d00a      	beq.n	8005028 <??ZbZclParseFloat_23>

08005012 <??ZbZclParseFloat_22>:
 8005012:	2000      	movs	r0, #0
 8005014:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 8005474 <??DataTable3_3>
 8005018:	2200      	movs	r2, #0
 800501a:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 800501e:	f001 f9e1 	bl	80063e4 <__aeabi_ddiv>
 8005022:	ec41 0b10 	vmov	d0, r0, r1
 8005026:	e008      	b.n	800503a <??ZbZclParseFloat_24>

08005028 <??ZbZclParseFloat_23>:
 8005028:	2000      	movs	r0, #0
 800502a:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8005474 <??DataTable3_3>
 800502e:	2200      	movs	r2, #0
 8005030:	2300      	movs	r3, #0
 8005032:	f001 f9d7 	bl	80063e4 <__aeabi_ddiv>
 8005036:	ec41 0b10 	vmov	d0, r0, r1

0800503a <??ZbZclParseFloat_24>:
 800503a:	e04e      	b.n	80050da <??ZbZclParseFloat_6>

0800503c <??ZbZclParseFloat_19>:
 800503c:	0022      	movs	r2, r4
 800503e:	002b      	movs	r3, r5
 8005040:	0d1a      	lsrs	r2, r3, #20
 8005042:	2300      	movs	r3, #0
 8005044:	4690      	mov	r8, r2
 8005046:	ea5f 5848 	movs.w	r8, r8, lsl #21
 800504a:	ea5f 5858 	movs.w	r8, r8, lsr #21
 800504e:	4647      	mov	r7, r8
 8005050:	b2bf      	uxth	r7, r7
 8005052:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8005056:	3f34      	subs	r7, #52	; 0x34
 8005058:	4020      	ands	r0, r4
 800505a:	4029      	ands	r1, r5
 800505c:	2900      	cmp	r1, #0
 800505e:	d101      	bne.n	8005064 <??ZbZclParseFloat_25>
 8005060:	2800      	cmp	r0, #0
 8005062:	d00a      	beq.n	800507a <??ZbZclParseFloat_26>

08005064 <??ZbZclParseFloat_25>:
 8005064:	f05f 30ff 	movs.w	r0, #4294967295
 8005068:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 8005470 <??DataTable3_2>
 800506c:	4020      	ands	r0, r4
 800506e:	4029      	ands	r1, r5
 8005070:	f110 0a00 	adds.w	sl, r0, #0
 8005074:	f551 1b80 	adcs.w	fp, r1, #1048576	; 0x100000
 8005078:	e008      	b.n	800508c <??ZbZclParseFloat_27>

0800507a <??ZbZclParseFloat_26>:
 800507a:	1c7f      	adds	r7, r7, #1
 800507c:	f05f 30ff 	movs.w	r0, #4294967295
 8005080:	f8df 13ec 	ldr.w	r1, [pc, #1004]	; 8005470 <??DataTable3_2>
 8005084:	ea14 0a00 	ands.w	sl, r4, r0
 8005088:	ea15 0b01 	ands.w	fp, r5, r1

0800508c <??ZbZclParseFloat_27>:
 800508c:	4650      	mov	r0, sl
 800508e:	4659      	mov	r1, fp
 8005090:	f001 f848 	bl	8006124 <__aeabi_ul2d>
 8005094:	ec41 0b18 	vmov	d8, r0, r1
 8005098:	f014 0000 	ands.w	r0, r4, #0
 800509c:	f015 4100 	ands.w	r1, r5, #2147483648	; 0x80000000
 80050a0:	2900      	cmp	r1, #0
 80050a2:	d101      	bne.n	80050a8 <??ZbZclParseFloat_28>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d005      	beq.n	80050b4 <??ZbZclParseFloat_29>

080050a8 <??ZbZclParseFloat_28>:
 80050a8:	ec51 0b18 	vmov	r0, r1, d8
 80050ac:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 80050b0:	ec41 0b18 	vmov	d8, r0, r1

080050b4 <??ZbZclParseFloat_29>:
 80050b4:	0038      	movs	r0, r7
 80050b6:	eeb0 0a48 	vmov.f32	s0, s16
 80050ba:	eef0 0a68 	vmov.f32	s1, s17
 80050be:	f000 f810 	bl	80050e2 <ZbZclFloatLdexp>
 80050c2:	e00a      	b.n	80050da <??ZbZclParseFloat_6>

080050c4 <??ZbZclParseFloat_1>:
 80050c4:	208d      	movs	r0, #141	; 0x8d
 80050c6:	f889 0000 	strb.w	r0, [r9]
 80050ca:	2000      	movs	r0, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	2200      	movs	r2, #0
 80050d0:	2300      	movs	r3, #0
 80050d2:	f001 f987 	bl	80063e4 <__aeabi_ddiv>
 80050d6:	ec41 0b10 	vmov	d0, r0, r1

080050da <??ZbZclParseFloat_6>:
 80050da:	ecbd 8b02 	vpop	{d8}
 80050de:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080050e2 <ZbZclFloatLdexp>:
 80050e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e6:	ed2d 8b04 	vpush	{d8-d9}
 80050ea:	b084      	sub	sp, #16
 80050ec:	eeb0 8a40 	vmov.f32	s16, s0
 80050f0:	eef0 8a60 	vmov.f32	s17, s1
 80050f4:	0006      	movs	r6, r0
 80050f6:	2730      	movs	r7, #48	; 0x30
 80050f8:	ec53 2b18 	vmov	r2, r3, d8
 80050fc:	ec51 0b18 	vmov	r0, r1, d8
 8005100:	f001 faa6 	bl	8006650 <__aeabi_cdcmpeq>
 8005104:	d10c      	bne.n	8005120 <??ZbZclFloatLdexp_0>
 8005106:	ec53 2b18 	vmov	r2, r3, d8
 800510a:	ec51 0b18 	vmov	r0, r1, d8
 800510e:	f000 fe89 	bl	8005e24 <__adddf3>
 8005112:	0002      	movs	r2, r0
 8005114:	000b      	movs	r3, r1
 8005116:	ec51 0b18 	vmov	r0, r1, d8
 800511a:	f001 fa99 	bl	8006650 <__aeabi_cdcmpeq>
 800511e:	d104      	bne.n	800512a <??ZbZclFloatLdexp_1>

08005120 <??ZbZclFloatLdexp_0>:
 8005120:	eeb0 0a48 	vmov.f32	s0, s16
 8005124:	eef0 0a68 	vmov.f32	s1, s17
 8005128:	e06b      	b.n	8005202 <??ZbZclFloatLdexp_2>

0800512a <??ZbZclFloatLdexp_1>:
 800512a:	2e01      	cmp	r6, #1
 800512c:	db2c      	blt.n	8005188 <??ZbZclFloatLdexp_3>
 800512e:	2401      	movs	r4, #1
 8005130:	2500      	movs	r5, #0
 8005132:	0020      	movs	r0, r4
 8005134:	0029      	movs	r1, r5
 8005136:	003a      	movs	r2, r7
 8005138:	f000 fe62 	bl	8005e00 <__aeabi_llsl>
 800513c:	4680      	mov	r8, r0
 800513e:	4689      	mov	r9, r1
 8005140:	4640      	mov	r0, r8
 8005142:	4649      	mov	r1, r9
 8005144:	f000 ffee 	bl	8006124 <__aeabi_ul2d>
 8005148:	ec41 0b19 	vmov	d9, r0, r1

0800514c <??ZbZclFloatLdexp_4>:
 800514c:	42be      	cmp	r6, r7
 800514e:	db09      	blt.n	8005164 <??ZbZclFloatLdexp_5>
 8005150:	ec51 0b18 	vmov	r0, r1, d8
 8005154:	ec53 2b19 	vmov	r2, r3, d9
 8005158:	f001 f81a 	bl	8006190 <__aeabi_dmul>
 800515c:	ec41 0b18 	vmov	d8, r0, r1
 8005160:	1bf6      	subs	r6, r6, r7
 8005162:	e7f3      	b.n	800514c <??ZbZclFloatLdexp_4>

08005164 <??ZbZclFloatLdexp_5>:
 8005164:	0020      	movs	r0, r4
 8005166:	0029      	movs	r1, r5
 8005168:	0032      	movs	r2, r6
 800516a:	f000 fe49 	bl	8005e00 <__aeabi_llsl>
 800516e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005176:	f000 ffd5 	bl	8006124 <__aeabi_ul2d>
 800517a:	ec53 2b18 	vmov	r2, r3, d8
 800517e:	f001 f807 	bl	8006190 <__aeabi_dmul>
 8005182:	ec41 0b18 	vmov	d8, r0, r1
 8005186:	e038      	b.n	80051fa <??ZbZclFloatLdexp_6>

08005188 <??ZbZclFloatLdexp_3>:
 8005188:	2e00      	cmp	r6, #0
 800518a:	d536      	bpl.n	80051fa <??ZbZclFloatLdexp_6>
 800518c:	2401      	movs	r4, #1
 800518e:	2500      	movs	r5, #0
 8005190:	0020      	movs	r0, r4
 8005192:	0029      	movs	r1, r5
 8005194:	003a      	movs	r2, r7
 8005196:	f000 fe33 	bl	8005e00 <__aeabi_llsl>
 800519a:	4682      	mov	sl, r0
 800519c:	468b      	mov	fp, r1
 800519e:	4650      	mov	r0, sl
 80051a0:	4659      	mov	r1, fp
 80051a2:	f000 ffbf 	bl	8006124 <__aeabi_ul2d>
 80051a6:	0002      	movs	r2, r0
 80051a8:	000b      	movs	r3, r1
 80051aa:	2000      	movs	r0, #0
 80051ac:	49b1      	ldr	r1, [pc, #708]	; (8005474 <??DataTable3_3>)
 80051ae:	f001 f919 	bl	80063e4 <__aeabi_ddiv>
 80051b2:	ec41 0b19 	vmov	d9, r0, r1
 80051b6:	f1d6 0800 	rsbs	r8, r6, #0

080051ba <??ZbZclFloatLdexp_7>:
 80051ba:	45b8      	cmp	r8, r7
 80051bc:	db0a      	blt.n	80051d4 <??ZbZclFloatLdexp_8>
 80051be:	ec53 2b18 	vmov	r2, r3, d8
 80051c2:	ec51 0b19 	vmov	r0, r1, d9
 80051c6:	f000 ffe3 	bl	8006190 <__aeabi_dmul>
 80051ca:	ec41 0b18 	vmov	d8, r0, r1
 80051ce:	ebb8 0807 	subs.w	r8, r8, r7
 80051d2:	e7f2      	b.n	80051ba <??ZbZclFloatLdexp_7>

080051d4 <??ZbZclFloatLdexp_8>:
 80051d4:	0020      	movs	r0, r4
 80051d6:	0029      	movs	r1, r5
 80051d8:	4642      	mov	r2, r8
 80051da:	f000 fe11 	bl	8005e00 <__aeabi_llsl>
 80051de:	e9cd 0100 	strd	r0, r1, [sp]
 80051e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051e6:	f000 ff9d 	bl	8006124 <__aeabi_ul2d>
 80051ea:	0002      	movs	r2, r0
 80051ec:	000b      	movs	r3, r1
 80051ee:	ec51 0b18 	vmov	r0, r1, d8
 80051f2:	f001 f8f7 	bl	80063e4 <__aeabi_ddiv>
 80051f6:	ec41 0b18 	vmov	d8, r0, r1

080051fa <??ZbZclFloatLdexp_6>:
 80051fa:	eeb0 0a48 	vmov.f32	s0, s16
 80051fe:	eef0 0a68 	vmov.f32	s1, s17

08005202 <??ZbZclFloatLdexp_2>:
 8005202:	b004      	add	sp, #16
 8005204:	ecbd 8b04 	vpop	{d8-d9}
 8005208:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800520c <ZbZclFloatFrexp>:
 800520c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005210:	ed2d 8b06 	vpush	{d8-d10}
 8005214:	b086      	sub	sp, #24
 8005216:	eeb0 8a40 	vmov.f32	s16, s0
 800521a:	eef0 8a60 	vmov.f32	s17, s1
 800521e:	4682      	mov	sl, r0
 8005220:	000e      	movs	r6, r1
 8005222:	4693      	mov	fp, r2
 8005224:	2730      	movs	r7, #48	; 0x30
 8005226:	f05f 0800 	movs.w	r8, #0
 800522a:	f05f 0901 	movs.w	r9, #1
 800522e:	eeb0 9a48 	vmov.f32	s18, s16
 8005232:	eef0 9a68 	vmov.f32	s19, s17
 8005236:	ec51 0b18 	vmov	r0, r1, d8
 800523a:	2200      	movs	r2, #0
 800523c:	2300      	movs	r3, #0
 800523e:	f001 fa07 	bl	8006650 <__aeabi_cdcmpeq>
 8005242:	d208      	bcs.n	8005256 <??ZbZclFloatFrexp_0>
 8005244:	f05f 30ff 	movs.w	r0, #4294967295
 8005248:	4681      	mov	r9, r0
 800524a:	ec51 0b19 	vmov	r0, r1, d9
 800524e:	f091 4100 	eors.w	r1, r1, #2147483648	; 0x80000000
 8005252:	ec41 0b19 	vmov	d9, r0, r1

08005256 <??ZbZclFloatFrexp_0>:
 8005256:	ec53 2b19 	vmov	r2, r3, d9
 800525a:	ec51 0b19 	vmov	r0, r1, d9
 800525e:	f001 f9f7 	bl	8006650 <__aeabi_cdcmpeq>
 8005262:	d00b      	beq.n	800527c <??ZbZclFloatFrexp_1>
 8005264:	f8ca 6000 	str.w	r6, [sl]
 8005268:	4648      	mov	r0, r9
 800526a:	f000 ff27 	bl	80060bc <__aeabi_i2d>
 800526e:	2200      	movs	r2, #0
 8005270:	4b81      	ldr	r3, [pc, #516]	; (8005478 <??DataTable3_4>)
 8005272:	f000 ff8d 	bl	8006190 <__aeabi_dmul>
 8005276:	ec41 0b10 	vmov	d0, r0, r1
 800527a:	e0ef      	b.n	800545c <??ZbZclFloatFrexp_2>

0800527c <??ZbZclFloatFrexp_1>:
 800527c:	2000      	movs	r0, #0
 800527e:	497d      	ldr	r1, [pc, #500]	; (8005474 <??DataTable3_3>)
 8005280:	2200      	movs	r2, #0
 8005282:	2300      	movs	r3, #0
 8005284:	f001 f8ae 	bl	80063e4 <__aeabi_ddiv>
 8005288:	ec53 2b19 	vmov	r2, r3, d9
 800528c:	f001 f9e0 	bl	8006650 <__aeabi_cdcmpeq>
 8005290:	d00b      	beq.n	80052aa <??ZbZclFloatFrexp_3>
 8005292:	2000      	movs	r0, #0
 8005294:	4977      	ldr	r1, [pc, #476]	; (8005474 <??DataTable3_3>)
 8005296:	2200      	movs	r2, #0
 8005298:	f05f 4300 	movs.w	r3, #2147483648	; 0x80000000
 800529c:	f001 f8a2 	bl	80063e4 <__aeabi_ddiv>
 80052a0:	ec53 2b19 	vmov	r2, r3, d9
 80052a4:	f001 f9d4 	bl	8006650 <__aeabi_cdcmpeq>
 80052a8:	d107      	bne.n	80052ba <??ZbZclFloatFrexp_4>

080052aa <??ZbZclFloatFrexp_3>:
 80052aa:	f8ca 6000 	str.w	r6, [sl]
 80052ae:	4648      	mov	r0, r9
 80052b0:	f000 ff04 	bl	80060bc <__aeabi_i2d>
 80052b4:	ec41 0b10 	vmov	d0, r0, r1
 80052b8:	e0d0      	b.n	800545c <??ZbZclFloatFrexp_2>

080052ba <??ZbZclFloatFrexp_4>:
 80052ba:	ec53 2b19 	vmov	r2, r3, d9
 80052be:	ec51 0b19 	vmov	r0, r1, d9
 80052c2:	f000 fdaf 	bl	8005e24 <__adddf3>
 80052c6:	ec53 2b19 	vmov	r2, r3, d9
 80052ca:	f001 f9c1 	bl	8006650 <__aeabi_cdcmpeq>
 80052ce:	d10b      	bne.n	80052e8 <??ZbZclFloatFrexp_5>
 80052d0:	f8ca b000 	str.w	fp, [sl]
 80052d4:	4648      	mov	r0, r9
 80052d6:	f000 fef1 	bl	80060bc <__aeabi_i2d>
 80052da:	2200      	movs	r2, #0
 80052dc:	2300      	movs	r3, #0
 80052de:	f000 ff57 	bl	8006190 <__aeabi_dmul>
 80052e2:	ec41 0b10 	vmov	d0, r0, r1
 80052e6:	e0b9      	b.n	800545c <??ZbZclFloatFrexp_2>

080052e8 <??ZbZclFloatFrexp_5>:
 80052e8:	ec51 0b19 	vmov	r0, r1, d9
 80052ec:	2200      	movs	r2, #0
 80052ee:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 80052f2:	f001 f9a5 	bl	8006640 <__aeabi_cdrcmple>
 80052f6:	d854      	bhi.n	80053a2 <??ZbZclFloatFrexp_6>
 80052f8:	2001      	movs	r0, #1
 80052fa:	2100      	movs	r1, #0
 80052fc:	003a      	movs	r2, r7
 80052fe:	f000 fd7f 	bl	8005e00 <__aeabi_llsl>
 8005302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800530a:	f000 ff0b 	bl	8006124 <__aeabi_ul2d>
 800530e:	0002      	movs	r2, r0
 8005310:	000b      	movs	r3, r1
 8005312:	2000      	movs	r0, #0
 8005314:	4957      	ldr	r1, [pc, #348]	; (8005474 <??DataTable3_3>)
 8005316:	f001 f865 	bl	80063e4 <__aeabi_ddiv>
 800531a:	ec41 0b1a 	vmov	d10, r0, r1
 800531e:	2002      	movs	r0, #2
 8005320:	2100      	movs	r1, #0
 8005322:	003a      	movs	r2, r7
 8005324:	f000 fd6c 	bl	8005e00 <__aeabi_llsl>
 8005328:	e9cd 0100 	strd	r0, r1, [sp]

0800532c <??ZbZclFloatFrexp_7>:
 800532c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005330:	f000 fef8 	bl	8006124 <__aeabi_ul2d>
 8005334:	0002      	movs	r2, r0
 8005336:	000b      	movs	r3, r1
 8005338:	ec51 0b19 	vmov	r0, r1, d9
 800533c:	f001 f980 	bl	8006640 <__aeabi_cdrcmple>
 8005340:	d813      	bhi.n	800536a <??ZbZclFloatFrexp_8>
 8005342:	ec53 2b19 	vmov	r2, r3, d9
 8005346:	ec51 0b1a 	vmov	r0, r1, d10
 800534a:	f000 ff21 	bl	8006190 <__aeabi_dmul>
 800534e:	ec41 0b19 	vmov	d9, r0, r1
 8005352:	eb17 0808 	adds.w	r8, r7, r8
 8005356:	45b0      	cmp	r8, r6
 8005358:	dbe8      	blt.n	800532c <??ZbZclFloatFrexp_7>
 800535a:	f8ca 6000 	str.w	r6, [sl]
 800535e:	4648      	mov	r0, r9
 8005360:	f000 feac 	bl	80060bc <__aeabi_i2d>
 8005364:	ec41 0b10 	vmov	d0, r0, r1
 8005368:	e078      	b.n	800545c <??ZbZclFloatFrexp_2>

0800536a <??ZbZclFloatFrexp_8>:
 800536a:	ec51 0b19 	vmov	r0, r1, d9
 800536e:	2200      	movs	r2, #0
 8005370:	f05f 4380 	movs.w	r3, #1073741824	; 0x40000000
 8005374:	f001 f964 	bl	8006640 <__aeabi_cdrcmple>
 8005378:	d865      	bhi.n	8005446 <??ZbZclFloatFrexp_9>
 800537a:	ec53 2b19 	vmov	r2, r3, d9
 800537e:	2000      	movs	r0, #0
 8005380:	493e      	ldr	r1, [pc, #248]	; (800547c <??DataTable3_5>)
 8005382:	f000 ff05 	bl	8006190 <__aeabi_dmul>
 8005386:	ec41 0b19 	vmov	d9, r0, r1
 800538a:	f118 0801 	adds.w	r8, r8, #1
 800538e:	45b0      	cmp	r8, r6
 8005390:	dbeb      	blt.n	800536a <??ZbZclFloatFrexp_8>
 8005392:	f8ca 6000 	str.w	r6, [sl]
 8005396:	4648      	mov	r0, r9
 8005398:	f000 fe90 	bl	80060bc <__aeabi_i2d>
 800539c:	ec41 0b10 	vmov	d0, r0, r1
 80053a0:	e05c      	b.n	800545c <??ZbZclFloatFrexp_2>

080053a2 <??ZbZclFloatFrexp_6>:
 80053a2:	ec51 0b19 	vmov	r0, r1, d9
 80053a6:	2200      	movs	r2, #0
 80053a8:	4b32      	ldr	r3, [pc, #200]	; (8005474 <??DataTable3_3>)
 80053aa:	f001 f951 	bl	8006650 <__aeabi_cdcmpeq>
 80053ae:	d24a      	bcs.n	8005446 <??ZbZclFloatFrexp_9>
 80053b0:	2401      	movs	r4, #1
 80053b2:	2500      	movs	r5, #0
 80053b4:	0020      	movs	r0, r4
 80053b6:	0029      	movs	r1, r5
 80053b8:	003a      	movs	r2, r7
 80053ba:	f000 fd21 	bl	8005e00 <__aeabi_llsl>
 80053be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053c6:	f000 fead 	bl	8006124 <__aeabi_ul2d>
 80053ca:	ec41 0b1a 	vmov	d10, r0, r1
 80053ce:	0020      	movs	r0, r4
 80053d0:	0029      	movs	r1, r5
 80053d2:	003a      	movs	r2, r7
 80053d4:	f000 fd14 	bl	8005e00 <__aeabi_llsl>
 80053d8:	e9cd 0100 	strd	r0, r1, [sp]

080053dc <??ZbZclFloatFrexp_10>:
 80053dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053e0:	f000 fea0 	bl	8006124 <__aeabi_ul2d>
 80053e4:	0002      	movs	r2, r0
 80053e6:	000b      	movs	r3, r1
 80053e8:	2000      	movs	r0, #0
 80053ea:	4922      	ldr	r1, [pc, #136]	; (8005474 <??DataTable3_3>)
 80053ec:	f000 fffa 	bl	80063e4 <__aeabi_ddiv>
 80053f0:	0002      	movs	r2, r0
 80053f2:	000b      	movs	r3, r1
 80053f4:	ec51 0b18 	vmov	r0, r1, d8
 80053f8:	f001 f92a 	bl	8006650 <__aeabi_cdcmpeq>
 80053fc:	d20e      	bcs.n	800541c <??ZbZclFloatFrexp_11>
 80053fe:	ebb8 0007 	subs.w	r0, r8, r7
 8005402:	4583      	cmp	fp, r0
 8005404:	da0a      	bge.n	800541c <??ZbZclFloatFrexp_11>

08005406 <??ZbZclFloatFrexp_12>:
 8005406:	ec53 2b19 	vmov	r2, r3, d9
 800540a:	ec51 0b1a 	vmov	r0, r1, d10
 800540e:	f000 febf 	bl	8006190 <__aeabi_dmul>
 8005412:	ec41 0b19 	vmov	d9, r0, r1
 8005416:	ebb8 0807 	subs.w	r8, r8, r7
 800541a:	e7df      	b.n	80053dc <??ZbZclFloatFrexp_10>

0800541c <??ZbZclFloatFrexp_11>:
 800541c:	ec51 0b19 	vmov	r0, r1, d9
 8005420:	2200      	movs	r2, #0
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <??DataTable3_3>)
 8005424:	f001 f914 	bl	8006650 <__aeabi_cdcmpeq>
 8005428:	d20d      	bcs.n	8005446 <??ZbZclFloatFrexp_9>
 800542a:	f1b8 0801 	subs.w	r8, r8, #1
 800542e:	45d8      	cmp	r8, fp
 8005430:	d009      	beq.n	8005446 <??ZbZclFloatFrexp_9>

08005432 <??ZbZclFloatFrexp_13>:
 8005432:	ec53 2b19 	vmov	r2, r3, d9
 8005436:	2000      	movs	r0, #0
 8005438:	f05f 4180 	movs.w	r1, #1073741824	; 0x40000000
 800543c:	f000 fea8 	bl	8006190 <__aeabi_dmul>
 8005440:	ec41 0b19 	vmov	d9, r0, r1
 8005444:	e7ea      	b.n	800541c <??ZbZclFloatFrexp_11>

08005446 <??ZbZclFloatFrexp_9>:
 8005446:	f8ca 8000 	str.w	r8, [sl]
 800544a:	4648      	mov	r0, r9
 800544c:	f000 fe36 	bl	80060bc <__aeabi_i2d>
 8005450:	ec53 2b19 	vmov	r2, r3, d9
 8005454:	f000 fe9c 	bl	8006190 <__aeabi_dmul>
 8005458:	ec41 0b10 	vmov	d0, r0, r1

0800545c <??ZbZclFloatFrexp_2>:
 800545c:	b006      	add	sp, #24
 800545e:	ecbd 8b06 	vpop	{d8-d10}
 8005462:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005468 <??DataTable3>:
 8005468:	fc01 ffff                                   ....

0800546c <??DataTable3_1>:
 800546c:	0000 7ff0                                   ....

08005470 <??DataTable3_2>:
 8005470:	ffff 000f                                   ....

08005474 <??DataTable3_3>:
 8005474:	0000 3ff0                                   ...?

08005478 <??DataTable3_4>:
 8005478:	0000 3ff8                                   ...?

0800547c <??DataTable3_5>:
 800547c:	0000 3fe0                                   ...?

08005480 <ZbZclAttrIsFloat>:
 8005480:	0001      	movs	r1, r0
 8005482:	0008      	movs	r0, r1
 8005484:	b2c0      	uxtb	r0, r0
 8005486:	2838      	cmp	r0, #56	; 0x38
 8005488:	db05      	blt.n	8005496 <??ZbZclAttrIsFloat_0>
 800548a:	0008      	movs	r0, r1
 800548c:	b2c0      	uxtb	r0, r0
 800548e:	283b      	cmp	r0, #59	; 0x3b
 8005490:	da01      	bge.n	8005496 <??ZbZclAttrIsFloat_0>
 8005492:	2001      	movs	r0, #1
 8005494:	e000      	b.n	8005498 <??ZbZclAttrIsFloat_1>

08005496 <??ZbZclAttrIsFloat_0>:
 8005496:	2000      	movs	r0, #0

08005498 <??ZbZclAttrIsFloat_1>:
 8005498:	4770      	bx	lr
	...

0800549c <zcl_cluster_command_dummy>:
 800549c:	0003      	movs	r3, r0
 800549e:	20ff      	movs	r0, #255	; 0xff
 80054a0:	4770      	bx	lr

080054a2 <ZbZclClusterAlloc>:
 80054a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a6:	0006      	movs	r6, r0
 80054a8:	000f      	movs	r7, r1
 80054aa:	4698      	mov	r8, r3
 80054ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054ae:	2f6c      	cmp	r7, #108	; 0x6c
 80054b0:	d201      	bcs.n	80054b6 <??ZbZclClusterAlloc_0>
 80054b2:	2000      	movs	r0, #0
 80054b4:	e083      	b.n	80055be <??ZbZclClusterAlloc_1>

080054b6 <??ZbZclClusterAlloc_0>:
 80054b6:	f20f 2914 	addw	r9, pc, #532	; 0x214
 80054ba:	2300      	movs	r3, #0
 80054bc:	464a      	mov	r2, r9
 80054be:	0039      	movs	r1, r7
 80054c0:	0030      	movs	r0, r6
 80054c2:	f00d f96d 	bl	80127a0 <zb_heap_alloc>
 80054c6:	0004      	movs	r4, r0
 80054c8:	2c00      	cmp	r4, #0
 80054ca:	d101      	bne.n	80054d0 <??ZbZclClusterAlloc_2>
 80054cc:	2000      	movs	r0, #0
 80054ce:	e076      	b.n	80055be <??ZbZclClusterAlloc_1>

080054d0 <??ZbZclClusterAlloc_2>:
 80054d0:	9701      	str	r7, [sp, #4]
 80054d2:	f05f 0a00 	movs.w	sl, #0
 80054d6:	46a3      	mov	fp, r4
 80054d8:	4652      	mov	r2, sl
 80054da:	9901      	ldr	r1, [sp, #4]
 80054dc:	4658      	mov	r0, fp
 80054de:	f000 fbed 	bl	8005cbc <__aeabi_memset>
 80054e2:	6024      	str	r4, [r4, #0]
 80054e4:	6064      	str	r4, [r4, #4]
 80054e6:	60a6      	str	r6, [r4, #8]
 80054e8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80054ec:	81a0      	strh	r0, [r4, #12]
 80054ee:	f884 800e 	strb.w	r8, [r4, #14]
 80054f2:	2000      	movs	r0, #0
 80054f4:	8220      	strh	r0, [r4, #16]
 80054f6:	f44f 7082 	mov.w	r0, #260	; 0x104
 80054fa:	82a0      	strh	r0, [r4, #20]
 80054fc:	200f      	movs	r0, #15
 80054fe:	82e0      	strh	r0, [r4, #22]
 8005500:	2001      	movs	r0, #1
 8005502:	7620      	strb	r0, [r4, #24]
 8005504:	2000      	movs	r0, #0
 8005506:	7660      	strb	r0, [r4, #25]
 8005508:	2039      	movs	r0, #57	; 0x39
 800550a:	8360      	strh	r0, [r4, #26]
 800550c:	7725      	strb	r5, [r4, #28]
 800550e:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8005512:	6260      	str	r0, [r4, #36]	; 0x24
 8005514:	f114 0024 	adds.w	r0, r4, #36	; 0x24
 8005518:	62a0      	str	r0, [r4, #40]	; 0x28
 800551a:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 800551e:	6320      	str	r0, [r4, #48]	; 0x30
 8005520:	f114 0030 	adds.w	r0, r4, #48	; 0x30
 8005524:	6360      	str	r0, [r4, #52]	; 0x34
 8005526:	9400      	str	r4, [sp, #0]
 8005528:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8005900 <??DataTable5_1>
 800552c:	2281      	movs	r2, #129	; 0x81
 800552e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005532:	0030      	movs	r0, r6
 8005534:	f00c fb5e 	bl	8011bf4 <ZbMsgFilterRegister>
 8005538:	62e0      	str	r0, [r4, #44]	; 0x2c
 800553a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800553c:	2800      	cmp	r0, #0
 800553e:	d104      	bne.n	800554a <??ZbZclClusterAlloc_3>
 8005540:	0020      	movs	r0, r4
 8005542:	f000 f870 	bl	8005626 <ZbZclClusterFree>
 8005546:	2000      	movs	r0, #0
 8005548:	e039      	b.n	80055be <??ZbZclClusterAlloc_1>

0800554a <??ZbZclClusterAlloc_3>:
 800554a:	0022      	movs	r2, r4
 800554c:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 8005904 <??DataTable5_2>
 8005550:	0030      	movs	r0, r6
 8005552:	f00c fc07 	bl	8011d64 <ZbTimerAlloc>
 8005556:	63a0      	str	r0, [r4, #56]	; 0x38
 8005558:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800555a:	2800      	cmp	r0, #0
 800555c:	d104      	bne.n	8005568 <??ZbZclClusterAlloc_4>
 800555e:	0020      	movs	r0, r4
 8005560:	f000 f861 	bl	8005626 <ZbZclClusterFree>
 8005564:	2000      	movs	r0, #0
 8005566:	e02a      	b.n	80055be <??ZbZclClusterAlloc_1>

08005568 <??ZbZclClusterAlloc_4>:
 8005568:	0022      	movs	r2, r4
 800556a:	f20f 1125 	addw	r1, pc, #293	; 0x125
 800556e:	0030      	movs	r0, r6
 8005570:	f00c fbf8 	bl	8011d64 <ZbTimerAlloc>
 8005574:	6520      	str	r0, [r4, #80]	; 0x50
 8005576:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005578:	2800      	cmp	r0, #0
 800557a:	d104      	bne.n	8005586 <??ZbZclClusterAlloc_5>
 800557c:	0020      	movs	r0, r4
 800557e:	f000 f852 	bl	8005626 <ZbZclClusterFree>
 8005582:	2000      	movs	r0, #0
 8005584:	e01b      	b.n	80055be <??ZbZclClusterAlloc_1>

08005586 <??ZbZclClusterAlloc_5>:
 8005586:	21ac      	movs	r1, #172	; 0xac
 8005588:	0020      	movs	r0, r4
 800558a:	f7fe faf8 	bl	8003b7e <ZbZclClusterSetMinSecurity>
 800558e:	2201      	movs	r2, #1
 8005590:	f8df 1374 	ldr.w	r1, [pc, #884]	; 8005908 <??DataTable5_3>
 8005594:	0020      	movs	r0, r4
 8005596:	f7fc fc29 	bl	8001dec <ZbZclAttrAppendList>
 800559a:	2800      	cmp	r0, #0
 800559c:	d007      	beq.n	80055ae <??ZbZclClusterAlloc_6>
 800559e:	2300      	movs	r3, #0
 80055a0:	464a      	mov	r2, r9
 80055a2:	0021      	movs	r1, r4
 80055a4:	0030      	movs	r0, r6
 80055a6:	f00d f90a 	bl	80127be <zb_heap_free>
 80055aa:	2000      	movs	r0, #0
 80055ac:	e007      	b.n	80055be <??ZbZclClusterAlloc_1>

080055ae <??ZbZclClusterAlloc_6>:
 80055ae:	2201      	movs	r2, #1
 80055b0:	2300      	movs	r3, #0
 80055b2:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80055b6:	0020      	movs	r0, r4
 80055b8:	f7fc fb01 	bl	8001bbe <ZbZclAttrIntegerWrite>
 80055bc:	0020      	movs	r0, r4

080055be <??ZbZclClusterAlloc_1>:
 80055be:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080055c2 <ZbZclClusterAttach>:
 80055c2:	b510      	push	{r4, lr}
 80055c4:	0004      	movs	r4, r0
 80055c6:	7ba0      	ldrb	r0, [r4, #14]
 80055c8:	28ff      	cmp	r0, #255	; 0xff
 80055ca:	d104      	bne.n	80055d6 <??ZbZclClusterAttach_0>
 80055cc:	89a0      	ldrh	r0, [r4, #12]
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d001      	beq.n	80055d6 <??ZbZclClusterAttach_0>
 80055d2:	89a0      	ldrh	r0, [r4, #12]
 80055d4:	280a      	cmp	r0, #10

080055d6 <??ZbZclClusterAttach_0>:
 80055d6:	7ba0      	ldrb	r0, [r4, #14]
 80055d8:	28ff      	cmp	r0, #255	; 0xff
 80055da:	d00b      	beq.n	80055f4 <??ZbZclClusterAttach_1>
 80055dc:	7f23      	ldrb	r3, [r4, #28]
 80055de:	8aa2      	ldrh	r2, [r4, #20]
 80055e0:	7ba1      	ldrb	r1, [r4, #14]
 80055e2:	0020      	movs	r0, r4
 80055e4:	f00d f848 	bl	8012678 <ZbZclClusterBind>
 80055e8:	0001      	movs	r1, r0
 80055ea:	b2c9      	uxtb	r1, r1
 80055ec:	2900      	cmp	r1, #0
 80055ee:	d001      	beq.n	80055f4 <??ZbZclClusterAttach_1>
 80055f0:	b2c0      	uxtb	r0, r0
 80055f2:	e005      	b.n	8005600 <??ZbZclClusterAttach_2>

080055f4 <??ZbZclClusterAttach_1>:
 80055f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d101      	bne.n	80055fe <??ZbZclClusterAttach_3>
 80055fa:	48c4      	ldr	r0, [pc, #784]	; (800590c <??DataTable5_4>)
 80055fc:	65a0      	str	r0, [r4, #88]	; 0x58

080055fe <??ZbZclClusterAttach_3>:
 80055fe:	2000      	movs	r0, #0

08005600 <??ZbZclClusterAttach_2>:
 8005600:	bd10      	pop	{r4, pc}

08005602 <ZbZclClusterDetach>:
 8005602:	b510      	push	{r4, lr}
 8005604:	0004      	movs	r4, r0
 8005606:	68a0      	ldr	r0, [r4, #8]
 8005608:	2800      	cmp	r0, #0
 800560a:	d00b      	beq.n	8005624 <??ZbZclClusterDetach_0>

0800560c <??ZbZclClusterDetach_1>:
 800560c:	0020      	movs	r0, r4
 800560e:	f00d f873 	bl	80126f8 <ZbZclClusterUnbind>
 8005612:	0020      	movs	r0, r4
 8005614:	f00d f89a 	bl	801274c <ZbZclClusterRemoveAlarmResetHandler>
 8005618:	7ba0      	ldrb	r0, [r4, #14]
 800561a:	28ff      	cmp	r0, #255	; 0xff
 800561c:	d002      	beq.n	8005624 <??ZbZclClusterDetach_0>
 800561e:	0020      	movs	r0, r4
 8005620:	f00c fff7 	bl	8012612 <ZbZclClusterEndpointRemove>

08005624 <??ZbZclClusterDetach_0>:
 8005624:	bd10      	pop	{r4, pc}

08005626 <ZbZclClusterFree>:
 8005626:	b538      	push	{r3, r4, r5, lr}
 8005628:	0005      	movs	r5, r0
 800562a:	68ac      	ldr	r4, [r5, #8]
 800562c:	2c00      	cmp	r4, #0
 800562e:	d02d      	beq.n	800568c <??ZbZclClusterFree_0>

08005630 <??ZbZclClusterFree_1>:
 8005630:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8005632:	2800      	cmp	r0, #0
 8005634:	d004      	beq.n	8005640 <??ZbZclClusterFree_2>
 8005636:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8005638:	f00c fbe4 	bl	8011e04 <ZbTimerFree>
 800563c:	2000      	movs	r0, #0
 800563e:	6528      	str	r0, [r5, #80]	; 0x50

08005640 <??ZbZclClusterFree_2>:
 8005640:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005642:	2800      	cmp	r0, #0
 8005644:	d004      	beq.n	8005650 <??ZbZclClusterFree_3>
 8005646:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005648:	f00c fbdc 	bl	8011e04 <ZbTimerFree>
 800564c:	2000      	movs	r0, #0
 800564e:	63a8      	str	r0, [r5, #56]	; 0x38

08005650 <??ZbZclClusterFree_3>:
 8005650:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005652:	2800      	cmp	r0, #0
 8005654:	d005      	beq.n	8005662 <??ZbZclClusterFree_4>
 8005656:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005658:	0020      	movs	r0, r4
 800565a:	f00c fb2d 	bl	8011cb8 <ZbMsgFilterRemove>
 800565e:	2000      	movs	r0, #0
 8005660:	62e8      	str	r0, [r5, #44]	; 0x2c

08005662 <??ZbZclClusterFree_4>:
 8005662:	0028      	movs	r0, r5
 8005664:	f7fd f97b 	bl	800295e <ZbZclReportCleanup>
 8005668:	0028      	movs	r0, r5
 800566a:	f7ff ffca 	bl	8005602 <ZbZclClusterDetach>
 800566e:	0028      	movs	r0, r5
 8005670:	f7fc fcc8 	bl	8002004 <ZbZclAttrFreeList>
 8005674:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8005676:	2800      	cmp	r0, #0
 8005678:	d002      	beq.n	8005680 <??ZbZclClusterFree_5>
 800567a:	0028      	movs	r0, r5
 800567c:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800567e:	4788      	blx	r1

08005680 <??ZbZclClusterFree_5>:
 8005680:	2300      	movs	r3, #0
 8005682:	a212      	add	r2, pc, #72	; (adr r2, 80056cc <??DataTable4>)
 8005684:	0029      	movs	r1, r5
 8005686:	0020      	movs	r0, r4
 8005688:	f00d f899 	bl	80127be <zb_heap_free>

0800568c <??ZbZclClusterFree_0>:
 800568c:	bd31      	pop	{r0, r4, r5, pc}
	...

08005690 <zcl_cluster_persist_timer>:
 8005690:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8005692:	0005      	movs	r5, r0
 8005694:	000e      	movs	r6, r1
 8005696:	0037      	movs	r7, r6
 8005698:	a902      	add	r1, sp, #8
 800569a:	0038      	movs	r0, r7
 800569c:	f000 f818 	bl	80056d0 <zcl_persist_read_attrs>
 80056a0:	0004      	movs	r4, r0
 80056a2:	2c00      	cmp	r4, #0
 80056a4:	d010      	beq.n	80056c8 <??zcl_cluster_persist_timer_0>
 80056a6:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80056aa:	9001      	str	r0, [sp, #4]
 80056ac:	9400      	str	r4, [sp, #0]
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	7f3a      	ldrb	r2, [r7, #28]
 80056b4:	89b9      	ldrh	r1, [r7, #12]
 80056b6:	68b8      	ldr	r0, [r7, #8]
 80056b8:	f000 f92a 	bl	8005910 <zcl_persist_send_cache>
 80056bc:	2300      	movs	r3, #0
 80056be:	a203      	add	r2, pc, #12	; (adr r2, 80056cc <??DataTable4>)
 80056c0:	0021      	movs	r1, r4
 80056c2:	68b8      	ldr	r0, [r7, #8]
 80056c4:	f00d f87b 	bl	80127be <zb_heap_free>

080056c8 <??zcl_cluster_persist_timer_0>:
 80056c8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

080056cc <??DataTable4>:
 80056cc:	0000 0000                                   ....

080056d0 <zcl_persist_read_attrs>:
 80056d0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	b08c      	sub	sp, #48	; 0x30
 80056d6:	0007      	movs	r7, r0
 80056d8:	f05f 0b00 	movs.w	fp, #0
 80056dc:	f05f 0900 	movs.w	r9, #0
 80056e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056e2:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 80056e6:	4288      	cmp	r0, r1
 80056e8:	d001      	beq.n	80056ee <??zcl_persist_read_attrs_0>
 80056ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80056ec:	e000      	b.n	80056f0 <??zcl_persist_read_attrs_1>

080056ee <??zcl_persist_read_attrs_0>:
 80056ee:	2400      	movs	r4, #0

080056f0 <??zcl_persist_read_attrs_1>:
 80056f0:	2c00      	cmp	r4, #0
 80056f2:	d01e      	beq.n	8005732 <??zcl_persist_read_attrs_2>
 80056f4:	46a0      	mov	r8, r4
 80056f6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80056fa:	7900      	ldrb	r0, [r0, #4]
 80056fc:	0740      	lsls	r0, r0, #29
 80056fe:	d50f      	bpl.n	8005720 <??zcl_persist_read_attrs_3>

08005700 <??zcl_persist_read_attrs_4>:
 8005700:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005704:	2800      	cmp	r0, #0
 8005706:	d004      	beq.n	8005712 <??zcl_persist_read_attrs_5>
 8005708:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800570c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8005710:	d300      	bcc.n	8005714 <??zcl_persist_read_attrs_6>

08005712 <??zcl_persist_read_attrs_5>:
 8005712:	e005      	b.n	8005720 <??zcl_persist_read_attrs_3>

08005714 <??zcl_persist_read_attrs_6>:
 8005714:	f119 0904 	adds.w	r9, r9, #4
 8005718:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800571c:	eb10 0909 	adds.w	r9, r0, r9

08005720 <??zcl_persist_read_attrs_3>:
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 8005726:	4288      	cmp	r0, r1
 8005728:	d001      	beq.n	800572e <??zcl_persist_read_attrs_7>
 800572a:	6824      	ldr	r4, [r4, #0]
 800572c:	e7e0      	b.n	80056f0 <??zcl_persist_read_attrs_1>

0800572e <??zcl_persist_read_attrs_7>:
 800572e:	2400      	movs	r4, #0
 8005730:	e7de      	b.n	80056f0 <??zcl_persist_read_attrs_1>

08005732 <??zcl_persist_read_attrs_2>:
 8005732:	4648      	mov	r0, r9
 8005734:	b280      	uxth	r0, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d101      	bne.n	800573e <??zcl_persist_read_attrs_8>
 800573a:	2000      	movs	r0, #0
 800573c:	e0db      	b.n	80058f6 <??zcl_persist_read_attrs_9>

0800573e <??zcl_persist_read_attrs_8>:
 800573e:	2300      	movs	r3, #0
 8005740:	a26e      	add	r2, pc, #440	; (adr r2, 80058fc <??DataTable5>)
 8005742:	4649      	mov	r1, r9
 8005744:	b289      	uxth	r1, r1
 8005746:	68b8      	ldr	r0, [r7, #8]
 8005748:	f00d f82a 	bl	80127a0 <zb_heap_alloc>
 800574c:	0005      	movs	r5, r0
 800574e:	2d00      	cmp	r5, #0
 8005750:	d101      	bne.n	8005756 <??zcl_persist_read_attrs_10>
 8005752:	2000      	movs	r0, #0
 8005754:	e0cf      	b.n	80058f6 <??zcl_persist_read_attrs_9>

08005756 <??zcl_persist_read_attrs_10>:
 8005756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005758:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 800575c:	4288      	cmp	r0, r1
 800575e:	d001      	beq.n	8005764 <??zcl_persist_read_attrs_11>
 8005760:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005762:	e000      	b.n	8005766 <??zcl_persist_read_attrs_12>

08005764 <??zcl_persist_read_attrs_11>:
 8005764:	2400      	movs	r4, #0

08005766 <??zcl_persist_read_attrs_12>:
 8005766:	2c00      	cmp	r4, #0
 8005768:	f000 80c1 	beq.w	80058ee <??zcl_persist_read_attrs_13>
 800576c:	46a0      	mov	r8, r4
 800576e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005772:	7900      	ldrb	r0, [r0, #4]
 8005774:	0740      	lsls	r0, r0, #29
 8005776:	f140 80b1 	bpl.w	80058dc <??zcl_persist_read_attrs_14>

0800577a <??zcl_persist_read_attrs_15>:
 800577a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800577e:	7900      	ldrb	r0, [r0, #4]
 8005780:	06c0      	lsls	r0, r0, #27
 8005782:	d566      	bpl.n	8005852 <??zcl_persist_read_attrs_16>
 8005784:	4658      	mov	r0, fp
 8005786:	b280      	uxth	r0, r0
 8005788:	4428      	add	r0, r5
 800578a:	1d00      	adds	r0, r0, #4
 800578c:	9001      	str	r0, [sp, #4]
 800578e:	4649      	mov	r1, r9
 8005790:	b289      	uxth	r1, r1
 8005792:	4658      	mov	r0, fp
 8005794:	b280      	uxth	r0, r0
 8005796:	1a09      	subs	r1, r1, r0
 8005798:	1f08      	subs	r0, r1, #4
 800579a:	f8ad 0000 	strh.w	r0, [sp]
 800579e:	2020      	movs	r0, #32
 80057a0:	9003      	str	r0, [sp, #12]
 80057a2:	2000      	movs	r0, #0
 80057a4:	9002      	str	r0, [sp, #8]
 80057a6:	f10d 0a10 	add.w	sl, sp, #16
 80057aa:	9a02      	ldr	r2, [sp, #8]
 80057ac:	9903      	ldr	r1, [sp, #12]
 80057ae:	4650      	mov	r0, sl
 80057b0:	f000 fa84 	bl	8005cbc <__aeabi_memset>
 80057b4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80057b8:	9004      	str	r0, [sp, #16]
 80057ba:	2000      	movs	r0, #0
 80057bc:	f88d 0014 	strb.w	r0, [sp, #20]
 80057c0:	9801      	ldr	r0, [sp, #4]
 80057c2:	9006      	str	r0, [sp, #24]
 80057c4:	f8bd 0000 	ldrh.w	r0, [sp]
 80057c8:	9007      	str	r0, [sp, #28]
 80057ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80057cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80057ce:	aa04      	add	r2, sp, #16
 80057d0:	4641      	mov	r1, r8
 80057d2:	0038      	movs	r0, r7
 80057d4:	f7fc fbe2 	bl	8001f9c <ZbZclAttrCallbackExec>
 80057d8:	4682      	mov	sl, r0
 80057da:	4650      	mov	r0, sl
 80057dc:	b2c0      	uxtb	r0, r0
 80057de:	2800      	cmp	r0, #0
 80057e0:	d17c      	bne.n	80058dc <??zcl_persist_read_attrs_14>

080057e2 <??zcl_persist_read_attrs_17>:
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8bd 2000 	ldrh.w	r2, [sp]
 80057e8:	9901      	ldr	r1, [sp, #4]
 80057ea:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80057ee:	7880      	ldrb	r0, [r0, #2]
 80057f0:	f7fb fccf 	bl	8001192 <ZbZclAttrParseLength>
 80057f4:	0006      	movs	r6, r0
 80057f6:	2e01      	cmp	r6, #1
 80057f8:	db02      	blt.n	8005800 <??zcl_persist_read_attrs_18>
 80057fa:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80057fe:	db00      	blt.n	8005802 <??zcl_persist_read_attrs_19>

08005800 <??zcl_persist_read_attrs_18>:
 8005800:	e06c      	b.n	80058dc <??zcl_persist_read_attrs_14>

08005802 <??zcl_persist_read_attrs_19>:
 8005802:	4648      	mov	r0, r9
 8005804:	b280      	uxth	r0, r0
 8005806:	4659      	mov	r1, fp
 8005808:	b289      	uxth	r1, r1
 800580a:	fa11 f186 	uxtah	r1, r1, r6
 800580e:	1d09      	adds	r1, r1, #4
 8005810:	4288      	cmp	r0, r1
 8005812:	d207      	bcs.n	8005824 <??zcl_persist_read_attrs_20>
 8005814:	2300      	movs	r3, #0
 8005816:	a239      	add	r2, pc, #228	; (adr r2, 80058fc <??DataTable5>)
 8005818:	0029      	movs	r1, r5
 800581a:	68b8      	ldr	r0, [r7, #8]
 800581c:	f00c ffcf 	bl	80127be <zb_heap_free>
 8005820:	2000      	movs	r0, #0
 8005822:	e068      	b.n	80058f6 <??zcl_persist_read_attrs_9>

08005824 <??zcl_persist_read_attrs_20>:
 8005824:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005828:	8801      	ldrh	r1, [r0, #0]
 800582a:	4658      	mov	r0, fp
 800582c:	b280      	uxth	r0, r0
 800582e:	4428      	add	r0, r5
 8005830:	f7fa fd00 	bl	8000234 <putle16>
 8005834:	f11b 0b02 	adds.w	fp, fp, #2
 8005838:	0030      	movs	r0, r6
 800583a:	0001      	movs	r1, r0
 800583c:	b289      	uxth	r1, r1
 800583e:	4658      	mov	r0, fp
 8005840:	b280      	uxth	r0, r0
 8005842:	4428      	add	r0, r5
 8005844:	f7fa fcf6 	bl	8000234 <putle16>
 8005848:	f11b 0b02 	adds.w	fp, fp, #2
 800584c:	eb16 0b0b 	adds.w	fp, r6, fp
 8005850:	e044      	b.n	80058dc <??zcl_persist_read_attrs_14>

08005852 <??zcl_persist_read_attrs_16>:
 8005852:	2300      	movs	r3, #0
 8005854:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005858:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800585c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005860:	7880      	ldrb	r0, [r0, #2]
 8005862:	f7fb fc96 	bl	8001192 <ZbZclAttrParseLength>
 8005866:	0006      	movs	r6, r0
 8005868:	2e01      	cmp	r6, #1
 800586a:	db02      	blt.n	8005872 <??zcl_persist_read_attrs_21>
 800586c:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8005870:	db00      	blt.n	8005874 <??zcl_persist_read_attrs_22>

08005872 <??zcl_persist_read_attrs_21>:
 8005872:	e033      	b.n	80058dc <??zcl_persist_read_attrs_14>

08005874 <??zcl_persist_read_attrs_22>:
 8005874:	4648      	mov	r0, r9
 8005876:	b280      	uxth	r0, r0
 8005878:	4659      	mov	r1, fp
 800587a:	b289      	uxth	r1, r1
 800587c:	fa11 f186 	uxtah	r1, r1, r6
 8005880:	1d09      	adds	r1, r1, #4
 8005882:	4288      	cmp	r0, r1
 8005884:	d207      	bcs.n	8005896 <??zcl_persist_read_attrs_23>
 8005886:	2300      	movs	r3, #0
 8005888:	a21c      	add	r2, pc, #112	; (adr r2, 80058fc <??DataTable5>)
 800588a:	0029      	movs	r1, r5
 800588c:	68b8      	ldr	r0, [r7, #8]
 800588e:	f00c ff96 	bl	80127be <zb_heap_free>
 8005892:	2000      	movs	r0, #0
 8005894:	e02f      	b.n	80058f6 <??zcl_persist_read_attrs_9>

08005896 <??zcl_persist_read_attrs_23>:
 8005896:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800589a:	8801      	ldrh	r1, [r0, #0]
 800589c:	4658      	mov	r0, fp
 800589e:	b280      	uxth	r0, r0
 80058a0:	4428      	add	r0, r5
 80058a2:	f7fa fcc7 	bl	8000234 <putle16>
 80058a6:	f11b 0b02 	adds.w	fp, fp, #2
 80058aa:	0030      	movs	r0, r6
 80058ac:	0001      	movs	r1, r0
 80058ae:	b289      	uxth	r1, r1
 80058b0:	4658      	mov	r0, fp
 80058b2:	b280      	uxth	r0, r0
 80058b4:	4428      	add	r0, r5
 80058b6:	f7fa fcbd 	bl	8000234 <putle16>
 80058ba:	f11b 0b02 	adds.w	fp, fp, #2
 80058be:	9601      	str	r6, [sp, #4]
 80058c0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80058c4:	9000      	str	r0, [sp, #0]
 80058c6:	4658      	mov	r0, fp
 80058c8:	b280      	uxth	r0, r0
 80058ca:	eb05 0a00 	add.w	sl, r5, r0
 80058ce:	9a01      	ldr	r2, [sp, #4]
 80058d0:	9900      	ldr	r1, [sp, #0]
 80058d2:	4650      	mov	r0, sl
 80058d4:	f00f f98b 	bl	8014bee <__aeabi_memcpy>
 80058d8:	eb16 0b0b 	adds.w	fp, r6, fp

080058dc <??zcl_persist_read_attrs_14>:
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	f117 0124 	adds.w	r1, r7, #36	; 0x24
 80058e2:	4288      	cmp	r0, r1
 80058e4:	d001      	beq.n	80058ea <??zcl_persist_read_attrs_24>
 80058e6:	6824      	ldr	r4, [r4, #0]
 80058e8:	e73d      	b.n	8005766 <??zcl_persist_read_attrs_12>

080058ea <??zcl_persist_read_attrs_24>:
 80058ea:	2400      	movs	r4, #0
 80058ec:	e73b      	b.n	8005766 <??zcl_persist_read_attrs_12>

080058ee <??zcl_persist_read_attrs_13>:
 80058ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058f0:	f8a0 b000 	strh.w	fp, [r0]
 80058f4:	0028      	movs	r0, r5

080058f6 <??zcl_persist_read_attrs_9>:
 80058f6:	b00d      	add	sp, #52	; 0x34
 80058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058fc <??DataTable5>:
 80058fc:	0000 0000                                   ....

08005900 <??DataTable5_1>:
 8005900:	29d3 0800                                   .)..

08005904 <??DataTable5_2>:
 8005904:	2449 0800                                   I$..

08005908 <??DataTable5_3>:
 8005908:	6d08 0801                                   .m..

0800590c <??DataTable5_4>:
 800590c:	549d 0800                                   .T..

08005910 <zcl_persist_send_cache>:
 8005910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	b098      	sub	sp, #96	; 0x60
 8005916:	0005      	movs	r5, r0
 8005918:	001e      	movs	r6, r3
 800591a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800591c:	f05f 0900 	movs.w	r9, #0
 8005920:	0030      	movs	r0, r6
 8005922:	b280      	uxth	r0, r0
 8005924:	28ff      	cmp	r0, #255	; 0xff
 8005926:	d101      	bne.n	800592c <??zcl_persist_send_cache_0>
 8005928:	2085      	movs	r0, #133	; 0x85
 800592a:	e0a1      	b.n	8005a70 <??zcl_persist_send_cache_1>

0800592c <??zcl_persist_send_cache_0>:
 800592c:	0020      	movs	r0, r4
 800592e:	b280      	uxth	r0, r0
 8005930:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 8005934:	4288      	cmp	r0, r1
 8005936:	d301      	bcc.n	800593c <??zcl_persist_send_cache_2>
 8005938:	2089      	movs	r0, #137	; 0x89
 800593a:	e099      	b.n	8005a70 <??zcl_persist_send_cache_1>

0800593c <??zcl_persist_send_cache_2>:
 800593c:	f05f 0a08 	movs.w	sl, #8
 8005940:	f05f 0b00 	movs.w	fp, #0
 8005944:	466f      	mov	r7, sp
 8005946:	465a      	mov	r2, fp
 8005948:	4651      	mov	r1, sl
 800594a:	0038      	movs	r0, r7
 800594c:	f000 f9b6 	bl	8005cbc <__aeabi_memset>
 8005950:	2001      	movs	r0, #1
 8005952:	f88d 0000 	strb.w	r0, [sp]
 8005956:	2001      	movs	r0, #1
 8005958:	f88d 0001 	strb.w	r0, [sp, #1]
 800595c:	2000      	movs	r0, #0
 800595e:	f88d 0002 	strb.w	r0, [sp, #2]
 8005962:	2001      	movs	r0, #1
 8005964:	f88d 0003 	strb.w	r0, [sp, #3]
 8005968:	f64f 78fe 	movw	r8, #65534	; 0xfffe
 800596c:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005970:	f00c fd26 	bl	80123c0 <ZbZclGetNextSeqnum>
 8005974:	f88d 0006 	strb.w	r0, [sp, #6]
 8005978:	2000      	movs	r0, #0
 800597a:	f88d 0007 	strb.w	r0, [sp, #7]
 800597e:	2205      	movs	r2, #5
 8005980:	a904      	add	r1, sp, #16
 8005982:	4668      	mov	r0, sp
 8005984:	f7fe ff8a 	bl	800489c <ZbZclAppendHeader>
 8005988:	0007      	movs	r7, r0
 800598a:	2f00      	cmp	r7, #0
 800598c:	d501      	bpl.n	8005992 <??zcl_persist_send_cache_3>
 800598e:	2085      	movs	r0, #133	; 0x85
 8005990:	e06e      	b.n	8005a70 <??zcl_persist_send_cache_1>

08005992 <??zcl_persist_send_cache_3>:
 8005992:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
 8005996:	a804      	add	r0, sp, #16
 8005998:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800599c:	a812      	add	r0, sp, #72	; 0x48
 800599e:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 80059a2:	6047      	str	r7, [r0, #4]
 80059a4:	f119 0901 	adds.w	r9, r9, #1
 80059a8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80059ac:	a802      	add	r0, sp, #8
 80059ae:	f7fa fc41 	bl	8000234 <putle16>
 80059b2:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 80059b6:	f88d 000a 	strb.w	r0, [sp, #10]
 80059ba:	a802      	add	r0, sp, #8
 80059bc:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80059c0:	2003      	movs	r0, #3
 80059c2:	a912      	add	r1, sp, #72	; 0x48
 80059c4:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80059c8:	6048      	str	r0, [r1, #4]
 80059ca:	f119 0901 	adds.w	r9, r9, #1
 80059ce:	9824      	ldr	r0, [sp, #144]	; 0x90
 80059d0:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80059d4:	0020      	movs	r0, r4
 80059d6:	b280      	uxth	r0, r0
 80059d8:	a912      	add	r1, sp, #72	; 0x48
 80059da:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80059de:	6048      	str	r0, [r1, #4]
 80059e0:	f119 0901 	adds.w	r9, r9, #1
 80059e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80059e8:	f05f 0a30 	movs.w	sl, #48	; 0x30
 80059ec:	f05f 0900 	movs.w	r9, #0
 80059f0:	f10d 0b18 	add.w	fp, sp, #24
 80059f4:	464a      	mov	r2, r9
 80059f6:	4651      	mov	r1, sl
 80059f8:	4658      	mov	r0, fp
 80059fa:	f000 f95f 	bl	8005cbc <__aeabi_memset>
 80059fe:	2003      	movs	r0, #3
 8005a00:	f88d 0018 	strb.w	r0, [sp, #24]
 8005a04:	0028      	movs	r0, r5
 8005a06:	f00b fe51 	bl	80116ac <ZbExtendedAddress>
 8005a0a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a0e:	20ff      	movs	r0, #255	; 0xff
 8005a10:	f8ad 001a 	strh.w	r0, [sp, #26]
 8005a14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a18:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8005a1c:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 8005a20:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8005a24:	a812      	add	r0, sp, #72	; 0x48
 8005a26:	900c      	str	r0, [sp, #48]	; 0x30
 8005a28:	9803      	ldr	r0, [sp, #12]
 8005a2a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
 8005a34:	2000      	movs	r0, #0
 8005a36:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8005a3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a3e:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8005a42:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8005a46:	f050 0008 	orrs.w	r0, r0, #8
 8005a4a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8005a4e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8005a52:	f050 0004 	orrs.w	r0, r0, #4
 8005a56:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	a906      	add	r1, sp, #24
 8005a60:	0028      	movs	r0, r5
 8005a62:	f00b ff27 	bl	80118b4 <ZbApsdeDataReqCallback>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d001      	beq.n	8005a6e <??zcl_persist_send_cache_4>
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	e000      	b.n	8005a70 <??zcl_persist_send_cache_1>

08005a6e <??zcl_persist_send_cache_4>:
 8005a6e:	2000      	movs	r0, #0

08005a70 <??zcl_persist_send_cache_1>:
 8005a70:	b01b      	add	sp, #108	; 0x6c
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a76 <ZbZclHandleGetSceneData>:
 8005a76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a7a:	b0a2      	sub	sp, #136	; 0x88
 8005a7c:	0004      	movs	r4, r0
 8005a7e:	000d      	movs	r5, r1
 8005a80:	0016      	movs	r6, r2
 8005a82:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d106      	bne.n	8005a96 <??ZbZclHandleGetSceneData_0>
 8005a88:	2381      	movs	r3, #129	; 0x81
 8005a8a:	002a      	movs	r2, r5
 8005a8c:	0031      	movs	r1, r6
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f00c fd0b 	bl	80124aa <ZbZclSendDefaultResponse>
 8005a94:	e06b      	b.n	8005b6e <??ZbZclHandleGetSceneData_1>

08005a96 <??ZbZclHandleGetSceneData_0>:
 8005a96:	2708      	movs	r7, #8
 8005a98:	f05f 0800 	movs.w	r8, #0
 8005a9c:	46e9      	mov	r9, sp
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	0039      	movs	r1, r7
 8005aa2:	4648      	mov	r0, r9
 8005aa4:	f000 f90a 	bl	8005cbc <__aeabi_memset>
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f88d 0000 	strb.w	r0, [sp]
 8005aae:	2001      	movs	r0, #1
 8005ab0:	f88d 0001 	strb.w	r0, [sp, #1]
 8005ab4:	78a8      	ldrb	r0, [r5, #2]
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d103      	bne.n	8005ac2 <??ZbZclHandleGetSceneData_2>
 8005aba:	2001      	movs	r0, #1
 8005abc:	f88d 0002 	strb.w	r0, [sp, #2]
 8005ac0:	e002      	b.n	8005ac8 <??ZbZclHandleGetSceneData_3>

08005ac2 <??ZbZclHandleGetSceneData_2>:
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f88d 0002 	strb.w	r0, [sp, #2]

08005ac8 <??ZbZclHandleGetSceneData_3>:
 8005ac8:	2001      	movs	r0, #1
 8005aca:	f88d 0003 	strb.w	r0, [sp, #3]
 8005ace:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8005ad2:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005ad6:	79a8      	ldrb	r0, [r5, #6]
 8005ad8:	f88d 0006 	strb.w	r0, [sp, #6]
 8005adc:	20f0      	movs	r0, #240	; 0xf0
 8005ade:	f88d 0007 	strb.w	r0, [sp, #7]
 8005ae2:	8b62      	ldrh	r2, [r4, #26]
 8005ae4:	a90e      	add	r1, sp, #56	; 0x38
 8005ae6:	4668      	mov	r0, sp
 8005ae8:	f7fe fed8 	bl	800489c <ZbZclAppendHeader>
 8005aec:	0007      	movs	r7, r0
 8005aee:	2f00      	cmp	r7, #0
 8005af0:	d506      	bpl.n	8005b00 <??ZbZclHandleGetSceneData_4>
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	002a      	movs	r2, r5
 8005af6:	0031      	movs	r1, r6
 8005af8:	0020      	movs	r0, r4
 8005afa:	f00c fcd6 	bl	80124aa <ZbZclSendDefaultResponse>
 8005afe:	e036      	b.n	8005b6e <??ZbZclHandleGetSceneData_1>

08005b00 <??ZbZclHandleGetSceneData_4>:
 8005b00:	46b9      	mov	r9, r7
 8005b02:	f1d9 024d 	rsbs	r2, r9, #77	; 0x4d
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	a80e      	add	r0, sp, #56	; 0x38
 8005b0a:	eb00 0109 	add.w	r1, r0, r9
 8005b0e:	0020      	movs	r0, r4
 8005b10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b12:	4798      	blx	r3
 8005b14:	4680      	mov	r8, r0
 8005b16:	4640      	mov	r0, r8
 8005b18:	b2c0      	uxtb	r0, r0
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d106      	bne.n	8005b2c <??ZbZclHandleGetSceneData_5>
 8005b1e:	2381      	movs	r3, #129	; 0x81
 8005b20:	002a      	movs	r2, r5
 8005b22:	0031      	movs	r1, r6
 8005b24:	0020      	movs	r0, r4
 8005b26:	f00c fcc0 	bl	80124aa <ZbZclSendDefaultResponse>
 8005b2a:	e020      	b.n	8005b6e <??ZbZclHandleGetSceneData_1>

08005b2c <??ZbZclHandleGetSceneData_5>:
 8005b2c:	fa59 f988 	uxtab	r9, r9, r8
 8005b30:	0032      	movs	r2, r6
 8005b32:	a902      	add	r1, sp, #8
 8005b34:	0020      	movs	r0, r4
 8005b36:	f7fe f958 	bl	8003dea <ZbZclClusterInitApsdeReq>
 8005b3a:	a802      	add	r0, sp, #8
 8005b3c:	f116 0110 	adds.w	r1, r6, #16
 8005b40:	2210      	movs	r2, #16
 8005b42:	f00f f854 	bl	8014bee <__aeabi_memcpy>
 8005b46:	2000      	movs	r0, #0
 8005b48:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
 8005b52:	2000      	movs	r0, #0
 8005b54:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005b58:	a80e      	add	r0, sp, #56	; 0x38
 8005b5a:	9008      	str	r0, [sp, #32]
 8005b5c:	4648      	mov	r0, r9
 8005b5e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
 8005b62:	2300      	movs	r3, #0
 8005b64:	2200      	movs	r2, #0
 8005b66:	a902      	add	r1, sp, #8
 8005b68:	68a0      	ldr	r0, [r4, #8]
 8005b6a:	f00b fea3 	bl	80118b4 <ZbApsdeDataReqCallback>

08005b6e <??ZbZclHandleGetSceneData_1>:
 8005b6e:	b023      	add	sp, #140	; 0x8c
 8005b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005b74 <ZbZclHandleSetSceneData>:
 8005b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	b0a4      	sub	sp, #144	; 0x90
 8005b7a:	0004      	movs	r4, r0
 8005b7c:	000d      	movs	r5, r1
 8005b7e:	0016      	movs	r6, r2
 8005b80:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d106      	bne.n	8005b94 <??ZbZclHandleSetSceneData_0>
 8005b86:	2381      	movs	r3, #129	; 0x81
 8005b88:	002a      	movs	r2, r5
 8005b8a:	0031      	movs	r1, r6
 8005b8c:	0020      	movs	r0, r4
 8005b8e:	f00c fc8c 	bl	80124aa <ZbZclSendDefaultResponse>
 8005b92:	e086      	b.n	8005ca2 <??ZbZclHandleSetSceneData_1>

08005b94 <??ZbZclHandleSetSceneData_0>:
 8005b94:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 8005b96:	2805      	cmp	r0, #5
 8005b98:	da06      	bge.n	8005ba8 <??ZbZclHandleSetSceneData_2>
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	002a      	movs	r2, r5
 8005b9e:	0031      	movs	r1, r6
 8005ba0:	0020      	movs	r0, r4
 8005ba2:	f00c fc82 	bl	80124aa <ZbZclSendDefaultResponse>
 8005ba6:	e07c      	b.n	8005ca2 <??ZbZclHandleSetSceneData_1>

08005ba8 <??ZbZclHandleSetSceneData_2>:
 8005ba8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8005baa:	f7fa fb08 	bl	80001be <pletoh32>
 8005bae:	0007      	movs	r7, r0
 8005bb0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8005bb2:	7900      	ldrb	r0, [r0, #4]
 8005bb4:	f88d 0000 	strb.w	r0, [sp]
 8005bb8:	f89d 0000 	ldrb.w	r0, [sp]
 8005bbc:	1d40      	adds	r0, r0, #5
 8005bbe:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8005bc0:	4288      	cmp	r0, r1
 8005bc2:	d206      	bcs.n	8005bd2 <??ZbZclHandleSetSceneData_3>
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	002a      	movs	r2, r5
 8005bc8:	0031      	movs	r1, r6
 8005bca:	0020      	movs	r0, r4
 8005bcc:	f00c fc6d 	bl	80124aa <ZbZclSendDefaultResponse>
 8005bd0:	e067      	b.n	8005ca2 <??ZbZclHandleSetSceneData_1>

08005bd2 <??ZbZclHandleSetSceneData_3>:
 8005bd2:	003b      	movs	r3, r7
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f89d 2000 	ldrb.w	r2, [sp]
 8005bda:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8005bdc:	1d41      	adds	r1, r0, #5
 8005bde:	0020      	movs	r0, r4
 8005be0:	f8d4 c064 	ldr.w	ip, [r4, #100]	; 0x64
 8005be4:	47e0      	blx	ip
 8005be6:	4680      	mov	r8, r0
 8005be8:	f05f 0908 	movs.w	r9, #8
 8005bec:	f05f 0a00 	movs.w	sl, #0
 8005bf0:	f10d 0b04 	add.w	fp, sp, #4
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4658      	mov	r0, fp
 8005bfa:	f000 f85f 	bl	8005cbc <__aeabi_memset>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f88d 0004 	strb.w	r0, [sp, #4]
 8005c04:	2001      	movs	r0, #1
 8005c06:	f88d 0005 	strb.w	r0, [sp, #5]
 8005c0a:	78a8      	ldrb	r0, [r5, #2]
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d103      	bne.n	8005c18 <??ZbZclHandleSetSceneData_4>
 8005c10:	2001      	movs	r0, #1
 8005c12:	f88d 0006 	strb.w	r0, [sp, #6]
 8005c16:	e002      	b.n	8005c1e <??ZbZclHandleSetSceneData_5>

08005c18 <??ZbZclHandleSetSceneData_4>:
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f88d 0006 	strb.w	r0, [sp, #6]

08005c1e <??ZbZclHandleSetSceneData_5>:
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f88d 0007 	strb.w	r0, [sp, #7]
 8005c24:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8005c28:	f8ad 0008 	strh.w	r0, [sp, #8]
 8005c2c:	79a8      	ldrb	r0, [r5, #6]
 8005c2e:	f88d 000a 	strb.w	r0, [sp, #10]
 8005c32:	20f1      	movs	r0, #241	; 0xf1
 8005c34:	f88d 000b 	strb.w	r0, [sp, #11]
 8005c38:	8b62      	ldrh	r2, [r4, #26]
 8005c3a:	a910      	add	r1, sp, #64	; 0x40
 8005c3c:	a801      	add	r0, sp, #4
 8005c3e:	f7fe fe2d 	bl	800489c <ZbZclAppendHeader>
 8005c42:	4681      	mov	r9, r0
 8005c44:	f1b9 0f00 	cmp.w	r9, #0
 8005c48:	d506      	bpl.n	8005c58 <??ZbZclHandleSetSceneData_6>
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	002a      	movs	r2, r5
 8005c4e:	0031      	movs	r1, r6
 8005c50:	0020      	movs	r0, r4
 8005c52:	f00c fc2a 	bl	80124aa <ZbZclSendDefaultResponse>
 8005c56:	e024      	b.n	8005ca2 <??ZbZclHandleSetSceneData_1>

08005c58 <??ZbZclHandleSetSceneData_6>:
 8005c58:	46ca      	mov	sl, r9
 8005c5a:	a810      	add	r0, sp, #64	; 0x40
 8005c5c:	f800 800a 	strb.w	r8, [r0, sl]
 8005c60:	f11a 0a01 	adds.w	sl, sl, #1
 8005c64:	0032      	movs	r2, r6
 8005c66:	a904      	add	r1, sp, #16
 8005c68:	0020      	movs	r0, r4
 8005c6a:	f7fe f8be 	bl	8003dea <ZbZclClusterInitApsdeReq>
 8005c6e:	a804      	add	r0, sp, #16
 8005c70:	f116 0110 	adds.w	r1, r6, #16
 8005c74:	2210      	movs	r2, #16
 8005c76:	f00e ffba 	bl	8014bee <__aeabi_memcpy>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8005c80:	2000      	movs	r0, #0
 8005c82:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
 8005c86:	2000      	movs	r0, #0
 8005c88:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8005c8c:	a810      	add	r0, sp, #64	; 0x40
 8005c8e:	900a      	str	r0, [sp, #40]	; 0x28
 8005c90:	4650      	mov	r0, sl
 8005c92:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8005c96:	2300      	movs	r3, #0
 8005c98:	2200      	movs	r2, #0
 8005c9a:	a904      	add	r1, sp, #16
 8005c9c:	68a0      	ldr	r0, [r4, #8]
 8005c9e:	f00b fe09 	bl	80118b4 <ZbApsdeDataReqCallback>

08005ca2 <??ZbZclHandleSetSceneData_1>:
 8005ca2:	b025      	add	sp, #148	; 0x94
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ca8 <strcmp>:
 8005ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb0:	2a01      	cmp	r2, #1
 8005cb2:	bf28      	it	cs
 8005cb4:	429a      	cmpcs	r2, r3
 8005cb6:	d0f7      	beq.n	8005ca8 <strcmp>
 8005cb8:	1ad0      	subs	r0, r2, r3
 8005cba:	4770      	bx	lr

08005cbc <__aeabi_memset>:
 8005cbc:	b470      	push	{r4, r5, r6}
 8005cbe:	0784      	lsls	r4, r0, #30
 8005cc0:	d046      	beq.n	8005d50 <__aeabi_memset+0x94>
 8005cc2:	1e4c      	subs	r4, r1, #1
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d041      	beq.n	8005d4c <__aeabi_memset+0x90>
 8005cc8:	b2d5      	uxtb	r5, r2
 8005cca:	4603      	mov	r3, r0
 8005ccc:	e002      	b.n	8005cd4 <__aeabi_memset+0x18>
 8005cce:	1e61      	subs	r1, r4, #1
 8005cd0:	b3e4      	cbz	r4, 8005d4c <__aeabi_memset+0x90>
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	f803 5b01 	strb.w	r5, [r3], #1
 8005cd8:	0799      	lsls	r1, r3, #30
 8005cda:	d1f8      	bne.n	8005cce <__aeabi_memset+0x12>
 8005cdc:	2c03      	cmp	r4, #3
 8005cde:	d92e      	bls.n	8005d3e <__aeabi_memset+0x82>
 8005ce0:	b2d5      	uxtb	r5, r2
 8005ce2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005ce6:	2c0f      	cmp	r4, #15
 8005ce8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005cec:	d919      	bls.n	8005d22 <__aeabi_memset+0x66>
 8005cee:	4626      	mov	r6, r4
 8005cf0:	f103 0110 	add.w	r1, r3, #16
 8005cf4:	3e10      	subs	r6, #16
 8005cf6:	2e0f      	cmp	r6, #15
 8005cf8:	f841 5c10 	str.w	r5, [r1, #-16]
 8005cfc:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005d00:	f841 5c08 	str.w	r5, [r1, #-8]
 8005d04:	f841 5c04 	str.w	r5, [r1, #-4]
 8005d08:	f101 0110 	add.w	r1, r1, #16
 8005d0c:	d8f2      	bhi.n	8005cf4 <__aeabi_memset+0x38>
 8005d0e:	f1a4 0110 	sub.w	r1, r4, #16
 8005d12:	f021 010f 	bic.w	r1, r1, #15
 8005d16:	f004 040f 	and.w	r4, r4, #15
 8005d1a:	3110      	adds	r1, #16
 8005d1c:	2c03      	cmp	r4, #3
 8005d1e:	440b      	add	r3, r1
 8005d20:	d90d      	bls.n	8005d3e <__aeabi_memset+0x82>
 8005d22:	461e      	mov	r6, r3
 8005d24:	4621      	mov	r1, r4
 8005d26:	3904      	subs	r1, #4
 8005d28:	2903      	cmp	r1, #3
 8005d2a:	f846 5b04 	str.w	r5, [r6], #4
 8005d2e:	d8fa      	bhi.n	8005d26 <__aeabi_memset+0x6a>
 8005d30:	1f21      	subs	r1, r4, #4
 8005d32:	f021 0103 	bic.w	r1, r1, #3
 8005d36:	3104      	adds	r1, #4
 8005d38:	440b      	add	r3, r1
 8005d3a:	f004 0403 	and.w	r4, r4, #3
 8005d3e:	b12c      	cbz	r4, 8005d4c <__aeabi_memset+0x90>
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	441c      	add	r4, r3
 8005d44:	f803 2b01 	strb.w	r2, [r3], #1
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d1fb      	bne.n	8005d44 <__aeabi_memset+0x88>
 8005d4c:	bc70      	pop	{r4, r5, r6}
 8005d4e:	4770      	bx	lr
 8005d50:	460c      	mov	r4, r1
 8005d52:	4603      	mov	r3, r0
 8005d54:	e7c2      	b.n	8005cdc <__aeabi_memset+0x20>
	...

08005d60 <memchr>:
 8005d60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005d64:	2a10      	cmp	r2, #16
 8005d66:	db2b      	blt.n	8005dc0 <memchr+0x60>
 8005d68:	f010 0f07 	tst.w	r0, #7
 8005d6c:	d008      	beq.n	8005d80 <memchr+0x20>
 8005d6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d72:	3a01      	subs	r2, #1
 8005d74:	428b      	cmp	r3, r1
 8005d76:	d02d      	beq.n	8005dd4 <memchr+0x74>
 8005d78:	f010 0f07 	tst.w	r0, #7
 8005d7c:	b342      	cbz	r2, 8005dd0 <memchr+0x70>
 8005d7e:	d1f6      	bne.n	8005d6e <memchr+0xe>
 8005d80:	b4f0      	push	{r4, r5, r6, r7}
 8005d82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005d86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005d8a:	f022 0407 	bic.w	r4, r2, #7
 8005d8e:	f07f 0700 	mvns.w	r7, #0
 8005d92:	2300      	movs	r3, #0
 8005d94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005d98:	3c08      	subs	r4, #8
 8005d9a:	ea85 0501 	eor.w	r5, r5, r1
 8005d9e:	ea86 0601 	eor.w	r6, r6, r1
 8005da2:	fa85 f547 	uadd8	r5, r5, r7
 8005da6:	faa3 f587 	sel	r5, r3, r7
 8005daa:	fa86 f647 	uadd8	r6, r6, r7
 8005dae:	faa5 f687 	sel	r6, r5, r7
 8005db2:	b98e      	cbnz	r6, 8005dd8 <memchr+0x78>
 8005db4:	d1ee      	bne.n	8005d94 <memchr+0x34>
 8005db6:	bcf0      	pop	{r4, r5, r6, r7}
 8005db8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005dbc:	f002 0207 	and.w	r2, r2, #7
 8005dc0:	b132      	cbz	r2, 8005dd0 <memchr+0x70>
 8005dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	ea83 0301 	eor.w	r3, r3, r1
 8005dcc:	b113      	cbz	r3, 8005dd4 <memchr+0x74>
 8005dce:	d1f8      	bne.n	8005dc2 <memchr+0x62>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	4770      	bx	lr
 8005dd4:	3801      	subs	r0, #1
 8005dd6:	4770      	bx	lr
 8005dd8:	2d00      	cmp	r5, #0
 8005dda:	bf06      	itte	eq
 8005ddc:	4635      	moveq	r5, r6
 8005dde:	3803      	subeq	r0, #3
 8005de0:	3807      	subne	r0, #7
 8005de2:	f015 0f01 	tst.w	r5, #1
 8005de6:	d107      	bne.n	8005df8 <memchr+0x98>
 8005de8:	3001      	adds	r0, #1
 8005dea:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005dee:	bf02      	ittt	eq
 8005df0:	3001      	addeq	r0, #1
 8005df2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005df6:	3001      	addeq	r0, #1
 8005df8:	bcf0      	pop	{r4, r5, r6, r7}
 8005dfa:	3801      	subs	r0, #1
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop

08005e00 <__aeabi_llsl>:
 8005e00:	4091      	lsls	r1, r2
 8005e02:	0003      	movs	r3, r0
 8005e04:	4090      	lsls	r0, r2
 8005e06:	469c      	mov	ip, r3
 8005e08:	3a20      	subs	r2, #32
 8005e0a:	4093      	lsls	r3, r2
 8005e0c:	4319      	orrs	r1, r3
 8005e0e:	4252      	negs	r2, r2
 8005e10:	4663      	mov	r3, ip
 8005e12:	40d3      	lsrs	r3, r2
 8005e14:	4319      	orrs	r1, r3
 8005e16:	4770      	bx	lr

08005e18 <__aeabi_drsub>:
 8005e18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005e1c:	e002      	b.n	8005e24 <__adddf3>
 8005e1e:	bf00      	nop

08005e20 <__aeabi_dsub>:
 8005e20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005e24 <__adddf3>:
 8005e24:	b530      	push	{r4, r5, lr}
 8005e26:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005e2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005e2e:	ea94 0f05 	teq	r4, r5
 8005e32:	bf08      	it	eq
 8005e34:	ea90 0f02 	teqeq	r0, r2
 8005e38:	bf1f      	itttt	ne
 8005e3a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005e3e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005e42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005e46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005e4a:	f000 80e2 	beq.w	8006012 <__adddf3+0x1ee>
 8005e4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005e52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005e56:	bfb8      	it	lt
 8005e58:	426d      	neglt	r5, r5
 8005e5a:	dd0c      	ble.n	8005e76 <__adddf3+0x52>
 8005e5c:	442c      	add	r4, r5
 8005e5e:	ea80 0202 	eor.w	r2, r0, r2
 8005e62:	ea81 0303 	eor.w	r3, r1, r3
 8005e66:	ea82 0000 	eor.w	r0, r2, r0
 8005e6a:	ea83 0101 	eor.w	r1, r3, r1
 8005e6e:	ea80 0202 	eor.w	r2, r0, r2
 8005e72:	ea81 0303 	eor.w	r3, r1, r3
 8005e76:	2d36      	cmp	r5, #54	; 0x36
 8005e78:	bf88      	it	hi
 8005e7a:	bd30      	pophi	{r4, r5, pc}
 8005e7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005e80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005e84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005e88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005e8c:	d002      	beq.n	8005e94 <__adddf3+0x70>
 8005e8e:	4240      	negs	r0, r0
 8005e90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005e98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005e9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005ea0:	d002      	beq.n	8005ea8 <__adddf3+0x84>
 8005ea2:	4252      	negs	r2, r2
 8005ea4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005ea8:	ea94 0f05 	teq	r4, r5
 8005eac:	f000 80a7 	beq.w	8005ffe <__adddf3+0x1da>
 8005eb0:	f1a4 0401 	sub.w	r4, r4, #1
 8005eb4:	f1d5 0e20 	rsbs	lr, r5, #32
 8005eb8:	db0d      	blt.n	8005ed6 <__adddf3+0xb2>
 8005eba:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005ebe:	fa22 f205 	lsr.w	r2, r2, r5
 8005ec2:	1880      	adds	r0, r0, r2
 8005ec4:	f141 0100 	adc.w	r1, r1, #0
 8005ec8:	fa03 f20e 	lsl.w	r2, r3, lr
 8005ecc:	1880      	adds	r0, r0, r2
 8005ece:	fa43 f305 	asr.w	r3, r3, r5
 8005ed2:	4159      	adcs	r1, r3
 8005ed4:	e00e      	b.n	8005ef4 <__adddf3+0xd0>
 8005ed6:	f1a5 0520 	sub.w	r5, r5, #32
 8005eda:	f10e 0e20 	add.w	lr, lr, #32
 8005ede:	2a01      	cmp	r2, #1
 8005ee0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005ee4:	bf28      	it	cs
 8005ee6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005eea:	fa43 f305 	asr.w	r3, r3, r5
 8005eee:	18c0      	adds	r0, r0, r3
 8005ef0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005ef4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005ef8:	d507      	bpl.n	8005f0a <__adddf3+0xe6>
 8005efa:	f04f 0e00 	mov.w	lr, #0
 8005efe:	f1dc 0c00 	rsbs	ip, ip, #0
 8005f02:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005f06:	eb6e 0101 	sbc.w	r1, lr, r1
 8005f0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005f0e:	d31b      	bcc.n	8005f48 <__adddf3+0x124>
 8005f10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005f14:	d30c      	bcc.n	8005f30 <__adddf3+0x10c>
 8005f16:	0849      	lsrs	r1, r1, #1
 8005f18:	ea5f 0030 	movs.w	r0, r0, rrx
 8005f1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005f20:	f104 0401 	add.w	r4, r4, #1
 8005f24:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005f28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005f2c:	f080 809a 	bcs.w	8006064 <__adddf3+0x240>
 8005f30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005f34:	bf08      	it	eq
 8005f36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005f3a:	f150 0000 	adcs.w	r0, r0, #0
 8005f3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005f42:	ea41 0105 	orr.w	r1, r1, r5
 8005f46:	bd30      	pop	{r4, r5, pc}
 8005f48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005f4c:	4140      	adcs	r0, r0
 8005f4e:	eb41 0101 	adc.w	r1, r1, r1
 8005f52:	3c01      	subs	r4, #1
 8005f54:	bf28      	it	cs
 8005f56:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8005f5a:	d2e9      	bcs.n	8005f30 <__adddf3+0x10c>
 8005f5c:	f091 0f00 	teq	r1, #0
 8005f60:	bf04      	itt	eq
 8005f62:	4601      	moveq	r1, r0
 8005f64:	2000      	moveq	r0, #0
 8005f66:	fab1 f381 	clz	r3, r1
 8005f6a:	bf08      	it	eq
 8005f6c:	3320      	addeq	r3, #32
 8005f6e:	f1a3 030b 	sub.w	r3, r3, #11
 8005f72:	f1b3 0220 	subs.w	r2, r3, #32
 8005f76:	da0c      	bge.n	8005f92 <__adddf3+0x16e>
 8005f78:	320c      	adds	r2, #12
 8005f7a:	dd08      	ble.n	8005f8e <__adddf3+0x16a>
 8005f7c:	f102 0c14 	add.w	ip, r2, #20
 8005f80:	f1c2 020c 	rsb	r2, r2, #12
 8005f84:	fa01 f00c 	lsl.w	r0, r1, ip
 8005f88:	fa21 f102 	lsr.w	r1, r1, r2
 8005f8c:	e00c      	b.n	8005fa8 <__adddf3+0x184>
 8005f8e:	f102 0214 	add.w	r2, r2, #20
 8005f92:	bfd8      	it	le
 8005f94:	f1c2 0c20 	rsble	ip, r2, #32
 8005f98:	fa01 f102 	lsl.w	r1, r1, r2
 8005f9c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005fa0:	bfdc      	itt	le
 8005fa2:	ea41 010c 	orrle.w	r1, r1, ip
 8005fa6:	4090      	lslle	r0, r2
 8005fa8:	1ae4      	subs	r4, r4, r3
 8005faa:	bfa2      	ittt	ge
 8005fac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005fb0:	4329      	orrge	r1, r5
 8005fb2:	bd30      	popge	{r4, r5, pc}
 8005fb4:	ea6f 0404 	mvn.w	r4, r4
 8005fb8:	3c1f      	subs	r4, #31
 8005fba:	da1c      	bge.n	8005ff6 <__adddf3+0x1d2>
 8005fbc:	340c      	adds	r4, #12
 8005fbe:	dc0e      	bgt.n	8005fde <__adddf3+0x1ba>
 8005fc0:	f104 0414 	add.w	r4, r4, #20
 8005fc4:	f1c4 0220 	rsb	r2, r4, #32
 8005fc8:	fa20 f004 	lsr.w	r0, r0, r4
 8005fcc:	fa01 f302 	lsl.w	r3, r1, r2
 8005fd0:	ea40 0003 	orr.w	r0, r0, r3
 8005fd4:	fa21 f304 	lsr.w	r3, r1, r4
 8005fd8:	ea45 0103 	orr.w	r1, r5, r3
 8005fdc:	bd30      	pop	{r4, r5, pc}
 8005fde:	f1c4 040c 	rsb	r4, r4, #12
 8005fe2:	f1c4 0220 	rsb	r2, r4, #32
 8005fe6:	fa20 f002 	lsr.w	r0, r0, r2
 8005fea:	fa01 f304 	lsl.w	r3, r1, r4
 8005fee:	ea40 0003 	orr.w	r0, r0, r3
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	bd30      	pop	{r4, r5, pc}
 8005ff6:	fa21 f004 	lsr.w	r0, r1, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	bd30      	pop	{r4, r5, pc}
 8005ffe:	f094 0f00 	teq	r4, #0
 8006002:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006006:	bf06      	itte	eq
 8006008:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800600c:	3401      	addeq	r4, #1
 800600e:	3d01      	subne	r5, #1
 8006010:	e74e      	b.n	8005eb0 <__adddf3+0x8c>
 8006012:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006016:	bf18      	it	ne
 8006018:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800601c:	d029      	beq.n	8006072 <__adddf3+0x24e>
 800601e:	ea94 0f05 	teq	r4, r5
 8006022:	bf08      	it	eq
 8006024:	ea90 0f02 	teqeq	r0, r2
 8006028:	d005      	beq.n	8006036 <__adddf3+0x212>
 800602a:	ea54 0c00 	orrs.w	ip, r4, r0
 800602e:	bf04      	itt	eq
 8006030:	4619      	moveq	r1, r3
 8006032:	4610      	moveq	r0, r2
 8006034:	bd30      	pop	{r4, r5, pc}
 8006036:	ea91 0f03 	teq	r1, r3
 800603a:	bf1e      	ittt	ne
 800603c:	2100      	movne	r1, #0
 800603e:	2000      	movne	r0, #0
 8006040:	bd30      	popne	{r4, r5, pc}
 8006042:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006046:	d105      	bne.n	8006054 <__adddf3+0x230>
 8006048:	0040      	lsls	r0, r0, #1
 800604a:	4149      	adcs	r1, r1
 800604c:	bf28      	it	cs
 800604e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006052:	bd30      	pop	{r4, r5, pc}
 8006054:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006058:	bf3c      	itt	cc
 800605a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800605e:	bd30      	popcc	{r4, r5, pc}
 8006060:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006064:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006068:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800606c:	f04f 0000 	mov.w	r0, #0
 8006070:	bd30      	pop	{r4, r5, pc}
 8006072:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006076:	bf1a      	itte	ne
 8006078:	4619      	movne	r1, r3
 800607a:	4610      	movne	r0, r2
 800607c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006080:	bf1c      	itt	ne
 8006082:	460b      	movne	r3, r1
 8006084:	4602      	movne	r2, r0
 8006086:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800608a:	bf06      	itte	eq
 800608c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006090:	ea91 0f03 	teqeq	r1, r3
 8006094:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006098:	bd30      	pop	{r4, r5, pc}
 800609a:	bf00      	nop

0800609c <__aeabi_ui2d>:
 800609c:	f090 0f00 	teq	r0, #0
 80060a0:	bf04      	itt	eq
 80060a2:	2100      	moveq	r1, #0
 80060a4:	4770      	bxeq	lr
 80060a6:	b530      	push	{r4, r5, lr}
 80060a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80060ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80060b0:	f04f 0500 	mov.w	r5, #0
 80060b4:	f04f 0100 	mov.w	r1, #0
 80060b8:	e750      	b.n	8005f5c <__adddf3+0x138>
 80060ba:	bf00      	nop

080060bc <__aeabi_i2d>:
 80060bc:	f090 0f00 	teq	r0, #0
 80060c0:	bf04      	itt	eq
 80060c2:	2100      	moveq	r1, #0
 80060c4:	4770      	bxeq	lr
 80060c6:	b530      	push	{r4, r5, lr}
 80060c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80060cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80060d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80060d4:	bf48      	it	mi
 80060d6:	4240      	negmi	r0, r0
 80060d8:	f04f 0100 	mov.w	r1, #0
 80060dc:	e73e      	b.n	8005f5c <__adddf3+0x138>
 80060de:	bf00      	nop

080060e0 <__aeabi_f2d>:
 80060e0:	0042      	lsls	r2, r0, #1
 80060e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80060e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80060ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80060ee:	bf1f      	itttt	ne
 80060f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80060f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80060f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80060fc:	4770      	bxne	lr
 80060fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006102:	bf08      	it	eq
 8006104:	4770      	bxeq	lr
 8006106:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800610a:	bf04      	itt	eq
 800610c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006110:	4770      	bxeq	lr
 8006112:	b530      	push	{r4, r5, lr}
 8006114:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006118:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800611c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006120:	e71c      	b.n	8005f5c <__adddf3+0x138>
 8006122:	bf00      	nop

08006124 <__aeabi_ul2d>:
 8006124:	ea50 0201 	orrs.w	r2, r0, r1
 8006128:	bf08      	it	eq
 800612a:	4770      	bxeq	lr
 800612c:	b530      	push	{r4, r5, lr}
 800612e:	f04f 0500 	mov.w	r5, #0
 8006132:	e00a      	b.n	800614a <__aeabi_l2d+0x16>

08006134 <__aeabi_l2d>:
 8006134:	ea50 0201 	orrs.w	r2, r0, r1
 8006138:	bf08      	it	eq
 800613a:	4770      	bxeq	lr
 800613c:	b530      	push	{r4, r5, lr}
 800613e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006142:	d502      	bpl.n	800614a <__aeabi_l2d+0x16>
 8006144:	4240      	negs	r0, r0
 8006146:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800614a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800614e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006152:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006156:	f43f aed8 	beq.w	8005f0a <__adddf3+0xe6>
 800615a:	f04f 0203 	mov.w	r2, #3
 800615e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006162:	bf18      	it	ne
 8006164:	3203      	addne	r2, #3
 8006166:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800616a:	bf18      	it	ne
 800616c:	3203      	addne	r2, #3
 800616e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006172:	f1c2 0320 	rsb	r3, r2, #32
 8006176:	fa00 fc03 	lsl.w	ip, r0, r3
 800617a:	fa20 f002 	lsr.w	r0, r0, r2
 800617e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006182:	ea40 000e 	orr.w	r0, r0, lr
 8006186:	fa21 f102 	lsr.w	r1, r1, r2
 800618a:	4414      	add	r4, r2
 800618c:	e6bd      	b.n	8005f0a <__adddf3+0xe6>
 800618e:	bf00      	nop

08006190 <__aeabi_dmul>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006196:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800619a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800619e:	bf1d      	ittte	ne
 80061a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80061a4:	ea94 0f0c 	teqne	r4, ip
 80061a8:	ea95 0f0c 	teqne	r5, ip
 80061ac:	f000 f8de 	bleq	800636c <__aeabi_dmul+0x1dc>
 80061b0:	442c      	add	r4, r5
 80061b2:	ea81 0603 	eor.w	r6, r1, r3
 80061b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80061ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80061be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80061c2:	bf18      	it	ne
 80061c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80061c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80061cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d0:	d038      	beq.n	8006244 <__aeabi_dmul+0xb4>
 80061d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80061d6:	f04f 0500 	mov.w	r5, #0
 80061da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80061de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80061e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80061e6:	f04f 0600 	mov.w	r6, #0
 80061ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80061ee:	f09c 0f00 	teq	ip, #0
 80061f2:	bf18      	it	ne
 80061f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80061f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80061fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006200:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006204:	d204      	bcs.n	8006210 <__aeabi_dmul+0x80>
 8006206:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800620a:	416d      	adcs	r5, r5
 800620c:	eb46 0606 	adc.w	r6, r6, r6
 8006210:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006214:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006218:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800621c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006220:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006224:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006228:	bf88      	it	hi
 800622a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800622e:	d81e      	bhi.n	800626e <__aeabi_dmul+0xde>
 8006230:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006234:	bf08      	it	eq
 8006236:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800623a:	f150 0000 	adcs.w	r0, r0, #0
 800623e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006248:	ea46 0101 	orr.w	r1, r6, r1
 800624c:	ea40 0002 	orr.w	r0, r0, r2
 8006250:	ea81 0103 	eor.w	r1, r1, r3
 8006254:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006258:	bfc2      	ittt	gt
 800625a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800625e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006262:	bd70      	popgt	{r4, r5, r6, pc}
 8006264:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006268:	f04f 0e00 	mov.w	lr, #0
 800626c:	3c01      	subs	r4, #1
 800626e:	f300 80ab 	bgt.w	80063c8 <__aeabi_dmul+0x238>
 8006272:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006276:	bfde      	ittt	le
 8006278:	2000      	movle	r0, #0
 800627a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800627e:	bd70      	pople	{r4, r5, r6, pc}
 8006280:	f1c4 0400 	rsb	r4, r4, #0
 8006284:	3c20      	subs	r4, #32
 8006286:	da35      	bge.n	80062f4 <__aeabi_dmul+0x164>
 8006288:	340c      	adds	r4, #12
 800628a:	dc1b      	bgt.n	80062c4 <__aeabi_dmul+0x134>
 800628c:	f104 0414 	add.w	r4, r4, #20
 8006290:	f1c4 0520 	rsb	r5, r4, #32
 8006294:	fa00 f305 	lsl.w	r3, r0, r5
 8006298:	fa20 f004 	lsr.w	r0, r0, r4
 800629c:	fa01 f205 	lsl.w	r2, r1, r5
 80062a0:	ea40 0002 	orr.w	r0, r0, r2
 80062a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80062a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80062ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80062b0:	fa21 f604 	lsr.w	r6, r1, r4
 80062b4:	eb42 0106 	adc.w	r1, r2, r6
 80062b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062bc:	bf08      	it	eq
 80062be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	f1c4 040c 	rsb	r4, r4, #12
 80062c8:	f1c4 0520 	rsb	r5, r4, #32
 80062cc:	fa00 f304 	lsl.w	r3, r0, r4
 80062d0:	fa20 f005 	lsr.w	r0, r0, r5
 80062d4:	fa01 f204 	lsl.w	r2, r1, r4
 80062d8:	ea40 0002 	orr.w	r0, r0, r2
 80062dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80062e4:	f141 0100 	adc.w	r1, r1, #0
 80062e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062ec:	bf08      	it	eq
 80062ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	f1c4 0520 	rsb	r5, r4, #32
 80062f8:	fa00 f205 	lsl.w	r2, r0, r5
 80062fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8006300:	fa20 f304 	lsr.w	r3, r0, r4
 8006304:	fa01 f205 	lsl.w	r2, r1, r5
 8006308:	ea43 0302 	orr.w	r3, r3, r2
 800630c:	fa21 f004 	lsr.w	r0, r1, r4
 8006310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006314:	fa21 f204 	lsr.w	r2, r1, r4
 8006318:	ea20 0002 	bic.w	r0, r0, r2
 800631c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006324:	bf08      	it	eq
 8006326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	f094 0f00 	teq	r4, #0
 8006330:	d10f      	bne.n	8006352 <__aeabi_dmul+0x1c2>
 8006332:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006336:	0040      	lsls	r0, r0, #1
 8006338:	eb41 0101 	adc.w	r1, r1, r1
 800633c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006340:	bf08      	it	eq
 8006342:	3c01      	subeq	r4, #1
 8006344:	d0f7      	beq.n	8006336 <__aeabi_dmul+0x1a6>
 8006346:	ea41 0106 	orr.w	r1, r1, r6
 800634a:	f095 0f00 	teq	r5, #0
 800634e:	bf18      	it	ne
 8006350:	4770      	bxne	lr
 8006352:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006356:	0052      	lsls	r2, r2, #1
 8006358:	eb43 0303 	adc.w	r3, r3, r3
 800635c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006360:	bf08      	it	eq
 8006362:	3d01      	subeq	r5, #1
 8006364:	d0f7      	beq.n	8006356 <__aeabi_dmul+0x1c6>
 8006366:	ea43 0306 	orr.w	r3, r3, r6
 800636a:	4770      	bx	lr
 800636c:	ea94 0f0c 	teq	r4, ip
 8006370:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006374:	bf18      	it	ne
 8006376:	ea95 0f0c 	teqne	r5, ip
 800637a:	d00c      	beq.n	8006396 <__aeabi_dmul+0x206>
 800637c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006380:	bf18      	it	ne
 8006382:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006386:	d1d1      	bne.n	800632c <__aeabi_dmul+0x19c>
 8006388:	ea81 0103 	eor.w	r1, r1, r3
 800638c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006390:	f04f 0000 	mov.w	r0, #0
 8006394:	bd70      	pop	{r4, r5, r6, pc}
 8006396:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800639a:	bf06      	itte	eq
 800639c:	4610      	moveq	r0, r2
 800639e:	4619      	moveq	r1, r3
 80063a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80063a4:	d019      	beq.n	80063da <__aeabi_dmul+0x24a>
 80063a6:	ea94 0f0c 	teq	r4, ip
 80063aa:	d102      	bne.n	80063b2 <__aeabi_dmul+0x222>
 80063ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80063b0:	d113      	bne.n	80063da <__aeabi_dmul+0x24a>
 80063b2:	ea95 0f0c 	teq	r5, ip
 80063b6:	d105      	bne.n	80063c4 <__aeabi_dmul+0x234>
 80063b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80063bc:	bf1c      	itt	ne
 80063be:	4610      	movne	r0, r2
 80063c0:	4619      	movne	r1, r3
 80063c2:	d10a      	bne.n	80063da <__aeabi_dmul+0x24a>
 80063c4:	ea81 0103 	eor.w	r1, r1, r3
 80063c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80063cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80063d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063d4:	f04f 0000 	mov.w	r0, #0
 80063d8:	bd70      	pop	{r4, r5, r6, pc}
 80063da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80063de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80063e2:	bd70      	pop	{r4, r5, r6, pc}

080063e4 <__aeabi_ddiv>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80063ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80063ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80063f2:	bf1d      	ittte	ne
 80063f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80063f8:	ea94 0f0c 	teqne	r4, ip
 80063fc:	ea95 0f0c 	teqne	r5, ip
 8006400:	f000 f8a7 	bleq	8006552 <__aeabi_ddiv+0x16e>
 8006404:	eba4 0405 	sub.w	r4, r4, r5
 8006408:	ea81 0e03 	eor.w	lr, r1, r3
 800640c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006410:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006414:	f000 8088 	beq.w	8006528 <__aeabi_ddiv+0x144>
 8006418:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800641c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006420:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006424:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006428:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800642c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006430:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006434:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006438:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800643c:	429d      	cmp	r5, r3
 800643e:	bf08      	it	eq
 8006440:	4296      	cmpeq	r6, r2
 8006442:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006446:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800644a:	d202      	bcs.n	8006452 <__aeabi_ddiv+0x6e>
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006452:	1ab6      	subs	r6, r6, r2
 8006454:	eb65 0503 	sbc.w	r5, r5, r3
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	ea4f 0232 	mov.w	r2, r2, rrx
 800645e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006462:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006466:	ebb6 0e02 	subs.w	lr, r6, r2
 800646a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800646e:	bf22      	ittt	cs
 8006470:	1ab6      	subcs	r6, r6, r2
 8006472:	4675      	movcs	r5, lr
 8006474:	ea40 000c 	orrcs.w	r0, r0, ip
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	ea4f 0232 	mov.w	r2, r2, rrx
 800647e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006482:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006486:	bf22      	ittt	cs
 8006488:	1ab6      	subcs	r6, r6, r2
 800648a:	4675      	movcs	r5, lr
 800648c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	ea4f 0232 	mov.w	r2, r2, rrx
 8006496:	ebb6 0e02 	subs.w	lr, r6, r2
 800649a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800649e:	bf22      	ittt	cs
 80064a0:	1ab6      	subcs	r6, r6, r2
 80064a2:	4675      	movcs	r5, lr
 80064a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80064ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80064b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80064b6:	bf22      	ittt	cs
 80064b8:	1ab6      	subcs	r6, r6, r2
 80064ba:	4675      	movcs	r5, lr
 80064bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80064c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80064c4:	d018      	beq.n	80064f8 <__aeabi_ddiv+0x114>
 80064c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80064ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80064ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80064d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80064d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80064da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80064de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80064e2:	d1c0      	bne.n	8006466 <__aeabi_ddiv+0x82>
 80064e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064e8:	d10b      	bne.n	8006502 <__aeabi_ddiv+0x11e>
 80064ea:	ea41 0100 	orr.w	r1, r1, r0
 80064ee:	f04f 0000 	mov.w	r0, #0
 80064f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80064f6:	e7b6      	b.n	8006466 <__aeabi_ddiv+0x82>
 80064f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064fc:	bf04      	itt	eq
 80064fe:	4301      	orreq	r1, r0
 8006500:	2000      	moveq	r0, #0
 8006502:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006506:	bf88      	it	hi
 8006508:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800650c:	f63f aeaf 	bhi.w	800626e <__aeabi_dmul+0xde>
 8006510:	ebb5 0c03 	subs.w	ip, r5, r3
 8006514:	bf04      	itt	eq
 8006516:	ebb6 0c02 	subseq.w	ip, r6, r2
 800651a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800651e:	f150 0000 	adcs.w	r0, r0, #0
 8006522:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800652c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006530:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006534:	bfc2      	ittt	gt
 8006536:	ebd4 050c 	rsbsgt	r5, r4, ip
 800653a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800653e:	bd70      	popgt	{r4, r5, r6, pc}
 8006540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006544:	f04f 0e00 	mov.w	lr, #0
 8006548:	3c01      	subs	r4, #1
 800654a:	e690      	b.n	800626e <__aeabi_dmul+0xde>
 800654c:	ea45 0e06 	orr.w	lr, r5, r6
 8006550:	e68d      	b.n	800626e <__aeabi_dmul+0xde>
 8006552:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006556:	ea94 0f0c 	teq	r4, ip
 800655a:	bf08      	it	eq
 800655c:	ea95 0f0c 	teqeq	r5, ip
 8006560:	f43f af3b 	beq.w	80063da <__aeabi_dmul+0x24a>
 8006564:	ea94 0f0c 	teq	r4, ip
 8006568:	d10a      	bne.n	8006580 <__aeabi_ddiv+0x19c>
 800656a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800656e:	f47f af34 	bne.w	80063da <__aeabi_dmul+0x24a>
 8006572:	ea95 0f0c 	teq	r5, ip
 8006576:	f47f af25 	bne.w	80063c4 <__aeabi_dmul+0x234>
 800657a:	4610      	mov	r0, r2
 800657c:	4619      	mov	r1, r3
 800657e:	e72c      	b.n	80063da <__aeabi_dmul+0x24a>
 8006580:	ea95 0f0c 	teq	r5, ip
 8006584:	d106      	bne.n	8006594 <__aeabi_ddiv+0x1b0>
 8006586:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800658a:	f43f aefd 	beq.w	8006388 <__aeabi_dmul+0x1f8>
 800658e:	4610      	mov	r0, r2
 8006590:	4619      	mov	r1, r3
 8006592:	e722      	b.n	80063da <__aeabi_dmul+0x24a>
 8006594:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006598:	bf18      	it	ne
 800659a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800659e:	f47f aec5 	bne.w	800632c <__aeabi_dmul+0x19c>
 80065a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80065a6:	f47f af0d 	bne.w	80063c4 <__aeabi_dmul+0x234>
 80065aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80065ae:	f47f aeeb 	bne.w	8006388 <__aeabi_dmul+0x1f8>
 80065b2:	e712      	b.n	80063da <__aeabi_dmul+0x24a>

080065b4 <__gedf2>:
 80065b4:	f04f 3cff 	mov.w	ip, #4294967295
 80065b8:	e006      	b.n	80065c8 <__cmpdf2+0x4>
 80065ba:	bf00      	nop

080065bc <__ledf2>:
 80065bc:	f04f 0c01 	mov.w	ip, #1
 80065c0:	e002      	b.n	80065c8 <__cmpdf2+0x4>
 80065c2:	bf00      	nop

080065c4 <__cmpdf2>:
 80065c4:	f04f 0c01 	mov.w	ip, #1
 80065c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80065cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80065d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065d8:	bf18      	it	ne
 80065da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80065de:	d01b      	beq.n	8006618 <__cmpdf2+0x54>
 80065e0:	b001      	add	sp, #4
 80065e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80065e6:	bf0c      	ite	eq
 80065e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80065ec:	ea91 0f03 	teqne	r1, r3
 80065f0:	bf02      	ittt	eq
 80065f2:	ea90 0f02 	teqeq	r0, r2
 80065f6:	2000      	moveq	r0, #0
 80065f8:	4770      	bxeq	lr
 80065fa:	f110 0f00 	cmn.w	r0, #0
 80065fe:	ea91 0f03 	teq	r1, r3
 8006602:	bf58      	it	pl
 8006604:	4299      	cmppl	r1, r3
 8006606:	bf08      	it	eq
 8006608:	4290      	cmpeq	r0, r2
 800660a:	bf2c      	ite	cs
 800660c:	17d8      	asrcs	r0, r3, #31
 800660e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006612:	f040 0001 	orr.w	r0, r0, #1
 8006616:	4770      	bx	lr
 8006618:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800661c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006620:	d102      	bne.n	8006628 <__cmpdf2+0x64>
 8006622:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006626:	d107      	bne.n	8006638 <__cmpdf2+0x74>
 8006628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800662c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006630:	d1d6      	bne.n	80065e0 <__cmpdf2+0x1c>
 8006632:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006636:	d0d3      	beq.n	80065e0 <__cmpdf2+0x1c>
 8006638:	f85d 0b04 	ldr.w	r0, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <__aeabi_cdrcmple>:
 8006640:	4684      	mov	ip, r0
 8006642:	4610      	mov	r0, r2
 8006644:	4662      	mov	r2, ip
 8006646:	468c      	mov	ip, r1
 8006648:	4619      	mov	r1, r3
 800664a:	4663      	mov	r3, ip
 800664c:	e000      	b.n	8006650 <__aeabi_cdcmpeq>
 800664e:	bf00      	nop

08006650 <__aeabi_cdcmpeq>:
 8006650:	b501      	push	{r0, lr}
 8006652:	f7ff ffb7 	bl	80065c4 <__cmpdf2>
 8006656:	2800      	cmp	r0, #0
 8006658:	bf48      	it	mi
 800665a:	f110 0f00 	cmnmi.w	r0, #0
 800665e:	bd01      	pop	{r0, pc}

08006660 <__aeabi_dcmpeq>:
 8006660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006664:	f7ff fff4 	bl	8006650 <__aeabi_cdcmpeq>
 8006668:	bf0c      	ite	eq
 800666a:	2001      	moveq	r0, #1
 800666c:	2000      	movne	r0, #0
 800666e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006672:	bf00      	nop

08006674 <__aeabi_dcmplt>:
 8006674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006678:	f7ff ffea 	bl	8006650 <__aeabi_cdcmpeq>
 800667c:	bf34      	ite	cc
 800667e:	2001      	movcc	r0, #1
 8006680:	2000      	movcs	r0, #0
 8006682:	f85d fb08 	ldr.w	pc, [sp], #8
 8006686:	bf00      	nop

08006688 <__aeabi_dcmple>:
 8006688:	f84d ed08 	str.w	lr, [sp, #-8]!
 800668c:	f7ff ffe0 	bl	8006650 <__aeabi_cdcmpeq>
 8006690:	bf94      	ite	ls
 8006692:	2001      	movls	r0, #1
 8006694:	2000      	movhi	r0, #0
 8006696:	f85d fb08 	ldr.w	pc, [sp], #8
 800669a:	bf00      	nop

0800669c <__aeabi_dcmpge>:
 800669c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80066a0:	f7ff ffce 	bl	8006640 <__aeabi_cdrcmple>
 80066a4:	bf94      	ite	ls
 80066a6:	2001      	movls	r0, #1
 80066a8:	2000      	movhi	r0, #0
 80066aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80066ae:	bf00      	nop

080066b0 <__aeabi_dcmpgt>:
 80066b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80066b4:	f7ff ffc4 	bl	8006640 <__aeabi_cdrcmple>
 80066b8:	bf34      	ite	cc
 80066ba:	2001      	movcc	r0, #1
 80066bc:	2000      	movcs	r0, #0
 80066be:	f85d fb08 	ldr.w	pc, [sp], #8
 80066c2:	bf00      	nop

080066c4 <__aeabi_d2iz>:
 80066c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80066c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80066cc:	d215      	bcs.n	80066fa <__aeabi_d2iz+0x36>
 80066ce:	d511      	bpl.n	80066f4 <__aeabi_d2iz+0x30>
 80066d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80066d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80066d8:	d912      	bls.n	8006700 <__aeabi_d2iz+0x3c>
 80066da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80066de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80066e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80066ea:	fa23 f002 	lsr.w	r0, r3, r2
 80066ee:	bf18      	it	ne
 80066f0:	4240      	negne	r0, r0
 80066f2:	4770      	bx	lr
 80066f4:	f04f 0000 	mov.w	r0, #0
 80066f8:	4770      	bx	lr
 80066fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80066fe:	d105      	bne.n	800670c <__aeabi_d2iz+0x48>
 8006700:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006704:	bf08      	it	eq
 8006706:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800670a:	4770      	bx	lr
 800670c:	f04f 0000 	mov.w	r0, #0
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop

08006714 <__aeabi_d2uiz>:
 8006714:	004a      	lsls	r2, r1, #1
 8006716:	d211      	bcs.n	800673c <__aeabi_d2uiz+0x28>
 8006718:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800671c:	d211      	bcs.n	8006742 <__aeabi_d2uiz+0x2e>
 800671e:	d50d      	bpl.n	800673c <__aeabi_d2uiz+0x28>
 8006720:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006724:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006728:	d40e      	bmi.n	8006748 <__aeabi_d2uiz+0x34>
 800672a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800672e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006732:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006736:	fa23 f002 	lsr.w	r0, r3, r2
 800673a:	4770      	bx	lr
 800673c:	f04f 0000 	mov.w	r0, #0
 8006740:	4770      	bx	lr
 8006742:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006746:	d102      	bne.n	800674e <__aeabi_d2uiz+0x3a>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	4770      	bx	lr
 800674e:	f04f 0000 	mov.w	r0, #0
 8006752:	4770      	bx	lr

08006754 <__aeabi_uldivmod>:
 8006754:	b953      	cbnz	r3, 800676c <__aeabi_uldivmod+0x18>
 8006756:	b94a      	cbnz	r2, 800676c <__aeabi_uldivmod+0x18>
 8006758:	2900      	cmp	r1, #0
 800675a:	bf08      	it	eq
 800675c:	2800      	cmpeq	r0, #0
 800675e:	bf1c      	itt	ne
 8006760:	f04f 31ff 	movne.w	r1, #4294967295
 8006764:	f04f 30ff 	movne.w	r0, #4294967295
 8006768:	f000 b9a6 	b.w	8006ab8 <__aeabi_idiv0>
 800676c:	f1ad 0c08 	sub.w	ip, sp, #8
 8006770:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006774:	f000 f83c 	bl	80067f0 <__udivmoddi4>
 8006778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800677c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006780:	b004      	add	sp, #16
 8006782:	4770      	bx	lr

08006784 <__aeabi_d2lz>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	4604      	mov	r4, r0
 800678c:	460d      	mov	r5, r1
 800678e:	f7ff ff71 	bl	8006674 <__aeabi_dcmplt>
 8006792:	b928      	cbnz	r0, 80067a0 <__aeabi_d2lz+0x1c>
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800679c:	f000 b80a 	b.w	80067b4 <__aeabi_d2ulz>
 80067a0:	4620      	mov	r0, r4
 80067a2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80067a6:	f000 f805 	bl	80067b4 <__aeabi_d2ulz>
 80067aa:	4240      	negs	r0, r0
 80067ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	bf00      	nop

080067b4 <__aeabi_d2ulz>:
 80067b4:	b5d0      	push	{r4, r6, r7, lr}
 80067b6:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <__aeabi_d2ulz+0x34>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	4606      	mov	r6, r0
 80067bc:	460f      	mov	r7, r1
 80067be:	f7ff fce7 	bl	8006190 <__aeabi_dmul>
 80067c2:	f7ff ffa7 	bl	8006714 <__aeabi_d2uiz>
 80067c6:	4604      	mov	r4, r0
 80067c8:	f7ff fc68 	bl	800609c <__aeabi_ui2d>
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <__aeabi_d2ulz+0x38>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	f7ff fcde 	bl	8006190 <__aeabi_dmul>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7ff fb20 	bl	8005e20 <__aeabi_dsub>
 80067e0:	f7ff ff98 	bl	8006714 <__aeabi_d2uiz>
 80067e4:	4621      	mov	r1, r4
 80067e6:	bdd0      	pop	{r4, r6, r7, pc}
 80067e8:	3df00000 	.word	0x3df00000
 80067ec:	41f00000 	.word	0x41f00000

080067f0 <__udivmoddi4>:
 80067f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	9e08      	ldr	r6, [sp, #32]
 80067f6:	460d      	mov	r5, r1
 80067f8:	4604      	mov	r4, r0
 80067fa:	460f      	mov	r7, r1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d14a      	bne.n	8006896 <__udivmoddi4+0xa6>
 8006800:	428a      	cmp	r2, r1
 8006802:	4694      	mov	ip, r2
 8006804:	d965      	bls.n	80068d2 <__udivmoddi4+0xe2>
 8006806:	fab2 f382 	clz	r3, r2
 800680a:	b143      	cbz	r3, 800681e <__udivmoddi4+0x2e>
 800680c:	fa02 fc03 	lsl.w	ip, r2, r3
 8006810:	f1c3 0220 	rsb	r2, r3, #32
 8006814:	409f      	lsls	r7, r3
 8006816:	fa20 f202 	lsr.w	r2, r0, r2
 800681a:	4317      	orrs	r7, r2
 800681c:	409c      	lsls	r4, r3
 800681e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8006822:	fa1f f58c 	uxth.w	r5, ip
 8006826:	fbb7 f1fe 	udiv	r1, r7, lr
 800682a:	0c22      	lsrs	r2, r4, #16
 800682c:	fb0e 7711 	mls	r7, lr, r1, r7
 8006830:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006834:	fb01 f005 	mul.w	r0, r1, r5
 8006838:	4290      	cmp	r0, r2
 800683a:	d90a      	bls.n	8006852 <__udivmoddi4+0x62>
 800683c:	eb1c 0202 	adds.w	r2, ip, r2
 8006840:	f101 37ff 	add.w	r7, r1, #4294967295
 8006844:	f080 811c 	bcs.w	8006a80 <__udivmoddi4+0x290>
 8006848:	4290      	cmp	r0, r2
 800684a:	f240 8119 	bls.w	8006a80 <__udivmoddi4+0x290>
 800684e:	3902      	subs	r1, #2
 8006850:	4462      	add	r2, ip
 8006852:	1a12      	subs	r2, r2, r0
 8006854:	b2a4      	uxth	r4, r4
 8006856:	fbb2 f0fe 	udiv	r0, r2, lr
 800685a:	fb0e 2210 	mls	r2, lr, r0, r2
 800685e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006862:	fb00 f505 	mul.w	r5, r0, r5
 8006866:	42a5      	cmp	r5, r4
 8006868:	d90a      	bls.n	8006880 <__udivmoddi4+0x90>
 800686a:	eb1c 0404 	adds.w	r4, ip, r4
 800686e:	f100 32ff 	add.w	r2, r0, #4294967295
 8006872:	f080 8107 	bcs.w	8006a84 <__udivmoddi4+0x294>
 8006876:	42a5      	cmp	r5, r4
 8006878:	f240 8104 	bls.w	8006a84 <__udivmoddi4+0x294>
 800687c:	4464      	add	r4, ip
 800687e:	3802      	subs	r0, #2
 8006880:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006884:	1b64      	subs	r4, r4, r5
 8006886:	2100      	movs	r1, #0
 8006888:	b11e      	cbz	r6, 8006892 <__udivmoddi4+0xa2>
 800688a:	40dc      	lsrs	r4, r3
 800688c:	2300      	movs	r3, #0
 800688e:	e9c6 4300 	strd	r4, r3, [r6]
 8006892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006896:	428b      	cmp	r3, r1
 8006898:	d908      	bls.n	80068ac <__udivmoddi4+0xbc>
 800689a:	2e00      	cmp	r6, #0
 800689c:	f000 80ed 	beq.w	8006a7a <__udivmoddi4+0x28a>
 80068a0:	2100      	movs	r1, #0
 80068a2:	e9c6 0500 	strd	r0, r5, [r6]
 80068a6:	4608      	mov	r0, r1
 80068a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ac:	fab3 f183 	clz	r1, r3
 80068b0:	2900      	cmp	r1, #0
 80068b2:	d149      	bne.n	8006948 <__udivmoddi4+0x158>
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	d302      	bcc.n	80068be <__udivmoddi4+0xce>
 80068b8:	4282      	cmp	r2, r0
 80068ba:	f200 80f8 	bhi.w	8006aae <__udivmoddi4+0x2be>
 80068be:	1a84      	subs	r4, r0, r2
 80068c0:	eb65 0203 	sbc.w	r2, r5, r3
 80068c4:	2001      	movs	r0, #1
 80068c6:	4617      	mov	r7, r2
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	d0e2      	beq.n	8006892 <__udivmoddi4+0xa2>
 80068cc:	e9c6 4700 	strd	r4, r7, [r6]
 80068d0:	e7df      	b.n	8006892 <__udivmoddi4+0xa2>
 80068d2:	b902      	cbnz	r2, 80068d6 <__udivmoddi4+0xe6>
 80068d4:	deff      	udf	#255	; 0xff
 80068d6:	fab2 f382 	clz	r3, r2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 8090 	bne.w	8006a00 <__udivmoddi4+0x210>
 80068e0:	1a8a      	subs	r2, r1, r2
 80068e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80068e6:	fa1f fe8c 	uxth.w	lr, ip
 80068ea:	2101      	movs	r1, #1
 80068ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80068f0:	fb07 2015 	mls	r0, r7, r5, r2
 80068f4:	0c22      	lsrs	r2, r4, #16
 80068f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80068fa:	fb0e f005 	mul.w	r0, lr, r5
 80068fe:	4290      	cmp	r0, r2
 8006900:	d908      	bls.n	8006914 <__udivmoddi4+0x124>
 8006902:	eb1c 0202 	adds.w	r2, ip, r2
 8006906:	f105 38ff 	add.w	r8, r5, #4294967295
 800690a:	d202      	bcs.n	8006912 <__udivmoddi4+0x122>
 800690c:	4290      	cmp	r0, r2
 800690e:	f200 80cb 	bhi.w	8006aa8 <__udivmoddi4+0x2b8>
 8006912:	4645      	mov	r5, r8
 8006914:	1a12      	subs	r2, r2, r0
 8006916:	b2a4      	uxth	r4, r4
 8006918:	fbb2 f0f7 	udiv	r0, r2, r7
 800691c:	fb07 2210 	mls	r2, r7, r0, r2
 8006920:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006924:	fb0e fe00 	mul.w	lr, lr, r0
 8006928:	45a6      	cmp	lr, r4
 800692a:	d908      	bls.n	800693e <__udivmoddi4+0x14e>
 800692c:	eb1c 0404 	adds.w	r4, ip, r4
 8006930:	f100 32ff 	add.w	r2, r0, #4294967295
 8006934:	d202      	bcs.n	800693c <__udivmoddi4+0x14c>
 8006936:	45a6      	cmp	lr, r4
 8006938:	f200 80bb 	bhi.w	8006ab2 <__udivmoddi4+0x2c2>
 800693c:	4610      	mov	r0, r2
 800693e:	eba4 040e 	sub.w	r4, r4, lr
 8006942:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006946:	e79f      	b.n	8006888 <__udivmoddi4+0x98>
 8006948:	f1c1 0720 	rsb	r7, r1, #32
 800694c:	408b      	lsls	r3, r1
 800694e:	fa22 fc07 	lsr.w	ip, r2, r7
 8006952:	ea4c 0c03 	orr.w	ip, ip, r3
 8006956:	fa05 f401 	lsl.w	r4, r5, r1
 800695a:	fa20 f307 	lsr.w	r3, r0, r7
 800695e:	40fd      	lsrs	r5, r7
 8006960:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006964:	4323      	orrs	r3, r4
 8006966:	fbb5 f8f9 	udiv	r8, r5, r9
 800696a:	fa1f fe8c 	uxth.w	lr, ip
 800696e:	fb09 5518 	mls	r5, r9, r8, r5
 8006972:	0c1c      	lsrs	r4, r3, #16
 8006974:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006978:	fb08 f50e 	mul.w	r5, r8, lr
 800697c:	42a5      	cmp	r5, r4
 800697e:	fa02 f201 	lsl.w	r2, r2, r1
 8006982:	fa00 f001 	lsl.w	r0, r0, r1
 8006986:	d90b      	bls.n	80069a0 <__udivmoddi4+0x1b0>
 8006988:	eb1c 0404 	adds.w	r4, ip, r4
 800698c:	f108 3aff 	add.w	sl, r8, #4294967295
 8006990:	f080 8088 	bcs.w	8006aa4 <__udivmoddi4+0x2b4>
 8006994:	42a5      	cmp	r5, r4
 8006996:	f240 8085 	bls.w	8006aa4 <__udivmoddi4+0x2b4>
 800699a:	f1a8 0802 	sub.w	r8, r8, #2
 800699e:	4464      	add	r4, ip
 80069a0:	1b64      	subs	r4, r4, r5
 80069a2:	b29d      	uxth	r5, r3
 80069a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80069a8:	fb09 4413 	mls	r4, r9, r3, r4
 80069ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80069b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80069b4:	45a6      	cmp	lr, r4
 80069b6:	d908      	bls.n	80069ca <__udivmoddi4+0x1da>
 80069b8:	eb1c 0404 	adds.w	r4, ip, r4
 80069bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80069c0:	d26c      	bcs.n	8006a9c <__udivmoddi4+0x2ac>
 80069c2:	45a6      	cmp	lr, r4
 80069c4:	d96a      	bls.n	8006a9c <__udivmoddi4+0x2ac>
 80069c6:	3b02      	subs	r3, #2
 80069c8:	4464      	add	r4, ip
 80069ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80069ce:	fba3 9502 	umull	r9, r5, r3, r2
 80069d2:	eba4 040e 	sub.w	r4, r4, lr
 80069d6:	42ac      	cmp	r4, r5
 80069d8:	46c8      	mov	r8, r9
 80069da:	46ae      	mov	lr, r5
 80069dc:	d356      	bcc.n	8006a8c <__udivmoddi4+0x29c>
 80069de:	d053      	beq.n	8006a88 <__udivmoddi4+0x298>
 80069e0:	b156      	cbz	r6, 80069f8 <__udivmoddi4+0x208>
 80069e2:	ebb0 0208 	subs.w	r2, r0, r8
 80069e6:	eb64 040e 	sbc.w	r4, r4, lr
 80069ea:	fa04 f707 	lsl.w	r7, r4, r7
 80069ee:	40ca      	lsrs	r2, r1
 80069f0:	40cc      	lsrs	r4, r1
 80069f2:	4317      	orrs	r7, r2
 80069f4:	e9c6 7400 	strd	r7, r4, [r6]
 80069f8:	4618      	mov	r0, r3
 80069fa:	2100      	movs	r1, #0
 80069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a00:	f1c3 0120 	rsb	r1, r3, #32
 8006a04:	fa02 fc03 	lsl.w	ip, r2, r3
 8006a08:	fa20 f201 	lsr.w	r2, r0, r1
 8006a0c:	fa25 f101 	lsr.w	r1, r5, r1
 8006a10:	409d      	lsls	r5, r3
 8006a12:	432a      	orrs	r2, r5
 8006a14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006a18:	fa1f fe8c 	uxth.w	lr, ip
 8006a1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8006a20:	fb07 1510 	mls	r5, r7, r0, r1
 8006a24:	0c11      	lsrs	r1, r2, #16
 8006a26:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006a2a:	fb00 f50e 	mul.w	r5, r0, lr
 8006a2e:	428d      	cmp	r5, r1
 8006a30:	fa04 f403 	lsl.w	r4, r4, r3
 8006a34:	d908      	bls.n	8006a48 <__udivmoddi4+0x258>
 8006a36:	eb1c 0101 	adds.w	r1, ip, r1
 8006a3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8006a3e:	d22f      	bcs.n	8006aa0 <__udivmoddi4+0x2b0>
 8006a40:	428d      	cmp	r5, r1
 8006a42:	d92d      	bls.n	8006aa0 <__udivmoddi4+0x2b0>
 8006a44:	3802      	subs	r0, #2
 8006a46:	4461      	add	r1, ip
 8006a48:	1b49      	subs	r1, r1, r5
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	fbb1 f5f7 	udiv	r5, r1, r7
 8006a50:	fb07 1115 	mls	r1, r7, r5, r1
 8006a54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a58:	fb05 f10e 	mul.w	r1, r5, lr
 8006a5c:	4291      	cmp	r1, r2
 8006a5e:	d908      	bls.n	8006a72 <__udivmoddi4+0x282>
 8006a60:	eb1c 0202 	adds.w	r2, ip, r2
 8006a64:	f105 38ff 	add.w	r8, r5, #4294967295
 8006a68:	d216      	bcs.n	8006a98 <__udivmoddi4+0x2a8>
 8006a6a:	4291      	cmp	r1, r2
 8006a6c:	d914      	bls.n	8006a98 <__udivmoddi4+0x2a8>
 8006a6e:	3d02      	subs	r5, #2
 8006a70:	4462      	add	r2, ip
 8006a72:	1a52      	subs	r2, r2, r1
 8006a74:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8006a78:	e738      	b.n	80068ec <__udivmoddi4+0xfc>
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	e708      	b.n	8006892 <__udivmoddi4+0xa2>
 8006a80:	4639      	mov	r1, r7
 8006a82:	e6e6      	b.n	8006852 <__udivmoddi4+0x62>
 8006a84:	4610      	mov	r0, r2
 8006a86:	e6fb      	b.n	8006880 <__udivmoddi4+0x90>
 8006a88:	4548      	cmp	r0, r9
 8006a8a:	d2a9      	bcs.n	80069e0 <__udivmoddi4+0x1f0>
 8006a8c:	ebb9 0802 	subs.w	r8, r9, r2
 8006a90:	eb65 0e0c 	sbc.w	lr, r5, ip
 8006a94:	3b01      	subs	r3, #1
 8006a96:	e7a3      	b.n	80069e0 <__udivmoddi4+0x1f0>
 8006a98:	4645      	mov	r5, r8
 8006a9a:	e7ea      	b.n	8006a72 <__udivmoddi4+0x282>
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	e794      	b.n	80069ca <__udivmoddi4+0x1da>
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	e7d1      	b.n	8006a48 <__udivmoddi4+0x258>
 8006aa4:	46d0      	mov	r8, sl
 8006aa6:	e77b      	b.n	80069a0 <__udivmoddi4+0x1b0>
 8006aa8:	3d02      	subs	r5, #2
 8006aaa:	4462      	add	r2, ip
 8006aac:	e732      	b.n	8006914 <__udivmoddi4+0x124>
 8006aae:	4608      	mov	r0, r1
 8006ab0:	e70a      	b.n	80068c8 <__udivmoddi4+0xd8>
 8006ab2:	4464      	add	r4, ip
 8006ab4:	3802      	subs	r0, #2
 8006ab6:	e742      	b.n	800693e <__udivmoddi4+0x14e>

08006ab8 <__aeabi_idiv0>:
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop

08006abc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <LL_C2_PWR_SetPowerMode+0x28>)
 8006ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aca:	f023 0207 	bic.w	r2, r3, #7
 8006ace:	4905      	ldr	r1, [pc, #20]	; (8006ae4 <LL_C2_PWR_SetPowerMode+0x28>)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	58000400 	.word	0x58000400

08006ae8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <LL_EXTI_EnableIT_32_63+0x24>)
 8006af2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006af6:	4905      	ldr	r1, [pc, #20]	; (8006b0c <LL_EXTI_EnableIT_32_63+0x24>)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	58000800 	.word	0x58000800

08006b10 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8006b18:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8006b1a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8006b1e:	4905      	ldr	r1, [pc, #20]	; (8006b34 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	58000800 	.word	0x58000800

08006b38 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8006b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b44:	4a0a      	ldr	r2, [pc, #40]	; (8006b70 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8006b46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8006b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b52:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	cafecafe 	.word	0xcafecafe

08006b74 <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b86:	6013      	str	r3, [r2, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8006b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bd2:	bf00      	nop
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bf4:	bf00      	nop
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8006c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c12:	d101      	bne.n	8006c18 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c38:	d101      	bne.n	8006c3e <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
}
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	041b      	lsls	r3, r3, #16
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	605a      	str	r2, [r3, #4]
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	605a      	str	r2, [r3, #4]
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	695a      	ldr	r2, [r3, #20]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	615a      	str	r2, [r3, #20]
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	695a      	ldr	r2, [r3, #20]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	615a      	str	r2, [r3, #20]
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	619a      	str	r2, [r3, #24]
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <LL_LPM_EnableSleep+0x1c>)
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <LL_LPM_EnableSleep+0x1c>)
 8006d4a:	f023 0304 	bic.w	r3, r3, #4
 8006d4e:	6113      	str	r3, [r2, #16]
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	22ff      	movs	r2, #255	; 0xff
 8006d6c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	22ca      	movs	r2, #202	; 0xca
 8006d86:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2253      	movs	r2, #83	; 0x53
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f023 0207 	bic.w	r2, r3, #7
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <MX_APPE_Config+0x18>)
 8006dc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006dca:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8006dcc:	f000 f83c 	bl	8006e48 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8006dd0:	f000 f87c 	bl	8006ecc <Config_HSE>

  return;
 8006dd4:	bf00      	nop
}
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	58004000 	.word	0x58004000

08006ddc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8006de0:	f000 f888 	bl	8006ef4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8006de4:	f000 f8a0 	bl	8006f28 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8006de8:	4907      	ldr	r1, [pc, #28]	; (8006e08 <MX_APPE_Init+0x2c>)
 8006dea:	2000      	movs	r0, #0
 8006dec:	f000 fee8 	bl	8007bc0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8006df0:	f000 f81a 	bl	8006e28 <Init_Debug>
    
  Led_Init();
 8006df4:	f000 f936 	bl	8007064 <Led_Init>
  Button_Init();
 8006df8:	f000 f941 	bl	800707e <Button_Init>
  RxUART_Init();
 8006dfc:	f000 fa16 	bl	800722c <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8006e00:	f000 f8aa 	bl	8006f58 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8006e04:	bf00      	nop
}
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200004ac 	.word	0x200004ac

08006e0c <Init_Smps>:

void Init_Smps(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8006e10:	bf00      	nop
}
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <Init_Exti>:

void Init_Exti(void)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8006e1e:	2050      	movs	r0, #80	; 0x50
 8006e20:	f7ff fe62 	bl	8006ae8 <LL_EXTI_EnableIT_32_63>

  return;
 8006e24:	bf00      	nop
}
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8006e2c:	f003 ffdc 	bl	800ade8 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006e30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006e34:	f7ff fe58 	bl	8006ae8 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006e38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006e3c:	f7ff fe68 	bl	8006b10 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8006e40:	f009 f980 	bl	8010144 <DbgTraceInit>
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8006e44:	bf00      	nop
}
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <Reset_Device>:
static void Reset_Device(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8006e4c:	f000 f804 	bl	8006e58 <Reset_BackupDomain>

  Reset_IPCC();
 8006e50:	f000 f81a 	bl	8006e88 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8006e54:	bf00      	nop
}
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8006e5c:	f7ff fecf 	bl	8006bfe <LL_RCC_IsActiveFlag_PINRST>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00d      	beq.n	8006e82 <Reset_BackupDomain+0x2a>
 8006e66:	f7ff fedd 	bl	8006c24 <LL_RCC_IsActiveFlag_SFTRST>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d108      	bne.n	8006e82 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006e70:	f004 ffea 	bl	800be48 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8006e74:	f004 ffe8 	bl	800be48 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8006e78:	f7ff fe9f 	bl	8006bba <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8006e7c:	f7ff feae 	bl	8006bdc <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
}
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8006e8c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006e90:	f7ff fedb 	bl	8006c4a <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8006e94:	213f      	movs	r1, #63	; 0x3f
 8006e96:	480c      	ldr	r0, [pc, #48]	; (8006ec8 <Reset_IPCC+0x40>)
 8006e98:	f7ff ff36 	bl	8006d08 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8006e9c:	213f      	movs	r1, #63	; 0x3f
 8006e9e:	480a      	ldr	r0, [pc, #40]	; (8006ec8 <Reset_IPCC+0x40>)
 8006ea0:	f7ff ff40 	bl	8006d24 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8006ea4:	213f      	movs	r1, #63	; 0x3f
 8006ea6:	4808      	ldr	r0, [pc, #32]	; (8006ec8 <Reset_IPCC+0x40>)
 8006ea8:	f7ff fee8 	bl	8006c7c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8006eac:	213f      	movs	r1, #63	; 0x3f
 8006eae:	4806      	ldr	r0, [pc, #24]	; (8006ec8 <Reset_IPCC+0x40>)
 8006eb0:	f7ff ff07 	bl	8006cc2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8006eb4:	213f      	movs	r1, #63	; 0x3f
 8006eb6:	4804      	ldr	r0, [pc, #16]	; (8006ec8 <Reset_IPCC+0x40>)
 8006eb8:	f7ff fef2 	bl	8006ca0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8006ebc:	213f      	movs	r1, #63	; 0x3f
 8006ebe:	4802      	ldr	r0, [pc, #8]	; (8006ec8 <Reset_IPCC+0x40>)
 8006ec0:	f7ff ff11 	bl	8006ce6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8006ec4:	bf00      	nop
}
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	58000c00 	.word	0x58000c00

08006ecc <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	f009 f9b4 	bl	8010240 <OTP_Read>
 8006ed8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	799b      	ldrb	r3, [r3, #6]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff fe27 	bl	8006b38 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
}
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <System_Init>:

static void System_Init(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  Init_Smps();
 8006ef8:	f7ff ff88 	bl	8006e0c <Init_Smps>

  Init_Exti();
 8006efc:	f7ff ff8d 	bl	8006e1a <Init_Exti>

  Init_Rtc();
 8006f00:	f000 f802 	bl	8006f08 <Init_Rtc>

  return;
 8006f04:	bf00      	nop
}
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <Init_Rtc>:

static void Init_Rtc(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8006f0c:	4805      	ldr	r0, [pc, #20]	; (8006f24 <Init_Rtc+0x1c>)
 8006f0e:	f7ff ff34 	bl	8006d7a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8006f12:	2100      	movs	r1, #0
 8006f14:	4803      	ldr	r0, [pc, #12]	; (8006f24 <Init_Rtc+0x1c>)
 8006f16:	f7ff ff40 	bl	8006d9a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8006f1a:	4802      	ldr	r0, [pc, #8]	; (8006f24 <Init_Rtc+0x1c>)
 8006f1c:	f7ff ff20 	bl	8006d60 <LL_RTC_EnableWriteProtection>

  return;
 8006f20:	bf00      	nop
}
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40002800 	.word	0x40002800

08006f28 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock start on HSI automatically */
  LL_RCC_HSI_EnableAutoFromStop();
 8006f2c:	f7ff fe22 	bl	8006b74 <LL_RCC_HSI_EnableAutoFromStop>

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8006f30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006f34:	f7ff fe2d 	bl	8006b92 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8006f38:	f00d f8c0 	bl	80140bc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8006f3c:	2004      	movs	r0, #4
 8006f3e:	f7ff fdbd 	bl	8006abc <LL_C2_PWR_SetPowerMode>

  /* Disable Stop & Off Modes until Initialisation is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8006f42:	2101      	movs	r1, #1
 8006f44:	2001      	movs	r0, #1
 8006f46:	f00d f8fb 	bl	8014140 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	f00d f8c7 	bl	80140e0 <UTIL_LPM_SetStopMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8006f52:	bf00      	nop
}
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8006f5e:	f00a f857 	bl	8011010 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8006f62:	4a11      	ldr	r2, [pc, #68]	; (8006fa8 <appe_Tl_Init+0x50>)
 8006f64:	2100      	movs	r1, #0
 8006f66:	2008      	movs	r0, #8
 8006f68:	f00d fa16 	bl	8014398 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <appe_Tl_Init+0x54>)
 8006f6e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <appe_Tl_Init+0x58>)
 8006f72:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8006f74:	463b      	mov	r3, r7
 8006f76:	4619      	mov	r1, r3
 8006f78:	480e      	ldr	r0, [pc, #56]	; (8006fb4 <appe_Tl_Init+0x5c>)
 8006f7a:	f009 fa4b 	bl	8010414 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <appe_Tl_Init+0x60>)
 8006f84:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8006f86:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <appe_Tl_Init+0x64>)
 8006f88:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8006f8a:	f240 533c 	movw	r3, #1340	; 0x53c
 8006f8e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8006f90:	f107 0308 	add.w	r3, r7, #8
 8006f94:	4618      	mov	r0, r3
 8006f96:	f00a f997 	bl	80112c8 <TL_MM_Init>

  TL_Enable();
 8006f9a:	f00a f832 	bl	8011002 <TL_Enable>

  return;
 8006f9e:	bf00      	nop
}
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	0801044d 	.word	0x0801044d
 8006fac:	20030620 	.word	0x20030620
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fd7 	.word	0x08006fd7
 8006fb8:	2003072c 	.word	0x2003072c
 8006fbc:	200300e4 	.word	0x200300e4

08006fc0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8006fca:	bf00      	nop
}
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	330b      	adds	r3, #11
 8006fe4:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8006ff0:	d004      	beq.n	8006ffc <APPE_SysUserEvtRx+0x26>
 8006ff2:	f249 2201 	movw	r2, #37377	; 0x9201
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d003      	beq.n	8007002 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8006ffa:	e008      	b.n	800700e <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8006ffc:	f000 f82a 	bl	8007054 <APPE_SysEvtReadyProcessing>
         break;
 8007000:	e005      	b.n	800700e <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	789b      	ldrb	r3, [r3, #2]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 f806 	bl	8007018 <APPE_SysEvtError>
         break;
 800700c:	bf00      	nop
  }
  return;
 800700e:	bf00      	nop
}
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	2bc8      	cmp	r3, #200	; 0xc8
 8007026:	d105      	bne.n	8007034 <APPE_SysEvtError+0x1c>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8007028:	4a08      	ldr	r2, [pc, #32]	; (800704c <APPE_SysEvtError+0x34>)
 800702a:	2101      	movs	r1, #1
 800702c:	2000      	movs	r0, #0
 800702e:	f001 fddf 	bl	8008bf0 <logApplication>
       break;
 8007032:	e006      	b.n	8007042 <APPE_SysEvtError+0x2a>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	4a06      	ldr	r2, [pc, #24]	; (8007050 <APPE_SysEvtError+0x38>)
 8007038:	2101      	movs	r1, #1
 800703a:	2000      	movs	r0, #0
 800703c:	f001 fdd8 	bl	8008bf0 <logApplication>
       break;
 8007040:	bf00      	nop
  }
  return;
 8007042:	bf00      	nop
}
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	080159e0 	.word	0x080159e0
 8007050:	08015a00 	.word	0x08015a00

08007054 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8007058:	f00a f9aa 	bl	80113b0 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 800705c:	f001 ff12 	bl	8008e84 <APP_ZIGBEE_Init>
  return;
 8007060:	bf00      	nop
}
 8007062:	bd80      	pop	{r7, pc}

08007064 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  /* Leds Initialization */
  BSP_LED_Init(LED_BLUE);
 8007068:	2000      	movs	r0, #0
 800706a:	f003 fcd1 	bl	800aa10 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800706e:	2001      	movs	r0, #1
 8007070:	f003 fcce 	bl	800aa10 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8007074:	2002      	movs	r0, #2
 8007076:	f003 fccb 	bl	800aa10 <BSP_LED_Init>
#endif /* (CFG_LED_SUPPORTED == 1U) */

  return;
 800707a:	bf00      	nop
}
 800707c:	bd80      	pop	{r7, pc}

0800707e <Button_Init>:

static void Button_Init( void )
{
 800707e:	b580      	push	{r7, lr}
 8007080:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1U)
  /* Button Initialization */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8007082:	2101      	movs	r1, #1
 8007084:	2000      	movs	r0, #0
 8007086:	f003 fd4b 	bl	800ab20 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800708a:	2101      	movs	r1, #1
 800708c:	2001      	movs	r0, #1
 800708e:	f003 fd47 	bl	800ab20 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8007092:	2101      	movs	r1, #1
 8007094:	2002      	movs	r0, #2
 8007096:	f003 fd43 	bl	800ab20 <BSP_PB_Init>
#endif /* (CFG_BUTTON_SUPPORTED == 1U) */

  return;
 800709a:	bf00      	nop
}
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070a6:	f003 fe7b 	bl	800ada0 <HAL_GetTick>
 80070aa:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d00a      	beq.n	80070ce <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80070b8:	f003 fe8a 	bl	800add0 <HAL_GetTickFreq>
 80070bc:	4603      	mov	r3, r0
 80070be:	461a      	mov	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80070c6:	e002      	b.n	80070ce <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80070c8:	f7ff fe3a 	bl	8006d40 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80070cc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80070ce:	f003 fe67 	bl	800ada0 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d8f4      	bhi.n	80070c8 <HAL_Delay+0x2a>
  }
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	f00d f856 	bl	80141a0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80070f4:	bf00      	nop
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80070fc:	bf00      	nop
}
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d003      	beq.n	800711e <UTIL_SEQ_EvtIdle+0x18>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b04      	cmp	r3, #4
 800711a:	d004      	beq.n	8007126 <UTIL_SEQ_EvtIdle+0x20>
 800711c:	e00a      	b.n	8007134 <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 800711e:	2002      	movs	r0, #2
 8007120:	f00d f83e 	bl	80141a0 <UTIL_SEQ_Run>
    break;
 8007124:	e00b      	b.n	800713e <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8007126:	2004      	movs	r0, #4
 8007128:	f00d f984 	bl	8014434 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 800712c:	2003      	movs	r0, #3
 800712e:	f00d f837 	bl	80141a0 <UTIL_SEQ_Run>
    break;
 8007132:	e004      	b.n	800713e <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	f00d f832 	bl	80141a0 <UTIL_SEQ_Run>
    break;
 800713c:	bf00      	nop
  }
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 800714e:	2100      	movs	r1, #0
 8007150:	2008      	movs	r0, #8
 8007152:	f00d f943 	bl	80143dc <UTIL_SEQ_SetTask>
  return;
 8007156:	bf00      	nop
}
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8007166:	2001      	movs	r0, #1
 8007168:	f00d f964 	bl	8014434 <UTIL_SEQ_SetEvt>
  return;
 800716c:	bf00      	nop
}
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 800717c:	2001      	movs	r0, #1
 800717e:	f00d f979 	bl	8014474 <UTIL_SEQ_WaitEvt>
  return;
 8007182:	bf00      	nop
}
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	330b      	adds	r3, #11
 8007196:	1c99      	adds	r1, r3, #2
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7a9b      	ldrb	r3, [r3, #10]
 800719c:	3b02      	subs	r3, #2
 800719e:	461a      	mov	r2, r3
 80071a0:	2001      	movs	r0, #1
 80071a2:	f008 fff5 	bl	8010190 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f00a f8ca 	bl	8011340 <TL_MM_EvtDone>
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_USART1_UART_Init();
 80071b8:	f001 f8fe 	bl	80083b8 <MX_USART1_UART_Init>
  return;
 80071bc:	bf00      	nop
#endif /* CFG_DEBUG_TRACE_UART */
}
 80071be:	bd80      	pop	{r7, pc}

080071c0 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	460b      	mov	r3, r1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80071ce:	897a      	ldrh	r2, [r7, #10]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	2000      	movs	r0, #0
 80071d6:	f000 ff1f 	bl	8008018 <HW_UART_Transmit_DMA>

  return;
 80071da:	bf00      	nop
}
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	4603      	mov	r3, r0
 80071ea:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) 
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d006      	beq.n	8007200 <HAL_GPIO_EXTI_Callback+0x1e>
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	dc14      	bgt.n	8007220 <HAL_GPIO_EXTI_Callback+0x3e>
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d007      	beq.n	800720a <HAL_GPIO_EXTI_Callback+0x28>
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d00a      	beq.n	8007214 <HAL_GPIO_EXTI_Callback+0x32>
    case BUTTON_SW3_PIN:
      UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW3,CFG_SCH_PRIO_1);
      break;

    default:
      break;
 80071fe:	e00f      	b.n	8007220 <HAL_GPIO_EXTI_Callback+0x3e>
      UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW1,CFG_SCH_PRIO_1);
 8007200:	2101      	movs	r1, #1
 8007202:	2040      	movs	r0, #64	; 0x40
 8007204:	f00d f8ea 	bl	80143dc <UTIL_SEQ_SetTask>
      break;
 8007208:	e00b      	b.n	8007222 <HAL_GPIO_EXTI_Callback+0x40>
      UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW2,CFG_SCH_PRIO_1);
 800720a:	2101      	movs	r1, #1
 800720c:	2080      	movs	r0, #128	; 0x80
 800720e:	f00d f8e5 	bl	80143dc <UTIL_SEQ_SetTask>
      break;
 8007212:	e006      	b.n	8007222 <HAL_GPIO_EXTI_Callback+0x40>
      UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW3,CFG_SCH_PRIO_1);
 8007214:	2101      	movs	r1, #1
 8007216:	f44f 7080 	mov.w	r0, #256	; 0x100
 800721a:	f00d f8df 	bl	80143dc <UTIL_SEQ_SetTask>
      break;
 800721e:	e000      	b.n	8007222 <HAL_GPIO_EXTI_Callback+0x40>
      break;
 8007220:	bf00      	nop
  }
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <RxUART_Init>:

static void RxUART_Init(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <RxUART_Init+0x14>)
 8007232:	2201      	movs	r2, #1
 8007234:	4903      	ldr	r1, [pc, #12]	; (8007244 <RxUART_Init+0x18>)
 8007236:	2000      	movs	r0, #0
 8007238:	f000 feb4 	bl	8007fa4 <HW_UART_Receive_IT>
}
 800723c:	bf00      	nop
 800723e:	bd80      	pop	{r7, pc}
 8007240:	08007249 	.word	0x08007249
 8007244:	200000c4 	.word	0x200000c4

08007248 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800724c:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <RxCpltCallback+0x60>)
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	2bff      	cmp	r3, #255	; 0xff
 8007252:	d820      	bhi.n	8007296 <RxCpltCallback+0x4e>
  {
    if (aRxBuffer[0] == '\r')
 8007254:	4b15      	ldr	r3, [pc, #84]	; (80072ac <RxCpltCallback+0x64>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b0d      	cmp	r3, #13
 800725a:	d111      	bne.n	8007280 <RxCpltCallback+0x38>
    {
      APP_DBG("received %s", CommandString);
 800725c:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <RxCpltCallback+0x68>)
 800725e:	4a15      	ldr	r2, [pc, #84]	; (80072b4 <RxCpltCallback+0x6c>)
 8007260:	2101      	movs	r1, #1
 8007262:	2000      	movs	r0, #0
 8007264:	f001 fcc4 	bl	8008bf0 <logApplication>

      UartCmdExecute();
 8007268:	f000 f828 	bl	80072bc <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 800726c:	4b0e      	ldr	r3, [pc, #56]	; (80072a8 <RxCpltCallback+0x60>)
 800726e:	2200      	movs	r2, #0
 8007270:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8007272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007276:	2100      	movs	r1, #0
 8007278:	480d      	ldr	r0, [pc, #52]	; (80072b0 <RxCpltCallback+0x68>)
 800727a:	f00d fc1f 	bl	8014abc <memset>
 800727e:	e00a      	b.n	8007296 <RxCpltCallback+0x4e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <RxCpltCallback+0x60>)
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	b291      	uxth	r1, r2
 8007288:	4a07      	ldr	r2, [pc, #28]	; (80072a8 <RxCpltCallback+0x60>)
 800728a:	8011      	strh	r1, [r2, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <RxCpltCallback+0x64>)
 8007290:	7819      	ldrb	r1, [r3, #0]
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <RxCpltCallback+0x68>)
 8007294:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <RxCpltCallback+0x70>)
 8007298:	2201      	movs	r2, #1
 800729a:	4904      	ldr	r1, [pc, #16]	; (80072ac <RxCpltCallback+0x64>)
 800729c:	2000      	movs	r0, #0
 800729e:	f000 fe81 	bl	8007fa4 <HW_UART_Receive_IT>
}
 80072a2:	bf00      	nop
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200001cc 	.word	0x200001cc
 80072ac:	200000c4 	.word	0x200000c4
 80072b0:	200000cc 	.word	0x200000cc
 80072b4:	08015a20 	.word	0x08015a20
 80072b8:	08007249 	.word	0x08007249

080072bc <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80072c0:	4928      	ldr	r1, [pc, #160]	; (8007364 <UartCmdExecute+0xa8>)
 80072c2:	4829      	ldr	r0, [pc, #164]	; (8007368 <UartCmdExecute+0xac>)
 80072c4:	f7fe fcf0 	bl	8005ca8 <strcmp>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10b      	bne.n	80072e6 <UartCmdExecute+0x2a>
  {
    APP_DBG("SW1 OK");
 80072ce:	4a27      	ldr	r2, [pc, #156]	; (800736c <UartCmdExecute+0xb0>)
 80072d0:	2101      	movs	r1, #1
 80072d2:	2000      	movs	r0, #0
 80072d4:	f001 fc8c 	bl	8008bf0 <logApplication>
    exti_handle.Line = EXTI_LINE_4;
 80072d8:	4b25      	ldr	r3, [pc, #148]	; (8007370 <UartCmdExecute+0xb4>)
 80072da:	4a26      	ldr	r2, [pc, #152]	; (8007374 <UartCmdExecute+0xb8>)
 80072dc:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80072de:	4824      	ldr	r0, [pc, #144]	; (8007370 <UartCmdExecute+0xb4>)
 80072e0:	f004 fa6e 	bl	800b7c0 <HAL_EXTI_GenerateSWI>
  }  
  else
  {
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
  }
}
 80072e4:	e03b      	b.n	800735e <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80072e6:	4924      	ldr	r1, [pc, #144]	; (8007378 <UartCmdExecute+0xbc>)
 80072e8:	481f      	ldr	r0, [pc, #124]	; (8007368 <UartCmdExecute+0xac>)
 80072ea:	f7fe fcdd 	bl	8005ca8 <strcmp>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10c      	bne.n	800730e <UartCmdExecute+0x52>
    APP_DBG("SW2 OK");
 80072f4:	4a21      	ldr	r2, [pc, #132]	; (800737c <UartCmdExecute+0xc0>)
 80072f6:	2101      	movs	r1, #1
 80072f8:	2000      	movs	r0, #0
 80072fa:	f001 fc79 	bl	8008bf0 <logApplication>
    exti_handle.Line = EXTI_LINE_0;
 80072fe:	4b1c      	ldr	r3, [pc, #112]	; (8007370 <UartCmdExecute+0xb4>)
 8007300:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8007304:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8007306:	481a      	ldr	r0, [pc, #104]	; (8007370 <UartCmdExecute+0xb4>)
 8007308:	f004 fa5a 	bl	800b7c0 <HAL_EXTI_GenerateSWI>
}
 800730c:	e027      	b.n	800735e <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 800730e:	491c      	ldr	r1, [pc, #112]	; (8007380 <UartCmdExecute+0xc4>)
 8007310:	4815      	ldr	r0, [pc, #84]	; (8007368 <UartCmdExecute+0xac>)
 8007312:	f7fe fcc9 	bl	8005ca8 <strcmp>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10b      	bne.n	8007334 <UartCmdExecute+0x78>
    APP_DBG("SW3 OK");
 800731c:	4a19      	ldr	r2, [pc, #100]	; (8007384 <UartCmdExecute+0xc8>)
 800731e:	2101      	movs	r1, #1
 8007320:	2000      	movs	r0, #0
 8007322:	f001 fc65 	bl	8008bf0 <logApplication>
    exti_handle.Line = EXTI_LINE_1;
 8007326:	4b12      	ldr	r3, [pc, #72]	; (8007370 <UartCmdExecute+0xb4>)
 8007328:	4a17      	ldr	r2, [pc, #92]	; (8007388 <UartCmdExecute+0xcc>)
 800732a:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800732c:	4810      	ldr	r0, [pc, #64]	; (8007370 <UartCmdExecute+0xb4>)
 800732e:	f004 fa47 	bl	800b7c0 <HAL_EXTI_GenerateSWI>
}
 8007332:	e014      	b.n	800735e <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "RST") == 0)
 8007334:	4915      	ldr	r1, [pc, #84]	; (800738c <UartCmdExecute+0xd0>)
 8007336:	480c      	ldr	r0, [pc, #48]	; (8007368 <UartCmdExecute+0xac>)
 8007338:	f7fe fcb6 	bl	8005ca8 <strcmp>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d107      	bne.n	8007352 <UartCmdExecute+0x96>
    APP_DBG("RESET CMD RECEIVED");
 8007342:	4a13      	ldr	r2, [pc, #76]	; (8007390 <UartCmdExecute+0xd4>)
 8007344:	2101      	movs	r1, #1
 8007346:	2000      	movs	r0, #0
 8007348:	f001 fc52 	bl	8008bf0 <logApplication>
    HAL_NVIC_SystemReset();
 800734c:	f003 fed9 	bl	800b102 <HAL_NVIC_SystemReset>
}
 8007350:	e005      	b.n	800735e <UartCmdExecute+0xa2>
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
 8007352:	4b05      	ldr	r3, [pc, #20]	; (8007368 <UartCmdExecute+0xac>)
 8007354:	4a0f      	ldr	r2, [pc, #60]	; (8007394 <UartCmdExecute+0xd8>)
 8007356:	2101      	movs	r1, #1
 8007358:	2000      	movs	r0, #0
 800735a:	f001 fc49 	bl	8008bf0 <logApplication>
}
 800735e:	bf00      	nop
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	08015a2c 	.word	0x08015a2c
 8007368:	200000cc 	.word	0x200000cc
 800736c:	08015a30 	.word	0x08015a30
 8007370:	200001d0 	.word	0x200001d0
 8007374:	16000004 	.word	0x16000004
 8007378:	08015a38 	.word	0x08015a38
 800737c:	08015a3c 	.word	0x08015a3c
 8007380:	08015a44 	.word	0x08015a44
 8007384:	08015a48 	.word	0x08015a48
 8007388:	16000001 	.word	0x16000001
 800738c:	08015a50 	.word	0x08015a50
 8007390:	08015a54 	.word	0x08015a54
 8007394:	08015a68 	.word	0x08015a68

08007398 <LL_EXTI_EnableIT_0_31>:
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <LL_EXTI_EnableIT_0_31+0x24>)
 80073a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80073a6:	4905      	ldr	r1, [pc, #20]	; (80073bc <LL_EXTI_EnableIT_0_31+0x24>)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	58000800 	.word	0x58000800

080073c0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80073c8:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4904      	ldr	r1, [pc, #16]	; (80073e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	600b      	str	r3, [r1, #0]

}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	58000800 	.word	0x58000800

080073e4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <ReadRtcSsrValue+0x3c>)
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80073f2:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <ReadRtcSsrValue+0x3c>)
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80073fa:	e005      	b.n	8007408 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <ReadRtcSsrValue+0x3c>)
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	b29b      	uxth	r3, r3
 8007406:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d1f5      	bne.n	80073fc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8007410:	683b      	ldr	r3, [r7, #0]
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40002800 	.word	0x40002800

08007424 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	460a      	mov	r2, r1
 800742e:	71fb      	strb	r3, [r7, #7]
 8007430:	4613      	mov	r3, r2
 8007432:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8007434:	79ba      	ldrb	r2, [r7, #6]
 8007436:	491d      	ldr	r1, [pc, #116]	; (80074ac <LinkTimerAfter+0x88>)
 8007438:	4613      	mov	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	4413      	add	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	440b      	add	r3, r1
 8007442:	3315      	adds	r3, #21
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b06      	cmp	r3, #6
 800744c:	d009      	beq.n	8007462 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800744e:	7bfa      	ldrb	r2, [r7, #15]
 8007450:	4916      	ldr	r1, [pc, #88]	; (80074ac <LinkTimerAfter+0x88>)
 8007452:	4613      	mov	r3, r2
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4413      	add	r3, r2
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	440b      	add	r3, r1
 800745c:	3314      	adds	r3, #20
 800745e:	79fa      	ldrb	r2, [r7, #7]
 8007460:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8007462:	79fa      	ldrb	r2, [r7, #7]
 8007464:	4911      	ldr	r1, [pc, #68]	; (80074ac <LinkTimerAfter+0x88>)
 8007466:	4613      	mov	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4413      	add	r3, r2
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	440b      	add	r3, r1
 8007470:	3315      	adds	r3, #21
 8007472:	7bfa      	ldrb	r2, [r7, #15]
 8007474:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8007476:	79fa      	ldrb	r2, [r7, #7]
 8007478:	490c      	ldr	r1, [pc, #48]	; (80074ac <LinkTimerAfter+0x88>)
 800747a:	4613      	mov	r3, r2
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	4413      	add	r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	440b      	add	r3, r1
 8007484:	3314      	adds	r3, #20
 8007486:	79ba      	ldrb	r2, [r7, #6]
 8007488:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800748a:	79ba      	ldrb	r2, [r7, #6]
 800748c:	4907      	ldr	r1, [pc, #28]	; (80074ac <LinkTimerAfter+0x88>)
 800748e:	4613      	mov	r3, r2
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	4413      	add	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	440b      	add	r3, r1
 8007498:	3315      	adds	r3, #21
 800749a:	79fa      	ldrb	r2, [r7, #7]
 800749c:	701a      	strb	r2, [r3, #0]

  return;
 800749e:	bf00      	nop
}
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	200001d8 	.word	0x200001d8

080074b0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	460a      	mov	r2, r1
 80074ba:	71fb      	strb	r3, [r7, #7]
 80074bc:	4613      	mov	r3, r2
 80074be:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80074c0:	4b29      	ldr	r3, [pc, #164]	; (8007568 <LinkTimerBefore+0xb8>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	79ba      	ldrb	r2, [r7, #6]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d032      	beq.n	8007532 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80074cc:	79ba      	ldrb	r2, [r7, #6]
 80074ce:	4927      	ldr	r1, [pc, #156]	; (800756c <LinkTimerBefore+0xbc>)
 80074d0:	4613      	mov	r3, r2
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	4413      	add	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	440b      	add	r3, r1
 80074da:	3314      	adds	r3, #20
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80074e0:	7bfa      	ldrb	r2, [r7, #15]
 80074e2:	4922      	ldr	r1, [pc, #136]	; (800756c <LinkTimerBefore+0xbc>)
 80074e4:	4613      	mov	r3, r2
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	4413      	add	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	440b      	add	r3, r1
 80074ee:	3315      	adds	r3, #21
 80074f0:	79fa      	ldrb	r2, [r7, #7]
 80074f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80074f4:	79fa      	ldrb	r2, [r7, #7]
 80074f6:	491d      	ldr	r1, [pc, #116]	; (800756c <LinkTimerBefore+0xbc>)
 80074f8:	4613      	mov	r3, r2
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	4413      	add	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	440b      	add	r3, r1
 8007502:	3315      	adds	r3, #21
 8007504:	79ba      	ldrb	r2, [r7, #6]
 8007506:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8007508:	79fa      	ldrb	r2, [r7, #7]
 800750a:	4918      	ldr	r1, [pc, #96]	; (800756c <LinkTimerBefore+0xbc>)
 800750c:	4613      	mov	r3, r2
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	440b      	add	r3, r1
 8007516:	3314      	adds	r3, #20
 8007518:	7bfa      	ldrb	r2, [r7, #15]
 800751a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800751c:	79ba      	ldrb	r2, [r7, #6]
 800751e:	4913      	ldr	r1, [pc, #76]	; (800756c <LinkTimerBefore+0xbc>)
 8007520:	4613      	mov	r3, r2
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	440b      	add	r3, r1
 800752a:	3314      	adds	r3, #20
 800752c:	79fa      	ldrb	r2, [r7, #7]
 800752e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8007530:	e014      	b.n	800755c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8007532:	79fa      	ldrb	r2, [r7, #7]
 8007534:	490d      	ldr	r1, [pc, #52]	; (800756c <LinkTimerBefore+0xbc>)
 8007536:	4613      	mov	r3, r2
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	4413      	add	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	440b      	add	r3, r1
 8007540:	3315      	adds	r3, #21
 8007542:	79ba      	ldrb	r2, [r7, #6]
 8007544:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8007546:	79ba      	ldrb	r2, [r7, #6]
 8007548:	4908      	ldr	r1, [pc, #32]	; (800756c <LinkTimerBefore+0xbc>)
 800754a:	4613      	mov	r3, r2
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	4413      	add	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	440b      	add	r3, r1
 8007554:	3314      	adds	r3, #20
 8007556:	79fa      	ldrb	r2, [r7, #7]
 8007558:	701a      	strb	r2, [r3, #0]
  return;
 800755a:	bf00      	nop
}
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000268 	.word	0x20000268
 800756c:	200001d8 	.word	0x200001d8

08007570 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800757a:	4b4e      	ldr	r3, [pc, #312]	; (80076b4 <linkTimer+0x144>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b06      	cmp	r3, #6
 8007582:	d118      	bne.n	80075b6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8007584:	4b4b      	ldr	r3, [pc, #300]	; (80076b4 <linkTimer+0x144>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	b2da      	uxtb	r2, r3
 800758a:	4b4b      	ldr	r3, [pc, #300]	; (80076b8 <linkTimer+0x148>)
 800758c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800758e:	4a49      	ldr	r2, [pc, #292]	; (80076b4 <linkTimer+0x144>)
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8007594:	79fa      	ldrb	r2, [r7, #7]
 8007596:	4949      	ldr	r1, [pc, #292]	; (80076bc <linkTimer+0x14c>)
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	440b      	add	r3, r1
 80075a2:	3315      	adds	r3, #21
 80075a4:	2206      	movs	r2, #6
 80075a6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80075a8:	4b45      	ldr	r3, [pc, #276]	; (80076c0 <linkTimer+0x150>)
 80075aa:	f04f 32ff 	mov.w	r2, #4294967295
 80075ae:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	81fb      	strh	r3, [r7, #14]
 80075b4:	e078      	b.n	80076a8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80075b6:	f000 f909 	bl	80077cc <ReturnTimeElapsed>
 80075ba:	4603      	mov	r3, r0
 80075bc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80075be:	79fa      	ldrb	r2, [r7, #7]
 80075c0:	493e      	ldr	r1, [pc, #248]	; (80076bc <linkTimer+0x14c>)
 80075c2:	4613      	mov	r3, r2
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4413      	add	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	440b      	add	r3, r1
 80075cc:	3308      	adds	r3, #8
 80075ce:	6819      	ldr	r1, [r3, #0]
 80075d0:	89fb      	ldrh	r3, [r7, #14]
 80075d2:	79fa      	ldrb	r2, [r7, #7]
 80075d4:	4419      	add	r1, r3
 80075d6:	4839      	ldr	r0, [pc, #228]	; (80076bc <linkTimer+0x14c>)
 80075d8:	4613      	mov	r3, r2
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	4413      	add	r3, r2
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4403      	add	r3, r0
 80075e2:	3308      	adds	r3, #8
 80075e4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80075e6:	79fa      	ldrb	r2, [r7, #7]
 80075e8:	4934      	ldr	r1, [pc, #208]	; (80076bc <linkTimer+0x14c>)
 80075ea:	4613      	mov	r3, r2
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	4413      	add	r3, r2
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	440b      	add	r3, r1
 80075f4:	3308      	adds	r3, #8
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80075fa:	4b2e      	ldr	r3, [pc, #184]	; (80076b4 <linkTimer+0x144>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	4619      	mov	r1, r3
 8007602:	4a2e      	ldr	r2, [pc, #184]	; (80076bc <linkTimer+0x14c>)
 8007604:	460b      	mov	r3, r1
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	440b      	add	r3, r1
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4413      	add	r3, r2
 800760e:	3308      	adds	r3, #8
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	429a      	cmp	r2, r3
 8007616:	d337      	bcc.n	8007688 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8007618:	4b26      	ldr	r3, [pc, #152]	; (80076b4 <linkTimer+0x144>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800761e:	7b7a      	ldrb	r2, [r7, #13]
 8007620:	4926      	ldr	r1, [pc, #152]	; (80076bc <linkTimer+0x14c>)
 8007622:	4613      	mov	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	440b      	add	r3, r1
 800762c:	3315      	adds	r3, #21
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8007632:	e013      	b.n	800765c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8007634:	7b7a      	ldrb	r2, [r7, #13]
 8007636:	4921      	ldr	r1, [pc, #132]	; (80076bc <linkTimer+0x14c>)
 8007638:	4613      	mov	r3, r2
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	4413      	add	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	440b      	add	r3, r1
 8007642:	3315      	adds	r3, #21
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8007648:	7b7a      	ldrb	r2, [r7, #13]
 800764a:	491c      	ldr	r1, [pc, #112]	; (80076bc <linkTimer+0x14c>)
 800764c:	4613      	mov	r3, r2
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	4413      	add	r3, r2
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	440b      	add	r3, r1
 8007656:	3315      	adds	r3, #21
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800765c:	7b3b      	ldrb	r3, [r7, #12]
 800765e:	2b06      	cmp	r3, #6
 8007660:	d00b      	beq.n	800767a <linkTimer+0x10a>
 8007662:	7b3a      	ldrb	r2, [r7, #12]
 8007664:	4915      	ldr	r1, [pc, #84]	; (80076bc <linkTimer+0x14c>)
 8007666:	4613      	mov	r3, r2
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	4413      	add	r3, r2
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	440b      	add	r3, r1
 8007670:	3308      	adds	r3, #8
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	429a      	cmp	r2, r3
 8007678:	d2dc      	bcs.n	8007634 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800767a:	7b7a      	ldrb	r2, [r7, #13]
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fecf 	bl	8007424 <LinkTimerAfter>
 8007686:	e00f      	b.n	80076a8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <linkTimer+0x144>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b2da      	uxtb	r2, r3
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	4611      	mov	r1, r2
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff ff0c 	bl	80074b0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8007698:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <linkTimer+0x144>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <linkTimer+0x148>)
 80076a0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80076a2:	4a04      	ldr	r2, [pc, #16]	; (80076b4 <linkTimer+0x144>)
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80076a8:	89fb      	ldrh	r3, [r7, #14]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000268 	.word	0x20000268
 80076b8:	20000269 	.word	0x20000269
 80076bc:	200001d8 	.word	0x200001d8
 80076c0:	2000026c 	.word	0x2000026c

080076c4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	460a      	mov	r2, r1
 80076ce:	71fb      	strb	r3, [r7, #7]
 80076d0:	4613      	mov	r3, r2
 80076d2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80076d4:	4b39      	ldr	r3, [pc, #228]	; (80077bc <UnlinkTimer+0xf8>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	79fa      	ldrb	r2, [r7, #7]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d111      	bne.n	8007704 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80076e0:	4b36      	ldr	r3, [pc, #216]	; (80077bc <UnlinkTimer+0xf8>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	4b36      	ldr	r3, [pc, #216]	; (80077c0 <UnlinkTimer+0xfc>)
 80076e8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80076ea:	79fa      	ldrb	r2, [r7, #7]
 80076ec:	4935      	ldr	r1, [pc, #212]	; (80077c4 <UnlinkTimer+0x100>)
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	440b      	add	r3, r1
 80076f8:	3315      	adds	r3, #21
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	4b2f      	ldr	r3, [pc, #188]	; (80077bc <UnlinkTimer+0xf8>)
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	e03e      	b.n	8007782 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8007704:	79fa      	ldrb	r2, [r7, #7]
 8007706:	492f      	ldr	r1, [pc, #188]	; (80077c4 <UnlinkTimer+0x100>)
 8007708:	4613      	mov	r3, r2
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	4413      	add	r3, r2
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	440b      	add	r3, r1
 8007712:	3314      	adds	r3, #20
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8007718:	79fa      	ldrb	r2, [r7, #7]
 800771a:	492a      	ldr	r1, [pc, #168]	; (80077c4 <UnlinkTimer+0x100>)
 800771c:	4613      	mov	r3, r2
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	4413      	add	r3, r2
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	440b      	add	r3, r1
 8007726:	3315      	adds	r3, #21
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800772c:	79f9      	ldrb	r1, [r7, #7]
 800772e:	7bfa      	ldrb	r2, [r7, #15]
 8007730:	4824      	ldr	r0, [pc, #144]	; (80077c4 <UnlinkTimer+0x100>)
 8007732:	460b      	mov	r3, r1
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	440b      	add	r3, r1
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	4403      	add	r3, r0
 800773c:	3315      	adds	r3, #21
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	b2d8      	uxtb	r0, r3
 8007742:	4920      	ldr	r1, [pc, #128]	; (80077c4 <UnlinkTimer+0x100>)
 8007744:	4613      	mov	r3, r2
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	4413      	add	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	440b      	add	r3, r1
 800774e:	3315      	adds	r3, #21
 8007750:	4602      	mov	r2, r0
 8007752:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b06      	cmp	r3, #6
 8007758:	d013      	beq.n	8007782 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800775a:	79f9      	ldrb	r1, [r7, #7]
 800775c:	7bba      	ldrb	r2, [r7, #14]
 800775e:	4819      	ldr	r0, [pc, #100]	; (80077c4 <UnlinkTimer+0x100>)
 8007760:	460b      	mov	r3, r1
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	440b      	add	r3, r1
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4403      	add	r3, r0
 800776a:	3314      	adds	r3, #20
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	b2d8      	uxtb	r0, r3
 8007770:	4914      	ldr	r1, [pc, #80]	; (80077c4 <UnlinkTimer+0x100>)
 8007772:	4613      	mov	r3, r2
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	4413      	add	r3, r2
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	440b      	add	r3, r1
 800777c:	3314      	adds	r3, #20
 800777e:	4602      	mov	r2, r0
 8007780:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8007782:	79fa      	ldrb	r2, [r7, #7]
 8007784:	490f      	ldr	r1, [pc, #60]	; (80077c4 <UnlinkTimer+0x100>)
 8007786:	4613      	mov	r3, r2
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	4413      	add	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	440b      	add	r3, r1
 8007790:	330c      	adds	r3, #12
 8007792:	2201      	movs	r2, #1
 8007794:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <UnlinkTimer+0xf8>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b06      	cmp	r3, #6
 800779e:	d107      	bne.n	80077b0 <UnlinkTimer+0xec>
 80077a0:	79bb      	ldrb	r3, [r7, #6]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80077a6:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <UnlinkTimer+0x104>)
 80077a8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ac:	601a      	str	r2, [r3, #0]
  }

  return;
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
}
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	20000268 	.word	0x20000268
 80077c0:	20000269 	.word	0x20000269
 80077c4:	200001d8 	.word	0x200001d8
 80077c8:	2000026c 	.word	0x2000026c

080077cc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80077d2:	4b1a      	ldr	r3, [pc, #104]	; (800783c <ReturnTimeElapsed+0x70>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	d026      	beq.n	800782a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80077dc:	f7ff fe02 	bl	80073e4 <ReadRtcSsrValue>
 80077e0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80077e2:	4b16      	ldr	r3, [pc, #88]	; (800783c <ReturnTimeElapsed+0x70>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d805      	bhi.n	80077f8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80077ec:	4b13      	ldr	r3, [pc, #76]	; (800783c <ReturnTimeElapsed+0x70>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	607b      	str	r3, [r7, #4]
 80077f6:	e00a      	b.n	800780e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80077f8:	4b11      	ldr	r3, [pc, #68]	; (8007840 <ReturnTimeElapsed+0x74>)
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <ReturnTimeElapsed+0x70>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	4413      	add	r3, r2
 800780c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800780e:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <ReturnTimeElapsed+0x78>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	fb02 f303 	mul.w	r3, r2, r3
 800781a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <ReturnTimeElapsed+0x7c>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	40d3      	lsrs	r3, r2
 8007826:	607b      	str	r3, [r7, #4]
 8007828:	e001      	b.n	800782e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	b29b      	uxth	r3, r3
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	2000026c 	.word	0x2000026c
 8007840:	20000274 	.word	0x20000274
 8007844:	20000272 	.word	0x20000272
 8007848:	20000271 	.word	0x20000271

0800784c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d108      	bne.n	800786e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800785c:	f7ff fdc2 	bl	80073e4 <ReadRtcSsrValue>
 8007860:	4603      	mov	r3, r0
 8007862:	4a21      	ldr	r2, [pc, #132]	; (80078e8 <RestartWakeupCounter+0x9c>)
 8007864:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8007866:	2003      	movs	r0, #3
 8007868:	f003 fc5b 	bl	800b122 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800786c:	e039      	b.n	80078e2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d803      	bhi.n	800787c <RestartWakeupCounter+0x30>
 8007874:	4b1d      	ldr	r3, [pc, #116]	; (80078ec <RestartWakeupCounter+0xa0>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d002      	beq.n	8007882 <RestartWakeupCounter+0x36>
      Value -= 1;
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	3b01      	subs	r3, #1
 8007880:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007882:	bf00      	nop
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <RestartWakeupCounter+0xa4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0f8      	beq.n	8007884 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007892:	4b17      	ldr	r3, [pc, #92]	; (80078f0 <RestartWakeupCounter+0xa4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	b2da      	uxtb	r2, r3
 800789a:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <RestartWakeupCounter+0xa4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80078a2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80078a4:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <RestartWakeupCounter+0xa8>)
 80078a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80078aa:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80078ac:	2003      	movs	r0, #3
 80078ae:	f003 fc46 	bl	800b13e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80078b2:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <RestartWakeupCounter+0xac>)
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	041b      	lsls	r3, r3, #16
 80078ba:	88fa      	ldrh	r2, [r7, #6]
 80078bc:	490e      	ldr	r1, [pc, #56]	; (80078f8 <RestartWakeupCounter+0xac>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80078c2:	f7ff fd8f 	bl	80073e4 <ReadRtcSsrValue>
 80078c6:	4603      	mov	r3, r0
 80078c8:	4a07      	ldr	r2, [pc, #28]	; (80078e8 <RestartWakeupCounter+0x9c>)
 80078ca:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80078cc:	4b08      	ldr	r3, [pc, #32]	; (80078f0 <RestartWakeupCounter+0xa4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <RestartWakeupCounter+0xa4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078da:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80078dc:	f3af 8000 	nop.w
  return ;
 80078e0:	bf00      	nop
}
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	2000026c 	.word	0x2000026c
 80078ec:	20000271 	.word	0x20000271
 80078f0:	200004ac 	.word	0x200004ac
 80078f4:	58000800 	.word	0x58000800
 80078f8:	40002800 	.word	0x40002800

080078fc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8007902:	4b45      	ldr	r3, [pc, #276]	; (8007a18 <RescheduleTimerList+0x11c>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800790a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790e:	d107      	bne.n	8007920 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8007910:	bf00      	nop
 8007912:	4b42      	ldr	r3, [pc, #264]	; (8007a1c <RescheduleTimerList+0x120>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f8      	bne.n	8007912 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8007920:	4b3e      	ldr	r3, [pc, #248]	; (8007a1c <RescheduleTimerList+0x120>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689a      	ldr	r2, [r3, #8]
 8007926:	4b3d      	ldr	r3, [pc, #244]	; (8007a1c <RescheduleTimerList+0x120>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8007930:	4b3b      	ldr	r3, [pc, #236]	; (8007a20 <RescheduleTimerList+0x124>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8007936:	7bfa      	ldrb	r2, [r7, #15]
 8007938:	493a      	ldr	r1, [pc, #232]	; (8007a24 <RescheduleTimerList+0x128>)
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	440b      	add	r3, r1
 8007944:	3308      	adds	r3, #8
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800794a:	f7ff ff3f 	bl	80077cc <ReturnTimeElapsed>
 800794e:	4603      	mov	r3, r0
 8007950:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	429a      	cmp	r2, r3
 8007958:	d205      	bcs.n	8007966 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800795e:	4b32      	ldr	r3, [pc, #200]	; (8007a28 <RescheduleTimerList+0x12c>)
 8007960:	2201      	movs	r2, #1
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	e04d      	b.n	8007a02 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	4a30      	ldr	r2, [pc, #192]	; (8007a2c <RescheduleTimerList+0x130>)
 800796a:	8812      	ldrh	r2, [r2, #0]
 800796c:	b292      	uxth	r2, r2
 800796e:	4413      	add	r3, r2
 8007970:	461a      	mov	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4293      	cmp	r3, r2
 8007976:	d906      	bls.n	8007986 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8007978:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <RescheduleTimerList+0x130>)
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800797e:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <RescheduleTimerList+0x12c>)
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	e03d      	b.n	8007a02 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	b29a      	uxth	r2, r3
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <RescheduleTimerList+0x12c>)
 8007992:	2201      	movs	r2, #1
 8007994:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007996:	e034      	b.n	8007a02 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8007998:	7bfa      	ldrb	r2, [r7, #15]
 800799a:	4922      	ldr	r1, [pc, #136]	; (8007a24 <RescheduleTimerList+0x128>)
 800799c:	4613      	mov	r3, r2
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	4413      	add	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	440b      	add	r3, r1
 80079a6:	3308      	adds	r3, #8
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d20a      	bcs.n	80079c6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80079b0:	7bfa      	ldrb	r2, [r7, #15]
 80079b2:	491c      	ldr	r1, [pc, #112]	; (8007a24 <RescheduleTimerList+0x128>)
 80079b4:	4613      	mov	r3, r2
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	4413      	add	r3, r2
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	440b      	add	r3, r1
 80079be:	3308      	adds	r3, #8
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e013      	b.n	80079ee <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80079c6:	7bfa      	ldrb	r2, [r7, #15]
 80079c8:	4916      	ldr	r1, [pc, #88]	; (8007a24 <RescheduleTimerList+0x128>)
 80079ca:	4613      	mov	r3, r2
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	4413      	add	r3, r2
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	440b      	add	r3, r1
 80079d4:	3308      	adds	r3, #8
 80079d6:	6819      	ldr	r1, [r3, #0]
 80079d8:	88fb      	ldrh	r3, [r7, #6]
 80079da:	7bfa      	ldrb	r2, [r7, #15]
 80079dc:	1ac9      	subs	r1, r1, r3
 80079de:	4811      	ldr	r0, [pc, #68]	; (8007a24 <RescheduleTimerList+0x128>)
 80079e0:	4613      	mov	r3, r2
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	4413      	add	r3, r2
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	4403      	add	r3, r0
 80079ea:	3308      	adds	r3, #8
 80079ec:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80079ee:	7bfa      	ldrb	r2, [r7, #15]
 80079f0:	490c      	ldr	r1, [pc, #48]	; (8007a24 <RescheduleTimerList+0x128>)
 80079f2:	4613      	mov	r3, r2
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	4413      	add	r3, r2
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	440b      	add	r3, r1
 80079fc:	3315      	adds	r3, #21
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b06      	cmp	r3, #6
 8007a06:	d1c7      	bne.n	8007998 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8007a08:	89bb      	ldrh	r3, [r7, #12]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff ff1e 	bl	800784c <RestartWakeupCounter>

  return ;
 8007a10:	bf00      	nop
}
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40002800 	.word	0x40002800
 8007a1c:	200004ac 	.word	0x200004ac
 8007a20:	20000268 	.word	0x20000268
 8007a24:	200001d8 	.word	0x200001d8
 8007a28:	20000270 	.word	0x20000270
 8007a2c:	20000276 	.word	0x20000276

08007a30 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	; 0x28
 8007a34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a36:	f3ef 8310 	mrs	r3, PRIMASK
 8007a3a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a3c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8007a40:	b672      	cpsid	i
}
 8007a42:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007a44:	4b59      	ldr	r3, [pc, #356]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	22ca      	movs	r2, #202	; 0xca
 8007a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a4c:	4b57      	ldr	r3, [pc, #348]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2253      	movs	r2, #83	; 0x53
 8007a52:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8007a54:	4b55      	ldr	r3, [pc, #340]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	4b54      	ldr	r3, [pc, #336]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a62:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8007a64:	4b52      	ldr	r3, [pc, #328]	; (8007bb0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8007a6c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007a70:	4950      	ldr	r1, [pc, #320]	; (8007bb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007a72:	4613      	mov	r3, r2
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	4413      	add	r3, r2
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	440b      	add	r3, r1
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d16e      	bne.n	8007b64 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8007a86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007a8a:	494a      	ldr	r1, [pc, #296]	; (8007bb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	4413      	add	r3, r2
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	440b      	add	r3, r1
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8007a9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007a9e:	4945      	ldr	r1, [pc, #276]	; (8007bb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	4413      	add	r3, r2
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	440b      	add	r3, r1
 8007aaa:	3310      	adds	r3, #16
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8007ab0:	4b41      	ldr	r3, [pc, #260]	; (8007bb8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d04c      	beq.n	8007b54 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8007aba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007abe:	493d      	ldr	r1, [pc, #244]	; (8007bb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	440b      	add	r3, r1
 8007aca:	330d      	adds	r3, #13
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d124      	bne.n	8007b1e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8007ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ad8:	2101      	movs	r1, #1
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff fdf2 	bl	80076c4 <UnlinkTimer>
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f383 8810 	msr	PRIMASK, r3
}
 8007aea:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8007aec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007af0:	4930      	ldr	r1, [pc, #192]	; (8007bb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007af2:	4613      	mov	r3, r2
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	4413      	add	r3, r2
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	440b      	add	r3, r1
 8007afc:	3304      	adds	r3, #4
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b04:	4611      	mov	r1, r2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f9b8 	bl	8007e7c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007b0c:	4b27      	ldr	r3, [pc, #156]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	22ca      	movs	r2, #202	; 0xca
 8007b12:	625a      	str	r2, [r3, #36]	; 0x24
 8007b14:	4b25      	ldr	r3, [pc, #148]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2253      	movs	r2, #83	; 0x53
 8007b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8007b1c:	e012      	b.n	8007b44 <HW_TS_RTC_Wakeup_Handler+0x114>
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f383 8810 	msr	PRIMASK, r3
}
 8007b28:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8007b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 f920 	bl	8007d74 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007b34:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	22ca      	movs	r2, #202	; 0xca
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24
 8007b3c:	4b1b      	ldr	r3, [pc, #108]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2253      	movs	r2, #83	; 0x53
 8007b42:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8007b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	69b8      	ldr	r0, [r7, #24]
 8007b4e:	f000 fa1b 	bl	8007f88 <HW_TS_RTC_Int_AppNot>
 8007b52:	e022      	b.n	8007b9a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8007b54:	f7ff fed2 	bl	80078fc <RescheduleTimerList>
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f383 8810 	msr	PRIMASK, r3
}
 8007b62:	e01a      	b.n	8007b9a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007b64:	bf00      	nop
 8007b66:	4b11      	ldr	r3, [pc, #68]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f8      	beq.n	8007b66 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007b74:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007b84:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8007b88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b8c:	60da      	str	r2, [r3, #12]
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f383 8810 	msr	PRIMASK, r3
}
 8007b98:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007b9a:	4b04      	ldr	r3, [pc, #16]	; (8007bac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	22ff      	movs	r2, #255	; 0xff
 8007ba0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8007ba2:	bf00      	nop
}
 8007ba4:	3728      	adds	r7, #40	; 0x28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	200004ac 	.word	0x200004ac
 8007bb0:	20000268 	.word	0x20000268
 8007bb4:	200001d8 	.word	0x200001d8
 8007bb8:	20000270 	.word	0x20000270
 8007bbc:	58000800 	.word	0x58000800

08007bc0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007bcc:	4b5e      	ldr	r3, [pc, #376]	; (8007d48 <HW_TS_Init+0x188>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	22ca      	movs	r2, #202	; 0xca
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8007bd4:	4b5c      	ldr	r3, [pc, #368]	; (8007d48 <HW_TS_Init+0x188>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2253      	movs	r2, #83	; 0x53
 8007bda:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007bdc:	4b5b      	ldr	r3, [pc, #364]	; (8007d4c <HW_TS_Init+0x18c>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4a5a      	ldr	r2, [pc, #360]	; (8007d4c <HW_TS_Init+0x18c>)
 8007be2:	f043 0320 	orr.w	r3, r3, #32
 8007be6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8007be8:	4b58      	ldr	r3, [pc, #352]	; (8007d4c <HW_TS_Init+0x18c>)
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f1c3 0304 	rsb	r3, r3, #4
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	4b55      	ldr	r3, [pc, #340]	; (8007d50 <HW_TS_Init+0x190>)
 8007bfc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8007bfe:	4b53      	ldr	r3, [pc, #332]	; (8007d4c <HW_TS_Init+0x18c>)
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c06:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8007c0a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	fa92 f2a2 	rbit	r2, r2
 8007c12:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	d101      	bne.n	8007c22 <HW_TS_Init+0x62>
  {
    return 32U;
 8007c1e:	2220      	movs	r2, #32
 8007c20:	e003      	b.n	8007c2a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	fab2 f282 	clz	r2, r2
 8007c28:	b2d2      	uxtb	r2, r2
 8007c2a:	40d3      	lsrs	r3, r2
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	3301      	adds	r3, #1
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	4b48      	ldr	r3, [pc, #288]	; (8007d54 <HW_TS_Init+0x194>)
 8007c34:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8007c36:	4b45      	ldr	r3, [pc, #276]	; (8007d4c <HW_TS_Init+0x18c>)
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3301      	adds	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	4b44      	ldr	r3, [pc, #272]	; (8007d58 <HW_TS_Init+0x198>)
 8007c48:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8007c4a:	4b43      	ldr	r3, [pc, #268]	; (8007d58 <HW_TS_Init+0x198>)
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	4a40      	ldr	r2, [pc, #256]	; (8007d54 <HW_TS_Init+0x194>)
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	fb02 f303 	mul.w	r3, r2, r3
 8007c58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007c5c:	4a3c      	ldr	r2, [pc, #240]	; (8007d50 <HW_TS_Init+0x190>)
 8007c5e:	7812      	ldrb	r2, [r2, #0]
 8007c60:	40d3      	lsrs	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d904      	bls.n	8007c78 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8007c6e:	4b3b      	ldr	r3, [pc, #236]	; (8007d5c <HW_TS_Init+0x19c>)
 8007c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e003      	b.n	8007c80 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	4b37      	ldr	r3, [pc, #220]	; (8007d5c <HW_TS_Init+0x19c>)
 8007c7e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8007c80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007c84:	f7ff fb9c 	bl	80073c0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8007c88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007c8c:	f7ff fb84 	bl	8007398 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d13d      	bne.n	8007d12 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007c96:	4b32      	ldr	r3, [pc, #200]	; (8007d60 <HW_TS_Init+0x1a0>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8007c9c:	4b31      	ldr	r3, [pc, #196]	; (8007d64 <HW_TS_Init+0x1a4>)
 8007c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e00c      	b.n	8007cc4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8007caa:	7ffa      	ldrb	r2, [r7, #31]
 8007cac:	492e      	ldr	r1, [pc, #184]	; (8007d68 <HW_TS_Init+0x1a8>)
 8007cae:	4613      	mov	r3, r2
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4413      	add	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	440b      	add	r3, r1
 8007cb8:	330c      	adds	r3, #12
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007cbe:	7ffb      	ldrb	r3, [r7, #31]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	77fb      	strb	r3, [r7, #31]
 8007cc4:	7ffb      	ldrb	r3, [r7, #31]
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d9ef      	bls.n	8007caa <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8007cca:	4b28      	ldr	r3, [pc, #160]	; (8007d6c <HW_TS_Init+0x1ac>)
 8007ccc:	2206      	movs	r2, #6
 8007cce:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8007cd0:	4b1d      	ldr	r3, [pc, #116]	; (8007d48 <HW_TS_Init+0x188>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <HW_TS_Init+0x188>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cde:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8007ce0:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <HW_TS_Init+0x188>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <HW_TS_Init+0x188>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007cf0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8007cf2:	4b1f      	ldr	r3, [pc, #124]	; (8007d70 <HW_TS_Init+0x1b0>)
 8007cf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007cf8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8007cfa:	2003      	movs	r0, #3
 8007cfc:	f003 fa1f 	bl	800b13e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <HW_TS_Init+0x188>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689a      	ldr	r2, [r3, #8]
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <HW_TS_Init+0x188>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d0e:	609a      	str	r2, [r3, #8]
 8007d10:	e009      	b.n	8007d26 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8007d12:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <HW_TS_Init+0x188>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8007d20:	2003      	movs	r0, #3
 8007d22:	f003 f9fe 	bl	800b122 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007d26:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <HW_TS_Init+0x188>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	22ff      	movs	r2, #255	; 0xff
 8007d2c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2103      	movs	r1, #3
 8007d32:	2003      	movs	r0, #3
 8007d34:	f003 f9af 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007d38:	2003      	movs	r0, #3
 8007d3a:	f003 f9c6 	bl	800b0ca <HAL_NVIC_EnableIRQ>

  return;
 8007d3e:	bf00      	nop
}
 8007d40:	3720      	adds	r7, #32
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	200004ac 	.word	0x200004ac
 8007d4c:	40002800 	.word	0x40002800
 8007d50:	20000271 	.word	0x20000271
 8007d54:	20000272 	.word	0x20000272
 8007d58:	20000274 	.word	0x20000274
 8007d5c:	20000276 	.word	0x20000276
 8007d60:	20000270 	.word	0x20000270
 8007d64:	2000026c 	.word	0x2000026c
 8007d68:	200001d8 	.word	0x200001d8
 8007d6c:	20000268 	.word	0x20000268
 8007d70:	58000800 	.word	0x58000800

08007d74 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d82:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d84:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007d86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d88:	b672      	cpsid	i
}
 8007d8a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8007d8c:	2003      	movs	r0, #3
 8007d8e:	f003 f9aa 	bl	800b0e6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007d92:	4b34      	ldr	r3, [pc, #208]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	22ca      	movs	r2, #202	; 0xca
 8007d98:	625a      	str	r2, [r3, #36]	; 0x24
 8007d9a:	4b32      	ldr	r3, [pc, #200]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2253      	movs	r2, #83	; 0x53
 8007da0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8007da2:	79fa      	ldrb	r2, [r7, #7]
 8007da4:	4930      	ldr	r1, [pc, #192]	; (8007e68 <HW_TS_Stop+0xf4>)
 8007da6:	4613      	mov	r3, r2
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	4413      	add	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	440b      	add	r3, r1
 8007db0:	330c      	adds	r3, #12
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d142      	bne.n	8007e40 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fc80 	bl	80076c4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8007dc4:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <HW_TS_Stop+0xf8>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007dca:	7cfb      	ldrb	r3, [r7, #19]
 8007dcc:	2b06      	cmp	r3, #6
 8007dce:	d12f      	bne.n	8007e30 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8007dd0:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <HW_TS_Stop+0xfc>)
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ddc:	d107      	bne.n	8007dee <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8007dde:	bf00      	nop
 8007de0:	4b20      	ldr	r3, [pc, #128]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1f8      	bne.n	8007de0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8007dee:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	4b1b      	ldr	r3, [pc, #108]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dfc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007dfe:	bf00      	nop
 8007e00:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0f8      	beq.n	8007e00 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007e1e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8007e20:	4b14      	ldr	r3, [pc, #80]	; (8007e74 <HW_TS_Stop+0x100>)
 8007e22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007e26:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8007e28:	2003      	movs	r0, #3
 8007e2a:	f003 f988 	bl	800b13e <HAL_NVIC_ClearPendingIRQ>
 8007e2e:	e007      	b.n	8007e40 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8007e30:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <HW_TS_Stop+0x104>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	7cfa      	ldrb	r2, [r7, #19]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d001      	beq.n	8007e40 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8007e3c:	f7ff fd5e 	bl	80078fc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <HW_TS_Stop+0xf0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	22ff      	movs	r2, #255	; 0xff
 8007e46:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007e48:	2003      	movs	r0, #3
 8007e4a:	f003 f93e 	bl	800b0ca <HAL_NVIC_EnableIRQ>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f383 8810 	msr	PRIMASK, r3
}
 8007e58:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8007e5a:	bf00      	nop
}
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	200004ac 	.word	0x200004ac
 8007e68:	200001d8 	.word	0x200001d8
 8007e6c:	20000268 	.word	0x20000268
 8007e70:	40002800 	.word	0x40002800
 8007e74:	58000800 	.word	0x58000800
 8007e78:	20000269 	.word	0x20000269

08007e7c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	6039      	str	r1, [r7, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8007e88:	79fa      	ldrb	r2, [r7, #7]
 8007e8a:	493b      	ldr	r1, [pc, #236]	; (8007f78 <HW_TS_Start+0xfc>)
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	4413      	add	r3, r2
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	440b      	add	r3, r1
 8007e96:	330c      	adds	r3, #12
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d103      	bne.n	8007ea8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff ff66 	bl	8007d74 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8007eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eae:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007eb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007eb2:	b672      	cpsid	i
}
 8007eb4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8007eb6:	2003      	movs	r0, #3
 8007eb8:	f003 f915 	bl	800b0e6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007ebc:	4b2f      	ldr	r3, [pc, #188]	; (8007f7c <HW_TS_Start+0x100>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	22ca      	movs	r2, #202	; 0xca
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8007ec4:	4b2d      	ldr	r3, [pc, #180]	; (8007f7c <HW_TS_Start+0x100>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2253      	movs	r2, #83	; 0x53
 8007eca:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8007ecc:	79fa      	ldrb	r2, [r7, #7]
 8007ece:	492a      	ldr	r1, [pc, #168]	; (8007f78 <HW_TS_Start+0xfc>)
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	4413      	add	r3, r2
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	440b      	add	r3, r1
 8007eda:	330c      	adds	r3, #12
 8007edc:	2202      	movs	r2, #2
 8007ede:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8007ee0:	79fa      	ldrb	r2, [r7, #7]
 8007ee2:	4925      	ldr	r1, [pc, #148]	; (8007f78 <HW_TS_Start+0xfc>)
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4413      	add	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	440b      	add	r3, r1
 8007eee:	3308      	adds	r3, #8
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8007ef4:	79fa      	ldrb	r2, [r7, #7]
 8007ef6:	4920      	ldr	r1, [pc, #128]	; (8007f78 <HW_TS_Start+0xfc>)
 8007ef8:	4613      	mov	r3, r2
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	4413      	add	r3, r2
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	440b      	add	r3, r1
 8007f02:	3304      	adds	r3, #4
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff fb30 	bl	8007570 <linkTimer>
 8007f10:	4603      	mov	r3, r0
 8007f12:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8007f14:	4b1a      	ldr	r3, [pc, #104]	; (8007f80 <HW_TS_Start+0x104>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8007f1a:	4b1a      	ldr	r3, [pc, #104]	; (8007f84 <HW_TS_Start+0x108>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	7c7a      	ldrb	r2, [r7, #17]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d002      	beq.n	8007f2c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8007f26:	f7ff fce9 	bl	80078fc <RescheduleTimerList>
 8007f2a:	e013      	b.n	8007f54 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8007f2c:	79fa      	ldrb	r2, [r7, #7]
 8007f2e:	4912      	ldr	r1, [pc, #72]	; (8007f78 <HW_TS_Start+0xfc>)
 8007f30:	4613      	mov	r3, r2
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	4413      	add	r3, r2
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	440b      	add	r3, r1
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	6819      	ldr	r1, [r3, #0]
 8007f3e:	8a7b      	ldrh	r3, [r7, #18]
 8007f40:	79fa      	ldrb	r2, [r7, #7]
 8007f42:	1ac9      	subs	r1, r1, r3
 8007f44:	480c      	ldr	r0, [pc, #48]	; (8007f78 <HW_TS_Start+0xfc>)
 8007f46:	4613      	mov	r3, r2
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	4413      	add	r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	4403      	add	r3, r0
 8007f50:	3308      	adds	r3, #8
 8007f52:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <HW_TS_Start+0x100>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	22ff      	movs	r2, #255	; 0xff
 8007f5a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007f5c:	2003      	movs	r0, #3
 8007f5e:	f003 f8b4 	bl	800b0ca <HAL_NVIC_EnableIRQ>
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f383 8810 	msr	PRIMASK, r3
}
 8007f6c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8007f6e:	bf00      	nop
}
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	200001d8 	.word	0x200001d8
 8007f7c:	200004ac 	.word	0x200004ac
 8007f80:	20000268 	.word	0x20000268
 8007f84:	20000269 	.word	0x20000269

08007f88 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	460b      	mov	r3, r1
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4798      	blx	r3

  return;
 8007f9a:	bf00      	nop
}
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607b      	str	r3, [r7, #4]
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <HW_UART_Receive_IT+0x1e>
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d00d      	beq.n	8007fdc <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8007fc0:	e019      	b.n	8007ff6 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8007fc2:	4a0f      	ldr	r2, [pc, #60]	; (8008000 <HW_UART_Receive_IT+0x5c>)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <HW_UART_Receive_IT+0x60>)
 8007fca:	4a0f      	ldr	r2, [pc, #60]	; (8008008 <HW_UART_Receive_IT+0x64>)
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	89bb      	ldrh	r3, [r7, #12]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	480b      	ldr	r0, [pc, #44]	; (8008004 <HW_UART_Receive_IT+0x60>)
 8007fd6:	f005 ffad 	bl	800df34 <HAL_UART_Receive_IT>
            break;
 8007fda:	e00c      	b.n	8007ff6 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8007fdc:	4a0b      	ldr	r2, [pc, #44]	; (800800c <HW_UART_Receive_IT+0x68>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <HW_UART_Receive_IT+0x6c>)
 8007fe4:	4a0b      	ldr	r2, [pc, #44]	; (8008014 <HW_UART_Receive_IT+0x70>)
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	89bb      	ldrh	r3, [r7, #12]
 8007fea:	461a      	mov	r2, r3
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	4808      	ldr	r0, [pc, #32]	; (8008010 <HW_UART_Receive_IT+0x6c>)
 8007ff0:	f005 ffa0 	bl	800df34 <HAL_UART_Receive_IT>
            break;
 8007ff4:	bf00      	nop
    }

    return;
 8007ff6:	bf00      	nop
}
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000278 	.word	0x20000278
 8008004:	20000358 	.word	0x20000358
 8008008:	40013800 	.word	0x40013800
 800800c:	20000280 	.word	0x20000280
 8008010:	200002c4 	.word	0x200002c4
 8008014:	40008000 	.word	0x40008000

08008018 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607b      	str	r3, [r7, #4]
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]
 8008026:	4613      	mov	r3, r2
 8008028:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800802e:	2300      	movs	r3, #0
 8008030:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <HW_UART_Transmit_DMA+0x26>
 8008038:	2b02      	cmp	r3, #2
 800803a:	d00f      	beq.n	800805c <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800803c:	e01d      	b.n	800807a <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800803e:	4a1f      	ldr	r2, [pc, #124]	; (80080bc <HW_UART_Transmit_DMA+0xa4>)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8008044:	4b1e      	ldr	r3, [pc, #120]	; (80080c0 <HW_UART_Transmit_DMA+0xa8>)
 8008046:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <HW_UART_Transmit_DMA+0xac>)
 8008048:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800804a:	89bb      	ldrh	r3, [r7, #12]
 800804c:	461a      	mov	r2, r3
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	481b      	ldr	r0, [pc, #108]	; (80080c0 <HW_UART_Transmit_DMA+0xa8>)
 8008052:	f005 ffbb 	bl	800dfcc <HAL_UART_Transmit_DMA>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
            break;
 800805a:	e00e      	b.n	800807a <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 800805c:	4a1a      	ldr	r2, [pc, #104]	; (80080c8 <HW_UART_Transmit_DMA+0xb0>)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8008062:	4b1a      	ldr	r3, [pc, #104]	; (80080cc <HW_UART_Transmit_DMA+0xb4>)
 8008064:	4a1a      	ldr	r2, [pc, #104]	; (80080d0 <HW_UART_Transmit_DMA+0xb8>)
 8008066:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8008068:	89bb      	ldrh	r3, [r7, #12]
 800806a:	461a      	mov	r2, r3
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	4817      	ldr	r0, [pc, #92]	; (80080cc <HW_UART_Transmit_DMA+0xb4>)
 8008070:	f005 ffac 	bl	800dfcc <HAL_UART_Transmit_DMA>
 8008074:	4603      	mov	r3, r0
 8008076:	75fb      	strb	r3, [r7, #23]
            break;
 8008078:	bf00      	nop
    }

    switch (hal_status)
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	2b03      	cmp	r3, #3
 800807e:	d817      	bhi.n	80080b0 <HW_UART_Transmit_DMA+0x98>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <HW_UART_Transmit_DMA+0x70>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	08008099 	.word	0x08008099
 800808c:	0800809f 	.word	0x0800809f
 8008090:	080080a5 	.word	0x080080a5
 8008094:	080080ab 	.word	0x080080ab
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8008098:	2300      	movs	r3, #0
 800809a:	75bb      	strb	r3, [r7, #22]
            break;
 800809c:	e009      	b.n	80080b2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800809e:	2301      	movs	r3, #1
 80080a0:	75bb      	strb	r3, [r7, #22]
            break;
 80080a2:	e006      	b.n	80080b2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80080a4:	2302      	movs	r3, #2
 80080a6:	75bb      	strb	r3, [r7, #22]
            break;
 80080a8:	e003      	b.n	80080b2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80080aa:	2303      	movs	r3, #3
 80080ac:	75bb      	strb	r3, [r7, #22]
            break;
 80080ae:	e000      	b.n	80080b2 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80080b0:	bf00      	nop
    }

    return hw_status;
 80080b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	2000027c 	.word	0x2000027c
 80080c0:	20000358 	.word	0x20000358
 80080c4:	40013800 	.word	0x40013800
 80080c8:	20000284 	.word	0x20000284
 80080cc:	200002c4 	.word	0x200002c4
 80080d0:	40008000 	.word	0x40008000

080080d4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a0f      	ldr	r2, [pc, #60]	; (8008120 <HAL_UART_RxCpltCallback+0x4c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00a      	beq.n	80080fc <HAL_UART_RxCpltCallback+0x28>
 80080e6:	4a0f      	ldr	r2, [pc, #60]	; (8008124 <HAL_UART_RxCpltCallback+0x50>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d10f      	bne.n	800810c <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80080ec:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <HAL_UART_RxCpltCallback+0x54>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00d      	beq.n	8008110 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 80080f4:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <HAL_UART_RxCpltCallback+0x54>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4798      	blx	r3
            }
            break;
 80080fa:	e009      	b.n	8008110 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 80080fc:	4b0b      	ldr	r3, [pc, #44]	; (800812c <HAL_UART_RxCpltCallback+0x58>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d007      	beq.n	8008114 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8008104:	4b09      	ldr	r3, [pc, #36]	; (800812c <HAL_UART_RxCpltCallback+0x58>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4798      	blx	r3
            }
            break;
 800810a:	e003      	b.n	8008114 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 800810c:	bf00      	nop
 800810e:	e002      	b.n	8008116 <HAL_UART_RxCpltCallback+0x42>
            break;
 8008110:	bf00      	nop
 8008112:	e000      	b.n	8008116 <HAL_UART_RxCpltCallback+0x42>
            break;
 8008114:	bf00      	nop
    }

    return;
 8008116:	bf00      	nop
}
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	40008000 	.word	0x40008000
 8008124:	40013800 	.word	0x40013800
 8008128:	20000278 	.word	0x20000278
 800812c:	20000280 	.word	0x20000280

08008130 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a0f      	ldr	r2, [pc, #60]	; (800817c <HAL_UART_TxCpltCallback+0x4c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00a      	beq.n	8008158 <HAL_UART_TxCpltCallback+0x28>
 8008142:	4a0f      	ldr	r2, [pc, #60]	; (8008180 <HAL_UART_TxCpltCallback+0x50>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d10f      	bne.n	8008168 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8008148:	4b0e      	ldr	r3, [pc, #56]	; (8008184 <HAL_UART_TxCpltCallback+0x54>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00d      	beq.n	800816c <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8008150:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <HAL_UART_TxCpltCallback+0x54>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4798      	blx	r3
            }
            break;
 8008156:	e009      	b.n	800816c <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8008158:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <HAL_UART_TxCpltCallback+0x58>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <HAL_UART_TxCpltCallback+0x58>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4798      	blx	r3
            }
            break;
 8008166:	e003      	b.n	8008170 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8008168:	bf00      	nop
 800816a:	e002      	b.n	8008172 <HAL_UART_TxCpltCallback+0x42>
            break;
 800816c:	bf00      	nop
 800816e:	e000      	b.n	8008172 <HAL_UART_TxCpltCallback+0x42>
            break;
 8008170:	bf00      	nop
    }

    return;
 8008172:	bf00      	nop
}
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40008000 	.word	0x40008000
 8008180:	40013800 	.word	0x40013800
 8008184:	2000027c 	.word	0x2000027c
 8008188:	20000284 	.word	0x20000284

0800818c <LL_RCC_LSE_SetDriveCapability>:
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8008194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819c:	f023 0218 	bic.w	r2, r3, #24
 80081a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <LL_AHB1_GRP1_EnableClock>:
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80081c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80081d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4013      	ands	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80081dc:	68fb      	ldr	r3, [r7, #12]
}
 80081de:	bf00      	nop
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <LL_AHB2_GRP1_EnableClock>:
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80081f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4313      	orrs	r3, r2
 8008200:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4013      	ands	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	bf00      	nop
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008220:	f002 fd50 	bl	800acc4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8008224:	f7fe fdcc 	bl	8006dc0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008228:	f000 f836 	bl	8008298 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800822c:	f000 f890 	bl	8008350 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8008230:	f000 f8ae 	bl	8008390 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008234:	f000 f964 	bl	8008500 <MX_GPIO_Init>
  MX_DMA_Init();
 8008238:	f000 f948 	bl	80084cc <MX_DMA_Init>
  MX_RTC_Init();
 800823c:	f000 f912 	bl	8008464 <MX_RTC_Init>
  MX_RF_Init();
 8008240:	f000 f908 	bl	8008454 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APP_DBG("MX_APPE_Init");
 8008244:	4a11      	ldr	r2, [pc, #68]	; (800828c <main+0x70>)
 8008246:	2101      	movs	r1, #1
 8008248:	2000      	movs	r0, #0
 800824a:	f000 fcd1 	bl	8008bf0 <logApplication>
  APP_DBG("\n");
 800824e:	4a10      	ldr	r2, [pc, #64]	; (8008290 <main+0x74>)
 8008250:	2101      	movs	r1, #1
 8008252:	2000      	movs	r0, #0
 8008254:	f000 fccc 	bl	8008bf0 <logApplication>
  APP_DBG("\n");
 8008258:	4a0d      	ldr	r2, [pc, #52]	; (8008290 <main+0x74>)
 800825a:	2101      	movs	r1, #1
 800825c:	2000      	movs	r0, #0
 800825e:	f000 fcc7 	bl	8008bf0 <logApplication>
  MX_APPE_Init();
 8008262:	f7fe fdbb 	bl	8006ddc <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  APP_DBG("\n");
 8008266:	4a0a      	ldr	r2, [pc, #40]	; (8008290 <main+0x74>)
 8008268:	2101      	movs	r1, #1
 800826a:	2000      	movs	r0, #0
 800826c:	f000 fcc0 	bl	8008bf0 <logApplication>
  APP_DBG("\n");
 8008270:	4a07      	ldr	r2, [pc, #28]	; (8008290 <main+0x74>)
 8008272:	2101      	movs	r1, #1
 8008274:	2000      	movs	r0, #0
 8008276:	f000 fcbb 	bl	8008bf0 <logApplication>
  APP_DBG("MX_APPE_Process");
 800827a:	4a06      	ldr	r2, [pc, #24]	; (8008294 <main+0x78>)
 800827c:	2101      	movs	r1, #1
 800827e:	2000      	movs	r0, #0
 8008280:	f000 fcb6 	bl	8008bf0 <logApplication>
  while (1)
  {
    /* USER CODE END WHILE */

	  MX_APPE_Process();
 8008284:	f7fe ff30 	bl	80070e8 <MX_APPE_Process>
 8008288:	e7fc      	b.n	8008284 <main+0x68>
 800828a:	bf00      	nop
 800828c:	08015a84 	.word	0x08015a84
 8008290:	08015a94 	.word	0x08015a94
 8008294:	08015a98 	.word	0x08015a98

08008298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b09a      	sub	sp, #104	; 0x68
 800829c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800829e:	f107 0320 	add.w	r3, r7, #32
 80082a2:	2248      	movs	r2, #72	; 0x48
 80082a4:	2100      	movs	r1, #0
 80082a6:	4618      	mov	r0, r3
 80082a8:	f00c fc08 	bl	8014abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082ac:	1d3b      	adds	r3, r7, #4
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	605a      	str	r2, [r3, #4]
 80082b4:	609a      	str	r2, [r3, #8]
 80082b6:	60da      	str	r2, [r3, #12]
 80082b8:	611a      	str	r2, [r3, #16]
 80082ba:	615a      	str	r2, [r3, #20]
 80082bc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80082be:	f003 fdc3 	bl	800be48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80082c2:	2000      	movs	r0, #0
 80082c4:	f7ff ff62 	bl	800818c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80082c8:	4b20      	ldr	r3, [pc, #128]	; (800834c <SystemClock_Config+0xb4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082d0:	4a1e      	ldr	r2, [pc, #120]	; (800834c <SystemClock_Config+0xb4>)
 80082d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	4b1c      	ldr	r3, [pc, #112]	; (800834c <SystemClock_Config+0xb4>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082e0:	603b      	str	r3, [r7, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80082e4:	2307      	movs	r3, #7
 80082e6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80082e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80082ee:	2301      	movs	r3, #1
 80082f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80082f8:	2340      	movs	r3, #64	; 0x40
 80082fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008300:	f107 0320 	add.w	r3, r7, #32
 8008304:	4618      	mov	r0, r3
 8008306:	f004 f9b1 	bl	800c66c <HAL_RCC_OscConfig>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8008310:	f000 f903 	bl	800851a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8008314:	236f      	movs	r3, #111	; 0x6f
 8008316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8008318:	2302      	movs	r3, #2
 800831a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800831c:	2300      	movs	r3, #0
 800831e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008320:	2300      	movs	r3, #0
 8008322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8008328:	2300      	movs	r3, #0
 800832a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008330:	1d3b      	adds	r3, r7, #4
 8008332:	2101      	movs	r1, #1
 8008334:	4618      	mov	r0, r3
 8008336:	f004 fd0d 	bl	800cd54 <HAL_RCC_ClockConfig>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008340:	f000 f8eb 	bl	800851a <Error_Handler>
  }
}
 8008344:	bf00      	nop
 8008346:	3768      	adds	r7, #104	; 0x68
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	58000400 	.word	0x58000400

08008350 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b094      	sub	sp, #80	; 0x50
 8008354:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008356:	463b      	mov	r3, r7
 8008358:	2250      	movs	r2, #80	; 0x50
 800835a:	2100      	movs	r1, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f00c fbad 	bl	8014abc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8008362:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008366:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8008368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800836c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800836e:	2302      	movs	r3, #2
 8008370:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8008372:	2300      	movs	r3, #0
 8008374:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008376:	463b      	mov	r3, r7
 8008378:	4618      	mov	r0, r3
 800837a:	f005 f928 	bl	800d5ce <HAL_RCCEx_PeriphCLKConfig>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8008384:	f000 f8c9 	bl	800851a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8008388:	bf00      	nop
 800838a:	3750      	adds	r7, #80	; 0x50
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <MX_IPCC_Init+0x20>)
 8008396:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <MX_IPCC_Init+0x24>)
 8008398:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800839a:	4805      	ldr	r0, [pc, #20]	; (80083b0 <MX_IPCC_Init+0x20>)
 800839c:	f003 fcce 	bl	800bd3c <HAL_IPCC_Init>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80083a6:	f000 f8b8 	bl	800851a <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80083aa:	bf00      	nop
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000288 	.word	0x20000288
 80083b4:	58000c00 	.word	0x58000c00

080083b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80083bc:	4b23      	ldr	r3, [pc, #140]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083be:	4a24      	ldr	r2, [pc, #144]	; (8008450 <MX_USART1_UART_Init+0x98>)
 80083c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80083c2:	4b22      	ldr	r3, [pc, #136]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80083ca:	4b20      	ldr	r3, [pc, #128]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80083d0:	4b1e      	ldr	r3, [pc, #120]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80083d6:	4b1d      	ldr	r3, [pc, #116]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083d8:	2200      	movs	r2, #0
 80083da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80083dc:	4b1b      	ldr	r3, [pc, #108]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083de:	220c      	movs	r2, #12
 80083e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083e2:	4b1a      	ldr	r3, [pc, #104]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80083e8:	4b18      	ldr	r3, [pc, #96]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80083ee:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083f0:	4b16      	ldr	r3, [pc, #88]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80083f6:	4b15      	ldr	r3, [pc, #84]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083fc:	4b13      	ldr	r3, [pc, #76]	; (800844c <MX_USART1_UART_Init+0x94>)
 80083fe:	2200      	movs	r2, #0
 8008400:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008402:	4812      	ldr	r0, [pc, #72]	; (800844c <MX_USART1_UART_Init+0x94>)
 8008404:	f005 fd46 	bl	800de94 <HAL_UART_Init>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800840e:	f000 f884 	bl	800851a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008412:	2100      	movs	r1, #0
 8008414:	480d      	ldr	r0, [pc, #52]	; (800844c <MX_USART1_UART_Init+0x94>)
 8008416:	f007 fd92 	bl	800ff3e <HAL_UARTEx_SetTxFifoThreshold>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8008420:	f000 f87b 	bl	800851a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008424:	2100      	movs	r1, #0
 8008426:	4809      	ldr	r0, [pc, #36]	; (800844c <MX_USART1_UART_Init+0x94>)
 8008428:	f007 fdc7 	bl	800ffba <HAL_UARTEx_SetRxFifoThreshold>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8008432:	f000 f872 	bl	800851a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008436:	4805      	ldr	r0, [pc, #20]	; (800844c <MX_USART1_UART_Init+0x94>)
 8008438:	f007 fd48 	bl	800fecc <HAL_UARTEx_DisableFifoMode>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8008442:	f000 f86a 	bl	800851a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008446:	bf00      	nop
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000358 	.word	0x20000358
 8008450:	40013800 	.word	0x40013800

08008454 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8008458:	bf00      	nop
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008468:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <MX_RTC_Init+0x60>)
 800846a:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <MX_RTC_Init+0x64>)
 800846c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <MX_RTC_Init+0x60>)
 8008470:	2200      	movs	r2, #0
 8008472:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8008474:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <MX_RTC_Init+0x60>)
 8008476:	220f      	movs	r2, #15
 8008478:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800847a:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <MX_RTC_Init+0x60>)
 800847c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008480:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008482:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <MX_RTC_Init+0x60>)
 8008484:	2200      	movs	r2, #0
 8008486:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008488:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <MX_RTC_Init+0x60>)
 800848a:	2200      	movs	r2, #0
 800848c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800848e:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <MX_RTC_Init+0x60>)
 8008490:	2200      	movs	r2, #0
 8008492:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008494:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <MX_RTC_Init+0x60>)
 8008496:	2200      	movs	r2, #0
 8008498:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800849a:	480a      	ldr	r0, [pc, #40]	; (80084c4 <MX_RTC_Init+0x60>)
 800849c:	f005 fb1e 	bl	800dadc <HAL_RTC_Init>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80084a6:	f000 f838 	bl	800851a <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	4805      	ldr	r0, [pc, #20]	; (80084c4 <MX_RTC_Init+0x60>)
 80084b0:	f005 fc14 	bl	800dcdc <HAL_RTCEx_SetWakeUpTimer_IT>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80084ba:	f000 f82e 	bl	800851a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	200004ac 	.word	0x200004ac
 80084c8:	40002800 	.word	0x40002800

080084cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80084d0:	2004      	movs	r0, #4
 80084d2:	f7ff fe71 	bl	80081b8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80084d6:	2001      	movs	r0, #1
 80084d8:	f7ff fe6e 	bl	80081b8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80084dc:	2200      	movs	r2, #0
 80084de:	2100      	movs	r1, #0
 80084e0:	200b      	movs	r0, #11
 80084e2:	f002 fdd8 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80084e6:	200b      	movs	r0, #11
 80084e8:	f002 fdef 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80084ec:	2200      	movs	r2, #0
 80084ee:	2100      	movs	r1, #0
 80084f0:	200c      	movs	r0, #12
 80084f2:	f002 fdd0 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80084f6:	200c      	movs	r0, #12
 80084f8:	f002 fde7 	bl	800b0ca <HAL_NVIC_EnableIRQ>

}
 80084fc:	bf00      	nop
 80084fe:	bd80      	pop	{r7, pc}

08008500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008504:	2004      	movs	r0, #4
 8008506:	f7ff fe70 	bl	80081ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800850a:	2001      	movs	r0, #1
 800850c:	f7ff fe6d 	bl	80081ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008510:	2002      	movs	r0, #2
 8008512:	f7ff fe6a 	bl	80081ea <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008516:	bf00      	nop
 8008518:	bd80      	pop	{r7, pc}

0800851a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800851a:	b480      	push	{r7}
 800851c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800851e:	b672      	cpsid	i
}
 8008520:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008522:	e7fe      	b.n	8008522 <Error_Handler+0x8>

08008524 <LL_RCC_SetRTCClockSource>:
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800852c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <LL_RCC_EnableRTC>:
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8008554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008568:	bf00      	nop
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <LL_AHB2_GRP1_EnableClock>:
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800857a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800857e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4313      	orrs	r3, r2
 8008588:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800858a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800858e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4013      	ands	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008596:	68fb      	ldr	r3, [r7, #12]
}
 8008598:	bf00      	nop
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <LL_AHB3_GRP1_EnableClock>:
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80085ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80085bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4013      	ands	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80085c8:	68fb      	ldr	r3, [r7, #12]
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80085de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80085ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4013      	ands	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	bf00      	nop
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8008610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008614:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4313      	orrs	r3, r2
 800861e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8008620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008624:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4013      	ands	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800862c:	68fb      	ldr	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8008642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008646:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4313      	orrs	r3, r2
 8008650:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008656:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4013      	ands	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800865e:	68fb      	ldr	r3, [r7, #12]
}
 8008660:	bf00      	nop
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8008670:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008674:	f7ff ff96 	bl	80085a4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8008678:	2200      	movs	r2, #0
 800867a:	2100      	movs	r1, #0
 800867c:	2001      	movs	r0, #1
 800867e:	f002 fd0a 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8008682:	2001      	movs	r0, #1
 8008684:	f002 fd21 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8008688:	2200      	movs	r2, #0
 800868a:	2100      	movs	r1, #0
 800868c:	2004      	movs	r0, #4
 800868e:	f002 fd02 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8008692:	2004      	movs	r0, #4
 8008694:	f002 fd19 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8008698:	2200      	movs	r2, #0
 800869a:	2100      	movs	r1, #0
 800869c:	2005      	movs	r0, #5
 800869e:	f002 fcfa 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80086a2:	2005      	movs	r0, #5
 80086a4:	f002 fd11 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	2015      	movs	r0, #21
 80086ae:	f002 fcf2 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 80086b2:	2015      	movs	r0, #21
 80086b4:	f002 fd09 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 80086b8:	2200      	movs	r2, #0
 80086ba:	2100      	movs	r1, #0
 80086bc:	202b      	movs	r0, #43	; 0x2b
 80086be:	f002 fcea 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 80086c2:	202b      	movs	r0, #43	; 0x2b
 80086c4:	f002 fd01 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80086c8:	2200      	movs	r2, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	202e      	movs	r0, #46	; 0x2e
 80086ce:	f002 fce2 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80086d2:	202e      	movs	r0, #46	; 0x2e
 80086d4:	f002 fcf9 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80086d8:	2200      	movs	r2, #0
 80086da:	2100      	movs	r1, #0
 80086dc:	2036      	movs	r0, #54	; 0x36
 80086de:	f002 fcda 	bl	800b096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80086e2:	2036      	movs	r0, #54	; 0x36
 80086e4:	f002 fcf1 	bl	800b0ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80086e8:	bf00      	nop
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a0d      	ldr	r2, [pc, #52]	; (8008730 <HAL_IPCC_MspInit+0x44>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d113      	bne.n	8008726 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80086fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008702:	f7ff ff4f 	bl	80085a4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8008706:	2200      	movs	r2, #0
 8008708:	2100      	movs	r1, #0
 800870a:	202c      	movs	r0, #44	; 0x2c
 800870c:	f002 fcc3 	bl	800b096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008710:	202c      	movs	r0, #44	; 0x2c
 8008712:	f002 fcda 	bl	800b0ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8008716:	2200      	movs	r2, #0
 8008718:	2100      	movs	r1, #0
 800871a:	202d      	movs	r0, #45	; 0x2d
 800871c:	f002 fcbb 	bl	800b096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008720:	202d      	movs	r0, #45	; 0x2d
 8008722:	f002 fcd2 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	58000c00 	.word	0x58000c00

08008734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b09c      	sub	sp, #112	; 0x70
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800873c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	605a      	str	r2, [r3, #4]
 8008746:	609a      	str	r2, [r3, #8]
 8008748:	60da      	str	r2, [r3, #12]
 800874a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	2250      	movs	r2, #80	; 0x50
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f00c f9b1 	bl	8014abc <memset>
  if(huart->Instance==LPUART1)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a67      	ldr	r2, [pc, #412]	; (80088fc <HAL_UART_MspInit+0x1c8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d156      	bne.n	8008812 <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008764:	2302      	movs	r3, #2
 8008766:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008768:	2300      	movs	r3, #0
 800876a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800876c:	f107 030c 	add.w	r3, r7, #12
 8008770:	4618      	mov	r0, r3
 8008772:	f004 ff2c 	bl	800d5ce <HAL_RCCEx_PeriphCLKConfig>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800877c:	f7ff fecd 	bl	800851a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8008780:	2001      	movs	r0, #1
 8008782:	f7ff ff41 	bl	8008608 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008786:	2001      	movs	r0, #1
 8008788:	f7ff fef3 	bl	8008572 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800878c:	230c      	movs	r3, #12
 800878e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008790:	2302      	movs	r3, #2
 8008792:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008794:	2300      	movs	r3, #0
 8008796:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008798:	2300      	movs	r3, #0
 800879a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800879c:	2308      	movs	r3, #8
 800879e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80087a4:	4619      	mov	r1, r3
 80087a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087aa:	f003 f8e9 	bl	800b980 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80087ae:	4b54      	ldr	r3, [pc, #336]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087b0:	4a54      	ldr	r2, [pc, #336]	; (8008904 <HAL_UART_MspInit+0x1d0>)
 80087b2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80087b4:	4b52      	ldr	r3, [pc, #328]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087b6:	2211      	movs	r2, #17
 80087b8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80087ba:	4b51      	ldr	r3, [pc, #324]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087bc:	2210      	movs	r2, #16
 80087be:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087c0:	4b4f      	ldr	r3, [pc, #316]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80087c6:	4b4e      	ldr	r3, [pc, #312]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087c8:	2280      	movs	r2, #128	; 0x80
 80087ca:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087cc:	4b4c      	ldr	r3, [pc, #304]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80087d2:	4b4b      	ldr	r3, [pc, #300]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80087d8:	4b49      	ldr	r3, [pc, #292]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087da:	2200      	movs	r2, #0
 80087dc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80087de:	4b48      	ldr	r3, [pc, #288]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80087e4:	4846      	ldr	r0, [pc, #280]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087e6:	f002 fcb9 	bl	800b15c <HAL_DMA_Init>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80087f0:	f7ff fe93 	bl	800851a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a42      	ldr	r2, [pc, #264]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80087fa:	4a41      	ldr	r2, [pc, #260]	; (8008900 <HAL_UART_MspInit+0x1cc>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8008800:	2200      	movs	r2, #0
 8008802:	2100      	movs	r1, #0
 8008804:	2025      	movs	r0, #37	; 0x25
 8008806:	f002 fc46 	bl	800b096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800880a:	2025      	movs	r0, #37	; 0x25
 800880c:	f002 fc5d 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008810:	e06f      	b.n	80088f2 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a3c      	ldr	r2, [pc, #240]	; (8008908 <HAL_UART_MspInit+0x1d4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d16a      	bne.n	80088f2 <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800881c:	2301      	movs	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008820:	2300      	movs	r3, #0
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008824:	f107 030c 	add.w	r3, r7, #12
 8008828:	4618      	mov	r0, r3
 800882a:	f004 fed0 	bl	800d5ce <HAL_RCCEx_PeriphCLKConfig>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8008834:	f7ff fe71 	bl	800851a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008838:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800883c:	f7ff fefd 	bl	800863a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008840:	2001      	movs	r0, #1
 8008842:	f7ff fe96 	bl	8008572 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008846:	2002      	movs	r0, #2
 8008848:	f7ff fe93 	bl	8008572 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800884c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008850:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008852:	2302      	movs	r3, #2
 8008854:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008856:	2300      	movs	r3, #0
 8008858:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800885a:	2300      	movs	r3, #0
 800885c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800885e:	2307      	movs	r3, #7
 8008860:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008862:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008866:	4619      	mov	r1, r3
 8008868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800886c:	f003 f888 	bl	800b980 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008870:	23c0      	movs	r3, #192	; 0xc0
 8008872:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008874:	2302      	movs	r3, #2
 8008876:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008878:	2300      	movs	r3, #0
 800887a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800887c:	2300      	movs	r3, #0
 800887e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008880:	2307      	movs	r3, #7
 8008882:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008884:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008888:	4619      	mov	r1, r3
 800888a:	4820      	ldr	r0, [pc, #128]	; (800890c <HAL_UART_MspInit+0x1d8>)
 800888c:	f003 f878 	bl	800b980 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8008890:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 8008892:	4a20      	ldr	r2, [pc, #128]	; (8008914 <HAL_UART_MspInit+0x1e0>)
 8008894:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8008896:	4b1e      	ldr	r3, [pc, #120]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 8008898:	220f      	movs	r2, #15
 800889a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800889c:	4b1c      	ldr	r3, [pc, #112]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 800889e:	2210      	movs	r2, #16
 80088a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088a2:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80088a8:	4b19      	ldr	r3, [pc, #100]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088aa:	2280      	movs	r2, #128	; 0x80
 80088ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80088ae:	4b18      	ldr	r3, [pc, #96]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80088b4:	4b16      	ldr	r3, [pc, #88]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80088ba:	4b15      	ldr	r3, [pc, #84]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088bc:	2200      	movs	r2, #0
 80088be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80088c0:	4b13      	ldr	r3, [pc, #76]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80088c6:	4812      	ldr	r0, [pc, #72]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088c8:	f002 fc48 	bl	800b15c <HAL_DMA_Init>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 80088d2:	f7ff fe22 	bl	800851a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a0d      	ldr	r2, [pc, #52]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088da:	67da      	str	r2, [r3, #124]	; 0x7c
 80088dc:	4a0c      	ldr	r2, [pc, #48]	; (8008910 <HAL_UART_MspInit+0x1dc>)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80088e2:	2200      	movs	r2, #0
 80088e4:	2100      	movs	r1, #0
 80088e6:	2024      	movs	r0, #36	; 0x24
 80088e8:	f002 fbd5 	bl	800b096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80088ec:	2024      	movs	r0, #36	; 0x24
 80088ee:	f002 fbec 	bl	800b0ca <HAL_NVIC_EnableIRQ>
}
 80088f2:	bf00      	nop
 80088f4:	3770      	adds	r7, #112	; 0x70
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	40008000 	.word	0x40008000
 8008900:	200003ec 	.word	0x200003ec
 8008904:	40020008 	.word	0x40020008
 8008908:	40013800 	.word	0x40013800
 800890c:	48000400 	.word	0x48000400
 8008910:	2000044c 	.word	0x2000044c
 8008914:	4002001c 	.word	0x4002001c

08008918 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b096      	sub	sp, #88	; 0x58
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008920:	f107 0308 	add.w	r3, r7, #8
 8008924:	2250      	movs	r2, #80	; 0x50
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f00c f8c7 	bl	8014abc <memset>
  if(hrtc->Instance==RTC)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a19      	ldr	r2, [pc, #100]	; (8008998 <HAL_RTC_MspInit+0x80>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d12b      	bne.n	8008990 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    /* Enable access to the RTC registers */
    HAL_PWR_EnableBkUpAccess(); 
 8008938:	f003 fa86 	bl	800be48 <HAL_PWR_EnableBkUpAccess>

    /*
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800893c:	f003 fa84 	bl	800be48 <HAL_PWR_EnableBkUpAccess>

    /* Select LSE as RTC Input */
    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); 
 8008940:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008944:	f7ff fdee 	bl	8008524 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800894c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800894e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008952:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008954:	f107 0308 	add.w	r3, r7, #8
 8008958:	4618      	mov	r0, r3
 800895a:	f004 fe38 	bl	800d5ce <HAL_RCCEx_PeriphCLKConfig>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8008964:	f7ff fdd9 	bl	800851a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008968:	f7ff fdf2 	bl	8008550 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800896c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008970:	f7ff fe31 	bl	80085d6 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8008974:	2200      	movs	r2, #0
 8008976:	2100      	movs	r1, #0
 8008978:	2003      	movs	r0, #3
 800897a:	f002 fb8c 	bl	800b096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800897e:	2003      	movs	r0, #3
 8008980:	f002 fba3 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 8008984:	4b04      	ldr	r3, [pc, #16]	; (8008998 <HAL_RTC_MspInit+0x80>)
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	4a03      	ldr	r2, [pc, #12]	; (8008998 <HAL_RTC_MspInit+0x80>)
 800898a:	f023 0307 	bic.w	r3, r3, #7
 800898e:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008990:	bf00      	nop
 8008992:	3758      	adds	r7, #88	; 0x58
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40002800 	.word	0x40002800

0800899c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80089a0:	e7fe      	b.n	80089a0 <NMI_Handler+0x4>

080089a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089a2:	b480      	push	{r7}
 80089a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089a6:	e7fe      	b.n	80089a6 <HardFault_Handler+0x4>

080089a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80089ac:	e7fe      	b.n	80089ac <MemManage_Handler+0x4>

080089ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80089ae:	b480      	push	{r7}
 80089b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80089b2:	e7fe      	b.n	80089b2 <BusFault_Handler+0x4>

080089b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80089b4:	b480      	push	{r7}
 80089b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80089b8:	e7fe      	b.n	80089b8 <UsageFault_Handler+0x4>

080089ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80089ba:	b480      	push	{r7}
 80089bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80089be:	bf00      	nop
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80089c8:	b480      	push	{r7}
 80089ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80089cc:	bf00      	nop
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089d6:	b480      	push	{r7}
 80089d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089da:	bf00      	nop
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089e8:	f002 f9c6 	bl	800ad78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089ec:	bf00      	nop
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80089f4:	f003 fa8e 	bl	800bf14 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80089f8:	bf00      	nop
 80089fa:	bd80      	pop	{r7, pc}

080089fc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8008a00:	f7ff f816 	bl	8007a30 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8008a04:	bf00      	nop
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8008a0c:	f002 fefa 	bl	800b804 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8008a10:	bf00      	nop
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8008a18:	bf00      	nop
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
	...

08008a24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8008a28:	4802      	ldr	r0, [pc, #8]	; (8008a34 <DMA1_Channel1_IRQHandler+0x10>)
 8008a2a:	f002 fd78 	bl	800b51e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008a2e:	bf00      	nop
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200003ec 	.word	0x200003ec

08008a38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008a3c:	4802      	ldr	r0, [pc, #8]	; (8008a48 <DMA1_Channel2_IRQHandler+0x10>)
 8008a3e:	f002 fd6e 	bl	800b51e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008a42:	bf00      	nop
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	2000044c 	.word	0x2000044c

08008a4c <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8008a50:	bf00      	nop
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008a60:	4802      	ldr	r0, [pc, #8]	; (8008a6c <USART1_IRQHandler+0x10>)
 8008a62:	f005 fb33 	bl	800e0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008a66:	bf00      	nop
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000358 	.word	0x20000358

08008a70 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <LPUART1_IRQHandler+0x10>)
 8008a76:	f005 fb29 	bl	800e0cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8008a7a:	bf00      	nop
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	200002c4 	.word	0x200002c4

08008a84 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8008a88:	bf00      	nop
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8008a96:	f001 fdb5 	bl	800a604 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8008aa2:	f001 fe05 	bl	800a6b0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8008aa6:	bf00      	nop
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8008aae:	f003 f921 	bl	800bcf4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8008ab2:	bf00      	nop
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8008aba:	bf00      	nop
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <EXTI4_IRQHandler>:
  * @brief  This function handles External External line 4 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8008ac8:	2010      	movs	r0, #16
 8008aca:	f003 f8fb 	bl	800bcc4 <HAL_GPIO_EXTI_IRQHandler>
}
 8008ace:	bf00      	nop
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <EXTI0_IRQHandler>:
  * @brief  This function handles External External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8008ad6:	2001      	movs	r0, #1
 8008ad8:	f003 f8f4 	bl	800bcc4 <HAL_GPIO_EXTI_IRQHandler>
}
 8008adc:	bf00      	nop
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <EXTI1_IRQHandler>:
  * @brief  This function handles External External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8008ae4:	2002      	movs	r0, #2
 8008ae6:	f003 f8ed 	bl	800bcc4 <HAL_GPIO_EXTI_IRQHandler>
}
 8008aea:	bf00      	nop
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8008af0:	b5b0      	push	{r4, r5, r7, lr}
 8008af2:	b08a      	sub	sp, #40	; 0x28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	807b      	strh	r3, [r7, #2]
 8008afc:	4613      	mov	r3, r2
 8008afe:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8008b00:	787b      	ldrb	r3, [r7, #1]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d002      	beq.n	8008b0c <logRegion+0x1c>
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d00a      	beq.n	8008b20 <logRegion+0x30>
 8008b0a:	e012      	b.n	8008b32 <logRegion+0x42>
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8008b0c:	f107 0308 	add.w	r3, r7, #8
 8008b10:	4a13      	ldr	r2, [pc, #76]	; (8008b60 <logRegion+0x70>)
 8008b12:	461c      	mov	r4, r3
 8008b14:	4615      	mov	r5, r2
 8008b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	7023      	strb	r3, [r4, #0]
      break;
 8008b1e:	e011      	b.n	8008b44 <logRegion+0x54>
    case APPLI_LOG_REGION_ZIGBEE_API:
      strcpy(logRegionString, "[M4 ZIGBEE API]");
 8008b20:	f107 0308 	add.w	r3, r7, #8
 8008b24:	4a0f      	ldr	r2, [pc, #60]	; (8008b64 <logRegion+0x74>)
 8008b26:	461c      	mov	r4, r3
 8008b28:	4613      	mov	r3, r2
 8008b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8008b30:	e008      	b.n	8008b44 <logRegion+0x54>
    default:
      strcpy(logRegionString, "[M4]");
 8008b32:	f107 0308 	add.w	r3, r7, #8
 8008b36:	4a0c      	ldr	r2, [pc, #48]	; (8008b68 <logRegion+0x78>)
 8008b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b3c:	6018      	str	r0, [r3, #0]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	7019      	strb	r1, [r3, #0]
      break;
 8008b42:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8008b44:	8879      	ldrh	r1, [r7, #2]
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	4a08      	ldr	r2, [pc, #32]	; (8008b6c <logRegion+0x7c>)
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f00b fee5 	bl	801491c <sniprintf>
 8008b52:	4603      	mov	r3, r0
 8008b54:	b29b      	uxth	r3, r3
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3728      	adds	r7, #40	; 0x28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	08015aa8 	.word	0x08015aa8
 8008b64:	08015abc 	.word	0x08015abc
 8008b68:	08015acc 	.word	0x08015acc
 8008b6c:	08015ad4 	.word	0x08015ad4

08008b70 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d00a      	beq.n	8008b96 <levelToString+0x26>
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	dc0a      	bgt.n	8008b9a <levelToString+0x2a>
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d002      	beq.n	8008b8e <levelToString+0x1e>
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d002      	beq.n	8008b92 <levelToString+0x22>
 8008b8c:	e005      	b.n	8008b9a <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8008b8e:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <levelToString+0x38>)
 8008b90:	e004      	b.n	8008b9c <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8008b92:	4b06      	ldr	r3, [pc, #24]	; (8008bac <levelToString+0x3c>)
 8008b94:	e002      	b.n	8008b9c <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8008b96:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <levelToString+0x40>)
 8008b98:	e000      	b.n	8008b9c <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8008b9a:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <levelToString+0x44>)
  }
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	08015ad8 	.word	0x08015ad8
 8008bac:	08015ae0 	.word	0x08015ae0
 8008bb0:	08015ae8 	.word	0x08015ae8
 8008bb4:	08015af0 	.word	0x08015af0

08008bb8 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8008bb8:	b590      	push	{r4, r7, lr}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	807b      	strh	r3, [r7, #2]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8008bc8:	887c      	ldrh	r4, [r7, #2]
 8008bca:	787b      	ldrb	r3, [r7, #1]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff ffcf 	bl	8008b70 <levelToString>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	4a05      	ldr	r2, [pc, #20]	; (8008bec <logLevel+0x34>)
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f00b fe9f 	bl	801491c <sniprintf>
 8008bde:	4603      	mov	r3, r0
 8008be0:	b29b      	uxth	r3, r3
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd90      	pop	{r4, r7, pc}
 8008bea:	bf00      	nop
 8008bec:	08015af8 	.word	0x08015af8

08008bf0 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8008bf0:	b40c      	push	{r2, r3}
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b0c4      	sub	sp, #272	; 0x110
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bfe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c08:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8008c0c:	460a      	mov	r2, r1
 8008c0e:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008c16:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008c1a:	f107 020c 	add.w	r2, r7, #12
 8008c1e:	18d0      	adds	r0, r2, r3
 8008c20:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008c24:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008c28:	b299      	uxth	r1, r3
 8008c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c2e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	f7ff ffbf 	bl	8008bb8 <logLevel>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008c42:	4413      	add	r3, r2
 8008c44:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008c48:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008c4c:	f107 020c 	add.w	r2, r7, #12
 8008c50:	18d0      	adds	r0, r2, r3
 8008c52:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008c56:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008c5a:	b299      	uxth	r1, r3
 8008c5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c60:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f7ff ff42 	bl	8008af0 <logRegion>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008c74:	4413      	add	r3, r2
 8008c76:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8008c7a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8008c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c86:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008c88:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008c8c:	f107 020c 	add.w	r2, r7, #12
 8008c90:	18d0      	adds	r0, r2, r3
 8008c92:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008c96:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8008c9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008ca8:	f00b fefa 	bl	8014aa0 <vsniprintf>
 8008cac:	4603      	mov	r3, r0
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8008cba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cce:	210d      	movs	r1, #13
 8008cd0:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8008cd2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce6:	210a      	movs	r1, #10
 8008ce8:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8008cea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cfe:	2100      	movs	r1, #0
 8008d00:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 8008d02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d06:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d805      	bhi.n	8008d1c <logApplication+0x12c>
  {
    printf("%s", logString);
 8008d10:	f107 030c 	add.w	r3, r7, #12
 8008d14:	4619      	mov	r1, r3
 8008d16:	4805      	ldr	r0, [pc, #20]	; (8008d2c <logApplication+0x13c>)
 8008d18:	f00b fdee 	bl	80148f8 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8008d1c:	bf00      	nop
 8008d1e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008d22:	46bd      	mov	sp, r7
 8008d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d28:	b002      	add	sp, #8
 8008d2a:	4770      	bx	lr
 8008d2c:	08015af8 	.word	0x08015af8

08008d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  return 1;
 8008d34:	2301      	movs	r3, #1
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <_kill>:

int _kill(int pid, int sig)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008d4a:	f00b ff23 	bl	8014b94 <__errno>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2216      	movs	r2, #22
 8008d52:	601a      	str	r2, [r3, #0]
  return -1;
 8008d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <_exit>:

void _exit (int status)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008d68:	f04f 31ff 	mov.w	r1, #4294967295
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff ffe7 	bl	8008d40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008d72:	e7fe      	b.n	8008d72 <_exit+0x12>

08008d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	e00a      	b.n	8008d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008d86:	f3af 8000 	nop.w
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	60ba      	str	r2, [r7, #8]
 8008d92:	b2ca      	uxtb	r2, r1
 8008d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	dbf0      	blt.n	8008d86 <_read+0x12>
  }

  return len;
 8008da4:	687b      	ldr	r3, [r7, #4]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <_close>:
  }
  return len;
}

int _close(int file)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b083      	sub	sp, #12
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008dd6:	605a      	str	r2, [r3, #4]
  return 0;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <_isatty>:

int _isatty(int file)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008dee:	2301      	movs	r3, #1
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
	...

08008e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e20:	4a14      	ldr	r2, [pc, #80]	; (8008e74 <_sbrk+0x5c>)
 8008e22:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <_sbrk+0x60>)
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e2c:	4b13      	ldr	r3, [pc, #76]	; (8008e7c <_sbrk+0x64>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e34:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <_sbrk+0x64>)
 8008e36:	4a12      	ldr	r2, [pc, #72]	; (8008e80 <_sbrk+0x68>)
 8008e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e3a:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <_sbrk+0x64>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4413      	add	r3, r2
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d207      	bcs.n	8008e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e48:	f00b fea4 	bl	8014b94 <__errno>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	220c      	movs	r2, #12
 8008e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295
 8008e56:	e009      	b.n	8008e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e58:	4b08      	ldr	r3, [pc, #32]	; (8008e7c <_sbrk+0x64>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e5e:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <_sbrk+0x64>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4413      	add	r3, r2
 8008e66:	4a05      	ldr	r2, [pc, #20]	; (8008e7c <_sbrk+0x64>)
 8008e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20030000 	.word	0x20030000
 8008e78:	00001000 	.word	0x00001000
 8008e7c:	200004d0 	.word	0x200004d0
 8008e80:	20001ba0 	.word	0x20001ba0

08008e84 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 8008e8a:	4a34      	ldr	r2, [pc, #208]	; (8008f5c <APP_ZIGBEE_Init+0xd8>)
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f7ff feae 	bl	8008bf0 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 8008e94:	f000 fb14 	bl	80094c0 <APP_ZIGBEE_CheckWirelessFirmwareInfo>
  APP_DBG("after APP_ZIGBEE_CheckWirelessFirmwareInfo()");
 8008e98:	4a31      	ldr	r2, [pc, #196]	; (8008f60 <APP_ZIGBEE_Init+0xdc>)
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f7ff fea7 	bl	8008bf0 <logApplication>


  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 8008ea2:	4830      	ldr	r0, [pc, #192]	; (8008f64 <APP_ZIGBEE_Init+0xe0>)
 8008ea4:	f000 fbc8 	bl	8009638 <APP_ZIGBEE_RegisterCmdBuffer>
  APP_DBG("after APP_ZIGBEE_RegisterCmdBuffer()");
 8008ea8:	4a2f      	ldr	r2, [pc, #188]	; (8008f68 <APP_ZIGBEE_Init+0xe4>)
 8008eaa:	2101      	movs	r1, #1
 8008eac:	2000      	movs	r0, #0
 8008eae:	f7ff fe9f 	bl	8008bf0 <logApplication>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 8008eb2:	f000 fc81 	bl	80097b8 <APP_ZIGBEE_TL_INIT>
  APP_DBG("after APP_ZIGBEE_TL_INIT()");
 8008eb6:	4a2d      	ldr	r2, [pc, #180]	; (8008f6c <APP_ZIGBEE_Init+0xe8>)
 8008eb8:	2101      	movs	r1, #1
 8008eba:	2000      	movs	r0, #0
 8008ebc:	f7ff fe98 	bl	8008bf0 <logApplication>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 8008ec0:	4a2b      	ldr	r2, [pc, #172]	; (8008f70 <APP_ZIGBEE_Init+0xec>)
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	f00b fa67 	bl	8014398 <UTIL_SEQ_RegTask>
  APP_DBG("after APP_ZIGBEE_ProcessNotifyM0ToM4()");
 8008eca:	4a2a      	ldr	r2, [pc, #168]	; (8008f74 <APP_ZIGBEE_Init+0xf0>)
 8008ecc:	2101      	movs	r1, #1
 8008ece:	2000      	movs	r0, #0
 8008ed0:	f7ff fe8e 	bl	8008bf0 <logApplication>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 8008ed4:	4a28      	ldr	r2, [pc, #160]	; (8008f78 <APP_ZIGBEE_Init+0xf4>)
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	2002      	movs	r0, #2
 8008eda:	f00b fa5d 	bl	8014398 <UTIL_SEQ_RegTask>
  APP_DBG("after APP_ZIGBEE_ProcessRequestM0ToM4()");
 8008ede:	4a27      	ldr	r2, [pc, #156]	; (8008f7c <APP_ZIGBEE_Init+0xf8>)
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	f7ff fe84 	bl	8008bf0 <logApplication>
  /* Task associated with network creation process */

  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 8008ee8:	4a25      	ldr	r2, [pc, #148]	; (8008f80 <APP_ZIGBEE_Init+0xfc>)
 8008eea:	2100      	movs	r1, #0
 8008eec:	2004      	movs	r0, #4
 8008eee:	f00b fa53 	bl	8014398 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_mytask_getendpoints, UTIL_SEQ_RFU, APP_ZIGBEE_getendpoints);
 8008ef2:	4a24      	ldr	r2, [pc, #144]	; (8008f84 <APP_ZIGBEE_Init+0x100>)
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	2010      	movs	r0, #16
 8008ef8:	f00b fa4e 	bl	8014398 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_mytask_getclusters, UTIL_SEQ_RFU, APP_ZIGBEE_discoverCluster);
 8008efc:	4a22      	ldr	r2, [pc, #136]	; (8008f88 <APP_ZIGBEE_Init+0x104>)
 8008efe:	2100      	movs	r1, #0
 8008f00:	2020      	movs	r0, #32
 8008f02:	f00b fa49 	bl	8014398 <UTIL_SEQ_RegTask>

  /* Task associated with push button SW1 */
  UTIL_SEQ_RegTask( 1U << CFG_TASK_BUTTON_SW1, UTIL_SEQ_RFU, APP_ZIGBEE_Button1);
 8008f06:	4a21      	ldr	r2, [pc, #132]	; (8008f8c <APP_ZIGBEE_Init+0x108>)
 8008f08:	2100      	movs	r1, #0
 8008f0a:	2040      	movs	r0, #64	; 0x40
 8008f0c:	f00b fa44 	bl	8014398 <UTIL_SEQ_RegTask>

  /* Task associated with push button SW2*/
  UTIL_SEQ_RegTask( 1U << CFG_TASK_BUTTON_SW2, UTIL_SEQ_RFU, APP_ZIGBEE_ReadValue);
 8008f10:	4a1f      	ldr	r2, [pc, #124]	; (8008f90 <APP_ZIGBEE_Init+0x10c>)
 8008f12:	2100      	movs	r1, #0
 8008f14:	2080      	movs	r0, #128	; 0x80
 8008f16:	f00b fa3f 	bl	8014398 <UTIL_SEQ_RegTask>

  /* Task associated with push button SW2*/
  UTIL_SEQ_RegTask( 1U << CFG_TASK_BUTTON_SW3, UTIL_SEQ_RFU, APP_ZIGBEE_Button3);
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <APP_ZIGBEE_Init+0x110>)
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008f22:	f00b fa39 	bl	8014398 <UTIL_SEQ_RegTask>
  APP_DBG("after register tasks");
 8008f26:	4a1c      	ldr	r2, [pc, #112]	; (8008f98 <APP_ZIGBEE_Init+0x114>)
 8008f28:	2101      	movs	r1, #1
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f7ff fe60 	bl	8008bf0 <logApplication>

  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 8008f30:	f007 f9ae 	bl	8010290 <SHCI_C2_ZIGBEE_Init>
 8008f34:	4603      	mov	r3, r0
 8008f36:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  APP_DBG("ZigbeeInitStatus, %d", ZigbeeInitStatus);
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	4a18      	ldr	r2, [pc, #96]	; (8008f9c <APP_ZIGBEE_Init+0x118>)
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	2000      	movs	r0, #0
 8008f40:	f7ff fe56 	bl	8008bf0 <logApplication>
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 8008f44:	f000 f830 	bl	8008fa8 <APP_ZIGBEE_StackLayersInit>
  APP_DBG("after APP_ZIGBEE_StackLayersInit");
 8008f48:	4a15      	ldr	r2, [pc, #84]	; (8008fa0 <APP_ZIGBEE_Init+0x11c>)
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f7ff fe4f 	bl	8008bf0 <logApplication>
  //zigbee_app_info.addr = ZbShortAddress(zigbee_app_info.zb);

  //APP_DBG("zigbee_app_info.panID after nwkform 0x%02x",zigbee_app_info.addr);


}
 8008f52:	bf00      	nop
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	08015afc 	.word	0x08015afc
 8008f60:	08015b0c 	.word	0x08015b0c
 8008f64:	20030838 	.word	0x20030838
 8008f68:	08015b3c 	.word	0x08015b3c
 8008f6c:	08015b64 	.word	0x08015b64
 8008f70:	080097f9 	.word	0x080097f9
 8008f74:	08015b80 	.word	0x08015b80
 8008f78:	08009839 	.word	0x08009839
 8008f7c:	08015ba8 	.word	0x08015ba8
 8008f80:	08009145 	.word	0x08009145
 8008f84:	08009a19 	.word	0x08009a19
 8008f88:	08009c1d 	.word	0x08009c1d
 8008f8c:	0800a389 	.word	0x0800a389
 8008f90:	08009f89 	.word	0x08009f89
 8008f94:	0800a399 	.word	0x0800a399
 8008f98:	08015bd0 	.word	0x08015bd0
 8008f9c:	08015be8 	.word	0x08015be8
 8008fa0:	08015c00 	.word	0x08015c00
 8008fa4:	00000000 	.word	0x00000000

08008fa8 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  APP_DBG("internal APP_ZIGBEE_StackLayersInit");
 8008fac:	4a36      	ldr	r2, [pc, #216]	; (8009088 <APP_ZIGBEE_StackLayersInit+0xe0>)
 8008fae:	2101      	movs	r1, #1
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f7ff fe1d 	bl	8008bf0 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f04f 0000 	mov.w	r0, #0
 8008fbe:	f04f 0100 	mov.w	r1, #0
 8008fc2:	f008 fae3 	bl	801158c <ZbInit>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	4a30      	ldr	r2, [pc, #192]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 8008fca:	6053      	str	r3, [r2, #4]
  APP_DBG("after ZbInit");
 8008fcc:	4a30      	ldr	r2, [pc, #192]	; (8009090 <APP_ZIGBEE_StackLayersInit+0xe8>)
 8008fce:	2101      	movs	r1, #1
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	f7ff fe0d 	bl	8008bf0 <logApplication>
  assert(zigbee_app_info.zb != NULL);
 8008fd6:	4b2d      	ldr	r3, [pc, #180]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d106      	bne.n	8008fec <APP_ZIGBEE_StackLayersInit+0x44>
 8008fde:	4b2d      	ldr	r3, [pc, #180]	; (8009094 <APP_ZIGBEE_StackLayersInit+0xec>)
 8008fe0:	4a2d      	ldr	r2, [pc, #180]	; (8009098 <APP_ZIGBEE_StackLayersInit+0xf0>)
 8008fe2:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8008fe6:	482d      	ldr	r0, [pc, #180]	; (800909c <APP_ZIGBEE_StackLayersInit+0xf4>)
 8008fe8:	f00b fad8 	bl	801459c <__assert_func>
  APP_DBG("ZB instance created");
 8008fec:	4a2c      	ldr	r2, [pc, #176]	; (80090a0 <APP_ZIGBEE_StackLayersInit+0xf8>)
 8008fee:	2101      	movs	r1, #1
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f7ff fdfd 	bl	8008bf0 <logApplication>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 8008ff6:	f000 f857 	bl	80090a8 <APP_ZIGBEE_ConfigEndpoints>
  //APP_DBG("after APP_ZIGBEE_ConfigEndpoints");

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  BSP_LED_Off(LED_RED);
 8008ffa:	2002      	movs	r0, #2
 8008ffc:	f001 fd5c 	bl	800aab8 <BSP_LED_Off>
  BSP_LED_Off(LED_GREEN);
 8009000:	2001      	movs	r0, #1
 8009002:	f001 fd59 	bl	800aab8 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8009006:	2000      	movs	r0, #0
 8009008:	f001 fd56 	bl	800aab8 <BSP_LED_Off>
  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 800900c:	4b1f      	ldr	r3, [pc, #124]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 800900e:	2201      	movs	r2, #1
 8009010:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 8009012:	f001 fec5 	bl	800ada0 <HAL_GetTick>
 8009016:	4603      	mov	r3, r0
 8009018:	4a1c      	ldr	r2, [pc, #112]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 800901a:	60d3      	str	r3, [r2, #12]
  //APP_DBG("zigbee_app_info.startupControl before assigning 0x%02x",zigbee_app_info.startupControl);
  //APP_DBG("zigbee_app_info.panID before assigning 0x%02x",zigbee_app_info.panId);
  zigbee_app_info.startupControl = ZbStartTypeForm;
 800901c:	4b1b      	ldr	r3, [pc, #108]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 800901e:	2201      	movs	r2, #1
 8009020:	721a      	strb	r2, [r3, #8]
  //APP_DBG("zigbee_app_info.startupControl after assigning  0x%02x",zigbee_app_info.startupControl);
  //APP_DBG("zigbee_app_info.panID before assigning 0x%02x",zigbee_app_info.panId);

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 8009022:	4b1a      	ldr	r3, [pc, #104]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 8009024:	2201      	movs	r2, #1
 8009026:	701a      	strb	r2, [r3, #0]
  zigbee_app_info.thermextaddr  = 0x003c84fffe02386a;
 8009028:	4918      	ldr	r1, [pc, #96]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 800902a:	a315      	add	r3, pc, #84	; (adr r3, 8009080 <APP_ZIGBEE_StackLayersInit+0xd8>)
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  zigbee_app_info.thermshortaddr = 0x0000U;
 8009034:	4b15      	ldr	r3, [pc, #84]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 8009036:	2200      	movs	r2, #0
 8009038:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
  zigbee_app_info.epCount = 0;
 800903c:	4b13      	ldr	r3, [pc, #76]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 800903e:	2200      	movs	r2, #0
 8009040:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
  zigbee_app_info.discoverClusterStatus=0;
 8009044:	4b11      	ldr	r3, [pc, #68]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
  zigbee_app_info.bindingfinished =0;
 800904c:	4b0f      	ldr	r3, [pc, #60]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
  zigbee_app_info.reportConfigFinished = 0;
 8009054:	4b0d      	ldr	r3, [pc, #52]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
  zigbee_app_info.reportReadFinished = 0;
 800905c:	4b0b      	ldr	r3, [pc, #44]	; (800908c <APP_ZIGBEE_StackLayersInit+0xe4>)
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
  //myaddr.mode = ZB_APSDE_ADDRMODE_EXT;
  //myaddr.extAddr = 0x003c84fffe02386a;


  /* run the task */
  APP_DBG("set CFG_TASK_ZIGBEE_NETWORK_FORM prio to 0");
 8009064:	4a0f      	ldr	r2, [pc, #60]	; (80090a4 <APP_ZIGBEE_StackLayersInit+0xfc>)
 8009066:	2101      	movs	r1, #1
 8009068:	2000      	movs	r0, #0
 800906a:	f7ff fdc1 	bl	8008bf0 <logApplication>
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800906e:	2100      	movs	r1, #0
 8009070:	2004      	movs	r0, #4
 8009072:	f00b f9b3 	bl	80143dc <UTIL_SEQ_SetTask>
}
 8009076:	bf00      	nop
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	f3af 8000 	nop.w
 8009080:	fe02386a 	.word	0xfe02386a
 8009084:	003c84ff 	.word	0x003c84ff
 8009088:	08015c24 	.word	0x08015c24
 800908c:	200004e8 	.word	0x200004e8
 8009090:	08015c48 	.word	0x08015c48
 8009094:	08015c58 	.word	0x08015c58
 8009098:	08016d30 	.word	0x08016d30
 800909c:	08015c74 	.word	0x08015c74
 80090a0:	08015d20 	.word	0x08015d20
 80090a4:	08015d34 	.word	0x08015d34

080090a8 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	2218      	movs	r2, #24
 80090b4:	2100      	movs	r1, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f00b fd00 	bl	8014abc <memset>
  ZbZclClusterEndpointRegister(zigbee_app_info.device_temp_server);
*/

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  /* Endpoint: ICON_ENDPOINT */
	req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 80090bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80090c0:	817b      	strh	r3, [r7, #10]
	req.deviceId = ZCL_DEVICE_THERMOSTAT;
 80090c2:	f240 3301 	movw	r3, #769	; 0x301
 80090c6:	81bb      	strh	r3, [r7, #12]
	req.endpoint = ICON_ENDPOINT;
 80090c8:	2301      	movs	r3, #1
 80090ca:	723b      	strb	r3, [r7, #8]
	ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 80090cc:	4b18      	ldr	r3, [pc, #96]	; (8009130 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	1d3a      	adds	r2, r7, #4
 80090d2:	f107 0108 	add.w	r1, r7, #8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f009 f904 	bl	80122e4 <ZbZclAddEndpoint>
	assert(conf.status == ZB_STATUS_SUCCESS);
 80090dc:	793b      	ldrb	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d006      	beq.n	80090f0 <APP_ZIGBEE_ConfigEndpoints+0x48>
 80090e2:	4b14      	ldr	r3, [pc, #80]	; (8009134 <APP_ZIGBEE_ConfigEndpoints+0x8c>)
 80090e4:	4a14      	ldr	r2, [pc, #80]	; (8009138 <APP_ZIGBEE_ConfigEndpoints+0x90>)
 80090e6:	f240 1159 	movw	r1, #345	; 0x159
 80090ea:	4814      	ldr	r0, [pc, #80]	; (800913c <APP_ZIGBEE_ConfigEndpoints+0x94>)
 80090ec:	f00b fa56 	bl	801459c <__assert_func>

	zigbee_app_info.device_therm_client = ZbZclThermClientAlloc (zigbee_app_info.zb, ICON_ENDPOINT);
 80090f0:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2101      	movs	r1, #1
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fb fc0a 	bl	8004910 <ZbZclThermClientAlloc>
 80090fc:	4603      	mov	r3, r0
 80090fe:	4a0c      	ldr	r2, [pc, #48]	; (8009130 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 8009100:	f8c2 3230 	str.w	r3, [r2, #560]	; 0x230
	assert(zigbee_app_info.device_therm_client != NULL);
 8009104:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 8009106:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <APP_ZIGBEE_ConfigEndpoints+0x74>
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <APP_ZIGBEE_ConfigEndpoints+0x98>)
 8009110:	4a09      	ldr	r2, [pc, #36]	; (8009138 <APP_ZIGBEE_ConfigEndpoints+0x90>)
 8009112:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8009116:	4809      	ldr	r0, [pc, #36]	; (800913c <APP_ZIGBEE_ConfigEndpoints+0x94>)
 8009118:	f00b fa40 	bl	801459c <__assert_func>
	ZbZclClusterEndpointRegister(zigbee_app_info.device_therm_client);
 800911c:	4b04      	ldr	r3, [pc, #16]	; (8009130 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 800911e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8009122:	4618      	mov	r0, r3
 8009124:	f009 fa42 	bl	80125ac <ZbZclClusterEndpointRegister>
  /* USER CODE END CONFIG_ENDPOINT */
}
 8009128:	bf00      	nop
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	200004e8 	.word	0x200004e8
 8009134:	08015d60 	.word	0x08015d60
 8009138:	08016d4c 	.word	0x08016d4c
 800913c:	08015c74 	.word	0x08015c74
 8009140:	08015d84 	.word	0x08015d84

08009144 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 8009144:	b590      	push	{r4, r7, lr}
 8009146:	b0fb      	sub	sp, #492	; 0x1ec
 8009148:	af02      	add	r7, sp, #8
	APP_DBG("start APP_ZIGBEE_NwkForm");
 800914a:	4a7d      	ldr	r2, [pc, #500]	; (8009340 <APP_ZIGBEE_NwkForm+0x1fc>)
 800914c:	2101      	movs	r1, #1
 800914e:	2000      	movs	r0, #0
 8009150:	f7ff fd4e 	bl	8008bf0 <logApplication>
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 8009154:	4b7b      	ldr	r3, [pc, #492]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009156:	7a5b      	ldrb	r3, [r3, #9]
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 80c2 	beq.w	80092e2 <APP_ZIGBEE_NwkForm+0x19e>
 800915e:	f001 fe1f 	bl	800ada0 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	4b77      	ldr	r3, [pc, #476]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	429a      	cmp	r2, r3
 800916a:	f0c0 80ba 	bcc.w	80092e2 <APP_ZIGBEE_NwkForm+0x19e>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_ALL, NULL);
 800916e:	4b75      	ldr	r3, [pc, #468]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f04f 31ff 	mov.w	r1, #4294967295
 8009178:	4618      	mov	r0, r3
 800917a:	f008 fa59 	bl	8011630 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    APP_DBG("Attempt to join a zigbee network ");
 800917e:	4a72      	ldr	r2, [pc, #456]	; (8009348 <APP_ZIGBEE_NwkForm+0x204>)
 8009180:	2101      	movs	r1, #1
 8009182:	2000      	movs	r0, #0
 8009184:	f7ff fd34 	bl	8008bf0 <logApplication>
    APP_DBG("Send configuration values to M0 ");
 8009188:	4a70      	ldr	r2, [pc, #448]	; (800934c <APP_ZIGBEE_NwkForm+0x208>)
 800918a:	2101      	movs	r1, #1
 800918c:	2000      	movs	r0, #0
 800918e:	f7ff fd2f 	bl	8008bf0 <logApplication>
    ZbStartupConfigGetProDefaults(&config);
 8009192:	463b      	mov	r3, r7
 8009194:	4618      	mov	r0, r3
 8009196:	f008 fae5 	bl	8011764 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_COORDINATOR");
 800919a:	4a6d      	ldr	r2, [pc, #436]	; (8009350 <APP_ZIGBEE_NwkForm+0x20c>)
 800919c:	2101      	movs	r1, #1
 800919e:	2000      	movs	r0, #0
 80091a0:	f7ff fd26 	bl	8008bf0 <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 80091a4:	4b67      	ldr	r3, [pc, #412]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 80091a6:	7a1a      	ldrb	r2, [r3, #8]
 80091a8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80091ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80091b0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 80091b4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80091b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80091bc:	4a65      	ldr	r2, [pc, #404]	; (8009354 <APP_ZIGBEE_NwkForm+0x210>)
 80091be:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80091c2:	4613      	mov	r3, r2
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	6859      	ldr	r1, [r3, #4]
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    //APP_DBG("Security key preconfiguredLinkKey has been set");

    config.channelList.count = 1;
 80091ce:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80091d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80091d6:	2201      	movs	r2, #1
 80091d8:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 80091da:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80091de:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80091e2:	2200      	movs	r2, #0
 80091e4:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 80091e6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80091ea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80091ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80091f2:	619a      	str	r2, [r3, #24]
    //APP_DBG("config channel details have been set");

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 80091f4:	4b53      	ldr	r3, [pc, #332]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	463a      	mov	r2, r7
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 f8d5 	bl	80093ac <ZbStartupWait>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    //APP_DBG("after ZbStartupWait");

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 8009208:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800920c:	4a52      	ldr	r2, [pc, #328]	; (8009358 <APP_ZIGBEE_NwkForm+0x214>)
 800920e:	2101      	movs	r1, #1
 8009210:	2000      	movs	r0, #0
 8009212:	f7ff fced 	bl	8008bf0 <logApplication>
    //zigbee_app_info.panID = config.panId;
    //APP_DBG("zigbee_app_info.panID after ZbStartupWait 0x%02x",zigbee_app_info.panID);
    zigbee_app_info.join_status = status;
 8009216:	4a4b      	ldr	r2, [pc, #300]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009218:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800921c:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS)
 800921e:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8009222:	2b00      	cmp	r3, #0
 8009224:	d14f      	bne.n	80092c6 <APP_ZIGBEE_NwkForm+0x182>
    {
      zigbee_app_info.join_delay = 0U;
 8009226:	4b47      	ldr	r3, [pc, #284]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009228:	2200      	movs	r2, #0
 800922a:	60da      	str	r2, [r3, #12]
      zigbee_app_info.init_after_join = true;
 800922c:	4b45      	ldr	r3, [pc, #276]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 800922e:	2201      	movs	r2, #1
 8009230:	741a      	strb	r2, [r3, #16]
      APP_DBG("Startup done !\n");
 8009232:	4a4a      	ldr	r2, [pc, #296]	; (800935c <APP_ZIGBEE_NwkForm+0x218>)
 8009234:	2101      	movs	r1, #1
 8009236:	2000      	movs	r0, #0
 8009238:	f7ff fcda 	bl	8008bf0 <logApplication>
      /* USER CODE BEGIN 3 */
      BSP_LED_On(LED_BLUE);
 800923c:	2000      	movs	r0, #0
 800923e:	f001 fc21 	bl	800aa84 <BSP_LED_On>
      zigbee_app_info.panID = ZbShortAddressPan(zigbee_app_info.zb);
 8009242:	4b40      	ldr	r3, [pc, #256]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	f001 f8b0 	bl	800a3ac <ZbShortAddressPan>
 800924c:	4603      	mov	r3, r0
 800924e:	461a      	mov	r2, r3
 8009250:	4b3c      	ldr	r3, [pc, #240]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009252:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
      zigbee_app_info.extaddr = ZbExtendedAddress(zigbee_app_info.zb);
 8009256:	4b3b      	ldr	r3, [pc, #236]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	4618      	mov	r0, r3
 800925c:	f008 fa26 	bl	80116ac <ZbExtendedAddress>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4937      	ldr	r1, [pc, #220]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009266:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
      zigbee_app_info.nwkAddr = ZbShortAddress(zigbee_app_info.zb);
 800926a:	4b36      	ldr	r3, [pc, #216]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	4618      	mov	r0, r3
 8009270:	f008 fa66 	bl	8011740 <ZbShortAddress>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	4b32      	ldr	r3, [pc, #200]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 800927a:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
      zigbee_app_info.statusgetendpoint = ZB_STATUS_ALLOC_FAIL;
 800927e:	4b31      	ldr	r3, [pc, #196]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009280:	2270      	movs	r2, #112	; 0x70
 8009282:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

      //zigbee_app_info.addr = ZbShortAddressPan(zigbee_app_info.zb);
      APP_DBG("Network created ");
 8009286:	4a36      	ldr	r2, [pc, #216]	; (8009360 <APP_ZIGBEE_NwkForm+0x21c>)
 8009288:	2101      	movs	r1, #1
 800928a:	2000      	movs	r0, #0
 800928c:	f7ff fcb0 	bl	8008bf0 <logApplication>
      APP_DBG("zigbee_app_info.Network panID after request 0x%02x",zigbee_app_info.panID);
 8009290:	4b2c      	ldr	r3, [pc, #176]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009292:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	; 0x1f0
 8009296:	4a33      	ldr	r2, [pc, #204]	; (8009364 <APP_ZIGBEE_NwkForm+0x220>)
 8009298:	2101      	movs	r1, #1
 800929a:	2000      	movs	r0, #0
 800929c:	f7ff fca8 	bl	8008bf0 <logApplication>
      APP_DBG("zigbee_app_info.Network extaddr after request 0x%22x",zigbee_app_info.extaddr);
 80092a0:	4b28      	ldr	r3, [pc, #160]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 80092a2:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 80092a6:	e9cd 2300 	strd	r2, r3, [sp]
 80092aa:	4a2f      	ldr	r2, [pc, #188]	; (8009368 <APP_ZIGBEE_NwkForm+0x224>)
 80092ac:	2101      	movs	r1, #1
 80092ae:	2000      	movs	r0, #0
 80092b0:	f7ff fc9e 	bl	8008bf0 <logApplication>
      APP_DBG("zigbee_app_info.Network nwkAddr after request 0x%02x",zigbee_app_info.nwkAddr);
 80092b4:	4b23      	ldr	r3, [pc, #140]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 80092b6:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
 80092ba:	4a2c      	ldr	r2, [pc, #176]	; (800936c <APP_ZIGBEE_NwkForm+0x228>)
 80092bc:	2101      	movs	r1, #1
 80092be:	2000      	movs	r0, #0
 80092c0:	f7ff fc96 	bl	8008bf0 <logApplication>
 80092c4:	e00d      	b.n	80092e2 <APP_ZIGBEE_NwkForm+0x19e>

      /* USER CODE END 3 */
    }
    else
    {
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 80092c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80092ca:	4a29      	ldr	r2, [pc, #164]	; (8009370 <APP_ZIGBEE_NwkForm+0x22c>)
 80092cc:	2101      	movs	r1, #1
 80092ce:	2000      	movs	r0, #0
 80092d0:	f7ff fc8e 	bl	8008bf0 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 80092d4:	f001 fd64 	bl	800ada0 <HAL_GetTick>
 80092d8:	4603      	mov	r3, r0
 80092da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80092de:	4a19      	ldr	r2, [pc, #100]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 80092e0:	60d3      	str	r3, [r2, #12]
      /* USER CODE END 4 */
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 80092e2:	4b18      	ldr	r3, [pc, #96]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 80092e4:	7a5b      	ldrb	r3, [r3, #9]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d009      	beq.n	80092fe <APP_ZIGBEE_NwkForm+0x1ba>
  {
	  APP_DBG("Network forming/joining was not successful, set CFG_TASK_ZIGBEE_NETWORK_FORM prio to 0");
 80092ea:	4a22      	ldr	r2, [pc, #136]	; (8009374 <APP_ZIGBEE_NwkForm+0x230>)
 80092ec:	2101      	movs	r1, #1
 80092ee:	2000      	movs	r0, #0
 80092f0:	f7ff fc7e 	bl	8008bf0 <logApplication>
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 80092f4:	2100      	movs	r1, #0
 80092f6:	2004      	movs	r0, #4
 80092f8:	f00b f870 	bl	80143dc <UTIL_SEQ_SetTask>
 80092fc:	e019      	b.n	8009332 <APP_ZIGBEE_NwkForm+0x1ee>
  }
  /* USER CODE BEGIN NW_FORM */
  else
  {
    zigbee_app_info.init_after_join = false;
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 8009300:	2200      	movs	r2, #0
 8009302:	741a      	strb	r2, [r3, #16]

    /* Assign ourselves to the group addresses */
    APP_ZIGBEE_ConfigGroupAddr();
 8009304:	f000 faae 	bl	8009864 <APP_ZIGBEE_ConfigGroupAddr>
    APP_DBG("after ConfigGroupAddr");
 8009308:	4a1b      	ldr	r2, [pc, #108]	; (8009378 <APP_ZIGBEE_NwkForm+0x234>)
 800930a:	2101      	movs	r1, #1
 800930c:	2000      	movs	r0, #0
 800930e:	f7ff fc6f 	bl	8008bf0 <logApplication>

    /* Since we're using group addressing (broadcast), shorten the broadcast timeout */
    uint32_t bcast_timeout = 3;
 8009312:	2303      	movs	r3, #3
 8009314:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    ZbNwkSet(zigbee_app_info.zb, ZB_NWK_NIB_ID_NetworkBroadcastDeliveryTime, &bcast_timeout, sizeof(bcast_timeout));
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <APP_ZIGBEE_NwkForm+0x200>)
 800931a:	6858      	ldr	r0, [r3, #4]
 800931c:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8009320:	2304      	movs	r3, #4
 8009322:	2188      	movs	r1, #136	; 0x88
 8009324:	f008 fe89 	bl	801203a <ZbNwkSet>
    APP_DBG("after ZbNwkSet");
 8009328:	4a14      	ldr	r2, [pc, #80]	; (800937c <APP_ZIGBEE_NwkForm+0x238>)
 800932a:	2101      	movs	r1, #1
 800932c:	2000      	movs	r0, #0
 800932e:	f7ff fc5f 	bl	8008bf0 <logApplication>
    //APP_ZIGBEE_InitDevTemp();

    }
  /* USER CODE END NW_FORM */
  APP_ZIGBEE_getendpoints();
 8009332:	f000 fb71 	bl	8009a18 <APP_ZIGBEE_getendpoints>
}
 8009336:	bf00      	nop
 8009338:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 800933c:	46bd      	mov	sp, r7
 800933e:	bd90      	pop	{r4, r7, pc}
 8009340:	08015db0 	.word	0x08015db0
 8009344:	200004e8 	.word	0x200004e8
 8009348:	08015dcc 	.word	0x08015dcc
 800934c:	08015df0 	.word	0x08015df0
 8009350:	08015e14 	.word	0x08015e14
 8009354:	08016ecc 	.word	0x08016ecc
 8009358:	08015e4c 	.word	0x08015e4c
 800935c:	08015e74 	.word	0x08015e74
 8009360:	08015e84 	.word	0x08015e84
 8009364:	08015e98 	.word	0x08015e98
 8009368:	08015ecc 	.word	0x08015ecc
 800936c:	08015f04 	.word	0x08015f04
 8009370:	08015f3c 	.word	0x08015f3c
 8009374:	08015f7c 	.word	0x08015f7c
 8009378:	08015fd4 	.word	0x08015fd4
 800937c:	08015fec 	.word	0x08015fec

08009380 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	60fb      	str	r3, [r7, #12]

  info->status = status;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	79fa      	ldrb	r2, [r7, #7]
 8009394:	705a      	strb	r2, [r3, #1]
  info->active = false;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800939c:	2008      	movs	r0, #8
 800939e:	f00b f849 	bl	8014434 <UTIL_SEQ_SetEvt>
}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	APP_DBG("start ZbStartupWait ");
 80093b6:	4a22      	ldr	r2, [pc, #136]	; (8009440 <ZbStartupWait+0x94>)
 80093b8:	2101      	movs	r1, #1
 80093ba:	2000      	movs	r0, #0
 80093bc:	f7ff fc18 	bl	8008bf0 <logApplication>
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 80093c0:	2002      	movs	r0, #2
 80093c2:	f00b f909 	bl	80145d8 <malloc>
 80093c6:	4603      	mov	r3, r0
 80093c8:	60fb      	str	r3, [r7, #12]
  if (info == NULL)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <ZbStartupWait+0x28>
  {
    return ZB_STATUS_ALLOC_FAIL;
 80093d0:	2370      	movs	r3, #112	; 0x70
 80093d2:	e030      	b.n	8009436 <ZbStartupWait+0x8a>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 80093d4:	2202      	movs	r2, #2
 80093d6:	2100      	movs	r1, #0
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f00b fb6f 	bl	8014abc <memset>

  info->active = true;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2201      	movs	r2, #1
 80093e2:	701a      	strb	r2, [r3, #0]
  APP_DBG("start stack function ZbStartup ");
 80093e4:	4a17      	ldr	r2, [pc, #92]	; (8009444 <ZbStartupWait+0x98>)
 80093e6:	2101      	movs	r1, #1
 80093e8:	2000      	movs	r0, #0
 80093ea:	f7ff fc01 	bl	8008bf0 <logApplication>
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4a15      	ldr	r2, [pc, #84]	; (8009448 <ZbStartupWait+0x9c>)
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f008 f9dd 	bl	80117b4 <ZbStartup>
 80093fa:	4603      	mov	r3, r0
 80093fc:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 80093fe:	7afb      	ldrb	r3, [r7, #11]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <ZbStartupWait+0x62>
  {
    info->active = false;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
    return status;
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	e013      	b.n	8009436 <ZbStartupWait+0x8a>
  }

  APP_DBG("before UTIL_SEQ_WaitEvt start EVENT_ZIGBEE_STARTUP_ENDED ");
 800940e:	4a0f      	ldr	r2, [pc, #60]	; (800944c <ZbStartupWait+0xa0>)
 8009410:	2101      	movs	r1, #1
 8009412:	2000      	movs	r0, #0
 8009414:	f7ff fbec 	bl	8008bf0 <logApplication>
  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8009418:	2008      	movs	r0, #8
 800941a:	f00b f82b 	bl	8014474 <UTIL_SEQ_WaitEvt>
  APP_DBG("after UTIL_SEQ_WaitEvt start EVENT_ZIGBEE_STARTUP_ENDED ");
 800941e:	4a0c      	ldr	r2, [pc, #48]	; (8009450 <ZbStartupWait+0xa4>)
 8009420:	2101      	movs	r1, #1
 8009422:	2000      	movs	r0, #0
 8009424:	f7ff fbe4 	bl	8008bf0 <logApplication>
  status = info->status;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	72fb      	strb	r3, [r7, #11]
  free(info);
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f00b f8da 	bl	80145e8 <free>
  return status;
 8009434:	7afb      	ldrb	r3, [r7, #11]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	08015ffc 	.word	0x08015ffc
 8009444:	08016014 	.word	0x08016014
 8009448:	08009381 	.word	0x08009381
 800944c:	08016034 	.word	0x08016034
 8009450:	08016070 	.word	0x08016070

08009454 <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  switch (ErrId)
  {
    default:
      APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 800945e:	2100      	movs	r1, #0
 8009460:	4803      	ldr	r0, [pc, #12]	; (8009470 <APP_ZIGBEE_Error+0x1c>)
 8009462:	f000 f807 	bl	8009474 <APP_ZIGBEE_TraceError>
      break;
 8009466:	bf00      	nop
  }
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	080160ac 	.word	0x080160ac

08009474 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af02      	add	r7, sp, #8
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a0d      	ldr	r2, [pc, #52]	; (80094bc <APP_ZIGBEE_TraceError+0x48>)
 8009486:	2101      	movs	r1, #1
 8009488:	2000      	movs	r0, #0
 800948a:	f7ff fbb1 	bl	8008bf0 <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  while (1U == 1U) 
  {
    BSP_LED_Toggle(LED1);
 800948e:	2000      	movs	r0, #0
 8009490:	f001 fb2c 	bl	800aaec <BSP_LED_Toggle>
    HAL_Delay(500U);
 8009494:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009498:	f7fd fe01 	bl	800709e <HAL_Delay>
    BSP_LED_Toggle(LED2);
 800949c:	2001      	movs	r0, #1
 800949e:	f001 fb25 	bl	800aaec <BSP_LED_Toggle>
    HAL_Delay(500U);
 80094a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094a6:	f7fd fdfa 	bl	800709e <HAL_Delay>
    BSP_LED_Toggle(LED3);
 80094aa:	2002      	movs	r0, #2
 80094ac:	f001 fb1e 	bl	800aaec <BSP_LED_Toggle>
    HAL_Delay(500U);
 80094b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094b4:	f7fd fdf3 	bl	800709e <HAL_Delay>
    BSP_LED_Toggle(LED1);
 80094b8:	e7e9      	b.n	800948e <APP_ZIGBEE_TraceError+0x1a>
 80094ba:	bf00      	nop
 80094bc:	080160bc 	.word	0x080160bc

080094c0 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b098      	sub	sp, #96	; 0x60
 80094c4:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 80094c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80094ca:	657b      	str	r3, [r7, #84]	; 0x54

  APP_DBG("internal APP_ZIGBEE_CheckWirelessFirmwareInfo");
 80094cc:	4a4b      	ldr	r2, [pc, #300]	; (80095fc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13c>)
 80094ce:	2101      	movs	r1, #1
 80094d0:	2000      	movs	r0, #0
 80094d2:	f7ff fb8d 	bl	8008bf0 <logApplication>


  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 80094d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80094d8:	f006 feee 	bl	80102b8 <SHCI_GetWirelessFwInfo>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x2c>
  {
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80094e2:	2101      	movs	r1, #1
 80094e4:	2002      	movs	r0, #2
 80094e6:	f7ff ffb5 	bl	8009454 <APP_ZIGBEE_Error>
    /* print clusters allocated */
    APP_DBG("Clusters allocated are:");
    APP_DBG("onOff Server on Endpoint %d", SW1_ENDPOINT);
    APP_DBG("**********************************************************");
  }
}
 80094ea:	e083      	b.n	80095f4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>
    APP_DBG("**********************************************************");
 80094ec:	4a44      	ldr	r2, [pc, #272]	; (8009600 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 80094ee:	2101      	movs	r1, #1
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7ff fb7d 	bl	8008bf0 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80094f6:	4a43      	ldr	r2, [pc, #268]	; (8009604 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x144>)
 80094f8:	2101      	movs	r1, #1
 80094fa:	2000      	movs	r0, #0
 80094fc:	f7ff fb78 	bl	8008bf0 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8009500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	4619      	mov	r1, r3
 8009506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009508:	785b      	ldrb	r3, [r3, #1]
 800950a:	461a      	mov	r2, r3
 800950c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800950e:	789b      	ldrb	r3, [r3, #2]
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	9200      	str	r2, [sp, #0]
 8009514:	460b      	mov	r3, r1
 8009516:	4a3c      	ldr	r2, [pc, #240]	; (8009608 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 8009518:	2101      	movs	r1, #1
 800951a:	2000      	movs	r0, #0
 800951c:	f7ff fb68 	bl	8008bf0 <logApplication>
    switch (p_wireless_info->StackType)
 8009520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009522:	7a5b      	ldrb	r3, [r3, #9]
 8009524:	2b30      	cmp	r3, #48	; 0x30
 8009526:	d002      	beq.n	800952e <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x6e>
 8009528:	2b31      	cmp	r3, #49	; 0x31
 800952a:	d006      	beq.n	800953a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7a>
 800952c:	e00b      	b.n	8009546 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_DBG("FW Type : FFD Zigbee stack");
 800952e:	4a37      	ldr	r2, [pc, #220]	; (800960c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 8009530:	2101      	movs	r1, #1
 8009532:	2000      	movs	r0, #0
 8009534:	f7ff fb5c 	bl	8008bf0 <logApplication>
        break;
 8009538:	e00a      	b.n	8009550 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x90>
        APP_DBG("FW Type : RFD Zigbee stack");
 800953a:	4a35      	ldr	r2, [pc, #212]	; (8009610 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 800953c:	2101      	movs	r1, #1
 800953e:	2000      	movs	r0, #0
 8009540:	f7ff fb56 	bl	8008bf0 <logApplication>
        break;
 8009544:	e004      	b.n	8009550 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x90>
        APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8009546:	2101      	movs	r1, #1
 8009548:	2002      	movs	r0, #2
 800954a:	f7ff ff83 	bl	8009454 <APP_ZIGBEE_Error>
        break;
 800954e:	bf00      	nop
    char *__PathProject__ = (strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 8009550:	4b30      	ldr	r3, [pc, #192]	; (8009614 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 8009552:	64fb      	str	r3, [r7, #76]	; 0x4c
    char *pdel = NULL;
 8009554:	2300      	movs	r3, #0
 8009556:	64bb      	str	r3, [r7, #72]	; 0x48
      pdel = strchr(__PathProject__, '/');
 8009558:	212f      	movs	r1, #47	; 0x2f
 800955a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800955c:	f00b fab6 	bl	8014acc <strchr>
 8009560:	64b8      	str	r0, [r7, #72]	; 0x48
    int index = (int)(pdel - __PathProject__);
 8009562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	647b      	str	r3, [r7, #68]	; 0x44
    APP_DBG("Application flashed: %*.*s", index, index, __PathProject__);
 800956a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009574:	4a28      	ldr	r2, [pc, #160]	; (8009618 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 8009576:	2101      	movs	r1, #1
 8009578:	2000      	movs	r0, #0
 800957a:	f7ff fb39 	bl	8008bf0 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 800957e:	230d      	movs	r3, #13
 8009580:	4a26      	ldr	r2, [pc, #152]	; (800961c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15c>)
 8009582:	2101      	movs	r1, #1
 8009584:	2000      	movs	r0, #0
 8009586:	f7ff fb33 	bl	8008bf0 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 800958a:	4b25      	ldr	r3, [pc, #148]	; (8009620 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 800958c:	4a25      	ldr	r2, [pc, #148]	; (8009624 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 800958e:	2101      	movs	r1, #1
 8009590:	2000      	movs	r0, #0
 8009592:	f7ff fb2d 	bl	8008bf0 <logApplication>
    Z09_LL_string[0] = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	703b      	strb	r3, [r7, #0]
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800959a:	2300      	movs	r3, #0
 800959c:	653b      	str	r3, [r7, #80]	; 0x50
 800959e:	e010      	b.n	80095c2 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x102>
      sprintf(&Z09_LL_string[str_index*3], "%02x ", sec_key_ha[str_index]);
 80095a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095a2:	4613      	mov	r3, r2
 80095a4:	005b      	lsls	r3, r3, #1
 80095a6:	4413      	add	r3, r2
 80095a8:	463a      	mov	r2, r7
 80095aa:	18d0      	adds	r0, r2, r3
 80095ac:	4a1c      	ldr	r2, [pc, #112]	; (8009620 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 80095ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b0:	4413      	add	r3, r2
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	491c      	ldr	r1, [pc, #112]	; (8009628 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x168>)
 80095b8:	f00b f9e4 	bl	8014984 <siprintf>
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 80095bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095be:	3301      	adds	r3, #1
 80095c0:	653b      	str	r3, [r7, #80]	; 0x50
 80095c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c4:	2b0f      	cmp	r3, #15
 80095c6:	d9eb      	bls.n	80095a0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xe0>
    APP_DBG("Link Key value: %s", Z09_LL_string);
 80095c8:	463b      	mov	r3, r7
 80095ca:	4a18      	ldr	r2, [pc, #96]	; (800962c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x16c>)
 80095cc:	2101      	movs	r1, #1
 80095ce:	2000      	movs	r0, #0
 80095d0:	f7ff fb0e 	bl	8008bf0 <logApplication>
    APP_DBG("Clusters allocated are:");
 80095d4:	4a16      	ldr	r2, [pc, #88]	; (8009630 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x170>)
 80095d6:	2101      	movs	r1, #1
 80095d8:	2000      	movs	r0, #0
 80095da:	f7ff fb09 	bl	8008bf0 <logApplication>
    APP_DBG("onOff Server on Endpoint %d", SW1_ENDPOINT);
 80095de:	2311      	movs	r3, #17
 80095e0:	4a14      	ldr	r2, [pc, #80]	; (8009634 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x174>)
 80095e2:	2101      	movs	r1, #1
 80095e4:	2000      	movs	r0, #0
 80095e6:	f7ff fb03 	bl	8008bf0 <logApplication>
    APP_DBG("**********************************************************");
 80095ea:	4a05      	ldr	r2, [pc, #20]	; (8009600 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 80095ec:	2101      	movs	r1, #1
 80095ee:	2000      	movs	r0, #0
 80095f0:	f7ff fafe 	bl	8008bf0 <logApplication>
}
 80095f4:	bf00      	nop
 80095f6:	3758      	adds	r7, #88	; 0x58
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	080160e0 	.word	0x080160e0
 8009600:	08016110 	.word	0x08016110
 8009604:	0801614c 	.word	0x0801614c
 8009608:	08016168 	.word	0x08016168
 800960c:	08016180 	.word	0x08016180
 8009610:	0801619c 	.word	0x0801619c
 8009614:	08015ce8 	.word	0x08015ce8
 8009618:	080161b8 	.word	0x080161b8
 800961c:	080161d4 	.word	0x080161d4
 8009620:	08016ecc 	.word	0x08016ecc
 8009624:	080161e8 	.word	0x080161e8
 8009628:	080161f8 	.word	0x080161f8
 800962c:	08016200 	.word	0x08016200
 8009630:	08016214 	.word	0x08016214
 8009634:	0801622c 	.word	0x0801622c

08009638 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 8009640:	4a05      	ldr	r2, [pc, #20]	; (8009658 <APP_ZIGBEE_RegisterCmdBuffer+0x20>)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6013      	str	r3, [r2, #0]
  APP_DBG("internal APP_ZIGBEE_RegisterCmdBuffer");
 8009646:	4a05      	ldr	r2, [pc, #20]	; (800965c <APP_ZIGBEE_RegisterCmdBuffer+0x24>)
 8009648:	2101      	movs	r1, #1
 800964a:	2000      	movs	r0, #0
 800964c:	f7ff fad0 	bl	8008bf0 <logApplication>
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	200004d4 	.word	0x200004d4
 800965c:	08016248 	.word	0x08016248

08009660 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 8009664:	4b03      	ldr	r3, [pc, #12]	; (8009674 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	330c      	adds	r3, #12
}
 800966a:	4618      	mov	r0, r3
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	200004d4 	.word	0x200004d4

08009678 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 800967c:	4b03      	ldr	r3, [pc, #12]	; (800968c <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	330b      	adds	r3, #11
}
 8009682:	4618      	mov	r0, r3
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	200004d4 	.word	0x200004d4

08009690 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 8009694:	4b03      	ldr	r3, [pc, #12]	; (80096a4 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	330b      	adds	r3, #11
}
 800969a:	4618      	mov	r0, r3
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	200004d8 	.word	0x200004d8

080096a8 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 80096a8:	b480      	push	{r7}
 80096aa:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 80096ac:	4b03      	ldr	r3, [pc, #12]	; (80096bc <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	330b      	adds	r3, #11
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	200004dc 	.word	0x200004dc

080096c0 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 80096c6:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <ZIGBEE_CmdTransfer+0x44>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	330c      	adds	r3, #12
 80096cc:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80096ce:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <ZIGBEE_CmdTransfer+0x44>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096d8:	725a      	strb	r2, [r3, #9]
 80096da:	2200      	movs	r2, #0
 80096dc:	f042 0202 	orr.w	r2, r2, #2
 80096e0:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	3302      	adds	r3, #2
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	4b06      	ldr	r3, [pc, #24]	; (8009704 <ZIGBEE_CmdTransfer+0x44>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	0092      	lsls	r2, r2, #2
 80096f0:	b2d2      	uxtb	r2, r2
 80096f2:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 80096f4:	f007 fd9a 	bl	801122c <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80096f8:	f000 f827 	bl	800974a <Wait_Getting_Ack_From_M0>
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	200004d4 	.word	0x200004d4

08009708 <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8009710:	f000 f822 	bl	8009758 <Receive_Ack_From_M0>
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8009724:	4a04      	ldr	r2, [pc, #16]	; (8009738 <TL_ZIGBEE_NotReceived+0x1c>)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800972a:	f000 f81d 	bl	8009768 <Receive_Notification_From_M0>
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200004d8 	.word	0x200004d8

0800973c <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8009740:	2004      	movs	r0, #4
 8009742:	f00a fe97 	bl	8014474 <UTIL_SEQ_WaitEvt>
}
 8009746:	bf00      	nop
 8009748:	bd80      	pop	{r7, pc}

0800974a <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800974e:	2002      	movs	r0, #2
 8009750:	f00a fe90 	bl	8014474 <UTIL_SEQ_WaitEvt>
}
 8009754:	bf00      	nop
 8009756:	bd80      	pop	{r7, pc}

08009758 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800975c:	2002      	movs	r0, #2
 800975e:	f00a fe69 	bl	8014434 <UTIL_SEQ_SetEvt>
}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <Receive_Notification_From_M0+0x1c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	4a04      	ldr	r2, [pc, #16]	; (8009784 <Receive_Notification_From_M0+0x1c>)
 8009774:	6013      	str	r3, [r2, #0]
  //APP_DBG("set CFG_TASK_NOTIFY_FROM_M0_TO_M4 prio to 0");
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8009776:	2100      	movs	r1, #0
 8009778:	2001      	movs	r0, #1
 800977a:	f00a fe2f 	bl	80143dc <UTIL_SEQ_SetTask>
}
 800977e:	bf00      	nop
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	200004e0 	.word	0x200004e0

08009788 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 8009790:	4a07      	ldr	r2, [pc, #28]	; (80097b0 <TL_ZIGBEE_M0RequestReceived+0x28>)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 8009796:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3301      	adds	r3, #1
 800979c:	4a05      	ldr	r2, [pc, #20]	; (80097b4 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800979e:	6013      	str	r3, [r2, #0]
  //APP_DBG("set CFG_TASK_REQUEST_FROM_M0_TO_M4 prio to 0");
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80097a0:	2100      	movs	r1, #0
 80097a2:	2002      	movs	r0, #2
 80097a4:	f00a fe1a 	bl	80143dc <UTIL_SEQ_SetTask>
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	200004dc 	.word	0x200004dc
 80097b4:	200004e4 	.word	0x200004e4

080097b8 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
  ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <APP_ZIGBEE_TL_INIT+0x2c>)
 80097be:	4a0a      	ldr	r2, [pc, #40]	; (80097e8 <APP_ZIGBEE_TL_INIT+0x30>)
 80097c0:	601a      	str	r2, [r3, #0]
  ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 80097c2:	4b08      	ldr	r3, [pc, #32]	; (80097e4 <APP_ZIGBEE_TL_INIT+0x2c>)
 80097c4:	4a09      	ldr	r2, [pc, #36]	; (80097ec <APP_ZIGBEE_TL_INIT+0x34>)
 80097c6:	605a      	str	r2, [r3, #4]
  ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 80097c8:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <APP_ZIGBEE_TL_INIT+0x2c>)
 80097ca:	4a09      	ldr	r2, [pc, #36]	; (80097f0 <APP_ZIGBEE_TL_INIT+0x38>)
 80097cc:	609a      	str	r2, [r3, #8]
  TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 80097ce:	4805      	ldr	r0, [pc, #20]	; (80097e4 <APP_ZIGBEE_TL_INIT+0x2c>)
 80097d0:	f007 fd10 	bl	80111f4 <TL_ZIGBEE_Init>
  APP_DBG("internal APP_ZIGBEE_Init");
 80097d4:	4a07      	ldr	r2, [pc, #28]	; (80097f4 <APP_ZIGBEE_TL_INIT+0x3c>)
 80097d6:	2101      	movs	r1, #1
 80097d8:	2000      	movs	r0, #0
 80097da:	f7ff fa09 	bl	8008bf0 <logApplication>
}
 80097de:	bf00      	nop
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20030028 	.word	0x20030028
 80097e8:	20030838 	.word	0x20030838
 80097ec:	20030944 	.word	0x20030944
 80097f0:	20030a50 	.word	0x20030a50
 80097f4:	08016270 	.word	0x08016270

080097f8 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0

	APP_DBG("start APP_ZIGBEE_ProcessNotifyM0ToM4");
 80097fc:	4a0c      	ldr	r2, [pc, #48]	; (8009830 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x38>)
 80097fe:	2101      	movs	r1, #1
 8009800:	2000      	movs	r0, #0
 8009802:	f7ff f9f5 	bl	8008bf0 <logApplication>
	if (CptReceiveNotifyFromM0 != 0)
 8009806:	4b0b      	ldr	r3, [pc, #44]	; (8009834 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x3c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00d      	beq.n	800982a <APP_ZIGBEE_ProcessNotifyM0ToM4+0x32>
  {
    /* If CptReceiveNotifyFromM0 is > 1. it means that we did not serve all the events from the radio */
    if (CptReceiveNotifyFromM0 > 1U)
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x3c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d904      	bls.n	8009820 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x28>
    {
      APP_ZIGBEE_Error(ERR_REC_MULTI_MSG_FROM_M0, 0);
 8009816:	2100      	movs	r1, #0
 8009818:	2000      	movs	r0, #0
 800981a:	f7ff fe1b 	bl	8009454 <APP_ZIGBEE_Error>
 800981e:	e001      	b.n	8009824 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x2c>
    }
    else
    {
      Zigbee_CallBackProcessing();
 8009820:	f009 f804 	bl	801282c <Zigbee_CallBackProcessing>
    }

    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 8009824:	4b03      	ldr	r3, [pc, #12]	; (8009834 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x3c>)
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
  }
}
 800982a:	bf00      	nop
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	0801628c 	.word	0x0801628c
 8009834:	200004e0 	.word	0x200004e0

08009838 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param
 * @return
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
	APP_DBG("start APP_ZIGBEE_ProcessRequestM0ToM4");
 800983c:	4a07      	ldr	r2, [pc, #28]	; (800985c <APP_ZIGBEE_ProcessRequestM0ToM4+0x24>)
 800983e:	2101      	movs	r1, #1
 8009840:	2000      	movs	r0, #0
 8009842:	f7ff f9d5 	bl	8008bf0 <logApplication>
	if (CptReceiveRequestFromM0 != 0)
 8009846:	4b06      	ldr	r3, [pc, #24]	; (8009860 <APP_ZIGBEE_ProcessRequestM0ToM4+0x28>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d004      	beq.n	8009858 <APP_ZIGBEE_ProcessRequestM0ToM4+0x20>
  {
    Zigbee_M0RequestProcessing();
 800984e:	f00a fb73 	bl	8013f38 <Zigbee_M0RequestProcessing>
    //APP_DBG("CptReceiveRequestFromM0 is not empty");
    CptReceiveRequestFromM0 = 0;
 8009852:	4b03      	ldr	r3, [pc, #12]	; (8009860 <APP_ZIGBEE_ProcessRequestM0ToM4+0x28>)
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
  }
}
 8009858:	bf00      	nop
 800985a:	bd80      	pop	{r7, pc}
 800985c:	080162b4 	.word	0x080162b4
 8009860:	200004e4 	.word	0x200004e4

08009864 <APP_ZIGBEE_ConfigGroupAddr>:
 * @brief  Set group addressing mode
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigGroupAddr(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
  struct ZbApsmeAddGroupReqT req;
  struct ZbApsmeAddGroupConfT conf;

  APP_DBG("start ConfigGroupAddr ");
 800986a:	4a0e      	ldr	r2, [pc, #56]	; (80098a4 <APP_ZIGBEE_ConfigGroupAddr+0x40>)
 800986c:	2101      	movs	r1, #1
 800986e:	2000      	movs	r0, #0
 8009870:	f7ff f9be 	bl	8008bf0 <logApplication>
  memset(&req, 0, sizeof(req));
 8009874:	f107 030c 	add.w	r3, r7, #12
 8009878:	2204      	movs	r2, #4
 800987a:	2100      	movs	r1, #0
 800987c:	4618      	mov	r0, r3
 800987e:	f00b f91d 	bl	8014abc <memset>
  req.endpt = SW1_ENDPOINT;
 8009882:	2311      	movs	r3, #17
 8009884:	73bb      	strb	r3, [r7, #14]
  req.groupAddr = SW1_GROUP_ADDR;
 8009886:	2301      	movs	r3, #1
 8009888:	81bb      	strh	r3, [r7, #12]
  ZbApsmeAddGroupReq(zigbee_app_info.zb, &req, &conf);
 800988a:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <APP_ZIGBEE_ConfigGroupAddr+0x44>)
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	1d3a      	adds	r2, r7, #4
 8009890:	f107 010c 	add.w	r1, r7, #12
 8009894:	4618      	mov	r0, r3
 8009896:	f008 f90b 	bl	8011ab0 <ZbApsmeAddGroupReq>
}
 800989a:	bf00      	nop
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	080162dc 	.word	0x080162dc
 80098a8:	200004e8 	.word	0x200004e8

080098ac <APP_ZIGBEE_EP_cb>:
  }

}

static void APP_ZIGBEE_EP_cb(struct ZbZdoActiveEpRspT *rsp, void *cb_arg)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
	if (rsp->status == ZB_STATUS_SUCCESS)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d155      	bne.n	800996a <APP_ZIGBEE_EP_cb+0xbe>
	{
		APP_DBG("%s : EP_cb Callback success status = 0x%02x", __func__, rsp->status);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	4b2d      	ldr	r3, [pc, #180]	; (800997c <APP_ZIGBEE_EP_cb+0xd0>)
 80098c6:	4a2e      	ldr	r2, [pc, #184]	; (8009980 <APP_ZIGBEE_EP_cb+0xd4>)
 80098c8:	2101      	movs	r1, #1
 80098ca:	2000      	movs	r0, #0
 80098cc:	f7ff f990 	bl	8008bf0 <logApplication>
		APP_DBG("EP Callback success nwkAddr = 0x%02x",  rsp->nwkAddr);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	885b      	ldrh	r3, [r3, #2]
 80098d4:	4a2b      	ldr	r2, [pc, #172]	; (8009984 <APP_ZIGBEE_EP_cb+0xd8>)
 80098d6:	2101      	movs	r1, #1
 80098d8:	2000      	movs	r0, #0
 80098da:	f7ff f989 	bl	8008bf0 <logApplication>
		APP_DBG("Callback success endpoint count = 0x%02x",  rsp->activeEpCount);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	791b      	ldrb	r3, [r3, #4]
 80098e2:	4a29      	ldr	r2, [pc, #164]	; (8009988 <APP_ZIGBEE_EP_cb+0xdc>)
 80098e4:	2101      	movs	r1, #1
 80098e6:	2000      	movs	r0, #0
 80098e8:	f7ff f982 	bl	8008bf0 <logApplication>
		zigbee_app_info.epCount = rsp->activeEpCount;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	791b      	ldrb	r3, [r3, #4]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	4b26      	ldr	r3, [pc, #152]	; (800998c <APP_ZIGBEE_EP_cb+0xe0>)
 80098f4:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
		for (int i = 0; i<rsp->activeEpCount ; i++ )
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	e01a      	b.n	8009934 <APP_ZIGBEE_EP_cb+0x88>
			{
				APP_DBG("Callback success rsp endpoint = 0x%02x",  rsp->activeEpList[i]);
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4413      	add	r3, r2
 8009904:	3305      	adds	r3, #5
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	4a21      	ldr	r2, [pc, #132]	; (8009990 <APP_ZIGBEE_EP_cb+0xe4>)
 800990a:	2101      	movs	r1, #1
 800990c:	2000      	movs	r0, #0
 800990e:	f7ff f96f 	bl	8008bf0 <logApplication>
				zigbee_app_info.ep[i] = rsp->activeEpList[i];
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	3305      	adds	r3, #5
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b299      	uxth	r1, r3
 800991e:	4a1b      	ldr	r2, [pc, #108]	; (800998c <APP_ZIGBEE_EP_cb+0xe0>)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	4413      	add	r3, r2
 800992a:	460a      	mov	r2, r1
 800992c:	805a      	strh	r2, [r3, #2]
		for (int i = 0; i<rsp->activeEpCount ; i++ )
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3301      	adds	r3, #1
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	791b      	ldrb	r3, [r3, #4]
 8009938:	461a      	mov	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4293      	cmp	r3, r2
 800993e:	dbde      	blt.n	80098fe <APP_ZIGBEE_EP_cb+0x52>
			}
		zigbee_app_info.statusgetendpoint = ZB_STATUS_SUCCESS;
 8009940:	4b12      	ldr	r3, [pc, #72]	; (800998c <APP_ZIGBEE_EP_cb+0xe0>)
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

		APP_DBG("Callback success info.ep = %d",  zigbee_app_info.ep[0]);
 8009948:	4b10      	ldr	r3, [pc, #64]	; (800998c <APP_ZIGBEE_EP_cb+0xe0>)
 800994a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800994e:	4a11      	ldr	r2, [pc, #68]	; (8009994 <APP_ZIGBEE_EP_cb+0xe8>)
 8009950:	2101      	movs	r1, #1
 8009952:	2000      	movs	r0, #0
 8009954:	f7ff f94c 	bl	8008bf0 <logApplication>
		APP_DBG("Callback success info.ep = %d",  zigbee_app_info.ep[1]);
 8009958:	4b0c      	ldr	r3, [pc, #48]	; (800998c <APP_ZIGBEE_EP_cb+0xe0>)
 800995a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800995e:	4a0d      	ldr	r2, [pc, #52]	; (8009994 <APP_ZIGBEE_EP_cb+0xe8>)
 8009960:	2101      	movs	r1, #1
 8009962:	2000      	movs	r0, #0
 8009964:	f7ff f944 	bl	8008bf0 <logApplication>
	{
		/* Unknown endpoint */
		//return ZCL_STATUS_FAILURE;
		APP_DBG("EP_cb Callback fail");
	}
}
 8009968:	e004      	b.n	8009974 <APP_ZIGBEE_EP_cb+0xc8>
		APP_DBG("EP_cb Callback fail");
 800996a:	4a0b      	ldr	r2, [pc, #44]	; (8009998 <APP_ZIGBEE_EP_cb+0xec>)
 800996c:	2101      	movs	r1, #1
 800996e:	2000      	movs	r0, #0
 8009970:	f7ff f93e 	bl	8008bf0 <logApplication>
}
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	08016d68 	.word	0x08016d68
 8009980:	08016360 	.word	0x08016360
 8009984:	0801638c 	.word	0x0801638c
 8009988:	080163b4 	.word	0x080163b4
 800998c:	200004e8 	.word	0x200004e8
 8009990:	080163e0 	.word	0x080163e0
 8009994:	08016408 	.word	0x08016408
 8009998:	08016428 	.word	0x08016428

0800999c <Shortrequest_cb>:

static void Shortrequest_cb(struct ZbZdoNwkAddrRspT  *rsp, void *cb_arg)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	if (rsp->status == ZB_STATUS_SUCCESS)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d11f      	bne.n	80099ee <Shortrequest_cb+0x52>
	{
		APP_DBG("%s : Shortrequest_cb Callback success status = 0x%02x", __func__, rsp->status);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <Shortrequest_cb+0x64>)
 80099b6:	4a13      	ldr	r2, [pc, #76]	; (8009a04 <Shortrequest_cb+0x68>)
 80099b8:	2101      	movs	r1, #1
 80099ba:	2000      	movs	r0, #0
 80099bc:	f7ff f918 	bl	8008bf0 <logApplication>
	    APP_DBG("Short request extAddr = 0x%02x",  rsp->extAddr);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80099c6:	e9cd 2300 	strd	r2, r3, [sp]
 80099ca:	4a0f      	ldr	r2, [pc, #60]	; (8009a08 <Shortrequest_cb+0x6c>)
 80099cc:	2101      	movs	r1, #1
 80099ce:	2000      	movs	r0, #0
 80099d0:	f7ff f90e 	bl	8008bf0 <logApplication>
		APP_DBG("Short request nwkAddr = 0x%02x",  rsp->nwkAddr);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	8a1b      	ldrh	r3, [r3, #16]
 80099d8:	4a0c      	ldr	r2, [pc, #48]	; (8009a0c <Shortrequest_cb+0x70>)
 80099da:	2101      	movs	r1, #1
 80099dc:	2000      	movs	r0, #0
 80099de:	f7ff f907 	bl	8008bf0 <logApplication>
		zigbee_app_info.thermshortaddr = rsp->nwkAddr;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	8a1a      	ldrh	r2, [r3, #16]
 80099e6:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <Shortrequest_cb+0x74>)
 80099e8:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
	}
	else
	{
		APP_DBG("Short request  Callback fail");
	}
}
 80099ec:	e004      	b.n	80099f8 <Shortrequest_cb+0x5c>
		APP_DBG("Short request  Callback fail");
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <Shortrequest_cb+0x78>)
 80099f0:	2101      	movs	r1, #1
 80099f2:	2000      	movs	r0, #0
 80099f4:	f7ff f8fc 	bl	8008bf0 <logApplication>
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	08016d7c 	.word	0x08016d7c
 8009a04:	0801643c 	.word	0x0801643c
 8009a08:	08016474 	.word	0x08016474
 8009a0c:	08016494 	.word	0x08016494
 8009a10:	200004e8 	.word	0x200004e8
 8009a14:	080164b4 	.word	0x080164b4

08009a18 <APP_ZIGBEE_getendpoints>:

static void APP_ZIGBEE_getendpoints(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08e      	sub	sp, #56	; 0x38
 8009a1c:	af00      	add	r7, sp, #0
	APP_DBG("start APP_ZIGBEE_getendpoints");
 8009a1e:	4a36      	ldr	r2, [pc, #216]	; (8009af8 <APP_ZIGBEE_getendpoints+0xe0>)
 8009a20:	2101      	movs	r1, #1
 8009a22:	2000      	movs	r0, #0
 8009a24:	f7ff f8e4 	bl	8008bf0 <logApplication>

	uint64_t epid = 0U;
 8009a28:	f04f 0200 	mov.w	r2, #0
 8009a2c:	f04f 0300 	mov.w	r3, #0
 8009a30:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//For short address
	enum ZclStatusCodeT ShortrequestStatus;
	struct ZbZdoNwkAddrReqT shortrequest;
	shortrequest.extAddr = 0x003c84fffe02386a;
 8009a34:	a32e      	add	r3, pc, #184	; (adr r3, 8009af0 <APP_ZIGBEE_getendpoints+0xd8>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	shortrequest.dstNwkAddr = 0xfffd;
 8009a3e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8009a42:	813b      	strh	r3, [r7, #8]
	shortrequest.reqType = ZB_ZDO_ADDR_REQ_TYPE_SINGLE;
 8009a44:	2300      	movs	r3, #0
 8009a46:	763b      	strb	r3, [r7, #24]
	shortrequest.startIndex = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	767b      	strb	r3, [r7, #25]
	uint64_t extaddrTherm = 0x003c84fffe02386a;
 8009a4c:	a328      	add	r3, pc, #160	; (adr r3, 8009af0 <APP_ZIGBEE_getendpoints+0xd8>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	UNUSED(ShortrequestStatus);

	//for EP
    enum ZclStatusCodeT ActiveEPReqStatus;
    struct ZbZdoActiveEpReqT ActiveEPReq;
	memset(&ActiveEPReq, 0, sizeof(ActiveEPReq));
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	2204      	movs	r2, #4
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f00b f82d 	bl	8014abc <memset>

	  if(zigbee_app_info.zb == NULL){
 8009a62:	4b26      	ldr	r3, [pc, #152]	; (8009afc <APP_ZIGBEE_getendpoints+0xe4>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <APP_ZIGBEE_getendpoints+0x5e>
		APP_DBG("getendpoints : zigbee_app_info.zb == NULL");
 8009a6a:	4a25      	ldr	r2, [pc, #148]	; (8009b00 <APP_ZIGBEE_getendpoints+0xe8>)
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	2000      	movs	r0, #0
 8009a70:	f7ff f8be 	bl	8008bf0 <logApplication>
	    return;
 8009a74:	e037      	b.n	8009ae6 <APP_ZIGBEE_getendpoints+0xce>
	  }
	  /* Check if the router joined the network */
	  if (ZbNwkGet(zigbee_app_info.zb, ZB_NWK_NIB_ID_ExtendedPanId, &epid, sizeof(epid)) != ZB_STATUS_SUCCESS) {
 8009a76:	4b21      	ldr	r3, [pc, #132]	; (8009afc <APP_ZIGBEE_getendpoints+0xe4>)
 8009a78:	6858      	ldr	r0, [r3, #4]
 8009a7a:	f107 0220 	add.w	r2, r7, #32
 8009a7e:	2308      	movs	r3, #8
 8009a80:	219a      	movs	r1, #154	; 0x9a
 8009a82:	f008 fac5 	bl	8012010 <ZbNwkGet>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <APP_ZIGBEE_getendpoints+0x80>
		APP_DBG("getendpoints : ZbNwkGet != ZB_STATUS_SUCCESS");
 8009a8c:	4a1d      	ldr	r2, [pc, #116]	; (8009b04 <APP_ZIGBEE_getendpoints+0xec>)
 8009a8e:	2101      	movs	r1, #1
 8009a90:	2000      	movs	r0, #0
 8009a92:	f7ff f8ad 	bl	8008bf0 <logApplication>
	    return;
 8009a96:	e026      	b.n	8009ae6 <APP_ZIGBEE_getendpoints+0xce>
	  }
	  if (epid == 0U) {
 8009a98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	d105      	bne.n	8009aac <APP_ZIGBEE_getendpoints+0x94>
		APP_DBG("getendpoints : epid == 0U");
 8009aa0:	4a19      	ldr	r2, [pc, #100]	; (8009b08 <APP_ZIGBEE_getendpoints+0xf0>)
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	f7ff f8a3 	bl	8008bf0 <logApplication>
	    return;
 8009aaa:	e01c      	b.n	8009ae6 <APP_ZIGBEE_getendpoints+0xce>
	  }

	  ShortrequestStatus = ZbZdoNwkAddrReq(zigbee_app_info.zb, &shortrequest, &Shortrequest_cb, NULL);
 8009aac:	4b13      	ldr	r3, [pc, #76]	; (8009afc <APP_ZIGBEE_getendpoints+0xe4>)
 8009aae:	6858      	ldr	r0, [r3, #4]
 8009ab0:	f107 0108 	add.w	r1, r7, #8
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4a15      	ldr	r2, [pc, #84]	; (8009b0c <APP_ZIGBEE_getendpoints+0xf4>)
 8009ab8:	f008 fad4 	bl	8012064 <ZbZdoNwkAddrReq>
 8009abc:	4603      	mov	r3, r0
 8009abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  ActiveEPReq.nwkAddrOfInterest = zigbee_app_info.thermshortaddr;
 8009ac2:	4b0e      	ldr	r3, [pc, #56]	; (8009afc <APP_ZIGBEE_getendpoints+0xe4>)
 8009ac4:	f8b3 3220 	ldrh.w	r3, [r3, #544]	; 0x220
 8009ac8:	80fb      	strh	r3, [r7, #6]
	  ActiveEPReq.dstNwkAddr = zigbee_app_info.thermshortaddr;
 8009aca:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <APP_ZIGBEE_getendpoints+0xe4>)
 8009acc:	f8b3 3220 	ldrh.w	r3, [r3, #544]	; 0x220
 8009ad0:	80bb      	strh	r3, [r7, #4]
	  ActiveEPReqStatus =  ZbZdoActiveEpReq(zigbee_app_info.zb, &ActiveEPReq, &APP_ZIGBEE_EP_cb, NULL);
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <APP_ZIGBEE_getendpoints+0xe4>)
 8009ad4:	6858      	ldr	r0, [r3, #4]
 8009ad6:	1d39      	adds	r1, r7, #4
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4a0d      	ldr	r2, [pc, #52]	; (8009b10 <APP_ZIGBEE_getendpoints+0xf8>)
 8009adc:	f008 fb3c 	bl	8012158 <ZbZdoActiveEpReq>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  UNUSED(ActiveEPReqStatus);
	//APP_DBG("set CFG_TASK_mytask_getendpoints prio to 0");
	//UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_mytask_getendpoints, CFG_SCH_PRIO_0);


}
 8009ae6:	3738      	adds	r7, #56	; 0x38
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	f3af 8000 	nop.w
 8009af0:	fe02386a 	.word	0xfe02386a
 8009af4:	003c84ff 	.word	0x003c84ff
 8009af8:	080164d4 	.word	0x080164d4
 8009afc:	200004e8 	.word	0x200004e8
 8009b00:	080164f4 	.word	0x080164f4
 8009b04:	08016520 	.word	0x08016520
 8009b08:	08016550 	.word	0x08016550
 8009b0c:	0800999d 	.word	0x0800999d
 8009b10:	080098ad 	.word	0x080098ad

08009b14 <APP_ZIGBEE_discoverCluster_cb>:

static void APP_ZIGBEE_discoverCluster_cb(struct ZbZdoSimpleDescRspT *rsp, void *cb_arg)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b09a      	sub	sp, #104	; 0x68
 8009b18:	af02      	add	r7, sp, #8
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
    uint8_t outputClusterCount; < Application output cluster count
    uint16_t outputClusterList[ZB_ZDO_CLUSTER_LIST_MAX_SZ]; < Application output cluster list */

	struct ZbSimpleDescriptorT simpleDescReceived;

	if (rsp->status == ZB_STATUS_SUCCESS)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d15c      	bne.n	8009be0 <APP_ZIGBEE_discoverCluster_cb+0xcc>
	{
		APP_DBG("%s : discoverCluster Callback success = 0x%02x", __func__, rsp->status);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	4b31      	ldr	r3, [pc, #196]	; (8009bf4 <APP_ZIGBEE_discoverCluster_cb+0xe0>)
 8009b2e:	4a32      	ldr	r2, [pc, #200]	; (8009bf8 <APP_ZIGBEE_discoverCluster_cb+0xe4>)
 8009b30:	2101      	movs	r1, #1
 8009b32:	2000      	movs	r0, #0
 8009b34:	f7ff f85c 	bl	8008bf0 <logApplication>
		APP_DBG("discoverCluster Callback success endpoint = 0x%02x", rsp->simpleDesc.endpoint);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	791b      	ldrb	r3, [r3, #4]
 8009b3c:	4a2f      	ldr	r2, [pc, #188]	; (8009bfc <APP_ZIGBEE_discoverCluster_cb+0xe8>)
 8009b3e:	2101      	movs	r1, #1
 8009b40:	2000      	movs	r0, #0
 8009b42:	f7ff f855 	bl	8008bf0 <logApplication>
		APP_DBG("discoverCluster Callback success profileId = 0x%02x",  rsp->simpleDesc.profileId);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	88db      	ldrh	r3, [r3, #6]
 8009b4a:	4a2d      	ldr	r2, [pc, #180]	; (8009c00 <APP_ZIGBEE_discoverCluster_cb+0xec>)
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	2000      	movs	r0, #0
 8009b50:	f7ff f84e 	bl	8008bf0 <logApplication>
		APP_DBG("discoverCluster Callback success deviceId = 0x%02x",  rsp->simpleDesc.deviceId);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	891b      	ldrh	r3, [r3, #8]
 8009b58:	4a2a      	ldr	r2, [pc, #168]	; (8009c04 <APP_ZIGBEE_discoverCluster_cb+0xf0>)
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f7ff f847 	bl	8008bf0 <logApplication>
		APP_DBG("discoverCluster Callback success outputClusterCount = 0x%02x",  rsp->simpleDesc.outputClusterCount);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b68:	4a27      	ldr	r2, [pc, #156]	; (8009c08 <APP_ZIGBEE_discoverCluster_cb+0xf4>)
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f7ff f83f 	bl	8008bf0 <logApplication>

		for (int i = 0; i< rsp->simpleDesc.outputClusterCount ; i++ )
 8009b72:	2300      	movs	r3, #0
 8009b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b76:	e00d      	b.n	8009b94 <APP_ZIGBEE_discoverCluster_cb+0x80>
		{
			APP_DBG("discoverCluster Callback success outputCluster [i] = 0x%04x",  rsp->simpleDesc.outputClusterList[i]);
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b7c:	3314      	adds	r3, #20
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	4413      	add	r3, r2
 8009b82:	88db      	ldrh	r3, [r3, #6]
 8009b84:	4a21      	ldr	r2, [pc, #132]	; (8009c0c <APP_ZIGBEE_discoverCluster_cb+0xf8>)
 8009b86:	2101      	movs	r1, #1
 8009b88:	2000      	movs	r0, #0
 8009b8a:	f7ff f831 	bl	8008bf0 <logApplication>
		for (int i = 0; i< rsp->simpleDesc.outputClusterCount ; i++ )
 8009b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b90:	3301      	adds	r3, #1
 8009b92:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	dbea      	blt.n	8009b78 <APP_ZIGBEE_discoverCluster_cb+0x64>
		}
		APP_DBG("discoverCluster Callback success inputClusterCount = 0x%02x",  rsp->simpleDesc.inputClusterCount);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7adb      	ldrb	r3, [r3, #11]
 8009ba6:	4a1a      	ldr	r2, [pc, #104]	; (8009c10 <APP_ZIGBEE_discoverCluster_cb+0xfc>)
 8009ba8:	2101      	movs	r1, #1
 8009baa:	2000      	movs	r0, #0
 8009bac:	f7ff f820 	bl	8008bf0 <logApplication>
		for (int i = 0; i< rsp->simpleDesc.inputClusterCount ; i++ )
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bb4:	e00d      	b.n	8009bd2 <APP_ZIGBEE_discoverCluster_cb+0xbe>
				{
					APP_DBG("discoverCluster Callback success inputCluster [i] = 0x%04x",  rsp->simpleDesc.inputClusterList[i]);
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bba:	3304      	adds	r3, #4
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	4413      	add	r3, r2
 8009bc0:	889b      	ldrh	r3, [r3, #4]
 8009bc2:	4a14      	ldr	r2, [pc, #80]	; (8009c14 <APP_ZIGBEE_discoverCluster_cb+0x100>)
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	f7ff f812 	bl	8008bf0 <logApplication>
		for (int i = 0; i< rsp->simpleDesc.inputClusterCount ; i++ )
 8009bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bce:	3301      	adds	r3, #1
 8009bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	7adb      	ldrb	r3, [r3, #11]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	dbeb      	blt.n	8009bb6 <APP_ZIGBEE_discoverCluster_cb+0xa2>
		/* Unknown endpoint */
		//return ZCL_STATUS_FAILURE;
		APP_DBG("discoverCluster Callback fail");
	}

}
 8009bde:	e004      	b.n	8009bea <APP_ZIGBEE_discoverCluster_cb+0xd6>
		APP_DBG("discoverCluster Callback fail");
 8009be0:	4a0d      	ldr	r2, [pc, #52]	; (8009c18 <APP_ZIGBEE_discoverCluster_cb+0x104>)
 8009be2:	2101      	movs	r1, #1
 8009be4:	2000      	movs	r0, #0
 8009be6:	f7ff f803 	bl	8008bf0 <logApplication>
}
 8009bea:	bf00      	nop
 8009bec:	3760      	adds	r7, #96	; 0x60
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	08016d8c 	.word	0x08016d8c
 8009bf8:	0801656c 	.word	0x0801656c
 8009bfc:	0801659c 	.word	0x0801659c
 8009c00:	080165d0 	.word	0x080165d0
 8009c04:	08016604 	.word	0x08016604
 8009c08:	08016638 	.word	0x08016638
 8009c0c:	08016678 	.word	0x08016678
 8009c10:	080166b4 	.word	0x080166b4
 8009c14:	080166f0 	.word	0x080166f0
 8009c18:	0801672c 	.word	0x0801672c

08009c1c <APP_ZIGBEE_discoverCluster>:

static void APP_ZIGBEE_discoverCluster(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
	uint64_t epid = 0U;
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	f04f 0300 	mov.w	r3, #0
 8009c2a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	enum ZclDataTypeT type = ZCL_DATATYPE_SIGNED_16BIT;
 8009c2e:	2329      	movs	r3, #41	; 0x29
 8009c30:	75fb      	strb	r3, [r7, #23]
	enum ZclStatusCodeT discoverClusterStatus;
    struct ZbZdoSimpleDescReqT discoverClusterReq;

    APP_DBG("start discoverCluster");
 8009c32:	4a1a      	ldr	r2, [pc, #104]	; (8009c9c <APP_ZIGBEE_discoverCluster+0x80>)
 8009c34:	2101      	movs	r1, #1
 8009c36:	2000      	movs	r0, #0
 8009c38:	f7fe ffda 	bl	8008bf0 <logApplication>
	memset(&discoverClusterReq, 0, sizeof(discoverClusterReq));
 8009c3c:	463b      	mov	r3, r7
 8009c3e:	2206      	movs	r2, #6
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f00a ff3a 	bl	8014abc <memset>
	discoverClusterReq.nwkAddrOfInterest = zigbee_app_info.thermshortaddr;
 8009c48:	4b15      	ldr	r3, [pc, #84]	; (8009ca0 <APP_ZIGBEE_discoverCluster+0x84>)
 8009c4a:	f8b3 3220 	ldrh.w	r3, [r3, #544]	; 0x220
 8009c4e:	807b      	strh	r3, [r7, #2]
	discoverClusterReq.dstNwkAddr = zigbee_app_info.thermshortaddr;
 8009c50:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <APP_ZIGBEE_discoverCluster+0x84>)
 8009c52:	f8b3 3220 	ldrh.w	r3, [r3, #544]	; 0x220
 8009c56:	803b      	strh	r3, [r7, #0]
	discoverClusterReq.endpt = zigbee_app_info.ep[0];
 8009c58:	4b11      	ldr	r3, [pc, #68]	; (8009ca0 <APP_ZIGBEE_discoverCluster+0x84>)
 8009c5a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	713b      	strb	r3, [r7, #4]

	  if(zigbee_app_info.epCount == 0)
 8009c62:	4b0f      	ldr	r3, [pc, #60]	; (8009ca0 <APP_ZIGBEE_discoverCluster+0x84>)
 8009c64:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d105      	bne.n	8009c78 <APP_ZIGBEE_discoverCluster+0x5c>
	  {
		APP_DBG("getendpoints : zigbee_app_info.epCount == 0");
 8009c6c:	4a0d      	ldr	r2, [pc, #52]	; (8009ca4 <APP_ZIGBEE_discoverCluster+0x88>)
 8009c6e:	2101      	movs	r1, #1
 8009c70:	2000      	movs	r0, #0
 8009c72:	f7fe ffbd 	bl	8008bf0 <logApplication>
 8009c76:	e00d      	b.n	8009c94 <APP_ZIGBEE_discoverCluster+0x78>
	    return;
	  }
	  APP_DBG("For EP [0] dicoverCluster:");
 8009c78:	4a0b      	ldr	r2, [pc, #44]	; (8009ca8 <APP_ZIGBEE_discoverCluster+0x8c>)
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	f7fe ffb7 	bl	8008bf0 <logApplication>
	  discoverClusterStatus =  ZbZdoSimpleDescReq(zigbee_app_info.zb, &discoverClusterReq, &APP_ZIGBEE_discoverCluster_cb, NULL);
 8009c82:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <APP_ZIGBEE_discoverCluster+0x84>)
 8009c84:	6858      	ldr	r0, [r3, #4]
 8009c86:	4639      	mov	r1, r7
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4a08      	ldr	r2, [pc, #32]	; (8009cac <APP_ZIGBEE_discoverCluster+0x90>)
 8009c8c:	f008 fa26 	bl	80120dc <ZbZdoSimpleDescReq>
 8009c90:	4603      	mov	r3, r0
 8009c92:	71fb      	strb	r3, [r7, #7]
	  UNUSED(discoverClusterStatus);
}
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0801674c 	.word	0x0801674c
 8009ca0:	200004e8 	.word	0x200004e8
 8009ca4:	08016764 	.word	0x08016764
 8009ca8:	08016790 	.word	0x08016790
 8009cac:	08009b15 	.word	0x08009b15

08009cb0 <asgn_dst_addr_cb>:


/*find the short address of the thermostat*/
static void asgn_dst_addr_cb(struct ZbZdoNwkAddrRspT  *rsp, void *cb_arg)
	{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
		if (rsp->status == ZB_STATUS_SUCCESS)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d12c      	bne.n	8009d1c <asgn_dst_addr_cb+0x6c>
		{
			APP_DBG("%s : Shortrequest_cb Callback success status = 0x%02x", __func__, rsp->status);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	4b19      	ldr	r3, [pc, #100]	; (8009d30 <asgn_dst_addr_cb+0x80>)
 8009cca:	4a1a      	ldr	r2, [pc, #104]	; (8009d34 <asgn_dst_addr_cb+0x84>)
 8009ccc:	2101      	movs	r1, #1
 8009cce:	2000      	movs	r0, #0
 8009cd0:	f7fe ff8e 	bl	8008bf0 <logApplication>
			zigbee_app_info.thermshortaddr = rsp->nwkAddr;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8a1a      	ldrh	r2, [r3, #16]
 8009cd8:	4b17      	ldr	r3, [pc, #92]	; (8009d38 <asgn_dst_addr_cb+0x88>)
 8009cda:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
			zigbee_app_info.thermep = ICON_ENDPOINT;
 8009cde:	4b16      	ldr	r3, [pc, #88]	; (8009d38 <asgn_dst_addr_cb+0x88>)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
		    APP_DBG("zigbee_app_info.thermextaddr extAddr = 0x%16x",  zigbee_app_info.thermextaddr);
 8009ce6:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <asgn_dst_addr_cb+0x88>)
 8009ce8:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 8009cec:	e9cd 2300 	strd	r2, r3, [sp]
 8009cf0:	4a12      	ldr	r2, [pc, #72]	; (8009d3c <asgn_dst_addr_cb+0x8c>)
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	f7fe ff7b 	bl	8008bf0 <logApplication>
			APP_DBG("zigbee_app_info.thermshortaddr nwkAddr = 0x%02x",  zigbee_app_info.thermshortaddr);
 8009cfa:	4b0f      	ldr	r3, [pc, #60]	; (8009d38 <asgn_dst_addr_cb+0x88>)
 8009cfc:	f8b3 3220 	ldrh.w	r3, [r3, #544]	; 0x220
 8009d00:	4a0f      	ldr	r2, [pc, #60]	; (8009d40 <asgn_dst_addr_cb+0x90>)
 8009d02:	2101      	movs	r1, #1
 8009d04:	2000      	movs	r0, #0
 8009d06:	f7fe ff73 	bl	8008bf0 <logApplication>
			APP_DBG("zigbee_app_info.thermep EP = 0x%02x",  zigbee_app_info.thermep);
 8009d0a:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <asgn_dst_addr_cb+0x88>)
 8009d0c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8009d10:	4a0c      	ldr	r2, [pc, #48]	; (8009d44 <asgn_dst_addr_cb+0x94>)
 8009d12:	2101      	movs	r1, #1
 8009d14:	2000      	movs	r0, #0
 8009d16:	f7fe ff6b 	bl	8008bf0 <logApplication>
		else
		{
			APP_DBG("Short request  Callback fail");
		}

	}
 8009d1a:	e004      	b.n	8009d26 <asgn_dst_addr_cb+0x76>
			APP_DBG("Short request  Callback fail");
 8009d1c:	4a0a      	ldr	r2, [pc, #40]	; (8009d48 <asgn_dst_addr_cb+0x98>)
 8009d1e:	2101      	movs	r1, #1
 8009d20:	2000      	movs	r0, #0
 8009d22:	f7fe ff65 	bl	8008bf0 <logApplication>
	}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	08016dac 	.word	0x08016dac
 8009d34:	0801643c 	.word	0x0801643c
 8009d38:	200004e8 	.word	0x200004e8
 8009d3c:	080167ac 	.word	0x080167ac
 8009d40:	080167dc 	.word	0x080167dc
 8009d44:	0801680c 	.word	0x0801680c
 8009d48:	080164b4 	.word	0x080164b4

08009d4c <APP_ZIGBEE_asgn_dst_addr>:

static void APP_ZIGBEE_asgn_dst_addr(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
	uint64_t epid = 0U;
 8009d52:	f04f 0200 	mov.w	r2, #0
 8009d56:	f04f 0300 	mov.w	r3, #0
 8009d5a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	  if(zigbee_app_info.zb == NULL){
 8009d5e:	4b21      	ldr	r3, [pc, #132]	; (8009de4 <APP_ZIGBEE_asgn_dst_addr+0x98>)
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d105      	bne.n	8009d72 <APP_ZIGBEE_asgn_dst_addr+0x26>
		APP_DBG("getendpoints : zigbee_app_info.zb == NULL");
 8009d66:	4a20      	ldr	r2, [pc, #128]	; (8009de8 <APP_ZIGBEE_asgn_dst_addr+0x9c>)
 8009d68:	2101      	movs	r1, #1
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	f7fe ff40 	bl	8008bf0 <logApplication>
		return;
 8009d70:	e035      	b.n	8009dde <APP_ZIGBEE_asgn_dst_addr+0x92>
	  }
	  /* Check if the router joined the network */
	  if (ZbNwkGet(zigbee_app_info.zb, ZB_NWK_NIB_ID_ExtendedPanId, &epid, sizeof(epid)) != ZB_STATUS_SUCCESS) {
 8009d72:	4b1c      	ldr	r3, [pc, #112]	; (8009de4 <APP_ZIGBEE_asgn_dst_addr+0x98>)
 8009d74:	6858      	ldr	r0, [r3, #4]
 8009d76:	f107 0218 	add.w	r2, r7, #24
 8009d7a:	2308      	movs	r3, #8
 8009d7c:	219a      	movs	r1, #154	; 0x9a
 8009d7e:	f008 f947 	bl	8012010 <ZbNwkGet>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <APP_ZIGBEE_asgn_dst_addr+0x48>
		APP_DBG("getendpoints : ZbNwkGet != ZB_STATUS_SUCCESS");
 8009d88:	4a18      	ldr	r2, [pc, #96]	; (8009dec <APP_ZIGBEE_asgn_dst_addr+0xa0>)
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	f7fe ff2f 	bl	8008bf0 <logApplication>
		return;
 8009d92:	e024      	b.n	8009dde <APP_ZIGBEE_asgn_dst_addr+0x92>
	  }
	  if (epid == 0U) {
 8009d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	d105      	bne.n	8009da8 <APP_ZIGBEE_asgn_dst_addr+0x5c>
		APP_DBG("getendpoints : epid == 0U");
 8009d9c:	4a14      	ldr	r2, [pc, #80]	; (8009df0 <APP_ZIGBEE_asgn_dst_addr+0xa4>)
 8009d9e:	2101      	movs	r1, #1
 8009da0:	2000      	movs	r0, #0
 8009da2:	f7fe ff25 	bl	8008bf0 <logApplication>
		return;
 8009da6:	e01a      	b.n	8009dde <APP_ZIGBEE_asgn_dst_addr+0x92>
	  }

	struct ZbZdoNwkAddrReqT shortrequest;
	shortrequest.extAddr = zigbee_app_info.thermextaddr;//0x003c84fffe02386a;
 8009da8:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <APP_ZIGBEE_asgn_dst_addr+0x98>)
 8009daa:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 8009dae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	shortrequest.dstNwkAddr = 0xfffd;
 8009db2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8009db6:	803b      	strh	r3, [r7, #0]
	shortrequest.reqType = ZB_ZDO_ADDR_REQ_TYPE_SINGLE;
 8009db8:	2300      	movs	r3, #0
 8009dba:	743b      	strb	r3, [r7, #16]
	shortrequest.startIndex = 0;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	747b      	strb	r3, [r7, #17]
	if (ZbZdoNwkAddrReq(zigbee_app_info.zb, &shortrequest, &asgn_dst_addr_cb, NULL)== ZB_STATUS_SUCCESS)
 8009dc0:	4b08      	ldr	r3, [pc, #32]	; (8009de4 <APP_ZIGBEE_asgn_dst_addr+0x98>)
 8009dc2:	6858      	ldr	r0, [r3, #4]
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4a0a      	ldr	r2, [pc, #40]	; (8009df4 <APP_ZIGBEE_asgn_dst_addr+0xa8>)
 8009dca:	f008 f94b 	bl	8012064 <ZbZdoNwkAddrReq>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d104      	bne.n	8009dde <APP_ZIGBEE_asgn_dst_addr+0x92>
	{
		APP_DBG("Thermostat address assigned");
 8009dd4:	4a08      	ldr	r2, [pc, #32]	; (8009df8 <APP_ZIGBEE_asgn_dst_addr+0xac>)
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	2000      	movs	r0, #0
 8009dda:	f7fe ff09 	bl	8008bf0 <logApplication>
	}
}
 8009dde:	3720      	adds	r7, #32
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	200004e8 	.word	0x200004e8
 8009de8:	080164f4 	.word	0x080164f4
 8009dec:	08016520 	.word	0x08016520
 8009df0:	08016550 	.word	0x08016550
 8009df4:	08009cb1 	.word	0x08009cb1
 8009df8:	08016830 	.word	0x08016830

08009dfc <device_temp_read_cb>:
/*END find short address of thermostat*/

/*BEGIN Readvalue*/

static void device_temp_read_cb(const ZbZclReadRspT *readRsp, void *arg)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  int16_t min_temp;
  int16_t max_temp;
  //int16_t info1;
  //int16_t info2;

  for(i=0;i<readRsp->count;i++)
 8009e06:	2300      	movs	r3, #0
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	e0a8      	b.n	8009f5e <device_temp_read_cb+0x162>
  {
    if(readRsp->attr[i].status == ZCL_STATUS_SUCCESS)
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	3302      	adds	r3, #2
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	4413      	add	r3, r2
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f040 808f 	bne.w	8009f3c <device_temp_read_cb+0x140>
    {
      switch(readRsp->attr[i].attrId)
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	3302      	adds	r3, #2
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	4413      	add	r3, r2
 8009e28:	3302      	adds	r3, #2
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	2b12      	cmp	r3, #18
 8009e2e:	d05b      	beq.n	8009ee8 <device_temp_read_cb+0xec>
 8009e30:	2b12      	cmp	r3, #18
 8009e32:	f300 8090 	bgt.w	8009f56 <device_temp_read_cb+0x15a>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <device_temp_read_cb+0x44>
 8009e3a:	2b11      	cmp	r3, #17
 8009e3c:	d02a      	beq.n	8009e94 <device_temp_read_cb+0x98>
      case SetpointChangeSource:
    	info2 = pletoh16(readRsp->attr[i].value);
		APP_DBG("[DEV TEMP] Setpoint Change Source (0x00 - Manual, 0x02 - External attribute )= 0x%02x",max_temp);
		break;*/
      default:
        break;
 8009e3e:	e08a      	b.n	8009f56 <device_temp_read_cb+0x15a>
        current_temp = pletoh16(readRsp->attr[i].value);
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	4413      	add	r3, r2
 8009e48:	3328      	adds	r3, #40	; 0x28
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7f6 f9a5 	bl	800019c <pletoh16>
 8009e52:	4603      	mov	r3, r0
 8009e54:	81fb      	strh	r3, [r7, #14]
        APP_DBG("[DEV TEMP]Current Temperature= %d,%dC",current_temp/100, current_temp%100);
 8009e56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009e5a:	4a46      	ldr	r2, [pc, #280]	; (8009f74 <device_temp_read_cb+0x178>)
 8009e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8009e60:	1152      	asrs	r2, r2, #5
 8009e62:	17db      	asrs	r3, r3, #31
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	b21b      	sxth	r3, r3
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009e6e:	4a41      	ldr	r2, [pc, #260]	; (8009f74 <device_temp_read_cb+0x178>)
 8009e70:	fb82 1203 	smull	r1, r2, r2, r3
 8009e74:	1151      	asrs	r1, r2, #5
 8009e76:	17da      	asrs	r2, r3, #31
 8009e78:	1a8a      	subs	r2, r1, r2
 8009e7a:	2164      	movs	r1, #100	; 0x64
 8009e7c:	fb01 f202 	mul.w	r2, r1, r2
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	b21b      	sxth	r3, r3
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	4603      	mov	r3, r0
 8009e88:	4a3b      	ldr	r2, [pc, #236]	; (8009f78 <device_temp_read_cb+0x17c>)
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	f7fe feaf 	bl	8008bf0 <logApplication>
        break;
 8009e92:	e061      	b.n	8009f58 <device_temp_read_cb+0x15c>
        min_temp = pletoh16(readRsp->attr[i].value);
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	011b      	lsls	r3, r3, #4
 8009e9a:	4413      	add	r3, r2
 8009e9c:	3328      	adds	r3, #40	; 0x28
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7f6 f97b 	bl	800019c <pletoh16>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	823b      	strh	r3, [r7, #16]
        APP_DBG("[DEV TEMP] Min set Temperature= %d,%dC",min_temp/100,min_temp%100);
 8009eaa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009eae:	4a31      	ldr	r2, [pc, #196]	; (8009f74 <device_temp_read_cb+0x178>)
 8009eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8009eb4:	1152      	asrs	r2, r2, #5
 8009eb6:	17db      	asrs	r3, r3, #31
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	b21b      	sxth	r3, r3
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009ec2:	4a2c      	ldr	r2, [pc, #176]	; (8009f74 <device_temp_read_cb+0x178>)
 8009ec4:	fb82 1203 	smull	r1, r2, r2, r3
 8009ec8:	1151      	asrs	r1, r2, #5
 8009eca:	17da      	asrs	r2, r3, #31
 8009ecc:	1a8a      	subs	r2, r1, r2
 8009ece:	2164      	movs	r1, #100	; 0x64
 8009ed0:	fb01 f202 	mul.w	r2, r1, r2
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	b21b      	sxth	r3, r3
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	4603      	mov	r3, r0
 8009edc:	4a27      	ldr	r2, [pc, #156]	; (8009f7c <device_temp_read_cb+0x180>)
 8009ede:	2101      	movs	r1, #1
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	f7fe fe85 	bl	8008bf0 <logApplication>
        break;
 8009ee6:	e037      	b.n	8009f58 <device_temp_read_cb+0x15c>
        max_temp = pletoh16(readRsp->attr[i].value);
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	011b      	lsls	r3, r3, #4
 8009eee:	4413      	add	r3, r2
 8009ef0:	3328      	adds	r3, #40	; 0x28
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7f6 f951 	bl	800019c <pletoh16>
 8009efa:	4603      	mov	r3, r0
 8009efc:	827b      	strh	r3, [r7, #18]
        APP_DBG("[DEV TEMP] Max set Temperature= %d,%dC",max_temp/100,max_temp%100);
 8009efe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f02:	4a1c      	ldr	r2, [pc, #112]	; (8009f74 <device_temp_read_cb+0x178>)
 8009f04:	fb82 1203 	smull	r1, r2, r2, r3
 8009f08:	1152      	asrs	r2, r2, #5
 8009f0a:	17db      	asrs	r3, r3, #31
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	b21b      	sxth	r3, r3
 8009f10:	4618      	mov	r0, r3
 8009f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f16:	4a17      	ldr	r2, [pc, #92]	; (8009f74 <device_temp_read_cb+0x178>)
 8009f18:	fb82 1203 	smull	r1, r2, r2, r3
 8009f1c:	1151      	asrs	r1, r2, #5
 8009f1e:	17da      	asrs	r2, r3, #31
 8009f20:	1a8a      	subs	r2, r1, r2
 8009f22:	2164      	movs	r1, #100	; 0x64
 8009f24:	fb01 f202 	mul.w	r2, r1, r2
 8009f28:	1a9b      	subs	r3, r3, r2
 8009f2a:	b21b      	sxth	r3, r3
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	4603      	mov	r3, r0
 8009f30:	4a13      	ldr	r2, [pc, #76]	; (8009f80 <device_temp_read_cb+0x184>)
 8009f32:	2101      	movs	r1, #1
 8009f34:	2000      	movs	r0, #0
 8009f36:	f7fe fe5b 	bl	8008bf0 <logApplication>
        break;
 8009f3a:	e00d      	b.n	8009f58 <device_temp_read_cb+0x15c>
      }
    }
    else
    {
      APP_DBG("[DEV TEMP] Failed to read attribute %d",readRsp->attr[i].attrId);
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	3302      	adds	r3, #2
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	4413      	add	r3, r2
 8009f46:	3302      	adds	r3, #2
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	4a0e      	ldr	r2, [pc, #56]	; (8009f84 <device_temp_read_cb+0x188>)
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	2000      	movs	r0, #0
 8009f50:	f7fe fe4e 	bl	8008bf0 <logApplication>
 8009f54:	e000      	b.n	8009f58 <device_temp_read_cb+0x15c>
        break;
 8009f56:	bf00      	nop
  for(i=0;i<readRsp->count;i++)
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69da      	ldr	r2, [r3, #28]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	f63f af51 	bhi.w	8009e0c <device_temp_read_cb+0x10>
    }
  }
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	51eb851f 	.word	0x51eb851f
 8009f78:	0801684c 	.word	0x0801684c
 8009f7c:	08016874 	.word	0x08016874
 8009f80:	0801689c 	.word	0x0801689c
 8009f84:	080168c4 	.word	0x080168c4

08009f88 <APP_ZIGBEE_ReadValue>:


static void APP_ZIGBEE_ReadValue(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af00      	add	r7, sp, #0
	ZbZclReadReqT readReq;
	uint64_t epid = 0U;
 8009f8e:	f04f 0200 	mov.w	r2, #0
 8009f92:	f04f 0300 	mov.w	r3, #0
 8009f96:	e9c7 2300 	strd	r2, r3, [r7]
	if(zigbee_app_info.zb == NULL)
 8009f9a:	4b25      	ldr	r3, [pc, #148]	; (800a030 <APP_ZIGBEE_ReadValue+0xa8>)
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d03d      	beq.n	800a01e <APP_ZIGBEE_ReadValue+0x96>
	{
		return;
	}
	  /* Check if the router joined the network */
	if (ZbNwkGet(zigbee_app_info.zb, ZB_NWK_NIB_ID_ExtendedPanId, &epid, sizeof(epid)) != ZB_STATUS_SUCCESS) {
 8009fa2:	4b23      	ldr	r3, [pc, #140]	; (800a030 <APP_ZIGBEE_ReadValue+0xa8>)
 8009fa4:	6858      	ldr	r0, [r3, #4]
 8009fa6:	463a      	mov	r2, r7
 8009fa8:	2308      	movs	r3, #8
 8009faa:	219a      	movs	r1, #154	; 0x9a
 8009fac:	f008 f830 	bl	8012010 <ZbNwkGet>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d135      	bne.n	800a022 <APP_ZIGBEE_ReadValue+0x9a>
		return;
	}
	if (epid == 0U)
 8009fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	d033      	beq.n	800a026 <APP_ZIGBEE_ReadValue+0x9e>
	{
		return;
	}
	memset(&readReq, 0, sizeof(readReq));
 8009fbe:	f107 0308 	add.w	r3, r7, #8
 8009fc2:	2228      	movs	r2, #40	; 0x28
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f00a fd78 	bl	8014abc <memset>
	readReq.dst.mode = ZB_APSDE_ADDRMODE_SHORT;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	723b      	strb	r3, [r7, #8]
	readReq.dst.endpoint = ICON_ENDPOINT;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	817b      	strh	r3, [r7, #10]
	readReq.dst.nwkAddr = zigbee_app_info.thermshortaddr;//zigbee_app_info.nwkAddr;//0x0000
 8009fd4:	4b16      	ldr	r3, [pc, #88]	; (800a030 <APP_ZIGBEE_ReadValue+0xa8>)
 8009fd6:	f8b3 3220 	ldrh.w	r3, [r3, #544]	; 0x220
 8009fda:	81fb      	strh	r3, [r7, #14]
	readReq.count = 3U;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	61bb      	str	r3, [r7, #24]
	readReq.attr[0]=ZCL_THERM_SVR_ATTR_LOCAL_TEMP ;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	83bb      	strh	r3, [r7, #28]
	readReq.attr[1]=ZCL_THERM_SVR_ATTR_OCCUP_COOL_SETPOINT;
 8009fe4:	2311      	movs	r3, #17
 8009fe6:	83fb      	strh	r3, [r7, #30]
	readReq.attr[2]=ZCL_THERM_SVR_ATTR_OCCUP_HEAT_SETPOINT ;
 8009fe8:	2312      	movs	r3, #18
 8009fea:	843b      	strh	r3, [r7, #32]
	//readReq.attr[3]=ExternalMeasuredRoomSensor ;
	//readReq.attr[4]=SetpointChangeSource ;

	APP_DBG("[DEV TEMP] Read Coordinator Temperature Attributes");
 8009fec:	4a11      	ldr	r2, [pc, #68]	; (800a034 <APP_ZIGBEE_ReadValue+0xac>)
 8009fee:	2101      	movs	r1, #1
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f7fe fdfd 	bl	8008bf0 <logApplication>
	if(ZbZclReadReq(zigbee_app_info.device_therm_client, &readReq, device_temp_read_cb, zigbee_app_info.device_therm_client) != ZCL_STATUS_SUCCESS)
 8009ff6:	4b0e      	ldr	r3, [pc, #56]	; (800a030 <APP_ZIGBEE_ReadValue+0xa8>)
 8009ff8:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <APP_ZIGBEE_ReadValue+0xa8>)
 8009ffe:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800a002:	f107 0108 	add.w	r1, r7, #8
 800a006:	4a0c      	ldr	r2, [pc, #48]	; (800a038 <APP_ZIGBEE_ReadValue+0xb0>)
 800a008:	f008 f999 	bl	801233e <ZbZclReadReq>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <APP_ZIGBEE_ReadValue+0xa0>
	{
	    APP_DBG("Error, ZbZclReadReq failed (ICON_ENDPOINT)");
 800a012:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <APP_ZIGBEE_ReadValue+0xb4>)
 800a014:	2101      	movs	r1, #1
 800a016:	2000      	movs	r0, #0
 800a018:	f7fe fdea 	bl	8008bf0 <logApplication>
 800a01c:	e004      	b.n	800a028 <APP_ZIGBEE_ReadValue+0xa0>
		return;
 800a01e:	bf00      	nop
 800a020:	e002      	b.n	800a028 <APP_ZIGBEE_ReadValue+0xa0>
		return;
 800a022:	bf00      	nop
 800a024:	e000      	b.n	800a028 <APP_ZIGBEE_ReadValue+0xa0>
		return;
 800a026:	bf00      	nop
	}
}
 800a028:	3730      	adds	r7, #48	; 0x30
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	200004e8 	.word	0x200004e8
 800a034:	080168ec 	.word	0x080168ec
 800a038:	08009dfd 	.word	0x08009dfd
 800a03c:	08016920 	.word	0x08016920

0800a040 <Bindrequest_cb>:
/*END Readvalue*/

/*BEGIN Bindrequest*/
static void Bindrequest_cb(struct ZbZdoBindRspT *rsp, void *cb_arg)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af02      	add	r7, sp, #8
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
	APP_DBG("Start bindreq callback");
 800a04a:	4a14      	ldr	r2, [pc, #80]	; (800a09c <Bindrequest_cb+0x5c>)
 800a04c:	2101      	movs	r1, #1
 800a04e:	2000      	movs	r0, #0
 800a050:	f7fe fdce 	bl	8008bf0 <logApplication>
	if (rsp->status == ZB_STATUS_SUCCESS)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d115      	bne.n	800a088 <Bindrequest_cb+0x48>
	{
		APP_DBG("%s : Bindrequest_cb success = 0x%02x", __func__, rsp->status);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <Bindrequest_cb+0x60>)
 800a064:	4a0f      	ldr	r2, [pc, #60]	; (800a0a4 <Bindrequest_cb+0x64>)
 800a066:	2101      	movs	r1, #1
 800a068:	2000      	movs	r0, #0
 800a06a:	f7fe fdc1 	bl	8008bf0 <logApplication>
		zigbee_app_info.bindingfinished = 1;
 800a06e:	4b0e      	ldr	r3, [pc, #56]	; (800a0a8 <Bindrequest_cb+0x68>)
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
		APP_DBG("zigbee_app_info.bindingfinished  = %d", zigbee_app_info.bindingfinished);
 800a076:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <Bindrequest_cb+0x68>)
 800a078:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 800a07c:	4a0b      	ldr	r2, [pc, #44]	; (800a0ac <Bindrequest_cb+0x6c>)
 800a07e:	2101      	movs	r1, #1
 800a080:	2000      	movs	r0, #0
 800a082:	f7fe fdb5 	bl	8008bf0 <logApplication>
	}
	else
	{
		APP_DBG("Bindrequest_cb Callback fail");
	}
}
 800a086:	e004      	b.n	800a092 <Bindrequest_cb+0x52>
		APP_DBG("Bindrequest_cb Callback fail");
 800a088:	4a09      	ldr	r2, [pc, #36]	; (800a0b0 <Bindrequest_cb+0x70>)
 800a08a:	2101      	movs	r1, #1
 800a08c:	2000      	movs	r0, #0
 800a08e:	f7fe fdaf 	bl	8008bf0 <logApplication>
}
 800a092:	bf00      	nop
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	0801694c 	.word	0x0801694c
 800a0a0:	08016dc0 	.word	0x08016dc0
 800a0a4:	08016964 	.word	0x08016964
 800a0a8:	200004e8 	.word	0x200004e8
 800a0ac:	0801698c 	.word	0x0801698c
 800a0b0:	080169b4 	.word	0x080169b4

0800a0b4 <APP_ZIGBEE_Bindrequest>:

static void APP_ZIGBEE_Bindrequest(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08c      	sub	sp, #48	; 0x30
 800a0b8:	af00      	add	r7, sp, #0
	APP_DBG("Start bindreq");
 800a0ba:	4a20      	ldr	r2, [pc, #128]	; (800a13c <APP_ZIGBEE_Bindrequest+0x88>)
 800a0bc:	2101      	movs	r1, #1
 800a0be:	2000      	movs	r0, #0
 800a0c0:	f7fe fd96 	bl	8008bf0 <logApplication>
	enum ZbStatusCodeT bindStatus;

	struct ZbZdoBindReqT mybindreq;
	//struct ZbApsAddrT mybindaddr;

	mybindreq.target = (uint16_t)zigbee_app_info.thermshortaddr;
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <APP_ZIGBEE_Bindrequest+0x8c>)
 800a0c6:	f8b3 3220 	ldrh.w	r3, [r3, #544]	; 0x220
 800a0ca:	803b      	strh	r3, [r7, #0]
	mybindreq.srcExtAddr = (uint64_t)zigbee_app_info.thermextaddr;//0x003c84fffe02386a;
 800a0cc:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <APP_ZIGBEE_Bindrequest+0x8c>)
 800a0ce:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 800a0d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	mybindreq.srcEndpt = ICON_ENDPOINT; //0x00
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	743b      	strb	r3, [r7, #16]
	mybindreq.clusterId = ZCL_CLUSTER_HVAC_THERMOSTAT ;//0x0201
 800a0da:	f240 2301 	movw	r3, #513	; 0x201
 800a0de:	827b      	strh	r3, [r7, #18]
	mybindreq.dst.mode = ZB_APSDE_ADDRMODE_EXT;//zigbee.aps.h
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	763b      	strb	r3, [r7, #24]
	mybindreq.dst.endpoint = (uint16_t)ICON_ENDPOINT;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	837b      	strh	r3, [r7, #26]
	mybindreq.dst.extAddr = (uint64_t)zigbee_app_info.extaddr;//ZbExtendedAddress(zigbee_app_info.zb);
 800a0e8:	4b15      	ldr	r3, [pc, #84]	; (800a140 <APP_ZIGBEE_Bindrequest+0x8c>)
 800a0ea:	e9d3 237e 	ldrd	r2, r3, [r3, #504]	; 0x1f8
 800a0ee:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (zigbee_app_info.bindingfinished == 0)
 800a0f2:	4b13      	ldr	r3, [pc, #76]	; (800a140 <APP_ZIGBEE_Bindrequest+0x8c>)
 800a0f4:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 800a0f8:	f083 0301 	eor.w	r3, r3, #1
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00e      	beq.n	800a120 <APP_ZIGBEE_Bindrequest+0x6c>
	{
		APP_DBG("Start binding");
 800a102:	4a10      	ldr	r2, [pc, #64]	; (800a144 <APP_ZIGBEE_Bindrequest+0x90>)
 800a104:	2101      	movs	r1, #1
 800a106:	2000      	movs	r0, #0
 800a108:	f7fe fd72 	bl	8008bf0 <logApplication>
		bindStatus = ZbZdoBindReq(zigbee_app_info.zb, &mybindreq, &Bindrequest_cb, NULL);
 800a10c:	4b0c      	ldr	r3, [pc, #48]	; (800a140 <APP_ZIGBEE_Bindrequest+0x8c>)
 800a10e:	6858      	ldr	r0, [r3, #4]
 800a110:	4639      	mov	r1, r7
 800a112:	2300      	movs	r3, #0
 800a114:	4a0c      	ldr	r2, [pc, #48]	; (800a148 <APP_ZIGBEE_Bindrequest+0x94>)
 800a116:	f008 f85d 	bl	80121d4 <ZbZdoBindReq>
 800a11a:	4603      	mov	r3, r0
 800a11c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	if (zigbee_app_info.bindingfinished == 1)
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <APP_ZIGBEE_Bindrequest+0x8c>)
 800a122:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 800a126:	2b00      	cmp	r3, #0
 800a128:	d004      	beq.n	800a134 <APP_ZIGBEE_Bindrequest+0x80>
	{
		APP_DBG("Binding already done");
 800a12a:	4a08      	ldr	r2, [pc, #32]	; (800a14c <APP_ZIGBEE_Bindrequest+0x98>)
 800a12c:	2101      	movs	r1, #1
 800a12e:	2000      	movs	r0, #0
 800a130:	f7fe fd5e 	bl	8008bf0 <logApplication>
		return;
	}
	UNUSED(bindStatus);
	//UNUSED(mybindaddr);
}
 800a134:	3730      	adds	r7, #48	; 0x30
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	080169d4 	.word	0x080169d4
 800a140:	200004e8 	.word	0x200004e8
 800a144:	080169e4 	.word	0x080169e4
 800a148:	0800a041 	.word	0x0800a041
 800a14c:	080169f4 	.word	0x080169f4

0800a150 <ReportConfig_cb>:



/*BEGIN ReportConfig*/
static void ReportConfig_cb(struct ZbZclCommandRspT  *cmd_rsp, void *arg)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af02      	add	r7, sp, #8
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
	APP_DBG("Start report configure callback");
 800a15a:	4a14      	ldr	r2, [pc, #80]	; (800a1ac <ReportConfig_cb+0x5c>)
 800a15c:	2101      	movs	r1, #1
 800a15e:	2000      	movs	r0, #0
 800a160:	f7fe fd46 	bl	8008bf0 <logApplication>
	if (cmd_rsp->status == ZCL_STATUS_SUCCESS)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	785b      	ldrb	r3, [r3, #1]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d115      	bne.n	800a198 <ReportConfig_cb+0x48>
	{
		APP_DBG("%s : ReportConfig_cb success = 0x%02x", __func__, cmd_rsp->status);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	785b      	ldrb	r3, [r3, #1]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <ReportConfig_cb+0x60>)
 800a174:	4a0f      	ldr	r2, [pc, #60]	; (800a1b4 <ReportConfig_cb+0x64>)
 800a176:	2101      	movs	r1, #1
 800a178:	2000      	movs	r0, #0
 800a17a:	f7fe fd39 	bl	8008bf0 <logApplication>
		zigbee_app_info.reportConfigFinished = 1;
 800a17e:	4b0e      	ldr	r3, [pc, #56]	; (800a1b8 <ReportConfig_cb+0x68>)
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
		APP_DBG("zigbee_app_info.bindingfinished  = %d", zigbee_app_info.reportConfigFinished);
 800a186:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <ReportConfig_cb+0x68>)
 800a188:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 800a18c:	4a0b      	ldr	r2, [pc, #44]	; (800a1bc <ReportConfig_cb+0x6c>)
 800a18e:	2101      	movs	r1, #1
 800a190:	2000      	movs	r0, #0
 800a192:	f7fe fd2d 	bl	8008bf0 <logApplication>
	}
	else
	{
		APP_DBG("ReportConfig_cb Callback fail");
	}
}
 800a196:	e004      	b.n	800a1a2 <ReportConfig_cb+0x52>
		APP_DBG("ReportConfig_cb Callback fail");
 800a198:	4a09      	ldr	r2, [pc, #36]	; (800a1c0 <ReportConfig_cb+0x70>)
 800a19a:	2101      	movs	r1, #1
 800a19c:	2000      	movs	r0, #0
 800a19e:	f7fe fd27 	bl	8008bf0 <logApplication>
}
 800a1a2:	bf00      	nop
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	08016a0c 	.word	0x08016a0c
 800a1b0:	08016dd0 	.word	0x08016dd0
 800a1b4:	08016a2c 	.word	0x08016a2c
 800a1b8:	200004e8 	.word	0x200004e8
 800a1bc:	0801698c 	.word	0x0801698c
 800a1c0:	08016a54 	.word	0x08016a54

0800a1c4 <APP_ZIGBEE_ReportConfig>:

static void APP_ZIGBEE_ReportConfig(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b0b8      	sub	sp, #224	; 0xe0
 800a1c8:	af00      	add	r7, sp, #0
	if (zigbee_app_info.reportConfigFinished == 0 && zigbee_app_info.bindingfinished == 1)
 800a1ca:	4b22      	ldr	r3, [pc, #136]	; (800a254 <APP_ZIGBEE_ReportConfig+0x90>)
 800a1cc:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 800a1d0:	f083 0301 	eor.w	r3, r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d029      	beq.n	800a22e <APP_ZIGBEE_ReportConfig+0x6a>
 800a1da:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <APP_ZIGBEE_ReportConfig+0x90>)
 800a1dc:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d024      	beq.n	800a22e <APP_ZIGBEE_ReportConfig+0x6a>
	{
		APP_DBG("Start APP_ZIGBEE_ReportConfig");
 800a1e4:	4a1c      	ldr	r2, [pc, #112]	; (800a258 <APP_ZIGBEE_ReportConfig+0x94>)
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f7fe fd01 	bl	8008bf0 <logApplication>
		enum ZbStatusCodeT reportConfigStatus;
		struct ZbZclAttrReportConfigT reportConfig;
		reportConfig.dst.mode = ZB_APSDE_ADDRMODE_EXT;//zigbee.aps.h
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	703b      	strb	r3, [r7, #0]
		reportConfig.dst.endpoint = ICON_ENDPOINT; //0X01;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	807b      	strh	r3, [r7, #2]
		reportConfig.dst.extAddr = (uint64_t)zigbee_app_info.thermextaddr;//0x003c84fffe02386a;
 800a1f6:	4b17      	ldr	r3, [pc, #92]	; (800a254 <APP_ZIGBEE_ReportConfig+0x90>)
 800a1f8:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 800a1fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		reportConfig.num_records = (uint8_t)3;
 800a200:	2303      	movs	r3, #3
 800a202:	743b      	strb	r3, [r7, #16]
		reportConfig.record_list[0].min = 5;
 800a204:	2305      	movs	r3, #5
 800a206:	83fb      	strh	r3, [r7, #30]
		reportConfig.record_list[0].max = 60;
 800a208:	233c      	movs	r3, #60	; 0x3c
 800a20a:	843b      	strh	r3, [r7, #32]
		reportConfig.record_list[0].attr_id = ZCL_THERM_SVR_ATTR_LOCAL_TEMP;
 800a20c:	2300      	movs	r3, #0
 800a20e:	837b      	strh	r3, [r7, #26]
		reportConfig.record_list[0].attr_type = ZCL_DATATYPE_SIGNED_16BIT;
 800a210:	2329      	movs	r3, #41	; 0x29
 800a212:	773b      	strb	r3, [r7, #28]
		reportConfig.record_list[0].direction = ZCL_REPORT_DIRECTION_NORMAL;
 800a214:	2300      	movs	r3, #0
 800a216:	763b      	strb	r3, [r7, #24]

		reportConfigStatus = ZbZclAttrReportConfigReq(zigbee_app_info.device_therm_client, &reportConfig, &ReportConfig_cb, NULL);
 800a218:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <APP_ZIGBEE_ReportConfig+0x90>)
 800a21a:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
 800a21e:	4639      	mov	r1, r7
 800a220:	2300      	movs	r3, #0
 800a222:	4a0e      	ldr	r2, [pc, #56]	; (800a25c <APP_ZIGBEE_ReportConfig+0x98>)
 800a224:	f7f9 fb72 	bl	800390c <ZbZclAttrReportConfigReq>
 800a228:	4603      	mov	r3, r0
 800a22a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		// ZbZclAttrReportConfigReq(struct ZbZclClusterT *cluster, struct ZbZclAttrReportConfigT *config,cb,NULL)
		UNUSED(reportConfigStatus);
	}
	if (zigbee_app_info.reportConfigFinished == 1 && zigbee_app_info.bindingfinished == 1)
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <APP_ZIGBEE_ReportConfig+0x90>)
 800a230:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <APP_ZIGBEE_ReportConfig+0x8a>
 800a238:	4b06      	ldr	r3, [pc, #24]	; (800a254 <APP_ZIGBEE_ReportConfig+0x90>)
 800a23a:	f893 3225 	ldrb.w	r3, [r3, #549]	; 0x225
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d005      	beq.n	800a24e <APP_ZIGBEE_ReportConfig+0x8a>
	{
		APP_DBG("APP_ZIGBEE_ReportConfig already done");
 800a242:	4a07      	ldr	r2, [pc, #28]	; (800a260 <APP_ZIGBEE_ReportConfig+0x9c>)
 800a244:	2101      	movs	r1, #1
 800a246:	2000      	movs	r0, #0
 800a248:	f7fe fcd2 	bl	8008bf0 <logApplication>
		return;
 800a24c:	bf00      	nop
	}

}
 800a24e:	37e0      	adds	r7, #224	; 0xe0
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	200004e8 	.word	0x200004e8
 800a258:	08016a74 	.word	0x08016a74
 800a25c:	0800a151 	.word	0x0800a151
 800a260:	08016a94 	.word	0x08016a94

0800a264 <ReportRead_cb>:
/*END ReportConfig*/


/*BEGIN ReadRequest*/
static void ReportRead_cb(struct ZbZclCommandRspT  *cmd_rsp, void *arg)
{
 800a264:	b590      	push	{r4, r7, lr}
 800a266:	b08b      	sub	sp, #44	; 0x2c
 800a268:	af02      	add	r7, sp, #8
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
	APP_DBG("Start ReportRead_cb callback");
 800a26e:	4a26      	ldr	r2, [pc, #152]	; (800a308 <ReportRead_cb+0xa4>)
 800a270:	2101      	movs	r1, #1
 800a272:	2000      	movs	r0, #0
 800a274:	f7fe fcbc 	bl	8008bf0 <logApplication>
	if (cmd_rsp->status == ZCL_STATUS_SUCCESS)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	785b      	ldrb	r3, [r3, #1]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d13a      	bne.n	800a2f6 <ReportRead_cb+0x92>
		/*enum ZbZclClusterIdT clusterId;
		  uint8_t linkQuality;
		  struct ZbZclHeaderT hdr;
		  const uint8_t *payload;*/

		APP_DBG("%s : ReportRead_cb success = 0x%02x", __func__, cmd_rsp->status);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	4b21      	ldr	r3, [pc, #132]	; (800a30c <ReportRead_cb+0xa8>)
 800a288:	4a21      	ldr	r2, [pc, #132]	; (800a310 <ReportRead_cb+0xac>)
 800a28a:	2101      	movs	r1, #1
 800a28c:	2000      	movs	r0, #0
 800a28e:	f7fe fcaf 	bl	8008bf0 <logApplication>
		APP_DBG("ReportRead_cb manufacturerCode = 0x%02x",  cmd_rsp->hdr.manufacturerCode);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a296:	4a1f      	ldr	r2, [pc, #124]	; (800a314 <ReportRead_cb+0xb0>)
 800a298:	2101      	movs	r1, #1
 800a29a:	2000      	movs	r0, #0
 800a29c:	f7fe fca8 	bl	8008bf0 <logApplication>
		APP_DBG("ReportRead_cb payload = 0x%02x",  cmd_rsp->payload);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a4:	4a1c      	ldr	r2, [pc, #112]	; (800a318 <ReportRead_cb+0xb4>)
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f7fe fca1 	bl	8008bf0 <logApplication>

		enum ZbStatusCodeT AttrReadStatus;
		uint64_t epid = 0U;
 800a2ae:	f04f 0200 	mov.w	r2, #0
 800a2b2:	f04f 0300 	mov.w	r3, #0
 800a2b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		enum ZclDataTypeT type = ZCL_DATATYPE_SIGNED_16BIT;
 800a2ba:	2329      	movs	r3, #41	; 0x29
 800a2bc:	73fb      	strb	r3, [r7, #15]
		AttrReadStatus = ZbZclAttrRead(zigbee_app_info.device_therm_client, zigbee_app_info.thermshortaddr, &type, &epid, 40, 0);
 800a2be:	4b17      	ldr	r3, [pc, #92]	; (800a31c <ReportRead_cb+0xb8>)
 800a2c0:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
 800a2c4:	4b15      	ldr	r3, [pc, #84]	; (800a31c <ReportRead_cb+0xb8>)
 800a2c6:	f8b3 1220 	ldrh.w	r1, [r3, #544]	; 0x220
 800a2ca:	f107 0310 	add.w	r3, r7, #16
 800a2ce:	f107 020f 	add.w	r2, r7, #15
 800a2d2:	2400      	movs	r4, #0
 800a2d4:	9401      	str	r4, [sp, #4]
 800a2d6:	2428      	movs	r4, #40	; 0x28
 800a2d8:	9400      	str	r4, [sp, #0]
 800a2da:	f7f6 f932 	bl	8000542 <ZbZclAttrRead>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	77fb      	strb	r3, [r7, #31]
		APP_DBG("Attribute value: %d", epid);
 800a2e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a2e6:	e9cd 2300 	strd	r2, r3, [sp]
 800a2ea:	4a0d      	ldr	r2, [pc, #52]	; (800a320 <ReportRead_cb+0xbc>)
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	f7fe fc7e 	bl	8008bf0 <logApplication>
	}
	else
	{
		APP_DBG("ReportRead_cb Callback fail");
	}
}
 800a2f4:	e004      	b.n	800a300 <ReportRead_cb+0x9c>
		APP_DBG("ReportRead_cb Callback fail");
 800a2f6:	4a0b      	ldr	r2, [pc, #44]	; (800a324 <ReportRead_cb+0xc0>)
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f7fe fc78 	bl	8008bf0 <logApplication>
}
 800a300:	bf00      	nop
 800a302:	3724      	adds	r7, #36	; 0x24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd90      	pop	{r4, r7, pc}
 800a308:	08016abc 	.word	0x08016abc
 800a30c:	08016de0 	.word	0x08016de0
 800a310:	08016adc 	.word	0x08016adc
 800a314:	08016b00 	.word	0x08016b00
 800a318:	08016b28 	.word	0x08016b28
 800a31c:	200004e8 	.word	0x200004e8
 800a320:	08016b48 	.word	0x08016b48
 800a324:	08016b5c 	.word	0x08016b5c

0800a328 <APP_ZIGBEE_ReportRead>:

static void APP_ZIGBEE_ReportRead(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b0b8      	sub	sp, #224	; 0xe0
 800a32c:	af00      	add	r7, sp, #0
	if (zigbee_app_info.reportConfigFinished == 1)
 800a32e:	4b14      	ldr	r3, [pc, #80]	; (800a380 <APP_ZIGBEE_ReportRead+0x58>)
 800a330:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01f      	beq.n	800a378 <APP_ZIGBEE_ReportRead+0x50>
	{
		enum ZbStatusCodeT reportReadStatus;
		struct ZbZclAttrReportReadT reportRead;

		reportRead.dst.mode = ZB_APSDE_ADDRMODE_EXT;//zigbee.aps.h
 800a338:	2303      	movs	r3, #3
 800a33a:	703b      	strb	r3, [r7, #0]
		reportRead.dst.endpoint = 0X01;
 800a33c:	2301      	movs	r3, #1
 800a33e:	807b      	strh	r3, [r7, #2]
		reportRead.dst.extAddr = (uint64_t)zigbee_app_info.thermextaddr;//0x003c84fffe02386a;
 800a340:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <APP_ZIGBEE_ReportRead+0x58>)
 800a342:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	; 0x218
 800a346:	e9c7 2302 	strd	r2, r3, [r7, #8]
		reportRead.num_records = (uint8_t)3;
 800a34a:	2303      	movs	r3, #3
 800a34c:	743b      	strb	r3, [r7, #16]
		reportRead.record_list[0].min = 5;
 800a34e:	2305      	movs	r3, #5
 800a350:	83fb      	strh	r3, [r7, #30]
		reportRead.record_list[0].max = 60;
 800a352:	233c      	movs	r3, #60	; 0x3c
 800a354:	843b      	strh	r3, [r7, #32]
		reportRead.record_list[0].attr_id = ZCL_THERM_SVR_ATTR_LOCAL_TEMP;
 800a356:	2300      	movs	r3, #0
 800a358:	837b      	strh	r3, [r7, #26]
		reportRead.record_list[0].attr_type = ZCL_DATATYPE_SIGNED_16BIT;
 800a35a:	2329      	movs	r3, #41	; 0x29
 800a35c:	773b      	strb	r3, [r7, #28]
		reportRead.record_list[0].direction = ZCL_REPORT_DIRECTION_NORMAL;
 800a35e:	2300      	movs	r3, #0
 800a360:	763b      	strb	r3, [r7, #24]

		reportReadStatus = ZbZclAttrReportReadReq(zigbee_app_info.device_therm_client, &reportRead, &ReportRead_cb,NULL);
 800a362:	4b07      	ldr	r3, [pc, #28]	; (800a380 <APP_ZIGBEE_ReportRead+0x58>)
 800a364:	f8d3 0230 	ldr.w	r0, [r3, #560]	; 0x230
 800a368:	4639      	mov	r1, r7
 800a36a:	2300      	movs	r3, #0
 800a36c:	4a05      	ldr	r2, [pc, #20]	; (800a384 <APP_ZIGBEE_ReportRead+0x5c>)
 800a36e:	f7f9 fb39 	bl	80039e4 <ZbZclAttrReportReadReq>
 800a372:	4603      	mov	r3, r0
 800a374:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		UNUSED(reportReadStatus);
	}
}
 800a378:	bf00      	nop
 800a37a:	37e0      	adds	r7, #224	; 0xe0
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	200004e8 	.word	0x200004e8
 800a384:	0800a265 	.word	0x0800a265

0800a388 <APP_ZIGBEE_Button1>:
/*END ReportRead*/

/*BEGIN Push Button 1*/
static void APP_ZIGBEE_Button1(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	af00      	add	r7, sp, #0
	APP_ZIGBEE_asgn_dst_addr();
 800a38c:	f7ff fcde 	bl	8009d4c <APP_ZIGBEE_asgn_dst_addr>
	APP_ZIGBEE_discoverCluster();
 800a390:	f7ff fc44 	bl	8009c1c <APP_ZIGBEE_discoverCluster>


}
 800a394:	bf00      	nop
 800a396:	bd80      	pop	{r7, pc}

0800a398 <APP_ZIGBEE_Button3>:
/*END Push Button 1*/

/*BEGIN Push Button 3*/
static void APP_ZIGBEE_Button3(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
	APP_ZIGBEE_Bindrequest();
 800a39c:	f7ff fe8a 	bl	800a0b4 <APP_ZIGBEE_Bindrequest>
	APP_ZIGBEE_ReportConfig();
 800a3a0:	f7ff ff10 	bl	800a1c4 <APP_ZIGBEE_ReportConfig>
	APP_ZIGBEE_ReportRead();
 800a3a4:	f7ff ffc0 	bl	800a328 <APP_ZIGBEE_ReportRead>

}
 800a3a8:	bf00      	nop
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <ZbShortAddressPan>:
/*END Push Button 3*/

uint16_t
ZbShortAddressPan(struct ZigBeeT *zb)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
    uint16_t panId = 0U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_PanId, &panId, sizeof(panId));
 800a3b8:	f107 020e 	add.w	r2, r7, #14
 800a3bc:	2302      	movs	r3, #2
 800a3be:	2180      	movs	r1, #128	; 0x80
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f007 fe25 	bl	8012010 <ZbNwkGet>
    return panId;
 800a3c6:	89fb      	ldrh	r3, [r7, #14]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <LL_PWR_EnableBootC2>:
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a3d4:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <LL_PWR_EnableBootC2+0x1c>)
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	4a04      	ldr	r2, [pc, #16]	; (800a3ec <LL_PWR_EnableBootC2+0x1c>)
 800a3da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3de:	60d3      	str	r3, [r2, #12]
}
 800a3e0:	bf00      	nop
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	58000400 	.word	0x58000400

0800a3f0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a3f8:	4b06      	ldr	r3, [pc, #24]	; (800a414 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a3fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a3fe:	4905      	ldr	r1, [pc, #20]	; (800a414 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4313      	orrs	r3, r2
 800a404:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	58000800 	.word	0x58000800

0800a418 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a422:	6a1a      	ldr	r2, [r3, #32]
 800a424:	4904      	ldr	r1, [pc, #16]	; (800a438 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4313      	orrs	r3, r2
 800a42a:	620b      	str	r3, [r1, #32]
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	58000800 	.word	0x58000800

0800a43c <LL_AHB3_GRP1_EnableClock>:
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a44a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4313      	orrs	r3, r2
 800a452:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4013      	ands	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a460:	68fb      	ldr	r3, [r7, #12]
}
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a47a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a47e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4313      	orrs	r3, r2
 800a486:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a48a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a48e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4013      	ands	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a498:	68fb      	ldr	r3, [r7, #12]
}
 800a49a:	bf00      	nop
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <LL_C1_IPCC_EnableIT_TXF>:
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	601a      	str	r2, [r3, #0]
}
 800a4ba:	bf00      	nop
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <LL_C1_IPCC_EnableIT_RXO>:
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f043 0201 	orr.w	r2, r3, #1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	601a      	str	r2, [r3, #0]
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	041b      	lsls	r3, r3, #16
 800a4f8:	43db      	mvns	r3, r3
 800a4fa:	401a      	ands	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	605a      	str	r2, [r3, #4]
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	041b      	lsls	r3, r3, #16
 800a51e:	431a      	orrs	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	605a      	str	r2, [r3, #4]
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	43db      	mvns	r3, r3
 800a542:	401a      	ands	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	605a      	str	r2, [r3, #4]
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <LL_C1_IPCC_DisableReceiveChannel>:
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	431a      	orrs	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	605a      	str	r2, [r3, #4]
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800a576:	b480      	push	{r7}
 800a578:	b083      	sub	sp, #12
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	609a      	str	r2, [r3, #8]
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <LL_C1_IPCC_SetFlag_CHx>:
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	041a      	lsls	r2, r3, #16
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	609a      	str	r2, [r3, #8]
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d101      	bne.n	800a5cc <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e000      	b.n	800a5ce <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b083      	sub	sp, #12
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	69da      	ldr	r2, [r3, #28]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d101      	bne.n	800a5f6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a608:	2102      	movs	r1, #2
 800a60a:	4828      	ldr	r0, [pc, #160]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a60c:	f7ff ffe5 	bl	800a5da <LL_C2_IPCC_IsActiveFlag_CHx>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d008      	beq.n	800a628 <HW_IPCC_Rx_Handler+0x24>
 800a616:	4b25      	ldr	r3, [pc, #148]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d102      	bne.n	800a628 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800a622:	f000 f8f1 	bl	800a808 <HW_IPCC_SYS_EvtHandler>
 800a626:	e03e      	b.n	800a6a6 <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 800a628:	2104      	movs	r1, #4
 800a62a:	4820      	ldr	r0, [pc, #128]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a62c:	f7ff ffd5 	bl	800a5da <LL_C2_IPCC_IsActiveFlag_CHx>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d008      	beq.n	800a648 <HW_IPCC_Rx_Handler+0x44>
 800a636:	4b1d      	ldr	r3, [pc, #116]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f003 0304 	and.w	r3, r3, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d102      	bne.n	800a648 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 800a642:	f000 f923 	bl	800a88c <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800a646:	e02e      	b.n	800a6a6 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 800a648:	2110      	movs	r1, #16
 800a64a:	4818      	ldr	r0, [pc, #96]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a64c:	f7ff ffc5 	bl	800a5da <LL_C2_IPCC_IsActiveFlag_CHx>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d008      	beq.n	800a668 <HW_IPCC_Rx_Handler+0x64>
 800a656:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f003 0310 	and.w	r3, r3, #16
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d102      	bne.n	800a668 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800a662:	f000 f91f 	bl	800a8a4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800a666:	e01e      	b.n	800a6a6 <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a668:	2101      	movs	r1, #1
 800a66a:	4810      	ldr	r0, [pc, #64]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a66c:	f7ff ffb5 	bl	800a5da <LL_C2_IPCC_IsActiveFlag_CHx>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d008      	beq.n	800a688 <HW_IPCC_Rx_Handler+0x84>
 800a676:	4b0d      	ldr	r3, [pc, #52]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d102      	bne.n	800a688 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800a682:	f000 f885 	bl	800a790 <HW_IPCC_BLE_EvtHandler>
 800a686:	e00e      	b.n	800a6a6 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a688:	2108      	movs	r1, #8
 800a68a:	4808      	ldr	r0, [pc, #32]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a68c:	f7ff ffa5 	bl	800a5da <LL_C2_IPCC_IsActiveFlag_CHx>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <HW_IPCC_Rx_Handler+0xa4>
 800a696:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <HW_IPCC_Rx_Handler+0xa8>)
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a6a2:	f000 f959 	bl	800a958 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
}
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	58000c00 	.word	0x58000c00

0800a6b0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a6b4:	2102      	movs	r1, #2
 800a6b6:	4820      	ldr	r0, [pc, #128]	; (800a738 <HW_IPCC_Tx_Handler+0x88>)
 800a6b8:	f7ff ff7a 	bl	800a5b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d107      	bne.n	800a6d2 <HW_IPCC_Tx_Handler+0x22>
 800a6c2:	4b1d      	ldr	r3, [pc, #116]	; (800a738 <HW_IPCC_Tx_Handler+0x88>)
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a6ce:	f000 f88f 	bl	800a7f0 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 800a6d2:	2104      	movs	r1, #4
 800a6d4:	4818      	ldr	r0, [pc, #96]	; (800a738 <HW_IPCC_Tx_Handler+0x88>)
 800a6d6:	f7ff ff6b 	bl	800a5b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d108      	bne.n	800a6f2 <HW_IPCC_Tx_Handler+0x42>
 800a6e0:	4b15      	ldr	r3, [pc, #84]	; (800a738 <HW_IPCC_Tx_Handler+0x88>)
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d102      	bne.n	800a6f2 <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 800a6ec:	f000 f8c2 	bl	800a874 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 800a6f0:	e01e      	b.n	800a730 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a6f2:	2108      	movs	r1, #8
 800a6f4:	4810      	ldr	r0, [pc, #64]	; (800a738 <HW_IPCC_Tx_Handler+0x88>)
 800a6f6:	f7ff ff5b 	bl	800a5b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d108      	bne.n	800a712 <HW_IPCC_Tx_Handler+0x62>
 800a700:	4b0d      	ldr	r3, [pc, #52]	; (800a738 <HW_IPCC_Tx_Handler+0x88>)
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a70c:	f000 f906 	bl	800a91c <HW_IPCC_MM_FreeBufHandler>
 800a710:	e00e      	b.n	800a730 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a712:	2120      	movs	r1, #32
 800a714:	4808      	ldr	r0, [pc, #32]	; (800a738 <HW_IPCC_Tx_Handler+0x88>)
 800a716:	f7ff ff4b 	bl	800a5b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d108      	bne.n	800a732 <HW_IPCC_Tx_Handler+0x82>
 800a720:	4b05      	ldr	r3, [pc, #20]	; (800a738 <HW_IPCC_Tx_Handler+0x88>)
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d102      	bne.n	800a732 <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a72c:	f000 f83c 	bl	800a7a8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a730:	bf00      	nop
 800a732:	bf00      	nop
}
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	58000c00 	.word	0x58000c00

0800a73c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a740:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a744:	f7ff fe93 	bl	800a46e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a748:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a74c:	f7ff fe64 	bl	800a418 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a750:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a754:	f7ff fe4c 	bl	800a3f0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a758:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a75a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a75c:	f7ff fe38 	bl	800a3d0 <LL_PWR_EnableBootC2>

  return;
 800a760:	bf00      	nop
}
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a768:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a76c:	f7ff fe66 	bl	800a43c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a770:	4806      	ldr	r0, [pc, #24]	; (800a78c <HW_IPCC_Init+0x28>)
 800a772:	f7ff fea8 	bl	800a4c6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a776:	4805      	ldr	r0, [pc, #20]	; (800a78c <HW_IPCC_Init+0x28>)
 800a778:	f7ff fe95 	bl	800a4a6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a77c:	202c      	movs	r0, #44	; 0x2c
 800a77e:	f000 fca4 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a782:	202d      	movs	r0, #45	; 0x2d
 800a784:	f000 fca1 	bl	800b0ca <HAL_NVIC_EnableIRQ>

  return;
 800a788:	bf00      	nop
}
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	58000c00 	.word	0x58000c00

0800a790 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a794:	f006 fc76 	bl	8011084 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a798:	2101      	movs	r1, #1
 800a79a:	4802      	ldr	r0, [pc, #8]	; (800a7a4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a79c:	f7ff feeb 	bl	800a576 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a7a0:	bf00      	nop
}
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	58000c00 	.word	0x58000c00

0800a7a8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a7ac:	2120      	movs	r1, #32
 800a7ae:	4803      	ldr	r0, [pc, #12]	; (800a7bc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a7b0:	f7ff feac 	bl	800a50c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a7b4:	f006 fc96 	bl	80110e4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a7b8:	bf00      	nop
}
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	58000c00 	.word	0x58000c00

0800a7c0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a7c4:	2102      	movs	r1, #2
 800a7c6:	4802      	ldr	r0, [pc, #8]	; (800a7d0 <HW_IPCC_SYS_Init+0x10>)
 800a7c8:	f7ff feb2 	bl	800a530 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a7cc:	bf00      	nop
}
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	58000c00 	.word	0x58000c00

0800a7d4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a7d8:	2102      	movs	r1, #2
 800a7da:	4804      	ldr	r0, [pc, #16]	; (800a7ec <HW_IPCC_SYS_SendCmd+0x18>)
 800a7dc:	f7ff fed9 	bl	800a592 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a7e0:	2102      	movs	r1, #2
 800a7e2:	4802      	ldr	r0, [pc, #8]	; (800a7ec <HW_IPCC_SYS_SendCmd+0x18>)
 800a7e4:	f7ff fe7f 	bl	800a4e6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a7e8:	bf00      	nop
}
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	58000c00 	.word	0x58000c00

0800a7f0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a7f4:	2102      	movs	r1, #2
 800a7f6:	4803      	ldr	r0, [pc, #12]	; (800a804 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a7f8:	f7ff fe88 	bl	800a50c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a7fc:	f006 fcc2 	bl	8011184 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a800:	bf00      	nop
}
 800a802:	bd80      	pop	{r7, pc}
 800a804:	58000c00 	.word	0x58000c00

0800a808 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a80c:	f006 fcd0 	bl	80111b0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a810:	2102      	movs	r1, #2
 800a812:	4802      	ldr	r0, [pc, #8]	; (800a81c <HW_IPCC_SYS_EvtHandler+0x14>)
 800a814:	f7ff feaf 	bl	800a576 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a818:	bf00      	nop
}
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	58000c00 	.word	0x58000c00

0800a820 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800a824:	2104      	movs	r1, #4
 800a826:	4804      	ldr	r0, [pc, #16]	; (800a838 <HW_IPCC_ZIGBEE_Init+0x18>)
 800a828:	f7ff fe82 	bl	800a530 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800a82c:	2110      	movs	r1, #16
 800a82e:	4802      	ldr	r0, [pc, #8]	; (800a838 <HW_IPCC_ZIGBEE_Init+0x18>)
 800a830:	f7ff fe7e 	bl	800a530 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a834:	bf00      	nop
}
 800a836:	bd80      	pop	{r7, pc}
 800a838:	58000c00 	.word	0x58000c00

0800a83c <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800a840:	2104      	movs	r1, #4
 800a842:	4804      	ldr	r0, [pc, #16]	; (800a854 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800a844:	f7ff fea5 	bl	800a592 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800a848:	2104      	movs	r1, #4
 800a84a:	4802      	ldr	r0, [pc, #8]	; (800a854 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800a84c:	f7ff fe4b 	bl	800a4e6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a850:	bf00      	nop
}
 800a852:	bd80      	pop	{r7, pc}
 800a854:	58000c00 	.word	0x58000c00

0800a858 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800a85c:	2104      	movs	r1, #4
 800a85e:	4804      	ldr	r0, [pc, #16]	; (800a870 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800a860:	f7ff fe89 	bl	800a576 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800a864:	2104      	movs	r1, #4
 800a866:	4802      	ldr	r0, [pc, #8]	; (800a870 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800a868:	f7ff fe62 	bl	800a530 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a86c:	bf00      	nop
}
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	58000c00 	.word	0x58000c00

0800a874 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800a878:	2104      	movs	r1, #4
 800a87a:	4803      	ldr	r0, [pc, #12]	; (800a888 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 800a87c:	f7ff fe46 	bl	800a50c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 800a880:	f006 fce2 	bl	8011248 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 800a884:	bf00      	nop
}
 800a886:	bd80      	pop	{r7, pc}
 800a888:	58000c00 	.word	0x58000c00

0800a88c <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800a890:	2104      	movs	r1, #4
 800a892:	4803      	ldr	r0, [pc, #12]	; (800a8a0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 800a894:	f7ff fe5e 	bl	800a554 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 800a898:	f006 fce2 	bl	8011260 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 800a89c:	bf00      	nop
}
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	58000c00 	.word	0x58000c00

0800a8a4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800a8a8:	2110      	movs	r1, #16
 800a8aa:	4803      	ldr	r0, [pc, #12]	; (800a8b8 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 800a8ac:	f7ff fe52 	bl	800a554 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 800a8b0:	f006 fcf0 	bl	8011294 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 800a8b4:	bf00      	nop
}
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	58000c00 	.word	0x58000c00

0800a8bc <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800a8c0:	2110      	movs	r1, #16
 800a8c2:	4804      	ldr	r0, [pc, #16]	; (800a8d4 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800a8c4:	f7ff fe57 	bl	800a576 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800a8c8:	2110      	movs	r1, #16
 800a8ca:	4802      	ldr	r0, [pc, #8]	; (800a8d4 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800a8cc:	f7ff fe30 	bl	800a530 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a8d0:	bf00      	nop
}
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	58000c00 	.word	0x58000c00

0800a8d8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a8e0:	2108      	movs	r1, #8
 800a8e2:	480c      	ldr	r0, [pc, #48]	; (800a914 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a8e4:	f7ff fe64 	bl	800a5b0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d007      	beq.n	800a8fe <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a8ee:	4a0a      	ldr	r2, [pc, #40]	; (800a918 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a8f4:	2108      	movs	r1, #8
 800a8f6:	4807      	ldr	r0, [pc, #28]	; (800a914 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a8f8:	f7ff fdf5 	bl	800a4e6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a8fc:	e006      	b.n	800a90c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a902:	2108      	movs	r1, #8
 800a904:	4803      	ldr	r0, [pc, #12]	; (800a914 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a906:	f7ff fe44 	bl	800a592 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a90a:	bf00      	nop
}
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	58000c00 	.word	0x58000c00
 800a918:	20000720 	.word	0x20000720

0800a91c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a920:	2108      	movs	r1, #8
 800a922:	4806      	ldr	r0, [pc, #24]	; (800a93c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a924:	f7ff fdf2 	bl	800a50c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a928:	4b05      	ldr	r3, [pc, #20]	; (800a940 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a92e:	2108      	movs	r1, #8
 800a930:	4802      	ldr	r0, [pc, #8]	; (800a93c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a932:	f7ff fe2e 	bl	800a592 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a936:	bf00      	nop
}
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	58000c00 	.word	0x58000c00
 800a940:	20000720 	.word	0x20000720

0800a944 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a948:	2108      	movs	r1, #8
 800a94a:	4802      	ldr	r0, [pc, #8]	; (800a954 <HW_IPCC_TRACES_Init+0x10>)
 800a94c:	f7ff fdf0 	bl	800a530 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a950:	bf00      	nop
}
 800a952:	bd80      	pop	{r7, pc}
 800a954:	58000c00 	.word	0x58000c00

0800a958 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a95c:	f006 fd3a 	bl	80113d4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a960:	2108      	movs	r1, #8
 800a962:	4802      	ldr	r0, [pc, #8]	; (800a96c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a964:	f7ff fe07 	bl	800a576 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a968:	bf00      	nop
}
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	58000c00 	.word	0x58000c00

0800a970 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800a970:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a972:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a974:	3304      	adds	r3, #4

0800a976 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a976:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a978:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800a97a:	d3f9      	bcc.n	800a970 <CopyDataInit>
  bx lr
 800a97c:	4770      	bx	lr

0800a97e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800a97e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800a980:	3004      	adds	r0, #4

0800a982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800a982:	4288      	cmp	r0, r1
  bcc FillZerobss
 800a984:	d3fb      	bcc.n	800a97e <FillZerobss>
  bx lr
 800a986:	4770      	bx	lr

0800a988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a988:	480c      	ldr	r0, [pc, #48]	; (800a9bc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800a98a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800a98c:	f000 f938 	bl	800ac00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800a990:	480b      	ldr	r0, [pc, #44]	; (800a9c0 <LoopForever+0x8>)
 800a992:	490c      	ldr	r1, [pc, #48]	; (800a9c4 <LoopForever+0xc>)
 800a994:	4a0c      	ldr	r2, [pc, #48]	; (800a9c8 <LoopForever+0x10>)
 800a996:	2300      	movs	r3, #0
 800a998:	f7ff ffed 	bl	800a976 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800a99c:	480b      	ldr	r0, [pc, #44]	; (800a9cc <LoopForever+0x14>)
 800a99e:	490c      	ldr	r1, [pc, #48]	; (800a9d0 <LoopForever+0x18>)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f7ff ffee 	bl	800a982 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800a9a6:	480b      	ldr	r0, [pc, #44]	; (800a9d4 <LoopForever+0x1c>)
 800a9a8:	490b      	ldr	r1, [pc, #44]	; (800a9d8 <LoopForever+0x20>)
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f7ff ffe9 	bl	800a982 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800a9b0:	f00a f8f6 	bl	8014ba0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800a9b4:	f7fd fc32 	bl	800821c <main>

0800a9b8 <LoopForever>:

LoopForever:
  b LoopForever
 800a9b8:	e7fe      	b.n	800a9b8 <LoopForever>
 800a9ba:	0000      	.short	0x0000
  ldr   r0, =_estack
 800a9bc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800a9c0:	20000008 	.word	0x20000008
 800a9c4:	20000094 	.word	0x20000094
 800a9c8:	080171e8 	.word	0x080171e8
  INIT_BSS _sbss, _ebss
 800a9cc:	200000a8 	.word	0x200000a8
 800a9d0:	20001ba0 	.word	0x20001ba0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800a9d4:	200300e4 	.word	0x200300e4
 800a9d8:	20030b5a 	.word	0x20030b5a

0800a9dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a9dc:	e7fe      	b.n	800a9dc <ADC1_IRQHandler>

0800a9de <LL_AHB2_GRP1_EnableClock>:
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a9e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a9f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800aa02:	68fb      	ldr	r3, [r7, #12]
}
 800aa04:	bf00      	nop
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b088      	sub	sp, #32
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800aa1a:	f107 030c 	add.w	r3, r7, #12
 800aa1e:	2200      	movs	r2, #0
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	605a      	str	r2, [r3, #4]
 800aa24:	609a      	str	r2, [r3, #8]
 800aa26:	60da      	str	r2, [r3, #12]
 800aa28:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800aa2a:	2002      	movs	r0, #2
 800aa2c:	f7ff ffd7 	bl	800a9de <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	4a12      	ldr	r2, [pc, #72]	; (800aa7c <BSP_LED_Init+0x6c>)
 800aa34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa38:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aa42:	2302      	movs	r3, #2
 800aa44:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	4a0d      	ldr	r2, [pc, #52]	; (800aa80 <BSP_LED_Init+0x70>)
 800aa4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa4e:	f107 020c 	add.w	r2, r7, #12
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 ff93 	bl	800b980 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800aa5a:	79fb      	ldrb	r3, [r7, #7]
 800aa5c:	4a08      	ldr	r2, [pc, #32]	; (800aa80 <BSP_LED_Init+0x70>)
 800aa5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aa62:	79fb      	ldrb	r3, [r7, #7]
 800aa64:	4a05      	ldr	r2, [pc, #20]	; (800aa7c <BSP_LED_Init+0x6c>)
 800aa66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	f001 f8f7 	bl	800bc60 <HAL_GPIO_WritePin>
}
 800aa72:	bf00      	nop
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	08016df0 	.word	0x08016df0
 800aa80:	20000008 	.word	0x20000008

0800aa84 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	4a07      	ldr	r2, [pc, #28]	; (800aab0 <BSP_LED_On+0x2c>)
 800aa92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	4a06      	ldr	r2, [pc, #24]	; (800aab4 <BSP_LED_On+0x30>)
 800aa9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	f001 f8dd 	bl	800bc60 <HAL_GPIO_WritePin>
}
 800aaa6:	bf00      	nop
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20000008 	.word	0x20000008
 800aab4:	08016df0 	.word	0x08016df0

0800aab8 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	4a07      	ldr	r2, [pc, #28]	; (800aae4 <BSP_LED_Off+0x2c>)
 800aac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	4a06      	ldr	r2, [pc, #24]	; (800aae8 <BSP_LED_Off+0x30>)
 800aace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aad2:	2200      	movs	r2, #0
 800aad4:	4619      	mov	r1, r3
 800aad6:	f001 f8c3 	bl	800bc60 <HAL_GPIO_WritePin>
}
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20000008 	.word	0x20000008
 800aae8:	08016df0 	.word	0x08016df0

0800aaec <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	4a07      	ldr	r2, [pc, #28]	; (800ab18 <BSP_LED_Toggle+0x2c>)
 800aafa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	4906      	ldr	r1, [pc, #24]	; (800ab1c <BSP_LED_Toggle+0x30>)
 800ab02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ab06:	4619      	mov	r1, r3
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f001 f8c1 	bl	800bc90 <HAL_GPIO_TogglePin>
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000008 	.word	0x20000008
 800ab1c:	08016df0 	.word	0x08016df0

0800ab20 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	460a      	mov	r2, r1
 800ab2a:	71fb      	strb	r3, [r7, #7]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800ab30:	f107 030c 	add.w	r3, r7, #12
 800ab34:	2200      	movs	r2, #0
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	605a      	str	r2, [r3, #4]
 800ab3a:	609a      	str	r2, [r3, #8]
 800ab3c:	60da      	str	r2, [r3, #12]
 800ab3e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d103      	bne.n	800ab4e <BSP_PB_Init+0x2e>
 800ab46:	2004      	movs	r0, #4
 800ab48:	f7ff ff49 	bl	800a9de <LL_AHB2_GRP1_EnableClock>
 800ab4c:	e00c      	b.n	800ab68 <BSP_PB_Init+0x48>
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d103      	bne.n	800ab5c <BSP_PB_Init+0x3c>
 800ab54:	2008      	movs	r0, #8
 800ab56:	f7ff ff42 	bl	800a9de <LL_AHB2_GRP1_EnableClock>
 800ab5a:	e005      	b.n	800ab68 <BSP_PB_Init+0x48>
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d102      	bne.n	800ab68 <BSP_PB_Init+0x48>
 800ab62:	2008      	movs	r0, #8
 800ab64:	f7ff ff3b 	bl	800a9de <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800ab68:	79bb      	ldrb	r3, [r7, #6]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d117      	bne.n	800ab9e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
 800ab70:	4a20      	ldr	r2, [pc, #128]	; (800abf4 <BSP_PB_Init+0xd4>)
 800ab72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab76:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ab80:	2302      	movs	r3, #2
 800ab82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	4a1c      	ldr	r2, [pc, #112]	; (800abf8 <BSP_PB_Init+0xd8>)
 800ab88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab8c:	f107 020c 	add.w	r2, r7, #12
 800ab90:	4611      	mov	r1, r2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fef4 	bl	800b980 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 800ab98:	2001      	movs	r0, #1
 800ab9a:	f7fc fa80 	bl	800709e <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800ab9e:	79bb      	ldrb	r3, [r7, #6]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d123      	bne.n	800abec <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	4a13      	ldr	r2, [pc, #76]	; (800abf4 <BSP_PB_Init+0xd4>)
 800aba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abac:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800abae:	2301      	movs	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800abb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800abb6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	4a0f      	ldr	r2, [pc, #60]	; (800abf8 <BSP_PB_Init+0xd8>)
 800abbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abc0:	f107 020c 	add.w	r2, r7, #12
 800abc4:	4611      	mov	r1, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 feda 	bl	800b980 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	4a0b      	ldr	r2, [pc, #44]	; (800abfc <BSP_PB_Init+0xdc>)
 800abd0:	5cd3      	ldrb	r3, [r2, r3]
 800abd2:	b25b      	sxtb	r3, r3
 800abd4:	2200      	movs	r2, #0
 800abd6:	210f      	movs	r1, #15
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fa5c 	bl	800b096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	4a06      	ldr	r2, [pc, #24]	; (800abfc <BSP_PB_Init+0xdc>)
 800abe2:	5cd3      	ldrb	r3, [r2, r3]
 800abe4:	b25b      	sxtb	r3, r3
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fa6f 	bl	800b0ca <HAL_NVIC_EnableIRQ>
  }
}
 800abec:	bf00      	nop
 800abee:	3720      	adds	r7, #32
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	08016df8 	.word	0x08016df8
 800abf8:	20000014 	.word	0x20000014
 800abfc:	08016e00 	.word	0x08016e00

0800ac00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800ac04:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <SystemInit+0x98>)
 800ac06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac0a:	4a23      	ldr	r2, [pc, #140]	; (800ac98 <SystemInit+0x98>)
 800ac0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800ac14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac1e:	f043 0301 	orr.w	r3, r3, #1
 800ac22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800ac24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac28:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800ac2c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800ac2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac38:	4b18      	ldr	r3, [pc, #96]	; (800ac9c <SystemInit+0x9c>)
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800ac3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac4a:	f023 0305 	bic.w	r3, r3, #5
 800ac4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800ac52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac5e:	f023 0301 	bic.w	r3, r3, #1
 800ac62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800ac66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac6a:	4a0d      	ldr	r2, [pc, #52]	; (800aca0 <SystemInit+0xa0>)
 800ac6c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800ac6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac72:	4a0b      	ldr	r2, [pc, #44]	; (800aca0 <SystemInit+0xa0>)
 800ac74:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ac76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ac80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ac86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	619a      	str	r2, [r3, #24]
}
 800ac8e:	bf00      	nop
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	e000ed00 	.word	0xe000ed00
 800ac9c:	faf6fefb 	.word	0xfaf6fefb
 800aca0:	22041000 	.word	0x22041000

0800aca4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800aca4:	b480      	push	{r7}
 800aca6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800aca8:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	4a04      	ldr	r2, [pc, #16]	; (800acc0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800acae:	f043 0301 	orr.w	r3, r3, #1
 800acb2:	6053      	str	r3, [r2, #4]
}
 800acb4:	bf00      	nop
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	e0042000 	.word	0xe0042000

0800acc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800acce:	4b0c      	ldr	r3, [pc, #48]	; (800ad00 <HAL_Init+0x3c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a0b      	ldr	r2, [pc, #44]	; (800ad00 <HAL_Init+0x3c>)
 800acd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800acda:	2003      	movs	r0, #3
 800acdc:	f000 f9d0 	bl	800b080 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ace0:	2000      	movs	r0, #0
 800ace2:	f000 f80f 	bl	800ad04 <HAL_InitTick>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	71fb      	strb	r3, [r7, #7]
 800acf0:	e001      	b.n	800acf6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800acf2:	f7fd fcbb 	bl	800866c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800acf6:	79fb      	ldrb	r3, [r7, #7]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	58004000 	.word	0x58004000

0800ad04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800ad10:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <HAL_InitTick+0x6c>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d024      	beq.n	800ad62 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ad18:	f002 f9c8 	bl	800d0ac <HAL_RCC_GetHCLKFreq>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	4b14      	ldr	r3, [pc, #80]	; (800ad70 <HAL_InitTick+0x6c>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	4619      	mov	r1, r3
 800ad24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad28:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 f9ea 	bl	800b10a <HAL_SYSTICK_Config>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10f      	bne.n	800ad5c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b0f      	cmp	r3, #15
 800ad40:	d809      	bhi.n	800ad56 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ad42:	2200      	movs	r2, #0
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	f000 f9a4 	bl	800b096 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ad4e:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <HAL_InitTick+0x70>)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6013      	str	r3, [r2, #0]
 800ad54:	e007      	b.n	800ad66 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	73fb      	strb	r3, [r7, #15]
 800ad5a:	e004      	b.n	800ad66 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	73fb      	strb	r3, [r7, #15]
 800ad60:	e001      	b.n	800ad66 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20000028 	.word	0x20000028
 800ad74:	20000024 	.word	0x20000024

0800ad78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ad7c:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <HAL_IncTick+0x20>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	461a      	mov	r2, r3
 800ad82:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <HAL_IncTick+0x24>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4413      	add	r3, r2
 800ad88:	4a04      	ldr	r2, [pc, #16]	; (800ad9c <HAL_IncTick+0x24>)
 800ad8a:	6013      	str	r3, [r2, #0]
}
 800ad8c:	bf00      	nop
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	20000028 	.word	0x20000028
 800ad9c:	20000724 	.word	0x20000724

0800ada0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ada0:	b480      	push	{r7}
 800ada2:	af00      	add	r7, sp, #0
  return uwTick;
 800ada4:	4b03      	ldr	r3, [pc, #12]	; (800adb4 <HAL_GetTick+0x14>)
 800ada6:	681b      	ldr	r3, [r3, #0]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	20000724 	.word	0x20000724

0800adb8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800adb8:	b480      	push	{r7}
 800adba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800adbc:	4b03      	ldr	r3, [pc, #12]	; (800adcc <HAL_GetTickPrio+0x14>)
 800adbe:	681b      	ldr	r3, [r3, #0]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	20000024 	.word	0x20000024

0800add0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800add0:	b480      	push	{r7}
 800add2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800add4:	4b03      	ldr	r3, [pc, #12]	; (800ade4 <HAL_GetTickFreq+0x14>)
 800add6:	781b      	ldrb	r3, [r3, #0]
}
 800add8:	4618      	mov	r0, r3
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	20000028 	.word	0x20000028

0800ade8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800adec:	f7ff ff5a 	bl	800aca4 <LL_DBGMCU_EnableDBGSleepMode>
}
 800adf0:	bf00      	nop
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ae04:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <__NVIC_SetPriorityGrouping+0x44>)
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae10:	4013      	ands	r3, r2
 800ae12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ae1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ae26:	4a04      	ldr	r2, [pc, #16]	; (800ae38 <__NVIC_SetPriorityGrouping+0x44>)
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	60d3      	str	r3, [r2, #12]
}
 800ae2c:	bf00      	nop
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	e000ed00 	.word	0xe000ed00

0800ae3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ae40:	4b04      	ldr	r3, [pc, #16]	; (800ae54 <__NVIC_GetPriorityGrouping+0x18>)
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	0a1b      	lsrs	r3, r3, #8
 800ae46:	f003 0307 	and.w	r3, r3, #7
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	e000ed00 	.word	0xe000ed00

0800ae58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	db0b      	blt.n	800ae82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae6a:	79fb      	ldrb	r3, [r7, #7]
 800ae6c:	f003 021f 	and.w	r2, r3, #31
 800ae70:	4907      	ldr	r1, [pc, #28]	; (800ae90 <__NVIC_EnableIRQ+0x38>)
 800ae72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae76:	095b      	lsrs	r3, r3, #5
 800ae78:	2001      	movs	r0, #1
 800ae7a:	fa00 f202 	lsl.w	r2, r0, r2
 800ae7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	e000e100 	.word	0xe000e100

0800ae94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	db12      	blt.n	800aecc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	f003 021f 	and.w	r2, r3, #31
 800aeac:	490a      	ldr	r1, [pc, #40]	; (800aed8 <__NVIC_DisableIRQ+0x44>)
 800aeae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeb2:	095b      	lsrs	r3, r3, #5
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	fa00 f202 	lsl.w	r2, r0, r2
 800aeba:	3320      	adds	r3, #32
 800aebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800aec0:	f3bf 8f4f 	dsb	sy
}
 800aec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aec6:	f3bf 8f6f 	isb	sy
}
 800aeca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	e000e100 	.word	0xe000e100

0800aedc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	db0c      	blt.n	800af08 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	f003 021f 	and.w	r2, r3, #31
 800aef4:	4907      	ldr	r1, [pc, #28]	; (800af14 <__NVIC_SetPendingIRQ+0x38>)
 800aef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aefa:	095b      	lsrs	r3, r3, #5
 800aefc:	2001      	movs	r0, #1
 800aefe:	fa00 f202 	lsl.w	r2, r0, r2
 800af02:	3340      	adds	r3, #64	; 0x40
 800af04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	e000e100 	.word	0xe000e100

0800af18 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af26:	2b00      	cmp	r3, #0
 800af28:	db0c      	blt.n	800af44 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af2a:	79fb      	ldrb	r3, [r7, #7]
 800af2c:	f003 021f 	and.w	r2, r3, #31
 800af30:	4907      	ldr	r1, [pc, #28]	; (800af50 <__NVIC_ClearPendingIRQ+0x38>)
 800af32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af36:	095b      	lsrs	r3, r3, #5
 800af38:	2001      	movs	r0, #1
 800af3a:	fa00 f202 	lsl.w	r2, r0, r2
 800af3e:	3360      	adds	r3, #96	; 0x60
 800af40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	e000e100 	.word	0xe000e100

0800af54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	6039      	str	r1, [r7, #0]
 800af5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af64:	2b00      	cmp	r3, #0
 800af66:	db0a      	blt.n	800af7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	490c      	ldr	r1, [pc, #48]	; (800afa0 <__NVIC_SetPriority+0x4c>)
 800af6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af72:	0112      	lsls	r2, r2, #4
 800af74:	b2d2      	uxtb	r2, r2
 800af76:	440b      	add	r3, r1
 800af78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800af7c:	e00a      	b.n	800af94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	b2da      	uxtb	r2, r3
 800af82:	4908      	ldr	r1, [pc, #32]	; (800afa4 <__NVIC_SetPriority+0x50>)
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	f003 030f 	and.w	r3, r3, #15
 800af8a:	3b04      	subs	r3, #4
 800af8c:	0112      	lsls	r2, r2, #4
 800af8e:	b2d2      	uxtb	r2, r2
 800af90:	440b      	add	r3, r1
 800af92:	761a      	strb	r2, [r3, #24]
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr
 800afa0:	e000e100 	.word	0xe000e100
 800afa4:	e000ed00 	.word	0xe000ed00

0800afa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b089      	sub	sp, #36	; 0x24
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	f1c3 0307 	rsb	r3, r3, #7
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	bf28      	it	cs
 800afc6:	2304      	movcs	r3, #4
 800afc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	3304      	adds	r3, #4
 800afce:	2b06      	cmp	r3, #6
 800afd0:	d902      	bls.n	800afd8 <NVIC_EncodePriority+0x30>
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	3b03      	subs	r3, #3
 800afd6:	e000      	b.n	800afda <NVIC_EncodePriority+0x32>
 800afd8:	2300      	movs	r3, #0
 800afda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800afdc:	f04f 32ff 	mov.w	r2, #4294967295
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	fa02 f303 	lsl.w	r3, r2, r3
 800afe6:	43da      	mvns	r2, r3
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	401a      	ands	r2, r3
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800aff0:	f04f 31ff 	mov.w	r1, #4294967295
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	fa01 f303 	lsl.w	r3, r1, r3
 800affa:	43d9      	mvns	r1, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b000:	4313      	orrs	r3, r2
         );
}
 800b002:	4618      	mov	r0, r3
 800b004:	3724      	adds	r7, #36	; 0x24
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
	...

0800b010 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b014:	f3bf 8f4f 	dsb	sy
}
 800b018:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b01a:	4b06      	ldr	r3, [pc, #24]	; (800b034 <__NVIC_SystemReset+0x24>)
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b022:	4904      	ldr	r1, [pc, #16]	; (800b034 <__NVIC_SystemReset+0x24>)
 800b024:	4b04      	ldr	r3, [pc, #16]	; (800b038 <__NVIC_SystemReset+0x28>)
 800b026:	4313      	orrs	r3, r2
 800b028:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b02a:	f3bf 8f4f 	dsb	sy
}
 800b02e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <__NVIC_SystemReset+0x20>
 800b034:	e000ed00 	.word	0xe000ed00
 800b038:	05fa0004 	.word	0x05fa0004

0800b03c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	3b01      	subs	r3, #1
 800b048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b04c:	d301      	bcc.n	800b052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b04e:	2301      	movs	r3, #1
 800b050:	e00f      	b.n	800b072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b052:	4a0a      	ldr	r2, [pc, #40]	; (800b07c <SysTick_Config+0x40>)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3b01      	subs	r3, #1
 800b058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b05a:	210f      	movs	r1, #15
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
 800b060:	f7ff ff78 	bl	800af54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <SysTick_Config+0x40>)
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b06a:	4b04      	ldr	r3, [pc, #16]	; (800b07c <SysTick_Config+0x40>)
 800b06c:	2207      	movs	r2, #7
 800b06e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	e000e010 	.word	0xe000e010

0800b080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff feb3 	bl	800adf4 <__NVIC_SetPriorityGrouping>
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	4603      	mov	r3, r0
 800b09e:	60b9      	str	r1, [r7, #8]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b0a4:	f7ff feca 	bl	800ae3c <__NVIC_GetPriorityGrouping>
 800b0a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	6978      	ldr	r0, [r7, #20]
 800b0b0:	f7ff ff7a 	bl	800afa8 <NVIC_EncodePriority>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff ff49 	bl	800af54 <__NVIC_SetPriority>
}
 800b0c2:	bf00      	nop
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b0d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7ff febd 	bl	800ae58 <__NVIC_EnableIRQ>
}
 800b0de:	bf00      	nop
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b0f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff fecd 	bl	800ae94 <__NVIC_DisableIRQ>
}
 800b0fa:	bf00      	nop
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b106:	f7ff ff83 	bl	800b010 <__NVIC_SystemReset>

0800b10a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7ff ff92 	bl	800b03c <SysTick_Config>
 800b118:	4603      	mov	r3, r0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	4603      	mov	r3, r0
 800b12a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800b12c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff fed3 	bl	800aedc <__NVIC_SetPendingIRQ>
}
 800b136:	bf00      	nop
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b082      	sub	sp, #8
 800b142:	af00      	add	r7, sp, #0
 800b144:	4603      	mov	r3, r0
 800b146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7ff fee3 	bl	800af18 <__NVIC_ClearPendingIRQ>
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
	...

0800b15c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e08e      	b.n	800b28c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	4b47      	ldr	r3, [pc, #284]	; (800b294 <HAL_DMA_Init+0x138>)
 800b176:	429a      	cmp	r2, r3
 800b178:	d80f      	bhi.n	800b19a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	4b45      	ldr	r3, [pc, #276]	; (800b298 <HAL_DMA_Init+0x13c>)
 800b182:	4413      	add	r3, r2
 800b184:	4a45      	ldr	r2, [pc, #276]	; (800b29c <HAL_DMA_Init+0x140>)
 800b186:	fba2 2303 	umull	r2, r3, r2, r3
 800b18a:	091b      	lsrs	r3, r3, #4
 800b18c:	009a      	lsls	r2, r3, #2
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a42      	ldr	r2, [pc, #264]	; (800b2a0 <HAL_DMA_Init+0x144>)
 800b196:	641a      	str	r2, [r3, #64]	; 0x40
 800b198:	e00e      	b.n	800b1b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	4b40      	ldr	r3, [pc, #256]	; (800b2a4 <HAL_DMA_Init+0x148>)
 800b1a2:	4413      	add	r3, r2
 800b1a4:	4a3d      	ldr	r2, [pc, #244]	; (800b29c <HAL_DMA_Init+0x140>)
 800b1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1aa:	091b      	lsrs	r3, r3, #4
 800b1ac:	009a      	lsls	r2, r3, #2
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a3c      	ldr	r2, [pc, #240]	; (800b2a8 <HAL_DMA_Init+0x14c>)
 800b1b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b1dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fa74 	bl	800b6f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b218:	d102      	bne.n	800b220 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b228:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b22c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b236:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d010      	beq.n	800b262 <HAL_DMA_Init+0x106>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	2b04      	cmp	r3, #4
 800b246:	d80c      	bhi.n	800b262 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fa93 	bl	800b774 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b25e:	605a      	str	r2, [r3, #4]
 800b260:	e008      	b.n	800b274 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	40020407 	.word	0x40020407
 800b298:	bffdfff8 	.word	0xbffdfff8
 800b29c:	cccccccd 	.word	0xcccccccd
 800b2a0:	40020000 	.word	0x40020000
 800b2a4:	bffdfbf8 	.word	0xbffdfbf8
 800b2a8:	40020400 	.word	0x40020400

0800b2ac <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d101      	bne.n	800b2cc <HAL_DMA_Start_IT+0x20>
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e066      	b.n	800b39a <HAL_DMA_Start_IT+0xee>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d155      	bne.n	800b38c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f022 0201 	bic.w	r2, r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f000 f9b9 	bl	800b67c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d008      	beq.n	800b324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f042 020e 	orr.w	r2, r2, #14
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	e00f      	b.n	800b344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f022 0204 	bic.w	r2, r2, #4
 800b332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f042 020a 	orr.w	r2, r2, #10
 800b342:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d007      	beq.n	800b362 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b360:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b366:	2b00      	cmp	r3, #0
 800b368:	d007      	beq.n	800b37a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b378:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f042 0201 	orr.w	r2, r2, #1
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	e005      	b.n	800b398 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b394:	2302      	movs	r3, #2
 800b396:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b398:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e04f      	b.n	800b454 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d008      	beq.n	800b3d2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e040      	b.n	800b454 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f022 020e 	bic.w	r2, r2, #14
 800b3e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f022 0201 	bic.w	r2, r2, #1
 800b400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b406:	f003 021c 	and.w	r2, r3, #28
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40e:	2101      	movs	r1, #1
 800b410:	fa01 f202 	lsl.w	r2, r1, r2
 800b414:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b41e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00c      	beq.n	800b442 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b436:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b440:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b472:	b2db      	uxtb	r3, r3
 800b474:	2b02      	cmp	r3, #2
 800b476:	d005      	beq.n	800b484 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2204      	movs	r2, #4
 800b47c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	73fb      	strb	r3, [r7, #15]
 800b482:	e047      	b.n	800b514 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f022 020e 	bic.w	r2, r2, #14
 800b492:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f022 0201 	bic.w	r2, r2, #1
 800b4a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4b8:	f003 021c 	and.w	r2, r3, #28
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	fa01 f202 	lsl.w	r2, r1, r2
 800b4c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b4d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00c      	beq.n	800b4f4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b4f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	4798      	blx	r3
    }
  }
  return status;
 800b514:	7bfb      	ldrb	r3, [r7, #15]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b53a:	f003 031c 	and.w	r3, r3, #28
 800b53e:	2204      	movs	r2, #4
 800b540:	409a      	lsls	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4013      	ands	r3, r2
 800b546:	2b00      	cmp	r3, #0
 800b548:	d026      	beq.n	800b598 <HAL_DMA_IRQHandler+0x7a>
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b00      	cmp	r3, #0
 800b552:	d021      	beq.n	800b598 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0320 	and.w	r3, r3, #32
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d107      	bne.n	800b572 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f022 0204 	bic.w	r2, r2, #4
 800b570:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b576:	f003 021c 	and.w	r2, r3, #28
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	2104      	movs	r1, #4
 800b580:	fa01 f202 	lsl.w	r2, r1, r2
 800b584:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d071      	beq.n	800b672 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b596:	e06c      	b.n	800b672 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b59c:	f003 031c 	and.w	r3, r3, #28
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	409a      	lsls	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d02e      	beq.n	800b60a <HAL_DMA_IRQHandler+0xec>
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d029      	beq.n	800b60a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0320 	and.w	r3, r3, #32
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f022 020a 	bic.w	r2, r2, #10
 800b5d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5e0:	f003 021c 	and.w	r2, r3, #28
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e8:	2102      	movs	r1, #2
 800b5ea:	fa01 f202 	lsl.w	r2, r1, r2
 800b5ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d038      	beq.n	800b672 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b608:	e033      	b.n	800b672 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60e:	f003 031c 	and.w	r3, r3, #28
 800b612:	2208      	movs	r2, #8
 800b614:	409a      	lsls	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	4013      	ands	r3, r2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d02a      	beq.n	800b674 <HAL_DMA_IRQHandler+0x156>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	f003 0308 	and.w	r3, r3, #8
 800b624:	2b00      	cmp	r3, #0
 800b626:	d025      	beq.n	800b674 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f022 020e 	bic.w	r2, r2, #14
 800b636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b63c:	f003 021c 	and.w	r2, r3, #28
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b644:	2101      	movs	r1, #1
 800b646:	fa01 f202 	lsl.w	r2, r1, r2
 800b64a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b666:	2b00      	cmp	r3, #0
 800b668:	d004      	beq.n	800b674 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b672:	bf00      	nop
 800b674:	bf00      	nop
}
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b692:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d004      	beq.n	800b6a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b6a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6aa:	f003 021c 	and.w	r2, r3, #28
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	fa01 f202 	lsl.w	r2, r1, r2
 800b6b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	2b10      	cmp	r3, #16
 800b6c8:	d108      	bne.n	800b6dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b6da:	e007      	b.n	800b6ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	60da      	str	r2, [r3, #12]
}
 800b6ec:	bf00      	nop
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	461a      	mov	r2, r3
 800b706:	4b17      	ldr	r3, [pc, #92]	; (800b764 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b708:	429a      	cmp	r2, r3
 800b70a:	d80a      	bhi.n	800b722 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b710:	089b      	lsrs	r3, r3, #2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b718:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	6493      	str	r3, [r2, #72]	; 0x48
 800b720:	e007      	b.n	800b732 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b726:	089b      	lsrs	r3, r3, #2
 800b728:	009a      	lsls	r2, r3, #2
 800b72a:	4b0f      	ldr	r3, [pc, #60]	; (800b768 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b72c:	4413      	add	r3, r2
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	3b08      	subs	r3, #8
 800b73a:	4a0c      	ldr	r2, [pc, #48]	; (800b76c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b73c:	fba2 2303 	umull	r2, r3, r2, r3
 800b740:	091b      	lsrs	r3, r3, #4
 800b742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a0a      	ldr	r2, [pc, #40]	; (800b770 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b748:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f003 031f 	and.w	r3, r3, #31
 800b750:	2201      	movs	r2, #1
 800b752:	409a      	lsls	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b758:	bf00      	nop
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	40020407 	.word	0x40020407
 800b768:	4002081c 	.word	0x4002081c
 800b76c:	cccccccd 	.word	0xcccccccd
 800b770:	40020880 	.word	0x40020880

0800b774 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b784:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	461a      	mov	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a09      	ldr	r2, [pc, #36]	; (800b7bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800b798:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	f003 0303 	and.w	r3, r3, #3
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	409a      	lsls	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b7aa:	bf00      	nop
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	1000823f 	.word	0x1000823f
 800b7bc:	40020940 	.word	0x40020940

0800b7c0 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	0c1b      	lsrs	r3, r3, #16
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 031f 	and.w	r3, r3, #31
 800b7dc:	2201      	movs	r2, #1
 800b7de:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e2:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	015b      	lsls	r3, r3, #5
 800b7e8:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800b7ec:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800b7f0:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	601a      	str	r2, [r3, #0]
}
 800b7f8:	bf00      	nop
 800b7fa:	371c      	adds	r7, #28
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800b80a:	f04f 33ff 	mov.w	r3, #4294967295
 800b80e:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800b810:	4b41      	ldr	r3, [pc, #260]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b812:	691a      	ldr	r2, [r3, #16]
 800b814:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800b818:	4013      	ands	r3, r2
 800b81a:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800b81c:	4b3e      	ldr	r3, [pc, #248]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b81e:	695a      	ldr	r2, [r3, #20]
 800b820:	4b3e      	ldr	r3, [pc, #248]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	43db      	mvns	r3, r3
 800b826:	493c      	ldr	r1, [pc, #240]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b828:	4013      	ands	r3, r2
 800b82a:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800b82c:	4b3b      	ldr	r3, [pc, #236]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b82e:	689a      	ldr	r2, [r3, #8]
 800b830:	4b3b      	ldr	r3, [pc, #236]	; (800b920 <HAL_FLASH_IRQHandler+0x11c>)
 800b832:	4013      	ands	r3, r2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 800b838:	4b38      	ldr	r3, [pc, #224]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	607b      	str	r3, [r7, #4]
 800b83e:	e008      	b.n	800b852 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800b840:	4b36      	ldr	r3, [pc, #216]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f003 0302 	and.w	r3, r3, #2
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d002      	beq.n	800b852 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 800b84c:	4b33      	ldr	r3, [pc, #204]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d022      	beq.n	800b89e <HAL_FLASH_IRQHandler+0x9a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800b858:	4b30      	ldr	r3, [pc, #192]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	4313      	orrs	r3, r2
 800b860:	4a2e      	ldr	r2, [pc, #184]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b862:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d007      	beq.n	800b87e <HAL_FLASH_IRQHandler+0x7a>
 800b86e:	4b2a      	ldr	r3, [pc, #168]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b870:	699a      	ldr	r2, [r3, #24]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b878:	4927      	ldr	r1, [pc, #156]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b87a:	4313      	orrs	r3, r2
 800b87c:	618b      	str	r3, [r1, #24]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d004      	beq.n	800b892 <HAL_FLASH_IRQHandler+0x8e>
 800b888:	4a23      	ldr	r2, [pc, #140]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800b890:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800b892:	4b22      	ldr	r3, [pc, #136]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b894:	2200      	movs	r2, #0
 800b896:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 f84d 	bl	800b938 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b89e:	4b1e      	ldr	r3, [pc, #120]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d124      	bne.n	800b8f4 <HAL_FLASH_IRQHandler+0xf0>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b8aa:	4b1b      	ldr	r3, [pc, #108]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800b8b0:	4b1a      	ldr	r3, [pc, #104]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d117      	bne.n	800b8e8 <HAL_FLASH_IRQHandler+0xe4>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800b8b8:	4b18      	ldr	r3, [pc, #96]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	4a17      	ldr	r2, [pc, #92]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8c0:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800b8c2:	4b16      	ldr	r3, [pc, #88]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <HAL_FLASH_IRQHandler+0xdc>
      {
        /* Increment page number */
        pFlash.Page++;
 800b8ca:	4b14      	ldr	r3, [pc, #80]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	4a12      	ldr	r2, [pc, #72]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8d2:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 800b8d4:	4b11      	ldr	r3, [pc, #68]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 f837 	bl	800b94c <FLASH_PageErase>
 800b8de:	e006      	b.n	800b8ee <HAL_FLASH_IRQHandler+0xea>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800b8e0:	4b0e      	ldr	r3, [pc, #56]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	609a      	str	r2, [r3, #8]
 800b8e6:	e002      	b.n	800b8ee <HAL_FLASH_IRQHandler+0xea>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800b8e8:	4b0c      	ldr	r3, [pc, #48]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f818 	bl	800b924 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 800b8f4:	4b09      	ldr	r3, [pc, #36]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d108      	bne.n	800b90e <HAL_FLASH_IRQHandler+0x10a>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800b8fc:	4b06      	ldr	r3, [pc, #24]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	4a05      	ldr	r2, [pc, #20]	; (800b918 <HAL_FLASH_IRQHandler+0x114>)
 800b902:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800b906:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <HAL_FLASH_IRQHandler+0x118>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	701a      	strb	r2, [r3, #0]
  }
}
 800b90e:	bf00      	nop
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	58004000 	.word	0x58004000
 800b91c:	20000728 	.word	0x20000728
 800b920:	00040001 	.word	0x00040001

0800b924 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800b954:	4b09      	ldr	r3, [pc, #36]	; (800b97c <FLASH_PageErase+0x30>)
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	4313      	orrs	r3, r2
 800b962:	4a06      	ldr	r2, [pc, #24]	; (800b97c <FLASH_PageErase+0x30>)
 800b964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b968:	f043 0302 	orr.w	r3, r3, #2
 800b96c:	6153      	str	r3, [r2, #20]
}
 800b96e:	bf00      	nop
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	58004000 	.word	0x58004000

0800b980 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b980:	b480      	push	{r7}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b98a:	2300      	movs	r3, #0
 800b98c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b98e:	e14c      	b.n	800bc2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	2101      	movs	r1, #1
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	fa01 f303 	lsl.w	r3, r1, r3
 800b99c:	4013      	ands	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 813e 	beq.w	800bc24 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	f003 0303 	and.w	r3, r3, #3
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d005      	beq.n	800b9c0 <HAL_GPIO_Init+0x40>
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	f003 0303 	and.w	r3, r3, #3
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d130      	bne.n	800ba22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	2203      	movs	r2, #3
 800b9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d0:	43db      	mvns	r3, r3
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	68da      	ldr	r2, [r3, #12]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fe:	43db      	mvns	r3, r3
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	4013      	ands	r3, r2
 800ba04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	091b      	lsrs	r3, r3, #4
 800ba0c:	f003 0201 	and.w	r2, r3, #1
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	fa02 f303 	lsl.w	r3, r2, r3
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f003 0303 	and.w	r3, r3, #3
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d017      	beq.n	800ba5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	2203      	movs	r2, #3
 800ba3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba3e:	43db      	mvns	r3, r3
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	4013      	ands	r3, r2
 800ba44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	689a      	ldr	r2, [r3, #8]
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d123      	bne.n	800bab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	08da      	lsrs	r2, r3, #3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3208      	adds	r2, #8
 800ba72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f003 0307 	and.w	r3, r3, #7
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	220f      	movs	r2, #15
 800ba82:	fa02 f303 	lsl.w	r3, r2, r3
 800ba86:	43db      	mvns	r3, r3
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	691a      	ldr	r2, [r3, #16]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	f003 0307 	and.w	r3, r3, #7
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	08da      	lsrs	r2, r3, #3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3208      	adds	r2, #8
 800baac:	6939      	ldr	r1, [r7, #16]
 800baae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	2203      	movs	r2, #3
 800babe:	fa02 f303 	lsl.w	r3, r2, r3
 800bac2:	43db      	mvns	r3, r3
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	4013      	ands	r3, r2
 800bac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f003 0203 	and.w	r2, r3, #3
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	005b      	lsls	r3, r3, #1
 800bad6:	fa02 f303 	lsl.w	r3, r2, r3
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	4313      	orrs	r3, r2
 800bade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 8098 	beq.w	800bc24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800baf4:	4a54      	ldr	r2, [pc, #336]	; (800bc48 <HAL_GPIO_Init+0x2c8>)
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	089b      	lsrs	r3, r3, #2
 800bafa:	3302      	adds	r3, #2
 800bafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	f003 0303 	and.w	r3, r3, #3
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	220f      	movs	r2, #15
 800bb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb10:	43db      	mvns	r3, r3
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	4013      	ands	r3, r2
 800bb16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bb1e:	d019      	beq.n	800bb54 <HAL_GPIO_Init+0x1d4>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a4a      	ldr	r2, [pc, #296]	; (800bc4c <HAL_GPIO_Init+0x2cc>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d013      	beq.n	800bb50 <HAL_GPIO_Init+0x1d0>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a49      	ldr	r2, [pc, #292]	; (800bc50 <HAL_GPIO_Init+0x2d0>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d00d      	beq.n	800bb4c <HAL_GPIO_Init+0x1cc>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a48      	ldr	r2, [pc, #288]	; (800bc54 <HAL_GPIO_Init+0x2d4>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d007      	beq.n	800bb48 <HAL_GPIO_Init+0x1c8>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a47      	ldr	r2, [pc, #284]	; (800bc58 <HAL_GPIO_Init+0x2d8>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d101      	bne.n	800bb44 <HAL_GPIO_Init+0x1c4>
 800bb40:	2304      	movs	r3, #4
 800bb42:	e008      	b.n	800bb56 <HAL_GPIO_Init+0x1d6>
 800bb44:	2307      	movs	r3, #7
 800bb46:	e006      	b.n	800bb56 <HAL_GPIO_Init+0x1d6>
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e004      	b.n	800bb56 <HAL_GPIO_Init+0x1d6>
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	e002      	b.n	800bb56 <HAL_GPIO_Init+0x1d6>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e000      	b.n	800bb56 <HAL_GPIO_Init+0x1d6>
 800bb54:	2300      	movs	r3, #0
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	f002 0203 	and.w	r2, r2, #3
 800bb5c:	0092      	lsls	r2, r2, #2
 800bb5e:	4093      	lsls	r3, r2
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800bb66:	4938      	ldr	r1, [pc, #224]	; (800bc48 <HAL_GPIO_Init+0x2c8>)
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	089b      	lsrs	r3, r3, #2
 800bb6c:	3302      	adds	r3, #2
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bb74:	4b39      	ldr	r3, [pc, #228]	; (800bc5c <HAL_GPIO_Init+0x2dc>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	43db      	mvns	r3, r3
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	4013      	ands	r3, r2
 800bb82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d003      	beq.n	800bb98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bb98:	4a30      	ldr	r2, [pc, #192]	; (800bc5c <HAL_GPIO_Init+0x2dc>)
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bb9e:	4b2f      	ldr	r3, [pc, #188]	; (800bc5c <HAL_GPIO_Init+0x2dc>)
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	43db      	mvns	r3, r3
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	4013      	ands	r3, r2
 800bbac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bbc2:	4a26      	ldr	r2, [pc, #152]	; (800bc5c <HAL_GPIO_Init+0x2dc>)
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bbc8:	4b24      	ldr	r3, [pc, #144]	; (800bc5c <HAL_GPIO_Init+0x2dc>)
 800bbca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	43db      	mvns	r3, r3
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bbee:	4a1b      	ldr	r2, [pc, #108]	; (800bc5c <HAL_GPIO_Init+0x2dc>)
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800bbf6:	4b19      	ldr	r3, [pc, #100]	; (800bc5c <HAL_GPIO_Init+0x2dc>)
 800bbf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	43db      	mvns	r3, r3
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	4013      	ands	r3, r2
 800bc06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bc1c:	4a0f      	ldr	r2, [pc, #60]	; (800bc5c <HAL_GPIO_Init+0x2dc>)
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	3301      	adds	r3, #1
 800bc28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	fa22 f303 	lsr.w	r3, r2, r3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f47f aeab 	bne.w	800b990 <HAL_GPIO_Init+0x10>
  }
}
 800bc3a:	bf00      	nop
 800bc3c:	bf00      	nop
 800bc3e:	371c      	adds	r7, #28
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	40010000 	.word	0x40010000
 800bc4c:	48000400 	.word	0x48000400
 800bc50:	48000800 	.word	0x48000800
 800bc54:	48000c00 	.word	0x48000c00
 800bc58:	48001000 	.word	0x48001000
 800bc5c:	58000800 	.word	0x58000800

0800bc60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	807b      	strh	r3, [r7, #2]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bc70:	787b      	ldrb	r3, [r7, #1]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d003      	beq.n	800bc7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800bc76:	887a      	ldrh	r2, [r7, #2]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800bc7c:	e002      	b.n	800bc84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800bc7e:	887a      	ldrh	r2, [r7, #2]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bca2:	887a      	ldrh	r2, [r7, #2]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	4013      	ands	r3, r2
 800bca8:	041a      	lsls	r2, r3, #16
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	43d9      	mvns	r1, r3
 800bcae:	887b      	ldrh	r3, [r7, #2]
 800bcb0:	400b      	ands	r3, r1
 800bcb2:	431a      	orrs	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	619a      	str	r2, [r3, #24]
}
 800bcb8:	bf00      	nop
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800bcce:	4b08      	ldr	r3, [pc, #32]	; (800bcf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bcd0:	68da      	ldr	r2, [r3, #12]
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d006      	beq.n	800bce8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bcda:	4a05      	ldr	r2, [pc, #20]	; (800bcf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bcdc:	88fb      	ldrh	r3, [r7, #6]
 800bcde:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fb fa7d 	bl	80071e2 <HAL_GPIO_EXTI_Callback>
  }
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	58000800 	.word	0x58000800

0800bcf4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800bcfa:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <HAL_HSEM_IRQHandler+0x30>)
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800bd00:	4b08      	ldr	r3, [pc, #32]	; (800bd24 <HAL_HSEM_IRQHandler+0x30>)
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	43db      	mvns	r3, r3
 800bd08:	4906      	ldr	r1, [pc, #24]	; (800bd24 <HAL_HSEM_IRQHandler+0x30>)
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800bd0e:	4a05      	ldr	r2, [pc, #20]	; (800bd24 <HAL_HSEM_IRQHandler+0x30>)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f807 	bl	800bd28 <HAL_HSEM_FreeCallback>
}
 800bd1a:	bf00      	nop
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	58001500 	.word	0x58001500

0800bd28 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d01e      	beq.n	800bd8c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800bd4e:	4b13      	ldr	r3, [pc, #76]	; (800bd9c <HAL_IPCC_Init+0x60>)
 800bd50:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7fc fcc4 	bl	80086ec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800bd64:	68b8      	ldr	r0, [r7, #8]
 800bd66:	f000 f85b 	bl	800be20 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f82c 	bl	800bdd4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800bd8a:	e001      	b.n	800bd90 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	58000c00 	.word	0x58000c00

0800bda0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800bdae:	bf00      	nop
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800bdba:	b480      	push	{r7}
 800bdbc:	b085      	sub	sp, #20
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800bdc8:	bf00      	nop
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800bddc:	2300      	movs	r3, #0
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	e00f      	b.n	800be02 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4413      	add	r3, r2
 800bdea:	4a0b      	ldr	r2, [pc, #44]	; (800be18 <IPCC_SetDefaultCallbacks+0x44>)
 800bdec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3306      	adds	r3, #6
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	4a08      	ldr	r2, [pc, #32]	; (800be1c <IPCC_SetDefaultCallbacks+0x48>)
 800bdfa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	3301      	adds	r3, #1
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b05      	cmp	r3, #5
 800be06:	d9ec      	bls.n	800bde2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	0800bda1 	.word	0x0800bda1
 800be1c:	0800bdbb 	.word	0x0800bdbb

0800be20 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800be34:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	223f      	movs	r2, #63	; 0x3f
 800be3a:	609a      	str	r2, [r3, #8]
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800be48:	b480      	push	{r7}
 800be4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be4c:	4b05      	ldr	r3, [pc, #20]	; (800be64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a04      	ldr	r2, [pc, #16]	; (800be64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800be52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be56:	6013      	str	r3, [r2, #0]
}
 800be58:	bf00      	nop
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	58000400 	.word	0x58000400

0800be68 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800be68:	b480      	push	{r7}
 800be6a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 800be6c:	bf00      	nop
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
	...

0800be78 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800be80:	4b04      	ldr	r3, [pc, #16]	; (800be94 <LL_EXTI_ReadFlag_0_31+0x1c>)
 800be82:	68da      	ldr	r2, [r3, #12]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4013      	ands	r3, r2
}
 800be88:	4618      	mov	r0, r3
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	58000800 	.word	0x58000800

0800be98 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 800bea0:	4b04      	ldr	r3, [pc, #16]	; (800beb4 <LL_EXTI_ReadFlag_32_63+0x1c>)
 800bea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4013      	ands	r3, r2
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr
 800beb4:	58000800 	.word	0x58000800

0800beb8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800bec0:	4a04      	ldr	r2, [pc, #16]	; (800bed4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	60d3      	str	r3, [r2, #12]
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	58000800 	.word	0x58000800

0800bed8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800bee0:	4a04      	ldr	r2, [pc, #16]	; (800bef4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800bee6:	bf00      	nop
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	58000800 	.word	0x58000800

0800bef8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bef8:	b480      	push	{r7}
 800befa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800befc:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <HAL_PWREx_GetVoltageRange+0x18>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	58000400 	.word	0x58000400

0800bf14 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 800bf18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bf1c:	f7ff ffac 	bl	800be78 <LL_EXTI_ReadFlag_0_31>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d005      	beq.n	800bf32 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800bf26:	f7ff ff9f 	bl	800be68 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800bf2a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bf2e:	f7ff ffc3 	bl	800beb8 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if (__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800bf32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bf36:	f7ff ff9f 	bl	800be78 <LL_EXTI_ReadFlag_0_31>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d005      	beq.n	800bf4c <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800bf40:	f000 f811 	bl	800bf66 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800bf44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bf48:	f7ff ffb6 	bl	800beb8 <LL_EXTI_ClearFlag_0_31>
  }
#endif /* PWR_CR2_PVME1 */

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 800bf4c:	2002      	movs	r0, #2
 800bf4e:	f7ff ffa3 	bl	800be98 <LL_EXTI_ReadFlag_32_63>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800bf58:	f000 f80c 	bl	800bf74 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800bf5c:	2002      	movs	r0, #2
 800bf5e:	f7ff ffbb 	bl	800bed8 <LL_EXTI_ClearFlag_32_63>
  }
}
 800bf62:	bf00      	nop
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800bf66:	b480      	push	{r7}
 800bf68:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800bf6a:	bf00      	nop
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800bf74:	b480      	push	{r7}
 800bf76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800bf78:	bf00      	nop
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bf82:	b480      	push	{r7}
 800bf84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bf86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf94:	d101      	bne.n	800bf9a <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e000      	b.n	800bf9c <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <LL_RCC_HSE_Enable>:
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bfaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfb8:	6013      	str	r3, [r2, #0]
}
 800bfba:	bf00      	nop
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <LL_RCC_HSE_Disable>:
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bfc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bfd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfd6:	6013      	str	r3, [r2, #0]
}
 800bfd8:	bf00      	nop
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <LL_RCC_HSE_IsReady>:
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bfe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bff4:	d101      	bne.n	800bffa <LL_RCC_HSE_IsReady+0x18>
 800bff6:	2301      	movs	r3, #1
 800bff8:	e000      	b.n	800bffc <LL_RCC_HSE_IsReady+0x1a>
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <LL_RCC_HSI_Enable>:
{
 800c006:	b480      	push	{r7}
 800c008:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c00a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c018:	6013      	str	r3, [r2, #0]
}
 800c01a:	bf00      	nop
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <LL_RCC_HSI_Disable>:
{
 800c024:	b480      	push	{r7}
 800c026:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c036:	6013      	str	r3, [r2, #0]
}
 800c038:	bf00      	nop
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <LL_RCC_HSI_IsReady>:
{
 800c042:	b480      	push	{r7}
 800c044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c054:	d101      	bne.n	800c05a <LL_RCC_HSI_IsReady+0x18>
 800c056:	2301      	movs	r3, #1
 800c058:	e000      	b.n	800c05c <LL_RCC_HSI_IsReady+0x1a>
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <LL_RCC_HSI_SetCalibTrimming>:
{
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	061b      	lsls	r3, r3, #24
 800c07c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c080:	4313      	orrs	r3, r2
 800c082:	604b      	str	r3, [r1, #4]
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <LL_RCC_HSI48_Enable>:
{
 800c090:	b480      	push	{r7}
 800c092:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c09c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c0a0:	f043 0301 	orr.w	r3, r3, #1
 800c0a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800c0a8:	bf00      	nop
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <LL_RCC_HSI48_Disable>:
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c0b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c0c2:	f023 0301 	bic.w	r3, r3, #1
 800c0c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800c0ca:	bf00      	nop
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <LL_RCC_HSI48_IsReady>:
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800c0d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0e0:	f003 0302 	and.w	r3, r3, #2
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d101      	bne.n	800c0ec <LL_RCC_HSI48_IsReady+0x18>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e000      	b.n	800c0ee <LL_RCC_HSI48_IsReady+0x1a>
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <LL_RCC_LSE_Enable>:
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c0fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c108:	f043 0301 	orr.w	r3, r3, #1
 800c10c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c110:	bf00      	nop
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <LL_RCC_LSE_Disable>:
{
 800c11a:	b480      	push	{r7}
 800c11c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c11e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c12a:	f023 0301 	bic.w	r3, r3, #1
 800c12e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c132:	bf00      	nop
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <LL_RCC_LSE_EnableBypass>:
{
 800c13c:	b480      	push	{r7}
 800c13e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c14c:	f043 0304 	orr.w	r3, r3, #4
 800c150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c154:	bf00      	nop
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <LL_RCC_LSE_DisableBypass>:
{
 800c15e:	b480      	push	{r7}
 800c160:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c16a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c16e:	f023 0304 	bic.w	r3, r3, #4
 800c172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800c176:	bf00      	nop
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <LL_RCC_LSE_IsReady>:
{
 800c180:	b480      	push	{r7}
 800c182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b02      	cmp	r3, #2
 800c192:	d101      	bne.n	800c198 <LL_RCC_LSE_IsReady+0x18>
 800c194:	2301      	movs	r3, #1
 800c196:	e000      	b.n	800c19a <LL_RCC_LSE_IsReady+0x1a>
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <LL_RCC_LSI1_Enable>:
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c1a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1b4:	f043 0301 	orr.w	r3, r3, #1
 800c1b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c1bc:	bf00      	nop
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <LL_RCC_LSI1_Disable>:
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c1ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1d6:	f023 0301 	bic.w	r3, r3, #1
 800c1da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c1de:	bf00      	nop
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <LL_RCC_LSI1_IsReady>:
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c1ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d101      	bne.n	800c200 <LL_RCC_LSI1_IsReady+0x18>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e000      	b.n	800c202 <LL_RCC_LSI1_IsReady+0x1a>
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <LL_RCC_LSI2_Enable>:
{
 800c20c:	b480      	push	{r7}
 800c20e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c21c:	f043 0304 	orr.w	r3, r3, #4
 800c220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c224:	bf00      	nop
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <LL_RCC_LSI2_Disable>:
{
 800c22e:	b480      	push	{r7}
 800c230:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c23a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c23e:	f023 0304 	bic.w	r3, r3, #4
 800c242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c246:	bf00      	nop
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <LL_RCC_LSI2_IsReady>:
{
 800c250:	b480      	push	{r7}
 800c252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c25c:	f003 0308 	and.w	r3, r3, #8
 800c260:	2b08      	cmp	r3, #8
 800c262:	d101      	bne.n	800c268 <LL_RCC_LSI2_IsReady+0x18>
 800c264:	2301      	movs	r3, #1
 800c266:	e000      	b.n	800c26a <LL_RCC_LSI2_IsReady+0x1a>
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <LL_RCC_LSI2_SetTrimming>:
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800c27c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c284:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	021b      	lsls	r3, r3, #8
 800c28c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c290:	4313      	orrs	r3, r2
 800c292:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <LL_RCC_MSI_Enable>:
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c2a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c2b0:	f043 0301 	orr.w	r3, r3, #1
 800c2b4:	6013      	str	r3, [r2, #0]
}
 800c2b6:	bf00      	nop
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <LL_RCC_MSI_Disable>:
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c2c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c2ce:	f023 0301 	bic.w	r3, r3, #1
 800c2d2:	6013      	str	r3, [r2, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <LL_RCC_MSI_IsReady>:
{
 800c2de:	b480      	push	{r7}
 800c2e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c2e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 0302 	and.w	r3, r3, #2
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d101      	bne.n	800c2f4 <LL_RCC_MSI_IsReady+0x16>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e000      	b.n	800c2f6 <LL_RCC_MSI_IsReady+0x18>
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <LL_RCC_MSI_SetRange>:
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4313      	orrs	r3, r2
 800c31a:	600b      	str	r3, [r1, #0]
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <LL_RCC_MSI_GetRange>:
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c32e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c338:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2bb0      	cmp	r3, #176	; 0xb0
 800c33e:	d901      	bls.n	800c344 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c340:	23b0      	movs	r3, #176	; 0xb0
 800c342:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c344:	687b      	ldr	r3, [r7, #4]
}
 800c346:	4618      	mov	r0, r3
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c35a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	021b      	lsls	r3, r3, #8
 800c368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c36c:	4313      	orrs	r3, r2
 800c36e:	604b      	str	r3, [r1, #4]
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <LL_RCC_SetSysClkSource>:
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f023 0203 	bic.w	r2, r3, #3
 800c38e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4313      	orrs	r3, r2
 800c396:	608b      	str	r3, [r1, #8]
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <LL_RCC_GetSysClkSource>:
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c3a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	f003 030c 	and.w	r3, r3, #12
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <LL_RCC_SetAHBPrescaler>:
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c3c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c3ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	608b      	str	r3, [r1, #8]
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c3ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c3f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c3f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <LL_RCC_SetAHB4Prescaler>:
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c41c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c420:	f023 020f 	bic.w	r2, r3, #15
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	091b      	lsrs	r3, r3, #4
 800c428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c42c:	4313      	orrs	r3, r2
 800c42e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c432:	bf00      	nop
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr

0800c43e <LL_RCC_SetAPB1Prescaler>:
{
 800c43e:	b480      	push	{r7}
 800c440:	b083      	sub	sp, #12
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4313      	orrs	r3, r2
 800c458:	608b      	str	r3, [r1, #8]
}
 800c45a:	bf00      	nop
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <LL_RCC_SetAPB2Prescaler>:
{
 800c466:	b480      	push	{r7}
 800c468:	b083      	sub	sp, #12
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c46e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4313      	orrs	r3, r2
 800c480:	608b      	str	r3, [r1, #8]
}
 800c482:	bf00      	nop
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <LL_RCC_GetAHBPrescaler>:
{
 800c48e:	b480      	push	{r7}
 800c490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <LL_RCC_GetAHB4Prescaler>:
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c4aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c4b2:	011b      	lsls	r3, r3, #4
 800c4b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr

0800c4c2 <LL_RCC_GetAPB1Prescaler>:
{
 800c4c2:	b480      	push	{r7}
 800c4c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c4c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr

0800c4da <LL_RCC_GetAPB2Prescaler>:
{
 800c4da:	b480      	push	{r7}
 800c4dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c4de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <LL_RCC_PLL_Enable>:
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c4f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c504:	6013      	str	r3, [r2, #0]
}
 800c506:	bf00      	nop
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <LL_RCC_PLL_Disable>:
{
 800c510:	b480      	push	{r7}
 800c512:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c51e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c522:	6013      	str	r3, [r2, #0]
}
 800c524:	bf00      	nop
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <LL_RCC_PLL_IsReady>:
{
 800c52e:	b480      	push	{r7}
 800c530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c53c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c540:	d101      	bne.n	800c546 <LL_RCC_PLL_IsReady+0x18>
 800c542:	2301      	movs	r3, #1
 800c544:	e000      	b.n	800c548 <LL_RCC_PLL_IsReady+0x1a>
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <LL_RCC_PLL_GetN>:
{
 800c552:	b480      	push	{r7}
 800c554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	0a1b      	lsrs	r3, r3, #8
 800c55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800c562:	4618      	mov	r0, r3
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <LL_RCC_PLL_GetR>:
{
 800c56c:	b480      	push	{r7}
 800c56e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <LL_RCC_PLL_GetDivider>:
{
 800c584:	b480      	push	{r7}
 800c586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c592:	4618      	mov	r0, r3
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <LL_RCC_PLL_GetMainSource>:
{
 800c59c:	b480      	push	{r7}
 800c59e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c5a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	f003 0303 	and.w	r3, r3, #3
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <LL_RCC_IsActiveFlag_HPRE>:
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c5b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5c6:	d101      	bne.n	800c5cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e000      	b.n	800c5ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800c5d8:	b480      	push	{r7}
 800c5da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c5dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c5e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ec:	d101      	bne.n	800c5f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e000      	b.n	800c5f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800c5fe:	b480      	push	{r7}
 800c600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c606:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c60a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c60e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c612:	d101      	bne.n	800c618 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c614:	2301      	movs	r3, #1
 800c616:	e000      	b.n	800c61a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <LL_RCC_IsActiveFlag_PPRE1>:
{
 800c624:	b480      	push	{r7}
 800c626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c636:	d101      	bne.n	800c63c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c638:	2301      	movs	r3, #1
 800c63a:	e000      	b.n	800c63e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800c648:	b480      	push	{r7}
 800c64a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c64c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c656:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c65a:	d101      	bne.n	800c660 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c65c:	2301      	movs	r3, #1
 800c65e:	e000      	b.n	800c662 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c66c:	b590      	push	{r4, r7, lr}
 800c66e:	b08d      	sub	sp, #52	; 0x34
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e363      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 808d 	beq.w	800c7a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c68c:	f7ff fe8a 	bl	800c3a4 <LL_RCC_GetSysClkSource>
 800c690:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c692:	f7ff ff83 	bl	800c59c <LL_RCC_PLL_GetMainSource>
 800c696:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d005      	beq.n	800c6aa <HAL_RCC_OscConfig+0x3e>
 800c69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a0:	2b0c      	cmp	r3, #12
 800c6a2:	d147      	bne.n	800c734 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d144      	bne.n	800c734 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d101      	bne.n	800c6b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e347      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c6ba:	f7ff fe35 	bl	800c328 <LL_RCC_MSI_GetRange>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	429c      	cmp	r4, r3
 800c6c2:	d914      	bls.n	800c6ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 fd2f 	bl	800d12c <RCC_SetFlashLatencyFromMSIRange>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d001      	beq.n	800c6d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e336      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff fe0f 	bl	800c300 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff fe33 	bl	800c352 <LL_RCC_MSI_SetCalibTrimming>
 800c6ec:	e013      	b.n	800c716 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff fe04 	bl	800c300 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a1b      	ldr	r3, [r3, #32]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7ff fe28 	bl	800c352 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	4618      	mov	r0, r3
 800c708:	f000 fd10 	bl	800d12c <RCC_SetFlashLatencyFromMSIRange>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e317      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c716:	f000 fcc9 	bl	800d0ac <HAL_RCC_GetHCLKFreq>
 800c71a:	4603      	mov	r3, r0
 800c71c:	4aa4      	ldr	r2, [pc, #656]	; (800c9b0 <HAL_RCC_OscConfig+0x344>)
 800c71e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c720:	4ba4      	ldr	r3, [pc, #656]	; (800c9b4 <HAL_RCC_OscConfig+0x348>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4618      	mov	r0, r3
 800c726:	f7fe faed 	bl	800ad04 <HAL_InitTick>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d039      	beq.n	800c7a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	e308      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	69db      	ldr	r3, [r3, #28]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d01e      	beq.n	800c77a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c73c:	f7ff fdb1 	bl	800c2a2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c740:	f7fe fb2e 	bl	800ada0 <HAL_GetTick>
 800c744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c746:	e008      	b.n	800c75a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c748:	f7fe fb2a 	bl	800ada0 <HAL_GetTick>
 800c74c:	4602      	mov	r2, r0
 800c74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	2b02      	cmp	r3, #2
 800c754:	d901      	bls.n	800c75a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c756:	2303      	movs	r3, #3
 800c758:	e2f5      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c75a:	f7ff fdc0 	bl	800c2de <LL_RCC_MSI_IsReady>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0f1      	beq.n	800c748 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff fdc9 	bl	800c300 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff fded 	bl	800c352 <LL_RCC_MSI_SetCalibTrimming>
 800c778:	e015      	b.n	800c7a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c77a:	f7ff fda1 	bl	800c2c0 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c77e:	f7fe fb0f 	bl	800ada0 <HAL_GetTick>
 800c782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c784:	e008      	b.n	800c798 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c786:	f7fe fb0b 	bl	800ada0 <HAL_GetTick>
 800c78a:	4602      	mov	r2, r0
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	2b02      	cmp	r3, #2
 800c792:	d901      	bls.n	800c798 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	e2d6      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c798:	f7ff fda1 	bl	800c2de <LL_RCC_MSI_IsReady>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1f1      	bne.n	800c786 <HAL_RCC_OscConfig+0x11a>
 800c7a2:	e000      	b.n	800c7a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c7a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d047      	beq.n	800c842 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7b2:	f7ff fdf7 	bl	800c3a4 <LL_RCC_GetSysClkSource>
 800c7b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7b8:	f7ff fef0 	bl	800c59c <LL_RCC_PLL_GetMainSource>
 800c7bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	2b08      	cmp	r3, #8
 800c7c2:	d005      	beq.n	800c7d0 <HAL_RCC_OscConfig+0x164>
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	2b0c      	cmp	r3, #12
 800c7c8:	d108      	bne.n	800c7dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	d105      	bne.n	800c7dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d134      	bne.n	800c842 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e2b4      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e4:	d102      	bne.n	800c7ec <HAL_RCC_OscConfig+0x180>
 800c7e6:	f7ff fbde 	bl	800bfa6 <LL_RCC_HSE_Enable>
 800c7ea:	e001      	b.n	800c7f0 <HAL_RCC_OscConfig+0x184>
 800c7ec:	f7ff fbea 	bl	800bfc4 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d012      	beq.n	800c81e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7f8:	f7fe fad2 	bl	800ada0 <HAL_GetTick>
 800c7fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c7fe:	e008      	b.n	800c812 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c800:	f7fe face 	bl	800ada0 <HAL_GetTick>
 800c804:	4602      	mov	r2, r0
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	2b64      	cmp	r3, #100	; 0x64
 800c80c:	d901      	bls.n	800c812 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	e299      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c812:	f7ff fbe6 	bl	800bfe2 <LL_RCC_HSE_IsReady>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f1      	beq.n	800c800 <HAL_RCC_OscConfig+0x194>
 800c81c:	e011      	b.n	800c842 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c81e:	f7fe fabf 	bl	800ada0 <HAL_GetTick>
 800c822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c824:	e008      	b.n	800c838 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c826:	f7fe fabb 	bl	800ada0 <HAL_GetTick>
 800c82a:	4602      	mov	r2, r0
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	2b64      	cmp	r3, #100	; 0x64
 800c832:	d901      	bls.n	800c838 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c834:	2303      	movs	r3, #3
 800c836:	e286      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c838:	f7ff fbd3 	bl	800bfe2 <LL_RCC_HSE_IsReady>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1f1      	bne.n	800c826 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0302 	and.w	r3, r3, #2
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d04c      	beq.n	800c8e8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c84e:	f7ff fda9 	bl	800c3a4 <LL_RCC_GetSysClkSource>
 800c852:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c854:	f7ff fea2 	bl	800c59c <LL_RCC_PLL_GetMainSource>
 800c858:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	2b04      	cmp	r3, #4
 800c85e:	d005      	beq.n	800c86c <HAL_RCC_OscConfig+0x200>
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	2b0c      	cmp	r3, #12
 800c864:	d10e      	bne.n	800c884 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d10b      	bne.n	800c884 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e266      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff fbf2 	bl	800c066 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c882:	e031      	b.n	800c8e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d019      	beq.n	800c8c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c88c:	f7ff fbbb 	bl	800c006 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c890:	f7fe fa86 	bl	800ada0 <HAL_GetTick>
 800c894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c896:	e008      	b.n	800c8aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c898:	f7fe fa82 	bl	800ada0 <HAL_GetTick>
 800c89c:	4602      	mov	r2, r0
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d901      	bls.n	800c8aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	e24d      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c8aa:	f7ff fbca 	bl	800c042 <LL_RCC_HSI_IsReady>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d0f1      	beq.n	800c898 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff fbd4 	bl	800c066 <LL_RCC_HSI_SetCalibTrimming>
 800c8be:	e013      	b.n	800c8e8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c8c0:	f7ff fbb0 	bl	800c024 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c4:	f7fe fa6c 	bl	800ada0 <HAL_GetTick>
 800c8c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c8ca:	e008      	b.n	800c8de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c8cc:	f7fe fa68 	bl	800ada0 <HAL_GetTick>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	d901      	bls.n	800c8de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e233      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c8de:	f7ff fbb0 	bl	800c042 <LL_RCC_HSI_IsReady>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1f1      	bne.n	800c8cc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0308 	and.w	r3, r3, #8
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d106      	bne.n	800c902 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 80a3 	beq.w	800ca48 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	695b      	ldr	r3, [r3, #20]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d076      	beq.n	800c9f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 0310 	and.w	r3, r3, #16
 800c912:	2b00      	cmp	r3, #0
 800c914:	d046      	beq.n	800c9a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c916:	f7ff fc67 	bl	800c1e8 <LL_RCC_LSI1_IsReady>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d113      	bne.n	800c948 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c920:	f7ff fc40 	bl	800c1a4 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c924:	f7fe fa3c 	bl	800ada0 <HAL_GetTick>
 800c928:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c92a:	e008      	b.n	800c93e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c92c:	f7fe fa38 	bl	800ada0 <HAL_GetTick>
 800c930:	4602      	mov	r2, r0
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	1ad3      	subs	r3, r2, r3
 800c936:	2b02      	cmp	r3, #2
 800c938:	d901      	bls.n	800c93e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c93a:	2303      	movs	r3, #3
 800c93c:	e203      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c93e:	f7ff fc53 	bl	800c1e8 <LL_RCC_LSI1_IsReady>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d0f1      	beq.n	800c92c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c948:	f7ff fc60 	bl	800c20c <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c94c:	f7fe fa28 	bl	800ada0 <HAL_GetTick>
 800c950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c952:	e008      	b.n	800c966 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c954:	f7fe fa24 	bl	800ada0 <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	2b03      	cmp	r3, #3
 800c960:	d901      	bls.n	800c966 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e1ef      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c966:	f7ff fc73 	bl	800c250 <LL_RCC_LSI2_IsReady>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0f1      	beq.n	800c954 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	699b      	ldr	r3, [r3, #24]
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff fc7d 	bl	800c274 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c97a:	f7ff fc24 	bl	800c1c6 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c97e:	f7fe fa0f 	bl	800ada0 <HAL_GetTick>
 800c982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c984:	e008      	b.n	800c998 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c986:	f7fe fa0b 	bl	800ada0 <HAL_GetTick>
 800c98a:	4602      	mov	r2, r0
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	2b02      	cmp	r3, #2
 800c992:	d901      	bls.n	800c998 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c994:	2303      	movs	r3, #3
 800c996:	e1d6      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c998:	f7ff fc26 	bl	800c1e8 <LL_RCC_LSI1_IsReady>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1f1      	bne.n	800c986 <HAL_RCC_OscConfig+0x31a>
 800c9a2:	e051      	b.n	800ca48 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c9a4:	f7ff fbfe 	bl	800c1a4 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a8:	f7fe f9fa 	bl	800ada0 <HAL_GetTick>
 800c9ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c9ae:	e00c      	b.n	800c9ca <HAL_RCC_OscConfig+0x35e>
 800c9b0:	20000020 	.word	0x20000020
 800c9b4:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c9b8:	f7fe f9f2 	bl	800ada0 <HAL_GetTick>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d901      	bls.n	800c9ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	e1bd      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c9ca:	f7ff fc0d 	bl	800c1e8 <LL_RCC_LSI1_IsReady>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d0f1      	beq.n	800c9b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c9d4:	f7ff fc2b 	bl	800c22e <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c9d8:	e008      	b.n	800c9ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c9da:	f7fe f9e1 	bl	800ada0 <HAL_GetTick>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d901      	bls.n	800c9ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	e1ac      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c9ec:	f7ff fc30 	bl	800c250 <LL_RCC_LSI2_IsReady>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1f1      	bne.n	800c9da <HAL_RCC_OscConfig+0x36e>
 800c9f6:	e027      	b.n	800ca48 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c9f8:	f7ff fc19 	bl	800c22e <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9fc:	f7fe f9d0 	bl	800ada0 <HAL_GetTick>
 800ca00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ca02:	e008      	b.n	800ca16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ca04:	f7fe f9cc 	bl	800ada0 <HAL_GetTick>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d901      	bls.n	800ca16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ca12:	2303      	movs	r3, #3
 800ca14:	e197      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ca16:	f7ff fc1b 	bl	800c250 <LL_RCC_LSI2_IsReady>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1f1      	bne.n	800ca04 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ca20:	f7ff fbd1 	bl	800c1c6 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca24:	f7fe f9bc 	bl	800ada0 <HAL_GetTick>
 800ca28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ca2a:	e008      	b.n	800ca3e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ca2c:	f7fe f9b8 	bl	800ada0 <HAL_GetTick>
 800ca30:	4602      	mov	r2, r0
 800ca32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d901      	bls.n	800ca3e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e183      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ca3e:	f7ff fbd3 	bl	800c1e8 <LL_RCC_LSI1_IsReady>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1f1      	bne.n	800ca2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d05b      	beq.n	800cb0c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca54:	4ba7      	ldr	r3, [pc, #668]	; (800ccf4 <HAL_RCC_OscConfig+0x688>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d114      	bne.n	800ca8a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ca60:	f7ff f9f2 	bl	800be48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca64:	f7fe f99c 	bl	800ada0 <HAL_GetTick>
 800ca68:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca6a:	e008      	b.n	800ca7e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca6c:	f7fe f998 	bl	800ada0 <HAL_GetTick>
 800ca70:	4602      	mov	r2, r0
 800ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d901      	bls.n	800ca7e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ca7a:	2303      	movs	r3, #3
 800ca7c:	e163      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca7e:	4b9d      	ldr	r3, [pc, #628]	; (800ccf4 <HAL_RCC_OscConfig+0x688>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d0f0      	beq.n	800ca6c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d102      	bne.n	800ca98 <HAL_RCC_OscConfig+0x42c>
 800ca92:	f7ff fb31 	bl	800c0f8 <LL_RCC_LSE_Enable>
 800ca96:	e00c      	b.n	800cab2 <HAL_RCC_OscConfig+0x446>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	2b05      	cmp	r3, #5
 800ca9e:	d104      	bne.n	800caaa <HAL_RCC_OscConfig+0x43e>
 800caa0:	f7ff fb4c 	bl	800c13c <LL_RCC_LSE_EnableBypass>
 800caa4:	f7ff fb28 	bl	800c0f8 <LL_RCC_LSE_Enable>
 800caa8:	e003      	b.n	800cab2 <HAL_RCC_OscConfig+0x446>
 800caaa:	f7ff fb36 	bl	800c11a <LL_RCC_LSE_Disable>
 800caae:	f7ff fb56 	bl	800c15e <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d014      	beq.n	800cae4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caba:	f7fe f971 	bl	800ada0 <HAL_GetTick>
 800cabe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800cac0:	e00a      	b.n	800cad8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cac2:	f7fe f96d 	bl	800ada0 <HAL_GetTick>
 800cac6:	4602      	mov	r2, r0
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d901      	bls.n	800cad8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800cad4:	2303      	movs	r3, #3
 800cad6:	e136      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800cad8:	f7ff fb52 	bl	800c180 <LL_RCC_LSE_IsReady>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0ef      	beq.n	800cac2 <HAL_RCC_OscConfig+0x456>
 800cae2:	e013      	b.n	800cb0c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cae4:	f7fe f95c 	bl	800ada0 <HAL_GetTick>
 800cae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800caea:	e00a      	b.n	800cb02 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800caec:	f7fe f958 	bl	800ada0 <HAL_GetTick>
 800caf0:	4602      	mov	r2, r0
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d901      	bls.n	800cb02 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800cafe:	2303      	movs	r3, #3
 800cb00:	e121      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800cb02:	f7ff fb3d 	bl	800c180 <LL_RCC_LSE_IsReady>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1ef      	bne.n	800caec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d02c      	beq.n	800cb72 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d014      	beq.n	800cb4a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cb20:	f7ff fab6 	bl	800c090 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb24:	f7fe f93c 	bl	800ada0 <HAL_GetTick>
 800cb28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800cb2a:	e008      	b.n	800cb3e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cb2c:	f7fe f938 	bl	800ada0 <HAL_GetTick>
 800cb30:	4602      	mov	r2, r0
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d901      	bls.n	800cb3e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e103      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800cb3e:	f7ff fac9 	bl	800c0d4 <LL_RCC_HSI48_IsReady>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0f1      	beq.n	800cb2c <HAL_RCC_OscConfig+0x4c0>
 800cb48:	e013      	b.n	800cb72 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cb4a:	f7ff fab2 	bl	800c0b2 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb4e:	f7fe f927 	bl	800ada0 <HAL_GetTick>
 800cb52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800cb54:	e008      	b.n	800cb68 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cb56:	f7fe f923 	bl	800ada0 <HAL_GetTick>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d901      	bls.n	800cb68 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800cb64:	2303      	movs	r3, #3
 800cb66:	e0ee      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800cb68:	f7ff fab4 	bl	800c0d4 <LL_RCC_HSI48_IsReady>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1f1      	bne.n	800cb56 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f000 80e4 	beq.w	800cd44 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb7c:	f7ff fc12 	bl	800c3a4 <LL_RCC_GetSysClkSource>
 800cb80:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800cb82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	f040 80b4 	bne.w	800ccfc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f003 0203 	and.w	r2, r3, #3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d123      	bne.n	800cbea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d11c      	bne.n	800cbea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	0a1b      	lsrs	r3, r3, #8
 800cbb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d114      	bne.n	800cbea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d10d      	bne.n	800cbea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d106      	bne.n	800cbea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d05d      	beq.n	800cca6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b0c      	cmp	r3, #12
 800cbee:	d058      	beq.n	800cca2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800cbf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e0a1      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cc02:	f7ff fc85 	bl	800c510 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cc06:	f7fe f8cb 	bl	800ada0 <HAL_GetTick>
 800cc0a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc0c:	e008      	b.n	800cc20 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc0e:	f7fe f8c7 	bl	800ada0 <HAL_GetTick>
 800cc12:	4602      	mov	r2, r0
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d901      	bls.n	800cc20 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	e092      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1ef      	bne.n	800cc0e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cc2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc32:	68da      	ldr	r2, [r3, #12]
 800cc34:	4b30      	ldr	r3, [pc, #192]	; (800ccf8 <HAL_RCC_OscConfig+0x68c>)
 800cc36:	4013      	ands	r3, r2
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cc40:	4311      	orrs	r1, r2
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cc46:	0212      	lsls	r2, r2, #8
 800cc48:	4311      	orrs	r1, r2
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cc4e:	4311      	orrs	r1, r2
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cc54:	4311      	orrs	r1, r2
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800cc5a:	430a      	orrs	r2, r1
 800cc5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cc60:	4313      	orrs	r3, r2
 800cc62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cc64:	f7ff fc45 	bl	800c4f2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cc68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cc78:	f7fe f892 	bl	800ada0 <HAL_GetTick>
 800cc7c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc7e:	e008      	b.n	800cc92 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc80:	f7fe f88e 	bl	800ada0 <HAL_GetTick>
 800cc84:	4602      	mov	r2, r0
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d901      	bls.n	800cc92 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	e059      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d0ef      	beq.n	800cc80 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cca0:	e050      	b.n	800cd44 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	e04f      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d147      	bne.n	800cd44 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ccb4:	f7ff fc1d 	bl	800c4f2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ccb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ccc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ccc8:	f7fe f86a 	bl	800ada0 <HAL_GetTick>
 800cccc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ccce:	e008      	b.n	800cce2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccd0:	f7fe f866 	bl	800ada0 <HAL_GetTick>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d901      	bls.n	800cce2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800ccde:	2303      	movs	r3, #3
 800cce0:	e031      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0ef      	beq.n	800ccd0 <HAL_RCC_OscConfig+0x664>
 800ccf0:	e028      	b.n	800cd44 <HAL_RCC_OscConfig+0x6d8>
 800ccf2:	bf00      	nop
 800ccf4:	58000400 	.word	0x58000400
 800ccf8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	2b0c      	cmp	r3, #12
 800cd00:	d01e      	beq.n	800cd40 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd02:	f7ff fc05 	bl	800c510 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd06:	f7fe f84b 	bl	800ada0 <HAL_GetTick>
 800cd0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd0c:	e008      	b.n	800cd20 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd0e:	f7fe f847 	bl	800ada0 <HAL_GetTick>
 800cd12:	4602      	mov	r2, r0
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d901      	bls.n	800cd20 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	e012      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1ef      	bne.n	800cd0e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800cd2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd32:	68da      	ldr	r2, [r3, #12]
 800cd34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cd38:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <HAL_RCC_OscConfig+0x6e4>)
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	60cb      	str	r3, [r1, #12]
 800cd3e:	e001      	b.n	800cd44 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	e000      	b.n	800cd46 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3734      	adds	r7, #52	; 0x34
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd90      	pop	{r4, r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	eefefffc 	.word	0xeefefffc

0800cd54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d101      	bne.n	800cd68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	e12d      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cd68:	4b98      	ldr	r3, [pc, #608]	; (800cfcc <HAL_RCC_ClockConfig+0x278>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 0307 	and.w	r3, r3, #7
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d91b      	bls.n	800cdae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd76:	4b95      	ldr	r3, [pc, #596]	; (800cfcc <HAL_RCC_ClockConfig+0x278>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f023 0207 	bic.w	r2, r3, #7
 800cd7e:	4993      	ldr	r1, [pc, #588]	; (800cfcc <HAL_RCC_ClockConfig+0x278>)
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd86:	f7fe f80b 	bl	800ada0 <HAL_GetTick>
 800cd8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd8c:	e008      	b.n	800cda0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cd8e:	f7fe f807 	bl	800ada0 <HAL_GetTick>
 800cd92:	4602      	mov	r2, r0
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d901      	bls.n	800cda0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800cd9c:	2303      	movs	r3, #3
 800cd9e:	e111      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cda0:	4b8a      	ldr	r3, [pc, #552]	; (800cfcc <HAL_RCC_ClockConfig+0x278>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 0307 	and.w	r3, r3, #7
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d1ef      	bne.n	800cd8e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d016      	beq.n	800cde8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7ff fafc 	bl	800c3bc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cdc4:	f7fd ffec 	bl	800ada0 <HAL_GetTick>
 800cdc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cdca:	e008      	b.n	800cdde <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cdcc:	f7fd ffe8 	bl	800ada0 <HAL_GetTick>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	1ad3      	subs	r3, r2, r3
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d901      	bls.n	800cdde <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e0f2      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cdde:	f7ff fbe9 	bl	800c5b4 <LL_RCC_IsActiveFlag_HPRE>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d0f1      	beq.n	800cdcc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 0320 	and.w	r3, r3, #32
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d016      	beq.n	800ce22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff faf3 	bl	800c3e4 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cdfe:	f7fd ffcf 	bl	800ada0 <HAL_GetTick>
 800ce02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ce04:	e008      	b.n	800ce18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ce06:	f7fd ffcb 	bl	800ada0 <HAL_GetTick>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d901      	bls.n	800ce18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800ce14:	2303      	movs	r3, #3
 800ce16:	e0d5      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800ce18:	f7ff fbde 	bl	800c5d8 <LL_RCC_IsActiveFlag_C2HPRE>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d0f1      	beq.n	800ce06 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d016      	beq.n	800ce5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff faec 	bl	800c410 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ce38:	f7fd ffb2 	bl	800ada0 <HAL_GetTick>
 800ce3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ce3e:	e008      	b.n	800ce52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ce40:	f7fd ffae 	bl	800ada0 <HAL_GetTick>
 800ce44:	4602      	mov	r2, r0
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d901      	bls.n	800ce52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ce4e:	2303      	movs	r3, #3
 800ce50:	e0b8      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ce52:	f7ff fbd4 	bl	800c5fe <LL_RCC_IsActiveFlag_SHDHPRE>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d0f1      	beq.n	800ce40 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0304 	and.w	r3, r3, #4
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d016      	beq.n	800ce96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff fae6 	bl	800c43e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ce72:	f7fd ff95 	bl	800ada0 <HAL_GetTick>
 800ce76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ce78:	e008      	b.n	800ce8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ce7a:	f7fd ff91 	bl	800ada0 <HAL_GetTick>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d901      	bls.n	800ce8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	e09b      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ce8c:	f7ff fbca 	bl	800c624 <LL_RCC_IsActiveFlag_PPRE1>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0f1      	beq.n	800ce7a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f003 0308 	and.w	r3, r3, #8
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d017      	beq.n	800ced2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	00db      	lsls	r3, r3, #3
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff fadc 	bl	800c466 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ceae:	f7fd ff77 	bl	800ada0 <HAL_GetTick>
 800ceb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ceb4:	e008      	b.n	800cec8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ceb6:	f7fd ff73 	bl	800ada0 <HAL_GetTick>
 800ceba:	4602      	mov	r2, r0
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d901      	bls.n	800cec8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800cec4:	2303      	movs	r3, #3
 800cec6:	e07d      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cec8:	f7ff fbbe 	bl	800c648 <LL_RCC_IsActiveFlag_PPRE2>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0f1      	beq.n	800ceb6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d043      	beq.n	800cf66 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d106      	bne.n	800cef4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cee6:	f7ff f87c 	bl	800bfe2 <LL_RCC_HSE_IsReady>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d11e      	bne.n	800cf2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	e067      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	2b03      	cmp	r3, #3
 800cefa:	d106      	bne.n	800cf0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cefc:	f7ff fb17 	bl	800c52e <LL_RCC_PLL_IsReady>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d113      	bne.n	800cf2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e05c      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d106      	bne.n	800cf20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cf12:	f7ff f9e4 	bl	800c2de <LL_RCC_MSI_IsReady>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d108      	bne.n	800cf2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e051      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cf20:	f7ff f88f 	bl	800c042 <LL_RCC_HSI_IsReady>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d101      	bne.n	800cf2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e04a      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7ff fa22 	bl	800c37c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf38:	f7fd ff32 	bl	800ada0 <HAL_GetTick>
 800cf3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf3e:	e00a      	b.n	800cf56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf40:	f7fd ff2e 	bl	800ada0 <HAL_GetTick>
 800cf44:	4602      	mov	r2, r0
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d901      	bls.n	800cf56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e036      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf56:	f7ff fa25 	bl	800c3a4 <LL_RCC_GetSysClkSource>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d1ec      	bne.n	800cf40 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cf66:	4b19      	ldr	r3, [pc, #100]	; (800cfcc <HAL_RCC_ClockConfig+0x278>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0307 	and.w	r3, r3, #7
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d21b      	bcs.n	800cfac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf74:	4b15      	ldr	r3, [pc, #84]	; (800cfcc <HAL_RCC_ClockConfig+0x278>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f023 0207 	bic.w	r2, r3, #7
 800cf7c:	4913      	ldr	r1, [pc, #76]	; (800cfcc <HAL_RCC_ClockConfig+0x278>)
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf84:	f7fd ff0c 	bl	800ada0 <HAL_GetTick>
 800cf88:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf8a:	e008      	b.n	800cf9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cf8c:	f7fd ff08 	bl	800ada0 <HAL_GetTick>
 800cf90:	4602      	mov	r2, r0
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d901      	bls.n	800cf9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e012      	b.n	800cfc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	; (800cfcc <HAL_RCC_ClockConfig+0x278>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d1ef      	bne.n	800cf8c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cfac:	f000 f87e 	bl	800d0ac <HAL_RCC_GetHCLKFreq>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	4a07      	ldr	r2, [pc, #28]	; (800cfd0 <HAL_RCC_ClockConfig+0x27c>)
 800cfb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cfb6:	f7fd feff 	bl	800adb8 <HAL_GetTickPrio>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fd fea1 	bl	800ad04 <HAL_InitTick>
 800cfc2:	4603      	mov	r3, r0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	58004000 	.word	0x58004000
 800cfd0:	20000020 	.word	0x20000020

0800cfd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cfd4:	b590      	push	{r4, r7, lr}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cfda:	f7ff f9e3 	bl	800c3a4 <LL_RCC_GetSysClkSource>
 800cfde:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10a      	bne.n	800cffc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cfe6:	f7ff f99f 	bl	800c328 <LL_RCC_MSI_GetRange>
 800cfea:	4603      	mov	r3, r0
 800cfec:	091b      	lsrs	r3, r3, #4
 800cfee:	f003 030f 	and.w	r3, r3, #15
 800cff2:	4a2b      	ldr	r2, [pc, #172]	; (800d0a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff8:	60fb      	str	r3, [r7, #12]
 800cffa:	e04b      	b.n	800d094 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d102      	bne.n	800d008 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d002:	4b28      	ldr	r3, [pc, #160]	; (800d0a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d004:	60fb      	str	r3, [r7, #12]
 800d006:	e045      	b.n	800d094 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b08      	cmp	r3, #8
 800d00c:	d10a      	bne.n	800d024 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d00e:	f7fe ffb8 	bl	800bf82 <LL_RCC_HSE_IsEnabledDiv2>
 800d012:	4603      	mov	r3, r0
 800d014:	2b01      	cmp	r3, #1
 800d016:	d102      	bne.n	800d01e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800d018:	4b22      	ldr	r3, [pc, #136]	; (800d0a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	e03a      	b.n	800d094 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800d01e:	4b22      	ldr	r3, [pc, #136]	; (800d0a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800d020:	60fb      	str	r3, [r7, #12]
 800d022:	e037      	b.n	800d094 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800d024:	f7ff faba 	bl	800c59c <LL_RCC_PLL_GetMainSource>
 800d028:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	d003      	beq.n	800d038 <HAL_RCC_GetSysClockFreq+0x64>
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b03      	cmp	r3, #3
 800d034:	d003      	beq.n	800d03e <HAL_RCC_GetSysClockFreq+0x6a>
 800d036:	e00d      	b.n	800d054 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800d038:	4b1a      	ldr	r3, [pc, #104]	; (800d0a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d03a:	60bb      	str	r3, [r7, #8]
        break;
 800d03c:	e015      	b.n	800d06a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d03e:	f7fe ffa0 	bl	800bf82 <LL_RCC_HSE_IsEnabledDiv2>
 800d042:	4603      	mov	r3, r0
 800d044:	2b01      	cmp	r3, #1
 800d046:	d102      	bne.n	800d04e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800d048:	4b16      	ldr	r3, [pc, #88]	; (800d0a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d04a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800d04c:	e00d      	b.n	800d06a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800d04e:	4b16      	ldr	r3, [pc, #88]	; (800d0a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800d050:	60bb      	str	r3, [r7, #8]
        break;
 800d052:	e00a      	b.n	800d06a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d054:	f7ff f968 	bl	800c328 <LL_RCC_MSI_GetRange>
 800d058:	4603      	mov	r3, r0
 800d05a:	091b      	lsrs	r3, r3, #4
 800d05c:	f003 030f 	and.w	r3, r3, #15
 800d060:	4a0f      	ldr	r2, [pc, #60]	; (800d0a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d066:	60bb      	str	r3, [r7, #8]
        break;
 800d068:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800d06a:	f7ff fa72 	bl	800c552 <LL_RCC_PLL_GetN>
 800d06e:	4602      	mov	r2, r0
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	fb03 f402 	mul.w	r4, r3, r2
 800d076:	f7ff fa85 	bl	800c584 <LL_RCC_PLL_GetDivider>
 800d07a:	4603      	mov	r3, r0
 800d07c:	091b      	lsrs	r3, r3, #4
 800d07e:	3301      	adds	r3, #1
 800d080:	fbb4 f4f3 	udiv	r4, r4, r3
 800d084:	f7ff fa72 	bl	800c56c <LL_RCC_PLL_GetR>
 800d088:	4603      	mov	r3, r0
 800d08a:	0f5b      	lsrs	r3, r3, #29
 800d08c:	3301      	adds	r3, #1
 800d08e:	fbb4 f3f3 	udiv	r3, r4, r3
 800d092:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800d094:	68fb      	ldr	r3, [r7, #12]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3714      	adds	r7, #20
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd90      	pop	{r4, r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	08016e64 	.word	0x08016e64
 800d0a4:	00f42400 	.word	0x00f42400
 800d0a8:	01e84800 	.word	0x01e84800

0800d0ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d0ac:	b598      	push	{r3, r4, r7, lr}
 800d0ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800d0b0:	f7ff ff90 	bl	800cfd4 <HAL_RCC_GetSysClockFreq>
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	f7ff f9ea 	bl	800c48e <LL_RCC_GetAHBPrescaler>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	091b      	lsrs	r3, r3, #4
 800d0be:	f003 030f 	and.w	r3, r3, #15
 800d0c2:	4a03      	ldr	r2, [pc, #12]	; (800d0d0 <HAL_RCC_GetHCLKFreq+0x24>)
 800d0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	bd98      	pop	{r3, r4, r7, pc}
 800d0d0:	08016e04 	.word	0x08016e04

0800d0d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d0d4:	b598      	push	{r3, r4, r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800d0d8:	f7ff ffe8 	bl	800d0ac <HAL_RCC_GetHCLKFreq>
 800d0dc:	4604      	mov	r4, r0
 800d0de:	f7ff f9f0 	bl	800c4c2 <LL_RCC_GetAPB1Prescaler>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	0a1b      	lsrs	r3, r3, #8
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	4a04      	ldr	r2, [pc, #16]	; (800d0fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800d0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0f0:	f003 031f 	and.w	r3, r3, #31
 800d0f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	bd98      	pop	{r3, r4, r7, pc}
 800d0fc:	08016e44 	.word	0x08016e44

0800d100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d100:	b598      	push	{r3, r4, r7, lr}
 800d102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800d104:	f7ff ffd2 	bl	800d0ac <HAL_RCC_GetHCLKFreq>
 800d108:	4604      	mov	r4, r0
 800d10a:	f7ff f9e6 	bl	800c4da <LL_RCC_GetAPB2Prescaler>
 800d10e:	4603      	mov	r3, r0
 800d110:	0adb      	lsrs	r3, r3, #11
 800d112:	f003 0307 	and.w	r3, r3, #7
 800d116:	4a04      	ldr	r2, [pc, #16]	; (800d128 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11c:	f003 031f 	and.w	r3, r3, #31
 800d120:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d124:	4618      	mov	r0, r3
 800d126:	bd98      	pop	{r3, r4, r7, pc}
 800d128:	08016e44 	.word	0x08016e44

0800d12c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800d12c:	b590      	push	{r4, r7, lr}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2bb0      	cmp	r3, #176	; 0xb0
 800d138:	d903      	bls.n	800d142 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800d13a:	4b15      	ldr	r3, [pc, #84]	; (800d190 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d13e:	60fb      	str	r3, [r7, #12]
 800d140:	e007      	b.n	800d152 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	091b      	lsrs	r3, r3, #4
 800d146:	f003 030f 	and.w	r3, r3, #15
 800d14a:	4a11      	ldr	r2, [pc, #68]	; (800d190 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d150:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800d152:	f7ff f9a8 	bl	800c4a6 <LL_RCC_GetAHB4Prescaler>
 800d156:	4603      	mov	r3, r0
 800d158:	091b      	lsrs	r3, r3, #4
 800d15a:	f003 030f 	and.w	r3, r3, #15
 800d15e:	4a0d      	ldr	r2, [pc, #52]	; (800d194 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800d160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	fbb2 f3f3 	udiv	r3, r2, r3
 800d16a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	4a0a      	ldr	r2, [pc, #40]	; (800d198 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800d170:	fba2 2303 	umull	r2, r3, r2, r3
 800d174:	0c9c      	lsrs	r4, r3, #18
 800d176:	f7fe febf 	bl	800bef8 <HAL_PWREx_GetVoltageRange>
 800d17a:	4603      	mov	r3, r0
 800d17c:	4619      	mov	r1, r3
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 f80c 	bl	800d19c <RCC_SetFlashLatency>
 800d184:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800d186:	4618      	mov	r0, r3
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd90      	pop	{r4, r7, pc}
 800d18e:	bf00      	nop
 800d190:	08016e64 	.word	0x08016e64
 800d194:	08016e04 	.word	0x08016e04
 800d198:	431bde83 	.word	0x431bde83

0800d19c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800d19c:	b590      	push	{r4, r7, lr}
 800d19e:	b093      	sub	sp, #76	; 0x4c
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800d1a6:	4b37      	ldr	r3, [pc, #220]	; (800d284 <RCC_SetFlashLatency+0xe8>)
 800d1a8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d1ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800d1b2:	4a35      	ldr	r2, [pc, #212]	; (800d288 <RCC_SetFlashLatency+0xec>)
 800d1b4:	f107 031c 	add.w	r3, r7, #28
 800d1b8:	ca07      	ldmia	r2, {r0, r1, r2}
 800d1ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800d1be:	4b33      	ldr	r3, [pc, #204]	; (800d28c <RCC_SetFlashLatency+0xf0>)
 800d1c0:	f107 040c 	add.w	r4, r7, #12
 800d1c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1d4:	d11a      	bne.n	800d20c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	643b      	str	r3, [r7, #64]	; 0x40
 800d1da:	e013      	b.n	800d204 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800d1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	3348      	adds	r3, #72	; 0x48
 800d1e2:	443b      	add	r3, r7
 800d1e4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d807      	bhi.n	800d1fe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	3348      	adds	r3, #72	; 0x48
 800d1f4:	443b      	add	r3, r7
 800d1f6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d1fa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800d1fc:	e020      	b.n	800d240 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d200:	3301      	adds	r3, #1
 800d202:	643b      	str	r3, [r7, #64]	; 0x40
 800d204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d206:	2b03      	cmp	r3, #3
 800d208:	d9e8      	bls.n	800d1dc <RCC_SetFlashLatency+0x40>
 800d20a:	e019      	b.n	800d240 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d20c:	2300      	movs	r3, #0
 800d20e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d210:	e013      	b.n	800d23a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800d212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	3348      	adds	r3, #72	; 0x48
 800d218:	443b      	add	r3, r7
 800d21a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	429a      	cmp	r2, r3
 800d222:	d807      	bhi.n	800d234 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	3348      	adds	r3, #72	; 0x48
 800d22a:	443b      	add	r3, r7
 800d22c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d230:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800d232:	e005      	b.n	800d240 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d236:	3301      	adds	r3, #1
 800d238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d9e8      	bls.n	800d212 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800d240:	4b13      	ldr	r3, [pc, #76]	; (800d290 <RCC_SetFlashLatency+0xf4>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f023 0207 	bic.w	r2, r3, #7
 800d248:	4911      	ldr	r1, [pc, #68]	; (800d290 <RCC_SetFlashLatency+0xf4>)
 800d24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d24c:	4313      	orrs	r3, r2
 800d24e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d250:	f7fd fda6 	bl	800ada0 <HAL_GetTick>
 800d254:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d256:	e008      	b.n	800d26a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d258:	f7fd fda2 	bl	800ada0 <HAL_GetTick>
 800d25c:	4602      	mov	r2, r0
 800d25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	2b02      	cmp	r3, #2
 800d264:	d901      	bls.n	800d26a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800d266:	2303      	movs	r3, #3
 800d268:	e007      	b.n	800d27a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d26a:	4b09      	ldr	r3, [pc, #36]	; (800d290 <RCC_SetFlashLatency+0xf4>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f003 0307 	and.w	r3, r3, #7
 800d272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d274:	429a      	cmp	r2, r3
 800d276:	d1ef      	bne.n	800d258 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	374c      	adds	r7, #76	; 0x4c
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd90      	pop	{r4, r7, pc}
 800d282:	bf00      	nop
 800d284:	08016b78 	.word	0x08016b78
 800d288:	08016b88 	.word	0x08016b88
 800d28c:	08016b94 	.word	0x08016b94
 800d290:	58004000 	.word	0x58004000

0800d294 <LL_RCC_LSE_IsEnabled>:
{
 800d294:	b480      	push	{r7}
 800d296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800d298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d101      	bne.n	800d2ac <LL_RCC_LSE_IsEnabled+0x18>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e000      	b.n	800d2ae <LL_RCC_LSE_IsEnabled+0x1a>
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <LL_RCC_LSE_IsReady>:
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d2bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c4:	f003 0302 	and.w	r3, r3, #2
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d101      	bne.n	800d2d0 <LL_RCC_LSE_IsReady+0x18>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e000      	b.n	800d2d2 <LL_RCC_LSE_IsReady+0x1a>
 800d2d0:	2300      	movs	r3, #0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <LL_RCC_SetRFWKPClockSource>:
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d2e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d2ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d2f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800d2fc:	bf00      	nop
 800d2fe:	370c      	adds	r7, #12
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <LL_RCC_SetSMPSClockSource>:
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d316:	f023 0203 	bic.w	r2, r3, #3
 800d31a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4313      	orrs	r3, r2
 800d322:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <LL_RCC_SetSMPSPrescaler>:
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4313      	orrs	r3, r2
 800d34a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <LL_RCC_SetUSARTClockSource>:
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d368:	f023 0203 	bic.w	r2, r3, #3
 800d36c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4313      	orrs	r3, r2
 800d374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <LL_RCC_SetLPUARTClockSource>:
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d38c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d394:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <LL_RCC_SetI2CClockSource>:
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d3b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	091b      	lsrs	r3, r3, #4
 800d3c4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d3c8:	43db      	mvns	r3, r3
 800d3ca:	401a      	ands	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	011b      	lsls	r3, r3, #4
 800d3d0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d3d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d3de:	bf00      	nop
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <LL_RCC_SetLPTIMClockSource>:
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b083      	sub	sp, #12
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d3f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	0c1b      	lsrs	r3, r3, #16
 800d3fe:	041b      	lsls	r3, r3, #16
 800d400:	43db      	mvns	r3, r3
 800d402:	401a      	ands	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	041b      	lsls	r3, r3, #16
 800d408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d40c:	4313      	orrs	r3, r2
 800d40e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d412:	bf00      	nop
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <LL_RCC_SetSAIClockSource>:
{
 800d41e:	b480      	push	{r7}
 800d420:	b083      	sub	sp, #12
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d42e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4313      	orrs	r3, r2
 800d43a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d43e:	bf00      	nop
 800d440:	370c      	adds	r7, #12
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr

0800d44a <LL_RCC_SetRNGClockSource>:
{
 800d44a:	b480      	push	{r7}
 800d44c:	b083      	sub	sp, #12
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d45a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d45e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4313      	orrs	r3, r2
 800d466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d46a:	bf00      	nop
 800d46c:	370c      	adds	r7, #12
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr

0800d476 <LL_RCC_SetCLK48ClockSource>:
{
 800d476:	b480      	push	{r7}
 800d478:	b083      	sub	sp, #12
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d47e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d486:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d48a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4313      	orrs	r3, r2
 800d492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d496:	bf00      	nop
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <LL_RCC_SetUSBClockSource>:
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b082      	sub	sp, #8
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff ffe3 	bl	800d476 <LL_RCC_SetCLK48ClockSource>
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <LL_RCC_SetADCClockSource>:
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d4c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d4cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <LL_RCC_SetRTCClockSource>:
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d4ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d4f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4313      	orrs	r3, r2
 800d500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800d504:	bf00      	nop
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <LL_RCC_GetRTCClockSource>:
{
 800d510:	b480      	push	{r7}
 800d512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d51c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800d520:	4618      	mov	r0, r3
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <LL_RCC_ForceBackupDomainReset>:
{
 800d52a:	b480      	push	{r7}
 800d52c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d52e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d53a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d53e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d542:	bf00      	nop
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <LL_RCC_ReleaseBackupDomainReset>:
{
 800d54c:	b480      	push	{r7}
 800d54e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d55c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d564:	bf00      	nop
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <LL_RCC_PLLSAI1_Enable>:
{
 800d56e:	b480      	push	{r7}
 800d570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d57c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d580:	6013      	str	r3, [r2, #0]
}
 800d582:	bf00      	nop
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <LL_RCC_PLLSAI1_Disable>:
{
 800d58c:	b480      	push	{r7}
 800d58e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d59a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d59e:	6013      	str	r3, [r2, #0]
}
 800d5a0:	bf00      	nop
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <LL_RCC_PLLSAI1_IsReady>:
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d5ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d5bc:	d101      	bne.n	800d5c2 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e000      	b.n	800d5c4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b088      	sub	sp, #32
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d5da:	2300      	movs	r3, #0
 800d5dc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d034      	beq.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d5f2:	d021      	beq.n	800d638 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d5f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d5f8:	d81b      	bhi.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d5fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5fe:	d01d      	beq.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d604:	d815      	bhi.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00b      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d60a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d60e:	d110      	bne.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d61a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d61e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d620:	e00d      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	3304      	adds	r3, #4
 800d626:	4618      	mov	r0, r3
 800d628:	f000 f947 	bl	800d8ba <RCCEx_PLLSAI1_ConfigNP>
 800d62c:	4603      	mov	r3, r0
 800d62e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d630:	e005      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d632:	2301      	movs	r3, #1
 800d634:	77fb      	strb	r3, [r7, #31]
        break;
 800d636:	e002      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d638:	bf00      	nop
 800d63a:	e000      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d63c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d63e:	7ffb      	ldrb	r3, [r7, #31]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d105      	bne.n	800d650 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff fee8 	bl	800d41e <LL_RCC_SetSAIClockSource>
 800d64e:	e001      	b.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d650:	7ffb      	ldrb	r3, [r7, #31]
 800d652:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d046      	beq.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d660:	f7ff ff56 	bl	800d510 <LL_RCC_GetRTCClockSource>
 800d664:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	69ba      	ldr	r2, [r7, #24]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d03c      	beq.n	800d6ea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d670:	f7fe fbea 	bl	800be48 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d105      	bne.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff ff30 	bl	800d4e4 <LL_RCC_SetRTCClockSource>
 800d684:	e02e      	b.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d68e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d690:	f7ff ff4b 	bl	800d52a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d694:	f7ff ff5a 	bl	800d54c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d6a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d6b0:	f7ff fdf0 	bl	800d294 <LL_RCC_LSE_IsEnabled>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d114      	bne.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d6ba:	f7fd fb71 	bl	800ada0 <HAL_GetTick>
 800d6be:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d6c0:	e00b      	b.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6c2:	f7fd fb6d 	bl	800ada0 <HAL_GetTick>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d902      	bls.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	77fb      	strb	r3, [r7, #31]
              break;
 800d6d8:	e004      	b.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d6da:	f7ff fded 	bl	800d2b8 <LL_RCC_LSE_IsReady>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d1ee      	bne.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d6e4:	7ffb      	ldrb	r3, [r7, #31]
 800d6e6:	77bb      	strb	r3, [r7, #30]
 800d6e8:	e001      	b.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6ea:	7ffb      	ldrb	r3, [r7, #31]
 800d6ec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f003 0301 	and.w	r3, r3, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d004      	beq.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	699b      	ldr	r3, [r3, #24]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff fe2a 	bl	800d358 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f003 0302 	and.w	r3, r3, #2
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	69db      	ldr	r3, [r3, #28]
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff fe35 	bl	800d384 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 0310 	and.w	r3, r3, #16
 800d722:	2b00      	cmp	r3, #0
 800d724:	d004      	beq.n	800d730 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff fe5d 	bl	800d3ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f003 0320 	and.w	r3, r3, #32
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff fe52 	bl	800d3ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 0304 	and.w	r3, r3, #4
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d004      	beq.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fe2a 	bl	800d3b0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 0308 	and.w	r3, r3, #8
 800d764:	2b00      	cmp	r3, #0
 800d766:	d004      	beq.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff fe1f 	bl	800d3b0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d022      	beq.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d782:	4618      	mov	r0, r3
 800d784:	f7ff fe8d 	bl	800d4a2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d790:	d107      	bne.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d79c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d7aa:	d10b      	bne.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	3304      	adds	r3, #4
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 f8dd 	bl	800d970 <RCCEx_PLLSAI1_ConfigNQ>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d7ba:	7ffb      	ldrb	r3, [r7, #31]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d001      	beq.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d7c0:	7ffb      	ldrb	r3, [r7, #31]
 800d7c2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d02b      	beq.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7d8:	d008      	beq.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7e2:	d003      	beq.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d105      	bne.n	800d7f8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7ff fe2a 	bl	800d44a <LL_RCC_SetRNGClockSource>
 800d7f6:	e00a      	b.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	2000      	movs	r0, #0
 800d804:	f7ff fe21 	bl	800d44a <LL_RCC_SetRNGClockSource>
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f7ff fe34 	bl	800d476 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d812:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800d816:	d107      	bne.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d81c:	68db      	ldr	r3, [r3, #12]
 800d81e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d826:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d830:	2b00      	cmp	r3, #0
 800d832:	d022      	beq.n	800d87a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d838:	4618      	mov	r0, r3
 800d83a:	f7ff fe3d 	bl	800d4b8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d846:	d107      	bne.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d856:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d860:	d10b      	bne.n	800d87a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	3304      	adds	r3, #4
 800d866:	4618      	mov	r0, r3
 800d868:	f000 f8dd 	bl	800da26 <RCCEx_PLLSAI1_ConfigNR>
 800d86c:	4603      	mov	r3, r0
 800d86e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d870:	7ffb      	ldrb	r3, [r7, #31]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d876:	7ffb      	ldrb	r3, [r7, #31]
 800d878:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d882:	2b00      	cmp	r3, #0
 800d884:	d004      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fd26 	bl	800d2dc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d009      	beq.n	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7ff fd45 	bl	800d330 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7ff fd2c 	bl	800d308 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d8b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3720      	adds	r7, #32
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d8c6:	f7ff fe61 	bl	800d58c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d8ca:	f7fd fa69 	bl	800ada0 <HAL_GetTick>
 800d8ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d8d0:	e009      	b.n	800d8e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d8d2:	f7fd fa65 	bl	800ada0 <HAL_GetTick>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	2b02      	cmp	r3, #2
 800d8de:	d902      	bls.n	800d8e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d8e0:	2303      	movs	r3, #3
 800d8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d8e4:	e004      	b.n	800d8f0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d8e6:	f7ff fe60 	bl	800d5aa <LL_RCC_PLLSAI1_IsReady>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1f0      	bne.n	800d8d2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d8f0:	7bfb      	ldrb	r3, [r7, #15]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d137      	bne.n	800d966 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d8f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d8fa:	691b      	ldr	r3, [r3, #16]
 800d8fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	021b      	lsls	r3, r3, #8
 800d906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d90a:	4313      	orrs	r3, r2
 800d90c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d90e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d920:	4313      	orrs	r3, r2
 800d922:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d924:	f7ff fe23 	bl	800d56e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d928:	f7fd fa3a 	bl	800ada0 <HAL_GetTick>
 800d92c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d92e:	e009      	b.n	800d944 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d930:	f7fd fa36 	bl	800ada0 <HAL_GetTick>
 800d934:	4602      	mov	r2, r0
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d902      	bls.n	800d944 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d93e:	2303      	movs	r3, #3
 800d940:	73fb      	strb	r3, [r7, #15]
        break;
 800d942:	e004      	b.n	800d94e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d944:	f7ff fe31 	bl	800d5aa <LL_RCC_PLLSAI1_IsReady>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d1f0      	bne.n	800d930 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d108      	bne.n	800d966 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d958:	691a      	ldr	r2, [r3, #16]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	691b      	ldr	r3, [r3, #16]
 800d95e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d962:	4313      	orrs	r3, r2
 800d964:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d966:	7bfb      	ldrb	r3, [r7, #15]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3710      	adds	r7, #16
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d97c:	f7ff fe06 	bl	800d58c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d980:	f7fd fa0e 	bl	800ada0 <HAL_GetTick>
 800d984:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d986:	e009      	b.n	800d99c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d988:	f7fd fa0a 	bl	800ada0 <HAL_GetTick>
 800d98c:	4602      	mov	r2, r0
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	2b02      	cmp	r3, #2
 800d994:	d902      	bls.n	800d99c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d996:	2303      	movs	r3, #3
 800d998:	73fb      	strb	r3, [r7, #15]
      break;
 800d99a:	e004      	b.n	800d9a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d99c:	f7ff fe05 	bl	800d5aa <LL_RCC_PLLSAI1_IsReady>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1f0      	bne.n	800d988 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d9a6:	7bfb      	ldrb	r3, [r7, #15]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d137      	bne.n	800da1c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d9ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	021b      	lsls	r3, r3, #8
 800d9bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d9c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d9da:	f7ff fdc8 	bl	800d56e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9de:	f7fd f9df 	bl	800ada0 <HAL_GetTick>
 800d9e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d9e4:	e009      	b.n	800d9fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d9e6:	f7fd f9db 	bl	800ada0 <HAL_GetTick>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d902      	bls.n	800d9fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	73fb      	strb	r3, [r7, #15]
        break;
 800d9f8:	e004      	b.n	800da04 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d9fa:	f7ff fdd6 	bl	800d5aa <LL_RCC_PLLSAI1_IsReady>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b01      	cmp	r3, #1
 800da02:	d1f0      	bne.n	800d9e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800da04:	7bfb      	ldrb	r3, [r7, #15]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d108      	bne.n	800da1c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800da0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da0e:	691a      	ldr	r2, [r3, #16]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da18:	4313      	orrs	r3, r2
 800da1a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b084      	sub	sp, #16
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da2e:	2300      	movs	r3, #0
 800da30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800da32:	f7ff fdab 	bl	800d58c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800da36:	f7fd f9b3 	bl	800ada0 <HAL_GetTick>
 800da3a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800da3c:	e009      	b.n	800da52 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800da3e:	f7fd f9af 	bl	800ada0 <HAL_GetTick>
 800da42:	4602      	mov	r2, r0
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	1ad3      	subs	r3, r2, r3
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d902      	bls.n	800da52 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800da4c:	2303      	movs	r3, #3
 800da4e:	73fb      	strb	r3, [r7, #15]
      break;
 800da50:	e004      	b.n	800da5c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800da52:	f7ff fdaa 	bl	800d5aa <LL_RCC_PLLSAI1_IsReady>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1f0      	bne.n	800da3e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d137      	bne.n	800dad2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800da62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	021b      	lsls	r3, r3, #8
 800da72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da76:	4313      	orrs	r3, r2
 800da78:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800da7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da7e:	691b      	ldr	r3, [r3, #16]
 800da80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da8c:	4313      	orrs	r3, r2
 800da8e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800da90:	f7ff fd6d 	bl	800d56e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da94:	f7fd f984 	bl	800ada0 <HAL_GetTick>
 800da98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800da9a:	e009      	b.n	800dab0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800da9c:	f7fd f980 	bl	800ada0 <HAL_GetTick>
 800daa0:	4602      	mov	r2, r0
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d902      	bls.n	800dab0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800daaa:	2303      	movs	r3, #3
 800daac:	73fb      	strb	r3, [r7, #15]
        break;
 800daae:	e004      	b.n	800daba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dab0:	f7ff fd7b 	bl	800d5aa <LL_RCC_PLLSAI1_IsReady>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d1f0      	bne.n	800da9c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d108      	bne.n	800dad2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800dac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dac4:	691a      	ldr	r2, [r3, #16]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dace:	4313      	orrs	r3, r2
 800dad0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e09f      	b.n	800dc2e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d106      	bne.n	800db08 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7fa ff08 	bl	8008918 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2202      	movs	r2, #2
 800db0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800db10:	4b49      	ldr	r3, [pc, #292]	; (800dc38 <HAL_RTC_Init+0x15c>)
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	f003 0310 	and.w	r3, r3, #16
 800db18:	2b10      	cmp	r3, #16
 800db1a:	d07e      	beq.n	800dc1a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	22ca      	movs	r2, #202	; 0xca
 800db22:	625a      	str	r2, [r3, #36]	; 0x24
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2253      	movs	r2, #83	; 0x53
 800db2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 f8ab 	bl	800dc88 <RTC_EnterInitMode>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00a      	beq.n	800db4e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	22ff      	movs	r2, #255	; 0xff
 800db3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2204      	movs	r2, #4
 800db44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	73fb      	strb	r3, [r7, #15]
 800db4c:	e067      	b.n	800dc1e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	6812      	ldr	r2, [r2, #0]
 800db58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db60:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6899      	ldr	r1, [r3, #8]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	431a      	orrs	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	431a      	orrs	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	430a      	orrs	r2, r1
 800db7e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	68d2      	ldr	r2, [r2, #12]
 800db88:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6919      	ldr	r1, [r3, #16]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	041a      	lsls	r2, r3, #16
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	430a      	orrs	r2, r1
 800db9c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68da      	ldr	r2, [r3, #12]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbac:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f022 0203 	bic.w	r2, r2, #3
 800dbbc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	69da      	ldr	r2, [r3, #28]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	695b      	ldr	r3, [r3, #20]
 800dbcc:	431a      	orrs	r2, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	f003 0320 	and.w	r3, r3, #32
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d113      	bne.n	800dc0c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 f829 	bl	800dc3c <HAL_RTC_WaitForSynchro>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00d      	beq.n	800dc0c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	22ff      	movs	r2, #255	; 0xff
 800dbf6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2204      	movs	r2, #4
 800dbfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e010      	b.n	800dc2e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	22ff      	movs	r2, #255	; 0xff
 800dc12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	73fb      	strb	r3, [r7, #15]
 800dc18:	e001      	b.n	800dc1e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800dc1e:	7bfb      	ldrb	r3, [r7, #15]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d103      	bne.n	800dc2c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3710      	adds	r7, #16
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	40002800 	.word	0x40002800

0800dc3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68da      	ldr	r2, [r3, #12]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800dc52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dc54:	f7fd f8a4 	bl	800ada0 <HAL_GetTick>
 800dc58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dc5a:	e009      	b.n	800dc70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dc5c:	f7fd f8a0 	bl	800ada0 <HAL_GetTick>
 800dc60:	4602      	mov	r2, r0
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc6a:	d901      	bls.n	800dc70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800dc6c:	2303      	movs	r3, #3
 800dc6e:	e007      	b.n	800dc80 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	f003 0320 	and.w	r3, r3, #32
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d0ee      	beq.n	800dc5c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d119      	bne.n	800dcd2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f04f 32ff 	mov.w	r2, #4294967295
 800dca6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dca8:	f7fd f87a 	bl	800ada0 <HAL_GetTick>
 800dcac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dcae:	e009      	b.n	800dcc4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dcb0:	f7fd f876 	bl	800ada0 <HAL_GetTick>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcbe:	d901      	bls.n	800dcc4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800dcc0:	2303      	movs	r3, #3
 800dcc2:	e007      	b.n	800dcd4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0ee      	beq.n	800dcb0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d101      	bne.n	800dcf6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800dcf2:	2302      	movs	r3, #2
 800dcf4:	e0a8      	b.n	800de48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2202      	movs	r2, #2
 800dd02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	22ca      	movs	r2, #202	; 0xca
 800dd0c:	625a      	str	r2, [r3, #36]	; 0x24
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2253      	movs	r2, #83	; 0x53
 800dd14:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d020      	beq.n	800dd66 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800dd24:	f7fd f83c 	bl	800ada0 <HAL_GetTick>
 800dd28:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dd2a:	e015      	b.n	800dd58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd2c:	f7fd f838 	bl	800ada0 <HAL_GetTick>
 800dd30:	4602      	mov	r2, r0
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd3a:	d90d      	bls.n	800dd58 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	22ff      	movs	r2, #255	; 0xff
 800dd42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2203      	movs	r2, #3
 800dd48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800dd54:	2303      	movs	r3, #3
 800dd56:	e077      	b.n	800de48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	f003 0304 	and.w	r3, r3, #4
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d1e2      	bne.n	800dd2c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	689a      	ldr	r2, [r3, #8]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd74:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800dd86:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dd88:	f7fd f80a 	bl	800ada0 <HAL_GetTick>
 800dd8c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dd8e:	e015      	b.n	800ddbc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dd90:	f7fd f806 	bl	800ada0 <HAL_GetTick>
 800dd94:	4602      	mov	r2, r0
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd9e:	d90d      	bls.n	800ddbc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	22ff      	movs	r2, #255	; 0xff
 800dda6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2203      	movs	r2, #3
 800ddac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800ddb8:	2303      	movs	r3, #3
 800ddba:	e045      	b.n	800de48 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	f003 0304 	and.w	r3, r3, #4
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d0e2      	beq.n	800dd90 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68ba      	ldr	r2, [r7, #8]
 800ddd0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	689a      	ldr	r2, [r3, #8]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f022 0207 	bic.w	r2, r2, #7
 800dde0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6899      	ldr	r1, [r3, #8]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ddf2:	4b17      	ldr	r3, [pc, #92]	; (800de50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ddf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddf8:	4a15      	ldr	r2, [pc, #84]	; (800de50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ddfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddfe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800de02:	4b13      	ldr	r3, [pc, #76]	; (800de50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a12      	ldr	r2, [pc, #72]	; (800de50 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800de08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de0c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	689a      	ldr	r2, [r3, #8]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de1c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	689a      	ldr	r2, [r3, #8]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de2c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	22ff      	movs	r2, #255	; 0xff
 800de34:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2201      	movs	r2, #1
 800de3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3718      	adds	r7, #24
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	58000800 	.word	0x58000800

0800de54 <LL_RCC_GetUSARTClockSource>:
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800de5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	4013      	ands	r3, r2
}
 800de68:	4618      	mov	r0, r3
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <LL_RCC_GetLPUARTClockSource>:
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800de7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4013      	ands	r3, r2
}
 800de88:	4618      	mov	r0, r3
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	e042      	b.n	800df2c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800deac:	2b00      	cmp	r3, #0
 800deae:	d106      	bne.n	800debe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7fa fc3b 	bl	8008734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2224      	movs	r2, #36	; 0x24
 800dec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f022 0201 	bic.w	r2, r2, #1
 800ded4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fe60 	bl	800eba4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fc35 	bl	800e754 <UART_SetConfig>
 800deea:	4603      	mov	r3, r0
 800deec:	2b01      	cmp	r3, #1
 800deee:	d101      	bne.n	800def4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800def0:	2301      	movs	r3, #1
 800def2:	e01b      	b.n	800df2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	685a      	ldr	r2, [r3, #4]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	689a      	ldr	r2, [r3, #8]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f042 0201 	orr.w	r2, r2, #1
 800df22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fedf 	bl	800ece8 <UART_CheckIdleState>
 800df2a:	4603      	mov	r3, r0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b08a      	sub	sp, #40	; 0x28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	4613      	mov	r3, r2
 800df40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df48:	2b20      	cmp	r3, #32
 800df4a:	d137      	bne.n	800dfbc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <HAL_UART_Receive_IT+0x24>
 800df52:	88fb      	ldrh	r3, [r7, #6]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d101      	bne.n	800df5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800df58:	2301      	movs	r3, #1
 800df5a:	e030      	b.n	800dfbe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2200      	movs	r2, #0
 800df60:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a18      	ldr	r2, [pc, #96]	; (800dfc8 <HAL_UART_Receive_IT+0x94>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d01f      	beq.n	800dfac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df76:	2b00      	cmp	r3, #0
 800df78:	d018      	beq.n	800dfac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	e853 3f00 	ldrex	r3, [r3]
 800df86:	613b      	str	r3, [r7, #16]
   return(result);
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df8e:	627b      	str	r3, [r7, #36]	; 0x24
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	461a      	mov	r2, r3
 800df96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df98:	623b      	str	r3, [r7, #32]
 800df9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df9c:	69f9      	ldr	r1, [r7, #28]
 800df9e:	6a3a      	ldr	r2, [r7, #32]
 800dfa0:	e841 2300 	strex	r3, r2, [r1]
 800dfa4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1e6      	bne.n	800df7a <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dfac:	88fb      	ldrh	r3, [r7, #6]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	68b9      	ldr	r1, [r7, #8]
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f000 ffaa 	bl	800ef0c <UART_Start_Receive_IT>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	e000      	b.n	800dfbe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dfbc:	2302      	movs	r3, #2
  }
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3728      	adds	r7, #40	; 0x28
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	40008000 	.word	0x40008000

0800dfcc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08a      	sub	sp, #40	; 0x28
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfe0:	2b20      	cmp	r3, #32
 800dfe2:	d167      	bne.n	800e0b4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d002      	beq.n	800dff0 <HAL_UART_Transmit_DMA+0x24>
 800dfea:	88fb      	ldrh	r3, [r7, #6]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d101      	bne.n	800dff4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	e060      	b.n	800e0b6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	88fa      	ldrh	r2, [r7, #6]
 800dffe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	88fa      	ldrh	r2, [r7, #6]
 800e006:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2221      	movs	r2, #33	; 0x21
 800e016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d028      	beq.n	800e074 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e026:	4a26      	ldr	r2, [pc, #152]	; (800e0c0 <HAL_UART_Transmit_DMA+0xf4>)
 800e028:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e02e:	4a25      	ldr	r2, [pc, #148]	; (800e0c4 <HAL_UART_Transmit_DMA+0xf8>)
 800e030:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e036:	4a24      	ldr	r2, [pc, #144]	; (800e0c8 <HAL_UART_Transmit_DMA+0xfc>)
 800e038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e03e:	2200      	movs	r2, #0
 800e040:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e04a:	4619      	mov	r1, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3328      	adds	r3, #40	; 0x28
 800e052:	461a      	mov	r2, r3
 800e054:	88fb      	ldrh	r3, [r7, #6]
 800e056:	f7fd f929 	bl	800b2ac <HAL_DMA_Start_IT>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d009      	beq.n	800e074 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2210      	movs	r2, #16
 800e064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2220      	movs	r2, #32
 800e06c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800e070:	2301      	movs	r3, #1
 800e072:	e020      	b.n	800e0b6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2240      	movs	r2, #64	; 0x40
 800e07a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	3308      	adds	r3, #8
 800e082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	e853 3f00 	ldrex	r3, [r3]
 800e08a:	613b      	str	r3, [r7, #16]
   return(result);
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e092:	627b      	str	r3, [r7, #36]	; 0x24
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3308      	adds	r3, #8
 800e09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e09c:	623a      	str	r2, [r7, #32]
 800e09e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a0:	69f9      	ldr	r1, [r7, #28]
 800e0a2:	6a3a      	ldr	r2, [r7, #32]
 800e0a4:	e841 2300 	strex	r3, r2, [r1]
 800e0a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e5      	bne.n	800e07c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	e000      	b.n	800e0b6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800e0b4:	2302      	movs	r3, #2
  }
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3728      	adds	r7, #40	; 0x28
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	0800f29f 	.word	0x0800f29f
 800e0c4:	0800f339 	.word	0x0800f339
 800e0c8:	0800f355 	.word	0x0800f355

0800e0cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b0ba      	sub	sp, #232	; 0xe8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	69db      	ldr	r3, [r3, #28]
 800e0da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e0f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e0f6:	f640 030f 	movw	r3, #2063	; 0x80f
 800e0fa:	4013      	ands	r3, r2
 800e0fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e104:	2b00      	cmp	r3, #0
 800e106:	d11b      	bne.n	800e140 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e10c:	f003 0320 	and.w	r3, r3, #32
 800e110:	2b00      	cmp	r3, #0
 800e112:	d015      	beq.n	800e140 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e118:	f003 0320 	and.w	r3, r3, #32
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d105      	bne.n	800e12c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d009      	beq.n	800e140 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 82e3 	beq.w	800e6fc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	4798      	blx	r3
      }
      return;
 800e13e:	e2dd      	b.n	800e6fc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 8123 	beq.w	800e390 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e14a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e14e:	4b8d      	ldr	r3, [pc, #564]	; (800e384 <HAL_UART_IRQHandler+0x2b8>)
 800e150:	4013      	ands	r3, r2
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e156:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e15a:	4b8b      	ldr	r3, [pc, #556]	; (800e388 <HAL_UART_IRQHandler+0x2bc>)
 800e15c:	4013      	ands	r3, r2
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 8116 	beq.w	800e390 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e168:	f003 0301 	and.w	r3, r3, #1
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d011      	beq.n	800e194 <HAL_UART_IRQHandler+0xc8>
 800e170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d00b      	beq.n	800e194 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2201      	movs	r2, #1
 800e182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e18a:	f043 0201 	orr.w	r2, r3, #1
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e198:	f003 0302 	and.w	r3, r3, #2
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d011      	beq.n	800e1c4 <HAL_UART_IRQHandler+0xf8>
 800e1a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00b      	beq.n	800e1c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1ba:	f043 0204 	orr.w	r2, r3, #4
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1c8:	f003 0304 	and.w	r3, r3, #4
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d011      	beq.n	800e1f4 <HAL_UART_IRQHandler+0x128>
 800e1d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00b      	beq.n	800e1f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2204      	movs	r2, #4
 800e1e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1ea:	f043 0202 	orr.w	r2, r3, #2
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1f8:	f003 0308 	and.w	r3, r3, #8
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d017      	beq.n	800e230 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e204:	f003 0320 	and.w	r3, r3, #32
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d105      	bne.n	800e218 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e20c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e210:	4b5c      	ldr	r3, [pc, #368]	; (800e384 <HAL_UART_IRQHandler+0x2b8>)
 800e212:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00b      	beq.n	800e230 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2208      	movs	r2, #8
 800e21e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e226:	f043 0208 	orr.w	r2, r3, #8
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d012      	beq.n	800e262 <HAL_UART_IRQHandler+0x196>
 800e23c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00c      	beq.n	800e262 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e258:	f043 0220 	orr.w	r2, r3, #32
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 8249 	beq.w	800e700 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e272:	f003 0320 	and.w	r3, r3, #32
 800e276:	2b00      	cmp	r3, #0
 800e278:	d013      	beq.n	800e2a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e27a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e27e:	f003 0320 	and.w	r3, r3, #32
 800e282:	2b00      	cmp	r3, #0
 800e284:	d105      	bne.n	800e292 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e28a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d007      	beq.n	800e2a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e296:	2b00      	cmp	r3, #0
 800e298:	d003      	beq.n	800e2a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b6:	2b40      	cmp	r3, #64	; 0x40
 800e2b8:	d005      	beq.n	800e2c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e2ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d054      	beq.n	800e370 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 ff83 	bl	800f1d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d6:	2b40      	cmp	r3, #64	; 0x40
 800e2d8:	d146      	bne.n	800e368 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	3308      	adds	r3, #8
 800e2e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2e8:	e853 3f00 	ldrex	r3, [r3]
 800e2ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e2f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e2f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3308      	adds	r3, #8
 800e302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e306:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e30a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e316:	e841 2300 	strex	r3, r2, [r1]
 800e31a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e31e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1d9      	bne.n	800e2da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d017      	beq.n	800e360 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e336:	4a15      	ldr	r2, [pc, #84]	; (800e38c <HAL_UART_IRQHandler+0x2c0>)
 800e338:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e340:	4618      	mov	r0, r3
 800e342:	f7fd f88d 	bl	800b460 <HAL_DMA_Abort_IT>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d019      	beq.n	800e380 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e35a:	4610      	mov	r0, r2
 800e35c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e35e:	e00f      	b.n	800e380 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f9e1 	bl	800e728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e366:	e00b      	b.n	800e380 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 f9dd 	bl	800e728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e36e:	e007      	b.n	800e380 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f9d9 	bl	800e728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e37e:	e1bf      	b.n	800e700 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e380:	bf00      	nop
    return;
 800e382:	e1bd      	b.n	800e700 <HAL_UART_IRQHandler+0x634>
 800e384:	10000001 	.word	0x10000001
 800e388:	04000120 	.word	0x04000120
 800e38c:	0800f3d5 	.word	0x0800f3d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e394:	2b01      	cmp	r3, #1
 800e396:	f040 8153 	bne.w	800e640 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e39e:	f003 0310 	and.w	r3, r3, #16
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 814c 	beq.w	800e640 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3ac:	f003 0310 	and.w	r3, r3, #16
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 8145 	beq.w	800e640 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2210      	movs	r2, #16
 800e3bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c8:	2b40      	cmp	r3, #64	; 0x40
 800e3ca:	f040 80bb 	bne.w	800e544 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e3dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 818f 	beq.w	800e704 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	f080 8187 	bcs.w	800e704 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f003 0320 	and.w	r3, r3, #32
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f040 8087 	bne.w	800e522 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e420:	e853 3f00 	ldrex	r3, [r3]
 800e424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e42c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	461a      	mov	r2, r3
 800e43a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e43e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e442:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e446:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e44a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e44e:	e841 2300 	strex	r3, r2, [r1]
 800e452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1da      	bne.n	800e414 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3308      	adds	r3, #8
 800e464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e468:	e853 3f00 	ldrex	r3, [r3]
 800e46c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e46e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e470:	f023 0301 	bic.w	r3, r3, #1
 800e474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3308      	adds	r3, #8
 800e47e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e482:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e486:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e48a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e48e:	e841 2300 	strex	r3, r2, [r1]
 800e492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1e1      	bne.n	800e45e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	3308      	adds	r3, #8
 800e4a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4a4:	e853 3f00 	ldrex	r3, [r3]
 800e4a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e4aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3308      	adds	r3, #8
 800e4ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e4be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e4c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e4c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e4cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e3      	bne.n	800e49a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2220      	movs	r2, #32
 800e4d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4e8:	e853 3f00 	ldrex	r3, [r3]
 800e4ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4f0:	f023 0310 	bic.w	r3, r3, #16
 800e4f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e502:	65bb      	str	r3, [r7, #88]	; 0x58
 800e504:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e50a:	e841 2300 	strex	r3, r2, [r1]
 800e50e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1e4      	bne.n	800e4e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fc ff40 	bl	800b3a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2202      	movs	r2, #2
 800e526:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e534:	b29b      	uxth	r3, r3
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	b29b      	uxth	r3, r3
 800e53a:	4619      	mov	r1, r3
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f8fd 	bl	800e73c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e542:	e0df      	b.n	800e704 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e550:	b29b      	uxth	r3, r3
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e55e:	b29b      	uxth	r3, r3
 800e560:	2b00      	cmp	r3, #0
 800e562:	f000 80d1 	beq.w	800e708 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800e566:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f000 80cc 	beq.w	800e708 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e578:	e853 3f00 	ldrex	r3, [r3]
 800e57c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	461a      	mov	r2, r3
 800e58e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e592:	647b      	str	r3, [r7, #68]	; 0x44
 800e594:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e59a:	e841 2300 	strex	r3, r2, [r1]
 800e59e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1e4      	bne.n	800e570 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	3308      	adds	r3, #8
 800e5ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	e853 3f00 	ldrex	r3, [r3]
 800e5b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e5bc:	f023 0301 	bic.w	r3, r3, #1
 800e5c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e5ce:	633a      	str	r2, [r7, #48]	; 0x30
 800e5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d6:	e841 2300 	strex	r3, r2, [r1]
 800e5da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1e1      	bne.n	800e5a6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	e853 3f00 	ldrex	r3, [r3]
 800e602:	60fb      	str	r3, [r7, #12]
   return(result);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f023 0310 	bic.w	r3, r3, #16
 800e60a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	461a      	mov	r2, r3
 800e614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e618:	61fb      	str	r3, [r7, #28]
 800e61a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61c:	69b9      	ldr	r1, [r7, #24]
 800e61e:	69fa      	ldr	r2, [r7, #28]
 800e620:	e841 2300 	strex	r3, r2, [r1]
 800e624:	617b      	str	r3, [r7, #20]
   return(result);
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1e4      	bne.n	800e5f6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2202      	movs	r2, #2
 800e630:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e632:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e636:	4619      	mov	r1, r3
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f000 f87f 	bl	800e73c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e63e:	e063      	b.n	800e708 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00e      	beq.n	800e66a <HAL_UART_IRQHandler+0x59e>
 800e64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e654:	2b00      	cmp	r3, #0
 800e656:	d008      	beq.n	800e66a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f001 fc14 	bl	800fe90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e668:	e051      	b.n	800e70e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e672:	2b00      	cmp	r3, #0
 800e674:	d014      	beq.n	800e6a0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d105      	bne.n	800e68e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d008      	beq.n	800e6a0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e692:	2b00      	cmp	r3, #0
 800e694:	d03a      	beq.n	800e70c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	4798      	blx	r3
    }
    return;
 800e69e:	e035      	b.n	800e70c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d009      	beq.n	800e6c0 <HAL_UART_IRQHandler+0x5f4>
 800e6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d003      	beq.n	800e6c0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fea1 	bl	800f400 <UART_EndTransmit_IT>
    return;
 800e6be:	e026      	b.n	800e70e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e6c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d009      	beq.n	800e6e0 <HAL_UART_IRQHandler+0x614>
 800e6cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d003      	beq.n	800e6e0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f001 fbed 	bl	800feb8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6de:	e016      	b.n	800e70e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e6e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d010      	beq.n	800e70e <HAL_UART_IRQHandler+0x642>
 800e6ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da0c      	bge.n	800e70e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f001 fbd5 	bl	800fea4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6fa:	e008      	b.n	800e70e <HAL_UART_IRQHandler+0x642>
      return;
 800e6fc:	bf00      	nop
 800e6fe:	e006      	b.n	800e70e <HAL_UART_IRQHandler+0x642>
    return;
 800e700:	bf00      	nop
 800e702:	e004      	b.n	800e70e <HAL_UART_IRQHandler+0x642>
      return;
 800e704:	bf00      	nop
 800e706:	e002      	b.n	800e70e <HAL_UART_IRQHandler+0x642>
      return;
 800e708:	bf00      	nop
 800e70a:	e000      	b.n	800e70e <HAL_UART_IRQHandler+0x642>
    return;
 800e70c:	bf00      	nop
  }
}
 800e70e:	37e8      	adds	r7, #232	; 0xe8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e71c:	bf00      	nop
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e730:	bf00      	nop
 800e732:	370c      	adds	r7, #12
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	460b      	mov	r3, r1
 800e746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e758:	b08c      	sub	sp, #48	; 0x30
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e75e:	2300      	movs	r3, #0
 800e760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	689a      	ldr	r2, [r3, #8]
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	431a      	orrs	r2, r3
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	695b      	ldr	r3, [r3, #20]
 800e772:	431a      	orrs	r2, r3
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	69db      	ldr	r3, [r3, #28]
 800e778:	4313      	orrs	r3, r2
 800e77a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	4baf      	ldr	r3, [pc, #700]	; (800ea40 <UART_SetConfig+0x2ec>)
 800e784:	4013      	ands	r3, r2
 800e786:	697a      	ldr	r2, [r7, #20]
 800e788:	6812      	ldr	r2, [r2, #0]
 800e78a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e78c:	430b      	orrs	r3, r1
 800e78e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	68da      	ldr	r2, [r3, #12]
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	430a      	orrs	r2, r1
 800e7a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4aa4      	ldr	r2, [pc, #656]	; (800ea44 <UART_SetConfig+0x2f0>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d004      	beq.n	800e7c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e7ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e7ce:	697a      	ldr	r2, [r7, #20]
 800e7d0:	6812      	ldr	r2, [r2, #0]
 800e7d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7d4:	430b      	orrs	r3, r1
 800e7d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7de:	f023 010f 	bic.w	r1, r3, #15
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	430a      	orrs	r2, r1
 800e7ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4a95      	ldr	r2, [pc, #596]	; (800ea48 <UART_SetConfig+0x2f4>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d125      	bne.n	800e844 <UART_SetConfig+0xf0>
 800e7f8:	2003      	movs	r0, #3
 800e7fa:	f7ff fb2b 	bl	800de54 <LL_RCC_GetUSARTClockSource>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b03      	cmp	r3, #3
 800e802:	d81b      	bhi.n	800e83c <UART_SetConfig+0xe8>
 800e804:	a201      	add	r2, pc, #4	; (adr r2, 800e80c <UART_SetConfig+0xb8>)
 800e806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80a:	bf00      	nop
 800e80c:	0800e81d 	.word	0x0800e81d
 800e810:	0800e82d 	.word	0x0800e82d
 800e814:	0800e825 	.word	0x0800e825
 800e818:	0800e835 	.word	0x0800e835
 800e81c:	2301      	movs	r3, #1
 800e81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e822:	e042      	b.n	800e8aa <UART_SetConfig+0x156>
 800e824:	2302      	movs	r3, #2
 800e826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e82a:	e03e      	b.n	800e8aa <UART_SetConfig+0x156>
 800e82c:	2304      	movs	r3, #4
 800e82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e832:	e03a      	b.n	800e8aa <UART_SetConfig+0x156>
 800e834:	2308      	movs	r3, #8
 800e836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e83a:	e036      	b.n	800e8aa <UART_SetConfig+0x156>
 800e83c:	2310      	movs	r3, #16
 800e83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e842:	e032      	b.n	800e8aa <UART_SetConfig+0x156>
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a7e      	ldr	r2, [pc, #504]	; (800ea44 <UART_SetConfig+0x2f0>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d12a      	bne.n	800e8a4 <UART_SetConfig+0x150>
 800e84e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800e852:	f7ff fb0f 	bl	800de74 <LL_RCC_GetLPUARTClockSource>
 800e856:	4603      	mov	r3, r0
 800e858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e85c:	d01a      	beq.n	800e894 <UART_SetConfig+0x140>
 800e85e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e862:	d81b      	bhi.n	800e89c <UART_SetConfig+0x148>
 800e864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e868:	d00c      	beq.n	800e884 <UART_SetConfig+0x130>
 800e86a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e86e:	d815      	bhi.n	800e89c <UART_SetConfig+0x148>
 800e870:	2b00      	cmp	r3, #0
 800e872:	d003      	beq.n	800e87c <UART_SetConfig+0x128>
 800e874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e878:	d008      	beq.n	800e88c <UART_SetConfig+0x138>
 800e87a:	e00f      	b.n	800e89c <UART_SetConfig+0x148>
 800e87c:	2300      	movs	r3, #0
 800e87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e882:	e012      	b.n	800e8aa <UART_SetConfig+0x156>
 800e884:	2302      	movs	r3, #2
 800e886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e88a:	e00e      	b.n	800e8aa <UART_SetConfig+0x156>
 800e88c:	2304      	movs	r3, #4
 800e88e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e892:	e00a      	b.n	800e8aa <UART_SetConfig+0x156>
 800e894:	2308      	movs	r3, #8
 800e896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e89a:	e006      	b.n	800e8aa <UART_SetConfig+0x156>
 800e89c:	2310      	movs	r3, #16
 800e89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e8a2:	e002      	b.n	800e8aa <UART_SetConfig+0x156>
 800e8a4:	2310      	movs	r3, #16
 800e8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a65      	ldr	r2, [pc, #404]	; (800ea44 <UART_SetConfig+0x2f0>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	f040 8097 	bne.w	800e9e4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e8b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e8ba:	2b08      	cmp	r3, #8
 800e8bc:	d823      	bhi.n	800e906 <UART_SetConfig+0x1b2>
 800e8be:	a201      	add	r2, pc, #4	; (adr r2, 800e8c4 <UART_SetConfig+0x170>)
 800e8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c4:	0800e8e9 	.word	0x0800e8e9
 800e8c8:	0800e907 	.word	0x0800e907
 800e8cc:	0800e8f1 	.word	0x0800e8f1
 800e8d0:	0800e907 	.word	0x0800e907
 800e8d4:	0800e8f7 	.word	0x0800e8f7
 800e8d8:	0800e907 	.word	0x0800e907
 800e8dc:	0800e907 	.word	0x0800e907
 800e8e0:	0800e907 	.word	0x0800e907
 800e8e4:	0800e8ff 	.word	0x0800e8ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8e8:	f7fe fbf4 	bl	800d0d4 <HAL_RCC_GetPCLK1Freq>
 800e8ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e8ee:	e010      	b.n	800e912 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e8f0:	4b56      	ldr	r3, [pc, #344]	; (800ea4c <UART_SetConfig+0x2f8>)
 800e8f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e8f4:	e00d      	b.n	800e912 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8f6:	f7fe fb6d 	bl	800cfd4 <HAL_RCC_GetSysClockFreq>
 800e8fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e8fc:	e009      	b.n	800e912 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e904:	e005      	b.n	800e912 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800e906:	2300      	movs	r3, #0
 800e908:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e914:	2b00      	cmp	r3, #0
 800e916:	f000 812b 	beq.w	800eb70 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91e:	4a4c      	ldr	r2, [pc, #304]	; (800ea50 <UART_SetConfig+0x2fc>)
 800e920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e924:	461a      	mov	r2, r3
 800e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e928:	fbb3 f3f2 	udiv	r3, r3, r2
 800e92c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	4613      	mov	r3, r2
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	4413      	add	r3, r2
 800e938:	69ba      	ldr	r2, [r7, #24]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d305      	bcc.n	800e94a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	429a      	cmp	r2, r3
 800e948:	d903      	bls.n	800e952 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800e94a:	2301      	movs	r3, #1
 800e94c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e950:	e10e      	b.n	800eb70 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e954:	2200      	movs	r2, #0
 800e956:	60bb      	str	r3, [r7, #8]
 800e958:	60fa      	str	r2, [r7, #12]
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95e:	4a3c      	ldr	r2, [pc, #240]	; (800ea50 <UART_SetConfig+0x2fc>)
 800e960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e964:	b29b      	uxth	r3, r3
 800e966:	2200      	movs	r2, #0
 800e968:	603b      	str	r3, [r7, #0]
 800e96a:	607a      	str	r2, [r7, #4]
 800e96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e970:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e974:	f7f7 feee 	bl	8006754 <__aeabi_uldivmod>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	4610      	mov	r0, r2
 800e97e:	4619      	mov	r1, r3
 800e980:	f04f 0200 	mov.w	r2, #0
 800e984:	f04f 0300 	mov.w	r3, #0
 800e988:	020b      	lsls	r3, r1, #8
 800e98a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e98e:	0202      	lsls	r2, r0, #8
 800e990:	6979      	ldr	r1, [r7, #20]
 800e992:	6849      	ldr	r1, [r1, #4]
 800e994:	0849      	lsrs	r1, r1, #1
 800e996:	2000      	movs	r0, #0
 800e998:	460c      	mov	r4, r1
 800e99a:	4605      	mov	r5, r0
 800e99c:	eb12 0804 	adds.w	r8, r2, r4
 800e9a0:	eb43 0905 	adc.w	r9, r3, r5
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	469a      	mov	sl, r3
 800e9ac:	4693      	mov	fp, r2
 800e9ae:	4652      	mov	r2, sl
 800e9b0:	465b      	mov	r3, fp
 800e9b2:	4640      	mov	r0, r8
 800e9b4:	4649      	mov	r1, r9
 800e9b6:	f7f7 fecd 	bl	8006754 <__aeabi_uldivmod>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4613      	mov	r3, r2
 800e9c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e9c2:	6a3b      	ldr	r3, [r7, #32]
 800e9c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9c8:	d308      	bcc.n	800e9dc <UART_SetConfig+0x288>
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9d0:	d204      	bcs.n	800e9dc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	6a3a      	ldr	r2, [r7, #32]
 800e9d8:	60da      	str	r2, [r3, #12]
 800e9da:	e0c9      	b.n	800eb70 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e9e2:	e0c5      	b.n	800eb70 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	69db      	ldr	r3, [r3, #28]
 800e9e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ec:	d16d      	bne.n	800eaca <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800e9ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	2b07      	cmp	r3, #7
 800e9f6:	d82d      	bhi.n	800ea54 <UART_SetConfig+0x300>
 800e9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ea00 <UART_SetConfig+0x2ac>)
 800e9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fe:	bf00      	nop
 800ea00:	0800ea21 	.word	0x0800ea21
 800ea04:	0800ea29 	.word	0x0800ea29
 800ea08:	0800ea55 	.word	0x0800ea55
 800ea0c:	0800ea2f 	.word	0x0800ea2f
 800ea10:	0800ea55 	.word	0x0800ea55
 800ea14:	0800ea55 	.word	0x0800ea55
 800ea18:	0800ea55 	.word	0x0800ea55
 800ea1c:	0800ea37 	.word	0x0800ea37
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea20:	f7fe fb6e 	bl	800d100 <HAL_RCC_GetPCLK2Freq>
 800ea24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea26:	e01b      	b.n	800ea60 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea28:	4b08      	ldr	r3, [pc, #32]	; (800ea4c <UART_SetConfig+0x2f8>)
 800ea2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ea2c:	e018      	b.n	800ea60 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea2e:	f7fe fad1 	bl	800cfd4 <HAL_RCC_GetSysClockFreq>
 800ea32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ea34:	e014      	b.n	800ea60 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ea3c:	e010      	b.n	800ea60 <UART_SetConfig+0x30c>
 800ea3e:	bf00      	nop
 800ea40:	cfff69f3 	.word	0xcfff69f3
 800ea44:	40008000 	.word	0x40008000
 800ea48:	40013800 	.word	0x40013800
 800ea4c:	00f42400 	.word	0x00f42400
 800ea50:	08016ea4 	.word	0x08016ea4
      default:
        pclk = 0U;
 800ea54:	2300      	movs	r3, #0
 800ea56:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ea5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f000 8084 	beq.w	800eb70 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6c:	4a4b      	ldr	r2, [pc, #300]	; (800eb9c <UART_SetConfig+0x448>)
 800ea6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea72:	461a      	mov	r2, r3
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea7a:	005a      	lsls	r2, r3, #1
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	085b      	lsrs	r3, r3, #1
 800ea82:	441a      	add	r2, r3
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea8c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea8e:	6a3b      	ldr	r3, [r7, #32]
 800ea90:	2b0f      	cmp	r3, #15
 800ea92:	d916      	bls.n	800eac2 <UART_SetConfig+0x36e>
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea9a:	d212      	bcs.n	800eac2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea9c:	6a3b      	ldr	r3, [r7, #32]
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	f023 030f 	bic.w	r3, r3, #15
 800eaa4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eaa6:	6a3b      	ldr	r3, [r7, #32]
 800eaa8:	085b      	lsrs	r3, r3, #1
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	f003 0307 	and.w	r3, r3, #7
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	8bfb      	ldrh	r3, [r7, #30]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	8bfa      	ldrh	r2, [r7, #30]
 800eabe:	60da      	str	r2, [r3, #12]
 800eac0:	e056      	b.n	800eb70 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800eac8:	e052      	b.n	800eb70 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eaca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eace:	3b01      	subs	r3, #1
 800ead0:	2b07      	cmp	r3, #7
 800ead2:	d822      	bhi.n	800eb1a <UART_SetConfig+0x3c6>
 800ead4:	a201      	add	r2, pc, #4	; (adr r2, 800eadc <UART_SetConfig+0x388>)
 800ead6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eada:	bf00      	nop
 800eadc:	0800eafd 	.word	0x0800eafd
 800eae0:	0800eb05 	.word	0x0800eb05
 800eae4:	0800eb1b 	.word	0x0800eb1b
 800eae8:	0800eb0b 	.word	0x0800eb0b
 800eaec:	0800eb1b 	.word	0x0800eb1b
 800eaf0:	0800eb1b 	.word	0x0800eb1b
 800eaf4:	0800eb1b 	.word	0x0800eb1b
 800eaf8:	0800eb13 	.word	0x0800eb13
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eafc:	f7fe fb00 	bl	800d100 <HAL_RCC_GetPCLK2Freq>
 800eb00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eb02:	e010      	b.n	800eb26 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb04:	4b26      	ldr	r3, [pc, #152]	; (800eba0 <UART_SetConfig+0x44c>)
 800eb06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800eb08:	e00d      	b.n	800eb26 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb0a:	f7fe fa63 	bl	800cfd4 <HAL_RCC_GetSysClockFreq>
 800eb0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800eb10:	e009      	b.n	800eb26 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800eb18:	e005      	b.n	800eb26 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800eb24:	bf00      	nop
    }

    if (pclk != 0U)
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d021      	beq.n	800eb70 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb30:	4a1a      	ldr	r2, [pc, #104]	; (800eb9c <UART_SetConfig+0x448>)
 800eb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb36:	461a      	mov	r2, r3
 800eb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3a:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	085b      	lsrs	r3, r3, #1
 800eb44:	441a      	add	r2, r3
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb50:	6a3b      	ldr	r3, [r7, #32]
 800eb52:	2b0f      	cmp	r3, #15
 800eb54:	d909      	bls.n	800eb6a <UART_SetConfig+0x416>
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb5c:	d205      	bcs.n	800eb6a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb5e:	6a3b      	ldr	r3, [r7, #32]
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	60da      	str	r2, [r3, #12]
 800eb68:	e002      	b.n	800eb70 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2200      	movs	r2, #0
 800eb84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800eb8c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3730      	adds	r7, #48	; 0x30
 800eb94:	46bd      	mov	sp, r7
 800eb96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eb9a:	bf00      	nop
 800eb9c:	08016ea4 	.word	0x08016ea4
 800eba0:	00f42400 	.word	0x00f42400

0800eba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb0:	f003 0308 	and.w	r3, r3, #8
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00a      	beq.n	800ebce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	430a      	orrs	r2, r1
 800ebcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00a      	beq.n	800ebf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf4:	f003 0302 	and.w	r3, r3, #2
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00a      	beq.n	800ec12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	430a      	orrs	r2, r1
 800ec10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec16:	f003 0304 	and.w	r3, r3, #4
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00a      	beq.n	800ec34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	430a      	orrs	r2, r1
 800ec32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec38:	f003 0310 	and.w	r3, r3, #16
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00a      	beq.n	800ec56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	430a      	orrs	r2, r1
 800ec54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec5a:	f003 0320 	and.w	r3, r3, #32
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00a      	beq.n	800ec78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	430a      	orrs	r2, r1
 800ec76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d01a      	beq.n	800ecba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	430a      	orrs	r2, r1
 800ec98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eca2:	d10a      	bne.n	800ecba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	430a      	orrs	r2, r1
 800ecb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00a      	beq.n	800ecdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	430a      	orrs	r2, r1
 800ecda:	605a      	str	r2, [r3, #4]
  }
}
 800ecdc:	bf00      	nop
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b098      	sub	sp, #96	; 0x60
 800ecec:	af02      	add	r7, sp, #8
 800ecee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ecf8:	f7fc f852 	bl	800ada0 <HAL_GetTick>
 800ecfc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f003 0308 	and.w	r3, r3, #8
 800ed08:	2b08      	cmp	r3, #8
 800ed0a:	d12f      	bne.n	800ed6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed14:	2200      	movs	r2, #0
 800ed16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 f88e 	bl	800ee3c <UART_WaitOnFlagUntilTimeout>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d022      	beq.n	800ed6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2e:	e853 3f00 	ldrex	r3, [r3]
 800ed32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed3a:	653b      	str	r3, [r7, #80]	; 0x50
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	461a      	mov	r2, r3
 800ed42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed44:	647b      	str	r3, [r7, #68]	; 0x44
 800ed46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed4c:	e841 2300 	strex	r3, r2, [r1]
 800ed50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d1e6      	bne.n	800ed26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2220      	movs	r2, #32
 800ed5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed68:	2303      	movs	r3, #3
 800ed6a:	e063      	b.n	800ee34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f003 0304 	and.w	r3, r3, #4
 800ed76:	2b04      	cmp	r3, #4
 800ed78:	d149      	bne.n	800ee0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed7e:	9300      	str	r3, [sp, #0]
 800ed80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed82:	2200      	movs	r2, #0
 800ed84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f857 	bl	800ee3c <UART_WaitOnFlagUntilTimeout>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d03c      	beq.n	800ee0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	e853 3f00 	ldrex	r3, [r3]
 800eda0:	623b      	str	r3, [r7, #32]
   return(result);
 800eda2:	6a3b      	ldr	r3, [r7, #32]
 800eda4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eda8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	461a      	mov	r2, r3
 800edb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edb2:	633b      	str	r3, [r7, #48]	; 0x30
 800edb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edba:	e841 2300 	strex	r3, r2, [r1]
 800edbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1e6      	bne.n	800ed94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	3308      	adds	r3, #8
 800edcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	e853 3f00 	ldrex	r3, [r3]
 800edd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f023 0301 	bic.w	r3, r3, #1
 800eddc:	64bb      	str	r3, [r7, #72]	; 0x48
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	3308      	adds	r3, #8
 800ede4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ede6:	61fa      	str	r2, [r7, #28]
 800ede8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edea:	69b9      	ldr	r1, [r7, #24]
 800edec:	69fa      	ldr	r2, [r7, #28]
 800edee:	e841 2300 	strex	r3, r2, [r1]
 800edf2:	617b      	str	r3, [r7, #20]
   return(result);
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1e5      	bne.n	800edc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2220      	movs	r2, #32
 800edfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee0a:	2303      	movs	r3, #3
 800ee0c:	e012      	b.n	800ee34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2220      	movs	r2, #32
 800ee12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2220      	movs	r2, #32
 800ee1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee32:	2300      	movs	r3, #0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3758      	adds	r7, #88	; 0x58
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	603b      	str	r3, [r7, #0]
 800ee48:	4613      	mov	r3, r2
 800ee4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee4c:	e049      	b.n	800eee2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee54:	d045      	beq.n	800eee2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee56:	f7fb ffa3 	bl	800ada0 <HAL_GetTick>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	69ba      	ldr	r2, [r7, #24]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d302      	bcc.n	800ee6c <UART_WaitOnFlagUntilTimeout+0x30>
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d101      	bne.n	800ee70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee6c:	2303      	movs	r3, #3
 800ee6e:	e048      	b.n	800ef02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f003 0304 	and.w	r3, r3, #4
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d031      	beq.n	800eee2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	69db      	ldr	r3, [r3, #28]
 800ee84:	f003 0308 	and.w	r3, r3, #8
 800ee88:	2b08      	cmp	r3, #8
 800ee8a:	d110      	bne.n	800eeae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2208      	movs	r2, #8
 800ee92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f000 f99c 	bl	800f1d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2208      	movs	r2, #8
 800ee9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e029      	b.n	800ef02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	69db      	ldr	r3, [r3, #28]
 800eeb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eeb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eebc:	d111      	bne.n	800eee2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f000 f982 	bl	800f1d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2220      	movs	r2, #32
 800eed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eede:	2303      	movs	r3, #3
 800eee0:	e00f      	b.n	800ef02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	69da      	ldr	r2, [r3, #28]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	4013      	ands	r3, r2
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	bf0c      	ite	eq
 800eef2:	2301      	moveq	r3, #1
 800eef4:	2300      	movne	r3, #0
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	461a      	mov	r2, r3
 800eefa:	79fb      	ldrb	r3, [r7, #7]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d0a6      	beq.n	800ee4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
	...

0800ef0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b0a3      	sub	sp, #140	; 0x8c
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	4613      	mov	r3, r2
 800ef18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	88fa      	ldrh	r2, [r7, #6]
 800ef24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	88fa      	ldrh	r2, [r7, #6]
 800ef2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2200      	movs	r2, #0
 800ef34:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef3e:	d10e      	bne.n	800ef5e <UART_Start_Receive_IT+0x52>
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d105      	bne.n	800ef54 <UART_Start_Receive_IT+0x48>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ef4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef52:	e02d      	b.n	800efb0 <UART_Start_Receive_IT+0xa4>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	22ff      	movs	r2, #255	; 0xff
 800ef58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef5c:	e028      	b.n	800efb0 <UART_Start_Receive_IT+0xa4>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d10d      	bne.n	800ef82 <UART_Start_Receive_IT+0x76>
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d104      	bne.n	800ef78 <UART_Start_Receive_IT+0x6c>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	22ff      	movs	r2, #255	; 0xff
 800ef72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef76:	e01b      	b.n	800efb0 <UART_Start_Receive_IT+0xa4>
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	227f      	movs	r2, #127	; 0x7f
 800ef7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef80:	e016      	b.n	800efb0 <UART_Start_Receive_IT+0xa4>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef8a:	d10d      	bne.n	800efa8 <UART_Start_Receive_IT+0x9c>
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	691b      	ldr	r3, [r3, #16]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d104      	bne.n	800ef9e <UART_Start_Receive_IT+0x92>
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	227f      	movs	r2, #127	; 0x7f
 800ef98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ef9c:	e008      	b.n	800efb0 <UART_Start_Receive_IT+0xa4>
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	223f      	movs	r2, #63	; 0x3f
 800efa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800efa6:	e003      	b.n	800efb0 <UART_Start_Receive_IT+0xa4>
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2222      	movs	r2, #34	; 0x22
 800efbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	3308      	adds	r3, #8
 800efc6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efca:	e853 3f00 	ldrex	r3, [r3]
 800efce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800efd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efd2:	f043 0301 	orr.w	r3, r3, #1
 800efd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	3308      	adds	r3, #8
 800efe0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800efe4:	673a      	str	r2, [r7, #112]	; 0x70
 800efe6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800efea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800efec:	e841 2300 	strex	r3, r2, [r1]
 800eff0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800eff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1e3      	bne.n	800efc0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800effc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f000:	d14f      	bne.n	800f0a2 <UART_Start_Receive_IT+0x196>
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f008:	88fa      	ldrh	r2, [r7, #6]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d349      	bcc.n	800f0a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	689b      	ldr	r3, [r3, #8]
 800f012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f016:	d107      	bne.n	800f028 <UART_Start_Receive_IT+0x11c>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d103      	bne.n	800f028 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	4a47      	ldr	r2, [pc, #284]	; (800f140 <UART_Start_Receive_IT+0x234>)
 800f024:	675a      	str	r2, [r3, #116]	; 0x74
 800f026:	e002      	b.n	800f02e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	4a46      	ldr	r2, [pc, #280]	; (800f144 <UART_Start_Receive_IT+0x238>)
 800f02c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d01a      	beq.n	800f06c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f03e:	e853 3f00 	ldrex	r3, [r3]
 800f042:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f04a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	461a      	mov	r2, r3
 800f054:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f05a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f05e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f060:	e841 2300 	strex	r3, r2, [r1]
 800f064:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1e4      	bne.n	800f036 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3308      	adds	r3, #8
 800f072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f076:	e853 3f00 	ldrex	r3, [r3]
 800f07a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f082:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	3308      	adds	r3, #8
 800f08a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f08c:	64ba      	str	r2, [r7, #72]	; 0x48
 800f08e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f090:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f094:	e841 2300 	strex	r3, r2, [r1]
 800f098:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d1e5      	bne.n	800f06c <UART_Start_Receive_IT+0x160>
 800f0a0:	e046      	b.n	800f130 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0aa:	d107      	bne.n	800f0bc <UART_Start_Receive_IT+0x1b0>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	691b      	ldr	r3, [r3, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d103      	bne.n	800f0bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4a24      	ldr	r2, [pc, #144]	; (800f148 <UART_Start_Receive_IT+0x23c>)
 800f0b8:	675a      	str	r2, [r3, #116]	; 0x74
 800f0ba:	e002      	b.n	800f0c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	4a23      	ldr	r2, [pc, #140]	; (800f14c <UART_Start_Receive_IT+0x240>)
 800f0c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d019      	beq.n	800f0fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	e853 3f00 	ldrex	r3, [r3]
 800f0d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f0de:	677b      	str	r3, [r7, #116]	; 0x74
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f0ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0f0:	e841 2300 	strex	r3, r2, [r1]
 800f0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1e6      	bne.n	800f0ca <UART_Start_Receive_IT+0x1be>
 800f0fc:	e018      	b.n	800f130 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	e853 3f00 	ldrex	r3, [r3]
 800f10a:	613b      	str	r3, [r7, #16]
   return(result);
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	f043 0320 	orr.w	r3, r3, #32
 800f112:	67bb      	str	r3, [r7, #120]	; 0x78
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	461a      	mov	r2, r3
 800f11a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f11c:	623b      	str	r3, [r7, #32]
 800f11e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f120:	69f9      	ldr	r1, [r7, #28]
 800f122:	6a3a      	ldr	r2, [r7, #32]
 800f124:	e841 2300 	strex	r3, r2, [r1]
 800f128:	61bb      	str	r3, [r7, #24]
   return(result);
 800f12a:	69bb      	ldr	r3, [r7, #24]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1e6      	bne.n	800f0fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	378c      	adds	r7, #140	; 0x8c
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	0800fb29 	.word	0x0800fb29
 800f144:	0800f7c9 	.word	0x0800f7c9
 800f148:	0800f611 	.word	0x0800f611
 800f14c:	0800f459 	.word	0x0800f459

0800f150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f150:	b480      	push	{r7}
 800f152:	b08f      	sub	sp, #60	; 0x3c
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	e853 3f00 	ldrex	r3, [r3]
 800f164:	61fb      	str	r3, [r7, #28]
   return(result);
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f16c:	637b      	str	r3, [r7, #52]	; 0x34
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f176:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f178:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f17a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f17e:	e841 2300 	strex	r3, r2, [r1]
 800f182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1e6      	bne.n	800f158 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	3308      	adds	r3, #8
 800f190:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	e853 3f00 	ldrex	r3, [r3]
 800f198:	60bb      	str	r3, [r7, #8]
   return(result);
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f1a0:	633b      	str	r3, [r7, #48]	; 0x30
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	3308      	adds	r3, #8
 800f1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1aa:	61ba      	str	r2, [r7, #24]
 800f1ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ae:	6979      	ldr	r1, [r7, #20]
 800f1b0:	69ba      	ldr	r2, [r7, #24]
 800f1b2:	e841 2300 	strex	r3, r2, [r1]
 800f1b6:	613b      	str	r3, [r7, #16]
   return(result);
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1e5      	bne.n	800f18a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2220      	movs	r2, #32
 800f1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f1c6:	bf00      	nop
 800f1c8:	373c      	adds	r7, #60	; 0x3c
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f1d2:	b480      	push	{r7}
 800f1d4:	b095      	sub	sp, #84	; 0x54
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e2:	e853 3f00 	ldrex	r3, [r3]
 800f1e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1f8:	643b      	str	r3, [r7, #64]	; 0x40
 800f1fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f1fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f200:	e841 2300 	strex	r3, r2, [r1]
 800f204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1e6      	bne.n	800f1da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	3308      	adds	r3, #8
 800f212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f214:	6a3b      	ldr	r3, [r7, #32]
 800f216:	e853 3f00 	ldrex	r3, [r3]
 800f21a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f222:	f023 0301 	bic.w	r3, r3, #1
 800f226:	64bb      	str	r3, [r7, #72]	; 0x48
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	3308      	adds	r3, #8
 800f22e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f230:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f238:	e841 2300 	strex	r3, r2, [r1]
 800f23c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1e3      	bne.n	800f20c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d118      	bne.n	800f27e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	e853 3f00 	ldrex	r3, [r3]
 800f258:	60bb      	str	r3, [r7, #8]
   return(result);
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	f023 0310 	bic.w	r3, r3, #16
 800f260:	647b      	str	r3, [r7, #68]	; 0x44
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	461a      	mov	r2, r3
 800f268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f26a:	61bb      	str	r3, [r7, #24]
 800f26c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f26e:	6979      	ldr	r1, [r7, #20]
 800f270:	69ba      	ldr	r2, [r7, #24]
 800f272:	e841 2300 	strex	r3, r2, [r1]
 800f276:	613b      	str	r3, [r7, #16]
   return(result);
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1e6      	bne.n	800f24c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2220      	movs	r2, #32
 800f282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f292:	bf00      	nop
 800f294:	3754      	adds	r7, #84	; 0x54
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr

0800f29e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b090      	sub	sp, #64	; 0x40
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2aa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f003 0320 	and.w	r3, r3, #32
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d137      	bne.n	800f32a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800f2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2bc:	2200      	movs	r2, #0
 800f2be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3308      	adds	r3, #8
 800f2c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2cc:	e853 3f00 	ldrex	r3, [r3]
 800f2d0:	623b      	str	r3, [r7, #32]
   return(result);
 800f2d2:	6a3b      	ldr	r3, [r7, #32]
 800f2d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	3308      	adds	r3, #8
 800f2e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2e2:	633a      	str	r2, [r7, #48]	; 0x30
 800f2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2ea:	e841 2300 	strex	r3, r2, [r1]
 800f2ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1e5      	bne.n	800f2c2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	e853 3f00 	ldrex	r3, [r3]
 800f302:	60fb      	str	r3, [r7, #12]
   return(result);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f30a:	637b      	str	r3, [r7, #52]	; 0x34
 800f30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f314:	61fb      	str	r3, [r7, #28]
 800f316:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f318:	69b9      	ldr	r1, [r7, #24]
 800f31a:	69fa      	ldr	r2, [r7, #28]
 800f31c:	e841 2300 	strex	r3, r2, [r1]
 800f320:	617b      	str	r3, [r7, #20]
   return(result);
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d1e6      	bne.n	800f2f6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f328:	e002      	b.n	800f330 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f32a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f32c:	f7f8 ff00 	bl	8008130 <HAL_UART_TxCpltCallback>
}
 800f330:	bf00      	nop
 800f332:	3740      	adds	r7, #64	; 0x40
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f344:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff f9e4 	bl	800e714 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f34c:	bf00      	nop
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f360:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f368:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f370:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	689b      	ldr	r3, [r3, #8]
 800f378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f37c:	2b80      	cmp	r3, #128	; 0x80
 800f37e:	d109      	bne.n	800f394 <UART_DMAError+0x40>
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	2b21      	cmp	r3, #33	; 0x21
 800f384:	d106      	bne.n	800f394 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	2200      	movs	r2, #0
 800f38a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f38e:	6978      	ldr	r0, [r7, #20]
 800f390:	f7ff fede 	bl	800f150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f39e:	2b40      	cmp	r3, #64	; 0x40
 800f3a0:	d109      	bne.n	800f3b6 <UART_DMAError+0x62>
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2b22      	cmp	r3, #34	; 0x22
 800f3a6:	d106      	bne.n	800f3b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f3b0:	6978      	ldr	r0, [r7, #20]
 800f3b2:	f7ff ff0e 	bl	800f1d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3bc:	f043 0210 	orr.w	r2, r3, #16
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3c6:	6978      	ldr	r0, [r7, #20]
 800f3c8:	f7ff f9ae 	bl	800e728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3cc:	bf00      	nop
 800f3ce:	3718      	adds	r7, #24
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f7ff f998 	bl	800e728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3f8:	bf00      	nop
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b088      	sub	sp, #32
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	e853 3f00 	ldrex	r3, [r3]
 800f414:	60bb      	str	r3, [r7, #8]
   return(result);
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f41c:	61fb      	str	r3, [r7, #28]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	61bb      	str	r3, [r7, #24]
 800f428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f42a:	6979      	ldr	r1, [r7, #20]
 800f42c:	69ba      	ldr	r2, [r7, #24]
 800f42e:	e841 2300 	strex	r3, r2, [r1]
 800f432:	613b      	str	r3, [r7, #16]
   return(result);
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d1e6      	bne.n	800f408 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2220      	movs	r2, #32
 800f43e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2200      	movs	r2, #0
 800f446:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7f8 fe71 	bl	8008130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f44e:	bf00      	nop
 800f450:	3720      	adds	r7, #32
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
	...

0800f458 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b09c      	sub	sp, #112	; 0x70
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f466:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f470:	2b22      	cmp	r3, #34	; 0x22
 800f472:	f040 80be 	bne.w	800f5f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f47c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f480:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f484:	b2d9      	uxtb	r1, r3
 800f486:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f48a:	b2da      	uxtb	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f490:	400a      	ands	r2, r1
 800f492:	b2d2      	uxtb	r2, r2
 800f494:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f49a:	1c5a      	adds	r2, r3, #1
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f040 80a1 	bne.w	800f602 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4c8:	e853 3f00 	ldrex	r3, [r3]
 800f4cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f4d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4de:	65bb      	str	r3, [r7, #88]	; 0x58
 800f4e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4e6:	e841 2300 	strex	r3, r2, [r1]
 800f4ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f4ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1e6      	bne.n	800f4c0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	3308      	adds	r3, #8
 800f4f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	e853 3f00 	ldrex	r3, [r3]
 800f500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f504:	f023 0301 	bic.w	r3, r3, #1
 800f508:	667b      	str	r3, [r7, #100]	; 0x64
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	3308      	adds	r3, #8
 800f510:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f512:	647a      	str	r2, [r7, #68]	; 0x44
 800f514:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f51a:	e841 2300 	strex	r3, r2, [r1]
 800f51e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1e5      	bne.n	800f4f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2220      	movs	r2, #32
 800f52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2200      	movs	r2, #0
 800f532:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	4a33      	ldr	r2, [pc, #204]	; (800f60c <UART_RxISR_8BIT+0x1b4>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d01f      	beq.n	800f584 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d018      	beq.n	800f584 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55a:	e853 3f00 	ldrex	r3, [r3]
 800f55e:	623b      	str	r3, [r7, #32]
   return(result);
 800f560:	6a3b      	ldr	r3, [r7, #32]
 800f562:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f566:	663b      	str	r3, [r7, #96]	; 0x60
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	461a      	mov	r2, r3
 800f56e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f570:	633b      	str	r3, [r7, #48]	; 0x30
 800f572:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f578:	e841 2300 	strex	r3, r2, [r1]
 800f57c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f580:	2b00      	cmp	r3, #0
 800f582:	d1e6      	bne.n	800f552 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d12e      	bne.n	800f5ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	e853 3f00 	ldrex	r3, [r3]
 800f59e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f023 0310 	bic.w	r3, r3, #16
 800f5a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5b0:	61fb      	str	r3, [r7, #28]
 800f5b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b4:	69b9      	ldr	r1, [r7, #24]
 800f5b6:	69fa      	ldr	r2, [r7, #28]
 800f5b8:	e841 2300 	strex	r3, r2, [r1]
 800f5bc:	617b      	str	r3, [r7, #20]
   return(result);
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1e6      	bne.n	800f592 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	69db      	ldr	r3, [r3, #28]
 800f5ca:	f003 0310 	and.w	r3, r3, #16
 800f5ce:	2b10      	cmp	r3, #16
 800f5d0:	d103      	bne.n	800f5da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2210      	movs	r2, #16
 800f5d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f7ff f8aa 	bl	800e73c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5e8:	e00b      	b.n	800f602 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7f8 fd72 	bl	80080d4 <HAL_UART_RxCpltCallback>
}
 800f5f0:	e007      	b.n	800f602 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	699a      	ldr	r2, [r3, #24]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f042 0208 	orr.w	r2, r2, #8
 800f600:	619a      	str	r2, [r3, #24]
}
 800f602:	bf00      	nop
 800f604:	3770      	adds	r7, #112	; 0x70
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	40008000 	.word	0x40008000

0800f610 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b09c      	sub	sp, #112	; 0x70
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f61e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f628:	2b22      	cmp	r3, #34	; 0x22
 800f62a:	f040 80be 	bne.w	800f7aa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f634:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f63c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f63e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f642:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f646:	4013      	ands	r3, r2
 800f648:	b29a      	uxth	r2, r3
 800f64a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f64c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f652:	1c9a      	adds	r2, r3, #2
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f65e:	b29b      	uxth	r3, r3
 800f660:	3b01      	subs	r3, #1
 800f662:	b29a      	uxth	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f670:	b29b      	uxth	r3, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	f040 80a1 	bne.w	800f7ba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f67e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f680:	e853 3f00 	ldrex	r3, [r3]
 800f684:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f68c:	667b      	str	r3, [r7, #100]	; 0x64
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	461a      	mov	r2, r3
 800f694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f696:	657b      	str	r3, [r7, #84]	; 0x54
 800f698:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f69a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f69c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f69e:	e841 2300 	strex	r3, r2, [r1]
 800f6a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1e6      	bne.n	800f678 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3308      	adds	r3, #8
 800f6b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b4:	e853 3f00 	ldrex	r3, [r3]
 800f6b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6bc:	f023 0301 	bic.w	r3, r3, #1
 800f6c0:	663b      	str	r3, [r7, #96]	; 0x60
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f6ca:	643a      	str	r2, [r7, #64]	; 0x40
 800f6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6d2:	e841 2300 	strex	r3, r2, [r1]
 800f6d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1e5      	bne.n	800f6aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2220      	movs	r2, #32
 800f6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	4a33      	ldr	r2, [pc, #204]	; (800f7c4 <UART_RxISR_16BIT+0x1b4>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d01f      	beq.n	800f73c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f706:	2b00      	cmp	r3, #0
 800f708:	d018      	beq.n	800f73c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f710:	6a3b      	ldr	r3, [r7, #32]
 800f712:	e853 3f00 	ldrex	r3, [r3]
 800f716:	61fb      	str	r3, [r7, #28]
   return(result);
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f71e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	461a      	mov	r2, r3
 800f726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f72a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f72e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f730:	e841 2300 	strex	r3, r2, [r1]
 800f734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d1e6      	bne.n	800f70a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f740:	2b01      	cmp	r3, #1
 800f742:	d12e      	bne.n	800f7a2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	e853 3f00 	ldrex	r3, [r3]
 800f756:	60bb      	str	r3, [r7, #8]
   return(result);
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	f023 0310 	bic.w	r3, r3, #16
 800f75e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	461a      	mov	r2, r3
 800f766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f768:	61bb      	str	r3, [r7, #24]
 800f76a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f76c:	6979      	ldr	r1, [r7, #20]
 800f76e:	69ba      	ldr	r2, [r7, #24]
 800f770:	e841 2300 	strex	r3, r2, [r1]
 800f774:	613b      	str	r3, [r7, #16]
   return(result);
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d1e6      	bne.n	800f74a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	69db      	ldr	r3, [r3, #28]
 800f782:	f003 0310 	and.w	r3, r3, #16
 800f786:	2b10      	cmp	r3, #16
 800f788:	d103      	bne.n	800f792 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2210      	movs	r2, #16
 800f790:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f798:	4619      	mov	r1, r3
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f7fe ffce 	bl	800e73c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f7a0:	e00b      	b.n	800f7ba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f7f8 fc96 	bl	80080d4 <HAL_UART_RxCpltCallback>
}
 800f7a8:	e007      	b.n	800f7ba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	699a      	ldr	r2, [r3, #24]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f042 0208 	orr.w	r2, r2, #8
 800f7b8:	619a      	str	r2, [r3, #24]
}
 800f7ba:	bf00      	nop
 800f7bc:	3770      	adds	r7, #112	; 0x70
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	40008000 	.word	0x40008000

0800f7c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b0ac      	sub	sp, #176	; 0xb0
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	69db      	ldr	r3, [r3, #28]
 800f7e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7fe:	2b22      	cmp	r3, #34	; 0x22
 800f800:	f040 8182 	bne.w	800fb08 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f80a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f80e:	e125      	b.n	800fa5c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f816:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f81a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f81e:	b2d9      	uxtb	r1, r3
 800f820:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f824:	b2da      	uxtb	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f82a:	400a      	ands	r2, r1
 800f82c:	b2d2      	uxtb	r2, r2
 800f82e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f840:	b29b      	uxth	r3, r3
 800f842:	3b01      	subs	r3, #1
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	69db      	ldr	r3, [r3, #28]
 800f852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f85a:	f003 0307 	and.w	r3, r3, #7
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d053      	beq.n	800f90a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f866:	f003 0301 	and.w	r3, r3, #1
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d011      	beq.n	800f892 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f86e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00b      	beq.n	800f892 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2201      	movs	r2, #1
 800f880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f888:	f043 0201 	orr.w	r2, r3, #1
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f896:	f003 0302 	and.w	r3, r3, #2
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d011      	beq.n	800f8c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f89e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00b      	beq.n	800f8c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2202      	movs	r2, #2
 800f8b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8b8:	f043 0204 	orr.w	r2, r3, #4
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f8c6:	f003 0304 	and.w	r3, r3, #4
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d011      	beq.n	800f8f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f8ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f8d2:	f003 0301 	and.w	r3, r3, #1
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d00b      	beq.n	800f8f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2204      	movs	r2, #4
 800f8e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8e8:	f043 0202 	orr.w	r2, r3, #2
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d006      	beq.n	800f90a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f7fe ff13 	bl	800e728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f910:	b29b      	uxth	r3, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	f040 80a2 	bne.w	800fa5c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f920:	e853 3f00 	ldrex	r3, [r3]
 800f924:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f92c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	461a      	mov	r2, r3
 800f936:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f93a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f93c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f940:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f942:	e841 2300 	strex	r3, r2, [r1]
 800f946:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1e4      	bne.n	800f918 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3308      	adds	r3, #8
 800f954:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f958:	e853 3f00 	ldrex	r3, [r3]
 800f95c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f95e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f964:	f023 0301 	bic.w	r3, r3, #1
 800f968:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	3308      	adds	r3, #8
 800f972:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f976:	66ba      	str	r2, [r7, #104]	; 0x68
 800f978:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f97c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f97e:	e841 2300 	strex	r3, r2, [r1]
 800f982:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1e1      	bne.n	800f94e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2220      	movs	r2, #32
 800f98e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2200      	movs	r2, #0
 800f99c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a5f      	ldr	r2, [pc, #380]	; (800fb20 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d021      	beq.n	800f9ec <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d01a      	beq.n	800f9ec <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9be:	e853 3f00 	ldrex	r3, [r3]
 800f9c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f9ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9d8:	657b      	str	r3, [r7, #84]	; 0x54
 800f9da:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f9de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f9e0:	e841 2300 	strex	r3, r2, [r1]
 800f9e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d1e4      	bne.n	800f9b6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d130      	bne.n	800fa56 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa02:	e853 3f00 	ldrex	r3, [r3]
 800fa06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0a:	f023 0310 	bic.w	r3, r3, #16
 800fa0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	461a      	mov	r2, r3
 800fa18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa1c:	643b      	str	r3, [r7, #64]	; 0x40
 800fa1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fa22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa24:	e841 2300 	strex	r3, r2, [r1]
 800fa28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d1e4      	bne.n	800f9fa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	69db      	ldr	r3, [r3, #28]
 800fa36:	f003 0310 	and.w	r3, r3, #16
 800fa3a:	2b10      	cmp	r3, #16
 800fa3c:	d103      	bne.n	800fa46 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2210      	movs	r2, #16
 800fa44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7fe fe74 	bl	800e73c <HAL_UARTEx_RxEventCallback>
 800fa54:	e002      	b.n	800fa5c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7f8 fb3c 	bl	80080d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fa5c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d006      	beq.n	800fa72 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800fa64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa68:	f003 0320 	and.w	r3, r3, #32
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f47f aecf 	bne.w	800f810 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa78:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fa7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d049      	beq.n	800fb18 <UART_RxISR_8BIT_FIFOEN+0x350>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fa8a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d242      	bcs.n	800fb18 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3308      	adds	r3, #8
 800fa98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9a:	6a3b      	ldr	r3, [r7, #32]
 800fa9c:	e853 3f00 	ldrex	r3, [r3]
 800faa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800faa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	3308      	adds	r3, #8
 800fab2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fab8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fabc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fabe:	e841 2300 	strex	r3, r2, [r1]
 800fac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1e3      	bne.n	800fa92 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4a15      	ldr	r2, [pc, #84]	; (800fb24 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800face:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	e853 3f00 	ldrex	r3, [r3]
 800fadc:	60bb      	str	r3, [r7, #8]
   return(result);
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	f043 0320 	orr.w	r3, r3, #32
 800fae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	461a      	mov	r2, r3
 800faee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800faf2:	61bb      	str	r3, [r7, #24]
 800faf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf6:	6979      	ldr	r1, [r7, #20]
 800faf8:	69ba      	ldr	r2, [r7, #24]
 800fafa:	e841 2300 	strex	r3, r2, [r1]
 800fafe:	613b      	str	r3, [r7, #16]
   return(result);
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1e4      	bne.n	800fad0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fb06:	e007      	b.n	800fb18 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	699a      	ldr	r2, [r3, #24]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f042 0208 	orr.w	r2, r2, #8
 800fb16:	619a      	str	r2, [r3, #24]
}
 800fb18:	bf00      	nop
 800fb1a:	37b0      	adds	r7, #176	; 0xb0
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	40008000 	.word	0x40008000
 800fb24:	0800f459 	.word	0x0800f459

0800fb28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b0ae      	sub	sp, #184	; 0xb8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb36:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	69db      	ldr	r3, [r3, #28]
 800fb40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb5e:	2b22      	cmp	r3, #34	; 0x22
 800fb60:	f040 8186 	bne.w	800fe70 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb6a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fb6e:	e129      	b.n	800fdc4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb76:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800fb82:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800fb86:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800fb8a:	4013      	ands	r3, r2
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb98:	1c9a      	adds	r2, r3, #2
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	3b01      	subs	r3, #1
 800fba8:	b29a      	uxth	r2, r3
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	69db      	ldr	r3, [r3, #28]
 800fbb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fbba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fbbe:	f003 0307 	and.w	r3, r3, #7
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d053      	beq.n	800fc6e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fbc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fbca:	f003 0301 	and.w	r3, r3, #1
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d011      	beq.n	800fbf6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800fbd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fbd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00b      	beq.n	800fbf6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbec:	f043 0201 	orr.w	r2, r3, #1
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fbf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fbfa:	f003 0302 	and.w	r3, r3, #2
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d011      	beq.n	800fc26 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fc02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc06:	f003 0301 	and.w	r3, r3, #1
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00b      	beq.n	800fc26 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2202      	movs	r2, #2
 800fc14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc1c:	f043 0204 	orr.w	r2, r3, #4
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fc2a:	f003 0304 	and.w	r3, r3, #4
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d011      	beq.n	800fc56 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fc32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00b      	beq.n	800fc56 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2204      	movs	r2, #4
 800fc44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc4c:	f043 0202 	orr.w	r2, r3, #2
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d006      	beq.n	800fc6e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7fe fd61 	bl	800e728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f040 80a4 	bne.w	800fdc4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc84:	e853 3f00 	ldrex	r3, [r3]
 800fc88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fc8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	461a      	mov	r2, r3
 800fc9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fc9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fca2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fcaa:	e841 2300 	strex	r3, r2, [r1]
 800fcae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fcb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1e2      	bne.n	800fc7c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	3308      	adds	r3, #8
 800fcbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcc0:	e853 3f00 	ldrex	r3, [r3]
 800fcc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fcc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fccc:	f023 0301 	bic.w	r3, r3, #1
 800fcd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	3308      	adds	r3, #8
 800fcda:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fcde:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fce6:	e841 2300 	strex	r3, r2, [r1]
 800fcea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fcec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1e1      	bne.n	800fcb6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2220      	movs	r2, #32
 800fcf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a5f      	ldr	r2, [pc, #380]	; (800fe88 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d021      	beq.n	800fd54 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d01a      	beq.n	800fd54 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd26:	e853 3f00 	ldrex	r3, [r3]
 800fd2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fd2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fd32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd40:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd48:	e841 2300 	strex	r3, r2, [r1]
 800fd4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e4      	bne.n	800fd1e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d130      	bne.n	800fdbe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6a:	e853 3f00 	ldrex	r3, [r3]
 800fd6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd72:	f023 0310 	bic.w	r3, r3, #16
 800fd76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	461a      	mov	r2, r3
 800fd80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd84:	647b      	str	r3, [r7, #68]	; 0x44
 800fd86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd8c:	e841 2300 	strex	r3, r2, [r1]
 800fd90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1e4      	bne.n	800fd62 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	69db      	ldr	r3, [r3, #28]
 800fd9e:	f003 0310 	and.w	r3, r3, #16
 800fda2:	2b10      	cmp	r3, #16
 800fda4:	d103      	bne.n	800fdae <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2210      	movs	r2, #16
 800fdac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7fe fcc0 	bl	800e73c <HAL_UARTEx_RxEventCallback>
 800fdbc:	e002      	b.n	800fdc4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f7f8 f988 	bl	80080d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fdc4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d006      	beq.n	800fdda <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800fdcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fdd0:	f003 0320 	and.w	r3, r3, #32
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f47f aecb 	bne.w	800fb70 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fde0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fde4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d049      	beq.n	800fe80 <UART_RxISR_16BIT_FIFOEN+0x358>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fdf2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d242      	bcs.n	800fe80 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	3308      	adds	r3, #8
 800fe00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe04:	e853 3f00 	ldrex	r3, [r3]
 800fe08:	623b      	str	r3, [r7, #32]
   return(result);
 800fe0a:	6a3b      	ldr	r3, [r7, #32]
 800fe0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fe10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	3308      	adds	r3, #8
 800fe1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fe1e:	633a      	str	r2, [r7, #48]	; 0x30
 800fe20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe26:	e841 2300 	strex	r3, r2, [r1]
 800fe2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d1e3      	bne.n	800fdfa <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4a15      	ldr	r2, [pc, #84]	; (800fe8c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800fe36:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	e853 3f00 	ldrex	r3, [r3]
 800fe44:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f043 0320 	orr.w	r3, r3, #32
 800fe4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	461a      	mov	r2, r3
 800fe56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe5a:	61fb      	str	r3, [r7, #28]
 800fe5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe5e:	69b9      	ldr	r1, [r7, #24]
 800fe60:	69fa      	ldr	r2, [r7, #28]
 800fe62:	e841 2300 	strex	r3, r2, [r1]
 800fe66:	617b      	str	r3, [r7, #20]
   return(result);
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d1e4      	bne.n	800fe38 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fe6e:	e007      	b.n	800fe80 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	699a      	ldr	r2, [r3, #24]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f042 0208 	orr.w	r2, r2, #8
 800fe7e:	619a      	str	r2, [r3, #24]
}
 800fe80:	bf00      	nop
 800fe82:	37b8      	adds	r7, #184	; 0xb8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	40008000 	.word	0x40008000
 800fe8c:	0800f611 	.word	0x0800f611

0800fe90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fe98:	bf00      	nop
 800fe9a:	370c      	adds	r7, #12
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr

0800fea4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fec0:	bf00      	nop
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fecc:	b480      	push	{r7}
 800fece:	b085      	sub	sp, #20
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d101      	bne.n	800fee2 <HAL_UARTEx_DisableFifoMode+0x16>
 800fede:	2302      	movs	r3, #2
 800fee0:	e027      	b.n	800ff32 <HAL_UARTEx_DisableFifoMode+0x66>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2201      	movs	r2, #1
 800fee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2224      	movs	r2, #36	; 0x24
 800feee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	f022 0201 	bic.w	r2, r2, #1
 800ff08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2200      	movs	r2, #0
 800ff16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	68fa      	ldr	r2, [r7, #12]
 800ff1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2220      	movs	r2, #32
 800ff24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff30:	2300      	movs	r3, #0
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3714      	adds	r7, #20
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr

0800ff3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b084      	sub	sp, #16
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
 800ff46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d101      	bne.n	800ff56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff52:	2302      	movs	r3, #2
 800ff54:	e02d      	b.n	800ffb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2224      	movs	r2, #36	; 0x24
 800ff62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f022 0201 	bic.w	r2, r2, #1
 800ff7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	683a      	ldr	r2, [r7, #0]
 800ff8e:	430a      	orrs	r2, r1
 800ff90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 f850 	bl	8010038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2220      	movs	r2, #32
 800ffa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b084      	sub	sp, #16
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
 800ffc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d101      	bne.n	800ffd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ffce:	2302      	movs	r3, #2
 800ffd0:	e02d      	b.n	801002e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2224      	movs	r2, #36	; 0x24
 800ffde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f022 0201 	bic.w	r2, r2, #1
 800fff8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	430a      	orrs	r2, r1
 801000c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 f812 	bl	8010038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	68fa      	ldr	r2, [r7, #12]
 801001a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2220      	movs	r2, #32
 8010020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3710      	adds	r7, #16
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
	...

08010038 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010044:	2b00      	cmp	r3, #0
 8010046:	d108      	bne.n	801005a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2201      	movs	r2, #1
 801004c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2201      	movs	r2, #1
 8010054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010058:	e031      	b.n	80100be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801005a:	2308      	movs	r3, #8
 801005c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801005e:	2308      	movs	r3, #8
 8010060:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	0e5b      	lsrs	r3, r3, #25
 801006a:	b2db      	uxtb	r3, r3
 801006c:	f003 0307 	and.w	r3, r3, #7
 8010070:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	689b      	ldr	r3, [r3, #8]
 8010078:	0f5b      	lsrs	r3, r3, #29
 801007a:	b2db      	uxtb	r3, r3
 801007c:	f003 0307 	and.w	r3, r3, #7
 8010080:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010082:	7bbb      	ldrb	r3, [r7, #14]
 8010084:	7b3a      	ldrb	r2, [r7, #12]
 8010086:	4911      	ldr	r1, [pc, #68]	; (80100cc <UARTEx_SetNbDataToProcess+0x94>)
 8010088:	5c8a      	ldrb	r2, [r1, r2]
 801008a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801008e:	7b3a      	ldrb	r2, [r7, #12]
 8010090:	490f      	ldr	r1, [pc, #60]	; (80100d0 <UARTEx_SetNbDataToProcess+0x98>)
 8010092:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010094:	fb93 f3f2 	sdiv	r3, r3, r2
 8010098:	b29a      	uxth	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100a0:	7bfb      	ldrb	r3, [r7, #15]
 80100a2:	7b7a      	ldrb	r2, [r7, #13]
 80100a4:	4909      	ldr	r1, [pc, #36]	; (80100cc <UARTEx_SetNbDataToProcess+0x94>)
 80100a6:	5c8a      	ldrb	r2, [r1, r2]
 80100a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100ac:	7b7a      	ldrb	r2, [r7, #13]
 80100ae:	4908      	ldr	r1, [pc, #32]	; (80100d0 <UARTEx_SetNbDataToProcess+0x98>)
 80100b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80100be:	bf00      	nop
 80100c0:	3714      	adds	r7, #20
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr
 80100ca:	bf00      	nop
 80100cc:	08016ebc 	.word	0x08016ebc
 80100d0:	08016ec4 	.word	0x08016ec4

080100d4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b086      	sub	sp, #24
 80100d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100da:	f3ef 8310 	mrs	r3, PRIMASK
 80100de:	60fb      	str	r3, [r7, #12]
  return(result);
 80100e0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80100e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80100e4:	b672      	cpsid	i
}
 80100e6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80100e8:	1cbb      	adds	r3, r7, #2
 80100ea:	4619      	mov	r1, r3
 80100ec:	4812      	ldr	r0, [pc, #72]	; (8010138 <DbgTrace_TxCpltCallback+0x64>)
 80100ee:	f000 fde0 	bl	8010cb2 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80100f2:	1cbb      	adds	r3, r7, #2
 80100f4:	4619      	mov	r1, r3
 80100f6:	4810      	ldr	r0, [pc, #64]	; (8010138 <DbgTrace_TxCpltCallback+0x64>)
 80100f8:	f000 fecc 	bl	8010e94 <CircularQueue_Sense>
 80100fc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d00c      	beq.n	801011e <DbgTrace_TxCpltCallback+0x4a>
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	f383 8810 	msr	PRIMASK, r3
}
 801010e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8010110:	887b      	ldrh	r3, [r7, #2]
 8010112:	4a0a      	ldr	r2, [pc, #40]	; (801013c <DbgTrace_TxCpltCallback+0x68>)
 8010114:	4619      	mov	r1, r3
 8010116:	6938      	ldr	r0, [r7, #16]
 8010118:	f7f7 f852 	bl	80071c0 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 801011c:	e008      	b.n	8010130 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 801011e:	4b08      	ldr	r3, [pc, #32]	; (8010140 <DbgTrace_TxCpltCallback+0x6c>)
 8010120:	2201      	movs	r2, #1
 8010122:	701a      	strb	r2, [r3, #0]
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f383 8810 	msr	PRIMASK, r3
}
 801012e:	bf00      	nop
}
 8010130:	bf00      	nop
 8010132:	3718      	adds	r7, #24
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	20000740 	.word	0x20000740
 801013c:	080100d5 	.word	0x080100d5
 8010140:	20000029 	.word	0x20000029

08010144 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 801014a:	f7f7 f833 	bl	80071b4 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 801014e:	2302      	movs	r3, #2
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	2300      	movs	r3, #0
 8010154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010158:	4903      	ldr	r1, [pc, #12]	; (8010168 <DbgTraceInit+0x24>)
 801015a:	4804      	ldr	r0, [pc, #16]	; (801016c <DbgTraceInit+0x28>)
 801015c:	f000 fb50 	bl	8010800 <CircularQueue_Init>
#endif 
#endif
  return;
 8010160:	bf00      	nop
}
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	20000760 	.word	0x20000760
 801016c:	20000740 	.word	0x20000740

08010170 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	68b9      	ldr	r1, [r7, #8]
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f000 f805 	bl	8010190 <DbgTraceWrite>
 8010186:	4603      	mov	r3, r0
}
 8010188:	4618      	mov	r0, r3
 801018a:	3710      	adds	r7, #16
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b08a      	sub	sp, #40	; 0x28
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 801019c:	2300      	movs	r3, #0
 801019e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101a0:	f3ef 8310 	mrs	r3, PRIMASK
 80101a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80101a6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80101a8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b0:	d102      	bne.n	80101b8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	627b      	str	r3, [r7, #36]	; 0x24
 80101b6:	e037      	b.n	8010228 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d006      	beq.n	80101cc <DbgTraceWrite+0x3c>
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	d003      	beq.n	80101cc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80101c4:	f04f 33ff 	mov.w	r3, #4294967295
 80101c8:	627b      	str	r3, [r7, #36]	; 0x24
 80101ca:	e02d      	b.n	8010228 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d02a      	beq.n	8010228 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80101d6:	b672      	cpsid	i
}
 80101d8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	b29a      	uxth	r2, r3
 80101de:	2301      	movs	r3, #1
 80101e0:	68b9      	ldr	r1, [r7, #8]
 80101e2:	4814      	ldr	r0, [pc, #80]	; (8010234 <DbgTraceWrite+0xa4>)
 80101e4:	f000 fb3e 	bl	8010864 <CircularQueue_Add>
 80101e8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80101ea:	69fb      	ldr	r3, [r7, #28]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d015      	beq.n	801021c <DbgTraceWrite+0x8c>
 80101f0:	4b11      	ldr	r3, [pc, #68]	; (8010238 <DbgTraceWrite+0xa8>)
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d010      	beq.n	801021c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 80101fa:	4b0f      	ldr	r3, [pc, #60]	; (8010238 <DbgTraceWrite+0xa8>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	701a      	strb	r2, [r3, #0]
 8010200:	6a3b      	ldr	r3, [r7, #32]
 8010202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	f383 8810 	msr	PRIMASK, r3
}
 801020a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	b29b      	uxth	r3, r3
 8010210:	4a0a      	ldr	r2, [pc, #40]	; (801023c <DbgTraceWrite+0xac>)
 8010212:	4619      	mov	r1, r3
 8010214:	69f8      	ldr	r0, [r7, #28]
 8010216:	f7f6 ffd3 	bl	80071c0 <DbgOutputTraces>
 801021a:	e005      	b.n	8010228 <DbgTraceWrite+0x98>
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	f383 8810 	msr	PRIMASK, r3
}
 8010226:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8010228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801022a:	4618      	mov	r0, r3
 801022c:	3728      	adds	r7, #40	; 0x28
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	20000740 	.word	0x20000740
 8010238:	20000029 	.word	0x20000029
 801023c:	080100d5 	.word	0x080100d5

08010240 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010240:	b480      	push	{r7}
 8010242:	b085      	sub	sp, #20
 8010244:	af00      	add	r7, sp, #0
 8010246:	4603      	mov	r3, r0
 8010248:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801024a:	4b0f      	ldr	r3, [pc, #60]	; (8010288 <OTP_Read+0x48>)
 801024c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801024e:	e002      	b.n	8010256 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	3b08      	subs	r3, #8
 8010254:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	3307      	adds	r3, #7
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	79fa      	ldrb	r2, [r7, #7]
 801025e:	429a      	cmp	r2, r3
 8010260:	d003      	beq.n	801026a <OTP_Read+0x2a>
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	4a09      	ldr	r2, [pc, #36]	; (801028c <OTP_Read+0x4c>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d1f2      	bne.n	8010250 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	3307      	adds	r3, #7
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	79fa      	ldrb	r2, [r7, #7]
 8010272:	429a      	cmp	r2, r3
 8010274:	d001      	beq.n	801027a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010276:	2300      	movs	r3, #0
 8010278:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801027a:	68fb      	ldr	r3, [r7, #12]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr
 8010288:	1fff73f8 	.word	0x1fff73f8
 801028c:	1fff7000 	.word	0x1fff7000

08010290 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010296:	1d3b      	adds	r3, r7, #4
 8010298:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	2200      	movs	r2, #0
 801029e:	2100      	movs	r1, #0
 80102a0:	f64f 4070 	movw	r0, #64624	; 0xfc70
 80102a4:	f000 f920 	bl	80104e8 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	330b      	adds	r3, #11
 80102ac:	78db      	ldrb	r3, [r3, #3]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3718      	adds	r7, #24
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80102b8:	b480      	push	{r7}
 80102ba:	b08b      	sub	sp, #44	; 0x2c
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80102c8:	2300      	movs	r3, #0
 80102ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80102d0:	2300      	movs	r3, #0
 80102d2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80102d4:	2300      	movs	r3, #0
 80102d6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80102d8:	2300      	movs	r3, #0
 80102da:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80102dc:	2300      	movs	r3, #0
 80102de:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80102e0:	4b4a      	ldr	r3, [pc, #296]	; (801040c <SHCI_GetWirelessFwInfo+0x154>)
 80102e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80102e8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80102f2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4a44      	ldr	r2, [pc, #272]	; (8010410 <SHCI_GetWirelessFwInfo+0x158>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d10f      	bne.n	8010324 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	695b      	ldr	r3, [r3, #20]
 8010308:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	699b      	ldr	r3, [r3, #24]
 801030e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	69db      	ldr	r3, [r3, #28]
 8010314:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	68db      	ldr	r3, [r3, #12]
 801031a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	691b      	ldr	r3, [r3, #16]
 8010320:	617b      	str	r3, [r7, #20]
 8010322:	e01a      	b.n	801035a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801032c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8010330:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	691b      	ldr	r3, [r3, #16]
 8010338:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	695b      	ldr	r3, [r3, #20]
 8010340:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801035a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035c:	0e1b      	lsrs	r3, r3, #24
 801035e:	b2da      	uxtb	r2, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010366:	0c1b      	lsrs	r3, r3, #16
 8010368:	b2da      	uxtb	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010370:	0a1b      	lsrs	r3, r3, #8
 8010372:	b2da      	uxtb	r2, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8010378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037a:	091b      	lsrs	r3, r3, #4
 801037c:	b2db      	uxtb	r3, r3
 801037e:	f003 030f 	and.w	r3, r3, #15
 8010382:	b2da      	uxtb	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038a:	b2db      	uxtb	r3, r3
 801038c:	f003 030f 	and.w	r3, r3, #15
 8010390:	b2da      	uxtb	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010396:	6a3b      	ldr	r3, [r7, #32]
 8010398:	0e1b      	lsrs	r3, r3, #24
 801039a:	b2da      	uxtb	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80103a0:	6a3b      	ldr	r3, [r7, #32]
 80103a2:	0c1b      	lsrs	r3, r3, #16
 80103a4:	b2da      	uxtb	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80103aa:	6a3b      	ldr	r3, [r7, #32]
 80103ac:	0a1b      	lsrs	r3, r3, #8
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80103b4:	6a3b      	ldr	r3, [r7, #32]
 80103b6:	b2da      	uxtb	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	b2da      	uxtb	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	0e1b      	lsrs	r3, r3, #24
 80103c8:	b2da      	uxtb	r2, r3
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	0c1b      	lsrs	r3, r3, #16
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	0a1b      	lsrs	r3, r3, #8
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	0e1b      	lsrs	r3, r3, #24
 80103e6:	b2da      	uxtb	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	0c1b      	lsrs	r3, r3, #16
 80103f0:	b2da      	uxtb	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	b2da      	uxtb	r2, r3
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80103fe:	2300      	movs	r3, #0
}
 8010400:	4618      	mov	r0, r3
 8010402:	372c      	adds	r7, #44	; 0x2c
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr
 801040c:	58004000 	.word	0x58004000
 8010410:	a94656b9 	.word	0xa94656b9

08010414 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	4a08      	ldr	r2, [pc, #32]	; (8010444 <shci_init+0x30>)
 8010424:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8010426:	4a08      	ldr	r2, [pc, #32]	; (8010448 <shci_init+0x34>)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801042c:	4806      	ldr	r0, [pc, #24]	; (8010448 <shci_init+0x34>)
 801042e:	f000 f915 	bl	801065c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4618      	mov	r0, r3
 8010438:	f000 f898 	bl	801056c <TlInit>

  return;
 801043c:	bf00      	nop
}
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	20001780 	.word	0x20001780
 8010448:	20001760 	.word	0x20001760

0801044c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8010452:	4822      	ldr	r0, [pc, #136]	; (80104dc <shci_user_evt_proc+0x90>)
 8010454:	f000 f926 	bl	80106a4 <LST_is_empty>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d12b      	bne.n	80104b6 <shci_user_evt_proc+0x6a>
 801045e:	4b20      	ldr	r3, [pc, #128]	; (80104e0 <shci_user_evt_proc+0x94>)
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d027      	beq.n	80104b6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010466:	f107 030c 	add.w	r3, r7, #12
 801046a:	4619      	mov	r1, r3
 801046c:	481b      	ldr	r0, [pc, #108]	; (80104dc <shci_user_evt_proc+0x90>)
 801046e:	f000 f9a8 	bl	80107c2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8010472:	4b1c      	ldr	r3, [pc, #112]	; (80104e4 <shci_user_evt_proc+0x98>)
 8010474:	69db      	ldr	r3, [r3, #28]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d00c      	beq.n	8010494 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801047e:	2301      	movs	r3, #1
 8010480:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8010482:	4b18      	ldr	r3, [pc, #96]	; (80104e4 <shci_user_evt_proc+0x98>)
 8010484:	69db      	ldr	r3, [r3, #28]
 8010486:	1d3a      	adds	r2, r7, #4
 8010488:	4610      	mov	r0, r2
 801048a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801048c:	793a      	ldrb	r2, [r7, #4]
 801048e:	4b14      	ldr	r3, [pc, #80]	; (80104e0 <shci_user_evt_proc+0x94>)
 8010490:	701a      	strb	r2, [r3, #0]
 8010492:	e002      	b.n	801049a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010494:	4b12      	ldr	r3, [pc, #72]	; (80104e0 <shci_user_evt_proc+0x94>)
 8010496:	2201      	movs	r2, #1
 8010498:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801049a:	4b11      	ldr	r3, [pc, #68]	; (80104e0 <shci_user_evt_proc+0x94>)
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d004      	beq.n	80104ac <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f000 ff4b 	bl	8011340 <TL_MM_EvtDone>
 80104aa:	e004      	b.n	80104b6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	4619      	mov	r1, r3
 80104b0:	480a      	ldr	r0, [pc, #40]	; (80104dc <shci_user_evt_proc+0x90>)
 80104b2:	f000 f919 	bl	80106e8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80104b6:	4809      	ldr	r0, [pc, #36]	; (80104dc <shci_user_evt_proc+0x90>)
 80104b8:	f000 f8f4 	bl	80106a4 <LST_is_empty>
 80104bc:	4603      	mov	r3, r0
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d107      	bne.n	80104d2 <shci_user_evt_proc+0x86>
 80104c2:	4b07      	ldr	r3, [pc, #28]	; (80104e0 <shci_user_evt_proc+0x94>)
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d003      	beq.n	80104d2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80104ca:	4804      	ldr	r0, [pc, #16]	; (80104dc <shci_user_evt_proc+0x90>)
 80104cc:	f7f6 fe3b 	bl	8007146 <shci_notify_asynch_evt>
  }


  return;
 80104d0:	bf00      	nop
 80104d2:	bf00      	nop
}
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	20000094 	.word	0x20000094
 80104e0:	200000a4 	.word	0x200000a4
 80104e4:	20001760 	.word	0x20001760

080104e8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	60ba      	str	r2, [r7, #8]
 80104f0:	607b      	str	r3, [r7, #4]
 80104f2:	4603      	mov	r3, r0
 80104f4:	81fb      	strh	r3, [r7, #14]
 80104f6:	460b      	mov	r3, r1
 80104f8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80104fa:	2000      	movs	r0, #0
 80104fc:	f000 f868 	bl	80105d0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8010500:	4b17      	ldr	r3, [pc, #92]	; (8010560 <shci_send+0x78>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	89fa      	ldrh	r2, [r7, #14]
 8010506:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801050a:	4b15      	ldr	r3, [pc, #84]	; (8010560 <shci_send+0x78>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	7b7a      	ldrb	r2, [r7, #13]
 8010510:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8010512:	4b13      	ldr	r3, [pc, #76]	; (8010560 <shci_send+0x78>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	330c      	adds	r3, #12
 8010518:	7b7a      	ldrb	r2, [r7, #13]
 801051a:	68b9      	ldr	r1, [r7, #8]
 801051c:	4618      	mov	r0, r3
 801051e:	f004 fb68 	bl	8014bf2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8010522:	4b10      	ldr	r3, [pc, #64]	; (8010564 <shci_send+0x7c>)
 8010524:	2201      	movs	r2, #1
 8010526:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8010528:	4b0f      	ldr	r3, [pc, #60]	; (8010568 <shci_send+0x80>)
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	2100      	movs	r1, #0
 801052e:	2000      	movs	r0, #0
 8010530:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8010532:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8010536:	f7f6 fe1d 	bl	8007174 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f103 0008 	add.w	r0, r3, #8
 8010540:	4b07      	ldr	r3, [pc, #28]	; (8010560 <shci_send+0x78>)
 8010542:	6819      	ldr	r1, [r3, #0]
 8010544:	4b06      	ldr	r3, [pc, #24]	; (8010560 <shci_send+0x78>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	789b      	ldrb	r3, [r3, #2]
 801054a:	3303      	adds	r3, #3
 801054c:	461a      	mov	r2, r3
 801054e:	f004 fb50 	bl	8014bf2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010552:	2001      	movs	r0, #1
 8010554:	f000 f83c 	bl	80105d0 <Cmd_SetStatus>

  return;
 8010558:	bf00      	nop
}
 801055a:	3710      	adds	r7, #16
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}
 8010560:	200000a0 	.word	0x200000a0
 8010564:	20001784 	.word	0x20001784
 8010568:	20001760 	.word	0x20001760

0801056c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b086      	sub	sp, #24
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8010574:	4a10      	ldr	r2, [pc, #64]	; (80105b8 <TlInit+0x4c>)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801057a:	4810      	ldr	r0, [pc, #64]	; (80105bc <TlInit+0x50>)
 801057c:	f000 f882 	bl	8010684 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010580:	2001      	movs	r0, #1
 8010582:	f000 f825 	bl	80105d0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010586:	4b0e      	ldr	r3, [pc, #56]	; (80105c0 <TlInit+0x54>)
 8010588:	2201      	movs	r2, #1
 801058a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801058c:	4b0d      	ldr	r3, [pc, #52]	; (80105c4 <TlInit+0x58>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d00c      	beq.n	80105ae <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8010598:	4b0b      	ldr	r3, [pc, #44]	; (80105c8 <TlInit+0x5c>)
 801059a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801059c:	4b0b      	ldr	r3, [pc, #44]	; (80105cc <TlInit+0x60>)
 801059e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80105a0:	4b08      	ldr	r3, [pc, #32]	; (80105c4 <TlInit+0x58>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f107 020c 	add.w	r2, r7, #12
 80105a8:	4610      	mov	r0, r2
 80105aa:	4798      	blx	r3
  }

  return;
 80105ac:	bf00      	nop
 80105ae:	bf00      	nop
}
 80105b0:	3718      	adds	r7, #24
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	200000a0 	.word	0x200000a0
 80105bc:	20000094 	.word	0x20000094
 80105c0:	200000a4 	.word	0x200000a4
 80105c4:	20001760 	.word	0x20001760
 80105c8:	08010621 	.word	0x08010621
 80105cc:	08010639 	.word	0x08010639

080105d0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4603      	mov	r3, r0
 80105d8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80105da:	79fb      	ldrb	r3, [r7, #7]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10b      	bne.n	80105f8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80105e0:	4b0d      	ldr	r3, [pc, #52]	; (8010618 <Cmd_SetStatus+0x48>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d003      	beq.n	80105f0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80105e8:	4b0b      	ldr	r3, [pc, #44]	; (8010618 <Cmd_SetStatus+0x48>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2000      	movs	r0, #0
 80105ee:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80105f0:	4b0a      	ldr	r3, [pc, #40]	; (801061c <Cmd_SetStatus+0x4c>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80105f6:	e00b      	b.n	8010610 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80105f8:	4b08      	ldr	r3, [pc, #32]	; (801061c <Cmd_SetStatus+0x4c>)
 80105fa:	2201      	movs	r2, #1
 80105fc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80105fe:	4b06      	ldr	r3, [pc, #24]	; (8010618 <Cmd_SetStatus+0x48>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d004      	beq.n	8010610 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8010606:	4b04      	ldr	r3, [pc, #16]	; (8010618 <Cmd_SetStatus+0x48>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2001      	movs	r0, #1
 801060c:	4798      	blx	r3
  return;
 801060e:	bf00      	nop
 8010610:	bf00      	nop
}
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	20001780 	.word	0x20001780
 801061c:	2000009c 	.word	0x2000009c

08010620 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8010628:	2000      	movs	r0, #0
 801062a:	f7f6 fd98 	bl	800715e <shci_cmd_resp_release>

  return;
 801062e:	bf00      	nop
}
 8010630:	3708      	adds	r7, #8
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
	...

08010638 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8010640:	6879      	ldr	r1, [r7, #4]
 8010642:	4805      	ldr	r0, [pc, #20]	; (8010658 <TlUserEvtReceived+0x20>)
 8010644:	f000 f876 	bl	8010734 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010648:	4803      	ldr	r0, [pc, #12]	; (8010658 <TlUserEvtReceived+0x20>)
 801064a:	f7f6 fd7c 	bl	8007146 <shci_notify_asynch_evt>

  return;
 801064e:	bf00      	nop
}
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	20000094 	.word	0x20000094

0801065c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4a05      	ldr	r2, [pc, #20]	; (801067c <shci_register_io_bus+0x20>)
 8010668:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4a04      	ldr	r2, [pc, #16]	; (8010680 <shci_register_io_bus+0x24>)
 801066e:	611a      	str	r2, [r3, #16]

  return;
 8010670:	bf00      	nop
}
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr
 801067c:	080110f9 	.word	0x080110f9
 8010680:	0801114d 	.word	0x0801114d

08010684 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010684:	b480      	push	{r7}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	605a      	str	r2, [r3, #4]
}
 8010698:	bf00      	nop
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b087      	sub	sp, #28
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ac:	f3ef 8310 	mrs	r3, PRIMASK
 80106b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80106b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80106b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80106b6:	b672      	cpsid	i
}
 80106b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d102      	bne.n	80106ca <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80106c4:	2301      	movs	r3, #1
 80106c6:	75fb      	strb	r3, [r7, #23]
 80106c8:	e001      	b.n	80106ce <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80106ca:	2300      	movs	r3, #0
 80106cc:	75fb      	strb	r3, [r7, #23]
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	f383 8810 	msr	PRIMASK, r3
}
 80106d8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80106da:	7dfb      	ldrb	r3, [r7, #23]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	371c      	adds	r7, #28
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b087      	sub	sp, #28
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106f2:	f3ef 8310 	mrs	r3, PRIMASK
 80106f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80106f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80106fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80106fc:	b672      	cpsid	i
}
 80106fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	683a      	ldr	r2, [r7, #0]
 8010712:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	683a      	ldr	r2, [r7, #0]
 801071a:	605a      	str	r2, [r3, #4]
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	f383 8810 	msr	PRIMASK, r3
}
 8010726:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010728:	bf00      	nop
 801072a:	371c      	adds	r7, #28
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010734:	b480      	push	{r7}
 8010736:	b087      	sub	sp, #28
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801073e:	f3ef 8310 	mrs	r3, PRIMASK
 8010742:	60fb      	str	r3, [r7, #12]
  return(result);
 8010744:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010748:	b672      	cpsid	i
}
 801074a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	687a      	ldr	r2, [r7, #4]
 8010750:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	685a      	ldr	r2, [r3, #4]
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	683a      	ldr	r2, [r7, #0]
 801075e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	685b      	ldr	r3, [r3, #4]
 8010764:	683a      	ldr	r2, [r7, #0]
 8010766:	601a      	str	r2, [r3, #0]
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	f383 8810 	msr	PRIMASK, r3
}
 8010772:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010774:	bf00      	nop
 8010776:	371c      	adds	r7, #28
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010780:	b480      	push	{r7}
 8010782:	b087      	sub	sp, #28
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010788:	f3ef 8310 	mrs	r3, PRIMASK
 801078c:	60fb      	str	r3, [r7, #12]
  return(result);
 801078e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010792:	b672      	cpsid	i
}
 8010794:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	687a      	ldr	r2, [r7, #4]
 801079c:	6812      	ldr	r2, [r2, #0]
 801079e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	6852      	ldr	r2, [r2, #4]
 80107a8:	605a      	str	r2, [r3, #4]
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	f383 8810 	msr	PRIMASK, r3
}
 80107b4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80107b6:	bf00      	nop
 80107b8:	371c      	adds	r7, #28
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr

080107c2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b086      	sub	sp, #24
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
 80107ca:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107cc:	f3ef 8310 	mrs	r3, PRIMASK
 80107d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80107d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80107d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80107d6:	b672      	cpsid	i
}
 80107d8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7ff ffca 	bl	8010780 <LST_remove_node>
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	f383 8810 	msr	PRIMASK, r3
}
 80107f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80107f8:	bf00      	nop
 80107fa:	3718      	adds	r7, #24
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}

08010800 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
 801080c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2200      	movs	r2, #0
 8010818:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2200      	movs	r2, #0
 801081e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2200      	movs	r2, #0
 8010824:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	2200      	movs	r2, #0
 801082a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	887a      	ldrh	r2, [r7, #2]
 8010836:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	7e3a      	ldrb	r2, [r7, #24]
 801083c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 801083e:	7e3b      	ldrb	r3, [r7, #24]
 8010840:	f003 0302 	and.w	r3, r3, #2
 8010844:	2b00      	cmp	r3, #0
 8010846:	d006      	beq.n	8010856 <CircularQueue_Init+0x56>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	891b      	ldrh	r3, [r3, #8]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d002      	beq.n	8010856 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8010850:	f04f 33ff 	mov.w	r3, #4294967295
 8010854:	e000      	b.n	8010858 <CircularQueue_Init+0x58>
  }
  return 0;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	3714      	adds	r7, #20
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr

08010864 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b08e      	sub	sp, #56	; 0x38
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	603b      	str	r3, [r7, #0]
 8010870:	4613      	mov	r3, r2
 8010872:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8010874:	2300      	movs	r3, #0
 8010876:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8010878:	2300      	movs	r3, #0
 801087a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 801087c:	2300      	movs	r3, #0
 801087e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8010880:	2300      	movs	r3, #0
 8010882:	62bb      	str	r3, [r7, #40]	; 0x28
 8010884:	2300      	movs	r3, #0
 8010886:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8010888:	2300      	movs	r3, #0
 801088a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 801088c:	2300      	movs	r3, #0
 801088e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	891b      	ldrh	r3, [r3, #8]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d101      	bne.n	801089c <CircularQueue_Add+0x38>
 8010898:	2302      	movs	r3, #2
 801089a:	e000      	b.n	801089e <CircularQueue_Add+0x3a>
 801089c:	2300      	movs	r3, #0
 801089e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	695b      	ldr	r3, [r3, #20]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d02a      	beq.n	80108fe <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	891b      	ldrh	r3, [r3, #8]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d123      	bne.n	80108f8 <CircularQueue_Add+0x94>
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	691b      	ldr	r3, [r3, #16]
 80108b8:	4413      	add	r3, r2
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	b29a      	uxth	r2, r3
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	6819      	ldr	r1, [r3, #0]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	691b      	ldr	r3, [r3, #16]
 80108c6:	1c58      	adds	r0, r3, #1
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	4298      	cmp	r0, r3
 80108ce:	d306      	bcc.n	80108de <CircularQueue_Add+0x7a>
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	6918      	ldr	r0, [r3, #16]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	1ac3      	subs	r3, r0, r3
 80108da:	3301      	adds	r3, #1
 80108dc:	e002      	b.n	80108e4 <CircularQueue_Add+0x80>
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	691b      	ldr	r3, [r3, #16]
 80108e2:	3301      	adds	r3, #1
 80108e4:	440b      	add	r3, r1
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	021b      	lsls	r3, r3, #8
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	4413      	add	r3, r2
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	3302      	adds	r3, #2
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	e001      	b.n	80108fc <CircularQueue_Add+0x98>
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	891b      	ldrh	r3, [r3, #8]
 80108fc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	891b      	ldrh	r3, [r3, #8]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d002      	beq.n	801090c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	891b      	ldrh	r3, [r3, #8]
 801090a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	691a      	ldr	r2, [r3, #16]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	429a      	cmp	r2, r3
 8010916:	d307      	bcc.n	8010928 <CircularQueue_Add+0xc4>
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	685a      	ldr	r2, [r3, #4]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6919      	ldr	r1, [r3, #16]
 8010920:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010922:	440b      	add	r3, r1
 8010924:	1ad3      	subs	r3, r2, r3
 8010926:	e000      	b.n	801092a <CircularQueue_Add+0xc6>
 8010928:	2300      	movs	r3, #0
 801092a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 801092c:	88fa      	ldrh	r2, [r7, #6]
 801092e:	7ffb      	ldrb	r3, [r7, #31]
 8010930:	4413      	add	r3, r2
 8010932:	461a      	mov	r2, r3
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	fb02 f303 	mul.w	r3, r2, r3
 801093a:	69ba      	ldr	r2, [r7, #24]
 801093c:	429a      	cmp	r2, r3
 801093e:	d80b      	bhi.n	8010958 <CircularQueue_Add+0xf4>
 8010940:	88fa      	ldrh	r2, [r7, #6]
 8010942:	7ffb      	ldrb	r3, [r7, #31]
 8010944:	4413      	add	r3, r2
 8010946:	461a      	mov	r2, r3
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	fbb3 f1f2 	udiv	r1, r3, r2
 801094e:	fb01 f202 	mul.w	r2, r1, r2
 8010952:	1a9b      	subs	r3, r3, r2
 8010954:	b2db      	uxtb	r3, r3
 8010956:	e000      	b.n	801095a <CircularQueue_Add+0xf6>
 8010958:	2300      	movs	r3, #0
 801095a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 801095c:	7dfa      	ldrb	r2, [r7, #23]
 801095e:	7ffb      	ldrb	r3, [r7, #31]
 8010960:	429a      	cmp	r2, r3
 8010962:	bf8c      	ite	hi
 8010964:	2301      	movhi	r3, #1
 8010966:	2300      	movls	r3, #0
 8010968:	b2db      	uxtb	r3, r3
 801096a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 801096c:	7fbb      	ldrb	r3, [r7, #30]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d008      	beq.n	8010984 <CircularQueue_Add+0x120>
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	7f1b      	ldrb	r3, [r3, #28]
 8010976:	f003 0301 	and.w	r3, r3, #1
 801097a:	2b00      	cmp	r3, #0
 801097c:	d002      	beq.n	8010984 <CircularQueue_Add+0x120>
 801097e:	7dfb      	ldrb	r3, [r7, #23]
 8010980:	b29b      	uxth	r3, r3
 8010982:	e000      	b.n	8010986 <CircularQueue_Add+0x122>
 8010984:	8bbb      	ldrh	r3, [r7, #28]
 8010986:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8010988:	7fbb      	ldrb	r3, [r7, #30]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d008      	beq.n	80109a0 <CircularQueue_Add+0x13c>
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	7f1b      	ldrb	r3, [r3, #28]
 8010992:	f003 0302 	and.w	r3, r3, #2
 8010996:	2b00      	cmp	r3, #0
 8010998:	d002      	beq.n	80109a0 <CircularQueue_Add+0x13c>
 801099a:	7ffb      	ldrb	r3, [r7, #31]
 801099c:	b29b      	uxth	r3, r3
 801099e:	e000      	b.n	80109a2 <CircularQueue_Add+0x13e>
 80109a0:	8bbb      	ldrh	r3, [r7, #28]
 80109a2:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80109a4:	88fb      	ldrh	r3, [r7, #6]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f000 817e 	beq.w	8010ca8 <CircularQueue_Add+0x444>
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	695a      	ldr	r2, [r3, #20]
 80109b0:	88f9      	ldrh	r1, [r7, #6]
 80109b2:	7ffb      	ldrb	r3, [r7, #31]
 80109b4:	440b      	add	r3, r1
 80109b6:	4619      	mov	r1, r3
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	fb01 f303 	mul.w	r3, r1, r3
 80109be:	441a      	add	r2, r3
 80109c0:	8bbb      	ldrh	r3, [r7, #28]
 80109c2:	441a      	add	r2, r3
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	f200 816d 	bhi.w	8010ca8 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80109ce:	2300      	movs	r3, #0
 80109d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109d2:	e14a      	b.n	8010c6a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	691a      	ldr	r2, [r3, #16]
 80109d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80109da:	441a      	add	r2, r3
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d307      	bcc.n	80109f4 <CircularQueue_Add+0x190>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	691a      	ldr	r2, [r3, #16]
 80109e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80109ea:	441a      	add	r2, r3
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	1ad3      	subs	r3, r2, r3
 80109f2:	e003      	b.n	80109fc <CircularQueue_Add+0x198>
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	691a      	ldr	r2, [r3, #16]
 80109f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80109fa:	4413      	add	r3, r2
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	891b      	ldrh	r3, [r3, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d130      	bne.n	8010a70 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a14:	1c59      	adds	r1, r3, #1
 8010a16:	6339      	str	r1, [r7, #48]	; 0x30
 8010a18:	4413      	add	r3, r2
 8010a1a:	88fa      	ldrh	r2, [r7, #6]
 8010a1c:	b2d2      	uxtb	r2, r2
 8010a1e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	685b      	ldr	r3, [r3, #4]
 8010a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d304      	bcc.n	8010a34 <CircularQueue_Add+0x1d0>
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a30:	1ad3      	subs	r3, r2, r3
 8010a32:	e000      	b.n	8010a36 <CircularQueue_Add+0x1d2>
 8010a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a36:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8010a38:	88fb      	ldrh	r3, [r7, #6]
 8010a3a:	0a1b      	lsrs	r3, r3, #8
 8010a3c:	b298      	uxth	r0, r3
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	1c59      	adds	r1, r3, #1
 8010a46:	6339      	str	r1, [r7, #48]	; 0x30
 8010a48:	4413      	add	r3, r2
 8010a4a:	b2c2      	uxtb	r2, r0
 8010a4c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d304      	bcc.n	8010a62 <CircularQueue_Add+0x1fe>
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a5e:	1ad3      	subs	r3, r2, r3
 8010a60:	e000      	b.n	8010a64 <CircularQueue_Add+0x200>
 8010a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a64:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	695b      	ldr	r3, [r3, #20]
 8010a6a:	1c9a      	adds	r2, r3, #2
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8010a70:	88fa      	ldrh	r2, [r7, #6]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6859      	ldr	r1, [r3, #4]
 8010a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a78:	1acb      	subs	r3, r1, r3
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	bf28      	it	cs
 8010a7e:	4613      	movcs	r3, r2
 8010a80:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8010a82:	88fb      	ldrh	r3, [r7, #6]
 8010a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d007      	beq.n	8010a9a <CircularQueue_Add+0x236>
 8010a8a:	88fb      	ldrh	r3, [r7, #6]
 8010a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d225      	bcs.n	8010ade <CircularQueue_Add+0x27a>
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	7f1b      	ldrb	r3, [r3, #28]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d121      	bne.n	8010ade <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	18d0      	adds	r0, r2, r3
 8010aa2:	88fb      	ldrh	r3, [r7, #6]
 8010aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010aa6:	fb02 f303 	mul.w	r3, r2, r3
 8010aaa:	68ba      	ldr	r2, [r7, #8]
 8010aac:	4413      	add	r3, r2
 8010aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	f004 f89e 	bl	8014bf2 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	695a      	ldr	r2, [r3, #20]
 8010aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abc:	441a      	add	r2, r3
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8010ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8010aca:	88fa      	ldrh	r2, [r7, #6]
 8010acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8010ad2:	7ffb      	ldrb	r3, [r7, #31]
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	88fb      	ldrh	r3, [r7, #6]
 8010ad8:	4413      	add	r3, r2
 8010ada:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010adc:	e0a4      	b.n	8010c28 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8010ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	f000 80a1 	beq.w	8010c28 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	7f1b      	ldrb	r3, [r3, #28]
 8010aea:	f003 0301 	and.w	r3, r3, #1
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d03a      	beq.n	8010b68 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	891b      	ldrh	r3, [r3, #8]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10d      	bne.n	8010b16 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	3b02      	subs	r3, #2
 8010b02:	4413      	add	r3, r2
 8010b04:	22ff      	movs	r2, #255	; 0xff
 8010b06:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	4413      	add	r3, r2
 8010b12:	22ff      	movs	r2, #255	; 0xff
 8010b14:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	695a      	ldr	r2, [r3, #20]
 8010b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1c:	441a      	add	r2, r3
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8010b22:	2300      	movs	r3, #0
 8010b24:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8010b26:	88fb      	ldrh	r3, [r7, #6]
 8010b28:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	891b      	ldrh	r3, [r3, #8]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d16f      	bne.n	8010c16 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681a      	ldr	r2, [r3, #0]
 8010b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b3c:	1c59      	adds	r1, r3, #1
 8010b3e:	6339      	str	r1, [r7, #48]	; 0x30
 8010b40:	4413      	add	r3, r2
 8010b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b44:	b2d2      	uxtb	r2, r2
 8010b46:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8010b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4a:	0a18      	lsrs	r0, r3, #8
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b52:	1c59      	adds	r1, r3, #1
 8010b54:	6339      	str	r1, [r7, #48]	; 0x30
 8010b56:	4413      	add	r3, r2
 8010b58:	b2c2      	uxtb	r2, r0
 8010b5a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	695b      	ldr	r3, [r3, #20]
 8010b60:	1c9a      	adds	r2, r3, #2
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	615a      	str	r2, [r3, #20]
 8010b66:	e056      	b.n	8010c16 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	7f1b      	ldrb	r3, [r3, #28]
 8010b6c:	f003 0302 	and.w	r3, r3, #2
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d050      	beq.n	8010c16 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	891b      	ldrh	r3, [r3, #8]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d14a      	bne.n	8010c12 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b82:	3b02      	subs	r3, #2
 8010b84:	4413      	add	r3, r2
 8010b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b88:	b2d2      	uxtb	r2, r2
 8010b8a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8010b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8e:	0a19      	lsrs	r1, r3, #8
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b96:	3b01      	subs	r3, #1
 8010b98:	4413      	add	r3, r2
 8010b9a:	b2ca      	uxtb	r2, r1
 8010b9c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba4:	18d0      	adds	r0, r2, r3
 8010ba6:	88fb      	ldrh	r3, [r7, #6]
 8010ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010baa:	fb02 f303 	mul.w	r3, r2, r3
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	f004 f81c 	bl	8014bf2 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	695a      	ldr	r2, [r3, #20]
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	441a      	add	r2, r3
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8010bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8010bca:	88fa      	ldrh	r2, [r7, #6]
 8010bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bce:	1ad3      	subs	r3, r2, r3
 8010bd0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	699b      	ldr	r3, [r3, #24]
 8010bd6:	1c5a      	adds	r2, r3, #1
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8010bdc:	2300      	movs	r3, #0
 8010bde:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be6:	1c59      	adds	r1, r3, #1
 8010be8:	6339      	str	r1, [r7, #48]	; 0x30
 8010bea:	4413      	add	r3, r2
 8010bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bee:	b2d2      	uxtb	r2, r2
 8010bf0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8010bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf4:	0a18      	lsrs	r0, r3, #8
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	1c59      	adds	r1, r3, #1
 8010bfe:	6339      	str	r1, [r7, #48]	; 0x30
 8010c00:	4413      	add	r3, r2
 8010c02:	b2c2      	uxtb	r2, r0
 8010c04:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	695b      	ldr	r3, [r3, #20]
 8010c0a:	1c9a      	adds	r2, r3, #2
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	615a      	str	r2, [r3, #20]
 8010c10:	e001      	b.n	8010c16 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8010c12:	2300      	movs	r3, #0
 8010c14:	e049      	b.n	8010caa <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8010c16:	7ffb      	ldrb	r3, [r7, #31]
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	4413      	add	r3, r2
 8010c20:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	2200      	movs	r2, #0
 8010c26:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8010c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d015      	beq.n	8010c5a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c34:	18d0      	adds	r0, r2, r3
 8010c36:	88fb      	ldrh	r3, [r7, #6]
 8010c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c3a:	fb03 f202 	mul.w	r2, r3, r2
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c40:	4413      	add	r3, r2
 8010c42:	68ba      	ldr	r2, [r7, #8]
 8010c44:	4413      	add	r3, r2
 8010c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c48:	4619      	mov	r1, r3
 8010c4a:	f003 ffd2 	bl	8014bf2 <memcpy>
        q->byteCount += NbBytesToCopy;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	695a      	ldr	r2, [r3, #20]
 8010c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c54:	441a      	add	r2, r3
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	699b      	ldr	r3, [r3, #24]
 8010c5e:	1c5a      	adds	r2, r3, #1
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8010c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c66:	3301      	adds	r3, #1
 8010c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	f4ff aeb0 	bcc.w	80109d4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	6919      	ldr	r1, [r3, #16]
 8010c7c:	7ffb      	ldrb	r3, [r7, #31]
 8010c7e:	4419      	add	r1, r3
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	4299      	cmp	r1, r3
 8010c86:	d307      	bcc.n	8010c98 <CircularQueue_Add+0x434>
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	6919      	ldr	r1, [r3, #16]
 8010c8c:	7ffb      	ldrb	r3, [r7, #31]
 8010c8e:	4419      	add	r1, r3
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	1acb      	subs	r3, r1, r3
 8010c96:	e003      	b.n	8010ca0 <CircularQueue_Add+0x43c>
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	6919      	ldr	r1, [r3, #16]
 8010c9c:	7ffb      	ldrb	r3, [r7, #31]
 8010c9e:	440b      	add	r3, r1
 8010ca0:	4413      	add	r3, r2
 8010ca2:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8010ca4:	6a3b      	ldr	r3, [r7, #32]
 8010ca6:	e000      	b.n	8010caa <CircularQueue_Add+0x446>
    return NULL;
 8010ca8:	2300      	movs	r3, #0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3738      	adds	r7, #56	; 0x38
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8010cb2:	b480      	push	{r7}
 8010cb4:	b085      	sub	sp, #20
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
 8010cba:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	891b      	ldrh	r3, [r3, #8]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d101      	bne.n	8010cd0 <CircularQueue_Remove+0x1e>
 8010ccc:	2302      	movs	r3, #2
 8010cce:	e000      	b.n	8010cd2 <CircularQueue_Remove+0x20>
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	695b      	ldr	r3, [r3, #20]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f000 80cc 	beq.w	8010e7a <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	891b      	ldrh	r3, [r3, #8]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d121      	bne.n	8010d2e <CircularQueue_Remove+0x7c>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6819      	ldr	r1, [r3, #0]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	1c58      	adds	r0, r3, #1
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	4298      	cmp	r0, r3
 8010d08:	d306      	bcc.n	8010d18 <CircularQueue_Remove+0x66>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	68d8      	ldr	r0, [r3, #12]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	1ac3      	subs	r3, r0, r3
 8010d14:	3301      	adds	r3, #1
 8010d16:	e002      	b.n	8010d1e <CircularQueue_Remove+0x6c>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	440b      	add	r3, r1
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	021b      	lsls	r3, r3, #8
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	4413      	add	r3, r2
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	e001      	b.n	8010d32 <CircularQueue_Remove+0x80>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	891b      	ldrh	r3, [r3, #8]
 8010d32:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	7f1b      	ldrb	r3, [r3, #28]
 8010d38:	f003 0301 	and.w	r3, r3, #1
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d057      	beq.n	8010df0 <CircularQueue_Remove+0x13e>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	7f1b      	ldrb	r3, [r3, #28]
 8010d44:	f003 0302 	and.w	r3, r3, #2
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d151      	bne.n	8010df0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010d4c:	897b      	ldrh	r3, [r7, #10]
 8010d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d103      	bne.n	8010d5e <CircularQueue_Remove+0xac>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	891b      	ldrh	r3, [r3, #8]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d012      	beq.n	8010d84 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	68da      	ldr	r2, [r3, #12]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d942      	bls.n	8010df0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	891b      	ldrh	r3, [r3, #8]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d03e      	beq.n	8010df0 <CircularQueue_Remove+0x13e>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	685a      	ldr	r2, [r3, #4]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	8912      	ldrh	r2, [r2, #8]
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d235      	bcs.n	8010df0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	695a      	ldr	r2, [r3, #20]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	68d9      	ldr	r1, [r3, #12]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	1acb      	subs	r3, r1, r3
 8010d92:	441a      	add	r2, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	891b      	ldrh	r3, [r3, #8]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d121      	bne.n	8010dea <CircularQueue_Remove+0x138>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	4413      	add	r3, r2
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6819      	ldr	r1, [r3, #0]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	1c58      	adds	r0, r3, #1
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	4298      	cmp	r0, r3
 8010dc4:	d306      	bcc.n	8010dd4 <CircularQueue_Remove+0x122>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	68d8      	ldr	r0, [r3, #12]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	1ac3      	subs	r3, r0, r3
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	e002      	b.n	8010dda <CircularQueue_Remove+0x128>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	3301      	adds	r3, #1
 8010dda:	440b      	add	r3, r1
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	021b      	lsls	r3, r3, #8
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	4413      	add	r3, r2
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	e001      	b.n	8010dee <CircularQueue_Remove+0x13c>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	891b      	ldrh	r3, [r3, #8]
 8010dee:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	68d9      	ldr	r1, [r3, #12]
 8010df8:	7a7b      	ldrb	r3, [r7, #9]
 8010dfa:	4419      	add	r1, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	4299      	cmp	r1, r3
 8010e02:	d307      	bcc.n	8010e14 <CircularQueue_Remove+0x162>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	68d9      	ldr	r1, [r3, #12]
 8010e08:	7a7b      	ldrb	r3, [r7, #9]
 8010e0a:	4419      	add	r1, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	1acb      	subs	r3, r1, r3
 8010e12:	e003      	b.n	8010e1c <CircularQueue_Remove+0x16a>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	68d9      	ldr	r1, [r3, #12]
 8010e18:	7a7b      	ldrb	r3, [r7, #9]
 8010e1a:	440b      	add	r3, r1
 8010e1c:	4413      	add	r3, r2
 8010e1e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	695b      	ldr	r3, [r3, #20]
 8010e24:	8979      	ldrh	r1, [r7, #10]
 8010e26:	7a7a      	ldrb	r2, [r7, #9]
 8010e28:	440a      	add	r2, r1
 8010e2a:	1a9a      	subs	r2, r3, r2
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	695b      	ldr	r3, [r3, #20]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d01b      	beq.n	8010e70 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	68da      	ldr	r2, [r3, #12]
 8010e3c:	897b      	ldrh	r3, [r7, #10]
 8010e3e:	441a      	add	r2, r3
 8010e40:	7a7b      	ldrb	r3, [r7, #9]
 8010e42:	441a      	add	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d309      	bcc.n	8010e60 <CircularQueue_Remove+0x1ae>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	68da      	ldr	r2, [r3, #12]
 8010e50:	897b      	ldrh	r3, [r7, #10]
 8010e52:	441a      	add	r2, r3
 8010e54:	7a7b      	ldrb	r3, [r7, #9]
 8010e56:	441a      	add	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	e005      	b.n	8010e6c <CircularQueue_Remove+0x1ba>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	68da      	ldr	r2, [r3, #12]
 8010e64:	897b      	ldrh	r3, [r7, #10]
 8010e66:	441a      	add	r2, r3
 8010e68:	7a7b      	ldrb	r3, [r7, #9]
 8010e6a:	4413      	add	r3, r2
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	699b      	ldr	r3, [r3, #24]
 8010e74:	1e5a      	subs	r2, r3, #1
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	897a      	ldrh	r2, [r7, #10]
 8010e84:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8010e86:	68fb      	ldr	r3, [r7, #12]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3714      	adds	r7, #20
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b087      	sub	sp, #28
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	891b      	ldrh	r3, [r3, #8]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d101      	bne.n	8010eb2 <CircularQueue_Sense+0x1e>
 8010eae:	2302      	movs	r3, #2
 8010eb0:	e000      	b.n	8010eb4 <CircularQueue_Sense+0x20>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f000 8090 	beq.w	8010fe8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	891b      	ldrh	r3, [r3, #8]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d121      	bne.n	8010f1a <CircularQueue_Sense+0x86>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	4413      	add	r3, r2
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6819      	ldr	r1, [r3, #0]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	1c58      	adds	r0, r3, #1
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	4298      	cmp	r0, r3
 8010ef4:	d306      	bcc.n	8010f04 <CircularQueue_Sense+0x70>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	68d8      	ldr	r0, [r3, #12]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	1ac3      	subs	r3, r0, r3
 8010f00:	3301      	adds	r3, #1
 8010f02:	e002      	b.n	8010f0a <CircularQueue_Sense+0x76>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	3301      	adds	r3, #1
 8010f0a:	440b      	add	r3, r1
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	021b      	lsls	r3, r3, #8
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	4413      	add	r3, r2
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	e001      	b.n	8010f1e <CircularQueue_Sense+0x8a>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	891b      	ldrh	r3, [r3, #8]
 8010f1e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	7f1b      	ldrb	r3, [r3, #28]
 8010f24:	f003 0301 	and.w	r3, r3, #1
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d048      	beq.n	8010fbe <CircularQueue_Sense+0x12a>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	7f1b      	ldrb	r3, [r3, #28]
 8010f30:	f003 0302 	and.w	r3, r3, #2
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d142      	bne.n	8010fbe <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010f38:	8a7b      	ldrh	r3, [r7, #18]
 8010f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d103      	bne.n	8010f4a <CircularQueue_Sense+0xb6>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	891b      	ldrh	r3, [r3, #8]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d012      	beq.n	8010f70 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	68da      	ldr	r2, [r3, #12]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d933      	bls.n	8010fbe <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	891b      	ldrh	r3, [r3, #8]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d02f      	beq.n	8010fbe <CircularQueue_Sense+0x12a>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	685a      	ldr	r2, [r3, #4]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	1ad3      	subs	r3, r2, r3
 8010f68:	687a      	ldr	r2, [r7, #4]
 8010f6a:	8912      	ldrh	r2, [r2, #8]
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d226      	bcs.n	8010fbe <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8010f70:	2300      	movs	r3, #0
 8010f72:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	891b      	ldrh	r3, [r3, #8]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d11d      	bne.n	8010fb8 <CircularQueue_Sense+0x124>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681a      	ldr	r2, [r3, #0]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	4413      	add	r3, r2
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6819      	ldr	r1, [r3, #0]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	1c58      	adds	r0, r3, #1
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	4298      	cmp	r0, r3
 8010f96:	d305      	bcc.n	8010fa4 <CircularQueue_Sense+0x110>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	68f8      	ldr	r0, [r7, #12]
 8010f9e:	1ac3      	subs	r3, r0, r3
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	e001      	b.n	8010fa8 <CircularQueue_Sense+0x114>
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	440b      	add	r3, r1
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	021b      	lsls	r3, r3, #8
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	4413      	add	r3, r2
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	e001      	b.n	8010fbc <CircularQueue_Sense+0x128>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	891b      	ldrh	r3, [r3, #8]
 8010fbc:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	7af9      	ldrb	r1, [r7, #11]
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	4419      	add	r1, r3
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	4299      	cmp	r1, r3
 8010fce:	d306      	bcc.n	8010fde <CircularQueue_Sense+0x14a>
 8010fd0:	7af9      	ldrb	r1, [r7, #11]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	4419      	add	r1, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	1acb      	subs	r3, r1, r3
 8010fdc:	e002      	b.n	8010fe4 <CircularQueue_Sense+0x150>
 8010fde:	7af9      	ldrb	r1, [r7, #11]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	440b      	add	r3, r1
 8010fe4:	4413      	add	r3, r2
 8010fe6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d002      	beq.n	8010ff4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	8a7a      	ldrh	r2, [r7, #18]
 8010ff2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8010ff4:	697b      	ldr	r3, [r7, #20]
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	371c      	adds	r7, #28
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr

08011002 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8011002:	b580      	push	{r7, lr}
 8011004:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8011006:	f7f9 fb99 	bl	800a73c <HW_IPCC_Enable>

  return;
 801100a:	bf00      	nop
}
 801100c:	bd80      	pop	{r7, pc}
	...

08011010 <TL_Init>:


void TL_Init( void )
{
 8011010:	b580      	push	{r7, lr}
 8011012:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8011014:	4b10      	ldr	r3, [pc, #64]	; (8011058 <TL_Init+0x48>)
 8011016:	4a11      	ldr	r2, [pc, #68]	; (801105c <TL_Init+0x4c>)
 8011018:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801101a:	4b0f      	ldr	r3, [pc, #60]	; (8011058 <TL_Init+0x48>)
 801101c:	4a10      	ldr	r2, [pc, #64]	; (8011060 <TL_Init+0x50>)
 801101e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8011020:	4b0d      	ldr	r3, [pc, #52]	; (8011058 <TL_Init+0x48>)
 8011022:	4a10      	ldr	r2, [pc, #64]	; (8011064 <TL_Init+0x54>)
 8011024:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8011026:	4b0c      	ldr	r3, [pc, #48]	; (8011058 <TL_Init+0x48>)
 8011028:	4a0f      	ldr	r2, [pc, #60]	; (8011068 <TL_Init+0x58>)
 801102a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801102c:	4b0a      	ldr	r3, [pc, #40]	; (8011058 <TL_Init+0x48>)
 801102e:	4a0f      	ldr	r2, [pc, #60]	; (801106c <TL_Init+0x5c>)
 8011030:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8011032:	4b09      	ldr	r3, [pc, #36]	; (8011058 <TL_Init+0x48>)
 8011034:	4a0e      	ldr	r2, [pc, #56]	; (8011070 <TL_Init+0x60>)
 8011036:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8011038:	4b07      	ldr	r3, [pc, #28]	; (8011058 <TL_Init+0x48>)
 801103a:	4a0e      	ldr	r2, [pc, #56]	; (8011074 <TL_Init+0x64>)
 801103c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801103e:	4b06      	ldr	r3, [pc, #24]	; (8011058 <TL_Init+0x48>)
 8011040:	4a0d      	ldr	r2, [pc, #52]	; (8011078 <TL_Init+0x68>)
 8011042:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8011044:	4b04      	ldr	r3, [pc, #16]	; (8011058 <TL_Init+0x48>)
 8011046:	4a0d      	ldr	r2, [pc, #52]	; (801107c <TL_Init+0x6c>)
 8011048:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801104a:	4b03      	ldr	r3, [pc, #12]	; (8011058 <TL_Init+0x48>)
 801104c:	4a0c      	ldr	r2, [pc, #48]	; (8011080 <TL_Init+0x70>)
 801104e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8011050:	f7f9 fb88 	bl	800a764 <HW_IPCC_Init>

  return;
 8011054:	bf00      	nop
}
 8011056:	bd80      	pop	{r7, pc}
 8011058:	20030000 	.word	0x20030000
 801105c:	20030034 	.word	0x20030034
 8011060:	20030054 	.word	0x20030054
 8011064:	20030064 	.word	0x20030064
 8011068:	20030074 	.word	0x20030074
 801106c:	2003007c 	.word	0x2003007c
 8011070:	20030084 	.word	0x20030084
 8011074:	2003008c 	.word	0x2003008c
 8011078:	200300a8 	.word	0x200300a8
 801107c:	200300ac 	.word	0x200300ac
 8011080:	200300b8 	.word	0x200300b8

08011084 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801108a:	e01c      	b.n	80110c6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801108c:	1d3b      	adds	r3, r7, #4
 801108e:	4619      	mov	r1, r3
 8011090:	4812      	ldr	r0, [pc, #72]	; (80110dc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011092:	f7ff fb96 	bl	80107c2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	7a5b      	ldrb	r3, [r3, #9]
 801109a:	2b0f      	cmp	r3, #15
 801109c:	d003      	beq.n	80110a6 <HW_IPCC_BLE_RxEvtNot+0x22>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	7a5b      	ldrb	r3, [r3, #9]
 80110a2:	2b0e      	cmp	r3, #14
 80110a4:	d105      	bne.n	80110b2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	4619      	mov	r1, r3
 80110aa:	2002      	movs	r0, #2
 80110ac:	f000 f9ac 	bl	8011408 <OutputDbgTrace>
 80110b0:	e004      	b.n	80110bc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	4619      	mov	r1, r3
 80110b6:	2003      	movs	r0, #3
 80110b8:	f000 f9a6 	bl	8011408 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80110bc:	4b08      	ldr	r3, [pc, #32]	; (80110e0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	4610      	mov	r0, r2
 80110c4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80110c6:	4805      	ldr	r0, [pc, #20]	; (80110dc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80110c8:	f7ff faec 	bl	80106a4 <LST_is_empty>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d0dc      	beq.n	801108c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80110d2:	bf00      	nop
}
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	200300d4 	.word	0x200300d4
 80110e0:	20001790 	.word	0x20001790

080110e4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80110e8:	4b02      	ldr	r3, [pc, #8]	; (80110f4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4798      	blx	r3

  return;
 80110ee:	bf00      	nop
}
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20001794 	.word	0x20001794

080110f8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8011104:	480d      	ldr	r0, [pc, #52]	; (801113c <TL_SYS_Init+0x44>)
 8011106:	f7ff fabd 	bl	8010684 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801110a:	4b0d      	ldr	r3, [pc, #52]	; (8011140 <TL_SYS_Init+0x48>)
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	689a      	ldr	r2, [r3, #8]
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	4a08      	ldr	r2, [pc, #32]	; (801113c <TL_SYS_Init+0x44>)
 801111c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801111e:	f7f9 fb4f 	bl	800a7c0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	4a07      	ldr	r2, [pc, #28]	; (8011144 <TL_SYS_Init+0x4c>)
 8011128:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	4a06      	ldr	r2, [pc, #24]	; (8011148 <TL_SYS_Init+0x50>)
 8011130:	6013      	str	r3, [r2, #0]

  return 0;
 8011132:	2300      	movs	r3, #0
}
 8011134:	4618      	mov	r0, r3
 8011136:	3710      	adds	r7, #16
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	200300dc 	.word	0x200300dc
 8011140:	20030000 	.word	0x20030000
 8011144:	20001798 	.word	0x20001798
 8011148:	2000179c 	.word	0x2000179c

0801114c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	460b      	mov	r3, r1
 8011156:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8011158:	4b09      	ldr	r3, [pc, #36]	; (8011180 <TL_SYS_SendCmd+0x34>)
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2210      	movs	r2, #16
 8011160:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8011162:	4b07      	ldr	r3, [pc, #28]	; (8011180 <TL_SYS_SendCmd+0x34>)
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4619      	mov	r1, r3
 801116a:	2004      	movs	r0, #4
 801116c:	f000 f94c 	bl	8011408 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8011170:	f7f9 fb30 	bl	800a7d4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8011174:	2300      	movs	r3, #0
}
 8011176:	4618      	mov	r0, r3
 8011178:	3708      	adds	r7, #8
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}
 801117e:	bf00      	nop
 8011180:	20030000 	.word	0x20030000

08011184 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011188:	4b07      	ldr	r3, [pc, #28]	; (80111a8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	4619      	mov	r1, r3
 8011190:	2005      	movs	r0, #5
 8011192:	f000 f939 	bl	8011408 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011196:	4b05      	ldr	r3, [pc, #20]	; (80111ac <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a03      	ldr	r2, [pc, #12]	; (80111a8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801119c:	68d2      	ldr	r2, [r2, #12]
 801119e:	6812      	ldr	r2, [r2, #0]
 80111a0:	4610      	mov	r0, r2
 80111a2:	4798      	blx	r3

  return;
 80111a4:	bf00      	nop
}
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	20030000 	.word	0x20030000
 80111ac:	20001798 	.word	0x20001798

080111b0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80111b6:	e00e      	b.n	80111d6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80111b8:	1d3b      	adds	r3, r7, #4
 80111ba:	4619      	mov	r1, r3
 80111bc:	480b      	ldr	r0, [pc, #44]	; (80111ec <HW_IPCC_SYS_EvtNot+0x3c>)
 80111be:	f7ff fb00 	bl	80107c2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4619      	mov	r1, r3
 80111c6:	2006      	movs	r0, #6
 80111c8:	f000 f91e 	bl	8011408 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80111cc:	4b08      	ldr	r3, [pc, #32]	; (80111f0 <HW_IPCC_SYS_EvtNot+0x40>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	4610      	mov	r0, r2
 80111d4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80111d6:	4805      	ldr	r0, [pc, #20]	; (80111ec <HW_IPCC_SYS_EvtNot+0x3c>)
 80111d8:	f7ff fa64 	bl	80106a4 <LST_is_empty>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d0ea      	beq.n	80111b8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80111e2:	bf00      	nop
}
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	200300dc 	.word	0x200300dc
 80111f0:	2000179c 	.word	0x2000179c

080111f4 <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b084      	sub	sp, #16
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 80111fc:	4b0a      	ldr	r3, [pc, #40]	; (8011228 <TL_ZIGBEE_Init+0x34>)
 80111fe:	69db      	ldr	r3, [r3, #28]
 8011200:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	685a      	ldr	r2, [r3, #4]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	689a      	ldr	r2, [r3, #8]
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 801121a:	f7f9 fb01 	bl	800a820 <HW_IPCC_ZIGBEE_Init>

  return;
 801121e:	bf00      	nop
}
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	20030000 	.word	0x20030000

0801122c <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8011230:	4b04      	ldr	r3, [pc, #16]	; (8011244 <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 8011232:	69db      	ldr	r3, [r3, #28]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	2208      	movs	r2, #8
 8011238:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 801123a:	f7f9 faff 	bl	800a83c <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 801123e:	bf00      	nop
}
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	20030000 	.word	0x20030000

08011248 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 801124c:	4b03      	ldr	r3, [pc, #12]	; (801125c <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 801124e:	69db      	ldr	r3, [r3, #28]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	4618      	mov	r0, r3
 8011254:	f7f8 fa58 	bl	8009708 <TL_ZIGBEE_CmdEvtReceived>

  return;
 8011258:	bf00      	nop
}
 801125a:	bd80      	pop	{r7, pc}
 801125c:	20030000 	.word	0x20030000

08011260 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8011264:	4b03      	ldr	r3, [pc, #12]	; (8011274 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8011266:	69db      	ldr	r3, [r3, #28]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	4618      	mov	r0, r3
 801126c:	f7f8 fa56 	bl	800971c <TL_ZIGBEE_NotReceived>

  return;
 8011270:	bf00      	nop
}
 8011272:	bd80      	pop	{r7, pc}
 8011274:	20030000 	.word	0x20030000

08011278 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 8011278:	b580      	push	{r7, lr}
 801127a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 801127c:	4b04      	ldr	r3, [pc, #16]	; (8011290 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 801127e:	69db      	ldr	r3, [r3, #28]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	220d      	movs	r2, #13
 8011284:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 8011286:	f7f9 fae7 	bl	800a858 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 801128a:	bf00      	nop
}
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	20030000 	.word	0x20030000

08011294 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 8011294:	b580      	push	{r7, lr}
 8011296:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 8011298:	4b03      	ldr	r3, [pc, #12]	; (80112a8 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 801129a:	69db      	ldr	r3, [r3, #28]
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	4618      	mov	r0, r3
 80112a0:	f7f8 fa72 	bl	8009788 <TL_ZIGBEE_M0RequestReceived>

  return;
 80112a4:	bf00      	nop
}
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	20030000 	.word	0x20030000

080112ac <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80112b0:	4b04      	ldr	r3, [pc, #16]	; (80112c4 <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 80112b2:	69db      	ldr	r3, [r3, #28]
 80112b4:	689b      	ldr	r3, [r3, #8]
 80112b6:	220d      	movs	r2, #13
 80112b8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 80112ba:	f7f9 faff 	bl	800a8bc <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 80112be:	bf00      	nop
}
 80112c0:	bd80      	pop	{r7, pc}
 80112c2:	bf00      	nop
 80112c4:	20030000 	.word	0x20030000

080112c8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80112d0:	4817      	ldr	r0, [pc, #92]	; (8011330 <TL_MM_Init+0x68>)
 80112d2:	f7ff f9d7 	bl	8010684 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80112d6:	4817      	ldr	r0, [pc, #92]	; (8011334 <TL_MM_Init+0x6c>)
 80112d8:	f7ff f9d4 	bl	8010684 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80112dc:	4b16      	ldr	r3, [pc, #88]	; (8011338 <TL_MM_Init+0x70>)
 80112de:	691b      	ldr	r3, [r3, #16]
 80112e0:	4a16      	ldr	r2, [pc, #88]	; (801133c <TL_MM_Init+0x74>)
 80112e2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80112e4:	4b15      	ldr	r3, [pc, #84]	; (801133c <TL_MM_Init+0x74>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	687a      	ldr	r2, [r7, #4]
 80112ea:	6892      	ldr	r2, [r2, #8]
 80112ec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80112ee:	4b13      	ldr	r3, [pc, #76]	; (801133c <TL_MM_Init+0x74>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	687a      	ldr	r2, [r7, #4]
 80112f4:	68d2      	ldr	r2, [r2, #12]
 80112f6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80112f8:	4b10      	ldr	r3, [pc, #64]	; (801133c <TL_MM_Init+0x74>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4a0c      	ldr	r2, [pc, #48]	; (8011330 <TL_MM_Init+0x68>)
 80112fe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8011300:	4b0e      	ldr	r3, [pc, #56]	; (801133c <TL_MM_Init+0x74>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	6812      	ldr	r2, [r2, #0]
 8011308:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801130a:	4b0c      	ldr	r3, [pc, #48]	; (801133c <TL_MM_Init+0x74>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	6852      	ldr	r2, [r2, #4]
 8011312:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8011314:	4b09      	ldr	r3, [pc, #36]	; (801133c <TL_MM_Init+0x74>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	687a      	ldr	r2, [r7, #4]
 801131a:	6912      	ldr	r2, [r2, #16]
 801131c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801131e:	4b07      	ldr	r3, [pc, #28]	; (801133c <TL_MM_Init+0x74>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	6952      	ldr	r2, [r2, #20]
 8011326:	619a      	str	r2, [r3, #24]

  return;
 8011328:	bf00      	nop
}
 801132a:	3708      	adds	r7, #8
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}
 8011330:	200300c4 	.word	0x200300c4
 8011334:	20001788 	.word	0x20001788
 8011338:	20030000 	.word	0x20030000
 801133c:	200017a0 	.word	0x200017a0

08011340 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8011348:	6879      	ldr	r1, [r7, #4]
 801134a:	4807      	ldr	r0, [pc, #28]	; (8011368 <TL_MM_EvtDone+0x28>)
 801134c:	f7ff f9f2 	bl	8010734 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8011350:	6879      	ldr	r1, [r7, #4]
 8011352:	2000      	movs	r0, #0
 8011354:	f000 f858 	bl	8011408 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8011358:	4804      	ldr	r0, [pc, #16]	; (801136c <TL_MM_EvtDone+0x2c>)
 801135a:	f7f9 fabd 	bl	800a8d8 <HW_IPCC_MM_SendFreeBuf>

  return;
 801135e:	bf00      	nop
}
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	20001788 	.word	0x20001788
 801136c:	08011371 	.word	0x08011371

08011370 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011376:	e00c      	b.n	8011392 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011378:	1d3b      	adds	r3, r7, #4
 801137a:	4619      	mov	r1, r3
 801137c:	480a      	ldr	r0, [pc, #40]	; (80113a8 <SendFreeBuf+0x38>)
 801137e:	f7ff fa20 	bl	80107c2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8011382:	4b0a      	ldr	r3, [pc, #40]	; (80113ac <SendFreeBuf+0x3c>)
 8011384:	691b      	ldr	r3, [r3, #16]
 8011386:	691b      	ldr	r3, [r3, #16]
 8011388:	687a      	ldr	r2, [r7, #4]
 801138a:	4611      	mov	r1, r2
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff f9d1 	bl	8010734 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011392:	4805      	ldr	r0, [pc, #20]	; (80113a8 <SendFreeBuf+0x38>)
 8011394:	f7ff f986 	bl	80106a4 <LST_is_empty>
 8011398:	4603      	mov	r3, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	d0ec      	beq.n	8011378 <SendFreeBuf+0x8>
  }

  return;
 801139e:	bf00      	nop
}
 80113a0:	3708      	adds	r7, #8
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	20001788 	.word	0x20001788
 80113ac:	20030000 	.word	0x20030000

080113b0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80113b4:	4805      	ldr	r0, [pc, #20]	; (80113cc <TL_TRACES_Init+0x1c>)
 80113b6:	f7ff f965 	bl	8010684 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80113ba:	4b05      	ldr	r3, [pc, #20]	; (80113d0 <TL_TRACES_Init+0x20>)
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	4a03      	ldr	r2, [pc, #12]	; (80113cc <TL_TRACES_Init+0x1c>)
 80113c0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80113c2:	f7f9 fabf 	bl	800a944 <HW_IPCC_TRACES_Init>

  return;
 80113c6:	bf00      	nop
}
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	200300cc 	.word	0x200300cc
 80113d0:	20030000 	.word	0x20030000

080113d4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80113da:	e008      	b.n	80113ee <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80113dc:	1d3b      	adds	r3, r7, #4
 80113de:	4619      	mov	r1, r3
 80113e0:	4808      	ldr	r0, [pc, #32]	; (8011404 <HW_IPCC_TRACES_EvtNot+0x30>)
 80113e2:	f7ff f9ee 	bl	80107c2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7f5 fece 	bl	800718a <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80113ee:	4805      	ldr	r0, [pc, #20]	; (8011404 <HW_IPCC_TRACES_EvtNot+0x30>)
 80113f0:	f7ff f958 	bl	80106a4 <LST_is_empty>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d0f0      	beq.n	80113dc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80113fa:	bf00      	nop
}
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	200300cc 	.word	0x200300cc

08011408 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	4603      	mov	r3, r0
 8011410:	6039      	str	r1, [r7, #0]
 8011412:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8011414:	79fb      	ldrb	r3, [r7, #7]
 8011416:	2b06      	cmp	r3, #6
 8011418:	d845      	bhi.n	80114a6 <OutputDbgTrace+0x9e>
 801141a:	a201      	add	r2, pc, #4	; (adr r2, 8011420 <OutputDbgTrace+0x18>)
 801141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011420:	0801143d 	.word	0x0801143d
 8011424:	08011461 	.word	0x08011461
 8011428:	08011467 	.word	0x08011467
 801142c:	0801147b 	.word	0x0801147b
 8011430:	08011487 	.word	0x08011487
 8011434:	0801148d 	.word	0x0801148d
 8011438:	0801149b 	.word	0x0801149b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	7a5b      	ldrb	r3, [r3, #9]
 8011444:	2bff      	cmp	r3, #255	; 0xff
 8011446:	d005      	beq.n	8011454 <OutputDbgTrace+0x4c>
 8011448:	2bff      	cmp	r3, #255	; 0xff
 801144a:	dc05      	bgt.n	8011458 <OutputDbgTrace+0x50>
 801144c:	2b0e      	cmp	r3, #14
 801144e:	d005      	beq.n	801145c <OutputDbgTrace+0x54>
 8011450:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8011452:	e001      	b.n	8011458 <OutputDbgTrace+0x50>
          break;
 8011454:	bf00      	nop
 8011456:	e027      	b.n	80114a8 <OutputDbgTrace+0xa0>
          break;
 8011458:	bf00      	nop
 801145a:	e025      	b.n	80114a8 <OutputDbgTrace+0xa0>
          break;
 801145c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801145e:	e023      	b.n	80114a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011464:	e020      	b.n	80114a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	7a5b      	ldrb	r3, [r3, #9]
 801146e:	2b0e      	cmp	r3, #14
 8011470:	d001      	beq.n	8011476 <OutputDbgTrace+0x6e>
 8011472:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011474:	e000      	b.n	8011478 <OutputDbgTrace+0x70>
          break;
 8011476:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011478:	e016      	b.n	80114a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	7a5b      	ldrb	r3, [r3, #9]
 8011482:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011484:	e010      	b.n	80114a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801148a:	e00d      	b.n	80114a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	7a5b      	ldrb	r3, [r3, #9]
 8011494:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011496:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011498:	e006      	b.n	80114a8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	7a5b      	ldrb	r3, [r3, #9]
 80114a2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80114a4:	e000      	b.n	80114a8 <OutputDbgTrace+0xa0>

    default:
      break;
 80114a6:	bf00      	nop
  }

  return;
 80114a8:	bf00      	nop
}
 80114aa:	3714      	adds	r7, #20
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 80114b4:	b480      	push	{r7}
 80114b6:	b087      	sub	sp, #28
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 80114c0:	2300      	movs	r3, #0
 80114c2:	617b      	str	r3, [r7, #20]
 80114c4:	e00a      	b.n	80114dc <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 80114c6:	68ba      	ldr	r2, [r7, #8]
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	441a      	add	r2, r3
 80114cc:	68f9      	ldr	r1, [r7, #12]
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	440b      	add	r3, r1
 80114d2:	7812      	ldrb	r2, [r2, #0]
 80114d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	3301      	adds	r3, #1
 80114da:	617b      	str	r3, [r7, #20]
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d3f0      	bcc.n	80114c6 <zb_ipc_m4_memcpy2+0x12>
    }
}
 80114e4:	bf00      	nop
 80114e6:	bf00      	nop
 80114e8:	371c      	adds	r7, #28
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr

080114f2 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b084      	sub	sp, #16
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
 80114fa:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 80114fc:	200c      	movs	r0, #12
 80114fe:	f003 f86b 	bl	80145d8 <malloc>
 8011502:	4603      	mov	r3, r0
 8011504:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d00a      	beq.n	8011522 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 801150c:	220c      	movs	r2, #12
 801150e:	2100      	movs	r1, #0
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f003 fad3 	bl	8014abc <memset>
        info->callback = callback;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	687a      	ldr	r2, [r7, #4]
 801151a:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	683a      	ldr	r2, [r7, #0]
 8011520:	605a      	str	r2, [r3, #4]
    }
    return info;
 8011522:	68fb      	ldr	r3, [r7, #12]
}
 8011524:	4618      	mov	r0, r3
 8011526:	3710      	adds	r7, #16
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
    free(info);
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f003 f857 	bl	80145e8 <free>
}
 801153a:	bf00      	nop
 801153c:	3708      	adds	r7, #8
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
	...

08011544 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801154a:	f7f8 f895 	bl	8009678 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 801154e:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	2b01      	cmp	r3, #1
 8011556:	d006      	beq.n	8011566 <zb_ipc_m4_get_retval+0x22>
 8011558:	4b09      	ldr	r3, [pc, #36]	; (8011580 <zb_ipc_m4_get_retval+0x3c>)
 801155a:	4a0a      	ldr	r2, [pc, #40]	; (8011584 <zb_ipc_m4_get_retval+0x40>)
 801155c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8011560:	4809      	ldr	r0, [pc, #36]	; (8011588 <zb_ipc_m4_get_retval+0x44>)
 8011562:	f003 f81b 	bl	801459c <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f103 0108 	add.w	r1, r3, #8
 801156c:	463b      	mov	r3, r7
 801156e:	2204      	movs	r2, #4
 8011570:	4618      	mov	r0, r3
 8011572:	f7ff ff9f 	bl	80114b4 <zb_ipc_m4_memcpy2>
    return retval;
 8011576:	683b      	ldr	r3, [r7, #0]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	08016ba4 	.word	0x08016ba4
 8011584:	080170f4 	.word	0x080170f4
 8011588:	08016bb8 	.word	0x08016bb8

0801158c <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b086      	sub	sp, #24
 8011590:	af00      	add	r7, sp, #0
 8011592:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
 8011598:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 801159a:	4b24      	ldr	r3, [pc, #144]	; (801162c <ZbInit+0xa0>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d001      	beq.n	80115a6 <ZbInit+0x1a>
        return NULL;
 80115a2:	2300      	movs	r3, #0
 80115a4:	e03d      	b.n	8011622 <ZbInit+0x96>
    }
    Pre_ZigbeeCmdProcessing();
 80115a6:	f7f8 f8c9 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80115aa:	f7f8 f859 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80115ae:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	2200      	movs	r2, #0
 80115b4:	f042 020a 	orr.w	r2, r2, #10
 80115b8:	701a      	strb	r2, [r3, #0]
 80115ba:	2200      	movs	r2, #0
 80115bc:	705a      	strb	r2, [r3, #1]
 80115be:	2200      	movs	r2, #0
 80115c0:	709a      	strb	r2, [r3, #2]
 80115c2:	2200      	movs	r2, #0
 80115c4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	2200      	movs	r2, #0
 80115ca:	f042 0204 	orr.w	r2, r2, #4
 80115ce:	711a      	strb	r2, [r3, #4]
 80115d0:	2200      	movs	r2, #0
 80115d2:	715a      	strb	r2, [r3, #5]
 80115d4:	2200      	movs	r2, #0
 80115d6:	719a      	strb	r2, [r3, #6]
 80115d8:	2200      	movs	r2, #0
 80115da:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	3308      	adds	r3, #8
 80115e0:	f107 0108 	add.w	r1, r7, #8
 80115e4:	2208      	movs	r2, #8
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff ff64 	bl	80114b4 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 80115f8:	f7f8 f862 	bl	80096c0 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 80115fc:	f7ff ffa2 	bl	8011544 <zb_ipc_m4_get_retval>
 8011600:	4603      	mov	r3, r0
 8011602:	461a      	mov	r2, r3
 8011604:	4b09      	ldr	r3, [pc, #36]	; (801162c <ZbInit+0xa0>)
 8011606:	601a      	str	r2, [r3, #0]
    if (setLogging != NULL) {
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d007      	beq.n	801161e <ZbInit+0x92>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	4a06      	ldr	r2, [pc, #24]	; (801162c <ZbInit+0xa0>)
 8011614:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a04      	ldr	r2, [pc, #16]	; (801162c <ZbInit+0xa0>)
 801161c:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 801161e:	4b03      	ldr	r3, [pc, #12]	; (801162c <ZbInit+0xa0>)
 8011620:	681b      	ldr	r3, [r3, #0]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3718      	adds	r7, #24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	200017b8 	.word	0x200017b8

08011630 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801163c:	f7f8 f87e 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011640:	f7f8 f80e 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011644:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	2200      	movs	r2, #0
 801164a:	f042 0213 	orr.w	r2, r2, #19
 801164e:	701a      	strb	r2, [r3, #0]
 8011650:	2200      	movs	r2, #0
 8011652:	705a      	strb	r2, [r3, #1]
 8011654:	2200      	movs	r2, #0
 8011656:	709a      	strb	r2, [r3, #2]
 8011658:	2200      	movs	r2, #0
 801165a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	2200      	movs	r2, #0
 8011660:	f042 0202 	orr.w	r2, r2, #2
 8011664:	711a      	strb	r2, [r3, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	715a      	strb	r2, [r3, #5]
 801166a:	2200      	movs	r2, #0
 801166c:	719a      	strb	r2, [r3, #6]
 801166e:	2200      	movs	r2, #0
 8011670:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 8011678:	4b0b      	ldr	r3, [pc, #44]	; (80116a8 <ZbSetLogging+0x78>)
 801167a:	7b1b      	ldrb	r3, [r3, #12]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d102      	bne.n	8011686 <ZbSetLogging+0x56>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <ZbSetLogging+0x5a>
 8011686:	2201      	movs	r2, #1
 8011688:	e000      	b.n	801168c <ZbSetLogging+0x5c>
 801168a:	2200      	movs	r2, #0
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011690:	f7f8 f816 	bl	80096c0 <ZIGBEE_CmdTransfer>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 8011694:	4a04      	ldr	r2, [pc, #16]	; (80116a8 <ZbSetLogging+0x78>)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 801169a:	4a03      	ldr	r2, [pc, #12]	; (80116a8 <ZbSetLogging+0x78>)
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	6093      	str	r3, [r2, #8]
}
 80116a0:	bf00      	nop
 80116a2:	3718      	adds	r7, #24
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	200017b8 	.word	0x200017b8

080116ac <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b086      	sub	sp, #24
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 80116b4:	f04f 0200 	mov.w	r2, #0
 80116b8:	f04f 0300 	mov.w	r3, #0
 80116bc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 80116c0:	f7f8 f83c 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80116c4:	f7f7 ffcc 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80116c8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f042 020e 	orr.w	r2, r2, #14
 80116d2:	701a      	strb	r2, [r3, #0]
 80116d4:	2200      	movs	r2, #0
 80116d6:	705a      	strb	r2, [r3, #1]
 80116d8:	2200      	movs	r2, #0
 80116da:	709a      	strb	r2, [r3, #2]
 80116dc:	2200      	movs	r2, #0
 80116de:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	2200      	movs	r2, #0
 80116e4:	711a      	strb	r2, [r3, #4]
 80116e6:	2200      	movs	r2, #0
 80116e8:	715a      	strb	r2, [r3, #5]
 80116ea:	2200      	movs	r2, #0
 80116ec:	719a      	strb	r2, [r3, #6]
 80116ee:	2200      	movs	r2, #0
 80116f0:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 80116f2:	f7f7 ffe5 	bl	80096c0 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 80116f6:	f7f7 ffbf 	bl	8009678 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 80116fa:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	2b02      	cmp	r3, #2
 8011702:	d006      	beq.n	8011712 <ZbExtendedAddress+0x66>
 8011704:	4b0b      	ldr	r3, [pc, #44]	; (8011734 <ZbExtendedAddress+0x88>)
 8011706:	4a0c      	ldr	r2, [pc, #48]	; (8011738 <ZbExtendedAddress+0x8c>)
 8011708:	f44f 71df 	mov.w	r1, #446	; 0x1be
 801170c:	480b      	ldr	r0, [pc, #44]	; (801173c <ZbExtendedAddress+0x90>)
 801170e:	f002 ff45 	bl	801459c <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	f103 0108 	add.w	r1, r3, #8
 8011718:	f107 0308 	add.w	r3, r7, #8
 801171c:	2208      	movs	r2, #8
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff fec8 	bl	80114b4 <zb_ipc_m4_memcpy2>
    return ext_addr;
 8011724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8011728:	4610      	mov	r0, r2
 801172a:	4619      	mov	r1, r3
 801172c:	3718      	adds	r7, #24
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	08016c38 	.word	0x08016c38
 8011738:	0801710c 	.word	0x0801710c
 801173c:	08016bb8 	.word	0x08016bb8

08011740 <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 8011748:	2300      	movs	r3, #0
 801174a:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 801174c:	f107 020e 	add.w	r2, r7, #14
 8011750:	2302      	movs	r3, #2
 8011752:	2196      	movs	r1, #150	; 0x96
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 fc5b 	bl	8012010 <ZbNwkGet>
    return nwkAddr;
 801175a:	89fb      	ldrh	r3, [r7, #14]
}
 801175c:	4618      	mov	r0, r3
 801175e:	3710      	adds	r7, #16
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <ZbStartupConfigGetProDefaults>:
    ZIGBEE_CmdTransfer();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801176c:	f7f7 ffe6 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011770:	f7f7 ff76 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011774:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2200      	movs	r2, #0
 801177a:	f042 021b 	orr.w	r2, r2, #27
 801177e:	701a      	strb	r2, [r3, #0]
 8011780:	2200      	movs	r2, #0
 8011782:	705a      	strb	r2, [r3, #1]
 8011784:	2200      	movs	r2, #0
 8011786:	709a      	strb	r2, [r3, #2]
 8011788:	2200      	movs	r2, #0
 801178a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2200      	movs	r2, #0
 8011790:	f042 0201 	orr.w	r2, r2, #1
 8011794:	711a      	strb	r2, [r3, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	715a      	strb	r2, [r3, #5]
 801179a:	2200      	movs	r2, #0
 801179c:	719a      	strb	r2, [r3, #6]
 801179e:	2200      	movs	r2, #0
 80117a0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80117a8:	f7f7 ff8a 	bl	80096c0 <ZIGBEE_CmdTransfer>
}
 80117ac:	bf00      	nop
 80117ae:	3710      	adds	r7, #16
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b086      	sub	sp, #24
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	607a      	str	r2, [r7, #4]
 80117c0:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 80117c2:	6839      	ldr	r1, [r7, #0]
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7ff fe94 	bl	80114f2 <zb_ipc_m4_cb_info_alloc>
 80117ca:	6178      	str	r0, [r7, #20]
    if (info == NULL) {
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d101      	bne.n	80117d6 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 80117d2:	2370      	movs	r3, #112	; 0x70
 80117d4:	e02d      	b.n	8011832 <ZbStartup+0x7e>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	461a      	mov	r2, r3
 80117e0:	4b16      	ldr	r3, [pc, #88]	; (801183c <ZbStartup+0x88>)
 80117e2:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 80117e4:	f7f7 ffaa 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80117e8:	f7f7 ff3a 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80117ec:	6138      	str	r0, [r7, #16]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	2200      	movs	r2, #0
 80117f2:	f042 021c 	orr.w	r2, r2, #28
 80117f6:	701a      	strb	r2, [r3, #0]
 80117f8:	2200      	movs	r2, #0
 80117fa:	705a      	strb	r2, [r3, #1]
 80117fc:	2200      	movs	r2, #0
 80117fe:	709a      	strb	r2, [r3, #2]
 8011800:	2200      	movs	r2, #0
 8011802:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	2200      	movs	r2, #0
 8011808:	f042 0202 	orr.w	r2, r2, #2
 801180c:	711a      	strb	r2, [r3, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	715a      	strb	r2, [r3, #5]
 8011812:	2200      	movs	r2, #0
 8011814:	719a      	strb	r2, [r3, #6]
 8011816:	2200      	movs	r2, #0
 8011818:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801181a:	68ba      	ldr	r2, [r7, #8]
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8011820:	697a      	ldr	r2, [r7, #20]
 8011822:	693b      	ldr	r3, [r7, #16]
 8011824:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011826:	f7f7 ff4b 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 801182a:	f7ff fe8b 	bl	8011544 <zb_ipc_m4_get_retval>
 801182e:	4603      	mov	r3, r0
 8011830:	b2db      	uxtb	r3, r3
    /* Followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 8011832:	4618      	mov	r0, r3
 8011834:	3718      	adds	r7, #24
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	200017a4 	.word	0x200017a4

08011840 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b08a      	sub	sp, #40	; 0x28
 8011844:	af00      	add	r7, sp, #0
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	607a      	str	r2, [r7, #4]
 801184a:	603b      	str	r3, [r7, #0]
 801184c:	460b      	mov	r3, r1
 801184e:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 8011850:	897b      	ldrh	r3, [r7, #10]
 8011852:	82bb      	strh	r3, [r7, #20]
    bdbGetReq.attr = attrPtr;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	61bb      	str	r3, [r7, #24]
    bdbGetReq.attrLength = attrSz;
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrIndex = attrIndex;
 801185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185e:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8011860:	f7f7 ff6c 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011864:	f7f7 fefc 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011868:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 801186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186c:	2200      	movs	r2, #0
 801186e:	701a      	strb	r2, [r3, #0]
 8011870:	2200      	movs	r2, #0
 8011872:	f042 0202 	orr.w	r2, r2, #2
 8011876:	705a      	strb	r2, [r3, #1]
 8011878:	2200      	movs	r2, #0
 801187a:	709a      	strb	r2, [r3, #2]
 801187c:	2200      	movs	r2, #0
 801187e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011882:	2200      	movs	r2, #0
 8011884:	f042 0202 	orr.w	r2, r2, #2
 8011888:	711a      	strb	r2, [r3, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	715a      	strb	r2, [r3, #5]
 801188e:	2200      	movs	r2, #0
 8011890:	719a      	strb	r2, [r3, #6]
 8011892:	2200      	movs	r2, #0
 8011894:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 8011896:	f107 0214 	add.w	r2, r7, #20
 801189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189c:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 801189e:	f107 0210 	add.w	r2, r7, #16
 80118a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a4:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80118a6:	f7f7 ff0b 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return bdbGetConf.status;
 80118aa:	7c3b      	ldrb	r3, [r7, #16]
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3728      	adds	r7, #40	; 0x28
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b088      	sub	sp, #32
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
 80118c0:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 80118c2:	6839      	ldr	r1, [r7, #0]
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7ff fe14 	bl	80114f2 <zb_ipc_m4_cb_info_alloc>
 80118ca:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d101      	bne.n	80118d6 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 80118d2:	2370      	movs	r3, #112	; 0x70
 80118d4:	e02f      	b.n	8011936 <ZbApsdeDataReqCallback+0x82>
    }
    Pre_ZigbeeCmdProcessing();
 80118d6:	f7f7 ff31 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80118da:	f7f7 fec1 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80118de:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	2200      	movs	r2, #0
 80118e4:	f042 0204 	orr.w	r2, r2, #4
 80118e8:	701a      	strb	r2, [r3, #0]
 80118ea:	2200      	movs	r2, #0
 80118ec:	f042 0202 	orr.w	r2, r2, #2
 80118f0:	705a      	strb	r2, [r3, #1]
 80118f2:	2200      	movs	r2, #0
 80118f4:	709a      	strb	r2, [r3, #2]
 80118f6:	2200      	movs	r2, #0
 80118f8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	2200      	movs	r2, #0
 80118fe:	f042 0202 	orr.w	r2, r2, #2
 8011902:	711a      	strb	r2, [r3, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	715a      	strb	r2, [r3, #5]
 8011908:	2200      	movs	r2, #0
 801190a:	719a      	strb	r2, [r3, #6]
 801190c:	2200      	movs	r2, #0
 801190e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8011910:	68ba      	ldr	r2, [r7, #8]
 8011912:	69bb      	ldr	r3, [r7, #24]
 8011914:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8011916:	69fa      	ldr	r2, [r7, #28]
 8011918:	69bb      	ldr	r3, [r7, #24]
 801191a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801191c:	f7f7 fed0 	bl	80096c0 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    retval = zb_ipc_m4_get_retval();
 8011920:	f7ff fe10 	bl	8011544 <zb_ipc_m4_get_retval>
 8011924:	6178      	str	r0, [r7, #20]
    if (retval != 0x00) {
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d002      	beq.n	8011932 <ZbApsdeDataReqCallback+0x7e>
        zb_ipc_m4_cb_info_free(info);
 801192c:	69f8      	ldr	r0, [r7, #28]
 801192e:	f7ff fdfd 	bl	801152c <zb_ipc_m4_cb_info_free>
    }
    return (enum ZbStatusCodeT)retval;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	b2db      	uxtb	r3, r3
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 8011936:	4618      	mov	r0, r3
 8011938:	3720      	adds	r7, #32
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}

0801193e <ZbApsEndpointProfile>:
    return zb_ipc_m4_get_retval() != 0U ? true : false;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 801193e:	b580      	push	{r7, lr}
 8011940:	b084      	sub	sp, #16
 8011942:	af00      	add	r7, sp, #0
 8011944:	6078      	str	r0, [r7, #4]
 8011946:	460b      	mov	r3, r1
 8011948:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801194a:	f7f7 fef7 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801194e:	f7f7 fe87 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011952:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	2200      	movs	r2, #0
 8011958:	f042 020d 	orr.w	r2, r2, #13
 801195c:	701a      	strb	r2, [r3, #0]
 801195e:	2200      	movs	r2, #0
 8011960:	f042 0202 	orr.w	r2, r2, #2
 8011964:	705a      	strb	r2, [r3, #1]
 8011966:	2200      	movs	r2, #0
 8011968:	709a      	strb	r2, [r3, #2]
 801196a:	2200      	movs	r2, #0
 801196c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	2200      	movs	r2, #0
 8011972:	f042 0201 	orr.w	r2, r2, #1
 8011976:	711a      	strb	r2, [r3, #4]
 8011978:	2200      	movs	r2, #0
 801197a:	715a      	strb	r2, [r3, #5]
 801197c:	2200      	movs	r2, #0
 801197e:	719a      	strb	r2, [r3, #6]
 8011980:	2200      	movs	r2, #0
 8011982:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8011984:	78fa      	ldrb	r2, [r7, #3]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801198a:	f7f7 fe99 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return (uint16_t)zb_ipc_m4_get_retval();
 801198e:	f7ff fdd9 	bl	8011544 <zb_ipc_m4_get_retval>
 8011992:	4603      	mov	r3, r0
 8011994:	b29b      	uxth	r3, r3
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 801199e:	b480      	push	{r7}
 80119a0:	b083      	sub	sp, #12
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d101      	bne.n	80119b2 <ZbApsAddrIsBcast+0x14>
        return true;
 80119ae:	2301      	movs	r3, #1
 80119b0:	e012      	b.n	80119d8 <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	2b02      	cmp	r3, #2
 80119b8:	d10d      	bne.n	80119d6 <ZbApsAddrIsBcast+0x38>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	88db      	ldrh	r3, [r3, #6]
 80119be:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80119c2:	4293      	cmp	r3, r2
 80119c4:	d907      	bls.n	80119d6 <ZbApsAddrIsBcast+0x38>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	88db      	ldrh	r3, [r3, #6]
 80119ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d001      	beq.n	80119d6 <ZbApsAddrIsBcast+0x38>
        return true;
 80119d2:	2301      	movs	r3, #1
 80119d4:	e000      	b.n	80119d8 <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	370c      	adds	r7, #12
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr

080119e4 <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 80119e4:	b5b0      	push	{r4, r5, r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	2b03      	cmp	r3, #3
 80119f4:	d10d      	bne.n	8011a12 <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f7ff fe55 	bl	80116ac <ZbExtendedAddress>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	429d      	cmp	r5, r3
 8011a08:	bf08      	it	eq
 8011a0a:	4294      	cmpeq	r4, r2
 8011a0c:	d101      	bne.n	8011a12 <ZbApsAddrIsLocal+0x2e>
            return true;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	e00e      	b.n	8011a30 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	2b02      	cmp	r3, #2
 8011a18:	d109      	bne.n	8011a2e <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	88dc      	ldrh	r4, [r3, #6]
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f7ff fe8e 	bl	8011740 <ZbShortAddress>
 8011a24:	4603      	mov	r3, r0
 8011a26:	429c      	cmp	r4, r3
 8011a28:	d101      	bne.n	8011a2e <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	e000      	b.n	8011a30 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 8011a2e:	2300      	movs	r3, #0
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bdb0      	pop	{r4, r5, r7, pc}

08011a38 <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08a      	sub	sp, #40	; 0x28
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	607a      	str	r2, [r7, #4]
 8011a42:	603b      	str	r3, [r7, #0]
 8011a44:	460b      	mov	r3, r1
 8011a46:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 8011a48:	897b      	ldrh	r3, [r7, #10]
 8011a4a:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 8011a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a56:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8011a58:	f7f7 fe70 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011a5c:	f7f7 fe00 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011a60:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 8011a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a64:	2200      	movs	r2, #0
 8011a66:	f042 0210 	orr.w	r2, r2, #16
 8011a6a:	701a      	strb	r2, [r3, #0]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f042 0202 	orr.w	r2, r2, #2
 8011a72:	705a      	strb	r2, [r3, #1]
 8011a74:	2200      	movs	r2, #0
 8011a76:	709a      	strb	r2, [r3, #2]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f042 0202 	orr.w	r2, r2, #2
 8011a84:	711a      	strb	r2, [r3, #4]
 8011a86:	2200      	movs	r2, #0
 8011a88:	715a      	strb	r2, [r3, #5]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	719a      	strb	r2, [r3, #6]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 8011a92:	f107 0214 	add.w	r2, r7, #20
 8011a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a98:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8011a9a:	f107 0210 	add.w	r2, r7, #16
 8011a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011aa2:	f7f7 fe0d 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return apsmeGetConf.status;
 8011aa6:	7c3b      	ldrb	r3, [r7, #16]
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3728      	adds	r7, #40	; 0x28
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}

08011ab0 <ZbApsmeAddGroupReq>:
        *idx = i;
    }
    return key;
}

IPC_REQ_CONF_FUNC(ZbApsmeAddGroupReq, MSG_M4TOM0_APSME_ADD_GROUP, struct ZbApsmeAddGroupReqT, struct ZbApsmeAddGroupConfT)
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	60f8      	str	r0, [r7, #12]
 8011ab8:	60b9      	str	r1, [r7, #8]
 8011aba:	607a      	str	r2, [r7, #4]
 8011abc:	f7f7 fe3e 	bl	800973c <Pre_ZigbeeCmdProcessing>
 8011ac0:	f7f7 fdce 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011ac4:	6178      	str	r0, [r7, #20]
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	f042 0212 	orr.w	r2, r2, #18
 8011ace:	701a      	strb	r2, [r3, #0]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f042 0202 	orr.w	r2, r2, #2
 8011ad6:	705a      	strb	r2, [r3, #1]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	709a      	strb	r2, [r3, #2]
 8011adc:	2200      	movs	r2, #0
 8011ade:	70da      	strb	r2, [r3, #3]
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	f042 0202 	orr.w	r2, r2, #2
 8011ae8:	711a      	strb	r2, [r3, #4]
 8011aea:	2200      	movs	r2, #0
 8011aec:	715a      	strb	r2, [r3, #5]
 8011aee:	2200      	movs	r2, #0
 8011af0:	719a      	strb	r2, [r3, #6]
 8011af2:	2200      	movs	r2, #0
 8011af4:	71da      	strb	r2, [r3, #7]
 8011af6:	68ba      	ldr	r2, [r7, #8]
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	609a      	str	r2, [r3, #8]
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	60da      	str	r2, [r3, #12]
 8011b02:	f7f7 fddd 	bl	80096c0 <ZIGBEE_CmdTransfer>
 8011b06:	3718      	adds	r7, #24
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b086      	sub	sp, #24
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
 8011b18:	f7f7 fe10 	bl	800973c <Pre_ZigbeeCmdProcessing>
 8011b1c:	f7f7 fda0 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011b20:	6178      	str	r0, [r7, #20]
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	2200      	movs	r2, #0
 8011b26:	f042 0215 	orr.w	r2, r2, #21
 8011b2a:	701a      	strb	r2, [r3, #0]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	f042 0202 	orr.w	r2, r2, #2
 8011b32:	705a      	strb	r2, [r3, #1]
 8011b34:	2200      	movs	r2, #0
 8011b36:	709a      	strb	r2, [r3, #2]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	70da      	strb	r2, [r3, #3]
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	f042 0202 	orr.w	r2, r2, #2
 8011b44:	711a      	strb	r2, [r3, #4]
 8011b46:	2200      	movs	r2, #0
 8011b48:	715a      	strb	r2, [r3, #5]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	719a      	strb	r2, [r3, #6]
 8011b4e:	2200      	movs	r2, #0
 8011b50:	71da      	strb	r2, [r3, #7]
 8011b52:	68ba      	ldr	r2, [r7, #8]
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	609a      	str	r2, [r3, #8]
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	60da      	str	r2, [r3, #12]
 8011b5e:	f7f7 fdaf 	bl	80096c0 <ZIGBEE_CmdTransfer>
 8011b62:	3718      	adds	r7, #24
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <ZbApsBindSrcExists>:
    ZIGBEE_CmdTransfer();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b092      	sub	sp, #72	; 0x48
 8011b6c:	af02      	add	r7, sp, #8
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	70fb      	strb	r3, [r7, #3]
 8011b74:	4613      	mov	r3, r2
 8011b76:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff fd97 	bl	80116ac <ZbExtendedAddress>
 8011b7e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 8011b82:	2300      	movs	r3, #0
 8011b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8011b86:	f107 0208 	add.w	r2, r7, #8
 8011b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b8c:	9300      	str	r3, [sp, #0]
 8011b8e:	2320      	movs	r3, #32
 8011b90:	21c1      	movs	r1, #193	; 0xc1
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f7ff ff50 	bl	8011a38 <ZbApsGetIndex>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 8011b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d120      	bne.n	8011be8 <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 8011ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011baa:	4313      	orrs	r3, r2
 8011bac:	d011      	beq.n	8011bd2 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 8011bae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011bb2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8011bb6:	4299      	cmp	r1, r3
 8011bb8:	bf08      	it	eq
 8011bba:	4290      	cmpeq	r0, r2
 8011bbc:	d10b      	bne.n	8011bd6 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 8011bbe:	7c3b      	ldrb	r3, [r7, #16]
 8011bc0:	78fa      	ldrb	r2, [r7, #3]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d109      	bne.n	8011bda <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 8011bc6:	8a7b      	ldrh	r3, [r7, #18]
 8011bc8:	883a      	ldrh	r2, [r7, #0]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d107      	bne.n	8011bde <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	e00c      	b.n	8011bec <ZbApsBindSrcExists+0x84>
            continue;
 8011bd2:	bf00      	nop
 8011bd4:	e004      	b.n	8011be0 <ZbApsBindSrcExists+0x78>
            continue;
 8011bd6:	bf00      	nop
 8011bd8:	e002      	b.n	8011be0 <ZbApsBindSrcExists+0x78>
            continue;
 8011bda:	bf00      	nop
 8011bdc:	e000      	b.n	8011be0 <ZbApsBindSrcExists+0x78>
            continue;
 8011bde:	bf00      	nop
    for (i = 0;; i++) {
 8011be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011be2:	3301      	adds	r3, #1
 8011be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8011be6:	e7ce      	b.n	8011b86 <ZbApsBindSrcExists+0x1e>
            break;
 8011be8:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8011bea:	2300      	movs	r3, #0
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3740      	adds	r7, #64	; 0x40
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b088      	sub	sp, #32
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	603b      	str	r3, [r7, #0]
 8011c00:	4613      	mov	r3, r2
 8011c02:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011c04:	2300      	movs	r3, #0
 8011c06:	61bb      	str	r3, [r7, #24]
 8011c08:	e00e      	b.n	8011c28 <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8011c0a:	69ba      	ldr	r2, [r7, #24]
 8011c0c:	4613      	mov	r3, r2
 8011c0e:	005b      	lsls	r3, r3, #1
 8011c10:	4413      	add	r3, r2
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	4a27      	ldr	r2, [pc, #156]	; (8011cb4 <ZbMsgFilterRegister+0xc0>)
 8011c16:	4413      	add	r3, r2
 8011c18:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d006      	beq.n	8011c30 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	3301      	adds	r3, #1
 8011c26:	61bb      	str	r3, [r7, #24]
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	2b1f      	cmp	r3, #31
 8011c2c:	d9ed      	bls.n	8011c0a <ZbMsgFilterRegister+0x16>
 8011c2e:	e000      	b.n	8011c32 <ZbMsgFilterRegister+0x3e>
            break;
 8011c30:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	2b20      	cmp	r3, #32
 8011c36:	d101      	bne.n	8011c3c <ZbMsgFilterRegister+0x48>
        return NULL;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	e036      	b.n	8011caa <ZbMsgFilterRegister+0xb6>
    }

    Pre_ZigbeeCmdProcessing();
 8011c3c:	f7f7 fd7e 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011c40:	f7f7 fd0e 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011c44:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	f042 0210 	orr.w	r2, r2, #16
 8011c4e:	701a      	strb	r2, [r3, #0]
 8011c50:	2200      	movs	r2, #0
 8011c52:	705a      	strb	r2, [r3, #1]
 8011c54:	2200      	movs	r2, #0
 8011c56:	709a      	strb	r2, [r3, #2]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	f042 0203 	orr.w	r2, r2, #3
 8011c64:	711a      	strb	r2, [r3, #4]
 8011c66:	2200      	movs	r2, #0
 8011c68:	715a      	strb	r2, [r3, #5]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	719a      	strb	r2, [r3, #6]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 8011c78:	79fa      	ldrb	r2, [r7, #7]
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 8011c7e:	69fa      	ldr	r2, [r7, #28]
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 8011c84:	f7f7 fd1c 	bl	80096c0 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 8011c88:	f7ff fc5c 	bl	8011544 <zb_ipc_m4_get_retval>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	613b      	str	r3, [r7, #16]
    if (filter != NULL) {
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d008      	beq.n	8011ca8 <ZbMsgFilterRegister+0xb4>
        cb_info->filter = filter;
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	693a      	ldr	r2, [r7, #16]
 8011c9a:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	683a      	ldr	r2, [r7, #0]
 8011ca0:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ca6:	609a      	str	r2, [r3, #8]
    }
    return filter;
 8011ca8:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3720      	adds	r7, #32
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	200017cc 	.word	0x200017cc

08011cb8 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b086      	sub	sp, #24
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d044      	beq.n	8011d52 <ZbMsgFilterRemove+0x9a>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011cc8:	2300      	movs	r3, #0
 8011cca:	613b      	str	r3, [r7, #16]
 8011ccc:	e00f      	b.n	8011cee <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 8011cce:	693a      	ldr	r2, [r7, #16]
 8011cd0:	4613      	mov	r3, r2
 8011cd2:	005b      	lsls	r3, r3, #1
 8011cd4:	4413      	add	r3, r2
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	4a21      	ldr	r2, [pc, #132]	; (8011d60 <ZbMsgFilterRemove+0xa8>)
 8011cda:	4413      	add	r3, r2
 8011cdc:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	683a      	ldr	r2, [r7, #0]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d006      	beq.n	8011cf6 <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	3301      	adds	r3, #1
 8011cec:	613b      	str	r3, [r7, #16]
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	2b1f      	cmp	r3, #31
 8011cf2:	d9ec      	bls.n	8011cce <ZbMsgFilterRemove+0x16>
 8011cf4:	e000      	b.n	8011cf8 <ZbMsgFilterRemove+0x40>
            break;
 8011cf6:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	2b20      	cmp	r3, #32
 8011cfc:	d02b      	beq.n	8011d56 <ZbMsgFilterRemove+0x9e>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 8011cfe:	f7f7 fd1d 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011d02:	f7f7 fcad 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011d06:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	f042 0211 	orr.w	r2, r2, #17
 8011d10:	701a      	strb	r2, [r3, #0]
 8011d12:	2200      	movs	r2, #0
 8011d14:	705a      	strb	r2, [r3, #1]
 8011d16:	2200      	movs	r2, #0
 8011d18:	709a      	strb	r2, [r3, #2]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	2200      	movs	r2, #0
 8011d22:	f042 0201 	orr.w	r2, r2, #1
 8011d26:	711a      	strb	r2, [r3, #4]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	715a      	strb	r2, [r3, #5]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	719a      	strb	r2, [r3, #6]
 8011d30:	2200      	movs	r2, #0
 8011d32:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 8011d34:	683a      	ldr	r2, [r7, #0]
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011d3a:	f7f7 fcc1 	bl	80096c0 <ZIGBEE_CmdTransfer>
    cb_info->filter = NULL;
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	2200      	movs	r2, #0
 8011d42:	701a      	strb	r2, [r3, #0]
 8011d44:	2200      	movs	r2, #0
 8011d46:	705a      	strb	r2, [r3, #1]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	709a      	strb	r2, [r3, #2]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	70da      	strb	r2, [r3, #3]
 8011d50:	e002      	b.n	8011d58 <ZbMsgFilterRemove+0xa0>
        return;
 8011d52:	bf00      	nop
 8011d54:	e000      	b.n	8011d58 <ZbMsgFilterRemove+0xa0>
        return;
 8011d56:	bf00      	nop
}
 8011d58:	3718      	adds	r7, #24
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	200017cc 	.word	0x200017cc

08011d64 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b086      	sub	sp, #24
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 8011d70:	2300      	movs	r3, #0
 8011d72:	4a23      	ldr	r2, [pc, #140]	; (8011e00 <ZbTimerAlloc+0x9c>)
 8011d74:	210c      	movs	r1, #12
 8011d76:	2000      	movs	r0, #0
 8011d78:	f000 fd12 	bl	80127a0 <zb_heap_alloc>
 8011d7c:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d037      	beq.n	8011df4 <ZbTimerAlloc+0x90>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8011d90:	f7f7 fcd4 	bl	800973c <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011d94:	f7f7 fc64 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011d98:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f042 0214 	orr.w	r2, r2, #20
 8011da2:	701a      	strb	r2, [r3, #0]
 8011da4:	2200      	movs	r2, #0
 8011da6:	705a      	strb	r2, [r3, #1]
 8011da8:	2200      	movs	r2, #0
 8011daa:	709a      	strb	r2, [r3, #2]
 8011dac:	2200      	movs	r2, #0
 8011dae:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f042 0201 	orr.w	r2, r2, #1
 8011db8:	711a      	strb	r2, [r3, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	715a      	strb	r2, [r3, #5]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	719a      	strb	r2, [r3, #6]
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8011dc6:	697a      	ldr	r2, [r7, #20]
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 8011dcc:	f7f7 fc78 	bl	80096c0 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8011dd0:	f7ff fbb8 	bl	8011544 <zb_ipc_m4_get_retval>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	609a      	str	r2, [r3, #8]
        if (timer->m0_timer == NULL) {
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	689b      	ldr	r3, [r3, #8]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d107      	bne.n	8011df4 <ZbTimerAlloc+0x90>
            ZbHeapFree(NULL, timer);
 8011de4:	2300      	movs	r3, #0
 8011de6:	4a06      	ldr	r2, [pc, #24]	; (8011e00 <ZbTimerAlloc+0x9c>)
 8011de8:	6979      	ldr	r1, [r7, #20]
 8011dea:	2000      	movs	r0, #0
 8011dec:	f000 fce7 	bl	80127be <zb_heap_free>
            timer = NULL;
 8011df0:	2300      	movs	r3, #0
 8011df2:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 8011df4:	697b      	ldr	r3, [r7, #20]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	08016c4c 	.word	0x08016c4c

08011e04 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 8011e0c:	f7f7 fc96 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011e10:	f7f7 fc26 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011e14:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	f042 0215 	orr.w	r2, r2, #21
 8011e1e:	701a      	strb	r2, [r3, #0]
 8011e20:	2200      	movs	r2, #0
 8011e22:	705a      	strb	r2, [r3, #1]
 8011e24:	2200      	movs	r2, #0
 8011e26:	709a      	strb	r2, [r3, #2]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f042 0201 	orr.w	r2, r2, #1
 8011e34:	711a      	strb	r2, [r3, #4]
 8011e36:	2200      	movs	r2, #0
 8011e38:	715a      	strb	r2, [r3, #5]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	719a      	strb	r2, [r3, #6]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	689b      	ldr	r3, [r3, #8]
 8011e46:	461a      	mov	r2, r3
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8011e4c:	f7f7 fc38 	bl	80096c0 <ZIGBEE_CmdTransfer>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 8011e50:	2300      	movs	r3, #0
 8011e52:	4a04      	ldr	r2, [pc, #16]	; (8011e64 <ZbTimerFree+0x60>)
 8011e54:	6879      	ldr	r1, [r7, #4]
 8011e56:	2000      	movs	r0, #0
 8011e58:	f000 fcb1 	bl	80127be <zb_heap_free>
}
 8011e5c:	bf00      	nop
 8011e5e:	3710      	adds	r7, #16
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	08016c4c 	.word	0x08016c4c

08011e68 <ZbTimerReset>:
    ZIGBEE_CmdTransfer();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8011e72:	f7f7 fc63 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011e76:	f7f7 fbf3 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011e7a:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	f042 0217 	orr.w	r2, r2, #23
 8011e84:	701a      	strb	r2, [r3, #0]
 8011e86:	2200      	movs	r2, #0
 8011e88:	705a      	strb	r2, [r3, #1]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	709a      	strb	r2, [r3, #2]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	2200      	movs	r2, #0
 8011e96:	f042 0202 	orr.w	r2, r2, #2
 8011e9a:	711a      	strb	r2, [r3, #4]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	715a      	strb	r2, [r3, #5]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	719a      	strb	r2, [r3, #6]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	689b      	ldr	r3, [r3, #8]
 8011eac:	461a      	mov	r2, r3
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	683a      	ldr	r2, [r7, #0]
 8011eb6:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011eb8:	f7f7 fc02 	bl	80096c0 <ZIGBEE_CmdTransfer>
}
 8011ebc:	bf00      	nop
 8011ebe:	3710      	adds	r7, #16
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	4a13      	ldr	r2, [pc, #76]	; (8011f20 <ZbTimeoutRemaining+0x5c>)
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	d909      	bls.n	8011eea <ZbTimeoutRemaining+0x26>
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011edc:	d805      	bhi.n	8011eea <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 8011ede:	683a      	ldr	r2, [r7, #0]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	e014      	b.n	8011f14 <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	4a0c      	ldr	r2, [pc, #48]	; (8011f20 <ZbTimeoutRemaining+0x5c>)
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d905      	bls.n	8011efe <ZbTimeoutRemaining+0x3a>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011ef8:	d801      	bhi.n	8011efe <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8011efa:	2300      	movs	r3, #0
 8011efc:	e00a      	b.n	8011f14 <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 8011efe:	687a      	ldr	r2, [r7, #4]
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d301      	bcc.n	8011f0a <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 8011f06:	2300      	movs	r3, #0
 8011f08:	e004      	b.n	8011f14 <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8011f0a:	683a      	ldr	r2, [r7, #0]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	1ad3      	subs	r3, r2, r3
 8011f10:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 8011f12:	68fb      	ldr	r3, [r7, #12]
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3714      	adds	r7, #20
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr
 8011f20:	bffffffd 	.word	0xbffffffd

08011f24 <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b08a      	sub	sp, #40	; 0x28
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	607a      	str	r2, [r7, #4]
 8011f2e:	603b      	str	r3, [r7, #0]
 8011f30:	460b      	mov	r3, r1
 8011f32:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 8011f34:	897b      	ldrh	r3, [r7, #10]
 8011f36:	82bb      	strh	r3, [r7, #20]
    nlmeGetReq.attr = attrPtr;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	61bb      	str	r3, [r7, #24]
    nlmeGetReq.attrLength = attrSz;
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrIndex = attrIndex;
 8011f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f42:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8011f44:	f7f7 fbfa 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011f48:	f7f7 fb8a 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011f4c:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 8011f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f50:	2200      	movs	r2, #0
 8011f52:	701a      	strb	r2, [r3, #0]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f042 0203 	orr.w	r2, r2, #3
 8011f5a:	705a      	strb	r2, [r3, #1]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	709a      	strb	r2, [r3, #2]
 8011f60:	2200      	movs	r2, #0
 8011f62:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f66:	2200      	movs	r2, #0
 8011f68:	f042 0202 	orr.w	r2, r2, #2
 8011f6c:	711a      	strb	r2, [r3, #4]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	715a      	strb	r2, [r3, #5]
 8011f72:	2200      	movs	r2, #0
 8011f74:	719a      	strb	r2, [r3, #6]
 8011f76:	2200      	movs	r2, #0
 8011f78:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 8011f7a:	f107 0214 	add.w	r2, r7, #20
 8011f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f80:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 8011f82:	f107 0210 	add.w	r2, r7, #16
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8011f8a:	f7f7 fb99 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return nlmeGetConf.status;
 8011f8e:	7c3b      	ldrb	r3, [r7, #16]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3728      	adds	r7, #40	; 0x28
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <ZbNwkSetIndex>:

enum ZbStatusCodeT
ZbNwkSetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b08a      	sub	sp, #40	; 0x28
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	607a      	str	r2, [r7, #4]
 8011fa2:	603b      	str	r3, [r7, #0]
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbNlmeSetReqT nlmeSetReq;
    struct ZbNlmeSetConfT nlmeSetConf;

    /* Form the NLME-SET.request */
    nlmeSetReq.attrId = attrId;
 8011fa8:	897b      	ldrh	r3, [r7, #10]
 8011faa:	82bb      	strh	r3, [r7, #20]
    nlmeSetReq.attr = attrPtr;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	61bb      	str	r3, [r7, #24]
    nlmeSetReq.attrLength = attrSz;
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	61fb      	str	r3, [r7, #28]
    nlmeSetReq.attrIndex = attrIndex;
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb6:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8011fb8:	f7f7 fbc0 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8011fbc:	f7f7 fb50 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8011fc0:	6278      	str	r0, [r7, #36]	; 0x24
    ipcc_req->ID = MSG_M4TOM0_NWK_SET_INDEX;
 8011fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	f042 0201 	orr.w	r2, r2, #1
 8011fca:	701a      	strb	r2, [r3, #0]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	f042 0203 	orr.w	r2, r2, #3
 8011fd2:	705a      	strb	r2, [r3, #1]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	709a      	strb	r2, [r3, #2]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f042 0202 	orr.w	r2, r2, #2
 8011fe4:	711a      	strb	r2, [r3, #4]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	715a      	strb	r2, [r3, #5]
 8011fea:	2200      	movs	r2, #0
 8011fec:	719a      	strb	r2, [r3, #6]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeSetReq;
 8011ff2:	f107 0214 	add.w	r2, r7, #20
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff8:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeSetConf;
 8011ffa:	f107 0210 	add.w	r2, r7, #16
 8011ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012000:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8012002:	f7f7 fb5d 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return nlmeSetConf.status;
 8012006:	7c3b      	ldrb	r3, [r7, #16]
}
 8012008:	4618      	mov	r0, r3
 801200a:	3728      	adds	r7, #40	; 0x28
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}

08012010 <ZbNwkGet>:

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b086      	sub	sp, #24
 8012014:	af02      	add	r7, sp, #8
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	607a      	str	r2, [r7, #4]
 801201a:	603b      	str	r3, [r7, #0]
 801201c:	460b      	mov	r3, r1
 801201e:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 8012020:	8979      	ldrh	r1, [r7, #10]
 8012022:	2300      	movs	r3, #0
 8012024:	9300      	str	r3, [sp, #0]
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	687a      	ldr	r2, [r7, #4]
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	f7ff ff7a 	bl	8011f24 <ZbNwkGetIndex>
 8012030:	4603      	mov	r3, r0
}
 8012032:	4618      	mov	r0, r3
 8012034:	3710      	adds	r7, #16
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}

0801203a <ZbNwkSet>:

enum ZbStatusCodeT
ZbNwkSet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 801203a:	b580      	push	{r7, lr}
 801203c:	b086      	sub	sp, #24
 801203e:	af02      	add	r7, sp, #8
 8012040:	60f8      	str	r0, [r7, #12]
 8012042:	607a      	str	r2, [r7, #4]
 8012044:	603b      	str	r3, [r7, #0]
 8012046:	460b      	mov	r3, r1
 8012048:	817b      	strh	r3, [r7, #10]
    return ZbNwkSetIndex(zb, attrId, attrPtr, attrSz, 0);
 801204a:	8979      	ldrh	r1, [r7, #10]
 801204c:	2300      	movs	r3, #0
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	683b      	ldr	r3, [r7, #0]
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	68f8      	ldr	r0, [r7, #12]
 8012056:	f7ff ff9f 	bl	8011f98 <ZbNwkSetIndex>
 801205a:	4603      	mov	r3, r0
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <ZbZdoNwkAddrReq>:

/******************************************************************************
 * ZDO
 ******************************************************************************
 */
IPC_REQ_CALLBACK_FUNC(ZbZdoNwkAddrReq, MSG_M4TOM0_ZDO_NWK_ADDR, struct ZbZdoNwkAddrReqT, struct ZbZdoNwkAddrRspT);
 8012064:	b580      	push	{r7, lr}
 8012066:	b086      	sub	sp, #24
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	607a      	str	r2, [r7, #4]
 8012070:	603b      	str	r3, [r7, #0]
 8012072:	6839      	ldr	r1, [r7, #0]
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7ff fa3c 	bl	80114f2 <zb_ipc_m4_cb_info_alloc>
 801207a:	6178      	str	r0, [r7, #20]
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d101      	bne.n	8012086 <ZbZdoNwkAddrReq+0x22>
 8012082:	2370      	movs	r3, #112	; 0x70
 8012084:	e026      	b.n	80120d4 <ZbZdoNwkAddrReq+0x70>
 8012086:	f7f7 fb59 	bl	800973c <Pre_ZigbeeCmdProcessing>
 801208a:	f7f7 fae9 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801208e:	6138      	str	r0, [r7, #16]
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	2200      	movs	r2, #0
 8012094:	701a      	strb	r2, [r3, #0]
 8012096:	2200      	movs	r2, #0
 8012098:	f042 0201 	orr.w	r2, r2, #1
 801209c:	705a      	strb	r2, [r3, #1]
 801209e:	2200      	movs	r2, #0
 80120a0:	709a      	strb	r2, [r3, #2]
 80120a2:	2200      	movs	r2, #0
 80120a4:	70da      	strb	r2, [r3, #3]
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	2200      	movs	r2, #0
 80120aa:	f042 0202 	orr.w	r2, r2, #2
 80120ae:	711a      	strb	r2, [r3, #4]
 80120b0:	2200      	movs	r2, #0
 80120b2:	715a      	strb	r2, [r3, #5]
 80120b4:	2200      	movs	r2, #0
 80120b6:	719a      	strb	r2, [r3, #6]
 80120b8:	2200      	movs	r2, #0
 80120ba:	71da      	strb	r2, [r3, #7]
 80120bc:	68ba      	ldr	r2, [r7, #8]
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	609a      	str	r2, [r3, #8]
 80120c2:	697a      	ldr	r2, [r7, #20]
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	60da      	str	r2, [r3, #12]
 80120c8:	f7f7 fafa 	bl	80096c0 <ZIGBEE_CmdTransfer>
 80120cc:	f7ff fa3a 	bl	8011544 <zb_ipc_m4_get_retval>
 80120d0:	4603      	mov	r3, r0
 80120d2:	b2db      	uxtb	r3, r3
 80120d4:	4618      	mov	r0, r3
 80120d6:	3718      	adds	r7, #24
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <ZbZdoSimpleDescReq>:
/* Followed up in MSG_M0TOM4_ZDO_NODE_DESC_CB handler */

IPC_REQ_CALLBACK_FUNC(ZbZdoPowerDescReq, MSG_M4TOM0_ZDO_POWER_DESC, struct ZbZdoPowerDescReqT, struct ZbZdoPowerDescRspT);
/* Followed up in MSG_M0TOM4_ZDO_POWER_DESC_CB handler */

IPC_REQ_CALLBACK_FUNC(ZbZdoSimpleDescReq, MSG_M4TOM0_ZDO_SIMPLE_DESC, struct ZbZdoSimpleDescReqT, struct ZbZdoSimpleDescRspT);
 80120dc:	b580      	push	{r7, lr}
 80120de:	b086      	sub	sp, #24
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	607a      	str	r2, [r7, #4]
 80120e8:	603b      	str	r3, [r7, #0]
 80120ea:	6839      	ldr	r1, [r7, #0]
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f7ff fa00 	bl	80114f2 <zb_ipc_m4_cb_info_alloc>
 80120f2:	6178      	str	r0, [r7, #20]
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d101      	bne.n	80120fe <ZbZdoSimpleDescReq+0x22>
 80120fa:	2370      	movs	r3, #112	; 0x70
 80120fc:	e028      	b.n	8012150 <ZbZdoSimpleDescReq+0x74>
 80120fe:	f7f7 fb1d 	bl	800973c <Pre_ZigbeeCmdProcessing>
 8012102:	f7f7 faad 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012106:	6138      	str	r0, [r7, #16]
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	2200      	movs	r2, #0
 801210c:	f042 0208 	orr.w	r2, r2, #8
 8012110:	701a      	strb	r2, [r3, #0]
 8012112:	2200      	movs	r2, #0
 8012114:	f042 0201 	orr.w	r2, r2, #1
 8012118:	705a      	strb	r2, [r3, #1]
 801211a:	2200      	movs	r2, #0
 801211c:	709a      	strb	r2, [r3, #2]
 801211e:	2200      	movs	r2, #0
 8012120:	70da      	strb	r2, [r3, #3]
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	2200      	movs	r2, #0
 8012126:	f042 0202 	orr.w	r2, r2, #2
 801212a:	711a      	strb	r2, [r3, #4]
 801212c:	2200      	movs	r2, #0
 801212e:	715a      	strb	r2, [r3, #5]
 8012130:	2200      	movs	r2, #0
 8012132:	719a      	strb	r2, [r3, #6]
 8012134:	2200      	movs	r2, #0
 8012136:	71da      	strb	r2, [r3, #7]
 8012138:	68ba      	ldr	r2, [r7, #8]
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	609a      	str	r2, [r3, #8]
 801213e:	697a      	ldr	r2, [r7, #20]
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	60da      	str	r2, [r3, #12]
 8012144:	f7f7 fabc 	bl	80096c0 <ZIGBEE_CmdTransfer>
 8012148:	f7ff f9fc 	bl	8011544 <zb_ipc_m4_get_retval>
 801214c:	4603      	mov	r3, r0
 801214e:	b2db      	uxtb	r3, r3
 8012150:	4618      	mov	r0, r3
 8012152:	3718      	adds	r7, #24
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <ZbZdoActiveEpReq>:
/* Followed up in MSG_M0TOM4_ZDO_SIMPLE_DESC_CB handler */

IPC_REQ_CALLBACK_FUNC(ZbZdoActiveEpReq, MSG_M4TOM0_ZDO_ACTIVE_EP, struct ZbZdoActiveEpReqT, struct ZbZdoActiveEpRspT);
 8012158:	b580      	push	{r7, lr}
 801215a:	b086      	sub	sp, #24
 801215c:	af00      	add	r7, sp, #0
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	607a      	str	r2, [r7, #4]
 8012164:	603b      	str	r3, [r7, #0]
 8012166:	6839      	ldr	r1, [r7, #0]
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7ff f9c2 	bl	80114f2 <zb_ipc_m4_cb_info_alloc>
 801216e:	6178      	str	r0, [r7, #20]
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d101      	bne.n	801217a <ZbZdoActiveEpReq+0x22>
 8012176:	2370      	movs	r3, #112	; 0x70
 8012178:	e028      	b.n	80121cc <ZbZdoActiveEpReq+0x74>
 801217a:	f7f7 fadf 	bl	800973c <Pre_ZigbeeCmdProcessing>
 801217e:	f7f7 fa6f 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012182:	6138      	str	r0, [r7, #16]
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	2200      	movs	r2, #0
 8012188:	f042 020a 	orr.w	r2, r2, #10
 801218c:	701a      	strb	r2, [r3, #0]
 801218e:	2200      	movs	r2, #0
 8012190:	f042 0201 	orr.w	r2, r2, #1
 8012194:	705a      	strb	r2, [r3, #1]
 8012196:	2200      	movs	r2, #0
 8012198:	709a      	strb	r2, [r3, #2]
 801219a:	2200      	movs	r2, #0
 801219c:	70da      	strb	r2, [r3, #3]
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	2200      	movs	r2, #0
 80121a2:	f042 0202 	orr.w	r2, r2, #2
 80121a6:	711a      	strb	r2, [r3, #4]
 80121a8:	2200      	movs	r2, #0
 80121aa:	715a      	strb	r2, [r3, #5]
 80121ac:	2200      	movs	r2, #0
 80121ae:	719a      	strb	r2, [r3, #6]
 80121b0:	2200      	movs	r2, #0
 80121b2:	71da      	strb	r2, [r3, #7]
 80121b4:	68ba      	ldr	r2, [r7, #8]
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	609a      	str	r2, [r3, #8]
 80121ba:	697a      	ldr	r2, [r7, #20]
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	60da      	str	r2, [r3, #12]
 80121c0:	f7f7 fa7e 	bl	80096c0 <ZIGBEE_CmdTransfer>
 80121c4:	f7ff f9be 	bl	8011544 <zb_ipc_m4_get_retval>
 80121c8:	4603      	mov	r3, r0
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	4618      	mov	r0, r3
 80121ce:	3718      	adds	r7, #24
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <ZbZdoBindReq>:
}

IPC_REQ_FUNC(ZbZdoDeviceAnnce, MSG_M4TOM0_ZDO_DEVICE_ANNCE, struct ZbZdoDeviceAnnceT);
IPC_REQ_FUNC(ZbZdoDeviceAnnceAlias, MSG_M4TOM0_ZDO_DEVICE_ANNCE_ALIAS, struct ZbZdoDeviceAnnceT);

IPC_REQ_CALLBACK_FUNC(ZbZdoBindReq, MSG_M4TOM0_ZDO_BIND, struct ZbZdoBindReqT, struct ZbZdoBindRspT);
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b086      	sub	sp, #24
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
 80121e2:	6839      	ldr	r1, [r7, #0]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7ff f984 	bl	80114f2 <zb_ipc_m4_cb_info_alloc>
 80121ea:	6178      	str	r0, [r7, #20]
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d101      	bne.n	80121f6 <ZbZdoBindReq+0x22>
 80121f2:	2370      	movs	r3, #112	; 0x70
 80121f4:	e028      	b.n	8012248 <ZbZdoBindReq+0x74>
 80121f6:	f7f7 faa1 	bl	800973c <Pre_ZigbeeCmdProcessing>
 80121fa:	f7f7 fa31 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80121fe:	6138      	str	r0, [r7, #16]
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	2200      	movs	r2, #0
 8012204:	f042 0214 	orr.w	r2, r2, #20
 8012208:	701a      	strb	r2, [r3, #0]
 801220a:	2200      	movs	r2, #0
 801220c:	f042 0201 	orr.w	r2, r2, #1
 8012210:	705a      	strb	r2, [r3, #1]
 8012212:	2200      	movs	r2, #0
 8012214:	709a      	strb	r2, [r3, #2]
 8012216:	2200      	movs	r2, #0
 8012218:	70da      	strb	r2, [r3, #3]
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	2200      	movs	r2, #0
 801221e:	f042 0202 	orr.w	r2, r2, #2
 8012222:	711a      	strb	r2, [r3, #4]
 8012224:	2200      	movs	r2, #0
 8012226:	715a      	strb	r2, [r3, #5]
 8012228:	2200      	movs	r2, #0
 801222a:	719a      	strb	r2, [r3, #6]
 801222c:	2200      	movs	r2, #0
 801222e:	71da      	strb	r2, [r3, #7]
 8012230:	68ba      	ldr	r2, [r7, #8]
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	609a      	str	r2, [r3, #8]
 8012236:	697a      	ldr	r2, [r7, #20]
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	60da      	str	r2, [r3, #12]
 801223c:	f7f7 fa40 	bl	80096c0 <ZIGBEE_CmdTransfer>
 8012240:	f7ff f980 	bl	8011544 <zb_ipc_m4_get_retval>
 8012244:	4603      	mov	r3, r0
 8012246:	b2db      	uxtb	r3, r3
 8012248:	4618      	mov	r0, r3
 801224a:	3718      	adds	r7, #24
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b086      	sub	sp, #24
 8012254:	af02      	add	r7, sp, #8
 8012256:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 8012258:	f107 020c 	add.w	r2, r7, #12
 801225c:	2300      	movs	r3, #0
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	2304      	movs	r3, #4
 8012262:	f241 111d 	movw	r1, #4381	; 0x111d
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7ff faea 	bl	8011840 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 801226c:	68fb      	ldr	r3, [r7, #12]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b086      	sub	sp, #24
 801227a:	af00      	add	r7, sp, #0
 801227c:	60f8      	str	r0, [r7, #12]
 801227e:	60b9      	str	r1, [r7, #8]
 8012280:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012282:	f7f7 fa5b 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012286:	f7f7 f9eb 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801228a:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	2200      	movs	r2, #0
 8012290:	f042 021d 	orr.w	r2, r2, #29
 8012294:	701a      	strb	r2, [r3, #0]
 8012296:	2200      	movs	r2, #0
 8012298:	f042 0204 	orr.w	r2, r2, #4
 801229c:	705a      	strb	r2, [r3, #1]
 801229e:	2200      	movs	r2, #0
 80122a0:	709a      	strb	r2, [r3, #2]
 80122a2:	2200      	movs	r2, #0
 80122a4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	2200      	movs	r2, #0
 80122aa:	f042 0202 	orr.w	r2, r2, #2
 80122ae:	711a      	strb	r2, [r3, #4]
 80122b0:	2200      	movs	r2, #0
 80122b2:	715a      	strb	r2, [r3, #5]
 80122b4:	2200      	movs	r2, #0
 80122b6:	719a      	strb	r2, [r3, #6]
 80122b8:	2200      	movs	r2, #0
 80122ba:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 80122bc:	68ba      	ldr	r2, [r7, #8]
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80122c8:	f7f7 f9fa 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return zb_ipc_m4_get_retval() != 0U ? true : false;
 80122cc:	f7ff f93a 	bl	8011544 <zb_ipc_m4_get_retval>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	bf14      	ite	ne
 80122d6:	2301      	movne	r3, #1
 80122d8:	2300      	moveq	r3, #0
 80122da:	b2db      	uxtb	r3, r3
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3718      	adds	r7, #24
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <ZbZclAddEndpoint>:
    return (bool)zb_ipc_m4_get_retval();
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80122f0:	f7f7 fa24 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80122f4:	f7f7 f9b4 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80122f8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	2200      	movs	r2, #0
 80122fe:	701a      	strb	r2, [r3, #0]
 8012300:	2200      	movs	r2, #0
 8012302:	f042 0204 	orr.w	r2, r2, #4
 8012306:	705a      	strb	r2, [r3, #1]
 8012308:	2200      	movs	r2, #0
 801230a:	709a      	strb	r2, [r3, #2]
 801230c:	2200      	movs	r2, #0
 801230e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2200      	movs	r2, #0
 8012314:	f042 0202 	orr.w	r2, r2, #2
 8012318:	711a      	strb	r2, [r3, #4]
 801231a:	2200      	movs	r2, #0
 801231c:	715a      	strb	r2, [r3, #5]
 801231e:	2200      	movs	r2, #0
 8012320:	719a      	strb	r2, [r3, #6]
 8012322:	2200      	movs	r2, #0
 8012324:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 801232c:	687a      	ldr	r2, [r7, #4]
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8012332:	f7f7 f9c5 	bl	80096c0 <ZIGBEE_CmdTransfer>
}
 8012336:	bf00      	nop
 8012338:	3718      	adds	r7, #24
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}

0801233e <ZbZclReadReq>:
    ipcc_req->Data[0] = (uint32_t)req;
    ipcc_req->Data[1] = (uint32_t)conf;
    ZIGBEE_CmdTransfer();
}

IPC_CLUSTER_REQ_CALLBACK_FUNC(ZbZclReadReq, MSG_M4TOM0_ZCL_READ_REQ, ZbZclReadReqT, ZbZclReadRspT);
 801233e:	b580      	push	{r7, lr}
 8012340:	b086      	sub	sp, #24
 8012342:	af00      	add	r7, sp, #0
 8012344:	60f8      	str	r0, [r7, #12]
 8012346:	60b9      	str	r1, [r7, #8]
 8012348:	607a      	str	r2, [r7, #4]
 801234a:	603b      	str	r3, [r7, #0]
 801234c:	6839      	ldr	r1, [r7, #0]
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f7ff f8cf 	bl	80114f2 <zb_ipc_m4_cb_info_alloc>
 8012354:	6178      	str	r0, [r7, #20]
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d101      	bne.n	8012360 <ZbZclReadReq+0x22>
 801235c:	2389      	movs	r3, #137	; 0x89
 801235e:	e02b      	b.n	80123b8 <ZbZclReadReq+0x7a>
 8012360:	f7f7 f9ec 	bl	800973c <Pre_ZigbeeCmdProcessing>
 8012364:	f7f7 f97c 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012368:	6138      	str	r0, [r7, #16]
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	2200      	movs	r2, #0
 801236e:	f042 0215 	orr.w	r2, r2, #21
 8012372:	701a      	strb	r2, [r3, #0]
 8012374:	2200      	movs	r2, #0
 8012376:	f042 0204 	orr.w	r2, r2, #4
 801237a:	705a      	strb	r2, [r3, #1]
 801237c:	2200      	movs	r2, #0
 801237e:	709a      	strb	r2, [r3, #2]
 8012380:	2200      	movs	r2, #0
 8012382:	70da      	strb	r2, [r3, #3]
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	2200      	movs	r2, #0
 8012388:	f042 0203 	orr.w	r2, r2, #3
 801238c:	711a      	strb	r2, [r3, #4]
 801238e:	2200      	movs	r2, #0
 8012390:	715a      	strb	r2, [r3, #5]
 8012392:	2200      	movs	r2, #0
 8012394:	719a      	strb	r2, [r3, #6]
 8012396:	2200      	movs	r2, #0
 8012398:	71da      	strb	r2, [r3, #7]
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	609a      	str	r2, [r3, #8]
 80123a0:	68ba      	ldr	r2, [r7, #8]
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	60da      	str	r2, [r3, #12]
 80123a6:	697a      	ldr	r2, [r7, #20]
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	611a      	str	r2, [r3, #16]
 80123ac:	f7f7 f988 	bl	80096c0 <ZIGBEE_CmdTransfer>
 80123b0:	f7ff f8c8 	bl	8011544 <zb_ipc_m4_get_retval>
 80123b4:	4603      	mov	r3, r0
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	4618      	mov	r0, r3
 80123ba:	3718      	adds	r7, #24
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80123c6:	f7f7 f9b9 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80123ca:	f7f7 f949 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80123ce:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	f042 0211 	orr.w	r2, r2, #17
 80123d8:	701a      	strb	r2, [r3, #0]
 80123da:	2200      	movs	r2, #0
 80123dc:	f042 0204 	orr.w	r2, r2, #4
 80123e0:	705a      	strb	r2, [r3, #1]
 80123e2:	2200      	movs	r2, #0
 80123e4:	709a      	strb	r2, [r3, #2]
 80123e6:	2200      	movs	r2, #0
 80123e8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	711a      	strb	r2, [r3, #4]
 80123f0:	2200      	movs	r2, #0
 80123f2:	715a      	strb	r2, [r3, #5]
 80123f4:	2200      	movs	r2, #0
 80123f6:	719a      	strb	r2, [r3, #6]
 80123f8:	2200      	movs	r2, #0
 80123fa:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 80123fc:	f7f7 f960 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return (uint8_t)zb_ipc_m4_get_retval();
 8012400:	f7ff f8a0 	bl	8011544 <zb_ipc_m4_get_retval>
 8012404:	4603      	mov	r3, r0
 8012406:	b2db      	uxtb	r3, r3
}
 8012408:	4618      	mov	r0, r3
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b086      	sub	sp, #24
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	607a      	str	r2, [r7, #4]
 801241c:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 801241e:	2300      	movs	r3, #0
 8012420:	617b      	str	r3, [r7, #20]

    if (callback != NULL) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d013      	beq.n	8012450 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8012428:	6839      	ldr	r1, [r7, #0]
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f7ff f861 	bl	80114f2 <zb_ipc_m4_cb_info_alloc>
 8012430:	6178      	str	r0, [r7, #20]
        if (info == NULL) {
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d101      	bne.n	801243c <ZbZclCommandReq+0x2c>
            return (enum ZclStatusCodeT) ZB_STATUS_ALLOC_FAIL;
 8012438:	2370      	movs	r3, #112	; 0x70
 801243a:	e032      	b.n	80124a2 <ZbZclCommandReq+0x92>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	4618      	mov	r0, r3
 8012440:	f7ff faad 	bl	801199e <ZbApsAddrIsBcast>
 8012444:	4603      	mov	r3, r0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d002      	beq.n	8012450 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	2201      	movs	r2, #1
 801244e:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 8012450:	f7f7 f974 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012454:	f7f7 f904 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012458:	6138      	str	r0, [r7, #16]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	2200      	movs	r2, #0
 801245e:	f042 0212 	orr.w	r2, r2, #18
 8012462:	701a      	strb	r2, [r3, #0]
 8012464:	2200      	movs	r2, #0
 8012466:	f042 0204 	orr.w	r2, r2, #4
 801246a:	705a      	strb	r2, [r3, #1]
 801246c:	2200      	movs	r2, #0
 801246e:	709a      	strb	r2, [r3, #2]
 8012470:	2200      	movs	r2, #0
 8012472:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	2200      	movs	r2, #0
 8012478:	f042 0202 	orr.w	r2, r2, #2
 801247c:	711a      	strb	r2, [r3, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	715a      	strb	r2, [r3, #5]
 8012482:	2200      	movs	r2, #0
 8012484:	719a      	strb	r2, [r3, #6]
 8012486:	2200      	movs	r2, #0
 8012488:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8012490:	697a      	ldr	r2, [r7, #20]
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8012496:	f7f7 f913 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 801249a:	f7ff f853 	bl	8011544 <zb_ipc_m4_get_retval>
 801249e:	4603      	mov	r3, r0
 80124a0:	b2db      	uxtb	r3, r3
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3718      	adds	r7, #24
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b086      	sub	sp, #24
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	60f8      	str	r0, [r7, #12]
 80124b2:	60b9      	str	r1, [r7, #8]
 80124b4:	607a      	str	r2, [r7, #4]
 80124b6:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80124b8:	f7f7 f940 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80124bc:	f7f7 f8d0 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80124c0:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	2200      	movs	r2, #0
 80124c6:	f042 0214 	orr.w	r2, r2, #20
 80124ca:	701a      	strb	r2, [r3, #0]
 80124cc:	2200      	movs	r2, #0
 80124ce:	f042 0204 	orr.w	r2, r2, #4
 80124d2:	705a      	strb	r2, [r3, #1]
 80124d4:	2200      	movs	r2, #0
 80124d6:	709a      	strb	r2, [r3, #2]
 80124d8:	2200      	movs	r2, #0
 80124da:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	2200      	movs	r2, #0
 80124e0:	f042 0204 	orr.w	r2, r2, #4
 80124e4:	711a      	strb	r2, [r3, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	715a      	strb	r2, [r3, #5]
 80124ea:	2200      	movs	r2, #0
 80124ec:	719a      	strb	r2, [r3, #6]
 80124ee:	2200      	movs	r2, #0
 80124f0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80124f2:	68fa      	ldr	r2, [r7, #12]
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 80124f8:	68ba      	ldr	r2, [r7, #8]
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 8012504:	78fa      	ldrb	r2, [r7, #3]
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 801250a:	f7f7 f8d9 	bl	80096c0 <ZIGBEE_CmdTransfer>
}
 801250e:	bf00      	nop
 8012510:	3718      	adds	r7, #24
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}

08012516 <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 8012516:	b590      	push	{r4, r7, lr}
 8012518:	b091      	sub	sp, #68	; 0x44
 801251a:	af00      	add	r7, sp, #0
 801251c:	60f8      	str	r0, [r7, #12]
 801251e:	60b9      	str	r1, [r7, #8]
 8012520:	607a      	str	r2, [r7, #4]
 8012522:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 8012524:	f107 0310 	add.w	r3, r7, #16
 8012528:	4619      	mov	r1, r3
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f7f1 fc43 	bl	8003db6 <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	f107 0410 	add.w	r4, r7, #16
 8012536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	7c1b      	ldrb	r3, [r3, #16]
 8012540:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 8012544:	2301      	movs	r3, #1
 8012546:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	8a1b      	ldrh	r3, [r3, #16]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d001      	beq.n	8012556 <ZbZclClusterCommandReq+0x40>
 8012552:	2301      	movs	r3, #1
 8012554:	e000      	b.n	8012558 <ZbZclClusterCommandReq+0x42>
 8012556:	2300      	movs	r3, #0
 8012558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	7f1b      	ldrb	r3, [r3, #28]
 8012560:	2b00      	cmp	r3, #0
 8012562:	bf0c      	ite	eq
 8012564:	2301      	moveq	r3, #1
 8012566:	2300      	movne	r3, #0
 8012568:	b2db      	uxtb	r3, r3
 801256a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	7c5b      	ldrb	r3, [r3, #17]
 8012572:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	8a1b      	ldrh	r3, [r3, #16]
 801257a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 801257c:	f7ff ff20 	bl	80123c0 <ZbZclGetNextSeqnum>
 8012580:	4603      	mov	r3, r0
 8012582:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	695b      	ldr	r3, [r3, #20]
 801258a:	637b      	str	r3, [r7, #52]	; 0x34
    zcl_req.length = req->length;
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	699b      	ldr	r3, [r3, #24]
 8012590:	63bb      	str	r3, [r7, #56]	; 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	6898      	ldr	r0, [r3, #8]
 8012596:	f107 0110 	add.w	r1, r7, #16
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	f7ff ff37 	bl	8012410 <ZbZclCommandReq>
 80125a2:	4603      	mov	r3, r0
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3744      	adds	r7, #68	; 0x44
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd90      	pop	{r4, r7, pc}

080125ac <ZbZclClusterEndpointRegister>:
    return (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    Pre_ZigbeeCmdProcessing();
 80125b4:	f7f7 f8c2 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80125b8:	f7f7 f852 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80125bc:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f042 0202 	orr.w	r2, r2, #2
 80125c6:	701a      	strb	r2, [r3, #0]
 80125c8:	2200      	movs	r2, #0
 80125ca:	f042 0204 	orr.w	r2, r2, #4
 80125ce:	705a      	strb	r2, [r3, #1]
 80125d0:	2200      	movs	r2, #0
 80125d2:	709a      	strb	r2, [r3, #2]
 80125d4:	2200      	movs	r2, #0
 80125d6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	2200      	movs	r2, #0
 80125dc:	f042 0201 	orr.w	r2, r2, #1
 80125e0:	711a      	strb	r2, [r3, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	715a      	strb	r2, [r3, #5]
 80125e6:	2200      	movs	r2, #0
 80125e8:	719a      	strb	r2, [r3, #6]
 80125ea:	2200      	movs	r2, #0
 80125ec:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80125ee:	687a      	ldr	r2, [r7, #4]
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80125f4:	f7f7 f864 	bl	80096c0 <ZIGBEE_CmdTransfer>
    retval = zb_ipc_m4_get_retval();
 80125f8:	f7fe ffa4 	bl	8011544 <zb_ipc_m4_get_retval>
 80125fc:	60b8      	str	r0, [r7, #8]
    return retval != 0 ? true : false;
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	2b00      	cmp	r3, #0
 8012602:	bf14      	ite	ne
 8012604:	2301      	movne	r3, #1
 8012606:	2300      	moveq	r3, #0
 8012608:	b2db      	uxtb	r3, r3
}
 801260a:	4618      	mov	r0, r3
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    Pre_ZigbeeCmdProcessing();
 801261a:	f7f7 f88f 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801261e:	f7f7 f81f 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012622:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2200      	movs	r2, #0
 8012628:	f042 0203 	orr.w	r2, r2, #3
 801262c:	701a      	strb	r2, [r3, #0]
 801262e:	2200      	movs	r2, #0
 8012630:	f042 0204 	orr.w	r2, r2, #4
 8012634:	705a      	strb	r2, [r3, #1]
 8012636:	2200      	movs	r2, #0
 8012638:	709a      	strb	r2, [r3, #2]
 801263a:	2200      	movs	r2, #0
 801263c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	2200      	movs	r2, #0
 8012642:	f042 0201 	orr.w	r2, r2, #1
 8012646:	711a      	strb	r2, [r3, #4]
 8012648:	2200      	movs	r2, #0
 801264a:	715a      	strb	r2, [r3, #5]
 801264c:	2200      	movs	r2, #0
 801264e:	719a      	strb	r2, [r3, #6]
 8012650:	2200      	movs	r2, #0
 8012652:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801265a:	f7f7 f831 	bl	80096c0 <ZIGBEE_CmdTransfer>
    retval = zb_ipc_m4_get_retval();
 801265e:	f7fe ff71 	bl	8011544 <zb_ipc_m4_get_retval>
 8012662:	60b8      	str	r0, [r7, #8]
    return retval != 0 ? true : false;
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	2b00      	cmp	r3, #0
 8012668:	bf14      	ite	ne
 801266a:	2301      	movne	r3, #1
 801266c:	2300      	moveq	r3, #0
 801266e:	b2db      	uxtb	r3, r3
}
 8012670:	4618      	mov	r0, r3
 8012672:	3710      	adds	r7, #16
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	4608      	mov	r0, r1
 8012682:	4611      	mov	r1, r2
 8012684:	461a      	mov	r2, r3
 8012686:	4603      	mov	r3, r0
 8012688:	70fb      	strb	r3, [r7, #3]
 801268a:	460b      	mov	r3, r1
 801268c:	803b      	strh	r3, [r7, #0]
 801268e:	4613      	mov	r3, r2
 8012690:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012692:	f7f7 f853 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012696:	f7f6 ffe3 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801269a:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2200      	movs	r2, #0
 80126a0:	f042 0204 	orr.w	r2, r2, #4
 80126a4:	701a      	strb	r2, [r3, #0]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f042 0204 	orr.w	r2, r2, #4
 80126ac:	705a      	strb	r2, [r3, #1]
 80126ae:	2200      	movs	r2, #0
 80126b0:	709a      	strb	r2, [r3, #2]
 80126b2:	2200      	movs	r2, #0
 80126b4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2200      	movs	r2, #0
 80126ba:	f042 0204 	orr.w	r2, r2, #4
 80126be:	711a      	strb	r2, [r3, #4]
 80126c0:	2200      	movs	r2, #0
 80126c2:	715a      	strb	r2, [r3, #5]
 80126c4:	2200      	movs	r2, #0
 80126c6:	719a      	strb	r2, [r3, #6]
 80126c8:	2200      	movs	r2, #0
 80126ca:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 80126d2:	78fa      	ldrb	r2, [r7, #3]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 80126d8:	883a      	ldrh	r2, [r7, #0]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 80126de:	78ba      	ldrb	r2, [r7, #2]
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 80126e4:	f7f6 ffec 	bl	80096c0 <ZIGBEE_CmdTransfer>
    return (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 80126e8:	f7fe ff2c 	bl	8011544 <zb_ipc_m4_get_retval>
 80126ec:	4603      	mov	r3, r0
 80126ee:	b2db      	uxtb	r3, r3
    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012700:	f7f7 f81c 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012704:	f7f6 ffac 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8012708:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2200      	movs	r2, #0
 801270e:	f042 0206 	orr.w	r2, r2, #6
 8012712:	701a      	strb	r2, [r3, #0]
 8012714:	2200      	movs	r2, #0
 8012716:	f042 0204 	orr.w	r2, r2, #4
 801271a:	705a      	strb	r2, [r3, #1]
 801271c:	2200      	movs	r2, #0
 801271e:	709a      	strb	r2, [r3, #2]
 8012720:	2200      	movs	r2, #0
 8012722:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2200      	movs	r2, #0
 8012728:	f042 0201 	orr.w	r2, r2, #1
 801272c:	711a      	strb	r2, [r3, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	715a      	strb	r2, [r3, #5]
 8012732:	2200      	movs	r2, #0
 8012734:	719a      	strb	r2, [r3, #6]
 8012736:	2200      	movs	r2, #0
 8012738:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8012740:	f7f6 ffbe 	bl	80096c0 <ZIGBEE_CmdTransfer>
}
 8012744:	bf00      	nop
 8012746:	3710      	adds	r7, #16
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b084      	sub	sp, #16
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8012754:	f7f6 fff2 	bl	800973c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8012758:	f7f6 ff82 	bl	8009660 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801275c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	2200      	movs	r2, #0
 8012762:	f042 020b 	orr.w	r2, r2, #11
 8012766:	701a      	strb	r2, [r3, #0]
 8012768:	2200      	movs	r2, #0
 801276a:	f042 0204 	orr.w	r2, r2, #4
 801276e:	705a      	strb	r2, [r3, #1]
 8012770:	2200      	movs	r2, #0
 8012772:	709a      	strb	r2, [r3, #2]
 8012774:	2200      	movs	r2, #0
 8012776:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2200      	movs	r2, #0
 801277c:	f042 0201 	orr.w	r2, r2, #1
 8012780:	711a      	strb	r2, [r3, #4]
 8012782:	2200      	movs	r2, #0
 8012784:	715a      	strb	r2, [r3, #5]
 8012786:	2200      	movs	r2, #0
 8012788:	719a      	strb	r2, [r3, #6]
 801278a:	2200      	movs	r2, #0
 801278c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8012794:	f7f6 ff94 	bl	80096c0 <ZIGBEE_CmdTransfer>
}
 8012798:	bf00      	nop
 801279a:	3710      	adds	r7, #16
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}

080127a0 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	60b9      	str	r1, [r7, #8]
 80127aa:	607a      	str	r2, [r7, #4]
 80127ac:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 80127ae:	68b8      	ldr	r0, [r7, #8]
 80127b0:	f001 ff12 	bl	80145d8 <malloc>
 80127b4:	4603      	mov	r3, r0
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3710      	adds	r7, #16
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}

080127be <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 80127be:	b580      	push	{r7, lr}
 80127c0:	b084      	sub	sp, #16
 80127c2:	af00      	add	r7, sp, #0
 80127c4:	60f8      	str	r0, [r7, #12]
 80127c6:	60b9      	str	r1, [r7, #8]
 80127c8:	607a      	str	r2, [r7, #4]
 80127ca:	603b      	str	r3, [r7, #0]
    free(ptr);
 80127cc:	68b8      	ldr	r0, [r7, #8]
 80127ce:	f001 ff0b 	bl	80145e8 <free>
}
 80127d2:	bf00      	nop
 80127d4:	3710      	adds	r7, #16
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
	...

080127dc <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 80127dc:	b480      	push	{r7}
 80127de:	b087      	sub	sp, #28
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	4603      	mov	r3, r0
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
 80127e8:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 80127ee:	e00e      	b.n	801280e <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 80127f0:	89fb      	ldrh	r3, [r7, #14]
 80127f2:	0a1b      	lsrs	r3, r3, #8
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	89fb      	ldrh	r3, [r7, #14]
 80127f8:	b2d9      	uxtb	r1, r3
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	1c58      	adds	r0, r3, #1
 80127fe:	6178      	str	r0, [r7, #20]
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	404b      	eors	r3, r1
 8012804:	4908      	ldr	r1, [pc, #32]	; (8012828 <WpanCrc+0x4c>)
 8012806:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801280a:	4053      	eors	r3, r2
 801280c:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	1e5a      	subs	r2, r3, #1
 8012812:	607a      	str	r2, [r7, #4]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d1eb      	bne.n	80127f0 <WpanCrc+0x14>
    }
    return crc;
 8012818:	89fb      	ldrh	r3, [r7, #14]
}
 801281a:	4618      	mov	r0, r3
 801281c:	371c      	adds	r7, #28
 801281e:	46bd      	mov	sp, r7
 8012820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012824:	4770      	bx	lr
 8012826:	bf00      	nop
 8012828:	08016ef4 	.word	0x08016ef4

0801282c <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 801282c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801282e:	b0cf      	sub	sp, #316	; 0x13c
 8012830:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8012832:	2300      	movs	r3, #0
 8012834:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8012838:	2300      	movs	r3, #0
 801283a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 801283e:	2300      	movs	r3, #0
 8012840:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 8012844:	f7f6 ff24 	bl	8009690 <ZIGBEE_Get_NotificationPayloadBuffer>
 8012848:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

    switch (p_notification->ID) {
 801284c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	f240 421c 	movw	r2, #1052	; 0x41c
 8012856:	4293      	cmp	r3, r2
 8012858:	f201 82f0 	bhi.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 801285c:	f240 4205 	movw	r2, #1029	; 0x405
 8012860:	4293      	cmp	r3, r2
 8012862:	d22d      	bcs.n	80128c0 <Zigbee_CallBackProcessing+0x94>
 8012864:	f240 321d 	movw	r2, #797	; 0x31d
 8012868:	4293      	cmp	r3, r2
 801286a:	f201 82e7 	bhi.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 801286e:	f240 3206 	movw	r2, #774	; 0x306
 8012872:	4293      	cmp	r3, r2
 8012874:	d25c      	bcs.n	8012930 <Zigbee_CallBackProcessing+0x104>
 8012876:	f240 2209 	movw	r2, #521	; 0x209
 801287a:	4293      	cmp	r3, r2
 801287c:	f000 847e 	beq.w	801317c <Zigbee_CallBackProcessing+0x950>
 8012880:	f240 2209 	movw	r2, #521	; 0x209
 8012884:	4293      	cmp	r3, r2
 8012886:	f201 82d9 	bhi.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 801288a:	f240 2207 	movw	r2, #519	; 0x207
 801288e:	4293      	cmp	r3, r2
 8012890:	f000 8443 	beq.w	801311a <Zigbee_CallBackProcessing+0x8ee>
 8012894:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8012898:	f081 82d0 	bcs.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 801289c:	f240 2205 	movw	r2, #517	; 0x205
 80128a0:	4293      	cmp	r3, r2
 80128a2:	f000 840c 	beq.w	80130be <Zigbee_CallBackProcessing+0x892>
 80128a6:	f240 2205 	movw	r2, #517	; 0x205
 80128aa:	4293      	cmp	r3, r2
 80128ac:	f201 82c6 	bhi.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 80128b0:	2b3e      	cmp	r3, #62	; 0x3e
 80128b2:	f200 8133 	bhi.w	8012b1c <Zigbee_CallBackProcessing+0x2f0>
 80128b6:	2b0d      	cmp	r3, #13
 80128b8:	f080 80c4 	bcs.w	8012a44 <Zigbee_CallBackProcessing+0x218>
 80128bc:	f001 babe 	b.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 80128c0:	f2a3 4305 	subw	r3, r3, #1029	; 0x405
 80128c4:	2b17      	cmp	r3, #23
 80128c6:	f201 82b9 	bhi.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 80128ca:	a201      	add	r2, pc, #4	; (adr r2, 80128d0 <Zigbee_CallBackProcessing+0xa4>)
 80128cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128d0:	08013ad3 	.word	0x08013ad3
 80128d4:	08013e3d 	.word	0x08013e3d
 80128d8:	08013e3d 	.word	0x08013e3d
 80128dc:	08013e3d 	.word	0x08013e3d
 80128e0:	08013e3d 	.word	0x08013e3d
 80128e4:	08013b1b 	.word	0x08013b1b
 80128e8:	08013e3d 	.word	0x08013e3d
 80128ec:	08013e3d 	.word	0x08013e3d
 80128f0:	08013e3d 	.word	0x08013e3d
 80128f4:	08013e3d 	.word	0x08013e3d
 80128f8:	08013b63 	.word	0x08013b63
 80128fc:	08013e3d 	.word	0x08013e3d
 8012900:	08013e3d 	.word	0x08013e3d
 8012904:	08013e3d 	.word	0x08013e3d
 8012908:	08013bd7 	.word	0x08013bd7
 801290c:	08013e3d 	.word	0x08013e3d
 8012910:	08013e3d 	.word	0x08013e3d
 8012914:	08013c61 	.word	0x08013c61
 8012918:	08013e3d 	.word	0x08013e3d
 801291c:	08013cbb 	.word	0x08013cbb
 8012920:	08013e3d 	.word	0x08013e3d
 8012924:	08013d15 	.word	0x08013d15
 8012928:	08013e3d 	.word	0x08013e3d
 801292c:	08013d6f 	.word	0x08013d6f
 8012930:	f2a3 3306 	subw	r3, r3, #774	; 0x306
 8012934:	2b17      	cmp	r3, #23
 8012936:	f201 8281 	bhi.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 801293a:	a201      	add	r2, pc, #4	; (adr r2, 8012940 <Zigbee_CallBackProcessing+0x114>)
 801293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012940:	080131fd 	.word	0x080131fd
 8012944:	08013e3d 	.word	0x08013e3d
 8012948:	080132b5 	.word	0x080132b5
 801294c:	08013e3d 	.word	0x08013e3d
 8012950:	08013e3d 	.word	0x08013e3d
 8012954:	08013e3d 	.word	0x08013e3d
 8012958:	08013311 	.word	0x08013311
 801295c:	08013e3d 	.word	0x08013e3d
 8012960:	0801336d 	.word	0x0801336d
 8012964:	08013e3d 	.word	0x08013e3d
 8012968:	08013e3d 	.word	0x08013e3d
 801296c:	08013e3d 	.word	0x08013e3d
 8012970:	08013e3d 	.word	0x08013e3d
 8012974:	08013e3d 	.word	0x08013e3d
 8012978:	08013e3d 	.word	0x08013e3d
 801297c:	08013e3d 	.word	0x08013e3d
 8012980:	08013e3d 	.word	0x08013e3d
 8012984:	08013e3d 	.word	0x08013e3d
 8012988:	08013e3d 	.word	0x08013e3d
 801298c:	08013e3d 	.word	0x08013e3d
 8012990:	08013e3d 	.word	0x08013e3d
 8012994:	08013e3d 	.word	0x08013e3d
 8012998:	08013e3d 	.word	0x08013e3d
 801299c:	08013259 	.word	0x08013259
 80129a0:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80129a4:	2b24      	cmp	r3, #36	; 0x24
 80129a6:	f201 8249 	bhi.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 80129aa:	a201      	add	r2, pc, #4	; (adr r2, 80129b0 <Zigbee_CallBackProcessing+0x184>)
 80129ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129b0:	0801346b 	.word	0x0801346b
 80129b4:	08013e3d 	.word	0x08013e3d
 80129b8:	080134c3 	.word	0x080134c3
 80129bc:	08013e3d 	.word	0x08013e3d
 80129c0:	08013535 	.word	0x08013535
 80129c4:	08013e3d 	.word	0x08013e3d
 80129c8:	0801358d 	.word	0x0801358d
 80129cc:	08013e3d 	.word	0x08013e3d
 80129d0:	080135e5 	.word	0x080135e5
 80129d4:	08013e3d 	.word	0x08013e3d
 80129d8:	0801363d 	.word	0x0801363d
 80129dc:	08013e3d 	.word	0x08013e3d
 80129e0:	08013695 	.word	0x08013695
 80129e4:	08013e3d 	.word	0x08013e3d
 80129e8:	080136eb 	.word	0x080136eb
 80129ec:	08013e3d 	.word	0x08013e3d
 80129f0:	08013e3d 	.word	0x08013e3d
 80129f4:	08013e3d 	.word	0x08013e3d
 80129f8:	080133c9 	.word	0x080133c9
 80129fc:	08013e3d 	.word	0x08013e3d
 8012a00:	08013735 	.word	0x08013735
 8012a04:	08013e3d 	.word	0x08013e3d
 8012a08:	0801378f 	.word	0x0801378f
 8012a0c:	08013e3d 	.word	0x08013e3d
 8012a10:	080137e9 	.word	0x080137e9
 8012a14:	08013e3d 	.word	0x08013e3d
 8012a18:	0801385d 	.word	0x0801385d
 8012a1c:	08013e3d 	.word	0x08013e3d
 8012a20:	080138b7 	.word	0x080138b7
 8012a24:	08013e3d 	.word	0x08013e3d
 8012a28:	08013911 	.word	0x08013911
 8012a2c:	08013e3d 	.word	0x08013e3d
 8012a30:	0801396b 	.word	0x0801396b
 8012a34:	08013e3d 	.word	0x08013e3d
 8012a38:	080139c5 	.word	0x080139c5
 8012a3c:	08013e3d 	.word	0x08013e3d
 8012a40:	08013a1f 	.word	0x08013a1f
 8012a44:	3b0d      	subs	r3, #13
 8012a46:	2b31      	cmp	r3, #49	; 0x31
 8012a48:	f201 81f8 	bhi.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 8012a4c:	a201      	add	r2, pc, #4	; (adr r2, 8012a54 <Zigbee_CallBackProcessing+0x228>)
 8012a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a52:	bf00      	nop
 8012a54:	08012b31 	.word	0x08012b31
 8012a58:	08013e3d 	.word	0x08013e3d
 8012a5c:	08013e3d 	.word	0x08013e3d
 8012a60:	08013e3d 	.word	0x08013e3d
 8012a64:	08013e3d 	.word	0x08013e3d
 8012a68:	08012b97 	.word	0x08012b97
 8012a6c:	08013e3d 	.word	0x08013e3d
 8012a70:	08013e3d 	.word	0x08013e3d
 8012a74:	08013e3d 	.word	0x08013e3d
 8012a78:	08013e3d 	.word	0x08013e3d
 8012a7c:	08013e3d 	.word	0x08013e3d
 8012a80:	08013e3d 	.word	0x08013e3d
 8012a84:	08013e3d 	.word	0x08013e3d
 8012a88:	08012c0b 	.word	0x08012c0b
 8012a8c:	08013e3d 	.word	0x08013e3d
 8012a90:	08013e3d 	.word	0x08013e3d
 8012a94:	08012c67 	.word	0x08012c67
 8012a98:	08013e3d 	.word	0x08013e3d
 8012a9c:	08012ccf 	.word	0x08012ccf
 8012aa0:	08013e3d 	.word	0x08013e3d
 8012aa4:	08012d37 	.word	0x08012d37
 8012aa8:	08013e3d 	.word	0x08013e3d
 8012aac:	08012d9f 	.word	0x08012d9f
 8012ab0:	08013e3d 	.word	0x08013e3d
 8012ab4:	08013e3d 	.word	0x08013e3d
 8012ab8:	08012e07 	.word	0x08012e07
 8012abc:	08013e3d 	.word	0x08013e3d
 8012ac0:	08013e3d 	.word	0x08013e3d
 8012ac4:	08012e89 	.word	0x08012e89
 8012ac8:	08013e3d 	.word	0x08013e3d
 8012acc:	08012ef1 	.word	0x08012ef1
 8012ad0:	08013e3d 	.word	0x08013e3d
 8012ad4:	08013e3d 	.word	0x08013e3d
 8012ad8:	08013e3d 	.word	0x08013e3d
 8012adc:	08012f0f 	.word	0x08012f0f
 8012ae0:	08013e3d 	.word	0x08013e3d
 8012ae4:	08013e3d 	.word	0x08013e3d
 8012ae8:	08013e3d 	.word	0x08013e3d
 8012aec:	08012f67 	.word	0x08012f67
 8012af0:	08013e3d 	.word	0x08013e3d
 8012af4:	08013e3d 	.word	0x08013e3d
 8012af8:	08013e3d 	.word	0x08013e3d
 8012afc:	08013e3d 	.word	0x08013e3d
 8012b00:	08013e3d 	.word	0x08013e3d
 8012b04:	08012fb7 	.word	0x08012fb7
 8012b08:	08013e3d 	.word	0x08013e3d
 8012b0c:	0801300f 	.word	0x0801300f
 8012b10:	08013e3d 	.word	0x08013e3d
 8012b14:	08013067 	.word	0x08013067
 8012b18:	08013de9 	.word	0x08013de9
 8012b1c:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8012b20:	f081 818c 	bcs.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
 8012b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b28:	f63f af3a 	bhi.w	80129a0 <Zigbee_CallBackProcessing+0x174>
 8012b2c:	f001 b986 	b.w	8013e3c <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 8012b30:	4bbb      	ldr	r3, [pc, #748]	; (8012e20 <Zigbee_CallBackProcessing+0x5f4>)
 8012b32:	2200      	movs	r2, #0
 8012b34:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 8012b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d006      	beq.n	8012b4e <Zigbee_CallBackProcessing+0x322>
 8012b40:	4bb8      	ldr	r3, [pc, #736]	; (8012e24 <Zigbee_CallBackProcessing+0x5f8>)
 8012b42:	4ab9      	ldr	r2, [pc, #740]	; (8012e28 <Zigbee_CallBackProcessing+0x5fc>)
 8012b44:	f640 5129 	movw	r1, #3369	; 0xd29
 8012b48:	48b8      	ldr	r0, [pc, #736]	; (8012e2c <Zigbee_CallBackProcessing+0x600>)
 8012b4a:	f001 fd27 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8012b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b52:	689b      	ldr	r3, [r3, #8]
 8012b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f001 8171 	beq.w	8013e44 <Zigbee_CallBackProcessing+0x1618>
 8012b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	f001 816b 	beq.w	8013e44 <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8012b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b72:	681a      	ldr	r2, [r3, #0]
 8012b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012b78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012b7c:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 8012b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b82:	685a      	ldr	r2, [r3, #4]
 8012b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012b88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	4610      	mov	r0, r2
 8012b90:	4798      	blx	r3
            }
            break;
 8012b92:	f001 b957 	b.w	8013e44 <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 8012b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	2b03      	cmp	r3, #3
 8012b9e:	d006      	beq.n	8012bae <Zigbee_CallBackProcessing+0x382>
 8012ba0:	4ba3      	ldr	r3, [pc, #652]	; (8012e30 <Zigbee_CallBackProcessing+0x604>)
 8012ba2:	4aa1      	ldr	r2, [pc, #644]	; (8012e28 <Zigbee_CallBackProcessing+0x5fc>)
 8012ba4:	f640 5138 	movw	r1, #3384	; 0xd38
 8012ba8:	48a0      	ldr	r0, [pc, #640]	; (8012e2c <Zigbee_CallBackProcessing+0x600>)
 8012baa:	f001 fcf7 	bl	801459c <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 8012bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bb2:	691a      	ldr	r2, [r3, #16]
 8012bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012bb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012bbc:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8012bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012bc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	685d      	ldr	r5, [r3, #4]
 8012bca:	4b95      	ldr	r3, [pc, #596]	; (8012e20 <Zigbee_CallBackProcessing+0x5f4>)
 8012bcc:	6818      	ldr	r0, [r3, #0]
 8012bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bd2:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 8012bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012bd8:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8012bda:	461e      	mov	r6, r3
 8012bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012be0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	689b      	ldr	r3, [r3, #8]
 8012be8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012bec:	f2a2 141d 	subw	r4, r2, #285	; 0x11d
 8012bf0:	4632      	mov	r2, r6
 8012bf2:	47a8      	blx	r5
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 8012bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012bfc:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 8012c06:	f001 b980 	b.w	8013f0a <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 8012c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c0e:	685b      	ldr	r3, [r3, #4]
 8012c10:	2b01      	cmp	r3, #1
 8012c12:	d006      	beq.n	8012c22 <Zigbee_CallBackProcessing+0x3f6>
 8012c14:	4b83      	ldr	r3, [pc, #524]	; (8012e24 <Zigbee_CallBackProcessing+0x5f8>)
 8012c16:	4a84      	ldr	r2, [pc, #528]	; (8012e28 <Zigbee_CallBackProcessing+0x5fc>)
 8012c18:	f640 5144 	movw	r1, #3396	; 0xd44
 8012c1c:	4883      	ldr	r0, [pc, #524]	; (8012e2c <Zigbee_CallBackProcessing+0x600>)
 8012c1e:	f001 fcbd 	bl	801459c <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 8012c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c26:	689a      	ldr	r2, [r3, #8]
 8012c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012c2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012c30:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 8012c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012c36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f001 8102 	beq.w	8013e48 <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 8012c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012c48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012c54:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8012c58:	6812      	ldr	r2, [r2, #0]
 8012c5a:	6852      	ldr	r2, [r2, #4]
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	2000      	movs	r0, #0
 8012c60:	4798      	blx	r3
            }
            break;
 8012c62:	f001 b8f1 	b.w	8013e48 <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 8012c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	2b02      	cmp	r3, #2
 8012c6e:	d006      	beq.n	8012c7e <Zigbee_CallBackProcessing+0x452>
 8012c70:	4b70      	ldr	r3, [pc, #448]	; (8012e34 <Zigbee_CallBackProcessing+0x608>)
 8012c72:	4a6d      	ldr	r2, [pc, #436]	; (8012e28 <Zigbee_CallBackProcessing+0x5fc>)
 8012c74:	f640 514d 	movw	r1, #3405	; 0xd4d
 8012c78:	486c      	ldr	r0, [pc, #432]	; (8012e2c <Zigbee_CallBackProcessing+0x600>)
 8012c7a:	f001 fc8f 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012c82:	68db      	ldr	r3, [r3, #12]
 8012c84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f001 80dd 	beq.w	8013e4c <Zigbee_CallBackProcessing+0x1620>
 8012c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f001 80d7 	beq.w	8013e4c <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ca8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012cac:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cb2:	689b      	ldr	r3, [r3, #8]
 8012cb4:	b2da      	uxtb	r2, r3
 8012cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012cba:	6859      	ldr	r1, [r3, #4]
 8012cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012cc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	4610      	mov	r0, r2
 8012cc8:	4798      	blx	r3
            }
            break;
 8012cca:	f001 b8bf 	b.w	8013e4c <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 8012cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	2b02      	cmp	r3, #2
 8012cd6:	d006      	beq.n	8012ce6 <Zigbee_CallBackProcessing+0x4ba>
 8012cd8:	4b56      	ldr	r3, [pc, #344]	; (8012e34 <Zigbee_CallBackProcessing+0x608>)
 8012cda:	4a53      	ldr	r2, [pc, #332]	; (8012e28 <Zigbee_CallBackProcessing+0x5fc>)
 8012cdc:	f640 5158 	movw	r1, #3416	; 0xd58
 8012ce0:	4852      	ldr	r0, [pc, #328]	; (8012e2c <Zigbee_CallBackProcessing+0x600>)
 8012ce2:	f001 fc5b 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f001 80ab 	beq.w	8013e50 <Zigbee_CallBackProcessing+0x1624>
 8012cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f001 80a5 	beq.w	8013e50 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 8012d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d0a:	681a      	ldr	r2, [r3, #0]
 8012d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012d14:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 8012d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d1a:	689b      	ldr	r3, [r3, #8]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d22:	685a      	ldr	r2, [r3, #4]
 8012d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	4611      	mov	r1, r2
 8012d30:	4798      	blx	r3
            }
            break;
 8012d32:	f001 b88d 	b.w	8013e50 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 8012d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d3a:	685b      	ldr	r3, [r3, #4]
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d006      	beq.n	8012d4e <Zigbee_CallBackProcessing+0x522>
 8012d40:	4b3c      	ldr	r3, [pc, #240]	; (8012e34 <Zigbee_CallBackProcessing+0x608>)
 8012d42:	4a39      	ldr	r2, [pc, #228]	; (8012e28 <Zigbee_CallBackProcessing+0x5fc>)
 8012d44:	f640 5163 	movw	r1, #3427	; 0xd63
 8012d48:	4838      	ldr	r0, [pc, #224]	; (8012e2c <Zigbee_CallBackProcessing+0x600>)
 8012d4a:	f001 fc27 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d52:	68db      	ldr	r3, [r3, #12]
 8012d54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f001 8079 	beq.w	8013e54 <Zigbee_CallBackProcessing+0x1628>
 8012d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f001 8073 	beq.w	8013e54 <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d7c:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d82:	689b      	ldr	r3, [r3, #8]
 8012d84:	b2da      	uxtb	r2, r3
 8012d86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012d8a:	6859      	ldr	r1, [r3, #4]
 8012d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012d90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	4610      	mov	r0, r2
 8012d98:	4798      	blx	r3
            }
            break;
 8012d9a:	f001 b85b 	b.w	8013e54 <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 8012d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	2b02      	cmp	r3, #2
 8012da6:	d006      	beq.n	8012db6 <Zigbee_CallBackProcessing+0x58a>
 8012da8:	4b22      	ldr	r3, [pc, #136]	; (8012e34 <Zigbee_CallBackProcessing+0x608>)
 8012daa:	4a1f      	ldr	r2, [pc, #124]	; (8012e28 <Zigbee_CallBackProcessing+0x5fc>)
 8012dac:	f640 516e 	movw	r1, #3438	; 0xd6e
 8012db0:	481e      	ldr	r0, [pc, #120]	; (8012e2c <Zigbee_CallBackProcessing+0x600>)
 8012db2:	f001 fbf3 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	f001 8047 	beq.w	8013e58 <Zigbee_CallBackProcessing+0x162c>
 8012dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	f001 8041 	beq.w	8013e58 <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012dd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012dda:	681a      	ldr	r2, [r3, #0]
 8012ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012de4:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012dea:	689b      	ldr	r3, [r3, #8]
 8012dec:	b2da      	uxtb	r2, r3
 8012dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012df2:	6859      	ldr	r1, [r3, #4]
 8012df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	4610      	mov	r0, r2
 8012e00:	4798      	blx	r3
            }
            break;
 8012e02:	f001 b829 	b.w	8013e58 <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 8012e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	2b02      	cmp	r3, #2
 8012e0e:	d013      	beq.n	8012e38 <Zigbee_CallBackProcessing+0x60c>
 8012e10:	4b08      	ldr	r3, [pc, #32]	; (8012e34 <Zigbee_CallBackProcessing+0x608>)
 8012e12:	4a05      	ldr	r2, [pc, #20]	; (8012e28 <Zigbee_CallBackProcessing+0x5fc>)
 8012e14:	f640 5179 	movw	r1, #3449	; 0xd79
 8012e18:	4804      	ldr	r0, [pc, #16]	; (8012e2c <Zigbee_CallBackProcessing+0x600>)
 8012e1a:	f001 fbbf 	bl	801459c <__assert_func>
 8012e1e:	bf00      	nop
 8012e20:	200017b8 	.word	0x200017b8
 8012e24:	08016c50 	.word	0x08016c50
 8012e28:	08017120 	.word	0x08017120
 8012e2c:	08016bb8 	.word	0x08016bb8
 8012e30:	08016c6c 	.word	0x08016c6c
 8012e34:	08016c88 	.word	0x08016c88
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f001 8008 	beq.w	8013e5c <Zigbee_CallBackProcessing+0x1630>
 8012e4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	f001 8002 	beq.w	8013e5c <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 8012e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e5c:	681a      	ldr	r2, [r3, #0]
 8012e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e66:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 8012e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e6c:	689b      	ldr	r3, [r3, #8]
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012e74:	6859      	ldr	r1, [r3, #4]
 8012e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	4610      	mov	r0, r2
 8012e82:	4798      	blx	r3
            }
            break;
 8012e84:	f000 bfea 	b.w	8013e5c <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 8012e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	d006      	beq.n	8012ea0 <Zigbee_CallBackProcessing+0x674>
 8012e92:	4bc2      	ldr	r3, [pc, #776]	; (801319c <Zigbee_CallBackProcessing+0x970>)
 8012e94:	4ac2      	ldr	r2, [pc, #776]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 8012e96:	f640 5184 	movw	r1, #3460	; 0xd84
 8012e9a:	48c2      	ldr	r0, [pc, #776]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 8012e9c:	f001 fb7e 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ea4:	68db      	ldr	r3, [r3, #12]
 8012ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012eaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	f000 87d6 	beq.w	8013e60 <Zigbee_CallBackProcessing+0x1634>
 8012eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f000 87d0 	beq.w	8013e60 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8012ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ec4:	681a      	ldr	r2, [r3, #0]
 8012ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012eca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012ece:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8012ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ed4:	689b      	ldr	r3, [r3, #8]
 8012ed6:	b2da      	uxtb	r2, r3
 8012ed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012edc:	6859      	ldr	r1, [r3, #4]
 8012ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ee2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	4610      	mov	r0, r2
 8012eea:	4798      	blx	r3
            }
            break;
 8012eec:	f000 bfb8 	b.w	8013e60 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 8012ef0:	4bad      	ldr	r3, [pc, #692]	; (80131a8 <Zigbee_CallBackProcessing+0x97c>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f000 87b5 	beq.w	8013e64 <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 8012efa:	4bab      	ldr	r3, [pc, #684]	; (80131a8 <Zigbee_CallBackProcessing+0x97c>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	4aab      	ldr	r2, [pc, #684]	; (80131ac <Zigbee_CallBackProcessing+0x980>)
 8012f00:	6812      	ldr	r2, [r2, #0]
 8012f02:	49ab      	ldr	r1, [pc, #684]	; (80131b0 <Zigbee_CallBackProcessing+0x984>)
 8012f04:	6809      	ldr	r1, [r1, #0]
 8012f06:	4610      	mov	r0, r2
 8012f08:	4798      	blx	r3
            }
            break;
 8012f0a:	f000 bfab 	b.w	8013e64 <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 8012f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	2b02      	cmp	r3, #2
 8012f16:	d006      	beq.n	8012f26 <Zigbee_CallBackProcessing+0x6fa>
 8012f18:	4ba0      	ldr	r3, [pc, #640]	; (801319c <Zigbee_CallBackProcessing+0x970>)
 8012f1a:	4aa1      	ldr	r2, [pc, #644]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 8012f1c:	f640 5195 	movw	r1, #3477	; 0xd95
 8012f20:	48a0      	ldr	r0, [pc, #640]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 8012f22:	f001 fb3b 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f2a:	68db      	ldr	r3, [r3, #12]
 8012f2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	f000 8797 	beq.w	8013e68 <Zigbee_CallBackProcessing+0x163c>
 8012f3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f000 8791 	beq.w	8013e68 <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8012f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	637b      	str	r3, [r7, #52]	; 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8012f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f52:	689b      	ldr	r3, [r3, #8]
 8012f54:	4618      	mov	r0, r3
 8012f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f5a:	685a      	ldr	r2, [r3, #4]
 8012f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f5e:	4611      	mov	r1, r2
 8012f60:	4798      	blx	r3
            }
            break;
 8012f62:	f000 bf81 	b.w	8013e68 <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 8012f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d006      	beq.n	8012f7e <Zigbee_CallBackProcessing+0x752>
 8012f70:	4b90      	ldr	r3, [pc, #576]	; (80131b4 <Zigbee_CallBackProcessing+0x988>)
 8012f72:	4a8b      	ldr	r2, [pc, #556]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 8012f74:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8012f78:	488a      	ldr	r0, [pc, #552]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 8012f7a:	f001 fb0f 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8012f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f82:	689b      	ldr	r3, [r3, #8]
 8012f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f000 876d 	beq.w	8013e6c <Zigbee_CallBackProcessing+0x1640>
 8012f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	f000 8767 	beq.w	8013e6c <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8012f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	63bb      	str	r3, [r7, #56]	; 0x38
                callback(info->arg);
 8012fa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012faa:	685a      	ldr	r2, [r3, #4]
 8012fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fae:	4610      	mov	r0, r2
 8012fb0:	4798      	blx	r3
            }
            break;
 8012fb2:	f000 bf5b 	b.w	8013e6c <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 8012fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	2b02      	cmp	r3, #2
 8012fbe:	d006      	beq.n	8012fce <Zigbee_CallBackProcessing+0x7a2>
 8012fc0:	4b76      	ldr	r3, [pc, #472]	; (801319c <Zigbee_CallBackProcessing+0x970>)
 8012fc2:	4a77      	ldr	r2, [pc, #476]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 8012fc4:	f640 51ac 	movw	r1, #3500	; 0xdac
 8012fc8:	4876      	ldr	r0, [pc, #472]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 8012fca:	f001 fae7 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8012fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8012fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	f000 8747 	beq.w	8013e70 <Zigbee_CallBackProcessing+0x1644>
 8012fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	f000 8741 	beq.w	8013e70 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8012fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 8012ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ffa:	689b      	ldr	r3, [r3, #8]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013002:	685a      	ldr	r2, [r3, #4]
 8013004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013006:	4611      	mov	r1, r2
 8013008:	4798      	blx	r3
            }
            break;
 801300a:	f000 bf31 	b.w	8013e70 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 801300e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	2b02      	cmp	r3, #2
 8013016:	d006      	beq.n	8013026 <Zigbee_CallBackProcessing+0x7fa>
 8013018:	4b60      	ldr	r3, [pc, #384]	; (801319c <Zigbee_CallBackProcessing+0x970>)
 801301a:	4a61      	ldr	r2, [pc, #388]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 801301c:	f640 51b8 	movw	r1, #3512	; 0xdb8
 8013020:	4860      	ldr	r0, [pc, #384]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 8013022:	f001 fabb 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801302a:	68db      	ldr	r3, [r3, #12]
 801302c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013030:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013034:	2b00      	cmp	r3, #0
 8013036:	f000 871d 	beq.w	8013e74 <Zigbee_CallBackProcessing+0x1648>
 801303a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	f000 8717 	beq.w	8013e74 <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 8013046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	643b      	str	r3, [r7, #64]	; 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 801304e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	4618      	mov	r0, r3
 8013056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801305a:	685a      	ldr	r2, [r3, #4]
 801305c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801305e:	4611      	mov	r1, r2
 8013060:	4798      	blx	r3
            }
            break;
 8013062:	f000 bf07 	b.w	8013e74 <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 8013066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	2b02      	cmp	r3, #2
 801306e:	d006      	beq.n	801307e <Zigbee_CallBackProcessing+0x852>
 8013070:	4b4a      	ldr	r3, [pc, #296]	; (801319c <Zigbee_CallBackProcessing+0x970>)
 8013072:	4a4b      	ldr	r2, [pc, #300]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 8013074:	f640 51c4 	movw	r1, #3524	; 0xdc4
 8013078:	484a      	ldr	r0, [pc, #296]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 801307a:	f001 fa8f 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801307e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013082:	68db      	ldr	r3, [r3, #12]
 8013084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801308c:	2b00      	cmp	r3, #0
 801308e:	f000 86f3 	beq.w	8013e78 <Zigbee_CallBackProcessing+0x164c>
 8013092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	2b00      	cmp	r3, #0
 801309a:	f000 86ed 	beq.w	8013e78 <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 801309e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	647b      	str	r3, [r7, #68]	; 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 80130a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	4618      	mov	r0, r3
 80130ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130b2:	685a      	ldr	r2, [r3, #4]
 80130b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130b6:	4611      	mov	r1, r2
 80130b8:	4798      	blx	r3
            }
            break;
 80130ba:	f000 bedd 	b.w	8013e78 <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 80130be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	2b02      	cmp	r3, #2
 80130c6:	d006      	beq.n	80130d6 <Zigbee_CallBackProcessing+0x8aa>
 80130c8:	4b34      	ldr	r3, [pc, #208]	; (801319c <Zigbee_CallBackProcessing+0x970>)
 80130ca:	4a35      	ldr	r2, [pc, #212]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 80130cc:	f640 51cf 	movw	r1, #3535	; 0xdcf
 80130d0:	4834      	ldr	r0, [pc, #208]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 80130d2:	f001 fa63 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80130d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80130e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f000 86c9 	beq.w	8013e7c <Zigbee_CallBackProcessing+0x1650>
 80130ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f000 86c3 	beq.w	8013e7c <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 80130f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8013100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	4618      	mov	r0, r3
 8013108:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801310c:	685a      	ldr	r2, [r3, #4]
 801310e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013112:	4611      	mov	r1, r2
 8013114:	4798      	blx	r3
            }
            break;
 8013116:	f000 beb1 	b.w	8013e7c <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 801311a:	2300      	movs	r3, #0
 801311c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

            assert(p_notification->Size == 2);
 8013120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	2b02      	cmp	r3, #2
 8013128:	d006      	beq.n	8013138 <Zigbee_CallBackProcessing+0x90c>
 801312a:	4b1c      	ldr	r3, [pc, #112]	; (801319c <Zigbee_CallBackProcessing+0x970>)
 801312c:	4a1c      	ldr	r2, [pc, #112]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 801312e:	f640 51df 	movw	r1, #3551	; 0xddf
 8013132:	481c      	ldr	r0, [pc, #112]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 8013134:	f001 fa32 	bl	801459c <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8013138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801313c:	689b      	ldr	r3, [r3, #8]
 801313e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8013142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            if (aps_filter_cb->callback != NULL) {
 801314c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d00b      	beq.n	801316e <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8013156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801315a:	685b      	ldr	r3, [r3, #4]
 801315c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013160:	6892      	ldr	r2, [r2, #8]
 8013162:	4611      	mov	r1, r2
 8013164:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8013168:	4798      	blx	r3
 801316a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 801316e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8013172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013176:	60da      	str	r2, [r3, #12]
            break;
 8013178:	f000 bec7 	b.w	8013f0a <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 801317c:	2300      	movs	r3, #0
 801317e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

            assert(p_notification->Size == 2);
 8013182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	2b02      	cmp	r3, #2
 801318a:	d015      	beq.n	80131b8 <Zigbee_CallBackProcessing+0x98c>
 801318c:	4b03      	ldr	r3, [pc, #12]	; (801319c <Zigbee_CallBackProcessing+0x970>)
 801318e:	4a04      	ldr	r2, [pc, #16]	; (80131a0 <Zigbee_CallBackProcessing+0x974>)
 8013190:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 8013194:	4803      	ldr	r0, [pc, #12]	; (80131a4 <Zigbee_CallBackProcessing+0x978>)
 8013196:	f001 fa01 	bl	801459c <__assert_func>
 801319a:	bf00      	nop
 801319c:	08016c88 	.word	0x08016c88
 80131a0:	08017120 	.word	0x08017120
 80131a4:	08016bb8 	.word	0x08016bb8
 80131a8:	200017a8 	.word	0x200017a8
 80131ac:	200017b8 	.word	0x200017b8
 80131b0:	200017ac 	.word	0x200017ac
 80131b4:	08016c50 	.word	0x08016c50
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 80131b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131bc:	689b      	ldr	r3, [r3, #8]
 80131be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 80131c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if (aps_filter_cb->callback != NULL) {
 80131cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80131d0:	685b      	ldr	r3, [r3, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d00b      	beq.n	80131ee <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 80131d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80131e0:	6892      	ldr	r2, [r2, #8]
 80131e2:	4611      	mov	r1, r2
 80131e4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80131e8:	4798      	blx	r3
 80131ea:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 80131ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80131f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80131f6:	60da      	str	r2, [r3, #12]
            break;
 80131f8:	f000 be87 	b.w	8013f0a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 80131fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	2b02      	cmp	r3, #2
 8013204:	d006      	beq.n	8013214 <Zigbee_CallBackProcessing+0x9e8>
 8013206:	4bc5      	ldr	r3, [pc, #788]	; (801351c <Zigbee_CallBackProcessing+0xcf0>)
 8013208:	4ac5      	ldr	r2, [pc, #788]	; (8013520 <Zigbee_CallBackProcessing+0xcf4>)
 801320a:	f640 51fc 	movw	r1, #3580	; 0xdfc
 801320e:	48c5      	ldr	r0, [pc, #788]	; (8013524 <Zigbee_CallBackProcessing+0xcf8>)
 8013210:	f001 f9c4 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801321e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013222:	2b00      	cmp	r3, #0
 8013224:	f000 862c 	beq.w	8013e80 <Zigbee_CallBackProcessing+0x1654>
 8013228:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	f000 8626 	beq.w	8013e80 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 8013234:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 801323e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	4618      	mov	r0, r3
 8013246:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801324a:	685a      	ldr	r2, [r3, #4]
 801324c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013250:	4611      	mov	r1, r2
 8013252:	4798      	blx	r3
            }
            break;
 8013254:	f000 be14 	b.w	8013e80 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 8013258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	2b02      	cmp	r3, #2
 8013260:	d006      	beq.n	8013270 <Zigbee_CallBackProcessing+0xa44>
 8013262:	4bae      	ldr	r3, [pc, #696]	; (801351c <Zigbee_CallBackProcessing+0xcf0>)
 8013264:	4aae      	ldr	r2, [pc, #696]	; (8013520 <Zigbee_CallBackProcessing+0xcf4>)
 8013266:	f640 6108 	movw	r1, #3592	; 0xe08
 801326a:	48ae      	ldr	r0, [pc, #696]	; (8013524 <Zigbee_CallBackProcessing+0xcf8>)
 801326c:	f001 f996 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013274:	68db      	ldr	r3, [r3, #12]
 8013276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801327a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801327e:	2b00      	cmp	r3, #0
 8013280:	f000 8600 	beq.w	8013e84 <Zigbee_CallBackProcessing+0x1658>
 8013284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	2b00      	cmp	r3, #0
 801328c:	f000 85fa 	beq.w	8013e84 <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 8013290:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 801329a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801329e:	689b      	ldr	r3, [r3, #8]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132a6:	685a      	ldr	r2, [r3, #4]
 80132a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80132ac:	4611      	mov	r1, r2
 80132ae:	4798      	blx	r3
            }
            break;
 80132b0:	f000 bde8 	b.w	8013e84 <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 80132b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	2b02      	cmp	r3, #2
 80132bc:	d006      	beq.n	80132cc <Zigbee_CallBackProcessing+0xaa0>
 80132be:	4b97      	ldr	r3, [pc, #604]	; (801351c <Zigbee_CallBackProcessing+0xcf0>)
 80132c0:	4a97      	ldr	r2, [pc, #604]	; (8013520 <Zigbee_CallBackProcessing+0xcf4>)
 80132c2:	f640 6114 	movw	r1, #3604	; 0xe14
 80132c6:	4897      	ldr	r0, [pc, #604]	; (8013524 <Zigbee_CallBackProcessing+0xcf8>)
 80132c8:	f001 f968 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80132cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132d0:	68db      	ldr	r3, [r3, #12]
 80132d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80132d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132da:	2b00      	cmp	r3, #0
 80132dc:	f000 85d4 	beq.w	8013e88 <Zigbee_CallBackProcessing+0x165c>
 80132e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	f000 85ce 	beq.w	8013e88 <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 80132ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 80132f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80132fa:	689b      	ldr	r3, [r3, #8]
 80132fc:	4618      	mov	r0, r3
 80132fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013302:	685a      	ldr	r2, [r3, #4]
 8013304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013308:	4611      	mov	r1, r2
 801330a:	4798      	blx	r3
            }
            break;
 801330c:	f000 bdbc 	b.w	8013e88 <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 8013310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	2b02      	cmp	r3, #2
 8013318:	d006      	beq.n	8013328 <Zigbee_CallBackProcessing+0xafc>
 801331a:	4b80      	ldr	r3, [pc, #512]	; (801351c <Zigbee_CallBackProcessing+0xcf0>)
 801331c:	4a80      	ldr	r2, [pc, #512]	; (8013520 <Zigbee_CallBackProcessing+0xcf4>)
 801331e:	f640 611f 	movw	r1, #3615	; 0xe1f
 8013322:	4880      	ldr	r0, [pc, #512]	; (8013524 <Zigbee_CallBackProcessing+0xcf8>)
 8013324:	f001 f93a 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801332c:	68db      	ldr	r3, [r3, #12]
 801332e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013336:	2b00      	cmp	r3, #0
 8013338:	f000 85a8 	beq.w	8013e8c <Zigbee_CallBackProcessing+0x1660>
 801333c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	f000 85a2 	beq.w	8013e8c <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 8013348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 8013352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	4618      	mov	r0, r3
 801335a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801335e:	685a      	ldr	r2, [r3, #4]
 8013360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013364:	4611      	mov	r1, r2
 8013366:	4798      	blx	r3
            }
            break;
 8013368:	f000 bd90 	b.w	8013e8c <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 801336c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	2b02      	cmp	r3, #2
 8013374:	d006      	beq.n	8013384 <Zigbee_CallBackProcessing+0xb58>
 8013376:	4b69      	ldr	r3, [pc, #420]	; (801351c <Zigbee_CallBackProcessing+0xcf0>)
 8013378:	4a69      	ldr	r2, [pc, #420]	; (8013520 <Zigbee_CallBackProcessing+0xcf4>)
 801337a:	f640 612a 	movw	r1, #3626	; 0xe2a
 801337e:	4869      	ldr	r0, [pc, #420]	; (8013524 <Zigbee_CallBackProcessing+0xcf8>)
 8013380:	f001 f90c 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013388:	68db      	ldr	r3, [r3, #12]
 801338a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801338e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013392:	2b00      	cmp	r3, #0
 8013394:	f000 857c 	beq.w	8013e90 <Zigbee_CallBackProcessing+0x1664>
 8013398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	f000 8576 	beq.w	8013e90 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 80133a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 80133ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133b2:	689b      	ldr	r3, [r3, #8]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133ba:	685a      	ldr	r2, [r3, #4]
 80133bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80133c0:	4611      	mov	r1, r2
 80133c2:	4798      	blx	r3
            }
            break;
 80133c4:	f000 bd64 	b.w	8013e90 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 80133c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	2b03      	cmp	r3, #3
 80133d0:	d006      	beq.n	80133e0 <Zigbee_CallBackProcessing+0xbb4>
 80133d2:	4b55      	ldr	r3, [pc, #340]	; (8013528 <Zigbee_CallBackProcessing+0xcfc>)
 80133d4:	4a52      	ldr	r2, [pc, #328]	; (8013520 <Zigbee_CallBackProcessing+0xcf4>)
 80133d6:	f640 6138 	movw	r1, #3640	; 0xe38
 80133da:	4852      	ldr	r0, [pc, #328]	; (8013524 <Zigbee_CallBackProcessing+0xcf8>)
 80133dc:	f001 f8de 	bl	801459c <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 80133e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	67fb      	str	r3, [r7, #124]	; 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 80133e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	f000 8552 	beq.w	8013e94 <Zigbee_CallBackProcessing+0x1668>
 80133f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	f000 854d 	beq.w	8013e94 <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80133fa:	2300      	movs	r3, #0
 80133fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013400:	e02a      	b.n	8013458 <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8013402:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8013406:	4613      	mov	r3, r2
 8013408:	005b      	lsls	r3, r3, #1
 801340a:	4413      	add	r3, r2
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	4a47      	ldr	r2, [pc, #284]	; (801352c <Zigbee_CallBackProcessing+0xd00>)
 8013410:	4413      	add	r3, r2
 8013412:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013414:	429a      	cmp	r2, r3
 8013416:	d119      	bne.n	801344c <Zigbee_CallBackProcessing+0xc20>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8013418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d021      	beq.n	8013464 <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 8013420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013424:	689b      	ldr	r3, [r3, #8]
 8013426:	67bb      	str	r3, [r7, #120]	; 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 8013428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 8013432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	673b      	str	r3, [r7, #112]	; 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8013438:	4b3d      	ldr	r3, [pc, #244]	; (8013530 <Zigbee_CallBackProcessing+0xd04>)
 801343a:	6818      	ldr	r0, [r3, #0]
 801343c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801343e:	689b      	ldr	r3, [r3, #8]
 8013440:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8013444:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8013446:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013448:	47a0      	blx	r4
                    break;
 801344a:	e00c      	b.n	8013466 <Zigbee_CallBackProcessing+0xc3a>
                        continue;
 801344c:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801344e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013452:	3301      	adds	r3, #1
 8013454:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013458:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801345c:	2b07      	cmp	r3, #7
 801345e:	d9d0      	bls.n	8013402 <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 8013460:	f000 bd18 	b.w	8013e94 <Zigbee_CallBackProcessing+0x1668>
                        break;
 8013464:	bf00      	nop
            break;
 8013466:	f000 bd15 	b.w	8013e94 <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 801346a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	2b02      	cmp	r3, #2
 8013472:	d006      	beq.n	8013482 <Zigbee_CallBackProcessing+0xc56>
 8013474:	4b29      	ldr	r3, [pc, #164]	; (801351c <Zigbee_CallBackProcessing+0xcf0>)
 8013476:	4a2a      	ldr	r2, [pc, #168]	; (8013520 <Zigbee_CallBackProcessing+0xcf4>)
 8013478:	f640 6155 	movw	r1, #3669	; 0xe55
 801347c:	4829      	ldr	r0, [pc, #164]	; (8013524 <Zigbee_CallBackProcessing+0xcf8>)
 801347e:	f001 f88d 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801348c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013490:	2b00      	cmp	r3, #0
 8013492:	f000 8501 	beq.w	8013e98 <Zigbee_CallBackProcessing+0x166c>
 8013496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	f000 84fb 	beq.w	8013e98 <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 80134a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	653b      	str	r3, [r7, #80]	; 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 80134aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134ae:	689b      	ldr	r3, [r3, #8]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134b6:	685a      	ldr	r2, [r3, #4]
 80134b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134ba:	4611      	mov	r1, r2
 80134bc:	4798      	blx	r3
            }
            break;
 80134be:	f000 bceb 	b.w	8013e98 <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 80134c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134c6:	685b      	ldr	r3, [r3, #4]
 80134c8:	2b02      	cmp	r3, #2
 80134ca:	d006      	beq.n	80134da <Zigbee_CallBackProcessing+0xcae>
 80134cc:	4b13      	ldr	r3, [pc, #76]	; (801351c <Zigbee_CallBackProcessing+0xcf0>)
 80134ce:	4a14      	ldr	r2, [pc, #80]	; (8013520 <Zigbee_CallBackProcessing+0xcf4>)
 80134d0:	f44f 6166 	mov.w	r1, #3680	; 0xe60
 80134d4:	4813      	ldr	r0, [pc, #76]	; (8013524 <Zigbee_CallBackProcessing+0xcf8>)
 80134d6:	f001 f861 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80134da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134de:	68db      	ldr	r3, [r3, #12]
 80134e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80134e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	f000 84d7 	beq.w	8013e9c <Zigbee_CallBackProcessing+0x1670>
 80134ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	f000 84d1 	beq.w	8013e9c <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 80134fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	657b      	str	r3, [r7, #84]	; 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 8013502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013506:	689b      	ldr	r3, [r3, #8]
 8013508:	4618      	mov	r0, r3
 801350a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801350e:	685a      	ldr	r2, [r3, #4]
 8013510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013512:	4611      	mov	r1, r2
 8013514:	4798      	blx	r3
            }
            break;
 8013516:	f000 bcc1 	b.w	8013e9c <Zigbee_CallBackProcessing+0x1670>
 801351a:	bf00      	nop
 801351c:	08016c88 	.word	0x08016c88
 8013520:	08017120 	.word	0x08017120
 8013524:	08016bb8 	.word	0x08016bb8
 8013528:	08016c6c 	.word	0x08016c6c
 801352c:	2000194c 	.word	0x2000194c
 8013530:	200017b8 	.word	0x200017b8

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 8013534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013538:	685b      	ldr	r3, [r3, #4]
 801353a:	2b02      	cmp	r3, #2
 801353c:	d006      	beq.n	801354c <Zigbee_CallBackProcessing+0xd20>
 801353e:	4bc1      	ldr	r3, [pc, #772]	; (8013844 <Zigbee_CallBackProcessing+0x1018>)
 8013540:	4ac1      	ldr	r2, [pc, #772]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 8013542:	f640 616b 	movw	r1, #3691	; 0xe6b
 8013546:	48c1      	ldr	r0, [pc, #772]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 8013548:	f001 f828 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013550:	68db      	ldr	r3, [r3, #12]
 8013552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801355a:	2b00      	cmp	r3, #0
 801355c:	f000 84a0 	beq.w	8013ea0 <Zigbee_CallBackProcessing+0x1674>
 8013560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	f000 849a 	beq.w	8013ea0 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 801356c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	65bb      	str	r3, [r7, #88]	; 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 8013574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013578:	689b      	ldr	r3, [r3, #8]
 801357a:	4618      	mov	r0, r3
 801357c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013580:	685a      	ldr	r2, [r3, #4]
 8013582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013584:	4611      	mov	r1, r2
 8013586:	4798      	blx	r3
            }
            break;
 8013588:	f000 bc8a 	b.w	8013ea0 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 801358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	2b02      	cmp	r3, #2
 8013594:	d006      	beq.n	80135a4 <Zigbee_CallBackProcessing+0xd78>
 8013596:	4bab      	ldr	r3, [pc, #684]	; (8013844 <Zigbee_CallBackProcessing+0x1018>)
 8013598:	4aab      	ldr	r2, [pc, #684]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 801359a:	f640 6176 	movw	r1, #3702	; 0xe76
 801359e:	48ab      	ldr	r0, [pc, #684]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 80135a0:	f000 fffc 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80135a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135a8:	68db      	ldr	r3, [r3, #12]
 80135aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80135ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	f000 8476 	beq.w	8013ea4 <Zigbee_CallBackProcessing+0x1678>
 80135b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	f000 8470 	beq.w	8013ea4 <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 80135c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	65fb      	str	r3, [r7, #92]	; 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 80135cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135d0:	689b      	ldr	r3, [r3, #8]
 80135d2:	4618      	mov	r0, r3
 80135d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80135d8:	685a      	ldr	r2, [r3, #4]
 80135da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135dc:	4611      	mov	r1, r2
 80135de:	4798      	blx	r3
            }
            break;
 80135e0:	f000 bc60 	b.w	8013ea4 <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 80135e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	2b02      	cmp	r3, #2
 80135ec:	d006      	beq.n	80135fc <Zigbee_CallBackProcessing+0xdd0>
 80135ee:	4b95      	ldr	r3, [pc, #596]	; (8013844 <Zigbee_CallBackProcessing+0x1018>)
 80135f0:	4a95      	ldr	r2, [pc, #596]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 80135f2:	f640 6181 	movw	r1, #3713	; 0xe81
 80135f6:	4895      	ldr	r0, [pc, #596]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 80135f8:	f000 ffd0 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80135fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013606:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801360a:	2b00      	cmp	r3, #0
 801360c:	f000 844c 	beq.w	8013ea8 <Zigbee_CallBackProcessing+0x167c>
 8013610:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	2b00      	cmp	r3, #0
 8013618:	f000 8446 	beq.w	8013ea8 <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 801361c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	663b      	str	r3, [r7, #96]	; 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 8013624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	4618      	mov	r0, r3
 801362c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013630:	685a      	ldr	r2, [r3, #4]
 8013632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013634:	4611      	mov	r1, r2
 8013636:	4798      	blx	r3
            }
            break;
 8013638:	f000 bc36 	b.w	8013ea8 <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 801363c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	2b02      	cmp	r3, #2
 8013644:	d006      	beq.n	8013654 <Zigbee_CallBackProcessing+0xe28>
 8013646:	4b7f      	ldr	r3, [pc, #508]	; (8013844 <Zigbee_CallBackProcessing+0x1018>)
 8013648:	4a7f      	ldr	r2, [pc, #508]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 801364a:	f640 618c 	movw	r1, #3724	; 0xe8c
 801364e:	487f      	ldr	r0, [pc, #508]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 8013650:	f000 ffa4 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013658:	68db      	ldr	r3, [r3, #12]
 801365a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801365e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013662:	2b00      	cmp	r3, #0
 8013664:	f000 8422 	beq.w	8013eac <Zigbee_CallBackProcessing+0x1680>
 8013668:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	f000 841c 	beq.w	8013eac <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 8013674:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	667b      	str	r3, [r7, #100]	; 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 801367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	4618      	mov	r0, r3
 8013684:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013688:	685a      	ldr	r2, [r3, #4]
 801368a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801368c:	4611      	mov	r1, r2
 801368e:	4798      	blx	r3
            }
            break;
 8013690:	f000 bc0c 	b.w	8013eac <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 8013694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	2b02      	cmp	r3, #2
 801369c:	d006      	beq.n	80136ac <Zigbee_CallBackProcessing+0xe80>
 801369e:	4b69      	ldr	r3, [pc, #420]	; (8013844 <Zigbee_CallBackProcessing+0x1018>)
 80136a0:	4a69      	ldr	r2, [pc, #420]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 80136a2:	f640 6197 	movw	r1, #3735	; 0xe97
 80136a6:	4869      	ldr	r0, [pc, #420]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 80136a8:	f000 ff78 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80136ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80136b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	f000 83f8 	beq.w	8013eb0 <Zigbee_CallBackProcessing+0x1684>
 80136c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f000 83f2 	beq.w	8013eb0 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 80136cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	66bb      	str	r3, [r7, #104]	; 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 80136d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136d8:	689b      	ldr	r3, [r3, #8]
 80136da:	4618      	mov	r0, r3
 80136dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80136e0:	685a      	ldr	r2, [r3, #4]
 80136e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80136e4:	4611      	mov	r1, r2
 80136e6:	4798      	blx	r3
            }
            break;
 80136e8:	e3e2      	b.n	8013eb0 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 80136ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80136ee:	685b      	ldr	r3, [r3, #4]
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d006      	beq.n	8013702 <Zigbee_CallBackProcessing+0xed6>
 80136f4:	4b56      	ldr	r3, [pc, #344]	; (8013850 <Zigbee_CallBackProcessing+0x1024>)
 80136f6:	4a54      	ldr	r2, [pc, #336]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 80136f8:	f640 61a4 	movw	r1, #3748	; 0xea4
 80136fc:	4853      	ldr	r0, [pc, #332]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 80136fe:	f000 ff4d 	bl	801459c <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 8013702:	4b54      	ldr	r3, [pc, #336]	; (8013854 <Zigbee_CallBackProcessing+0x1028>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	f000 83d4 	beq.w	8013eb4 <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 801370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013710:	689b      	ldr	r3, [r3, #8]
 8013712:	66fb      	str	r3, [r7, #108]	; 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 8013714:	4b4f      	ldr	r3, [pc, #316]	; (8013854 <Zigbee_CallBackProcessing+0x1028>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	4a4f      	ldr	r2, [pc, #316]	; (8013858 <Zigbee_CallBackProcessing+0x102c>)
 801371a:	6812      	ldr	r2, [r2, #0]
 801371c:	4611      	mov	r1, r2
 801371e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013720:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 8013722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	2b85      	cmp	r3, #133	; 0x85
 8013728:	f040 83c4 	bne.w	8013eb4 <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 801372c:	4b49      	ldr	r3, [pc, #292]	; (8013854 <Zigbee_CallBackProcessing+0x1028>)
 801372e:	2200      	movs	r2, #0
 8013730:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 8013732:	e3bf      	b.n	8013eb4 <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 8013734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	2b02      	cmp	r3, #2
 801373c:	d006      	beq.n	801374c <Zigbee_CallBackProcessing+0xf20>
 801373e:	4b41      	ldr	r3, [pc, #260]	; (8013844 <Zigbee_CallBackProcessing+0x1018>)
 8013740:	4a41      	ldr	r2, [pc, #260]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 8013742:	f640 61b2 	movw	r1, #3762	; 0xeb2
 8013746:	4841      	ldr	r0, [pc, #260]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 8013748:	f000 ff28 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801374c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013750:	68db      	ldr	r3, [r3, #12]
 8013752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801375a:	2b00      	cmp	r3, #0
 801375c:	f000 83ac 	beq.w	8013eb8 <Zigbee_CallBackProcessing+0x168c>
 8013760:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	f000 83a6 	beq.w	8013eb8 <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 801376c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 8013776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801377a:	689b      	ldr	r3, [r3, #8]
 801377c:	4618      	mov	r0, r3
 801377e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013782:	685a      	ldr	r2, [r3, #4]
 8013784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013788:	4611      	mov	r1, r2
 801378a:	4798      	blx	r3
            }
            break;
 801378c:	e394      	b.n	8013eb8 <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 801378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	2b02      	cmp	r3, #2
 8013796:	d006      	beq.n	80137a6 <Zigbee_CallBackProcessing+0xf7a>
 8013798:	4b2a      	ldr	r3, [pc, #168]	; (8013844 <Zigbee_CallBackProcessing+0x1018>)
 801379a:	4a2b      	ldr	r2, [pc, #172]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 801379c:	f640 61bd 	movw	r1, #3773	; 0xebd
 80137a0:	482a      	ldr	r0, [pc, #168]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 80137a2:	f000 fefb 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80137a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137aa:	68db      	ldr	r3, [r3, #12]
 80137ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80137b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f000 8381 	beq.w	8013ebc <Zigbee_CallBackProcessing+0x1690>
 80137ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f000 837b 	beq.w	8013ebc <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 80137c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 80137d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80137dc:	685a      	ldr	r2, [r3, #4]
 80137de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80137e2:	4611      	mov	r1, r2
 80137e4:	4798      	blx	r3
            }
            break;
 80137e6:	e369      	b.n	8013ebc <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 80137e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	2b02      	cmp	r3, #2
 80137f0:	d006      	beq.n	8013800 <Zigbee_CallBackProcessing+0xfd4>
 80137f2:	4b14      	ldr	r3, [pc, #80]	; (8013844 <Zigbee_CallBackProcessing+0x1018>)
 80137f4:	4a14      	ldr	r2, [pc, #80]	; (8013848 <Zigbee_CallBackProcessing+0x101c>)
 80137f6:	f640 61c8 	movw	r1, #3784	; 0xec8
 80137fa:	4814      	ldr	r0, [pc, #80]	; (801384c <Zigbee_CallBackProcessing+0x1020>)
 80137fc:	f000 fece 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801380a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801380e:	2b00      	cmp	r3, #0
 8013810:	f000 8356 	beq.w	8013ec0 <Zigbee_CallBackProcessing+0x1694>
 8013814:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	2b00      	cmp	r3, #0
 801381c:	f000 8350 	beq.w	8013ec0 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 8013820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 801382a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801382e:	689b      	ldr	r3, [r3, #8]
 8013830:	4618      	mov	r0, r3
 8013832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013836:	685a      	ldr	r2, [r3, #4]
 8013838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801383c:	4611      	mov	r1, r2
 801383e:	4798      	blx	r3
            }
            break;
 8013840:	e33e      	b.n	8013ec0 <Zigbee_CallBackProcessing+0x1694>
 8013842:	bf00      	nop
 8013844:	08016c88 	.word	0x08016c88
 8013848:	08017120 	.word	0x08017120
 801384c:	08016bb8 	.word	0x08016bb8
 8013850:	08016c50 	.word	0x08016c50
 8013854:	200017b0 	.word	0x200017b0
 8013858:	200017b4 	.word	0x200017b4

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 801385c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	2b02      	cmp	r3, #2
 8013864:	d006      	beq.n	8013874 <Zigbee_CallBackProcessing+0x1048>
 8013866:	4bc5      	ldr	r3, [pc, #788]	; (8013b7c <Zigbee_CallBackProcessing+0x1350>)
 8013868:	4ac5      	ldr	r2, [pc, #788]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 801386a:	f640 61d3 	movw	r1, #3795	; 0xed3
 801386e:	48c5      	ldr	r0, [pc, #788]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 8013870:	f000 fe94 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801387e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013882:	2b00      	cmp	r3, #0
 8013884:	f000 831e 	beq.w	8013ec4 <Zigbee_CallBackProcessing+0x1698>
 8013888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	f000 8318 	beq.w	8013ec4 <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 8013894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 801389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138a2:	689b      	ldr	r3, [r3, #8]
 80138a4:	4618      	mov	r0, r3
 80138a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80138aa:	685a      	ldr	r2, [r3, #4]
 80138ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80138b0:	4611      	mov	r1, r2
 80138b2:	4798      	blx	r3
            }
            break;
 80138b4:	e306      	b.n	8013ec4 <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 80138b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	2b02      	cmp	r3, #2
 80138be:	d006      	beq.n	80138ce <Zigbee_CallBackProcessing+0x10a2>
 80138c0:	4bae      	ldr	r3, [pc, #696]	; (8013b7c <Zigbee_CallBackProcessing+0x1350>)
 80138c2:	4aaf      	ldr	r2, [pc, #700]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 80138c4:	f640 61de 	movw	r1, #3806	; 0xede
 80138c8:	48ae      	ldr	r0, [pc, #696]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 80138ca:	f000 fe67 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80138ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80138d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80138dc:	2b00      	cmp	r3, #0
 80138de:	f000 82f3 	beq.w	8013ec8 <Zigbee_CallBackProcessing+0x169c>
 80138e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	f000 82ed 	beq.w	8013ec8 <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 80138ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 80138f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	4618      	mov	r0, r3
 8013900:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013904:	685a      	ldr	r2, [r3, #4]
 8013906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801390a:	4611      	mov	r1, r2
 801390c:	4798      	blx	r3
            }
            break;
 801390e:	e2db      	b.n	8013ec8 <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 8013910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	2b02      	cmp	r3, #2
 8013918:	d006      	beq.n	8013928 <Zigbee_CallBackProcessing+0x10fc>
 801391a:	4b98      	ldr	r3, [pc, #608]	; (8013b7c <Zigbee_CallBackProcessing+0x1350>)
 801391c:	4a98      	ldr	r2, [pc, #608]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 801391e:	f640 61e9 	movw	r1, #3817	; 0xee9
 8013922:	4898      	ldr	r0, [pc, #608]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 8013924:	f000 fe3a 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801392c:	68db      	ldr	r3, [r3, #12]
 801392e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013932:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013936:	2b00      	cmp	r3, #0
 8013938:	f000 82c8 	beq.w	8013ecc <Zigbee_CallBackProcessing+0x16a0>
 801393c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	f000 82c2 	beq.w	8013ecc <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 8013948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 8013952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013956:	689b      	ldr	r3, [r3, #8]
 8013958:	4618      	mov	r0, r3
 801395a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801395e:	685a      	ldr	r2, [r3, #4]
 8013960:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013964:	4611      	mov	r1, r2
 8013966:	4798      	blx	r3
            }
            break;
 8013968:	e2b0      	b.n	8013ecc <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 801396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	2b02      	cmp	r3, #2
 8013972:	d006      	beq.n	8013982 <Zigbee_CallBackProcessing+0x1156>
 8013974:	4b81      	ldr	r3, [pc, #516]	; (8013b7c <Zigbee_CallBackProcessing+0x1350>)
 8013976:	4a82      	ldr	r2, [pc, #520]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 8013978:	f640 61f4 	movw	r1, #3828	; 0xef4
 801397c:	4881      	ldr	r0, [pc, #516]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 801397e:	f000 fe0d 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013986:	68db      	ldr	r3, [r3, #12]
 8013988:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801398c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013990:	2b00      	cmp	r3, #0
 8013992:	f000 829d 	beq.w	8013ed0 <Zigbee_CallBackProcessing+0x16a4>
 8013996:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	f000 8297 	beq.w	8013ed0 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 80139a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 80139ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139b0:	689b      	ldr	r3, [r3, #8]
 80139b2:	4618      	mov	r0, r3
 80139b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139b8:	685a      	ldr	r2, [r3, #4]
 80139ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80139be:	4611      	mov	r1, r2
 80139c0:	4798      	blx	r3
            }
            break;
 80139c2:	e285      	b.n	8013ed0 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 80139c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	2b02      	cmp	r3, #2
 80139cc:	d006      	beq.n	80139dc <Zigbee_CallBackProcessing+0x11b0>
 80139ce:	4b6b      	ldr	r3, [pc, #428]	; (8013b7c <Zigbee_CallBackProcessing+0x1350>)
 80139d0:	4a6b      	ldr	r2, [pc, #428]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 80139d2:	f640 61ff 	movw	r1, #3839	; 0xeff
 80139d6:	486b      	ldr	r0, [pc, #428]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 80139d8:	f000 fde0 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80139dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139e0:	68db      	ldr	r3, [r3, #12]
 80139e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80139e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	f000 8272 	beq.w	8013ed4 <Zigbee_CallBackProcessing+0x16a8>
 80139f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f000 826c 	beq.w	8013ed4 <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 80139fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 8013a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a0a:	689b      	ldr	r3, [r3, #8]
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a12:	685a      	ldr	r2, [r3, #4]
 8013a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013a18:	4611      	mov	r1, r2
 8013a1a:	4798      	blx	r3
            }
            break;
 8013a1c:	e25a      	b.n	8013ed4 <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8013a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	2b03      	cmp	r3, #3
 8013a26:	d006      	beq.n	8013a36 <Zigbee_CallBackProcessing+0x120a>
 8013a28:	4b57      	ldr	r3, [pc, #348]	; (8013b88 <Zigbee_CallBackProcessing+0x135c>)
 8013a2a:	4a55      	ldr	r2, [pc, #340]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 8013a2c:	f640 710d 	movw	r1, #3853	; 0xf0d
 8013a30:	4854      	ldr	r0, [pc, #336]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 8013a32:	f000 fdb3 	bl	801459c <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8013a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a3a:	691b      	ldr	r3, [r3, #16]
 8013a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8013a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f000 8247 	beq.w	8013ed8 <Zigbee_CallBackProcessing+0x16ac>
 8013a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	f000 8241 	beq.w	8013ed8 <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8013a56:	2300      	movs	r3, #0
 8013a58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013a5c:	e032      	b.n	8013ac4 <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8013a5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8013a62:	4613      	mov	r3, r2
 8013a64:	005b      	lsls	r3, r3, #1
 8013a66:	4413      	add	r3, r2
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	4a48      	ldr	r2, [pc, #288]	; (8013b8c <Zigbee_CallBackProcessing+0x1360>)
 8013a6c:	4413      	add	r3, r2
 8013a6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d120      	bne.n	8013ab8 <Zigbee_CallBackProcessing+0x128c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8013a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d026      	beq.n	8013ace <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 8013a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a84:	689b      	ldr	r3, [r3, #8]
 8013a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 8013a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 8013a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8013a9e:	4b3c      	ldr	r3, [pc, #240]	; (8013b90 <Zigbee_CallBackProcessing+0x1364>)
 8013aa0:	6818      	ldr	r0, [r3, #0]
 8013aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013aa6:	689b      	ldr	r3, [r3, #8]
 8013aa8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8013aac:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8013ab0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013ab4:	47a0      	blx	r4
                    break;
 8013ab6:	e00b      	b.n	8013ad0 <Zigbee_CallBackProcessing+0x12a4>
                        continue;
 8013ab8:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8013aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013abe:	3301      	adds	r3, #1
 8013ac0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013ac8:	2b07      	cmp	r3, #7
 8013aca:	d9c8      	bls.n	8013a5e <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 8013acc:	e204      	b.n	8013ed8 <Zigbee_CallBackProcessing+0x16ac>
                        break;
 8013ace:	bf00      	nop
            break;
 8013ad0:	e202      	b.n	8013ed8 <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8013ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	2b02      	cmp	r3, #2
 8013ada:	d006      	beq.n	8013aea <Zigbee_CallBackProcessing+0x12be>
 8013adc:	4b27      	ldr	r3, [pc, #156]	; (8013b7c <Zigbee_CallBackProcessing+0x1350>)
 8013ade:	4a28      	ldr	r2, [pc, #160]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 8013ae0:	f640 712e 	movw	r1, #3886	; 0xf2e
 8013ae4:	4827      	ldr	r0, [pc, #156]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 8013ae6:	f000 fd59 	bl	801459c <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8013aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013aee:	689b      	ldr	r3, [r3, #8]
 8013af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            cb_arg = (void *)p_notification->Data[1];
 8013af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 8013afe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8013b02:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8013b06:	f7f0 fd3f 	bl	8004588 <zcl_cluster_data_ind>
 8013b0a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8013b0e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8013b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b16:	60da      	str	r2, [r3, #12]
            break;
 8013b18:	e1f7      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8013b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	2b02      	cmp	r3, #2
 8013b22:	d006      	beq.n	8013b32 <Zigbee_CallBackProcessing+0x1306>
 8013b24:	4b15      	ldr	r3, [pc, #84]	; (8013b7c <Zigbee_CallBackProcessing+0x1350>)
 8013b26:	4a16      	ldr	r2, [pc, #88]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 8013b28:	f640 713d 	movw	r1, #3901	; 0xf3d
 8013b2c:	4815      	ldr	r0, [pc, #84]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 8013b2e:	f000 fd35 	bl	801459c <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8013b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b36:	689b      	ldr	r3, [r3, #8]
 8013b38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            cb_arg = (void *)p_notification->Data[1];
 8013b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b40:	68db      	ldr	r3, [r3, #12]
 8013b42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 8013b46:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8013b4a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8013b4e:	f7f0 fd35 	bl	80045bc <zcl_cluster_alarm_data_ind>
 8013b52:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8013b56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b5e:	60da      	str	r2, [r3, #12]
            break;
 8013b60:	e1d3      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 8013b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	2b02      	cmp	r3, #2
 8013b6a:	d013      	beq.n	8013b94 <Zigbee_CallBackProcessing+0x1368>
 8013b6c:	4b03      	ldr	r3, [pc, #12]	; (8013b7c <Zigbee_CallBackProcessing+0x1350>)
 8013b6e:	4a04      	ldr	r2, [pc, #16]	; (8013b80 <Zigbee_CallBackProcessing+0x1354>)
 8013b70:	f640 7147 	movw	r1, #3911	; 0xf47
 8013b74:	4803      	ldr	r0, [pc, #12]	; (8013b84 <Zigbee_CallBackProcessing+0x1358>)
 8013b76:	f000 fd11 	bl	801459c <__assert_func>
 8013b7a:	bf00      	nop
 8013b7c:	08016c88 	.word	0x08016c88
 8013b80:	08017120 	.word	0x08017120
 8013b84:	08016bb8 	.word	0x08016bb8
 8013b88:	08016c6c 	.word	0x08016c6c
 8013b8c:	2000194c 	.word	0x2000194c
 8013b90:	200017b8 	.word	0x200017b8
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	f000 81a8 	beq.w	8013ef8 <Zigbee_CallBackProcessing+0x16cc>
 8013ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f000 81a2 	beq.w	8013ef8 <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8013bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8013bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bc2:	689b      	ldr	r3, [r3, #8]
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013bca:	685a      	ldr	r2, [r3, #4]
 8013bcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	4798      	blx	r3
            }
            break;
 8013bd4:	e190      	b.n	8013ef8 <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            assert(p_notification->Size == 2);
 8013bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	2b02      	cmp	r3, #2
 8013be4:	d006      	beq.n	8013bf4 <Zigbee_CallBackProcessing+0x13c8>
 8013be6:	4bbd      	ldr	r3, [pc, #756]	; (8013edc <Zigbee_CallBackProcessing+0x16b0>)
 8013be8:	4abd      	ldr	r2, [pc, #756]	; (8013ee0 <Zigbee_CallBackProcessing+0x16b4>)
 8013bea:	f640 7155 	movw	r1, #3925	; 0xf55
 8013bee:	48bd      	ldr	r0, [pc, #756]	; (8013ee4 <Zigbee_CallBackProcessing+0x16b8>)
 8013bf0:	f000 fcd4 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013bf8:	68db      	ldr	r3, [r3, #12]
 8013bfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 8013bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d026      	beq.n	8013c54 <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 8013c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c0a:	689b      	ldr	r3, [r3, #8]
 8013c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

                if (info->callback != NULL) {
 8013c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d00f      	beq.n	8013c3a <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8013c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    err = callback(zcl_rsp, info->arg);
 8013c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c28:	685a      	ldr	r2, [r3, #4]
 8013c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013c2e:	4611      	mov	r1, r2
 8013c30:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8013c34:	4798      	blx	r3
 8013c36:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 8013c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c3e:	7a1b      	ldrb	r3, [r3, #8]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d007      	beq.n	8013c54 <Zigbee_CallBackProcessing+0x1428>
 8013c44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013c48:	785b      	ldrb	r3, [r3, #1]
 8013c4a:	2b94      	cmp	r3, #148	; 0x94
 8013c4c:	d002      	beq.n	8013c54 <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8013c54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8013c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c5c:	60da      	str	r2, [r3, #12]
            break;
 8013c5e:	e154      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 8013c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	2b02      	cmp	r3, #2
 8013c68:	d006      	beq.n	8013c78 <Zigbee_CallBackProcessing+0x144c>
 8013c6a:	4b9c      	ldr	r3, [pc, #624]	; (8013edc <Zigbee_CallBackProcessing+0x16b0>)
 8013c6c:	4a9c      	ldr	r2, [pc, #624]	; (8013ee0 <Zigbee_CallBackProcessing+0x16b4>)
 8013c6e:	f640 716d 	movw	r1, #3949	; 0xf6d
 8013c72:	489c      	ldr	r0, [pc, #624]	; (8013ee4 <Zigbee_CallBackProcessing+0x16b8>)
 8013c74:	f000 fc92 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013c7c:	68db      	ldr	r3, [r3, #12]
 8013c7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	f000 8138 	beq.w	8013efc <Zigbee_CallBackProcessing+0x16d0>
 8013c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f000 8132 	beq.w	8013efc <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 8013c98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 8013ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ca6:	689b      	ldr	r3, [r3, #8]
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013cae:	685a      	ldr	r2, [r3, #4]
 8013cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4798      	blx	r3
            }
            break;
 8013cb8:	e120      	b.n	8013efc <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 8013cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cbe:	685b      	ldr	r3, [r3, #4]
 8013cc0:	2b02      	cmp	r3, #2
 8013cc2:	d006      	beq.n	8013cd2 <Zigbee_CallBackProcessing+0x14a6>
 8013cc4:	4b85      	ldr	r3, [pc, #532]	; (8013edc <Zigbee_CallBackProcessing+0x16b0>)
 8013cc6:	4a86      	ldr	r2, [pc, #536]	; (8013ee0 <Zigbee_CallBackProcessing+0x16b4>)
 8013cc8:	f640 7178 	movw	r1, #3960	; 0xf78
 8013ccc:	4885      	ldr	r0, [pc, #532]	; (8013ee4 <Zigbee_CallBackProcessing+0x16b8>)
 8013cce:	f000 fc65 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	f000 810d 	beq.w	8013f00 <Zigbee_CallBackProcessing+0x16d4>
 8013ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	f000 8107 	beq.w	8013f00 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 8013cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 8013cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d00:	689b      	ldr	r3, [r3, #8]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d08:	685a      	ldr	r2, [r3, #4]
 8013d0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013d0e:	4611      	mov	r1, r2
 8013d10:	4798      	blx	r3
            }
            break;
 8013d12:	e0f5      	b.n	8013f00 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 8013d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	2b02      	cmp	r3, #2
 8013d1c:	d006      	beq.n	8013d2c <Zigbee_CallBackProcessing+0x1500>
 8013d1e:	4b6f      	ldr	r3, [pc, #444]	; (8013edc <Zigbee_CallBackProcessing+0x16b0>)
 8013d20:	4a6f      	ldr	r2, [pc, #444]	; (8013ee0 <Zigbee_CallBackProcessing+0x16b4>)
 8013d22:	f640 7183 	movw	r1, #3971	; 0xf83
 8013d26:	486f      	ldr	r0, [pc, #444]	; (8013ee4 <Zigbee_CallBackProcessing+0x16b8>)
 8013d28:	f000 fc38 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8013d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d30:	68db      	ldr	r3, [r3, #12]
 8013d32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	f000 80e2 	beq.w	8013f04 <Zigbee_CallBackProcessing+0x16d8>
 8013d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	f000 80dc 	beq.w	8013f04 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8013d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 8013d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d5a:	689b      	ldr	r3, [r3, #8]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d62:	685a      	ldr	r2, [r3, #4]
 8013d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013d68:	4611      	mov	r1, r2
 8013d6a:	4798      	blx	r3
            }
            break;
 8013d6c:	e0ca      	b.n	8013f04 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 8013d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d72:	685b      	ldr	r3, [r3, #4]
 8013d74:	2b05      	cmp	r3, #5
 8013d76:	d006      	beq.n	8013d86 <Zigbee_CallBackProcessing+0x155a>
 8013d78:	4b5b      	ldr	r3, [pc, #364]	; (8013ee8 <Zigbee_CallBackProcessing+0x16bc>)
 8013d7a:	4a59      	ldr	r2, [pc, #356]	; (8013ee0 <Zigbee_CallBackProcessing+0x16b4>)
 8013d7c:	f640 718e 	movw	r1, #3982	; 0xf8e
 8013d80:	4858      	ldr	r0, [pc, #352]	; (8013ee4 <Zigbee_CallBackProcessing+0x16b8>)
 8013d82:	f000 fc0b 	bl	801459c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 8013d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013d8a:	699b      	ldr	r3, [r3, #24]
 8013d8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8013d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f000 80b7 	beq.w	8013f08 <Zigbee_CallBackProcessing+0x16dc>
 8013d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	f000 80b1 	beq.w	8013f08 <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 8013da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013daa:	f103 0108 	add.w	r1, r3, #8
 8013dae:	463b      	mov	r3, r7
 8013db0:	2208      	movs	r2, #8
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fd fb7e 	bl	80114b4 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 8013db8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 8013dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013dca:	691b      	ldr	r3, [r3, #16]
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013dd2:	695b      	ldr	r3, [r3, #20]
 8013dd4:	b2dd      	uxtb	r5, r3
 8013dd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 8013de2:	462b      	mov	r3, r5
 8013de4:	47a0      	blx	r4
            }
            break;
 8013de6:	e08f      	b.n	8013f08 <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 8013de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	2b03      	cmp	r3, #3
 8013df0:	d006      	beq.n	8013e00 <Zigbee_CallBackProcessing+0x15d4>
 8013df2:	4b3e      	ldr	r3, [pc, #248]	; (8013eec <Zigbee_CallBackProcessing+0x16c0>)
 8013df4:	4a3a      	ldr	r2, [pc, #232]	; (8013ee0 <Zigbee_CallBackProcessing+0x16b4>)
 8013df6:	f640 719f 	movw	r1, #3999	; 0xf9f
 8013dfa:	483a      	ldr	r0, [pc, #232]	; (8013ee4 <Zigbee_CallBackProcessing+0x16b8>)
 8013dfc:	f000 fbce 	bl	801459c <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 8013e00:	4b3b      	ldr	r3, [pc, #236]	; (8013ef0 <Zigbee_CallBackProcessing+0x16c4>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d103      	bne.n	8013e10 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 8013e08:	2381      	movs	r3, #129	; 0x81
 8013e0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                break;
 8013e0e:	e07c      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 8013e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e14:	689b      	ldr	r3, [r3, #8]
 8013e16:	64fb      	str	r3, [r7, #76]	; 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 8013e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e1c:	68db      	ldr	r3, [r3, #12]
 8013e1e:	64bb      	str	r3, [r7, #72]	; 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8013e20:	4b33      	ldr	r3, [pc, #204]	; (8013ef0 <Zigbee_CallBackProcessing+0x16c4>)
 8013e22:	681c      	ldr	r4, [r3, #0]
 8013e24:	4b33      	ldr	r3, [pc, #204]	; (8013ef4 <Zigbee_CallBackProcessing+0x16c8>)
 8013e26:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 8013e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e2c:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8013e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013e32:	47a0      	blx	r4
 8013e34:	4603      	mov	r3, r0
 8013e36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            break;
 8013e3a:	e066      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8013e42:	e062      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e44:	bf00      	nop
 8013e46:	e060      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e48:	bf00      	nop
 8013e4a:	e05e      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e4c:	bf00      	nop
 8013e4e:	e05c      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e50:	bf00      	nop
 8013e52:	e05a      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e54:	bf00      	nop
 8013e56:	e058      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e58:	bf00      	nop
 8013e5a:	e056      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e5c:	bf00      	nop
 8013e5e:	e054      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e60:	bf00      	nop
 8013e62:	e052      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e64:	bf00      	nop
 8013e66:	e050      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e68:	bf00      	nop
 8013e6a:	e04e      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e6c:	bf00      	nop
 8013e6e:	e04c      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e70:	bf00      	nop
 8013e72:	e04a      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e74:	bf00      	nop
 8013e76:	e048      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e78:	bf00      	nop
 8013e7a:	e046      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e7c:	bf00      	nop
 8013e7e:	e044      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e80:	bf00      	nop
 8013e82:	e042      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e84:	bf00      	nop
 8013e86:	e040      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e88:	bf00      	nop
 8013e8a:	e03e      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e8c:	bf00      	nop
 8013e8e:	e03c      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e90:	bf00      	nop
 8013e92:	e03a      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e94:	bf00      	nop
 8013e96:	e038      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e98:	bf00      	nop
 8013e9a:	e036      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013e9c:	bf00      	nop
 8013e9e:	e034      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ea0:	bf00      	nop
 8013ea2:	e032      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ea4:	bf00      	nop
 8013ea6:	e030      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ea8:	bf00      	nop
 8013eaa:	e02e      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013eac:	bf00      	nop
 8013eae:	e02c      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013eb0:	bf00      	nop
 8013eb2:	e02a      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013eb4:	bf00      	nop
 8013eb6:	e028      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013eb8:	bf00      	nop
 8013eba:	e026      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ebc:	bf00      	nop
 8013ebe:	e024      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ec0:	bf00      	nop
 8013ec2:	e022      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ec4:	bf00      	nop
 8013ec6:	e020      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ec8:	bf00      	nop
 8013eca:	e01e      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ecc:	bf00      	nop
 8013ece:	e01c      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ed0:	bf00      	nop
 8013ed2:	e01a      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ed4:	bf00      	nop
 8013ed6:	e018      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013ed8:	bf00      	nop
 8013eda:	e016      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
 8013edc:	08016c88 	.word	0x08016c88
 8013ee0:	08017120 	.word	0x08017120
 8013ee4:	08016bb8 	.word	0x08016bb8
 8013ee8:	08016ca4 	.word	0x08016ca4
 8013eec:	08016c6c 	.word	0x08016c6c
 8013ef0:	200017a4 	.word	0x200017a4
 8013ef4:	200017b8 	.word	0x200017b8
            break;
 8013ef8:	bf00      	nop
 8013efa:	e006      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013efc:	bf00      	nop
 8013efe:	e004      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013f00:	bf00      	nop
 8013f02:	e002      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013f04:	bf00      	nop
 8013f06:	e000      	b.n	8013f0a <Zigbee_CallBackProcessing+0x16de>
            break;
 8013f08:	bf00      	nop
    }

    if (info != NULL) {
 8013f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d003      	beq.n	8013f1a <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 8013f12:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013f16:	f7fd fb09 	bl	801152c <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 8013f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013f1e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8013f22:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 8013f24:	f7fd f9a8 	bl	8011278 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 8013f28:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f36:	bf00      	nop

08013f38 <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 8013f38:	b590      	push	{r4, r7, lr}
 8013f3a:	b089      	sub	sp, #36	; 0x24
 8013f3c:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8013f42:	f7f5 fbb1 	bl	80096a8 <ZIGBEE_Get_M0RequestPayloadBuffer>
 8013f46:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	2b09      	cmp	r3, #9
 8013f4e:	d046      	beq.n	8013fde <Zigbee_M0RequestProcessing+0xa6>
 8013f50:	2b09      	cmp	r3, #9
 8013f52:	d864      	bhi.n	801401e <Zigbee_M0RequestProcessing+0xe6>
 8013f54:	2b07      	cmp	r3, #7
 8013f56:	d002      	beq.n	8013f5e <Zigbee_M0RequestProcessing+0x26>
 8013f58:	2b08      	cmp	r3, #8
 8013f5a:	d01e      	beq.n	8013f9a <Zigbee_M0RequestProcessing+0x62>
 8013f5c:	e05f      	b.n	801401e <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	2b01      	cmp	r3, #1
 8013f64:	d006      	beq.n	8013f74 <Zigbee_M0RequestProcessing+0x3c>
 8013f66:	4b33      	ldr	r3, [pc, #204]	; (8014034 <Zigbee_M0RequestProcessing+0xfc>)
 8013f68:	4a33      	ldr	r2, [pc, #204]	; (8014038 <Zigbee_M0RequestProcessing+0x100>)
 8013f6a:	f640 71c6 	movw	r1, #4038	; 0xfc6
 8013f6e:	4833      	ldr	r0, [pc, #204]	; (801403c <Zigbee_M0RequestProcessing+0x104>)
 8013f70:	f000 fb14 	bl	801459c <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	689b      	ldr	r3, [r3, #8]
 8013f78:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 8013f7a:	4b31      	ldr	r3, [pc, #196]	; (8014040 <Zigbee_M0RequestProcessing+0x108>)
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d050      	beq.n	8014024 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8013f82:	4b2f      	ldr	r3, [pc, #188]	; (8014040 <Zigbee_M0RequestProcessing+0x108>)
 8013f84:	685c      	ldr	r4, [r3, #4]
 8013f86:	4b2e      	ldr	r3, [pc, #184]	; (8014040 <Zigbee_M0RequestProcessing+0x108>)
 8013f88:	6818      	ldr	r0, [r3, #0]
 8013f8a:	4b2e      	ldr	r3, [pc, #184]	; (8014044 <Zigbee_M0RequestProcessing+0x10c>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	9300      	str	r3, [sp, #0]
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	2200      	movs	r2, #0
 8013f94:	2100      	movs	r1, #0
 8013f96:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 8013f98:	e044      	b.n	8014024 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d006      	beq.n	8013fb0 <Zigbee_M0RequestProcessing+0x78>
 8013fa2:	4b24      	ldr	r3, [pc, #144]	; (8014034 <Zigbee_M0RequestProcessing+0xfc>)
 8013fa4:	4a24      	ldr	r2, [pc, #144]	; (8014038 <Zigbee_M0RequestProcessing+0x100>)
 8013fa6:	f640 71d6 	movw	r1, #4054	; 0xfd6
 8013faa:	4824      	ldr	r0, [pc, #144]	; (801403c <Zigbee_M0RequestProcessing+0x104>)
 8013fac:	f000 faf6 	bl	801459c <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	689b      	ldr	r3, [r3, #8]
 8013fb4:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	3304      	adds	r3, #4
 8013fba:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f000 fb0b 	bl	80145d8 <malloc>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d004      	beq.n	8013fd6 <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 8013fcc:	6879      	ldr	r1, [r7, #4]
 8013fce:	6938      	ldr	r0, [r7, #16]
 8013fd0:	f000 f83c 	bl	801404c <zb_malloc_track>
 8013fd4:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 8013fd6:	693a      	ldr	r2, [r7, #16]
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	60da      	str	r2, [r3, #12]
            break;
 8013fdc:	e023      	b.n	8014026 <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	d006      	beq.n	8013ff4 <Zigbee_M0RequestProcessing+0xbc>
 8013fe6:	4b13      	ldr	r3, [pc, #76]	; (8014034 <Zigbee_M0RequestProcessing+0xfc>)
 8013fe8:	4a13      	ldr	r2, [pc, #76]	; (8014038 <Zigbee_M0RequestProcessing+0x100>)
 8013fea:	f640 71ea 	movw	r1, #4074	; 0xfea
 8013fee:	4813      	ldr	r0, [pc, #76]	; (801403c <Zigbee_M0RequestProcessing+0x104>)
 8013ff0:	f000 fad4 	bl	801459c <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	689b      	ldr	r3, [r3, #8]
 8013ff8:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d106      	bne.n	801400e <Zigbee_M0RequestProcessing+0xd6>
 8014000:	4b11      	ldr	r3, [pc, #68]	; (8014048 <Zigbee_M0RequestProcessing+0x110>)
 8014002:	4a0d      	ldr	r2, [pc, #52]	; (8014038 <Zigbee_M0RequestProcessing+0x100>)
 8014004:	f640 71ec 	movw	r1, #4076	; 0xfec
 8014008:	480c      	ldr	r0, [pc, #48]	; (801403c <Zigbee_M0RequestProcessing+0x104>)
 801400a:	f000 fac7 	bl	801459c <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 801400e:	68b8      	ldr	r0, [r7, #8]
 8014010:	f000 f838 	bl	8014084 <zb_malloc_untrack>
 8014014:	60b8      	str	r0, [r7, #8]
            free(ptr);
 8014016:	68b8      	ldr	r0, [r7, #8]
 8014018:	f000 fae6 	bl	80145e8 <free>
            break;
 801401c:	e003      	b.n	8014026 <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 801401e:	2301      	movs	r3, #1
 8014020:	75fb      	strb	r3, [r7, #23]
            break;
 8014022:	e000      	b.n	8014026 <Zigbee_M0RequestProcessing+0xee>
            break;
 8014024:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 8014026:	f7fd f941 	bl	80112ac <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 801402a:	7dfb      	ldrb	r3, [r7, #23]
}
 801402c:	4618      	mov	r0, r3
 801402e:	371c      	adds	r7, #28
 8014030:	46bd      	mov	sp, r7
 8014032:	bd90      	pop	{r4, r7, pc}
 8014034:	08016cc0 	.word	0x08016cc0
 8014038:	0801713c 	.word	0x0801713c
 801403c:	08016bb8 	.word	0x08016bb8
 8014040:	200017b8 	.word	0x200017b8
 8014044:	08016ef0 	.word	0x08016ef0
 8014048:	08016cd8 	.word	0x08016cd8

0801404c <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 801404c:	b480      	push	{r7}
 801404e:	b085      	sub	sp, #20
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
 8014054:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	683a      	ldr	r2, [r7, #0]
 801405a:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	3304      	adds	r3, #4
 8014060:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8014062:	4b07      	ldr	r3, [pc, #28]	; (8014080 <zb_malloc_track+0x34>)
 8014064:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	4413      	add	r3, r2
 801406c:	4a04      	ldr	r2, [pc, #16]	; (8014080 <zb_malloc_track+0x34>)
 801406e:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8014072:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8014074:	4618      	mov	r0, r3
 8014076:	3714      	adds	r7, #20
 8014078:	46bd      	mov	sp, r7
 801407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407e:	4770      	bx	lr
 8014080:	200017b8 	.word	0x200017b8

08014084 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8014084:	b480      	push	{r7}
 8014086:	b085      	sub	sp, #20
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	3b04      	subs	r3, #4
 8014090:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 8014098:	4b07      	ldr	r3, [pc, #28]	; (80140b8 <zb_malloc_untrack+0x34>)
 801409a:	f8d3 200d 	ldr.w	r2, [r3, #13]
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	1ad3      	subs	r3, r2, r3
 80140a2:	4a05      	ldr	r2, [pc, #20]	; (80140b8 <zb_malloc_untrack+0x34>)
 80140a4:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 80140a8:	68fb      	ldr	r3, [r7, #12]
#endif
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3714      	adds	r7, #20
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop
 80140b8:	200017b8 	.word	0x200017b8

080140bc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80140bc:	b480      	push	{r7}
 80140be:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80140c0:	4b05      	ldr	r3, [pc, #20]	; (80140d8 <UTIL_LPM_Init+0x1c>)
 80140c2:	2200      	movs	r2, #0
 80140c4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80140c6:	4b05      	ldr	r3, [pc, #20]	; (80140dc <UTIL_LPM_Init+0x20>)
 80140c8:	2200      	movs	r2, #0
 80140ca:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80140cc:	bf00      	nop
 80140ce:	46bd      	mov	sp, r7
 80140d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop
 80140d8:	200019ac 	.word	0x200019ac
 80140dc:	200019b0 	.word	0x200019b0

080140e0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80140e0:	b480      	push	{r7}
 80140e2:	b087      	sub	sp, #28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	460b      	mov	r3, r1
 80140ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140ec:	f3ef 8310 	mrs	r3, PRIMASK
 80140f0:	613b      	str	r3, [r7, #16]
  return(result);
 80140f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80140f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80140f6:	b672      	cpsid	i
}
 80140f8:	bf00      	nop
  
  switch( state )
 80140fa:	78fb      	ldrb	r3, [r7, #3]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d008      	beq.n	8014112 <UTIL_LPM_SetStopMode+0x32>
 8014100:	2b01      	cmp	r3, #1
 8014102:	d10e      	bne.n	8014122 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8014104:	4b0d      	ldr	r3, [pc, #52]	; (801413c <UTIL_LPM_SetStopMode+0x5c>)
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	4313      	orrs	r3, r2
 801410c:	4a0b      	ldr	r2, [pc, #44]	; (801413c <UTIL_LPM_SetStopMode+0x5c>)
 801410e:	6013      	str	r3, [r2, #0]
      break;
 8014110:	e008      	b.n	8014124 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	43da      	mvns	r2, r3
 8014116:	4b09      	ldr	r3, [pc, #36]	; (801413c <UTIL_LPM_SetStopMode+0x5c>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	4013      	ands	r3, r2
 801411c:	4a07      	ldr	r2, [pc, #28]	; (801413c <UTIL_LPM_SetStopMode+0x5c>)
 801411e:	6013      	str	r3, [r2, #0]
      break;
 8014120:	e000      	b.n	8014124 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8014122:	bf00      	nop
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f383 8810 	msr	PRIMASK, r3
}
 801412e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014130:	bf00      	nop
 8014132:	371c      	adds	r7, #28
 8014134:	46bd      	mov	sp, r7
 8014136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413a:	4770      	bx	lr
 801413c:	200019ac 	.word	0x200019ac

08014140 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8014140:	b480      	push	{r7}
 8014142:	b087      	sub	sp, #28
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	460b      	mov	r3, r1
 801414a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801414c:	f3ef 8310 	mrs	r3, PRIMASK
 8014150:	613b      	str	r3, [r7, #16]
  return(result);
 8014152:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8014154:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014156:	b672      	cpsid	i
}
 8014158:	bf00      	nop
  
  switch(state)
 801415a:	78fb      	ldrb	r3, [r7, #3]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d008      	beq.n	8014172 <UTIL_LPM_SetOffMode+0x32>
 8014160:	2b01      	cmp	r3, #1
 8014162:	d10e      	bne.n	8014182 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8014164:	4b0d      	ldr	r3, [pc, #52]	; (801419c <UTIL_LPM_SetOffMode+0x5c>)
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	4313      	orrs	r3, r2
 801416c:	4a0b      	ldr	r2, [pc, #44]	; (801419c <UTIL_LPM_SetOffMode+0x5c>)
 801416e:	6013      	str	r3, [r2, #0]
      break;
 8014170:	e008      	b.n	8014184 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	43da      	mvns	r2, r3
 8014176:	4b09      	ldr	r3, [pc, #36]	; (801419c <UTIL_LPM_SetOffMode+0x5c>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	4013      	ands	r3, r2
 801417c:	4a07      	ldr	r2, [pc, #28]	; (801419c <UTIL_LPM_SetOffMode+0x5c>)
 801417e:	6013      	str	r3, [r2, #0]
      break;
 8014180:	e000      	b.n	8014184 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8014182:	bf00      	nop
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f383 8810 	msr	PRIMASK, r3
}
 801418e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014190:	bf00      	nop
 8014192:	371c      	adds	r7, #28
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr
 801419c:	200019b0 	.word	0x200019b0

080141a0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b090      	sub	sp, #64	; 0x40
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80141a8:	4b73      	ldr	r3, [pc, #460]	; (8014378 <UTIL_SEQ_Run+0x1d8>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80141ae:	4b72      	ldr	r3, [pc, #456]	; (8014378 <UTIL_SEQ_Run+0x1d8>)
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	4013      	ands	r3, r2
 80141b6:	4a70      	ldr	r2, [pc, #448]	; (8014378 <UTIL_SEQ_Run+0x1d8>)
 80141b8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80141ba:	4b70      	ldr	r3, [pc, #448]	; (801437c <UTIL_SEQ_Run+0x1dc>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80141c0:	4b6f      	ldr	r3, [pc, #444]	; (8014380 <UTIL_SEQ_Run+0x1e0>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80141c6:	4b6f      	ldr	r3, [pc, #444]	; (8014384 <UTIL_SEQ_Run+0x1e4>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80141cc:	4b6e      	ldr	r3, [pc, #440]	; (8014388 <UTIL_SEQ_Run+0x1e8>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80141d2:	e08d      	b.n	80142f0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80141d4:	2300      	movs	r3, #0
 80141d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80141d8:	e002      	b.n	80141e0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80141da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141dc:	3301      	adds	r3, #1
 80141de:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80141e0:	4a6a      	ldr	r2, [pc, #424]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 80141e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80141e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ea:	401a      	ands	r2, r3
 80141ec:	4b62      	ldr	r3, [pc, #392]	; (8014378 <UTIL_SEQ_Run+0x1d8>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	4013      	ands	r3, r2
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d0f1      	beq.n	80141da <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80141f6:	4a65      	ldr	r2, [pc, #404]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 80141f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80141fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014200:	401a      	ands	r2, r3
 8014202:	4b5d      	ldr	r3, [pc, #372]	; (8014378 <UTIL_SEQ_Run+0x1d8>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	4013      	ands	r3, r2
 8014208:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801420a:	4a60      	ldr	r2, [pc, #384]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 801420c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801420e:	00db      	lsls	r3, r3, #3
 8014210:	4413      	add	r3, r2
 8014212:	685a      	ldr	r2, [r3, #4]
 8014214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014216:	4013      	ands	r3, r2
 8014218:	2b00      	cmp	r3, #0
 801421a:	d106      	bne.n	801422a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801421c:	4a5b      	ldr	r2, [pc, #364]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 801421e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014220:	00db      	lsls	r3, r3, #3
 8014222:	4413      	add	r3, r2
 8014224:	f04f 32ff 	mov.w	r2, #4294967295
 8014228:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801422a:	4a58      	ldr	r2, [pc, #352]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 801422c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801422e:	00db      	lsls	r3, r3, #3
 8014230:	4413      	add	r3, r2
 8014232:	685a      	ldr	r2, [r3, #4]
 8014234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014236:	4013      	ands	r3, r2
 8014238:	4618      	mov	r0, r3
 801423a:	f000 f973 	bl	8014524 <SEQ_BitPosition>
 801423e:	4603      	mov	r3, r0
 8014240:	461a      	mov	r2, r3
 8014242:	4b53      	ldr	r3, [pc, #332]	; (8014390 <UTIL_SEQ_Run+0x1f0>)
 8014244:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8014246:	4a51      	ldr	r2, [pc, #324]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 8014248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801424a:	00db      	lsls	r3, r3, #3
 801424c:	4413      	add	r3, r2
 801424e:	685a      	ldr	r2, [r3, #4]
 8014250:	4b4f      	ldr	r3, [pc, #316]	; (8014390 <UTIL_SEQ_Run+0x1f0>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	2101      	movs	r1, #1
 8014256:	fa01 f303 	lsl.w	r3, r1, r3
 801425a:	43db      	mvns	r3, r3
 801425c:	401a      	ands	r2, r3
 801425e:	494b      	ldr	r1, [pc, #300]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 8014260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014262:	00db      	lsls	r3, r3, #3
 8014264:	440b      	add	r3, r1
 8014266:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014268:	f3ef 8310 	mrs	r3, PRIMASK
 801426c:	61bb      	str	r3, [r7, #24]
  return(result);
 801426e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014270:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8014272:	b672      	cpsid	i
}
 8014274:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8014276:	4b46      	ldr	r3, [pc, #280]	; (8014390 <UTIL_SEQ_Run+0x1f0>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	2201      	movs	r2, #1
 801427c:	fa02 f303 	lsl.w	r3, r2, r3
 8014280:	43da      	mvns	r2, r3
 8014282:	4b3e      	ldr	r3, [pc, #248]	; (801437c <UTIL_SEQ_Run+0x1dc>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	4013      	ands	r3, r2
 8014288:	4a3c      	ldr	r2, [pc, #240]	; (801437c <UTIL_SEQ_Run+0x1dc>)
 801428a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801428c:	2302      	movs	r3, #2
 801428e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014290:	e013      	b.n	80142ba <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8014292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014294:	3b01      	subs	r3, #1
 8014296:	4a3d      	ldr	r2, [pc, #244]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 8014298:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801429c:	4b3c      	ldr	r3, [pc, #240]	; (8014390 <UTIL_SEQ_Run+0x1f0>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2201      	movs	r2, #1
 80142a2:	fa02 f303 	lsl.w	r3, r2, r3
 80142a6:	43da      	mvns	r2, r3
 80142a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142aa:	3b01      	subs	r3, #1
 80142ac:	400a      	ands	r2, r1
 80142ae:	4937      	ldr	r1, [pc, #220]	; (801438c <UTIL_SEQ_Run+0x1ec>)
 80142b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80142b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142b6:	3b01      	subs	r3, #1
 80142b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80142ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d1e8      	bne.n	8014292 <UTIL_SEQ_Run+0xf2>
 80142c0:	6a3b      	ldr	r3, [r7, #32]
 80142c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	f383 8810 	msr	PRIMASK, r3
}
 80142ca:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80142cc:	4b30      	ldr	r3, [pc, #192]	; (8014390 <UTIL_SEQ_Run+0x1f0>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	4a30      	ldr	r2, [pc, #192]	; (8014394 <UTIL_SEQ_Run+0x1f4>)
 80142d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80142d6:	4798      	blx	r3

    local_taskset = TaskSet;
 80142d8:	4b28      	ldr	r3, [pc, #160]	; (801437c <UTIL_SEQ_Run+0x1dc>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80142de:	4b28      	ldr	r3, [pc, #160]	; (8014380 <UTIL_SEQ_Run+0x1e0>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80142e4:	4b27      	ldr	r3, [pc, #156]	; (8014384 <UTIL_SEQ_Run+0x1e4>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80142ea:	4b27      	ldr	r3, [pc, #156]	; (8014388 <UTIL_SEQ_Run+0x1e8>)
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80142f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f4:	401a      	ands	r2, r3
 80142f6:	4b20      	ldr	r3, [pc, #128]	; (8014378 <UTIL_SEQ_Run+0x1d8>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	4013      	ands	r3, r2
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d005      	beq.n	801430c <UTIL_SEQ_Run+0x16c>
 8014300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014304:	4013      	ands	r3, r2
 8014306:	2b00      	cmp	r3, #0
 8014308:	f43f af64 	beq.w	80141d4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801430c:	4b20      	ldr	r3, [pc, #128]	; (8014390 <UTIL_SEQ_Run+0x1f0>)
 801430e:	f04f 32ff 	mov.w	r2, #4294967295
 8014312:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8014314:	f000 f8f8 	bl	8014508 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014318:	f3ef 8310 	mrs	r3, PRIMASK
 801431c:	613b      	str	r3, [r7, #16]
  return(result);
 801431e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8014320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8014322:	b672      	cpsid	i
}
 8014324:	bf00      	nop
  local_taskset = TaskSet;
 8014326:	4b15      	ldr	r3, [pc, #84]	; (801437c <UTIL_SEQ_Run+0x1dc>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801432c:	4b14      	ldr	r3, [pc, #80]	; (8014380 <UTIL_SEQ_Run+0x1e0>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8014332:	4b14      	ldr	r3, [pc, #80]	; (8014384 <UTIL_SEQ_Run+0x1e4>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8014338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433c:	401a      	ands	r2, r3
 801433e:	4b0e      	ldr	r3, [pc, #56]	; (8014378 <UTIL_SEQ_Run+0x1d8>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	4013      	ands	r3, r2
 8014344:	2b00      	cmp	r3, #0
 8014346:	d107      	bne.n	8014358 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8014348:	4b0f      	ldr	r3, [pc, #60]	; (8014388 <UTIL_SEQ_Run+0x1e8>)
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801434e:	4013      	ands	r3, r2
 8014350:	2b00      	cmp	r3, #0
 8014352:	d101      	bne.n	8014358 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8014354:	f7f2 fed0 	bl	80070f8 <UTIL_SEQ_Idle>
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	f383 8810 	msr	PRIMASK, r3
}
 8014362:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8014364:	f000 f8d7 	bl	8014516 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8014368:	4a03      	ldr	r2, [pc, #12]	; (8014378 <UTIL_SEQ_Run+0x1d8>)
 801436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436c:	6013      	str	r3, [r2, #0]

  return;
 801436e:	bf00      	nop
}
 8014370:	3740      	adds	r7, #64	; 0x40
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	20000034 	.word	0x20000034
 801437c:	200019b4 	.word	0x200019b4
 8014380:	200019b8 	.word	0x200019b8
 8014384:	20000030 	.word	0x20000030
 8014388:	200019bc 	.word	0x200019bc
 801438c:	20001a44 	.word	0x20001a44
 8014390:	200019c0 	.word	0x200019c0
 8014394:	200019c4 	.word	0x200019c4

08014398 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b088      	sub	sp, #32
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80143a4:	f3ef 8310 	mrs	r3, PRIMASK
 80143a8:	617b      	str	r3, [r7, #20]
  return(result);
 80143aa:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80143ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80143ae:	b672      	cpsid	i
}
 80143b0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80143b2:	68f8      	ldr	r0, [r7, #12]
 80143b4:	f000 f8b6 	bl	8014524 <SEQ_BitPosition>
 80143b8:	4603      	mov	r3, r0
 80143ba:	4619      	mov	r1, r3
 80143bc:	4a06      	ldr	r2, [pc, #24]	; (80143d8 <UTIL_SEQ_RegTask+0x40>)
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80143c4:	69fb      	ldr	r3, [r7, #28]
 80143c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80143c8:	69bb      	ldr	r3, [r7, #24]
 80143ca:	f383 8810 	msr	PRIMASK, r3
}
 80143ce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80143d0:	bf00      	nop
}
 80143d2:	3720      	adds	r7, #32
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}
 80143d8:	200019c4 	.word	0x200019c4

080143dc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80143dc:	b480      	push	{r7}
 80143de:	b087      	sub	sp, #28
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80143e6:	f3ef 8310 	mrs	r3, PRIMASK
 80143ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80143ec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80143ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80143f0:	b672      	cpsid	i
}
 80143f2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80143f4:	4b0d      	ldr	r3, [pc, #52]	; (801442c <UTIL_SEQ_SetTask+0x50>)
 80143f6:	681a      	ldr	r2, [r3, #0]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	4313      	orrs	r3, r2
 80143fc:	4a0b      	ldr	r2, [pc, #44]	; (801442c <UTIL_SEQ_SetTask+0x50>)
 80143fe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8014400:	4a0b      	ldr	r2, [pc, #44]	; (8014430 <UTIL_SEQ_SetTask+0x54>)
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	431a      	orrs	r2, r3
 801440c:	4908      	ldr	r1, [pc, #32]	; (8014430 <UTIL_SEQ_SetTask+0x54>)
 801440e:	683b      	ldr	r3, [r7, #0]
 8014410:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	f383 8810 	msr	PRIMASK, r3
}
 801441e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014420:	bf00      	nop
}
 8014422:	371c      	adds	r7, #28
 8014424:	46bd      	mov	sp, r7
 8014426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442a:	4770      	bx	lr
 801442c:	200019b4 	.word	0x200019b4
 8014430:	20001a44 	.word	0x20001a44

08014434 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8014434:	b480      	push	{r7}
 8014436:	b087      	sub	sp, #28
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801443c:	f3ef 8310 	mrs	r3, PRIMASK
 8014440:	60fb      	str	r3, [r7, #12]
  return(result);
 8014442:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014446:	b672      	cpsid	i
}
 8014448:	bf00      	nop

  EvtSet |= EvtId_bm;
 801444a:	4b09      	ldr	r3, [pc, #36]	; (8014470 <UTIL_SEQ_SetEvt+0x3c>)
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	4313      	orrs	r3, r2
 8014452:	4a07      	ldr	r2, [pc, #28]	; (8014470 <UTIL_SEQ_SetEvt+0x3c>)
 8014454:	6013      	str	r3, [r2, #0]
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	f383 8810 	msr	PRIMASK, r3
}
 8014460:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014462:	bf00      	nop
}
 8014464:	371c      	adds	r7, #28
 8014466:	46bd      	mov	sp, r7
 8014468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop
 8014470:	200019b8 	.word	0x200019b8

08014474 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b088      	sub	sp, #32
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801447c:	4b1f      	ldr	r3, [pc, #124]	; (80144fc <UTIL_SEQ_WaitEvt+0x88>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8014482:	4b1e      	ldr	r3, [pc, #120]	; (80144fc <UTIL_SEQ_WaitEvt+0x88>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801448a:	d102      	bne.n	8014492 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801448c:	2300      	movs	r3, #0
 801448e:	61fb      	str	r3, [r7, #28]
 8014490:	e005      	b.n	801449e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8014492:	4b1a      	ldr	r3, [pc, #104]	; (80144fc <UTIL_SEQ_WaitEvt+0x88>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2201      	movs	r2, #1
 8014498:	fa02 f303 	lsl.w	r3, r2, r3
 801449c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801449e:	4b18      	ldr	r3, [pc, #96]	; (8014500 <UTIL_SEQ_WaitEvt+0x8c>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80144a4:	4a16      	ldr	r2, [pc, #88]	; (8014500 <UTIL_SEQ_WaitEvt+0x8c>)
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80144aa:	e003      	b.n	80144b4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80144ac:	6879      	ldr	r1, [r7, #4]
 80144ae:	69f8      	ldr	r0, [r7, #28]
 80144b0:	f7f2 fe29 	bl	8007106 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80144b4:	4b13      	ldr	r3, [pc, #76]	; (8014504 <UTIL_SEQ_WaitEvt+0x90>)
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	4013      	ands	r3, r2
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d0f5      	beq.n	80144ac <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80144c0:	4a0e      	ldr	r2, [pc, #56]	; (80144fc <UTIL_SEQ_WaitEvt+0x88>)
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80144c6:	f3ef 8310 	mrs	r3, PRIMASK
 80144ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80144cc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80144ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80144d0:	b672      	cpsid	i
}
 80144d2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	43da      	mvns	r2, r3
 80144d8:	4b0a      	ldr	r3, [pc, #40]	; (8014504 <UTIL_SEQ_WaitEvt+0x90>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	4013      	ands	r3, r2
 80144de:	4a09      	ldr	r2, [pc, #36]	; (8014504 <UTIL_SEQ_WaitEvt+0x90>)
 80144e0:	6013      	str	r3, [r2, #0]
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f383 8810 	msr	PRIMASK, r3
}
 80144ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80144ee:	4a04      	ldr	r2, [pc, #16]	; (8014500 <UTIL_SEQ_WaitEvt+0x8c>)
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	6013      	str	r3, [r2, #0]
  return;
 80144f4:	bf00      	nop
}
 80144f6:	3720      	adds	r7, #32
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}
 80144fc:	200019c0 	.word	0x200019c0
 8014500:	200019bc 	.word	0x200019bc
 8014504:	200019b8 	.word	0x200019b8

08014508 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8014508:	b480      	push	{r7}
 801450a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801450c:	bf00      	nop
}
 801450e:	46bd      	mov	sp, r7
 8014510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014514:	4770      	bx	lr

08014516 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8014516:	b480      	push	{r7}
 8014518:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801451a:	bf00      	nop
}
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr

08014524 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8014524:	b480      	push	{r7}
 8014526:	b085      	sub	sp, #20
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801452c:	2300      	movs	r3, #0
 801452e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	0c1b      	lsrs	r3, r3, #16
 8014538:	041b      	lsls	r3, r3, #16
 801453a:	2b00      	cmp	r3, #0
 801453c:	d104      	bne.n	8014548 <SEQ_BitPosition+0x24>
 801453e:	2310      	movs	r3, #16
 8014540:	73fb      	strb	r3, [r7, #15]
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	041b      	lsls	r3, r3, #16
 8014546:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801454e:	2b00      	cmp	r3, #0
 8014550:	d105      	bne.n	801455e <SEQ_BitPosition+0x3a>
 8014552:	7bfb      	ldrb	r3, [r7, #15]
 8014554:	3308      	adds	r3, #8
 8014556:	73fb      	strb	r3, [r7, #15]
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	021b      	lsls	r3, r3, #8
 801455c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014564:	2b00      	cmp	r3, #0
 8014566:	d105      	bne.n	8014574 <SEQ_BitPosition+0x50>
 8014568:	7bfb      	ldrb	r3, [r7, #15]
 801456a:	3304      	adds	r3, #4
 801456c:	73fb      	strb	r3, [r7, #15]
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	011b      	lsls	r3, r3, #4
 8014572:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	0f1b      	lsrs	r3, r3, #28
 8014578:	4a07      	ldr	r2, [pc, #28]	; (8014598 <SEQ_BitPosition+0x74>)
 801457a:	5cd2      	ldrb	r2, [r2, r3]
 801457c:	7bfb      	ldrb	r3, [r7, #15]
 801457e:	4413      	add	r3, r2
 8014580:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8014582:	7bfb      	ldrb	r3, [r7, #15]
 8014584:	f1c3 031f 	rsb	r3, r3, #31
 8014588:	b2db      	uxtb	r3, r3
}
 801458a:	4618      	mov	r0, r3
 801458c:	3714      	adds	r7, #20
 801458e:	46bd      	mov	sp, r7
 8014590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014594:	4770      	bx	lr
 8014596:	bf00      	nop
 8014598:	08017158 	.word	0x08017158

0801459c <__assert_func>:
 801459c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801459e:	4614      	mov	r4, r2
 80145a0:	461a      	mov	r2, r3
 80145a2:	4b09      	ldr	r3, [pc, #36]	; (80145c8 <__assert_func+0x2c>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	4605      	mov	r5, r0
 80145a8:	68d8      	ldr	r0, [r3, #12]
 80145aa:	b14c      	cbz	r4, 80145c0 <__assert_func+0x24>
 80145ac:	4b07      	ldr	r3, [pc, #28]	; (80145cc <__assert_func+0x30>)
 80145ae:	9100      	str	r1, [sp, #0]
 80145b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80145b4:	4906      	ldr	r1, [pc, #24]	; (80145d0 <__assert_func+0x34>)
 80145b6:	462b      	mov	r3, r5
 80145b8:	f000 f96e 	bl	8014898 <fiprintf>
 80145bc:	f000 fb27 	bl	8014c0e <abort>
 80145c0:	4b04      	ldr	r3, [pc, #16]	; (80145d4 <__assert_func+0x38>)
 80145c2:	461c      	mov	r4, r3
 80145c4:	e7f3      	b.n	80145ae <__assert_func+0x12>
 80145c6:	bf00      	nop
 80145c8:	20000090 	.word	0x20000090
 80145cc:	08017168 	.word	0x08017168
 80145d0:	08017175 	.word	0x08017175
 80145d4:	080171a3 	.word	0x080171a3

080145d8 <malloc>:
 80145d8:	4b02      	ldr	r3, [pc, #8]	; (80145e4 <malloc+0xc>)
 80145da:	4601      	mov	r1, r0
 80145dc:	6818      	ldr	r0, [r3, #0]
 80145de:	f000 b82b 	b.w	8014638 <_malloc_r>
 80145e2:	bf00      	nop
 80145e4:	20000090 	.word	0x20000090

080145e8 <free>:
 80145e8:	4b02      	ldr	r3, [pc, #8]	; (80145f4 <free+0xc>)
 80145ea:	4601      	mov	r1, r0
 80145ec:	6818      	ldr	r0, [r3, #0]
 80145ee:	f000 bb15 	b.w	8014c1c <_free_r>
 80145f2:	bf00      	nop
 80145f4:	20000090 	.word	0x20000090

080145f8 <sbrk_aligned>:
 80145f8:	b570      	push	{r4, r5, r6, lr}
 80145fa:	4e0e      	ldr	r6, [pc, #56]	; (8014634 <sbrk_aligned+0x3c>)
 80145fc:	460c      	mov	r4, r1
 80145fe:	6831      	ldr	r1, [r6, #0]
 8014600:	4605      	mov	r5, r0
 8014602:	b911      	cbnz	r1, 801460a <sbrk_aligned+0x12>
 8014604:	f000 faa4 	bl	8014b50 <_sbrk_r>
 8014608:	6030      	str	r0, [r6, #0]
 801460a:	4621      	mov	r1, r4
 801460c:	4628      	mov	r0, r5
 801460e:	f000 fa9f 	bl	8014b50 <_sbrk_r>
 8014612:	1c43      	adds	r3, r0, #1
 8014614:	d00a      	beq.n	801462c <sbrk_aligned+0x34>
 8014616:	1cc4      	adds	r4, r0, #3
 8014618:	f024 0403 	bic.w	r4, r4, #3
 801461c:	42a0      	cmp	r0, r4
 801461e:	d007      	beq.n	8014630 <sbrk_aligned+0x38>
 8014620:	1a21      	subs	r1, r4, r0
 8014622:	4628      	mov	r0, r5
 8014624:	f000 fa94 	bl	8014b50 <_sbrk_r>
 8014628:	3001      	adds	r0, #1
 801462a:	d101      	bne.n	8014630 <sbrk_aligned+0x38>
 801462c:	f04f 34ff 	mov.w	r4, #4294967295
 8014630:	4620      	mov	r0, r4
 8014632:	bd70      	pop	{r4, r5, r6, pc}
 8014634:	20001a58 	.word	0x20001a58

08014638 <_malloc_r>:
 8014638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801463c:	1ccd      	adds	r5, r1, #3
 801463e:	f025 0503 	bic.w	r5, r5, #3
 8014642:	3508      	adds	r5, #8
 8014644:	2d0c      	cmp	r5, #12
 8014646:	bf38      	it	cc
 8014648:	250c      	movcc	r5, #12
 801464a:	2d00      	cmp	r5, #0
 801464c:	4607      	mov	r7, r0
 801464e:	db01      	blt.n	8014654 <_malloc_r+0x1c>
 8014650:	42a9      	cmp	r1, r5
 8014652:	d905      	bls.n	8014660 <_malloc_r+0x28>
 8014654:	230c      	movs	r3, #12
 8014656:	603b      	str	r3, [r7, #0]
 8014658:	2600      	movs	r6, #0
 801465a:	4630      	mov	r0, r6
 801465c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014660:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014734 <_malloc_r+0xfc>
 8014664:	f000 f868 	bl	8014738 <__malloc_lock>
 8014668:	f8d8 3000 	ldr.w	r3, [r8]
 801466c:	461c      	mov	r4, r3
 801466e:	bb5c      	cbnz	r4, 80146c8 <_malloc_r+0x90>
 8014670:	4629      	mov	r1, r5
 8014672:	4638      	mov	r0, r7
 8014674:	f7ff ffc0 	bl	80145f8 <sbrk_aligned>
 8014678:	1c43      	adds	r3, r0, #1
 801467a:	4604      	mov	r4, r0
 801467c:	d155      	bne.n	801472a <_malloc_r+0xf2>
 801467e:	f8d8 4000 	ldr.w	r4, [r8]
 8014682:	4626      	mov	r6, r4
 8014684:	2e00      	cmp	r6, #0
 8014686:	d145      	bne.n	8014714 <_malloc_r+0xdc>
 8014688:	2c00      	cmp	r4, #0
 801468a:	d048      	beq.n	801471e <_malloc_r+0xe6>
 801468c:	6823      	ldr	r3, [r4, #0]
 801468e:	4631      	mov	r1, r6
 8014690:	4638      	mov	r0, r7
 8014692:	eb04 0903 	add.w	r9, r4, r3
 8014696:	f000 fa5b 	bl	8014b50 <_sbrk_r>
 801469a:	4581      	cmp	r9, r0
 801469c:	d13f      	bne.n	801471e <_malloc_r+0xe6>
 801469e:	6821      	ldr	r1, [r4, #0]
 80146a0:	1a6d      	subs	r5, r5, r1
 80146a2:	4629      	mov	r1, r5
 80146a4:	4638      	mov	r0, r7
 80146a6:	f7ff ffa7 	bl	80145f8 <sbrk_aligned>
 80146aa:	3001      	adds	r0, #1
 80146ac:	d037      	beq.n	801471e <_malloc_r+0xe6>
 80146ae:	6823      	ldr	r3, [r4, #0]
 80146b0:	442b      	add	r3, r5
 80146b2:	6023      	str	r3, [r4, #0]
 80146b4:	f8d8 3000 	ldr.w	r3, [r8]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d038      	beq.n	801472e <_malloc_r+0xf6>
 80146bc:	685a      	ldr	r2, [r3, #4]
 80146be:	42a2      	cmp	r2, r4
 80146c0:	d12b      	bne.n	801471a <_malloc_r+0xe2>
 80146c2:	2200      	movs	r2, #0
 80146c4:	605a      	str	r2, [r3, #4]
 80146c6:	e00f      	b.n	80146e8 <_malloc_r+0xb0>
 80146c8:	6822      	ldr	r2, [r4, #0]
 80146ca:	1b52      	subs	r2, r2, r5
 80146cc:	d41f      	bmi.n	801470e <_malloc_r+0xd6>
 80146ce:	2a0b      	cmp	r2, #11
 80146d0:	d917      	bls.n	8014702 <_malloc_r+0xca>
 80146d2:	1961      	adds	r1, r4, r5
 80146d4:	42a3      	cmp	r3, r4
 80146d6:	6025      	str	r5, [r4, #0]
 80146d8:	bf18      	it	ne
 80146da:	6059      	strne	r1, [r3, #4]
 80146dc:	6863      	ldr	r3, [r4, #4]
 80146de:	bf08      	it	eq
 80146e0:	f8c8 1000 	streq.w	r1, [r8]
 80146e4:	5162      	str	r2, [r4, r5]
 80146e6:	604b      	str	r3, [r1, #4]
 80146e8:	4638      	mov	r0, r7
 80146ea:	f104 060b 	add.w	r6, r4, #11
 80146ee:	f000 f829 	bl	8014744 <__malloc_unlock>
 80146f2:	f026 0607 	bic.w	r6, r6, #7
 80146f6:	1d23      	adds	r3, r4, #4
 80146f8:	1af2      	subs	r2, r6, r3
 80146fa:	d0ae      	beq.n	801465a <_malloc_r+0x22>
 80146fc:	1b9b      	subs	r3, r3, r6
 80146fe:	50a3      	str	r3, [r4, r2]
 8014700:	e7ab      	b.n	801465a <_malloc_r+0x22>
 8014702:	42a3      	cmp	r3, r4
 8014704:	6862      	ldr	r2, [r4, #4]
 8014706:	d1dd      	bne.n	80146c4 <_malloc_r+0x8c>
 8014708:	f8c8 2000 	str.w	r2, [r8]
 801470c:	e7ec      	b.n	80146e8 <_malloc_r+0xb0>
 801470e:	4623      	mov	r3, r4
 8014710:	6864      	ldr	r4, [r4, #4]
 8014712:	e7ac      	b.n	801466e <_malloc_r+0x36>
 8014714:	4634      	mov	r4, r6
 8014716:	6876      	ldr	r6, [r6, #4]
 8014718:	e7b4      	b.n	8014684 <_malloc_r+0x4c>
 801471a:	4613      	mov	r3, r2
 801471c:	e7cc      	b.n	80146b8 <_malloc_r+0x80>
 801471e:	230c      	movs	r3, #12
 8014720:	603b      	str	r3, [r7, #0]
 8014722:	4638      	mov	r0, r7
 8014724:	f000 f80e 	bl	8014744 <__malloc_unlock>
 8014728:	e797      	b.n	801465a <_malloc_r+0x22>
 801472a:	6025      	str	r5, [r4, #0]
 801472c:	e7dc      	b.n	80146e8 <_malloc_r+0xb0>
 801472e:	605b      	str	r3, [r3, #4]
 8014730:	deff      	udf	#255	; 0xff
 8014732:	bf00      	nop
 8014734:	20001a54 	.word	0x20001a54

08014738 <__malloc_lock>:
 8014738:	4801      	ldr	r0, [pc, #4]	; (8014740 <__malloc_lock+0x8>)
 801473a:	f000 ba56 	b.w	8014bea <__retarget_lock_acquire_recursive>
 801473e:	bf00      	nop
 8014740:	20001b9c 	.word	0x20001b9c

08014744 <__malloc_unlock>:
 8014744:	4801      	ldr	r0, [pc, #4]	; (801474c <__malloc_unlock+0x8>)
 8014746:	f000 ba51 	b.w	8014bec <__retarget_lock_release_recursive>
 801474a:	bf00      	nop
 801474c:	20001b9c 	.word	0x20001b9c

08014750 <std>:
 8014750:	2300      	movs	r3, #0
 8014752:	b510      	push	{r4, lr}
 8014754:	4604      	mov	r4, r0
 8014756:	e9c0 3300 	strd	r3, r3, [r0]
 801475a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801475e:	6083      	str	r3, [r0, #8]
 8014760:	8181      	strh	r1, [r0, #12]
 8014762:	6643      	str	r3, [r0, #100]	; 0x64
 8014764:	81c2      	strh	r2, [r0, #14]
 8014766:	6183      	str	r3, [r0, #24]
 8014768:	4619      	mov	r1, r3
 801476a:	2208      	movs	r2, #8
 801476c:	305c      	adds	r0, #92	; 0x5c
 801476e:	f000 f9a5 	bl	8014abc <memset>
 8014772:	4b0d      	ldr	r3, [pc, #52]	; (80147a8 <std+0x58>)
 8014774:	6263      	str	r3, [r4, #36]	; 0x24
 8014776:	4b0d      	ldr	r3, [pc, #52]	; (80147ac <std+0x5c>)
 8014778:	62a3      	str	r3, [r4, #40]	; 0x28
 801477a:	4b0d      	ldr	r3, [pc, #52]	; (80147b0 <std+0x60>)
 801477c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801477e:	4b0d      	ldr	r3, [pc, #52]	; (80147b4 <std+0x64>)
 8014780:	6323      	str	r3, [r4, #48]	; 0x30
 8014782:	4b0d      	ldr	r3, [pc, #52]	; (80147b8 <std+0x68>)
 8014784:	6224      	str	r4, [r4, #32]
 8014786:	429c      	cmp	r4, r3
 8014788:	d006      	beq.n	8014798 <std+0x48>
 801478a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801478e:	4294      	cmp	r4, r2
 8014790:	d002      	beq.n	8014798 <std+0x48>
 8014792:	33d0      	adds	r3, #208	; 0xd0
 8014794:	429c      	cmp	r4, r3
 8014796:	d105      	bne.n	80147a4 <std+0x54>
 8014798:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147a0:	f000 ba22 	b.w	8014be8 <__retarget_lock_init_recursive>
 80147a4:	bd10      	pop	{r4, pc}
 80147a6:	bf00      	nop
 80147a8:	080149c5 	.word	0x080149c5
 80147ac:	080149e7 	.word	0x080149e7
 80147b0:	08014a1f 	.word	0x08014a1f
 80147b4:	08014a43 	.word	0x08014a43
 80147b8:	20001a5c 	.word	0x20001a5c

080147bc <stdio_exit_handler>:
 80147bc:	4a02      	ldr	r2, [pc, #8]	; (80147c8 <stdio_exit_handler+0xc>)
 80147be:	4903      	ldr	r1, [pc, #12]	; (80147cc <stdio_exit_handler+0x10>)
 80147c0:	4803      	ldr	r0, [pc, #12]	; (80147d0 <stdio_exit_handler+0x14>)
 80147c2:	f000 b87b 	b.w	80148bc <_fwalk_sglue>
 80147c6:	bf00      	nop
 80147c8:	20000038 	.word	0x20000038
 80147cc:	08015619 	.word	0x08015619
 80147d0:	20000044 	.word	0x20000044

080147d4 <cleanup_stdio>:
 80147d4:	6841      	ldr	r1, [r0, #4]
 80147d6:	4b0c      	ldr	r3, [pc, #48]	; (8014808 <cleanup_stdio+0x34>)
 80147d8:	4299      	cmp	r1, r3
 80147da:	b510      	push	{r4, lr}
 80147dc:	4604      	mov	r4, r0
 80147de:	d001      	beq.n	80147e4 <cleanup_stdio+0x10>
 80147e0:	f000 ff1a 	bl	8015618 <_fflush_r>
 80147e4:	68a1      	ldr	r1, [r4, #8]
 80147e6:	4b09      	ldr	r3, [pc, #36]	; (801480c <cleanup_stdio+0x38>)
 80147e8:	4299      	cmp	r1, r3
 80147ea:	d002      	beq.n	80147f2 <cleanup_stdio+0x1e>
 80147ec:	4620      	mov	r0, r4
 80147ee:	f000 ff13 	bl	8015618 <_fflush_r>
 80147f2:	68e1      	ldr	r1, [r4, #12]
 80147f4:	4b06      	ldr	r3, [pc, #24]	; (8014810 <cleanup_stdio+0x3c>)
 80147f6:	4299      	cmp	r1, r3
 80147f8:	d004      	beq.n	8014804 <cleanup_stdio+0x30>
 80147fa:	4620      	mov	r0, r4
 80147fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014800:	f000 bf0a 	b.w	8015618 <_fflush_r>
 8014804:	bd10      	pop	{r4, pc}
 8014806:	bf00      	nop
 8014808:	20001a5c 	.word	0x20001a5c
 801480c:	20001ac4 	.word	0x20001ac4
 8014810:	20001b2c 	.word	0x20001b2c

08014814 <global_stdio_init.part.0>:
 8014814:	b510      	push	{r4, lr}
 8014816:	4b0b      	ldr	r3, [pc, #44]	; (8014844 <global_stdio_init.part.0+0x30>)
 8014818:	4c0b      	ldr	r4, [pc, #44]	; (8014848 <global_stdio_init.part.0+0x34>)
 801481a:	4a0c      	ldr	r2, [pc, #48]	; (801484c <global_stdio_init.part.0+0x38>)
 801481c:	601a      	str	r2, [r3, #0]
 801481e:	4620      	mov	r0, r4
 8014820:	2200      	movs	r2, #0
 8014822:	2104      	movs	r1, #4
 8014824:	f7ff ff94 	bl	8014750 <std>
 8014828:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801482c:	2201      	movs	r2, #1
 801482e:	2109      	movs	r1, #9
 8014830:	f7ff ff8e 	bl	8014750 <std>
 8014834:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014838:	2202      	movs	r2, #2
 801483a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801483e:	2112      	movs	r1, #18
 8014840:	f7ff bf86 	b.w	8014750 <std>
 8014844:	20001b94 	.word	0x20001b94
 8014848:	20001a5c 	.word	0x20001a5c
 801484c:	080147bd 	.word	0x080147bd

08014850 <__sfp_lock_acquire>:
 8014850:	4801      	ldr	r0, [pc, #4]	; (8014858 <__sfp_lock_acquire+0x8>)
 8014852:	f000 b9ca 	b.w	8014bea <__retarget_lock_acquire_recursive>
 8014856:	bf00      	nop
 8014858:	20001b9d 	.word	0x20001b9d

0801485c <__sfp_lock_release>:
 801485c:	4801      	ldr	r0, [pc, #4]	; (8014864 <__sfp_lock_release+0x8>)
 801485e:	f000 b9c5 	b.w	8014bec <__retarget_lock_release_recursive>
 8014862:	bf00      	nop
 8014864:	20001b9d 	.word	0x20001b9d

08014868 <__sinit>:
 8014868:	b510      	push	{r4, lr}
 801486a:	4604      	mov	r4, r0
 801486c:	f7ff fff0 	bl	8014850 <__sfp_lock_acquire>
 8014870:	6a23      	ldr	r3, [r4, #32]
 8014872:	b11b      	cbz	r3, 801487c <__sinit+0x14>
 8014874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014878:	f7ff bff0 	b.w	801485c <__sfp_lock_release>
 801487c:	4b04      	ldr	r3, [pc, #16]	; (8014890 <__sinit+0x28>)
 801487e:	6223      	str	r3, [r4, #32]
 8014880:	4b04      	ldr	r3, [pc, #16]	; (8014894 <__sinit+0x2c>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1f5      	bne.n	8014874 <__sinit+0xc>
 8014888:	f7ff ffc4 	bl	8014814 <global_stdio_init.part.0>
 801488c:	e7f2      	b.n	8014874 <__sinit+0xc>
 801488e:	bf00      	nop
 8014890:	080147d5 	.word	0x080147d5
 8014894:	20001b94 	.word	0x20001b94

08014898 <fiprintf>:
 8014898:	b40e      	push	{r1, r2, r3}
 801489a:	b503      	push	{r0, r1, lr}
 801489c:	4601      	mov	r1, r0
 801489e:	ab03      	add	r3, sp, #12
 80148a0:	4805      	ldr	r0, [pc, #20]	; (80148b8 <fiprintf+0x20>)
 80148a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80148a6:	6800      	ldr	r0, [r0, #0]
 80148a8:	9301      	str	r3, [sp, #4]
 80148aa:	f000 fb85 	bl	8014fb8 <_vfiprintf_r>
 80148ae:	b002      	add	sp, #8
 80148b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80148b4:	b003      	add	sp, #12
 80148b6:	4770      	bx	lr
 80148b8:	20000090 	.word	0x20000090

080148bc <_fwalk_sglue>:
 80148bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148c0:	4607      	mov	r7, r0
 80148c2:	4688      	mov	r8, r1
 80148c4:	4614      	mov	r4, r2
 80148c6:	2600      	movs	r6, #0
 80148c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148cc:	f1b9 0901 	subs.w	r9, r9, #1
 80148d0:	d505      	bpl.n	80148de <_fwalk_sglue+0x22>
 80148d2:	6824      	ldr	r4, [r4, #0]
 80148d4:	2c00      	cmp	r4, #0
 80148d6:	d1f7      	bne.n	80148c8 <_fwalk_sglue+0xc>
 80148d8:	4630      	mov	r0, r6
 80148da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148de:	89ab      	ldrh	r3, [r5, #12]
 80148e0:	2b01      	cmp	r3, #1
 80148e2:	d907      	bls.n	80148f4 <_fwalk_sglue+0x38>
 80148e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148e8:	3301      	adds	r3, #1
 80148ea:	d003      	beq.n	80148f4 <_fwalk_sglue+0x38>
 80148ec:	4629      	mov	r1, r5
 80148ee:	4638      	mov	r0, r7
 80148f0:	47c0      	blx	r8
 80148f2:	4306      	orrs	r6, r0
 80148f4:	3568      	adds	r5, #104	; 0x68
 80148f6:	e7e9      	b.n	80148cc <_fwalk_sglue+0x10>

080148f8 <iprintf>:
 80148f8:	b40f      	push	{r0, r1, r2, r3}
 80148fa:	b507      	push	{r0, r1, r2, lr}
 80148fc:	4906      	ldr	r1, [pc, #24]	; (8014918 <iprintf+0x20>)
 80148fe:	ab04      	add	r3, sp, #16
 8014900:	6808      	ldr	r0, [r1, #0]
 8014902:	f853 2b04 	ldr.w	r2, [r3], #4
 8014906:	6881      	ldr	r1, [r0, #8]
 8014908:	9301      	str	r3, [sp, #4]
 801490a:	f000 fb55 	bl	8014fb8 <_vfiprintf_r>
 801490e:	b003      	add	sp, #12
 8014910:	f85d eb04 	ldr.w	lr, [sp], #4
 8014914:	b004      	add	sp, #16
 8014916:	4770      	bx	lr
 8014918:	20000090 	.word	0x20000090

0801491c <sniprintf>:
 801491c:	b40c      	push	{r2, r3}
 801491e:	b530      	push	{r4, r5, lr}
 8014920:	4b17      	ldr	r3, [pc, #92]	; (8014980 <sniprintf+0x64>)
 8014922:	1e0c      	subs	r4, r1, #0
 8014924:	681d      	ldr	r5, [r3, #0]
 8014926:	b09d      	sub	sp, #116	; 0x74
 8014928:	da08      	bge.n	801493c <sniprintf+0x20>
 801492a:	238b      	movs	r3, #139	; 0x8b
 801492c:	602b      	str	r3, [r5, #0]
 801492e:	f04f 30ff 	mov.w	r0, #4294967295
 8014932:	b01d      	add	sp, #116	; 0x74
 8014934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014938:	b002      	add	sp, #8
 801493a:	4770      	bx	lr
 801493c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014940:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014944:	bf14      	ite	ne
 8014946:	f104 33ff 	addne.w	r3, r4, #4294967295
 801494a:	4623      	moveq	r3, r4
 801494c:	9304      	str	r3, [sp, #16]
 801494e:	9307      	str	r3, [sp, #28]
 8014950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014954:	9002      	str	r0, [sp, #8]
 8014956:	9006      	str	r0, [sp, #24]
 8014958:	f8ad 3016 	strh.w	r3, [sp, #22]
 801495c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801495e:	ab21      	add	r3, sp, #132	; 0x84
 8014960:	a902      	add	r1, sp, #8
 8014962:	4628      	mov	r0, r5
 8014964:	9301      	str	r3, [sp, #4]
 8014966:	f000 f9ff 	bl	8014d68 <_svfiprintf_r>
 801496a:	1c43      	adds	r3, r0, #1
 801496c:	bfbc      	itt	lt
 801496e:	238b      	movlt	r3, #139	; 0x8b
 8014970:	602b      	strlt	r3, [r5, #0]
 8014972:	2c00      	cmp	r4, #0
 8014974:	d0dd      	beq.n	8014932 <sniprintf+0x16>
 8014976:	9b02      	ldr	r3, [sp, #8]
 8014978:	2200      	movs	r2, #0
 801497a:	701a      	strb	r2, [r3, #0]
 801497c:	e7d9      	b.n	8014932 <sniprintf+0x16>
 801497e:	bf00      	nop
 8014980:	20000090 	.word	0x20000090

08014984 <siprintf>:
 8014984:	b40e      	push	{r1, r2, r3}
 8014986:	b500      	push	{lr}
 8014988:	b09c      	sub	sp, #112	; 0x70
 801498a:	ab1d      	add	r3, sp, #116	; 0x74
 801498c:	9002      	str	r0, [sp, #8]
 801498e:	9006      	str	r0, [sp, #24]
 8014990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014994:	4809      	ldr	r0, [pc, #36]	; (80149bc <siprintf+0x38>)
 8014996:	9107      	str	r1, [sp, #28]
 8014998:	9104      	str	r1, [sp, #16]
 801499a:	4909      	ldr	r1, [pc, #36]	; (80149c0 <siprintf+0x3c>)
 801499c:	f853 2b04 	ldr.w	r2, [r3], #4
 80149a0:	9105      	str	r1, [sp, #20]
 80149a2:	6800      	ldr	r0, [r0, #0]
 80149a4:	9301      	str	r3, [sp, #4]
 80149a6:	a902      	add	r1, sp, #8
 80149a8:	f000 f9de 	bl	8014d68 <_svfiprintf_r>
 80149ac:	9b02      	ldr	r3, [sp, #8]
 80149ae:	2200      	movs	r2, #0
 80149b0:	701a      	strb	r2, [r3, #0]
 80149b2:	b01c      	add	sp, #112	; 0x70
 80149b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80149b8:	b003      	add	sp, #12
 80149ba:	4770      	bx	lr
 80149bc:	20000090 	.word	0x20000090
 80149c0:	ffff0208 	.word	0xffff0208

080149c4 <__sread>:
 80149c4:	b510      	push	{r4, lr}
 80149c6:	460c      	mov	r4, r1
 80149c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149cc:	f000 f8ae 	bl	8014b2c <_read_r>
 80149d0:	2800      	cmp	r0, #0
 80149d2:	bfab      	itete	ge
 80149d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80149d6:	89a3      	ldrhlt	r3, [r4, #12]
 80149d8:	181b      	addge	r3, r3, r0
 80149da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80149de:	bfac      	ite	ge
 80149e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80149e2:	81a3      	strhlt	r3, [r4, #12]
 80149e4:	bd10      	pop	{r4, pc}

080149e6 <__swrite>:
 80149e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ea:	461f      	mov	r7, r3
 80149ec:	898b      	ldrh	r3, [r1, #12]
 80149ee:	05db      	lsls	r3, r3, #23
 80149f0:	4605      	mov	r5, r0
 80149f2:	460c      	mov	r4, r1
 80149f4:	4616      	mov	r6, r2
 80149f6:	d505      	bpl.n	8014a04 <__swrite+0x1e>
 80149f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149fc:	2302      	movs	r3, #2
 80149fe:	2200      	movs	r2, #0
 8014a00:	f000 f882 	bl	8014b08 <_lseek_r>
 8014a04:	89a3      	ldrh	r3, [r4, #12]
 8014a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a0e:	81a3      	strh	r3, [r4, #12]
 8014a10:	4632      	mov	r2, r6
 8014a12:	463b      	mov	r3, r7
 8014a14:	4628      	mov	r0, r5
 8014a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a1a:	f000 b8a9 	b.w	8014b70 <_write_r>

08014a1e <__sseek>:
 8014a1e:	b510      	push	{r4, lr}
 8014a20:	460c      	mov	r4, r1
 8014a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a26:	f000 f86f 	bl	8014b08 <_lseek_r>
 8014a2a:	1c43      	adds	r3, r0, #1
 8014a2c:	89a3      	ldrh	r3, [r4, #12]
 8014a2e:	bf15      	itete	ne
 8014a30:	6560      	strne	r0, [r4, #84]	; 0x54
 8014a32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014a36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014a3a:	81a3      	strheq	r3, [r4, #12]
 8014a3c:	bf18      	it	ne
 8014a3e:	81a3      	strhne	r3, [r4, #12]
 8014a40:	bd10      	pop	{r4, pc}

08014a42 <__sclose>:
 8014a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a46:	f000 b84f 	b.w	8014ae8 <_close_r>

08014a4a <_vsniprintf_r>:
 8014a4a:	b530      	push	{r4, r5, lr}
 8014a4c:	4614      	mov	r4, r2
 8014a4e:	2c00      	cmp	r4, #0
 8014a50:	b09b      	sub	sp, #108	; 0x6c
 8014a52:	4605      	mov	r5, r0
 8014a54:	461a      	mov	r2, r3
 8014a56:	da05      	bge.n	8014a64 <_vsniprintf_r+0x1a>
 8014a58:	238b      	movs	r3, #139	; 0x8b
 8014a5a:	6003      	str	r3, [r0, #0]
 8014a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a60:	b01b      	add	sp, #108	; 0x6c
 8014a62:	bd30      	pop	{r4, r5, pc}
 8014a64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014a68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014a6c:	bf14      	ite	ne
 8014a6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014a72:	4623      	moveq	r3, r4
 8014a74:	9302      	str	r3, [sp, #8]
 8014a76:	9305      	str	r3, [sp, #20]
 8014a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a7c:	9100      	str	r1, [sp, #0]
 8014a7e:	9104      	str	r1, [sp, #16]
 8014a80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014a84:	4669      	mov	r1, sp
 8014a86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014a88:	f000 f96e 	bl	8014d68 <_svfiprintf_r>
 8014a8c:	1c43      	adds	r3, r0, #1
 8014a8e:	bfbc      	itt	lt
 8014a90:	238b      	movlt	r3, #139	; 0x8b
 8014a92:	602b      	strlt	r3, [r5, #0]
 8014a94:	2c00      	cmp	r4, #0
 8014a96:	d0e3      	beq.n	8014a60 <_vsniprintf_r+0x16>
 8014a98:	9b00      	ldr	r3, [sp, #0]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	701a      	strb	r2, [r3, #0]
 8014a9e:	e7df      	b.n	8014a60 <_vsniprintf_r+0x16>

08014aa0 <vsniprintf>:
 8014aa0:	b507      	push	{r0, r1, r2, lr}
 8014aa2:	9300      	str	r3, [sp, #0]
 8014aa4:	4613      	mov	r3, r2
 8014aa6:	460a      	mov	r2, r1
 8014aa8:	4601      	mov	r1, r0
 8014aaa:	4803      	ldr	r0, [pc, #12]	; (8014ab8 <vsniprintf+0x18>)
 8014aac:	6800      	ldr	r0, [r0, #0]
 8014aae:	f7ff ffcc 	bl	8014a4a <_vsniprintf_r>
 8014ab2:	b003      	add	sp, #12
 8014ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ab8:	20000090 	.word	0x20000090

08014abc <memset>:
 8014abc:	4402      	add	r2, r0
 8014abe:	4603      	mov	r3, r0
 8014ac0:	4293      	cmp	r3, r2
 8014ac2:	d100      	bne.n	8014ac6 <memset+0xa>
 8014ac4:	4770      	bx	lr
 8014ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8014aca:	e7f9      	b.n	8014ac0 <memset+0x4>

08014acc <strchr>:
 8014acc:	b2c9      	uxtb	r1, r1
 8014ace:	4603      	mov	r3, r0
 8014ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ad4:	b11a      	cbz	r2, 8014ade <strchr+0x12>
 8014ad6:	428a      	cmp	r2, r1
 8014ad8:	d1f9      	bne.n	8014ace <strchr+0x2>
 8014ada:	4618      	mov	r0, r3
 8014adc:	4770      	bx	lr
 8014ade:	2900      	cmp	r1, #0
 8014ae0:	bf18      	it	ne
 8014ae2:	2300      	movne	r3, #0
 8014ae4:	e7f9      	b.n	8014ada <strchr+0xe>
	...

08014ae8 <_close_r>:
 8014ae8:	b538      	push	{r3, r4, r5, lr}
 8014aea:	4d06      	ldr	r5, [pc, #24]	; (8014b04 <_close_r+0x1c>)
 8014aec:	2300      	movs	r3, #0
 8014aee:	4604      	mov	r4, r0
 8014af0:	4608      	mov	r0, r1
 8014af2:	602b      	str	r3, [r5, #0]
 8014af4:	f7f4 f95b 	bl	8008dae <_close>
 8014af8:	1c43      	adds	r3, r0, #1
 8014afa:	d102      	bne.n	8014b02 <_close_r+0x1a>
 8014afc:	682b      	ldr	r3, [r5, #0]
 8014afe:	b103      	cbz	r3, 8014b02 <_close_r+0x1a>
 8014b00:	6023      	str	r3, [r4, #0]
 8014b02:	bd38      	pop	{r3, r4, r5, pc}
 8014b04:	20001b98 	.word	0x20001b98

08014b08 <_lseek_r>:
 8014b08:	b538      	push	{r3, r4, r5, lr}
 8014b0a:	4d07      	ldr	r5, [pc, #28]	; (8014b28 <_lseek_r+0x20>)
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	4608      	mov	r0, r1
 8014b10:	4611      	mov	r1, r2
 8014b12:	2200      	movs	r2, #0
 8014b14:	602a      	str	r2, [r5, #0]
 8014b16:	461a      	mov	r2, r3
 8014b18:	f7f4 f970 	bl	8008dfc <_lseek>
 8014b1c:	1c43      	adds	r3, r0, #1
 8014b1e:	d102      	bne.n	8014b26 <_lseek_r+0x1e>
 8014b20:	682b      	ldr	r3, [r5, #0]
 8014b22:	b103      	cbz	r3, 8014b26 <_lseek_r+0x1e>
 8014b24:	6023      	str	r3, [r4, #0]
 8014b26:	bd38      	pop	{r3, r4, r5, pc}
 8014b28:	20001b98 	.word	0x20001b98

08014b2c <_read_r>:
 8014b2c:	b538      	push	{r3, r4, r5, lr}
 8014b2e:	4d07      	ldr	r5, [pc, #28]	; (8014b4c <_read_r+0x20>)
 8014b30:	4604      	mov	r4, r0
 8014b32:	4608      	mov	r0, r1
 8014b34:	4611      	mov	r1, r2
 8014b36:	2200      	movs	r2, #0
 8014b38:	602a      	str	r2, [r5, #0]
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	f7f4 f91a 	bl	8008d74 <_read>
 8014b40:	1c43      	adds	r3, r0, #1
 8014b42:	d102      	bne.n	8014b4a <_read_r+0x1e>
 8014b44:	682b      	ldr	r3, [r5, #0]
 8014b46:	b103      	cbz	r3, 8014b4a <_read_r+0x1e>
 8014b48:	6023      	str	r3, [r4, #0]
 8014b4a:	bd38      	pop	{r3, r4, r5, pc}
 8014b4c:	20001b98 	.word	0x20001b98

08014b50 <_sbrk_r>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	4d06      	ldr	r5, [pc, #24]	; (8014b6c <_sbrk_r+0x1c>)
 8014b54:	2300      	movs	r3, #0
 8014b56:	4604      	mov	r4, r0
 8014b58:	4608      	mov	r0, r1
 8014b5a:	602b      	str	r3, [r5, #0]
 8014b5c:	f7f4 f95c 	bl	8008e18 <_sbrk>
 8014b60:	1c43      	adds	r3, r0, #1
 8014b62:	d102      	bne.n	8014b6a <_sbrk_r+0x1a>
 8014b64:	682b      	ldr	r3, [r5, #0]
 8014b66:	b103      	cbz	r3, 8014b6a <_sbrk_r+0x1a>
 8014b68:	6023      	str	r3, [r4, #0]
 8014b6a:	bd38      	pop	{r3, r4, r5, pc}
 8014b6c:	20001b98 	.word	0x20001b98

08014b70 <_write_r>:
 8014b70:	b538      	push	{r3, r4, r5, lr}
 8014b72:	4d07      	ldr	r5, [pc, #28]	; (8014b90 <_write_r+0x20>)
 8014b74:	4604      	mov	r4, r0
 8014b76:	4608      	mov	r0, r1
 8014b78:	4611      	mov	r1, r2
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	602a      	str	r2, [r5, #0]
 8014b7e:	461a      	mov	r2, r3
 8014b80:	f7fb faf6 	bl	8010170 <_write>
 8014b84:	1c43      	adds	r3, r0, #1
 8014b86:	d102      	bne.n	8014b8e <_write_r+0x1e>
 8014b88:	682b      	ldr	r3, [r5, #0]
 8014b8a:	b103      	cbz	r3, 8014b8e <_write_r+0x1e>
 8014b8c:	6023      	str	r3, [r4, #0]
 8014b8e:	bd38      	pop	{r3, r4, r5, pc}
 8014b90:	20001b98 	.word	0x20001b98

08014b94 <__errno>:
 8014b94:	4b01      	ldr	r3, [pc, #4]	; (8014b9c <__errno+0x8>)
 8014b96:	6818      	ldr	r0, [r3, #0]
 8014b98:	4770      	bx	lr
 8014b9a:	bf00      	nop
 8014b9c:	20000090 	.word	0x20000090

08014ba0 <__libc_init_array>:
 8014ba0:	b570      	push	{r4, r5, r6, lr}
 8014ba2:	4d0d      	ldr	r5, [pc, #52]	; (8014bd8 <__libc_init_array+0x38>)
 8014ba4:	4c0d      	ldr	r4, [pc, #52]	; (8014bdc <__libc_init_array+0x3c>)
 8014ba6:	1b64      	subs	r4, r4, r5
 8014ba8:	10a4      	asrs	r4, r4, #2
 8014baa:	2600      	movs	r6, #0
 8014bac:	42a6      	cmp	r6, r4
 8014bae:	d109      	bne.n	8014bc4 <__libc_init_array+0x24>
 8014bb0:	4d0b      	ldr	r5, [pc, #44]	; (8014be0 <__libc_init_array+0x40>)
 8014bb2:	4c0c      	ldr	r4, [pc, #48]	; (8014be4 <__libc_init_array+0x44>)
 8014bb4:	f000 ff08 	bl	80159c8 <_init>
 8014bb8:	1b64      	subs	r4, r4, r5
 8014bba:	10a4      	asrs	r4, r4, #2
 8014bbc:	2600      	movs	r6, #0
 8014bbe:	42a6      	cmp	r6, r4
 8014bc0:	d105      	bne.n	8014bce <__libc_init_array+0x2e>
 8014bc2:	bd70      	pop	{r4, r5, r6, pc}
 8014bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bc8:	4798      	blx	r3
 8014bca:	3601      	adds	r6, #1
 8014bcc:	e7ee      	b.n	8014bac <__libc_init_array+0xc>
 8014bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bd2:	4798      	blx	r3
 8014bd4:	3601      	adds	r6, #1
 8014bd6:	e7f2      	b.n	8014bbe <__libc_init_array+0x1e>
 8014bd8:	080171e0 	.word	0x080171e0
 8014bdc:	080171e0 	.word	0x080171e0
 8014be0:	080171e0 	.word	0x080171e0
 8014be4:	080171e4 	.word	0x080171e4

08014be8 <__retarget_lock_init_recursive>:
 8014be8:	4770      	bx	lr

08014bea <__retarget_lock_acquire_recursive>:
 8014bea:	4770      	bx	lr

08014bec <__retarget_lock_release_recursive>:
 8014bec:	4770      	bx	lr

08014bee <__aeabi_memcpy>:
 8014bee:	f000 b800 	b.w	8014bf2 <memcpy>

08014bf2 <memcpy>:
 8014bf2:	440a      	add	r2, r1
 8014bf4:	4291      	cmp	r1, r2
 8014bf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bfa:	d100      	bne.n	8014bfe <memcpy+0xc>
 8014bfc:	4770      	bx	lr
 8014bfe:	b510      	push	{r4, lr}
 8014c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c08:	4291      	cmp	r1, r2
 8014c0a:	d1f9      	bne.n	8014c00 <memcpy+0xe>
 8014c0c:	bd10      	pop	{r4, pc}

08014c0e <abort>:
 8014c0e:	b508      	push	{r3, lr}
 8014c10:	2006      	movs	r0, #6
 8014c12:	f000 fe01 	bl	8015818 <raise>
 8014c16:	2001      	movs	r0, #1
 8014c18:	f7f4 f8a2 	bl	8008d60 <_exit>

08014c1c <_free_r>:
 8014c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c1e:	2900      	cmp	r1, #0
 8014c20:	d044      	beq.n	8014cac <_free_r+0x90>
 8014c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c26:	9001      	str	r0, [sp, #4]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8014c2e:	bfb8      	it	lt
 8014c30:	18e4      	addlt	r4, r4, r3
 8014c32:	f7ff fd81 	bl	8014738 <__malloc_lock>
 8014c36:	4a1e      	ldr	r2, [pc, #120]	; (8014cb0 <_free_r+0x94>)
 8014c38:	9801      	ldr	r0, [sp, #4]
 8014c3a:	6813      	ldr	r3, [r2, #0]
 8014c3c:	b933      	cbnz	r3, 8014c4c <_free_r+0x30>
 8014c3e:	6063      	str	r3, [r4, #4]
 8014c40:	6014      	str	r4, [r2, #0]
 8014c42:	b003      	add	sp, #12
 8014c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c48:	f7ff bd7c 	b.w	8014744 <__malloc_unlock>
 8014c4c:	42a3      	cmp	r3, r4
 8014c4e:	d908      	bls.n	8014c62 <_free_r+0x46>
 8014c50:	6825      	ldr	r5, [r4, #0]
 8014c52:	1961      	adds	r1, r4, r5
 8014c54:	428b      	cmp	r3, r1
 8014c56:	bf01      	itttt	eq
 8014c58:	6819      	ldreq	r1, [r3, #0]
 8014c5a:	685b      	ldreq	r3, [r3, #4]
 8014c5c:	1949      	addeq	r1, r1, r5
 8014c5e:	6021      	streq	r1, [r4, #0]
 8014c60:	e7ed      	b.n	8014c3e <_free_r+0x22>
 8014c62:	461a      	mov	r2, r3
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	b10b      	cbz	r3, 8014c6c <_free_r+0x50>
 8014c68:	42a3      	cmp	r3, r4
 8014c6a:	d9fa      	bls.n	8014c62 <_free_r+0x46>
 8014c6c:	6811      	ldr	r1, [r2, #0]
 8014c6e:	1855      	adds	r5, r2, r1
 8014c70:	42a5      	cmp	r5, r4
 8014c72:	d10b      	bne.n	8014c8c <_free_r+0x70>
 8014c74:	6824      	ldr	r4, [r4, #0]
 8014c76:	4421      	add	r1, r4
 8014c78:	1854      	adds	r4, r2, r1
 8014c7a:	42a3      	cmp	r3, r4
 8014c7c:	6011      	str	r1, [r2, #0]
 8014c7e:	d1e0      	bne.n	8014c42 <_free_r+0x26>
 8014c80:	681c      	ldr	r4, [r3, #0]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	6053      	str	r3, [r2, #4]
 8014c86:	440c      	add	r4, r1
 8014c88:	6014      	str	r4, [r2, #0]
 8014c8a:	e7da      	b.n	8014c42 <_free_r+0x26>
 8014c8c:	d902      	bls.n	8014c94 <_free_r+0x78>
 8014c8e:	230c      	movs	r3, #12
 8014c90:	6003      	str	r3, [r0, #0]
 8014c92:	e7d6      	b.n	8014c42 <_free_r+0x26>
 8014c94:	6825      	ldr	r5, [r4, #0]
 8014c96:	1961      	adds	r1, r4, r5
 8014c98:	428b      	cmp	r3, r1
 8014c9a:	bf04      	itt	eq
 8014c9c:	6819      	ldreq	r1, [r3, #0]
 8014c9e:	685b      	ldreq	r3, [r3, #4]
 8014ca0:	6063      	str	r3, [r4, #4]
 8014ca2:	bf04      	itt	eq
 8014ca4:	1949      	addeq	r1, r1, r5
 8014ca6:	6021      	streq	r1, [r4, #0]
 8014ca8:	6054      	str	r4, [r2, #4]
 8014caa:	e7ca      	b.n	8014c42 <_free_r+0x26>
 8014cac:	b003      	add	sp, #12
 8014cae:	bd30      	pop	{r4, r5, pc}
 8014cb0:	20001a54 	.word	0x20001a54

08014cb4 <__ssputs_r>:
 8014cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cb8:	688e      	ldr	r6, [r1, #8]
 8014cba:	461f      	mov	r7, r3
 8014cbc:	42be      	cmp	r6, r7
 8014cbe:	680b      	ldr	r3, [r1, #0]
 8014cc0:	4682      	mov	sl, r0
 8014cc2:	460c      	mov	r4, r1
 8014cc4:	4690      	mov	r8, r2
 8014cc6:	d82c      	bhi.n	8014d22 <__ssputs_r+0x6e>
 8014cc8:	898a      	ldrh	r2, [r1, #12]
 8014cca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014cce:	d026      	beq.n	8014d1e <__ssputs_r+0x6a>
 8014cd0:	6965      	ldr	r5, [r4, #20]
 8014cd2:	6909      	ldr	r1, [r1, #16]
 8014cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014cd8:	eba3 0901 	sub.w	r9, r3, r1
 8014cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014ce0:	1c7b      	adds	r3, r7, #1
 8014ce2:	444b      	add	r3, r9
 8014ce4:	106d      	asrs	r5, r5, #1
 8014ce6:	429d      	cmp	r5, r3
 8014ce8:	bf38      	it	cc
 8014cea:	461d      	movcc	r5, r3
 8014cec:	0553      	lsls	r3, r2, #21
 8014cee:	d527      	bpl.n	8014d40 <__ssputs_r+0x8c>
 8014cf0:	4629      	mov	r1, r5
 8014cf2:	f7ff fca1 	bl	8014638 <_malloc_r>
 8014cf6:	4606      	mov	r6, r0
 8014cf8:	b360      	cbz	r0, 8014d54 <__ssputs_r+0xa0>
 8014cfa:	6921      	ldr	r1, [r4, #16]
 8014cfc:	464a      	mov	r2, r9
 8014cfe:	f7ff ff78 	bl	8014bf2 <memcpy>
 8014d02:	89a3      	ldrh	r3, [r4, #12]
 8014d04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d0c:	81a3      	strh	r3, [r4, #12]
 8014d0e:	6126      	str	r6, [r4, #16]
 8014d10:	6165      	str	r5, [r4, #20]
 8014d12:	444e      	add	r6, r9
 8014d14:	eba5 0509 	sub.w	r5, r5, r9
 8014d18:	6026      	str	r6, [r4, #0]
 8014d1a:	60a5      	str	r5, [r4, #8]
 8014d1c:	463e      	mov	r6, r7
 8014d1e:	42be      	cmp	r6, r7
 8014d20:	d900      	bls.n	8014d24 <__ssputs_r+0x70>
 8014d22:	463e      	mov	r6, r7
 8014d24:	6820      	ldr	r0, [r4, #0]
 8014d26:	4632      	mov	r2, r6
 8014d28:	4641      	mov	r1, r8
 8014d2a:	f000 fd33 	bl	8015794 <memmove>
 8014d2e:	68a3      	ldr	r3, [r4, #8]
 8014d30:	1b9b      	subs	r3, r3, r6
 8014d32:	60a3      	str	r3, [r4, #8]
 8014d34:	6823      	ldr	r3, [r4, #0]
 8014d36:	4433      	add	r3, r6
 8014d38:	6023      	str	r3, [r4, #0]
 8014d3a:	2000      	movs	r0, #0
 8014d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d40:	462a      	mov	r2, r5
 8014d42:	f000 fd85 	bl	8015850 <_realloc_r>
 8014d46:	4606      	mov	r6, r0
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	d1e0      	bne.n	8014d0e <__ssputs_r+0x5a>
 8014d4c:	6921      	ldr	r1, [r4, #16]
 8014d4e:	4650      	mov	r0, sl
 8014d50:	f7ff ff64 	bl	8014c1c <_free_r>
 8014d54:	230c      	movs	r3, #12
 8014d56:	f8ca 3000 	str.w	r3, [sl]
 8014d5a:	89a3      	ldrh	r3, [r4, #12]
 8014d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d60:	81a3      	strh	r3, [r4, #12]
 8014d62:	f04f 30ff 	mov.w	r0, #4294967295
 8014d66:	e7e9      	b.n	8014d3c <__ssputs_r+0x88>

08014d68 <_svfiprintf_r>:
 8014d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	4698      	mov	r8, r3
 8014d6e:	898b      	ldrh	r3, [r1, #12]
 8014d70:	061b      	lsls	r3, r3, #24
 8014d72:	b09d      	sub	sp, #116	; 0x74
 8014d74:	4607      	mov	r7, r0
 8014d76:	460d      	mov	r5, r1
 8014d78:	4614      	mov	r4, r2
 8014d7a:	d50e      	bpl.n	8014d9a <_svfiprintf_r+0x32>
 8014d7c:	690b      	ldr	r3, [r1, #16]
 8014d7e:	b963      	cbnz	r3, 8014d9a <_svfiprintf_r+0x32>
 8014d80:	2140      	movs	r1, #64	; 0x40
 8014d82:	f7ff fc59 	bl	8014638 <_malloc_r>
 8014d86:	6028      	str	r0, [r5, #0]
 8014d88:	6128      	str	r0, [r5, #16]
 8014d8a:	b920      	cbnz	r0, 8014d96 <_svfiprintf_r+0x2e>
 8014d8c:	230c      	movs	r3, #12
 8014d8e:	603b      	str	r3, [r7, #0]
 8014d90:	f04f 30ff 	mov.w	r0, #4294967295
 8014d94:	e0d0      	b.n	8014f38 <_svfiprintf_r+0x1d0>
 8014d96:	2340      	movs	r3, #64	; 0x40
 8014d98:	616b      	str	r3, [r5, #20]
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d9e:	2320      	movs	r3, #32
 8014da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8014da8:	2330      	movs	r3, #48	; 0x30
 8014daa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014f50 <_svfiprintf_r+0x1e8>
 8014dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014db2:	f04f 0901 	mov.w	r9, #1
 8014db6:	4623      	mov	r3, r4
 8014db8:	469a      	mov	sl, r3
 8014dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dbe:	b10a      	cbz	r2, 8014dc4 <_svfiprintf_r+0x5c>
 8014dc0:	2a25      	cmp	r2, #37	; 0x25
 8014dc2:	d1f9      	bne.n	8014db8 <_svfiprintf_r+0x50>
 8014dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8014dc8:	d00b      	beq.n	8014de2 <_svfiprintf_r+0x7a>
 8014dca:	465b      	mov	r3, fp
 8014dcc:	4622      	mov	r2, r4
 8014dce:	4629      	mov	r1, r5
 8014dd0:	4638      	mov	r0, r7
 8014dd2:	f7ff ff6f 	bl	8014cb4 <__ssputs_r>
 8014dd6:	3001      	adds	r0, #1
 8014dd8:	f000 80a9 	beq.w	8014f2e <_svfiprintf_r+0x1c6>
 8014ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dde:	445a      	add	r2, fp
 8014de0:	9209      	str	r2, [sp, #36]	; 0x24
 8014de2:	f89a 3000 	ldrb.w	r3, [sl]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	f000 80a1 	beq.w	8014f2e <_svfiprintf_r+0x1c6>
 8014dec:	2300      	movs	r3, #0
 8014dee:	f04f 32ff 	mov.w	r2, #4294967295
 8014df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014df6:	f10a 0a01 	add.w	sl, sl, #1
 8014dfa:	9304      	str	r3, [sp, #16]
 8014dfc:	9307      	str	r3, [sp, #28]
 8014dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e02:	931a      	str	r3, [sp, #104]	; 0x68
 8014e04:	4654      	mov	r4, sl
 8014e06:	2205      	movs	r2, #5
 8014e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e0c:	4850      	ldr	r0, [pc, #320]	; (8014f50 <_svfiprintf_r+0x1e8>)
 8014e0e:	f7f0 ffa7 	bl	8005d60 <memchr>
 8014e12:	9a04      	ldr	r2, [sp, #16]
 8014e14:	b9d8      	cbnz	r0, 8014e4e <_svfiprintf_r+0xe6>
 8014e16:	06d0      	lsls	r0, r2, #27
 8014e18:	bf44      	itt	mi
 8014e1a:	2320      	movmi	r3, #32
 8014e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e20:	0711      	lsls	r1, r2, #28
 8014e22:	bf44      	itt	mi
 8014e24:	232b      	movmi	r3, #43	; 0x2b
 8014e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8014e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8014e30:	d015      	beq.n	8014e5e <_svfiprintf_r+0xf6>
 8014e32:	9a07      	ldr	r2, [sp, #28]
 8014e34:	4654      	mov	r4, sl
 8014e36:	2000      	movs	r0, #0
 8014e38:	f04f 0c0a 	mov.w	ip, #10
 8014e3c:	4621      	mov	r1, r4
 8014e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e42:	3b30      	subs	r3, #48	; 0x30
 8014e44:	2b09      	cmp	r3, #9
 8014e46:	d94d      	bls.n	8014ee4 <_svfiprintf_r+0x17c>
 8014e48:	b1b0      	cbz	r0, 8014e78 <_svfiprintf_r+0x110>
 8014e4a:	9207      	str	r2, [sp, #28]
 8014e4c:	e014      	b.n	8014e78 <_svfiprintf_r+0x110>
 8014e4e:	eba0 0308 	sub.w	r3, r0, r8
 8014e52:	fa09 f303 	lsl.w	r3, r9, r3
 8014e56:	4313      	orrs	r3, r2
 8014e58:	9304      	str	r3, [sp, #16]
 8014e5a:	46a2      	mov	sl, r4
 8014e5c:	e7d2      	b.n	8014e04 <_svfiprintf_r+0x9c>
 8014e5e:	9b03      	ldr	r3, [sp, #12]
 8014e60:	1d19      	adds	r1, r3, #4
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	9103      	str	r1, [sp, #12]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	bfbb      	ittet	lt
 8014e6a:	425b      	neglt	r3, r3
 8014e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8014e70:	9307      	strge	r3, [sp, #28]
 8014e72:	9307      	strlt	r3, [sp, #28]
 8014e74:	bfb8      	it	lt
 8014e76:	9204      	strlt	r2, [sp, #16]
 8014e78:	7823      	ldrb	r3, [r4, #0]
 8014e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8014e7c:	d10c      	bne.n	8014e98 <_svfiprintf_r+0x130>
 8014e7e:	7863      	ldrb	r3, [r4, #1]
 8014e80:	2b2a      	cmp	r3, #42	; 0x2a
 8014e82:	d134      	bne.n	8014eee <_svfiprintf_r+0x186>
 8014e84:	9b03      	ldr	r3, [sp, #12]
 8014e86:	1d1a      	adds	r2, r3, #4
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	9203      	str	r2, [sp, #12]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	bfb8      	it	lt
 8014e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e94:	3402      	adds	r4, #2
 8014e96:	9305      	str	r3, [sp, #20]
 8014e98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014f60 <_svfiprintf_r+0x1f8>
 8014e9c:	7821      	ldrb	r1, [r4, #0]
 8014e9e:	2203      	movs	r2, #3
 8014ea0:	4650      	mov	r0, sl
 8014ea2:	f7f0 ff5d 	bl	8005d60 <memchr>
 8014ea6:	b138      	cbz	r0, 8014eb8 <_svfiprintf_r+0x150>
 8014ea8:	9b04      	ldr	r3, [sp, #16]
 8014eaa:	eba0 000a 	sub.w	r0, r0, sl
 8014eae:	2240      	movs	r2, #64	; 0x40
 8014eb0:	4082      	lsls	r2, r0
 8014eb2:	4313      	orrs	r3, r2
 8014eb4:	3401      	adds	r4, #1
 8014eb6:	9304      	str	r3, [sp, #16]
 8014eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ebc:	4825      	ldr	r0, [pc, #148]	; (8014f54 <_svfiprintf_r+0x1ec>)
 8014ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ec2:	2206      	movs	r2, #6
 8014ec4:	f7f0 ff4c 	bl	8005d60 <memchr>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d038      	beq.n	8014f3e <_svfiprintf_r+0x1d6>
 8014ecc:	4b22      	ldr	r3, [pc, #136]	; (8014f58 <_svfiprintf_r+0x1f0>)
 8014ece:	bb1b      	cbnz	r3, 8014f18 <_svfiprintf_r+0x1b0>
 8014ed0:	9b03      	ldr	r3, [sp, #12]
 8014ed2:	3307      	adds	r3, #7
 8014ed4:	f023 0307 	bic.w	r3, r3, #7
 8014ed8:	3308      	adds	r3, #8
 8014eda:	9303      	str	r3, [sp, #12]
 8014edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ede:	4433      	add	r3, r6
 8014ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8014ee2:	e768      	b.n	8014db6 <_svfiprintf_r+0x4e>
 8014ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ee8:	460c      	mov	r4, r1
 8014eea:	2001      	movs	r0, #1
 8014eec:	e7a6      	b.n	8014e3c <_svfiprintf_r+0xd4>
 8014eee:	2300      	movs	r3, #0
 8014ef0:	3401      	adds	r4, #1
 8014ef2:	9305      	str	r3, [sp, #20]
 8014ef4:	4619      	mov	r1, r3
 8014ef6:	f04f 0c0a 	mov.w	ip, #10
 8014efa:	4620      	mov	r0, r4
 8014efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f00:	3a30      	subs	r2, #48	; 0x30
 8014f02:	2a09      	cmp	r2, #9
 8014f04:	d903      	bls.n	8014f0e <_svfiprintf_r+0x1a6>
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d0c6      	beq.n	8014e98 <_svfiprintf_r+0x130>
 8014f0a:	9105      	str	r1, [sp, #20]
 8014f0c:	e7c4      	b.n	8014e98 <_svfiprintf_r+0x130>
 8014f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f12:	4604      	mov	r4, r0
 8014f14:	2301      	movs	r3, #1
 8014f16:	e7f0      	b.n	8014efa <_svfiprintf_r+0x192>
 8014f18:	ab03      	add	r3, sp, #12
 8014f1a:	9300      	str	r3, [sp, #0]
 8014f1c:	462a      	mov	r2, r5
 8014f1e:	4b0f      	ldr	r3, [pc, #60]	; (8014f5c <_svfiprintf_r+0x1f4>)
 8014f20:	a904      	add	r1, sp, #16
 8014f22:	4638      	mov	r0, r7
 8014f24:	f3af 8000 	nop.w
 8014f28:	1c42      	adds	r2, r0, #1
 8014f2a:	4606      	mov	r6, r0
 8014f2c:	d1d6      	bne.n	8014edc <_svfiprintf_r+0x174>
 8014f2e:	89ab      	ldrh	r3, [r5, #12]
 8014f30:	065b      	lsls	r3, r3, #25
 8014f32:	f53f af2d 	bmi.w	8014d90 <_svfiprintf_r+0x28>
 8014f36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f38:	b01d      	add	sp, #116	; 0x74
 8014f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f3e:	ab03      	add	r3, sp, #12
 8014f40:	9300      	str	r3, [sp, #0]
 8014f42:	462a      	mov	r2, r5
 8014f44:	4b05      	ldr	r3, [pc, #20]	; (8014f5c <_svfiprintf_r+0x1f4>)
 8014f46:	a904      	add	r1, sp, #16
 8014f48:	4638      	mov	r0, r7
 8014f4a:	f000 f9bd 	bl	80152c8 <_printf_i>
 8014f4e:	e7eb      	b.n	8014f28 <_svfiprintf_r+0x1c0>
 8014f50:	080171a4 	.word	0x080171a4
 8014f54:	080171ae 	.word	0x080171ae
 8014f58:	00000000 	.word	0x00000000
 8014f5c:	08014cb5 	.word	0x08014cb5
 8014f60:	080171aa 	.word	0x080171aa

08014f64 <__sfputc_r>:
 8014f64:	6893      	ldr	r3, [r2, #8]
 8014f66:	3b01      	subs	r3, #1
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	b410      	push	{r4}
 8014f6c:	6093      	str	r3, [r2, #8]
 8014f6e:	da08      	bge.n	8014f82 <__sfputc_r+0x1e>
 8014f70:	6994      	ldr	r4, [r2, #24]
 8014f72:	42a3      	cmp	r3, r4
 8014f74:	db01      	blt.n	8014f7a <__sfputc_r+0x16>
 8014f76:	290a      	cmp	r1, #10
 8014f78:	d103      	bne.n	8014f82 <__sfputc_r+0x1e>
 8014f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f7e:	f000 bb73 	b.w	8015668 <__swbuf_r>
 8014f82:	6813      	ldr	r3, [r2, #0]
 8014f84:	1c58      	adds	r0, r3, #1
 8014f86:	6010      	str	r0, [r2, #0]
 8014f88:	7019      	strb	r1, [r3, #0]
 8014f8a:	4608      	mov	r0, r1
 8014f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f90:	4770      	bx	lr

08014f92 <__sfputs_r>:
 8014f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f94:	4606      	mov	r6, r0
 8014f96:	460f      	mov	r7, r1
 8014f98:	4614      	mov	r4, r2
 8014f9a:	18d5      	adds	r5, r2, r3
 8014f9c:	42ac      	cmp	r4, r5
 8014f9e:	d101      	bne.n	8014fa4 <__sfputs_r+0x12>
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	e007      	b.n	8014fb4 <__sfputs_r+0x22>
 8014fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fa8:	463a      	mov	r2, r7
 8014faa:	4630      	mov	r0, r6
 8014fac:	f7ff ffda 	bl	8014f64 <__sfputc_r>
 8014fb0:	1c43      	adds	r3, r0, #1
 8014fb2:	d1f3      	bne.n	8014f9c <__sfputs_r+0xa>
 8014fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014fb8 <_vfiprintf_r>:
 8014fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fbc:	460d      	mov	r5, r1
 8014fbe:	b09d      	sub	sp, #116	; 0x74
 8014fc0:	4614      	mov	r4, r2
 8014fc2:	4698      	mov	r8, r3
 8014fc4:	4606      	mov	r6, r0
 8014fc6:	b118      	cbz	r0, 8014fd0 <_vfiprintf_r+0x18>
 8014fc8:	6a03      	ldr	r3, [r0, #32]
 8014fca:	b90b      	cbnz	r3, 8014fd0 <_vfiprintf_r+0x18>
 8014fcc:	f7ff fc4c 	bl	8014868 <__sinit>
 8014fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fd2:	07d9      	lsls	r1, r3, #31
 8014fd4:	d405      	bmi.n	8014fe2 <_vfiprintf_r+0x2a>
 8014fd6:	89ab      	ldrh	r3, [r5, #12]
 8014fd8:	059a      	lsls	r2, r3, #22
 8014fda:	d402      	bmi.n	8014fe2 <_vfiprintf_r+0x2a>
 8014fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fde:	f7ff fe04 	bl	8014bea <__retarget_lock_acquire_recursive>
 8014fe2:	89ab      	ldrh	r3, [r5, #12]
 8014fe4:	071b      	lsls	r3, r3, #28
 8014fe6:	d501      	bpl.n	8014fec <_vfiprintf_r+0x34>
 8014fe8:	692b      	ldr	r3, [r5, #16]
 8014fea:	b99b      	cbnz	r3, 8015014 <_vfiprintf_r+0x5c>
 8014fec:	4629      	mov	r1, r5
 8014fee:	4630      	mov	r0, r6
 8014ff0:	f000 fb78 	bl	80156e4 <__swsetup_r>
 8014ff4:	b170      	cbz	r0, 8015014 <_vfiprintf_r+0x5c>
 8014ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ff8:	07dc      	lsls	r4, r3, #31
 8014ffa:	d504      	bpl.n	8015006 <_vfiprintf_r+0x4e>
 8014ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8015000:	b01d      	add	sp, #116	; 0x74
 8015002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015006:	89ab      	ldrh	r3, [r5, #12]
 8015008:	0598      	lsls	r0, r3, #22
 801500a:	d4f7      	bmi.n	8014ffc <_vfiprintf_r+0x44>
 801500c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801500e:	f7ff fded 	bl	8014bec <__retarget_lock_release_recursive>
 8015012:	e7f3      	b.n	8014ffc <_vfiprintf_r+0x44>
 8015014:	2300      	movs	r3, #0
 8015016:	9309      	str	r3, [sp, #36]	; 0x24
 8015018:	2320      	movs	r3, #32
 801501a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801501e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015022:	2330      	movs	r3, #48	; 0x30
 8015024:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80151d8 <_vfiprintf_r+0x220>
 8015028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801502c:	f04f 0901 	mov.w	r9, #1
 8015030:	4623      	mov	r3, r4
 8015032:	469a      	mov	sl, r3
 8015034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015038:	b10a      	cbz	r2, 801503e <_vfiprintf_r+0x86>
 801503a:	2a25      	cmp	r2, #37	; 0x25
 801503c:	d1f9      	bne.n	8015032 <_vfiprintf_r+0x7a>
 801503e:	ebba 0b04 	subs.w	fp, sl, r4
 8015042:	d00b      	beq.n	801505c <_vfiprintf_r+0xa4>
 8015044:	465b      	mov	r3, fp
 8015046:	4622      	mov	r2, r4
 8015048:	4629      	mov	r1, r5
 801504a:	4630      	mov	r0, r6
 801504c:	f7ff ffa1 	bl	8014f92 <__sfputs_r>
 8015050:	3001      	adds	r0, #1
 8015052:	f000 80a9 	beq.w	80151a8 <_vfiprintf_r+0x1f0>
 8015056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015058:	445a      	add	r2, fp
 801505a:	9209      	str	r2, [sp, #36]	; 0x24
 801505c:	f89a 3000 	ldrb.w	r3, [sl]
 8015060:	2b00      	cmp	r3, #0
 8015062:	f000 80a1 	beq.w	80151a8 <_vfiprintf_r+0x1f0>
 8015066:	2300      	movs	r3, #0
 8015068:	f04f 32ff 	mov.w	r2, #4294967295
 801506c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015070:	f10a 0a01 	add.w	sl, sl, #1
 8015074:	9304      	str	r3, [sp, #16]
 8015076:	9307      	str	r3, [sp, #28]
 8015078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801507c:	931a      	str	r3, [sp, #104]	; 0x68
 801507e:	4654      	mov	r4, sl
 8015080:	2205      	movs	r2, #5
 8015082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015086:	4854      	ldr	r0, [pc, #336]	; (80151d8 <_vfiprintf_r+0x220>)
 8015088:	f7f0 fe6a 	bl	8005d60 <memchr>
 801508c:	9a04      	ldr	r2, [sp, #16]
 801508e:	b9d8      	cbnz	r0, 80150c8 <_vfiprintf_r+0x110>
 8015090:	06d1      	lsls	r1, r2, #27
 8015092:	bf44      	itt	mi
 8015094:	2320      	movmi	r3, #32
 8015096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801509a:	0713      	lsls	r3, r2, #28
 801509c:	bf44      	itt	mi
 801509e:	232b      	movmi	r3, #43	; 0x2b
 80150a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150a4:	f89a 3000 	ldrb.w	r3, [sl]
 80150a8:	2b2a      	cmp	r3, #42	; 0x2a
 80150aa:	d015      	beq.n	80150d8 <_vfiprintf_r+0x120>
 80150ac:	9a07      	ldr	r2, [sp, #28]
 80150ae:	4654      	mov	r4, sl
 80150b0:	2000      	movs	r0, #0
 80150b2:	f04f 0c0a 	mov.w	ip, #10
 80150b6:	4621      	mov	r1, r4
 80150b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150bc:	3b30      	subs	r3, #48	; 0x30
 80150be:	2b09      	cmp	r3, #9
 80150c0:	d94d      	bls.n	801515e <_vfiprintf_r+0x1a6>
 80150c2:	b1b0      	cbz	r0, 80150f2 <_vfiprintf_r+0x13a>
 80150c4:	9207      	str	r2, [sp, #28]
 80150c6:	e014      	b.n	80150f2 <_vfiprintf_r+0x13a>
 80150c8:	eba0 0308 	sub.w	r3, r0, r8
 80150cc:	fa09 f303 	lsl.w	r3, r9, r3
 80150d0:	4313      	orrs	r3, r2
 80150d2:	9304      	str	r3, [sp, #16]
 80150d4:	46a2      	mov	sl, r4
 80150d6:	e7d2      	b.n	801507e <_vfiprintf_r+0xc6>
 80150d8:	9b03      	ldr	r3, [sp, #12]
 80150da:	1d19      	adds	r1, r3, #4
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	9103      	str	r1, [sp, #12]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	bfbb      	ittet	lt
 80150e4:	425b      	neglt	r3, r3
 80150e6:	f042 0202 	orrlt.w	r2, r2, #2
 80150ea:	9307      	strge	r3, [sp, #28]
 80150ec:	9307      	strlt	r3, [sp, #28]
 80150ee:	bfb8      	it	lt
 80150f0:	9204      	strlt	r2, [sp, #16]
 80150f2:	7823      	ldrb	r3, [r4, #0]
 80150f4:	2b2e      	cmp	r3, #46	; 0x2e
 80150f6:	d10c      	bne.n	8015112 <_vfiprintf_r+0x15a>
 80150f8:	7863      	ldrb	r3, [r4, #1]
 80150fa:	2b2a      	cmp	r3, #42	; 0x2a
 80150fc:	d134      	bne.n	8015168 <_vfiprintf_r+0x1b0>
 80150fe:	9b03      	ldr	r3, [sp, #12]
 8015100:	1d1a      	adds	r2, r3, #4
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	9203      	str	r2, [sp, #12]
 8015106:	2b00      	cmp	r3, #0
 8015108:	bfb8      	it	lt
 801510a:	f04f 33ff 	movlt.w	r3, #4294967295
 801510e:	3402      	adds	r4, #2
 8015110:	9305      	str	r3, [sp, #20]
 8015112:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80151e8 <_vfiprintf_r+0x230>
 8015116:	7821      	ldrb	r1, [r4, #0]
 8015118:	2203      	movs	r2, #3
 801511a:	4650      	mov	r0, sl
 801511c:	f7f0 fe20 	bl	8005d60 <memchr>
 8015120:	b138      	cbz	r0, 8015132 <_vfiprintf_r+0x17a>
 8015122:	9b04      	ldr	r3, [sp, #16]
 8015124:	eba0 000a 	sub.w	r0, r0, sl
 8015128:	2240      	movs	r2, #64	; 0x40
 801512a:	4082      	lsls	r2, r0
 801512c:	4313      	orrs	r3, r2
 801512e:	3401      	adds	r4, #1
 8015130:	9304      	str	r3, [sp, #16]
 8015132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015136:	4829      	ldr	r0, [pc, #164]	; (80151dc <_vfiprintf_r+0x224>)
 8015138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801513c:	2206      	movs	r2, #6
 801513e:	f7f0 fe0f 	bl	8005d60 <memchr>
 8015142:	2800      	cmp	r0, #0
 8015144:	d03f      	beq.n	80151c6 <_vfiprintf_r+0x20e>
 8015146:	4b26      	ldr	r3, [pc, #152]	; (80151e0 <_vfiprintf_r+0x228>)
 8015148:	bb1b      	cbnz	r3, 8015192 <_vfiprintf_r+0x1da>
 801514a:	9b03      	ldr	r3, [sp, #12]
 801514c:	3307      	adds	r3, #7
 801514e:	f023 0307 	bic.w	r3, r3, #7
 8015152:	3308      	adds	r3, #8
 8015154:	9303      	str	r3, [sp, #12]
 8015156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015158:	443b      	add	r3, r7
 801515a:	9309      	str	r3, [sp, #36]	; 0x24
 801515c:	e768      	b.n	8015030 <_vfiprintf_r+0x78>
 801515e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015162:	460c      	mov	r4, r1
 8015164:	2001      	movs	r0, #1
 8015166:	e7a6      	b.n	80150b6 <_vfiprintf_r+0xfe>
 8015168:	2300      	movs	r3, #0
 801516a:	3401      	adds	r4, #1
 801516c:	9305      	str	r3, [sp, #20]
 801516e:	4619      	mov	r1, r3
 8015170:	f04f 0c0a 	mov.w	ip, #10
 8015174:	4620      	mov	r0, r4
 8015176:	f810 2b01 	ldrb.w	r2, [r0], #1
 801517a:	3a30      	subs	r2, #48	; 0x30
 801517c:	2a09      	cmp	r2, #9
 801517e:	d903      	bls.n	8015188 <_vfiprintf_r+0x1d0>
 8015180:	2b00      	cmp	r3, #0
 8015182:	d0c6      	beq.n	8015112 <_vfiprintf_r+0x15a>
 8015184:	9105      	str	r1, [sp, #20]
 8015186:	e7c4      	b.n	8015112 <_vfiprintf_r+0x15a>
 8015188:	fb0c 2101 	mla	r1, ip, r1, r2
 801518c:	4604      	mov	r4, r0
 801518e:	2301      	movs	r3, #1
 8015190:	e7f0      	b.n	8015174 <_vfiprintf_r+0x1bc>
 8015192:	ab03      	add	r3, sp, #12
 8015194:	9300      	str	r3, [sp, #0]
 8015196:	462a      	mov	r2, r5
 8015198:	4b12      	ldr	r3, [pc, #72]	; (80151e4 <_vfiprintf_r+0x22c>)
 801519a:	a904      	add	r1, sp, #16
 801519c:	4630      	mov	r0, r6
 801519e:	f3af 8000 	nop.w
 80151a2:	4607      	mov	r7, r0
 80151a4:	1c78      	adds	r0, r7, #1
 80151a6:	d1d6      	bne.n	8015156 <_vfiprintf_r+0x19e>
 80151a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151aa:	07d9      	lsls	r1, r3, #31
 80151ac:	d405      	bmi.n	80151ba <_vfiprintf_r+0x202>
 80151ae:	89ab      	ldrh	r3, [r5, #12]
 80151b0:	059a      	lsls	r2, r3, #22
 80151b2:	d402      	bmi.n	80151ba <_vfiprintf_r+0x202>
 80151b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151b6:	f7ff fd19 	bl	8014bec <__retarget_lock_release_recursive>
 80151ba:	89ab      	ldrh	r3, [r5, #12]
 80151bc:	065b      	lsls	r3, r3, #25
 80151be:	f53f af1d 	bmi.w	8014ffc <_vfiprintf_r+0x44>
 80151c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151c4:	e71c      	b.n	8015000 <_vfiprintf_r+0x48>
 80151c6:	ab03      	add	r3, sp, #12
 80151c8:	9300      	str	r3, [sp, #0]
 80151ca:	462a      	mov	r2, r5
 80151cc:	4b05      	ldr	r3, [pc, #20]	; (80151e4 <_vfiprintf_r+0x22c>)
 80151ce:	a904      	add	r1, sp, #16
 80151d0:	4630      	mov	r0, r6
 80151d2:	f000 f879 	bl	80152c8 <_printf_i>
 80151d6:	e7e4      	b.n	80151a2 <_vfiprintf_r+0x1ea>
 80151d8:	080171a4 	.word	0x080171a4
 80151dc:	080171ae 	.word	0x080171ae
 80151e0:	00000000 	.word	0x00000000
 80151e4:	08014f93 	.word	0x08014f93
 80151e8:	080171aa 	.word	0x080171aa

080151ec <_printf_common>:
 80151ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151f0:	4616      	mov	r6, r2
 80151f2:	4699      	mov	r9, r3
 80151f4:	688a      	ldr	r2, [r1, #8]
 80151f6:	690b      	ldr	r3, [r1, #16]
 80151f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80151fc:	4293      	cmp	r3, r2
 80151fe:	bfb8      	it	lt
 8015200:	4613      	movlt	r3, r2
 8015202:	6033      	str	r3, [r6, #0]
 8015204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015208:	4607      	mov	r7, r0
 801520a:	460c      	mov	r4, r1
 801520c:	b10a      	cbz	r2, 8015212 <_printf_common+0x26>
 801520e:	3301      	adds	r3, #1
 8015210:	6033      	str	r3, [r6, #0]
 8015212:	6823      	ldr	r3, [r4, #0]
 8015214:	0699      	lsls	r1, r3, #26
 8015216:	bf42      	ittt	mi
 8015218:	6833      	ldrmi	r3, [r6, #0]
 801521a:	3302      	addmi	r3, #2
 801521c:	6033      	strmi	r3, [r6, #0]
 801521e:	6825      	ldr	r5, [r4, #0]
 8015220:	f015 0506 	ands.w	r5, r5, #6
 8015224:	d106      	bne.n	8015234 <_printf_common+0x48>
 8015226:	f104 0a19 	add.w	sl, r4, #25
 801522a:	68e3      	ldr	r3, [r4, #12]
 801522c:	6832      	ldr	r2, [r6, #0]
 801522e:	1a9b      	subs	r3, r3, r2
 8015230:	42ab      	cmp	r3, r5
 8015232:	dc26      	bgt.n	8015282 <_printf_common+0x96>
 8015234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015238:	1e13      	subs	r3, r2, #0
 801523a:	6822      	ldr	r2, [r4, #0]
 801523c:	bf18      	it	ne
 801523e:	2301      	movne	r3, #1
 8015240:	0692      	lsls	r2, r2, #26
 8015242:	d42b      	bmi.n	801529c <_printf_common+0xb0>
 8015244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015248:	4649      	mov	r1, r9
 801524a:	4638      	mov	r0, r7
 801524c:	47c0      	blx	r8
 801524e:	3001      	adds	r0, #1
 8015250:	d01e      	beq.n	8015290 <_printf_common+0xa4>
 8015252:	6823      	ldr	r3, [r4, #0]
 8015254:	6922      	ldr	r2, [r4, #16]
 8015256:	f003 0306 	and.w	r3, r3, #6
 801525a:	2b04      	cmp	r3, #4
 801525c:	bf02      	ittt	eq
 801525e:	68e5      	ldreq	r5, [r4, #12]
 8015260:	6833      	ldreq	r3, [r6, #0]
 8015262:	1aed      	subeq	r5, r5, r3
 8015264:	68a3      	ldr	r3, [r4, #8]
 8015266:	bf0c      	ite	eq
 8015268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801526c:	2500      	movne	r5, #0
 801526e:	4293      	cmp	r3, r2
 8015270:	bfc4      	itt	gt
 8015272:	1a9b      	subgt	r3, r3, r2
 8015274:	18ed      	addgt	r5, r5, r3
 8015276:	2600      	movs	r6, #0
 8015278:	341a      	adds	r4, #26
 801527a:	42b5      	cmp	r5, r6
 801527c:	d11a      	bne.n	80152b4 <_printf_common+0xc8>
 801527e:	2000      	movs	r0, #0
 8015280:	e008      	b.n	8015294 <_printf_common+0xa8>
 8015282:	2301      	movs	r3, #1
 8015284:	4652      	mov	r2, sl
 8015286:	4649      	mov	r1, r9
 8015288:	4638      	mov	r0, r7
 801528a:	47c0      	blx	r8
 801528c:	3001      	adds	r0, #1
 801528e:	d103      	bne.n	8015298 <_printf_common+0xac>
 8015290:	f04f 30ff 	mov.w	r0, #4294967295
 8015294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015298:	3501      	adds	r5, #1
 801529a:	e7c6      	b.n	801522a <_printf_common+0x3e>
 801529c:	18e1      	adds	r1, r4, r3
 801529e:	1c5a      	adds	r2, r3, #1
 80152a0:	2030      	movs	r0, #48	; 0x30
 80152a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80152a6:	4422      	add	r2, r4
 80152a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80152ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80152b0:	3302      	adds	r3, #2
 80152b2:	e7c7      	b.n	8015244 <_printf_common+0x58>
 80152b4:	2301      	movs	r3, #1
 80152b6:	4622      	mov	r2, r4
 80152b8:	4649      	mov	r1, r9
 80152ba:	4638      	mov	r0, r7
 80152bc:	47c0      	blx	r8
 80152be:	3001      	adds	r0, #1
 80152c0:	d0e6      	beq.n	8015290 <_printf_common+0xa4>
 80152c2:	3601      	adds	r6, #1
 80152c4:	e7d9      	b.n	801527a <_printf_common+0x8e>
	...

080152c8 <_printf_i>:
 80152c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152cc:	7e0f      	ldrb	r7, [r1, #24]
 80152ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80152d0:	2f78      	cmp	r7, #120	; 0x78
 80152d2:	4691      	mov	r9, r2
 80152d4:	4680      	mov	r8, r0
 80152d6:	460c      	mov	r4, r1
 80152d8:	469a      	mov	sl, r3
 80152da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80152de:	d807      	bhi.n	80152f0 <_printf_i+0x28>
 80152e0:	2f62      	cmp	r7, #98	; 0x62
 80152e2:	d80a      	bhi.n	80152fa <_printf_i+0x32>
 80152e4:	2f00      	cmp	r7, #0
 80152e6:	f000 80d4 	beq.w	8015492 <_printf_i+0x1ca>
 80152ea:	2f58      	cmp	r7, #88	; 0x58
 80152ec:	f000 80c0 	beq.w	8015470 <_printf_i+0x1a8>
 80152f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80152f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80152f8:	e03a      	b.n	8015370 <_printf_i+0xa8>
 80152fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80152fe:	2b15      	cmp	r3, #21
 8015300:	d8f6      	bhi.n	80152f0 <_printf_i+0x28>
 8015302:	a101      	add	r1, pc, #4	; (adr r1, 8015308 <_printf_i+0x40>)
 8015304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015308:	08015361 	.word	0x08015361
 801530c:	08015375 	.word	0x08015375
 8015310:	080152f1 	.word	0x080152f1
 8015314:	080152f1 	.word	0x080152f1
 8015318:	080152f1 	.word	0x080152f1
 801531c:	080152f1 	.word	0x080152f1
 8015320:	08015375 	.word	0x08015375
 8015324:	080152f1 	.word	0x080152f1
 8015328:	080152f1 	.word	0x080152f1
 801532c:	080152f1 	.word	0x080152f1
 8015330:	080152f1 	.word	0x080152f1
 8015334:	08015479 	.word	0x08015479
 8015338:	080153a1 	.word	0x080153a1
 801533c:	08015433 	.word	0x08015433
 8015340:	080152f1 	.word	0x080152f1
 8015344:	080152f1 	.word	0x080152f1
 8015348:	0801549b 	.word	0x0801549b
 801534c:	080152f1 	.word	0x080152f1
 8015350:	080153a1 	.word	0x080153a1
 8015354:	080152f1 	.word	0x080152f1
 8015358:	080152f1 	.word	0x080152f1
 801535c:	0801543b 	.word	0x0801543b
 8015360:	682b      	ldr	r3, [r5, #0]
 8015362:	1d1a      	adds	r2, r3, #4
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	602a      	str	r2, [r5, #0]
 8015368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801536c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015370:	2301      	movs	r3, #1
 8015372:	e09f      	b.n	80154b4 <_printf_i+0x1ec>
 8015374:	6820      	ldr	r0, [r4, #0]
 8015376:	682b      	ldr	r3, [r5, #0]
 8015378:	0607      	lsls	r7, r0, #24
 801537a:	f103 0104 	add.w	r1, r3, #4
 801537e:	6029      	str	r1, [r5, #0]
 8015380:	d501      	bpl.n	8015386 <_printf_i+0xbe>
 8015382:	681e      	ldr	r6, [r3, #0]
 8015384:	e003      	b.n	801538e <_printf_i+0xc6>
 8015386:	0646      	lsls	r6, r0, #25
 8015388:	d5fb      	bpl.n	8015382 <_printf_i+0xba>
 801538a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801538e:	2e00      	cmp	r6, #0
 8015390:	da03      	bge.n	801539a <_printf_i+0xd2>
 8015392:	232d      	movs	r3, #45	; 0x2d
 8015394:	4276      	negs	r6, r6
 8015396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801539a:	485a      	ldr	r0, [pc, #360]	; (8015504 <_printf_i+0x23c>)
 801539c:	230a      	movs	r3, #10
 801539e:	e012      	b.n	80153c6 <_printf_i+0xfe>
 80153a0:	682b      	ldr	r3, [r5, #0]
 80153a2:	6820      	ldr	r0, [r4, #0]
 80153a4:	1d19      	adds	r1, r3, #4
 80153a6:	6029      	str	r1, [r5, #0]
 80153a8:	0605      	lsls	r5, r0, #24
 80153aa:	d501      	bpl.n	80153b0 <_printf_i+0xe8>
 80153ac:	681e      	ldr	r6, [r3, #0]
 80153ae:	e002      	b.n	80153b6 <_printf_i+0xee>
 80153b0:	0641      	lsls	r1, r0, #25
 80153b2:	d5fb      	bpl.n	80153ac <_printf_i+0xe4>
 80153b4:	881e      	ldrh	r6, [r3, #0]
 80153b6:	4853      	ldr	r0, [pc, #332]	; (8015504 <_printf_i+0x23c>)
 80153b8:	2f6f      	cmp	r7, #111	; 0x6f
 80153ba:	bf0c      	ite	eq
 80153bc:	2308      	moveq	r3, #8
 80153be:	230a      	movne	r3, #10
 80153c0:	2100      	movs	r1, #0
 80153c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80153c6:	6865      	ldr	r5, [r4, #4]
 80153c8:	60a5      	str	r5, [r4, #8]
 80153ca:	2d00      	cmp	r5, #0
 80153cc:	bfa2      	ittt	ge
 80153ce:	6821      	ldrge	r1, [r4, #0]
 80153d0:	f021 0104 	bicge.w	r1, r1, #4
 80153d4:	6021      	strge	r1, [r4, #0]
 80153d6:	b90e      	cbnz	r6, 80153dc <_printf_i+0x114>
 80153d8:	2d00      	cmp	r5, #0
 80153da:	d04b      	beq.n	8015474 <_printf_i+0x1ac>
 80153dc:	4615      	mov	r5, r2
 80153de:	fbb6 f1f3 	udiv	r1, r6, r3
 80153e2:	fb03 6711 	mls	r7, r3, r1, r6
 80153e6:	5dc7      	ldrb	r7, [r0, r7]
 80153e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80153ec:	4637      	mov	r7, r6
 80153ee:	42bb      	cmp	r3, r7
 80153f0:	460e      	mov	r6, r1
 80153f2:	d9f4      	bls.n	80153de <_printf_i+0x116>
 80153f4:	2b08      	cmp	r3, #8
 80153f6:	d10b      	bne.n	8015410 <_printf_i+0x148>
 80153f8:	6823      	ldr	r3, [r4, #0]
 80153fa:	07de      	lsls	r6, r3, #31
 80153fc:	d508      	bpl.n	8015410 <_printf_i+0x148>
 80153fe:	6923      	ldr	r3, [r4, #16]
 8015400:	6861      	ldr	r1, [r4, #4]
 8015402:	4299      	cmp	r1, r3
 8015404:	bfde      	ittt	le
 8015406:	2330      	movle	r3, #48	; 0x30
 8015408:	f805 3c01 	strble.w	r3, [r5, #-1]
 801540c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015410:	1b52      	subs	r2, r2, r5
 8015412:	6122      	str	r2, [r4, #16]
 8015414:	f8cd a000 	str.w	sl, [sp]
 8015418:	464b      	mov	r3, r9
 801541a:	aa03      	add	r2, sp, #12
 801541c:	4621      	mov	r1, r4
 801541e:	4640      	mov	r0, r8
 8015420:	f7ff fee4 	bl	80151ec <_printf_common>
 8015424:	3001      	adds	r0, #1
 8015426:	d14a      	bne.n	80154be <_printf_i+0x1f6>
 8015428:	f04f 30ff 	mov.w	r0, #4294967295
 801542c:	b004      	add	sp, #16
 801542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015432:	6823      	ldr	r3, [r4, #0]
 8015434:	f043 0320 	orr.w	r3, r3, #32
 8015438:	6023      	str	r3, [r4, #0]
 801543a:	4833      	ldr	r0, [pc, #204]	; (8015508 <_printf_i+0x240>)
 801543c:	2778      	movs	r7, #120	; 0x78
 801543e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015442:	6823      	ldr	r3, [r4, #0]
 8015444:	6829      	ldr	r1, [r5, #0]
 8015446:	061f      	lsls	r7, r3, #24
 8015448:	f851 6b04 	ldr.w	r6, [r1], #4
 801544c:	d402      	bmi.n	8015454 <_printf_i+0x18c>
 801544e:	065f      	lsls	r7, r3, #25
 8015450:	bf48      	it	mi
 8015452:	b2b6      	uxthmi	r6, r6
 8015454:	07df      	lsls	r7, r3, #31
 8015456:	bf48      	it	mi
 8015458:	f043 0320 	orrmi.w	r3, r3, #32
 801545c:	6029      	str	r1, [r5, #0]
 801545e:	bf48      	it	mi
 8015460:	6023      	strmi	r3, [r4, #0]
 8015462:	b91e      	cbnz	r6, 801546c <_printf_i+0x1a4>
 8015464:	6823      	ldr	r3, [r4, #0]
 8015466:	f023 0320 	bic.w	r3, r3, #32
 801546a:	6023      	str	r3, [r4, #0]
 801546c:	2310      	movs	r3, #16
 801546e:	e7a7      	b.n	80153c0 <_printf_i+0xf8>
 8015470:	4824      	ldr	r0, [pc, #144]	; (8015504 <_printf_i+0x23c>)
 8015472:	e7e4      	b.n	801543e <_printf_i+0x176>
 8015474:	4615      	mov	r5, r2
 8015476:	e7bd      	b.n	80153f4 <_printf_i+0x12c>
 8015478:	682b      	ldr	r3, [r5, #0]
 801547a:	6826      	ldr	r6, [r4, #0]
 801547c:	6961      	ldr	r1, [r4, #20]
 801547e:	1d18      	adds	r0, r3, #4
 8015480:	6028      	str	r0, [r5, #0]
 8015482:	0635      	lsls	r5, r6, #24
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	d501      	bpl.n	801548c <_printf_i+0x1c4>
 8015488:	6019      	str	r1, [r3, #0]
 801548a:	e002      	b.n	8015492 <_printf_i+0x1ca>
 801548c:	0670      	lsls	r0, r6, #25
 801548e:	d5fb      	bpl.n	8015488 <_printf_i+0x1c0>
 8015490:	8019      	strh	r1, [r3, #0]
 8015492:	2300      	movs	r3, #0
 8015494:	6123      	str	r3, [r4, #16]
 8015496:	4615      	mov	r5, r2
 8015498:	e7bc      	b.n	8015414 <_printf_i+0x14c>
 801549a:	682b      	ldr	r3, [r5, #0]
 801549c:	1d1a      	adds	r2, r3, #4
 801549e:	602a      	str	r2, [r5, #0]
 80154a0:	681d      	ldr	r5, [r3, #0]
 80154a2:	6862      	ldr	r2, [r4, #4]
 80154a4:	2100      	movs	r1, #0
 80154a6:	4628      	mov	r0, r5
 80154a8:	f7f0 fc5a 	bl	8005d60 <memchr>
 80154ac:	b108      	cbz	r0, 80154b2 <_printf_i+0x1ea>
 80154ae:	1b40      	subs	r0, r0, r5
 80154b0:	6060      	str	r0, [r4, #4]
 80154b2:	6863      	ldr	r3, [r4, #4]
 80154b4:	6123      	str	r3, [r4, #16]
 80154b6:	2300      	movs	r3, #0
 80154b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154bc:	e7aa      	b.n	8015414 <_printf_i+0x14c>
 80154be:	6923      	ldr	r3, [r4, #16]
 80154c0:	462a      	mov	r2, r5
 80154c2:	4649      	mov	r1, r9
 80154c4:	4640      	mov	r0, r8
 80154c6:	47d0      	blx	sl
 80154c8:	3001      	adds	r0, #1
 80154ca:	d0ad      	beq.n	8015428 <_printf_i+0x160>
 80154cc:	6823      	ldr	r3, [r4, #0]
 80154ce:	079b      	lsls	r3, r3, #30
 80154d0:	d413      	bmi.n	80154fa <_printf_i+0x232>
 80154d2:	68e0      	ldr	r0, [r4, #12]
 80154d4:	9b03      	ldr	r3, [sp, #12]
 80154d6:	4298      	cmp	r0, r3
 80154d8:	bfb8      	it	lt
 80154da:	4618      	movlt	r0, r3
 80154dc:	e7a6      	b.n	801542c <_printf_i+0x164>
 80154de:	2301      	movs	r3, #1
 80154e0:	4632      	mov	r2, r6
 80154e2:	4649      	mov	r1, r9
 80154e4:	4640      	mov	r0, r8
 80154e6:	47d0      	blx	sl
 80154e8:	3001      	adds	r0, #1
 80154ea:	d09d      	beq.n	8015428 <_printf_i+0x160>
 80154ec:	3501      	adds	r5, #1
 80154ee:	68e3      	ldr	r3, [r4, #12]
 80154f0:	9903      	ldr	r1, [sp, #12]
 80154f2:	1a5b      	subs	r3, r3, r1
 80154f4:	42ab      	cmp	r3, r5
 80154f6:	dcf2      	bgt.n	80154de <_printf_i+0x216>
 80154f8:	e7eb      	b.n	80154d2 <_printf_i+0x20a>
 80154fa:	2500      	movs	r5, #0
 80154fc:	f104 0619 	add.w	r6, r4, #25
 8015500:	e7f5      	b.n	80154ee <_printf_i+0x226>
 8015502:	bf00      	nop
 8015504:	080171b5 	.word	0x080171b5
 8015508:	080171c6 	.word	0x080171c6

0801550c <__sflush_r>:
 801550c:	898a      	ldrh	r2, [r1, #12]
 801550e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015512:	4605      	mov	r5, r0
 8015514:	0710      	lsls	r0, r2, #28
 8015516:	460c      	mov	r4, r1
 8015518:	d458      	bmi.n	80155cc <__sflush_r+0xc0>
 801551a:	684b      	ldr	r3, [r1, #4]
 801551c:	2b00      	cmp	r3, #0
 801551e:	dc05      	bgt.n	801552c <__sflush_r+0x20>
 8015520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015522:	2b00      	cmp	r3, #0
 8015524:	dc02      	bgt.n	801552c <__sflush_r+0x20>
 8015526:	2000      	movs	r0, #0
 8015528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801552c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801552e:	2e00      	cmp	r6, #0
 8015530:	d0f9      	beq.n	8015526 <__sflush_r+0x1a>
 8015532:	2300      	movs	r3, #0
 8015534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015538:	682f      	ldr	r7, [r5, #0]
 801553a:	6a21      	ldr	r1, [r4, #32]
 801553c:	602b      	str	r3, [r5, #0]
 801553e:	d032      	beq.n	80155a6 <__sflush_r+0x9a>
 8015540:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015542:	89a3      	ldrh	r3, [r4, #12]
 8015544:	075a      	lsls	r2, r3, #29
 8015546:	d505      	bpl.n	8015554 <__sflush_r+0x48>
 8015548:	6863      	ldr	r3, [r4, #4]
 801554a:	1ac0      	subs	r0, r0, r3
 801554c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801554e:	b10b      	cbz	r3, 8015554 <__sflush_r+0x48>
 8015550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015552:	1ac0      	subs	r0, r0, r3
 8015554:	2300      	movs	r3, #0
 8015556:	4602      	mov	r2, r0
 8015558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801555a:	6a21      	ldr	r1, [r4, #32]
 801555c:	4628      	mov	r0, r5
 801555e:	47b0      	blx	r6
 8015560:	1c43      	adds	r3, r0, #1
 8015562:	89a3      	ldrh	r3, [r4, #12]
 8015564:	d106      	bne.n	8015574 <__sflush_r+0x68>
 8015566:	6829      	ldr	r1, [r5, #0]
 8015568:	291d      	cmp	r1, #29
 801556a:	d82b      	bhi.n	80155c4 <__sflush_r+0xb8>
 801556c:	4a29      	ldr	r2, [pc, #164]	; (8015614 <__sflush_r+0x108>)
 801556e:	410a      	asrs	r2, r1
 8015570:	07d6      	lsls	r6, r2, #31
 8015572:	d427      	bmi.n	80155c4 <__sflush_r+0xb8>
 8015574:	2200      	movs	r2, #0
 8015576:	6062      	str	r2, [r4, #4]
 8015578:	04d9      	lsls	r1, r3, #19
 801557a:	6922      	ldr	r2, [r4, #16]
 801557c:	6022      	str	r2, [r4, #0]
 801557e:	d504      	bpl.n	801558a <__sflush_r+0x7e>
 8015580:	1c42      	adds	r2, r0, #1
 8015582:	d101      	bne.n	8015588 <__sflush_r+0x7c>
 8015584:	682b      	ldr	r3, [r5, #0]
 8015586:	b903      	cbnz	r3, 801558a <__sflush_r+0x7e>
 8015588:	6560      	str	r0, [r4, #84]	; 0x54
 801558a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801558c:	602f      	str	r7, [r5, #0]
 801558e:	2900      	cmp	r1, #0
 8015590:	d0c9      	beq.n	8015526 <__sflush_r+0x1a>
 8015592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015596:	4299      	cmp	r1, r3
 8015598:	d002      	beq.n	80155a0 <__sflush_r+0x94>
 801559a:	4628      	mov	r0, r5
 801559c:	f7ff fb3e 	bl	8014c1c <_free_r>
 80155a0:	2000      	movs	r0, #0
 80155a2:	6360      	str	r0, [r4, #52]	; 0x34
 80155a4:	e7c0      	b.n	8015528 <__sflush_r+0x1c>
 80155a6:	2301      	movs	r3, #1
 80155a8:	4628      	mov	r0, r5
 80155aa:	47b0      	blx	r6
 80155ac:	1c41      	adds	r1, r0, #1
 80155ae:	d1c8      	bne.n	8015542 <__sflush_r+0x36>
 80155b0:	682b      	ldr	r3, [r5, #0]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d0c5      	beq.n	8015542 <__sflush_r+0x36>
 80155b6:	2b1d      	cmp	r3, #29
 80155b8:	d001      	beq.n	80155be <__sflush_r+0xb2>
 80155ba:	2b16      	cmp	r3, #22
 80155bc:	d101      	bne.n	80155c2 <__sflush_r+0xb6>
 80155be:	602f      	str	r7, [r5, #0]
 80155c0:	e7b1      	b.n	8015526 <__sflush_r+0x1a>
 80155c2:	89a3      	ldrh	r3, [r4, #12]
 80155c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155c8:	81a3      	strh	r3, [r4, #12]
 80155ca:	e7ad      	b.n	8015528 <__sflush_r+0x1c>
 80155cc:	690f      	ldr	r7, [r1, #16]
 80155ce:	2f00      	cmp	r7, #0
 80155d0:	d0a9      	beq.n	8015526 <__sflush_r+0x1a>
 80155d2:	0793      	lsls	r3, r2, #30
 80155d4:	680e      	ldr	r6, [r1, #0]
 80155d6:	bf08      	it	eq
 80155d8:	694b      	ldreq	r3, [r1, #20]
 80155da:	600f      	str	r7, [r1, #0]
 80155dc:	bf18      	it	ne
 80155de:	2300      	movne	r3, #0
 80155e0:	eba6 0807 	sub.w	r8, r6, r7
 80155e4:	608b      	str	r3, [r1, #8]
 80155e6:	f1b8 0f00 	cmp.w	r8, #0
 80155ea:	dd9c      	ble.n	8015526 <__sflush_r+0x1a>
 80155ec:	6a21      	ldr	r1, [r4, #32]
 80155ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155f0:	4643      	mov	r3, r8
 80155f2:	463a      	mov	r2, r7
 80155f4:	4628      	mov	r0, r5
 80155f6:	47b0      	blx	r6
 80155f8:	2800      	cmp	r0, #0
 80155fa:	dc06      	bgt.n	801560a <__sflush_r+0xfe>
 80155fc:	89a3      	ldrh	r3, [r4, #12]
 80155fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015602:	81a3      	strh	r3, [r4, #12]
 8015604:	f04f 30ff 	mov.w	r0, #4294967295
 8015608:	e78e      	b.n	8015528 <__sflush_r+0x1c>
 801560a:	4407      	add	r7, r0
 801560c:	eba8 0800 	sub.w	r8, r8, r0
 8015610:	e7e9      	b.n	80155e6 <__sflush_r+0xda>
 8015612:	bf00      	nop
 8015614:	dfbffffe 	.word	0xdfbffffe

08015618 <_fflush_r>:
 8015618:	b538      	push	{r3, r4, r5, lr}
 801561a:	690b      	ldr	r3, [r1, #16]
 801561c:	4605      	mov	r5, r0
 801561e:	460c      	mov	r4, r1
 8015620:	b913      	cbnz	r3, 8015628 <_fflush_r+0x10>
 8015622:	2500      	movs	r5, #0
 8015624:	4628      	mov	r0, r5
 8015626:	bd38      	pop	{r3, r4, r5, pc}
 8015628:	b118      	cbz	r0, 8015632 <_fflush_r+0x1a>
 801562a:	6a03      	ldr	r3, [r0, #32]
 801562c:	b90b      	cbnz	r3, 8015632 <_fflush_r+0x1a>
 801562e:	f7ff f91b 	bl	8014868 <__sinit>
 8015632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d0f3      	beq.n	8015622 <_fflush_r+0xa>
 801563a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801563c:	07d0      	lsls	r0, r2, #31
 801563e:	d404      	bmi.n	801564a <_fflush_r+0x32>
 8015640:	0599      	lsls	r1, r3, #22
 8015642:	d402      	bmi.n	801564a <_fflush_r+0x32>
 8015644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015646:	f7ff fad0 	bl	8014bea <__retarget_lock_acquire_recursive>
 801564a:	4628      	mov	r0, r5
 801564c:	4621      	mov	r1, r4
 801564e:	f7ff ff5d 	bl	801550c <__sflush_r>
 8015652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015654:	07da      	lsls	r2, r3, #31
 8015656:	4605      	mov	r5, r0
 8015658:	d4e4      	bmi.n	8015624 <_fflush_r+0xc>
 801565a:	89a3      	ldrh	r3, [r4, #12]
 801565c:	059b      	lsls	r3, r3, #22
 801565e:	d4e1      	bmi.n	8015624 <_fflush_r+0xc>
 8015660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015662:	f7ff fac3 	bl	8014bec <__retarget_lock_release_recursive>
 8015666:	e7dd      	b.n	8015624 <_fflush_r+0xc>

08015668 <__swbuf_r>:
 8015668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801566a:	460e      	mov	r6, r1
 801566c:	4614      	mov	r4, r2
 801566e:	4605      	mov	r5, r0
 8015670:	b118      	cbz	r0, 801567a <__swbuf_r+0x12>
 8015672:	6a03      	ldr	r3, [r0, #32]
 8015674:	b90b      	cbnz	r3, 801567a <__swbuf_r+0x12>
 8015676:	f7ff f8f7 	bl	8014868 <__sinit>
 801567a:	69a3      	ldr	r3, [r4, #24]
 801567c:	60a3      	str	r3, [r4, #8]
 801567e:	89a3      	ldrh	r3, [r4, #12]
 8015680:	071a      	lsls	r2, r3, #28
 8015682:	d525      	bpl.n	80156d0 <__swbuf_r+0x68>
 8015684:	6923      	ldr	r3, [r4, #16]
 8015686:	b31b      	cbz	r3, 80156d0 <__swbuf_r+0x68>
 8015688:	6823      	ldr	r3, [r4, #0]
 801568a:	6922      	ldr	r2, [r4, #16]
 801568c:	1a98      	subs	r0, r3, r2
 801568e:	6963      	ldr	r3, [r4, #20]
 8015690:	b2f6      	uxtb	r6, r6
 8015692:	4283      	cmp	r3, r0
 8015694:	4637      	mov	r7, r6
 8015696:	dc04      	bgt.n	80156a2 <__swbuf_r+0x3a>
 8015698:	4621      	mov	r1, r4
 801569a:	4628      	mov	r0, r5
 801569c:	f7ff ffbc 	bl	8015618 <_fflush_r>
 80156a0:	b9e0      	cbnz	r0, 80156dc <__swbuf_r+0x74>
 80156a2:	68a3      	ldr	r3, [r4, #8]
 80156a4:	3b01      	subs	r3, #1
 80156a6:	60a3      	str	r3, [r4, #8]
 80156a8:	6823      	ldr	r3, [r4, #0]
 80156aa:	1c5a      	adds	r2, r3, #1
 80156ac:	6022      	str	r2, [r4, #0]
 80156ae:	701e      	strb	r6, [r3, #0]
 80156b0:	6962      	ldr	r2, [r4, #20]
 80156b2:	1c43      	adds	r3, r0, #1
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d004      	beq.n	80156c2 <__swbuf_r+0x5a>
 80156b8:	89a3      	ldrh	r3, [r4, #12]
 80156ba:	07db      	lsls	r3, r3, #31
 80156bc:	d506      	bpl.n	80156cc <__swbuf_r+0x64>
 80156be:	2e0a      	cmp	r6, #10
 80156c0:	d104      	bne.n	80156cc <__swbuf_r+0x64>
 80156c2:	4621      	mov	r1, r4
 80156c4:	4628      	mov	r0, r5
 80156c6:	f7ff ffa7 	bl	8015618 <_fflush_r>
 80156ca:	b938      	cbnz	r0, 80156dc <__swbuf_r+0x74>
 80156cc:	4638      	mov	r0, r7
 80156ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156d0:	4621      	mov	r1, r4
 80156d2:	4628      	mov	r0, r5
 80156d4:	f000 f806 	bl	80156e4 <__swsetup_r>
 80156d8:	2800      	cmp	r0, #0
 80156da:	d0d5      	beq.n	8015688 <__swbuf_r+0x20>
 80156dc:	f04f 37ff 	mov.w	r7, #4294967295
 80156e0:	e7f4      	b.n	80156cc <__swbuf_r+0x64>
	...

080156e4 <__swsetup_r>:
 80156e4:	b538      	push	{r3, r4, r5, lr}
 80156e6:	4b2a      	ldr	r3, [pc, #168]	; (8015790 <__swsetup_r+0xac>)
 80156e8:	4605      	mov	r5, r0
 80156ea:	6818      	ldr	r0, [r3, #0]
 80156ec:	460c      	mov	r4, r1
 80156ee:	b118      	cbz	r0, 80156f8 <__swsetup_r+0x14>
 80156f0:	6a03      	ldr	r3, [r0, #32]
 80156f2:	b90b      	cbnz	r3, 80156f8 <__swsetup_r+0x14>
 80156f4:	f7ff f8b8 	bl	8014868 <__sinit>
 80156f8:	89a3      	ldrh	r3, [r4, #12]
 80156fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80156fe:	0718      	lsls	r0, r3, #28
 8015700:	d422      	bmi.n	8015748 <__swsetup_r+0x64>
 8015702:	06d9      	lsls	r1, r3, #27
 8015704:	d407      	bmi.n	8015716 <__swsetup_r+0x32>
 8015706:	2309      	movs	r3, #9
 8015708:	602b      	str	r3, [r5, #0]
 801570a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801570e:	81a3      	strh	r3, [r4, #12]
 8015710:	f04f 30ff 	mov.w	r0, #4294967295
 8015714:	e034      	b.n	8015780 <__swsetup_r+0x9c>
 8015716:	0758      	lsls	r0, r3, #29
 8015718:	d512      	bpl.n	8015740 <__swsetup_r+0x5c>
 801571a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801571c:	b141      	cbz	r1, 8015730 <__swsetup_r+0x4c>
 801571e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015722:	4299      	cmp	r1, r3
 8015724:	d002      	beq.n	801572c <__swsetup_r+0x48>
 8015726:	4628      	mov	r0, r5
 8015728:	f7ff fa78 	bl	8014c1c <_free_r>
 801572c:	2300      	movs	r3, #0
 801572e:	6363      	str	r3, [r4, #52]	; 0x34
 8015730:	89a3      	ldrh	r3, [r4, #12]
 8015732:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015736:	81a3      	strh	r3, [r4, #12]
 8015738:	2300      	movs	r3, #0
 801573a:	6063      	str	r3, [r4, #4]
 801573c:	6923      	ldr	r3, [r4, #16]
 801573e:	6023      	str	r3, [r4, #0]
 8015740:	89a3      	ldrh	r3, [r4, #12]
 8015742:	f043 0308 	orr.w	r3, r3, #8
 8015746:	81a3      	strh	r3, [r4, #12]
 8015748:	6923      	ldr	r3, [r4, #16]
 801574a:	b94b      	cbnz	r3, 8015760 <__swsetup_r+0x7c>
 801574c:	89a3      	ldrh	r3, [r4, #12]
 801574e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015756:	d003      	beq.n	8015760 <__swsetup_r+0x7c>
 8015758:	4621      	mov	r1, r4
 801575a:	4628      	mov	r0, r5
 801575c:	f000 f8cd 	bl	80158fa <__smakebuf_r>
 8015760:	89a0      	ldrh	r0, [r4, #12]
 8015762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015766:	f010 0301 	ands.w	r3, r0, #1
 801576a:	d00a      	beq.n	8015782 <__swsetup_r+0x9e>
 801576c:	2300      	movs	r3, #0
 801576e:	60a3      	str	r3, [r4, #8]
 8015770:	6963      	ldr	r3, [r4, #20]
 8015772:	425b      	negs	r3, r3
 8015774:	61a3      	str	r3, [r4, #24]
 8015776:	6923      	ldr	r3, [r4, #16]
 8015778:	b943      	cbnz	r3, 801578c <__swsetup_r+0xa8>
 801577a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801577e:	d1c4      	bne.n	801570a <__swsetup_r+0x26>
 8015780:	bd38      	pop	{r3, r4, r5, pc}
 8015782:	0781      	lsls	r1, r0, #30
 8015784:	bf58      	it	pl
 8015786:	6963      	ldrpl	r3, [r4, #20]
 8015788:	60a3      	str	r3, [r4, #8]
 801578a:	e7f4      	b.n	8015776 <__swsetup_r+0x92>
 801578c:	2000      	movs	r0, #0
 801578e:	e7f7      	b.n	8015780 <__swsetup_r+0x9c>
 8015790:	20000090 	.word	0x20000090

08015794 <memmove>:
 8015794:	4288      	cmp	r0, r1
 8015796:	b510      	push	{r4, lr}
 8015798:	eb01 0402 	add.w	r4, r1, r2
 801579c:	d902      	bls.n	80157a4 <memmove+0x10>
 801579e:	4284      	cmp	r4, r0
 80157a0:	4623      	mov	r3, r4
 80157a2:	d807      	bhi.n	80157b4 <memmove+0x20>
 80157a4:	1e43      	subs	r3, r0, #1
 80157a6:	42a1      	cmp	r1, r4
 80157a8:	d008      	beq.n	80157bc <memmove+0x28>
 80157aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80157ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80157b2:	e7f8      	b.n	80157a6 <memmove+0x12>
 80157b4:	4402      	add	r2, r0
 80157b6:	4601      	mov	r1, r0
 80157b8:	428a      	cmp	r2, r1
 80157ba:	d100      	bne.n	80157be <memmove+0x2a>
 80157bc:	bd10      	pop	{r4, pc}
 80157be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80157c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80157c6:	e7f7      	b.n	80157b8 <memmove+0x24>

080157c8 <_raise_r>:
 80157c8:	291f      	cmp	r1, #31
 80157ca:	b538      	push	{r3, r4, r5, lr}
 80157cc:	4604      	mov	r4, r0
 80157ce:	460d      	mov	r5, r1
 80157d0:	d904      	bls.n	80157dc <_raise_r+0x14>
 80157d2:	2316      	movs	r3, #22
 80157d4:	6003      	str	r3, [r0, #0]
 80157d6:	f04f 30ff 	mov.w	r0, #4294967295
 80157da:	bd38      	pop	{r3, r4, r5, pc}
 80157dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80157de:	b112      	cbz	r2, 80157e6 <_raise_r+0x1e>
 80157e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80157e4:	b94b      	cbnz	r3, 80157fa <_raise_r+0x32>
 80157e6:	4620      	mov	r0, r4
 80157e8:	f000 f830 	bl	801584c <_getpid_r>
 80157ec:	462a      	mov	r2, r5
 80157ee:	4601      	mov	r1, r0
 80157f0:	4620      	mov	r0, r4
 80157f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157f6:	f000 b817 	b.w	8015828 <_kill_r>
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d00a      	beq.n	8015814 <_raise_r+0x4c>
 80157fe:	1c59      	adds	r1, r3, #1
 8015800:	d103      	bne.n	801580a <_raise_r+0x42>
 8015802:	2316      	movs	r3, #22
 8015804:	6003      	str	r3, [r0, #0]
 8015806:	2001      	movs	r0, #1
 8015808:	e7e7      	b.n	80157da <_raise_r+0x12>
 801580a:	2400      	movs	r4, #0
 801580c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015810:	4628      	mov	r0, r5
 8015812:	4798      	blx	r3
 8015814:	2000      	movs	r0, #0
 8015816:	e7e0      	b.n	80157da <_raise_r+0x12>

08015818 <raise>:
 8015818:	4b02      	ldr	r3, [pc, #8]	; (8015824 <raise+0xc>)
 801581a:	4601      	mov	r1, r0
 801581c:	6818      	ldr	r0, [r3, #0]
 801581e:	f7ff bfd3 	b.w	80157c8 <_raise_r>
 8015822:	bf00      	nop
 8015824:	20000090 	.word	0x20000090

08015828 <_kill_r>:
 8015828:	b538      	push	{r3, r4, r5, lr}
 801582a:	4d07      	ldr	r5, [pc, #28]	; (8015848 <_kill_r+0x20>)
 801582c:	2300      	movs	r3, #0
 801582e:	4604      	mov	r4, r0
 8015830:	4608      	mov	r0, r1
 8015832:	4611      	mov	r1, r2
 8015834:	602b      	str	r3, [r5, #0]
 8015836:	f7f3 fa83 	bl	8008d40 <_kill>
 801583a:	1c43      	adds	r3, r0, #1
 801583c:	d102      	bne.n	8015844 <_kill_r+0x1c>
 801583e:	682b      	ldr	r3, [r5, #0]
 8015840:	b103      	cbz	r3, 8015844 <_kill_r+0x1c>
 8015842:	6023      	str	r3, [r4, #0]
 8015844:	bd38      	pop	{r3, r4, r5, pc}
 8015846:	bf00      	nop
 8015848:	20001b98 	.word	0x20001b98

0801584c <_getpid_r>:
 801584c:	f7f3 ba70 	b.w	8008d30 <_getpid>

08015850 <_realloc_r>:
 8015850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015854:	4680      	mov	r8, r0
 8015856:	4614      	mov	r4, r2
 8015858:	460e      	mov	r6, r1
 801585a:	b921      	cbnz	r1, 8015866 <_realloc_r+0x16>
 801585c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015860:	4611      	mov	r1, r2
 8015862:	f7fe bee9 	b.w	8014638 <_malloc_r>
 8015866:	b92a      	cbnz	r2, 8015874 <_realloc_r+0x24>
 8015868:	f7ff f9d8 	bl	8014c1c <_free_r>
 801586c:	4625      	mov	r5, r4
 801586e:	4628      	mov	r0, r5
 8015870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015874:	f000 f8a0 	bl	80159b8 <_malloc_usable_size_r>
 8015878:	4284      	cmp	r4, r0
 801587a:	4607      	mov	r7, r0
 801587c:	d802      	bhi.n	8015884 <_realloc_r+0x34>
 801587e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015882:	d812      	bhi.n	80158aa <_realloc_r+0x5a>
 8015884:	4621      	mov	r1, r4
 8015886:	4640      	mov	r0, r8
 8015888:	f7fe fed6 	bl	8014638 <_malloc_r>
 801588c:	4605      	mov	r5, r0
 801588e:	2800      	cmp	r0, #0
 8015890:	d0ed      	beq.n	801586e <_realloc_r+0x1e>
 8015892:	42bc      	cmp	r4, r7
 8015894:	4622      	mov	r2, r4
 8015896:	4631      	mov	r1, r6
 8015898:	bf28      	it	cs
 801589a:	463a      	movcs	r2, r7
 801589c:	f7ff f9a9 	bl	8014bf2 <memcpy>
 80158a0:	4631      	mov	r1, r6
 80158a2:	4640      	mov	r0, r8
 80158a4:	f7ff f9ba 	bl	8014c1c <_free_r>
 80158a8:	e7e1      	b.n	801586e <_realloc_r+0x1e>
 80158aa:	4635      	mov	r5, r6
 80158ac:	e7df      	b.n	801586e <_realloc_r+0x1e>

080158ae <__swhatbuf_r>:
 80158ae:	b570      	push	{r4, r5, r6, lr}
 80158b0:	460c      	mov	r4, r1
 80158b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158b6:	2900      	cmp	r1, #0
 80158b8:	b096      	sub	sp, #88	; 0x58
 80158ba:	4615      	mov	r5, r2
 80158bc:	461e      	mov	r6, r3
 80158be:	da0d      	bge.n	80158dc <__swhatbuf_r+0x2e>
 80158c0:	89a3      	ldrh	r3, [r4, #12]
 80158c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80158c6:	f04f 0100 	mov.w	r1, #0
 80158ca:	bf0c      	ite	eq
 80158cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80158d0:	2340      	movne	r3, #64	; 0x40
 80158d2:	2000      	movs	r0, #0
 80158d4:	6031      	str	r1, [r6, #0]
 80158d6:	602b      	str	r3, [r5, #0]
 80158d8:	b016      	add	sp, #88	; 0x58
 80158da:	bd70      	pop	{r4, r5, r6, pc}
 80158dc:	466a      	mov	r2, sp
 80158de:	f000 f849 	bl	8015974 <_fstat_r>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	dbec      	blt.n	80158c0 <__swhatbuf_r+0x12>
 80158e6:	9901      	ldr	r1, [sp, #4]
 80158e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80158ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80158f0:	4259      	negs	r1, r3
 80158f2:	4159      	adcs	r1, r3
 80158f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158f8:	e7eb      	b.n	80158d2 <__swhatbuf_r+0x24>

080158fa <__smakebuf_r>:
 80158fa:	898b      	ldrh	r3, [r1, #12]
 80158fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158fe:	079d      	lsls	r5, r3, #30
 8015900:	4606      	mov	r6, r0
 8015902:	460c      	mov	r4, r1
 8015904:	d507      	bpl.n	8015916 <__smakebuf_r+0x1c>
 8015906:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801590a:	6023      	str	r3, [r4, #0]
 801590c:	6123      	str	r3, [r4, #16]
 801590e:	2301      	movs	r3, #1
 8015910:	6163      	str	r3, [r4, #20]
 8015912:	b002      	add	sp, #8
 8015914:	bd70      	pop	{r4, r5, r6, pc}
 8015916:	ab01      	add	r3, sp, #4
 8015918:	466a      	mov	r2, sp
 801591a:	f7ff ffc8 	bl	80158ae <__swhatbuf_r>
 801591e:	9900      	ldr	r1, [sp, #0]
 8015920:	4605      	mov	r5, r0
 8015922:	4630      	mov	r0, r6
 8015924:	f7fe fe88 	bl	8014638 <_malloc_r>
 8015928:	b948      	cbnz	r0, 801593e <__smakebuf_r+0x44>
 801592a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801592e:	059a      	lsls	r2, r3, #22
 8015930:	d4ef      	bmi.n	8015912 <__smakebuf_r+0x18>
 8015932:	f023 0303 	bic.w	r3, r3, #3
 8015936:	f043 0302 	orr.w	r3, r3, #2
 801593a:	81a3      	strh	r3, [r4, #12]
 801593c:	e7e3      	b.n	8015906 <__smakebuf_r+0xc>
 801593e:	89a3      	ldrh	r3, [r4, #12]
 8015940:	6020      	str	r0, [r4, #0]
 8015942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015946:	81a3      	strh	r3, [r4, #12]
 8015948:	9b00      	ldr	r3, [sp, #0]
 801594a:	6163      	str	r3, [r4, #20]
 801594c:	9b01      	ldr	r3, [sp, #4]
 801594e:	6120      	str	r0, [r4, #16]
 8015950:	b15b      	cbz	r3, 801596a <__smakebuf_r+0x70>
 8015952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015956:	4630      	mov	r0, r6
 8015958:	f000 f81e 	bl	8015998 <_isatty_r>
 801595c:	b128      	cbz	r0, 801596a <__smakebuf_r+0x70>
 801595e:	89a3      	ldrh	r3, [r4, #12]
 8015960:	f023 0303 	bic.w	r3, r3, #3
 8015964:	f043 0301 	orr.w	r3, r3, #1
 8015968:	81a3      	strh	r3, [r4, #12]
 801596a:	89a3      	ldrh	r3, [r4, #12]
 801596c:	431d      	orrs	r5, r3
 801596e:	81a5      	strh	r5, [r4, #12]
 8015970:	e7cf      	b.n	8015912 <__smakebuf_r+0x18>
	...

08015974 <_fstat_r>:
 8015974:	b538      	push	{r3, r4, r5, lr}
 8015976:	4d07      	ldr	r5, [pc, #28]	; (8015994 <_fstat_r+0x20>)
 8015978:	2300      	movs	r3, #0
 801597a:	4604      	mov	r4, r0
 801597c:	4608      	mov	r0, r1
 801597e:	4611      	mov	r1, r2
 8015980:	602b      	str	r3, [r5, #0]
 8015982:	f7f3 fa20 	bl	8008dc6 <_fstat>
 8015986:	1c43      	adds	r3, r0, #1
 8015988:	d102      	bne.n	8015990 <_fstat_r+0x1c>
 801598a:	682b      	ldr	r3, [r5, #0]
 801598c:	b103      	cbz	r3, 8015990 <_fstat_r+0x1c>
 801598e:	6023      	str	r3, [r4, #0]
 8015990:	bd38      	pop	{r3, r4, r5, pc}
 8015992:	bf00      	nop
 8015994:	20001b98 	.word	0x20001b98

08015998 <_isatty_r>:
 8015998:	b538      	push	{r3, r4, r5, lr}
 801599a:	4d06      	ldr	r5, [pc, #24]	; (80159b4 <_isatty_r+0x1c>)
 801599c:	2300      	movs	r3, #0
 801599e:	4604      	mov	r4, r0
 80159a0:	4608      	mov	r0, r1
 80159a2:	602b      	str	r3, [r5, #0]
 80159a4:	f7f3 fa1f 	bl	8008de6 <_isatty>
 80159a8:	1c43      	adds	r3, r0, #1
 80159aa:	d102      	bne.n	80159b2 <_isatty_r+0x1a>
 80159ac:	682b      	ldr	r3, [r5, #0]
 80159ae:	b103      	cbz	r3, 80159b2 <_isatty_r+0x1a>
 80159b0:	6023      	str	r3, [r4, #0]
 80159b2:	bd38      	pop	{r3, r4, r5, pc}
 80159b4:	20001b98 	.word	0x20001b98

080159b8 <_malloc_usable_size_r>:
 80159b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159bc:	1f18      	subs	r0, r3, #4
 80159be:	2b00      	cmp	r3, #0
 80159c0:	bfbc      	itt	lt
 80159c2:	580b      	ldrlt	r3, [r1, r0]
 80159c4:	18c0      	addlt	r0, r0, r3
 80159c6:	4770      	bx	lr

080159c8 <_init>:
 80159c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ca:	bf00      	nop
 80159cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159ce:	bc08      	pop	{r3}
 80159d0:	469e      	mov	lr, r3
 80159d2:	4770      	bx	lr

080159d4 <_fini>:
 80159d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159d6:	bf00      	nop
 80159d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159da:	bc08      	pop	{r3}
 80159dc:	469e      	mov	lr, r3
 80159de:	4770      	bx	lr
