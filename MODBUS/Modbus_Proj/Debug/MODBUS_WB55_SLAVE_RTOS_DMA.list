
MODBUS_WB55_SLAVE_RTOS_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd18  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c048  0800c048  0001c048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800c04c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f54  2000007c  0800c0c0  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001fd0  0800c0c0  00021fd0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026cb2  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004e84  00000000  00000000  00046da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000023d0  00000000  00000000  0004bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001ba5  00000000  00000000  0004dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00004eb0  00000000  00000000  0004fb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002432c  00000000  00000000  00054a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ef275  00000000  00000000  00078d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000988c  00000000  00000000  00167ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  0017187c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800be40 	.word	0x0800be40

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800be40 	.word	0x0800be40

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b970 	b.w	8000478 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	460f      	mov	r7, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14a      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d965      	bls.n	8000292 <__udivmoddi4+0xe2>
 80001c6:	fab2 f382 	clz	r3, r2
 80001ca:	b143      	cbz	r3, 80001de <__udivmoddi4+0x2e>
 80001cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d0:	f1c3 0220 	rsb	r2, r3, #32
 80001d4:	409f      	lsls	r7, r3
 80001d6:	fa20 f202 	lsr.w	r2, r0, r2
 80001da:	4317      	orrs	r7, r2
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001e2:	fa1f f58c 	uxth.w	r5, ip
 80001e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80001ea:	0c22      	lsrs	r2, r4, #16
 80001ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f4:	fb01 f005 	mul.w	r0, r1, r5
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x62>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 37ff 	add.w	r7, r1, #4294967295
 8000204:	f080 811c 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8119 	bls.w	8000440 <__udivmoddi4+0x290>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	b2a4      	uxth	r4, r4
 8000216:	fbb2 f0fe 	udiv	r0, r2, lr
 800021a:	fb0e 2210 	mls	r2, lr, r0, r2
 800021e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000222:	fb00 f505 	mul.w	r5, r0, r5
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x90>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8107 	bcs.w	8000444 <__udivmoddi4+0x294>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8104 	bls.w	8000444 <__udivmoddi4+0x294>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	1b64      	subs	r4, r4, r5
 8000246:	2100      	movs	r1, #0
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa2>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xbc>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ed 	beq.w	800043a <__udivmoddi4+0x28a>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d149      	bne.n	8000308 <__udivmoddi4+0x158>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xce>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2be>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4617      	mov	r7, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa2>
 800028c:	e9c6 4700 	strd	r4, r7, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa2>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xe6>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a0:	1a8a      	subs	r2, r1, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b0:	fb07 2015 	mls	r0, r7, r5, r2
 80002b4:	0c22      	lsrs	r2, r4, #16
 80002b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ba:	fb0e f005 	mul.w	r0, lr, r5
 80002be:	4290      	cmp	r0, r2
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c2:	eb1c 0202 	adds.w	r2, ip, r2
 80002c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4290      	cmp	r0, r2
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2b8>
 80002d2:	4645      	mov	r5, r8
 80002d4:	1a12      	subs	r2, r2, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002dc:	fb07 2210 	mls	r2, r7, r0, r2
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x14e>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x14c>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2c2>
 80002fc:	4610      	mov	r0, r2
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000306:	e79f      	b.n	8000248 <__udivmoddi4+0x98>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa05 f401 	lsl.w	r4, r5, r1
 800031a:	fa20 f307 	lsr.w	r3, r0, r7
 800031e:	40fd      	lsrs	r5, r7
 8000320:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000324:	4323      	orrs	r3, r4
 8000326:	fbb5 f8f9 	udiv	r8, r5, r9
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	fb09 5518 	mls	r5, r9, r8, r5
 8000332:	0c1c      	lsrs	r4, r3, #16
 8000334:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000338:	fb08 f50e 	mul.w	r5, r8, lr
 800033c:	42a5      	cmp	r5, r4
 800033e:	fa02 f201 	lsl.w	r2, r2, r1
 8000342:	fa00 f001 	lsl.w	r0, r0, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2b4>
 8000354:	42a5      	cmp	r5, r4
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2b4>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4464      	add	r4, ip
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	b29d      	uxth	r5, r3
 8000364:	fbb4 f3f9 	udiv	r3, r4, r9
 8000368:	fb09 4413 	mls	r4, r9, r3, r4
 800036c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000370:	fb03 fe0e 	mul.w	lr, r3, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2ac>
 8000382:	45a6      	cmp	lr, r4
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2ac>
 8000386:	3b02      	subs	r3, #2
 8000388:	4464      	add	r4, ip
 800038a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038e:	fba3 9502 	umull	r9, r5, r3, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	42ac      	cmp	r4, r5
 8000398:	46c8      	mov	r8, r9
 800039a:	46ae      	mov	lr, r5
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x29c>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x298>
 80003a0:	b156      	cbz	r6, 80003b8 <__udivmoddi4+0x208>
 80003a2:	ebb0 0208 	subs.w	r2, r0, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	fa04 f707 	lsl.w	r7, r4, r7
 80003ae:	40ca      	lsrs	r2, r1
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	4317      	orrs	r7, r2
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	4618      	mov	r0, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c3 0120 	rsb	r1, r3, #32
 80003c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c8:	fa20 f201 	lsr.w	r2, r0, r1
 80003cc:	fa25 f101 	lsr.w	r1, r5, r1
 80003d0:	409d      	lsls	r5, r3
 80003d2:	432a      	orrs	r2, r5
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e0:	fb07 1510 	mls	r5, r7, r0, r1
 80003e4:	0c11      	lsrs	r1, r2, #16
 80003e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003ea:	fb00 f50e 	mul.w	r5, r0, lr
 80003ee:	428d      	cmp	r5, r1
 80003f0:	fa04 f403 	lsl.w	r4, r4, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x258>
 80003f6:	eb1c 0101 	adds.w	r1, ip, r1
 80003fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000400:	428d      	cmp	r5, r1
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000404:	3802      	subs	r0, #2
 8000406:	4461      	add	r1, ip
 8000408:	1b49      	subs	r1, r1, r5
 800040a:	b292      	uxth	r2, r2
 800040c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000410:	fb07 1115 	mls	r1, r7, r5, r1
 8000414:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000418:	fb05 f10e 	mul.w	r1, r5, lr
 800041c:	4291      	cmp	r1, r2
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x282>
 8000420:	eb1c 0202 	adds.w	r2, ip, r2
 8000424:	f105 38ff 	add.w	r8, r5, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2a8>
 800042a:	4291      	cmp	r1, r2
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2a8>
 800042e:	3d02      	subs	r5, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a52      	subs	r2, r2, r1
 8000434:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0xfc>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e708      	b.n	8000252 <__udivmoddi4+0xa2>
 8000440:	4639      	mov	r1, r7
 8000442:	e6e6      	b.n	8000212 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e6fb      	b.n	8000240 <__udivmoddi4+0x90>
 8000448:	4548      	cmp	r0, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000454:	3b01      	subs	r3, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000458:	4645      	mov	r5, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x282>
 800045c:	462b      	mov	r3, r5
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1da>
 8000460:	4640      	mov	r0, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x258>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x124>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xd8>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x14e>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <LL_AHB1_GRP1_EnableClock>:
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	648b      	str	r3, [r1, #72]	; 0x48
 80004c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <LL_AHB2_GRP1_EnableClock>:
 80004da:	b480      	push	{r7}
 80004dc:	b085      	sub	sp, #20
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4313      	orrs	r3, r2
 80004f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4013      	ands	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <main>:
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
 8000510:	f000 fc5e 	bl	8000dd0 <HAL_Init>
 8000514:	f000 f840 	bl	8000598 <SystemClock_Config>
 8000518:	f000 f8b4 	bl	8000684 <PeriphCommonClock_Config>
 800051c:	f000 f964 	bl	80007e8 <MX_GPIO_Init>
 8000520:	f000 f948 	bl	80007b4 <MX_DMA_Init>
 8000524:	f000 f8d2 	bl	80006cc <MX_USART1_UART_Init>
 8000528:	f000 f91c 	bl	8000764 <MX_USB_PCD_Init>
 800052c:	f000 f8c7 	bl	80006be <MX_MEMORYMAP_Init>
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <main+0x7c>)
 8000532:	2203      	movs	r2, #3
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0x7c>)
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <main+0x80>)
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <main+0x7c>)
 800053e:	2201      	movs	r2, #1
 8000540:	721a      	strb	r2, [r3, #8]
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <main+0x7c>)
 8000544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000548:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <main+0x7c>)
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <main+0x84>)
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <main+0x7c>)
 8000554:	2208      	movs	r2, #8
 8000556:	821a      	strh	r2, [r3, #16]
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x7c>)
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <main+0x88>)
 800055c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <main+0x7c>)
 8000562:	2232      	movs	r2, #50	; 0x32
 8000564:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <main+0x7c>)
 800056a:	2204      	movs	r2, #4
 800056c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x7c>)
 8000572:	f006 fc0b 	bl	8006d8c <ModbusInit>
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <main+0x7c>)
 8000578:	f006 fcaa 	bl	8006ed0 <ModbusStart>
 800057c:	f008 f8cc 	bl	8008718 <osKernelInitialize>
 8000580:	f008 f8ee 	bl	8008760 <osKernelStart>
 8000584:	e7fe      	b.n	8000584 <main+0x78>
 8000586:	bf00      	nop
 8000588:	200004e0 	.word	0x200004e0
 800058c:	20000098 	.word	0x20000098
 8000590:	48000800 	.word	0x48000800
 8000594:	20000008 	.word	0x20000008

08000598 <SystemClock_Config>:
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2248      	movs	r2, #72	; 0x48
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00b fc10 	bl	800bdcc <memset>
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	619a      	str	r2, [r3, #24]
 80005be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	f023 0303 	bic.w	r3, r3, #3
 80005d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	60d3      	str	r3, [r2, #12]
 80005e2:	f001 faeb 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff ff48 	bl	800047c <LL_RCC_LSE_SetDriveCapability>
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xe8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xe8>)
 80005f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xe8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	2327      	movs	r3, #39	; 0x27
 800060a:	623b      	str	r3, [r7, #32]
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
 8000612:	2301      	movs	r3, #1
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
 8000616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800061c:	2301      	movs	r3, #1
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
 8000624:	2300      	movs	r3, #0
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
 8000628:	2360      	movs	r3, #96	; 0x60
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
 800062c:	2300      	movs	r3, #0
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fe61 	bl	80022fc <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xac>
 8000640:	f000 f93e 	bl	80008c0 <Error_Handler>
 8000644:	236f      	movs	r3, #111	; 0x6f
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	2302      	movs	r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2101      	movs	r1, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f002 f9bd 	bl	80029e4 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xdc>
 8000670:	f000 f926 	bl	80008c0 <Error_Handler>
 8000674:	f002 ffaa 	bl	80035cc <HAL_RCCEx_EnableMSIPLLMode>
 8000678:	bf00      	nop
 800067a:	3768      	adds	r7, #104	; 0x68
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	58000400 	.word	0x58000400

08000684 <PeriphCommonClock_Config>:
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
 800068a:	463b      	mov	r3, r7
 800068c:	2250      	movs	r2, #80	; 0x50
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00b fb9b 	bl	800bdcc <memset>
 8000696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
 80006a0:	2300      	movs	r3, #0
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006a4:	463b      	mov	r3, r7
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fe1a 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <PeriphCommonClock_Config+0x32>
 80006b2:	f000 f905 	bl	80008c0 <Error_Handler>
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <MX_MEMORYMAP_Init>:
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <MX_USART1_UART_Init>:
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006d2:	4a23      	ldr	r2, [pc, #140]	; (8000760 <MX_USART1_UART_Init+0x94>)
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_USART1_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART1_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART1_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
 8000714:	4811      	ldr	r0, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x90>)
 8000716:	f003 faeb 	bl	8003cf0 <HAL_UART_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USART1_UART_Init+0x58>
 8000720:	f000 f8ce 	bl	80008c0 <Error_Handler>
 8000724:	2100      	movs	r1, #0
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_USART1_UART_Init+0x90>)
 8000728:	f006 f90d 	bl	8006946 <HAL_UARTEx_SetTxFifoThreshold>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x6a>
 8000732:	f000 f8c5 	bl	80008c0 <Error_Handler>
 8000736:	2100      	movs	r1, #0
 8000738:	4808      	ldr	r0, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x90>)
 800073a:	f006 f942 	bl	80069c2 <HAL_UARTEx_SetRxFifoThreshold>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART1_UART_Init+0x7c>
 8000744:	f000 f8bc 	bl	80008c0 <Error_Handler>
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_USART1_UART_Init+0x90>)
 800074a:	f006 f8c3 	bl	80068d4 <HAL_UARTEx_DisableFifoMode>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x8c>
 8000754:	f000 f8b4 	bl	80008c0 <Error_Handler>
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000098 	.word	0x20000098
 8000760:	40013800 	.word	0x40013800

08000764 <MX_USB_PCD_Init>:
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USB_PCD_Init+0x48>)
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <MX_USB_PCD_Init+0x4c>)
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000770:	2208      	movs	r2, #8
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000776:	2202      	movs	r2, #2
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USB_PCD_Init+0x48>)
 800077c:	2202      	movs	r2, #2
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_USB_PCD_Init+0x48>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_USB_PCD_Init+0x48>)
 800079a:	f001 f90b 	bl	80019b4 <HAL_PCD_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USB_PCD_Init+0x44>
 80007a4:	f000 f88c 	bl	80008c0 <Error_Handler>
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200001ec 	.word	0x200001ec
 80007b0:	40006800 	.word	0x40006800

080007b4 <MX_DMA_Init>:
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	2004      	movs	r0, #4
 80007ba:	f7ff fe75 	bl	80004a8 <LL_AHB1_GRP1_EnableClock>
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fe72 	bl	80004a8 <LL_AHB1_GRP1_EnableClock>
 80007c4:	2200      	movs	r2, #0
 80007c6:	2105      	movs	r1, #5
 80007c8:	200b      	movs	r0, #11
 80007ca:	f000 fc05 	bl	8000fd8 <HAL_NVIC_SetPriority>
 80007ce:	200b      	movs	r0, #11
 80007d0:	f000 fc1c 	bl	800100c <HAL_NVIC_EnableIRQ>
 80007d4:	2200      	movs	r2, #0
 80007d6:	2105      	movs	r1, #5
 80007d8:	200c      	movs	r0, #12
 80007da:	f000 fbfd 	bl	8000fd8 <HAL_NVIC_SetPriority>
 80007de:	200c      	movs	r0, #12
 80007e0:	f000 fc14 	bl	800100c <HAL_NVIC_EnableIRQ>
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <MX_GPIO_Init>:
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	2004      	movs	r0, #4
 80007fe:	f7ff fe6c 	bl	80004da <LL_AHB2_GRP1_EnableClock>
 8000802:	2002      	movs	r0, #2
 8000804:	f7ff fe69 	bl	80004da <LL_AHB2_GRP1_EnableClock>
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fe66 	bl	80004da <LL_AHB2_GRP1_EnableClock>
 800080e:	2008      	movs	r0, #8
 8000810:	f7ff fe63 	bl	80004da <LL_AHB2_GRP1_EnableClock>
 8000814:	2200      	movs	r2, #0
 8000816:	2108      	movs	r1, #8
 8000818:	481d      	ldr	r0, [pc, #116]	; (8000890 <MX_GPIO_Init+0xa8>)
 800081a:	f001 f8b3 	bl	8001984 <HAL_GPIO_WritePin>
 800081e:	2200      	movs	r2, #0
 8000820:	2123      	movs	r1, #35	; 0x23
 8000822:	481c      	ldr	r0, [pc, #112]	; (8000894 <MX_GPIO_Init+0xac>)
 8000824:	f001 f8ae 	bl	8001984 <HAL_GPIO_WritePin>
 8000828:	2308      	movs	r3, #8
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	2301      	movs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_GPIO_Init+0xa8>)
 800083e:	f000 ff31 	bl	80016a4 <HAL_GPIO_Init>
 8000842:	2310      	movs	r3, #16
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <MX_GPIO_Init+0xa8>)
 8000854:	f000 ff26 	bl	80016a4 <HAL_GPIO_Init>
 8000858:	2323      	movs	r3, #35	; 0x23
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	2301      	movs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <MX_GPIO_Init+0xac>)
 800086e:	f000 ff19 	bl	80016a4 <HAL_GPIO_Init>
 8000872:	2303      	movs	r3, #3
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0xb0>)
 8000884:	f000 ff0e 	bl	80016a4 <HAL_GPIO_Init>
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000800 	.word	0x48000800
 8000894:	48000400 	.word	0x48000400
 8000898:	48000c00 	.word	0x48000c00

0800089c <HAL_TIM_PeriodElapsedCallback>:
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x16>
 80008ae:	f000 faaf 	bl	8000e10 <HAL_IncTick>
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40014400 	.word	0x40014400

080008c0 <Error_Handler>:
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	b672      	cpsid	i
 80008c6:	bf00      	nop
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>

080008ca <LL_AHB2_GRP1_EnableClock>:
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4313      	orrs	r3, r2
 80008e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80008e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <LL_APB1_GRP1_EnableClock>:
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800090a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	658b      	str	r3, [r1, #88]	; 0x58
 8000914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000918:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LL_APB2_GRP1_EnableClock>:
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800093c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4313      	orrs	r3, r2
 8000944:	660b      	str	r3, [r1, #96]	; 0x60
 8000946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800094a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4013      	ands	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <HAL_MspInit>:
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
 8000964:	2200      	movs	r2, #0
 8000966:	210f      	movs	r1, #15
 8000968:	f06f 0001 	mvn.w	r0, #1
 800096c:	f000 fb34 	bl	8000fd8 <HAL_NVIC_SetPriority>
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_UART_MspInit>:
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	; 0x70
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2250      	movs	r2, #80	; 0x50
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f00b fa19 	bl	800bdcc <memset>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a43      	ldr	r2, [pc, #268]	; (8000aac <HAL_UART_MspInit+0x138>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d17f      	bne.n	8000aa4 <HAL_UART_MspInit+0x130>
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fc95 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0x4c>
 80009bc:	f7ff ff80 	bl	80008c0 <Error_Handler>
 80009c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009c4:	f7ff ffb3 	bl	800092e <LL_APB2_GRP1_EnableClock>
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff ff7e 	bl	80008ca <LL_AHB2_GRP1_EnableClock>
 80009ce:	23c0      	movs	r3, #192	; 0xc0
 80009d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009d2:	2302      	movs	r3, #2
 80009d4:	663b      	str	r3, [r7, #96]	; 0x60
 80009d6:	2301      	movs	r3, #1
 80009d8:	667b      	str	r3, [r7, #100]	; 0x64
 80009da:	2300      	movs	r3, #0
 80009dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80009de:	2307      	movs	r3, #7
 80009e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80009e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009e6:	4619      	mov	r1, r3
 80009e8:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <HAL_UART_MspInit+0x13c>)
 80009ea:	f000 fe5b 	bl	80016a4 <HAL_GPIO_Init>
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 80009f0:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <HAL_UART_MspInit+0x144>)
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 80009f6:	220e      	movs	r2, #14
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
 8000a24:	4823      	ldr	r0, [pc, #140]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a26:	f000 faff 	bl	8001028 <HAL_DMA_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0xc0>
 8000a30:	f7ff ff46 	bl	80008c0 <Error_Handler>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6293      	str	r3, [r2, #40]	; 0x28
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a44:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <HAL_UART_MspInit+0x14c>)
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a50:	2210      	movs	r2, #16
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
 8000a78:	4810      	ldr	r0, [pc, #64]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a7a:	f000 fad5 	bl	8001028 <HAL_DMA_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_UART_MspInit+0x114>
 8000a84:	f7ff ff1c 	bl	80008c0 <Error_Handler>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a8c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6293      	str	r3, [r2, #40]	; 0x28
 8000a94:	2200      	movs	r2, #0
 8000a96:	2105      	movs	r1, #5
 8000a98:	2024      	movs	r0, #36	; 0x24
 8000a9a:	f000 fa9d 	bl	8000fd8 <HAL_NVIC_SetPriority>
 8000a9e:	2024      	movs	r0, #36	; 0x24
 8000aa0:	f000 fab4 	bl	800100c <HAL_NVIC_EnableIRQ>
 8000aa4:	bf00      	nop
 8000aa6:	3770      	adds	r7, #112	; 0x70
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	48000400 	.word	0x48000400
 8000ab4:	2000012c 	.word	0x2000012c
 8000ab8:	40020008 	.word	0x40020008
 8000abc:	2000018c 	.word	0x2000018c
 8000ac0:	4002001c 	.word	0x4002001c

08000ac4 <HAL_PCD_MspInit>:
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09c      	sub	sp, #112	; 0x70
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2250      	movs	r2, #80	; 0x50
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b f971 	bl	800bdcc <memset>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1f      	ldr	r2, [pc, #124]	; (8000b6c <HAL_PCD_MspInit+0xa8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d136      	bne.n	8000b62 <HAL_PCD_MspInit+0x9e>
 8000af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	2318      	movs	r3, #24
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fbdd 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_PCD_MspInit+0x6c>
 8000b2c:	f7ff fec8 	bl	80008c0 <Error_Handler>
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff feca 	bl	80008ca <LL_AHB2_GRP1_EnableClock>
 8000b36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8000b40:	2300      	movs	r3, #0
 8000b42:	667b      	str	r3, [r7, #100]	; 0x64
 8000b44:	2300      	movs	r3, #0
 8000b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b48:	230a      	movs	r3, #10
 8000b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f000 fda5 	bl	80016a4 <HAL_GPIO_Init>
 8000b5a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b5e:	f7ff fecd 	bl	80008fc <LL_APB1_GRP1_EnableClock>
 8000b62:	bf00      	nop
 8000b64:	3770      	adds	r7, #112	; 0x70
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40006800 	.word	0x40006800

08000b70 <LL_APB2_GRP1_EnableClock>:
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	660b      	str	r3, [r1, #96]	; 0x60
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <HAL_InitTick>:
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2019      	movs	r0, #25
 8000bba:	f000 fa0d 	bl	8000fd8 <HAL_NVIC_SetPriority>
 8000bbe:	2019      	movs	r0, #25
 8000bc0:	f000 fa24 	bl	800100c <HAL_NVIC_EnableIRQ>
 8000bc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bc8:	f7ff ffd2 	bl	8000b70 <LL_APB2_GRP1_EnableClock>
 8000bcc:	f107 0208 	add.w	r2, r7, #8
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f8f0 	bl	8002dbc <HAL_RCC_GetClockConfig>
 8000bdc:	f002 f8d8 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8000be0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_InitTick+0x8c>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_InitTick+0x90>)
 8000bf2:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <HAL_InitTick+0x94>)
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_InitTick+0x90>)
 8000bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_InitTick+0x90>)
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	6053      	str	r3, [r2, #4]
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_InitTick+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_InitTick+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <HAL_InitTick+0x90>)
 8000c12:	f002 fdf2 	bl	80037fa <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d104      	bne.n	8000c26 <HAL_InitTick+0x82>
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_InitTick+0x90>)
 8000c1e:	f002 fe4d 	bl	80038bc <HAL_TIM_Base_Start_IT>
 8000c22:	4603      	mov	r3, r0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x84>
 8000c26:	2301      	movs	r3, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000624 	.word	0x20000624
 8000c38:	40014400 	.word	0x40014400

08000c3c <NMI_Handler>:
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <DebugMon_Handler>:
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DMA1_Channel1_IRQHandler>:
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA1_Channel1_IRQHandler+0x10>)
 8000c6e:	f000 fbbc 	bl	80013ea <HAL_DMA_IRQHandler>
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000012c 	.word	0x2000012c

08000c7c <DMA1_Channel2_IRQHandler>:
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA1_Channel2_IRQHandler+0x10>)
 8000c82:	f000 fbb2 	bl	80013ea <HAL_DMA_IRQHandler>
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000018c 	.word	0x2000018c

08000c90 <TIM1_UP_TIM16_IRQHandler>:
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c96:	f002 fe5f 	bl	8003958 <HAL_TIM_IRQHandler>
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000624 	.word	0x20000624

08000ca4 <USART1_IRQHandler>:
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <USART1_IRQHandler+0x10>)
 8000caa:	f003 fb35 	bl	8004318 <HAL_UART_IRQHandler>
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000098 	.word	0x20000098

08000cb8 <SystemInit>:
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <SystemInit+0x98>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <SystemInit+0x98>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <SystemInit+0x9c>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
 8000cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d02:	f023 0305 	bic.w	r3, r3, #5
 8000d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d16:	f023 0301 	bic.w	r3, r3, #1
 8000d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8000d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <SystemInit+0xa0>)
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <SystemInit+0xa0>)
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00
 8000d54:	faf6fefb 	.word	0xfaf6fefb
 8000d58:	22041000 	.word	0x22041000

08000d5c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d5c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d60:	3304      	adds	r3, #4

08000d62 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d62:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d64:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d66:	d3f9      	bcc.n	8000d5c <CopyDataInit>
  bx lr
 8000d68:	4770      	bx	lr

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d6a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d6c:	3004      	adds	r0, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d6e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>
  bx lr
 8000d72:	4770      	bx	lr

08000d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d78:	f7ff ff9e 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopForever+0x6>)
 8000d7e:	490c      	ldr	r1, [pc, #48]	; (8000db0 <LoopForever+0xa>)
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <LoopForever+0xe>)
 8000d82:	2300      	movs	r3, #0
 8000d84:	f7ff ffed 	bl	8000d62 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LoopForever+0x12>)
 8000d8a:	490c      	ldr	r1, [pc, #48]	; (8000dbc <LoopForever+0x16>)
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <LoopForever+0x1a>)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f7ff ffe7 	bl	8000d62 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <LoopForever+0x1e>)
 8000d96:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <LoopForever+0x22>)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f7ff ffe8 	bl	8000d6e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d9e:	f00b f81d 	bl	800bddc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000da2:	f7ff fbb3 	bl	800050c <main>

08000da6 <LoopForever>:

LoopForever:
  b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   r0, =_estack
 8000da8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000dac:	20000008 	.word	0x20000008
 8000db0:	2000007c 	.word	0x2000007c
 8000db4:	0800c04c 	.word	0x0800c04c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000db8:	20030000 	.word	0x20030000
 8000dbc:	20030000 	.word	0x20030000
 8000dc0:	0800c0c0 	.word	0x0800c0c0
  INIT_BSS _sbss, _ebss
 8000dc4:	2000007c 	.word	0x2000007c
 8000dc8:	20001fd0 	.word	0x20001fd0

08000dcc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_IRQHandler>
	...

08000dd0 <HAL_Init>:
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_Init+0x3c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <HAL_Init+0x3c>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	2003      	movs	r0, #3
 8000de8:	f000 f8eb 	bl	8000fc2 <HAL_NVIC_SetPriorityGrouping>
 8000dec:	200f      	movs	r0, #15
 8000dee:	f7ff fed9 	bl	8000ba4 <HAL_InitTick>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <HAL_Init+0x2e>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	e001      	b.n	8000e02 <HAL_Init+0x32>
 8000dfe:	f7ff fdaf 	bl	8000960 <HAL_MspInit>
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	58004000 	.word	0x58004000

08000e10 <HAL_IncTick>:
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000074 	.word	0x20000074
 8000e34:	20000670 	.word	0x20000670

08000e38 <HAL_GetTick>:
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000670 	.word	0x20000670

08000e50 <HAL_GetTickPrio>:
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTickPrio+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000070 	.word	0x20000070

08000e68 <__NVIC_SetPriorityGrouping>:
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_NVIC_SetPriorityGrouping>:
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff4c 	bl	8000e68 <__NVIC_SetPriorityGrouping>
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_SetPriority>:
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	f7ff ff63 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000fea:	6178      	str	r0, [r7, #20]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	6978      	ldr	r0, [r7, #20]
 8000ff2:	f7ff ffb3 	bl	8000f5c <NVIC_EncodePriority>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff82 	bl	8000f08 <__NVIC_SetPriority>
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_EnableIRQ>:
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff56 	bl	8000ecc <__NVIC_EnableIRQ>
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Init>:
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_DMA_Init+0x12>
 8001036:	2301      	movs	r3, #1
 8001038:	e08e      	b.n	8001158 <HAL_DMA_Init+0x130>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_DMA_Init+0x138>)
 8001042:	429a      	cmp	r2, r3
 8001044:	d80f      	bhi.n	8001066 <HAL_DMA_Init+0x3e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <HAL_DMA_Init+0x13c>)
 800104e:	4413      	add	r3, r2
 8001050:	4a45      	ldr	r2, [pc, #276]	; (8001168 <HAL_DMA_Init+0x140>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	009a      	lsls	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a42      	ldr	r2, [pc, #264]	; (800116c <HAL_DMA_Init+0x144>)
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
 8001064:	e00e      	b.n	8001084 <HAL_DMA_Init+0x5c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <HAL_DMA_Init+0x148>)
 800106e:	4413      	add	r3, r2
 8001070:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <HAL_DMA_Init+0x140>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	009a      	lsls	r2, r3, #2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a3c      	ldr	r2, [pc, #240]	; (8001174 <HAL_DMA_Init+0x14c>)
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800109a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fa80 	bl	80015dc <DMA_CalcDMAMUXChannelBaseAndMask>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010e4:	d102      	bne.n	80010ec <HAL_DMA_Init+0xc4>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d010      	beq.n	800112e <HAL_DMA_Init+0x106>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d80c      	bhi.n	800112e <HAL_DMA_Init+0x106>
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fa9f 	bl	8001658 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	e008      	b.n	8001140 <HAL_DMA_Init+0x118>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	659a      	str	r2, [r3, #88]	; 0x58
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001156:	2300      	movs	r3, #0
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020407 	.word	0x40020407
 8001164:	bffdfff8 	.word	0xbffdfff8
 8001168:	cccccccd 	.word	0xcccccccd
 800116c:	40020000 	.word	0x40020000
 8001170:	bffdfbf8 	.word	0xbffdfbf8
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_DMA_Start_IT>:
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_DMA_Start_IT+0x20>
 8001194:	2302      	movs	r3, #2
 8001196:	e066      	b.n	8001266 <HAL_DMA_Start_IT+0xee>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d155      	bne.n	8001258 <HAL_DMA_Start_IT+0xe0>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2202      	movs	r2, #2
 80011b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 f9c5 	bl	8001560 <DMA_SetConfig>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d008      	beq.n	80011f0 <HAL_DMA_Start_IT+0x78>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 020e 	orr.w	r2, r2, #14
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e00f      	b.n	8001210 <HAL_DMA_Start_IT+0x98>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0204 	bic.w	r2, r2, #4
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 020a 	orr.w	r2, r2, #10
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_DMA_Start_IT+0xb6>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_DMA_Start_IT+0xce>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e005      	b.n	8001264 <HAL_DMA_Start_IT+0xec>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001260:	2302      	movs	r3, #2
 8001262:	75fb      	strb	r3, [r7, #23]
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_Abort>:
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_DMA_Abort+0x12>
 800127c:	2301      	movs	r3, #1
 800127e:	e04f      	b.n	8001320 <HAL_DMA_Abort+0xb2>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d008      	beq.n	800129e <HAL_DMA_Abort+0x30>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	63da      	str	r2, [r3, #60]	; 0x3c
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800129a:	2301      	movs	r3, #1
 800129c:	e040      	b.n	8001320 <HAL_DMA_Abort+0xb2>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 020e 	bic.w	r2, r2, #14
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f003 021c 	and.w	r2, r3, #28
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2101      	movs	r1, #1
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00c      	beq.n	800130e <HAL_DMA_Abort+0xa0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800131e:	2300      	movs	r3, #0
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_DMA_Abort_IT>:
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d005      	beq.n	8001350 <HAL_DMA_Abort_IT+0x24>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c
 800134a:	2301      	movs	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e047      	b.n	80013e0 <HAL_DMA_Abort_IT+0xb4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 020e 	bic.w	r2, r2, #14
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	f003 021c 	and.w	r2, r3, #28
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2101      	movs	r1, #1
 800138e:	fa01 f202 	lsl.w	r2, r1, r2
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00c      	beq.n	80013c0 <HAL_DMA_Abort_IT+0x94>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_DMA_Abort_IT+0xb4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_DMA_IRQHandler>:
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 031c 	and.w	r3, r3, #28
 800140a:	2204      	movs	r2, #4
 800140c:	409a      	lsls	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d026      	beq.n	8001464 <HAL_DMA_IRQHandler+0x7a>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d021      	beq.n	8001464 <HAL_DMA_IRQHandler+0x7a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	2b00      	cmp	r3, #0
 800142c:	d107      	bne.n	800143e <HAL_DMA_IRQHandler+0x54>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0204 	bic.w	r2, r2, #4
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 021c 	and.w	r2, r3, #28
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2104      	movs	r1, #4
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	2b00      	cmp	r3, #0
 8001458:	d071      	beq.n	800153e <HAL_DMA_IRQHandler+0x154>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
 8001462:	e06c      	b.n	800153e <HAL_DMA_IRQHandler+0x154>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	f003 031c 	and.w	r3, r3, #28
 800146c:	2202      	movs	r2, #2
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d02e      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xec>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d029      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xec>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10b      	bne.n	80014a8 <HAL_DMA_IRQHandler+0xbe>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 020a 	bic.w	r2, r2, #10
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f003 021c 	and.w	r2, r3, #28
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2102      	movs	r1, #2
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d038      	beq.n	800153e <HAL_DMA_IRQHandler+0x154>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
 80014d4:	e033      	b.n	800153e <HAL_DMA_IRQHandler+0x154>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f003 031c 	and.w	r3, r3, #28
 80014de:	2208      	movs	r2, #8
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d02a      	beq.n	8001540 <HAL_DMA_IRQHandler+0x156>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d025      	beq.n	8001540 <HAL_DMA_IRQHandler+0x156>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 020e 	bic.w	r2, r2, #14
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f003 021c 	and.w	r2, r3, #28
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	63da      	str	r2, [r3, #60]	; 0x3c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <HAL_DMA_IRQHandler+0x156>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_GetError>:
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DMA_SetConfig>:
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <DMA_SetConfig+0x2a>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 021c 	and.w	r2, r3, #28
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d108      	bne.n	80015c0 <DMA_SetConfig+0x60>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	e007      	b.n	80015d0 <DMA_SetConfig+0x70>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DMA_CalcDMAMUXChannelBaseAndMask>:
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d80a      	bhi.n	8001606 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015fc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6493      	str	r3, [r2, #72]	; 0x48
 8001604:	e007      	b.n	8001616 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001610:	4413      	add	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6493      	str	r3, [r2, #72]	; 0x48
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3b08      	subs	r3, #8
 800161e:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800162c:	64da      	str	r2, [r3, #76]	; 0x4c
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2201      	movs	r2, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	651a      	str	r2, [r3, #80]	; 0x50
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40020407 	.word	0x40020407
 800164c:	4002081c 	.word	0x4002081c
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	40020880 	.word	0x40020880

08001658 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800167c:	659a      	str	r2, [r3, #88]	; 0x58
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3b01      	subs	r3, #1
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2201      	movs	r2, #1
 8001688:	409a      	lsls	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	65da      	str	r2, [r3, #92]	; 0x5c
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	1000823f 	.word	0x1000823f
 80016a0:	40020940 	.word	0x40020940

080016a4 <HAL_GPIO_Init>:
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e14c      	b.n	800194e <HAL_GPIO_Init+0x2aa>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 813e 	beq.w	8001948 <HAL_GPIO_Init+0x2a4>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d005      	beq.n	80016e4 <HAL_GPIO_Init+0x40>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xa2>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	2201      	movs	r2, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 0201 	and.w	r2, r3, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b03      	cmp	r3, #3
 8001750:	d017      	beq.n	8001782 <HAL_GPIO_Init+0xde>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x132>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	6939      	ldr	r1, [r7, #16]
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8098 	beq.w	8001948 <HAL_GPIO_Init+0x2a4>
 8001818:	4a54      	ldr	r2, [pc, #336]	; (800196c <HAL_GPIO_Init+0x2c8>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001842:	d019      	beq.n	8001878 <HAL_GPIO_Init+0x1d4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a4a      	ldr	r2, [pc, #296]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d013      	beq.n	8001874 <HAL_GPIO_Init+0x1d0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a49      	ldr	r2, [pc, #292]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1cc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a48      	ldr	r2, [pc, #288]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1c8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_GPIO_Init+0x2d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1c4>
 8001864:	2304      	movs	r3, #4
 8001866:	e008      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 8001868:	2307      	movs	r3, #7
 800186a:	e006      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 800186c:	2303      	movs	r3, #3
 800186e:	e004      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 8001870:	2302      	movs	r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 8001878:	2300      	movs	r3, #0
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	f002 0203 	and.w	r2, r2, #3
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4093      	lsls	r3, r2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4938      	ldr	r1, [pc, #224]	; (800196c <HAL_GPIO_Init+0x2c8>)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001898:	4b39      	ldr	r3, [pc, #228]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x218>
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	4a30      	ldr	r2, [pc, #192]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x242>
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4a26      	ldr	r2, [pc, #152]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6053      	str	r3, [r2, #4]
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x26e>
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 800191c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x29c>
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	f47f aeab 	bne.w	80016b4 <HAL_GPIO_Init+0x10>
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40010000 	.word	0x40010000
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	48000c00 	.word	0x48000c00
 800197c:	48001000 	.word	0x48001000
 8001980:	58000800 	.word	0x58000800

08001984 <HAL_GPIO_WritePin>:
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_WritePin+0x24>
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_PCD_Init>:
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af06      	add	r7, sp, #24
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_PCD_Init+0x12>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0cb      	b.n	8001b5e <HAL_PCD_Init+0x1aa>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_PCD_Init+0x2c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff f872 	bl	8000ac4 <HAL_PCD_MspInit>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2203      	movs	r2, #3
 80019e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f005 f8c9 	bl	8006b84 <USB_DisableGlobalInt>
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	e040      	b.n	8001a7a <HAL_PCD_Init+0xc6>
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3301      	adds	r3, #1
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3303      	adds	r3, #3
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3338      	adds	r3, #56	; 0x38
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	333c      	adds	r3, #60	; 0x3c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3340      	adds	r3, #64	; 0x40
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	3301      	adds	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3b9      	bcc.n	80019f8 <HAL_PCD_Init+0x44>
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e044      	b.n	8001b14 <HAL_PCD_Init+0x160>
 8001a8a:	7bfa      	ldrb	r2, [r7, #15]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	3301      	adds	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d3b5      	bcc.n	8001a8a <HAL_PCD_Init+0xd6>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	687e      	ldr	r6, [r7, #4]
 8001b26:	466d      	mov	r5, sp
 8001b28:	f106 0410 	add.w	r4, r6, #16
 8001b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	602b      	str	r3, [r5, #0]
 8001b34:	1d33      	adds	r3, r6, #4
 8001b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f005 f83e 	bl	8006bba <USB_DevInit>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_PCD_Init+0x1a8>
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f805 	bl	8001b66 <HAL_PCDEx_ActivateLPM>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b66 <HAL_PCDEx_ActivateLPM>:
 8001b66:	b480      	push	{r7}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001bac:	2300      	movs	r3, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_PWR_EnableBkUpAccess>:
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	58000400 	.word	0x58000400

08001bdc <HAL_PWREx_GetVoltageRange>:
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	58000400 	.word	0x58000400

08001bf8 <LL_RCC_HSE_IsEnabledDiv2>:
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c0a:	d101      	bne.n	8001c10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c10:	2300      	movs	r3, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_HSE_Enable>:
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_HSE_Disable>:
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_HSE_IsReady>:
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c6a:	d101      	bne.n	8001c70 <LL_RCC_HSE_IsReady+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_RCC_HSE_IsReady+0x1a>
 8001c70:	2300      	movs	r3, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_HSI_Enable>:
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_HSI_Disable>:
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_RCC_HSI_IsReady>:
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d101      	bne.n	8001cd0 <LL_RCC_HSI_IsReady+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_RCC_HSI_IsReady+0x1a>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_RCC_HSI_SetCalibTrimming>:
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_RCC_HSI48_Enable>:
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_HSI48_Disable>:
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_HSI48_IsReady>:
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d101      	bne.n	8001d62 <LL_RCC_HSI48_IsReady+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_RCC_HSI48_IsReady+0x1a>
 8001d62:	2300      	movs	r3, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_RCC_LSE_Enable>:
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_LSE_Disable>:
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_RCC_LSE_EnableBypass>:
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_RCC_LSE_DisableBypass>:
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_RCC_LSE_IsReady>:
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d101      	bne.n	8001e0e <LL_RCC_LSE_IsReady+0x18>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <LL_RCC_LSE_IsReady+0x1a>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_LSI1_Enable>:
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_RCC_LSI1_Disable>:
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_LSI1_IsReady>:
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d101      	bne.n	8001e76 <LL_RCC_LSI1_IsReady+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_RCC_LSI1_IsReady+0x1a>
 8001e76:	2300      	movs	r3, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_RCC_LSI2_Enable>:
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_LSI2_Disable>:
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_LSI2_IsReady>:
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d101      	bne.n	8001ede <LL_RCC_LSI2_IsReady+0x18>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_RCC_LSI2_IsReady+0x1a>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_LSI2_SetTrimming>:
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_MSI_Enable>:
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_RCC_MSI_Disable>:
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_MSI_IsReady>:
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d101      	bne.n	8001f6a <LL_RCC_MSI_IsReady+0x16>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_RCC_MSI_IsReady+0x18>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_RCC_MSI_SetRange>:
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_MSI_GetRange>:
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2bb0      	cmp	r3, #176	; 0xb0
 8001fb4:	d901      	bls.n	8001fba <LL_RCC_MSI_GetRange+0x1c>
 8001fb6:	23b0      	movs	r3, #176	; 0xb0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_MSI_SetCalibTrimming>:
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_SetSysClkSource>:
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 0203 	bic.w	r2, r3, #3
 8002004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_RCC_GetSysClkSource>:
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_RCC_SetAHBPrescaler>:
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_C2_RCC_SetAHBPrescaler>:
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800206a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_SetAHB4Prescaler>:
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002096:	f023 020f 	bic.w	r2, r3, #15
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_RCC_SetAPB1Prescaler>:
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_RCC_SetAPB2Prescaler>:
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_GetAHBPrescaler>:
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_C2_RCC_GetAHBPrescaler>:
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_RCC_GetAHB4Prescaler>:
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RCC_GetAPB1Prescaler>:
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_RCC_GetAPB2Prescaler>:
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_RCC_PLL_Enable>:
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_RCC_PLL_Disable>:
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_RCC_PLL_IsReady>:
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d0:	d101      	bne.n	80021d6 <LL_RCC_PLL_IsReady+0x18>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_RCC_PLL_IsReady+0x1a>
 80021d6:	2300      	movs	r3, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_PLL_GetN>:
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_RCC_PLL_GetR>:
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_RCC_PLL_GetDivider>:
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_RCC_PLL_GetMainSource>:
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_RCC_IsActiveFlag_HPRE>:
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d101      	bne.n	800225c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800225c:	2300      	movs	r3, #0
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_RCC_IsActiveFlag_C2HPRE>:
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800227c:	d101      	bne.n	8002282 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002282:	2300      	movs	r3, #0
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_RCC_IsActiveFlag_SHDHPRE>:
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a2:	d101      	bne.n	80022a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80022a8:	2300      	movs	r3, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_RCC_IsActiveFlag_PPRE1>:
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022c6:	d101      	bne.n	80022cc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022cc:	2300      	movs	r3, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_RCC_IsActiveFlag_PPRE2>:
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022ea:	d101      	bne.n	80022f0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022f0:	2300      	movs	r3, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_RCC_OscConfig>:
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b08d      	sub	sp, #52	; 0x34
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
 800230a:	2301      	movs	r3, #1
 800230c:	e363      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 808d 	beq.w	8002436 <HAL_RCC_OscConfig+0x13a>
 800231c:	f7ff fe7d 	bl	800201a <LL_RCC_GetSysClkSource>
 8002320:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002322:	f7ff ff83 	bl	800222c <LL_RCC_PLL_GetMainSource>
 8002326:	62b8      	str	r0, [r7, #40]	; 0x28
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x3e>
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d147      	bne.n	80023c4 <HAL_RCC_OscConfig+0xc8>
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	2b01      	cmp	r3, #1
 8002338:	d144      	bne.n	80023c4 <HAL_RCC_OscConfig+0xc8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x4a>
 8002342:	2301      	movs	r3, #1
 8002344:	e347      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800234a:	f7ff fe28 	bl	8001f9e <LL_RCC_MSI_GetRange>
 800234e:	4603      	mov	r3, r0
 8002350:	429c      	cmp	r4, r3
 8002352:	d914      	bls.n	800237e <HAL_RCC_OscConfig+0x82>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd61 	bl	8002e20 <RCC_SetFlashLatencyFromMSIRange>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x6c>
 8002364:	2301      	movs	r3, #1
 8002366:	e336      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe02 	bl	8001f76 <LL_RCC_MSI_SetRange>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe26 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>
 800237c:	e013      	b.n	80023a6 <HAL_RCC_OscConfig+0xaa>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fdf7 	bl	8001f76 <LL_RCC_MSI_SetRange>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe1b 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fd42 	bl	8002e20 <RCC_SetFlashLatencyFromMSIRange>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0xaa>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e317      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80023a6:	f000 fcc9 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4aa4      	ldr	r2, [pc, #656]	; (8002640 <HAL_RCC_OscConfig+0x344>)
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4ba4      	ldr	r3, [pc, #656]	; (8002644 <HAL_RCC_OscConfig+0x348>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fbf5 	bl	8000ba4 <HAL_InitTick>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d039      	beq.n	8002434 <HAL_RCC_OscConfig+0x138>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e308      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01e      	beq.n	800240a <HAL_RCC_OscConfig+0x10e>
 80023cc:	f7ff fda4 	bl	8001f18 <LL_RCC_MSI_Enable>
 80023d0:	f7fe fd32 	bl	8000e38 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	; 0x24
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xee>
 80023d8:	f7fe fd2e 	bl	8000e38 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xee>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e2f5      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80023ea:	f7ff fdb3 	bl	8001f54 <LL_RCC_MSI_IsReady>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f1      	beq.n	80023d8 <HAL_RCC_OscConfig+0xdc>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fdbc 	bl	8001f76 <LL_RCC_MSI_SetRange>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fde0 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x13a>
 800240a:	f7ff fd94 	bl	8001f36 <LL_RCC_MSI_Disable>
 800240e:	f7fe fd13 	bl	8000e38 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x12c>
 8002416:	f7fe fd0f 	bl	8000e38 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x12c>
 8002424:	2303      	movs	r3, #3
 8002426:	e2d6      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002428:	f7ff fd94 	bl	8001f54 <LL_RCC_MSI_IsReady>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f1      	bne.n	8002416 <HAL_RCC_OscConfig+0x11a>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x13a>
 8002434:	bf00      	nop
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d047      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1d6>
 8002442:	f7ff fdea 	bl	800201a <LL_RCC_GetSysClkSource>
 8002446:	6238      	str	r0, [r7, #32]
 8002448:	f7ff fef0 	bl	800222c <LL_RCC_PLL_GetMainSource>
 800244c:	61f8      	str	r0, [r7, #28]
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x164>
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x170>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d105      	bne.n	800246c <HAL_RCC_OscConfig+0x170>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d134      	bne.n	80024d2 <HAL_RCC_OscConfig+0x1d6>
 8002468:	2301      	movs	r3, #1
 800246a:	e2b4      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x180>
 8002476:	f7ff fbd1 	bl	8001c1c <LL_RCC_HSE_Enable>
 800247a:	e001      	b.n	8002480 <HAL_RCC_OscConfig+0x184>
 800247c:	f7ff fbdd 	bl	8001c3a <LL_RCC_HSE_Disable>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d012      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
 8002488:	f7fe fcd6 	bl	8000e38 <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1a6>
 8002490:	f7fe fcd2 	bl	8000e38 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1a6>
 800249e:	2303      	movs	r3, #3
 80024a0:	e299      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80024a2:	f7ff fbd9 	bl	8001c58 <LL_RCC_HSE_IsReady>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f1      	beq.n	8002490 <HAL_RCC_OscConfig+0x194>
 80024ac:	e011      	b.n	80024d2 <HAL_RCC_OscConfig+0x1d6>
 80024ae:	f7fe fcc3 	bl	8000e38 <HAL_GetTick>
 80024b2:	6278      	str	r0, [r7, #36]	; 0x24
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x1cc>
 80024b6:	f7fe fcbf 	bl	8000e38 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x1cc>
 80024c4:	2303      	movs	r3, #3
 80024c6:	e286      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80024c8:	f7ff fbc6 	bl	8001c58 <LL_RCC_HSE_IsReady>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f1      	bne.n	80024b6 <HAL_RCC_OscConfig+0x1ba>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d04c      	beq.n	8002578 <HAL_RCC_OscConfig+0x27c>
 80024de:	f7ff fd9c 	bl	800201a <LL_RCC_GetSysClkSource>
 80024e2:	61b8      	str	r0, [r7, #24]
 80024e4:	f7ff fea2 	bl	800222c <LL_RCC_PLL_GetMainSource>
 80024e8:	6178      	str	r0, [r7, #20]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d10e      	bne.n	8002514 <HAL_RCC_OscConfig+0x218>
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x218>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x20c>
 8002504:	2301      	movs	r3, #1
 8002506:	e266      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fbe5 	bl	8001cdc <LL_RCC_HSI_SetCalibTrimming>
 8002512:	e031      	b.n	8002578 <HAL_RCC_OscConfig+0x27c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d019      	beq.n	8002550 <HAL_RCC_OscConfig+0x254>
 800251c:	f7ff fbae 	bl	8001c7c <LL_RCC_HSI_Enable>
 8002520:	f7fe fc8a 	bl	8000e38 <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	; 0x24
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x23e>
 8002528:	f7fe fc86 	bl	8000e38 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x23e>
 8002536:	2303      	movs	r3, #3
 8002538:	e24d      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 800253a:	f7ff fbbd 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f1      	beq.n	8002528 <HAL_RCC_OscConfig+0x22c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fbc7 	bl	8001cdc <LL_RCC_HSI_SetCalibTrimming>
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x27c>
 8002550:	f7ff fba3 	bl	8001c9a <LL_RCC_HSI_Disable>
 8002554:	f7fe fc70 	bl	8000e38 <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x272>
 800255c:	f7fe fc6c 	bl	8000e38 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x272>
 800256a:	2303      	movs	r3, #3
 800256c:	e233      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 800256e:	f7ff fba3 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f1      	bne.n	800255c <HAL_RCC_OscConfig+0x260>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x296>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a3 	beq.w	80026d8 <HAL_RCC_OscConfig+0x3dc>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d076      	beq.n	8002688 <HAL_RCC_OscConfig+0x38c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d046      	beq.n	8002634 <HAL_RCC_OscConfig+0x338>
 80025a6:	f7ff fc5a 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d113      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2dc>
 80025b0:	f7ff fc33 	bl	8001e1a <LL_RCC_LSI1_Enable>
 80025b4:	f7fe fc40 	bl	8000e38 <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x2d2>
 80025bc:	f7fe fc3c 	bl	8000e38 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x2d2>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e203      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80025ce:	f7ff fc46 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f1      	beq.n	80025bc <HAL_RCC_OscConfig+0x2c0>
 80025d8:	f7ff fc53 	bl	8001e82 <LL_RCC_LSI2_Enable>
 80025dc:	f7fe fc2c 	bl	8000e38 <HAL_GetTick>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x2fa>
 80025e4:	f7fe fc28 	bl	8000e38 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x2fa>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1ef      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80025f6:	f7ff fc66 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f1      	beq.n	80025e4 <HAL_RCC_OscConfig+0x2e8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fc70 	bl	8001eea <LL_RCC_LSI2_SetTrimming>
 800260a:	f7ff fc17 	bl	8001e3c <LL_RCC_LSI1_Disable>
 800260e:	f7fe fc13 	bl	8000e38 <HAL_GetTick>
 8002612:	6278      	str	r0, [r7, #36]	; 0x24
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x32c>
 8002616:	f7fe fc0f 	bl	8000e38 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x32c>
 8002624:	2303      	movs	r3, #3
 8002626:	e1d6      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002628:	f7ff fc19 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f1      	bne.n	8002616 <HAL_RCC_OscConfig+0x31a>
 8002632:	e051      	b.n	80026d8 <HAL_RCC_OscConfig+0x3dc>
 8002634:	f7ff fbf1 	bl	8001e1a <LL_RCC_LSI1_Enable>
 8002638:	f7fe fbfe 	bl	8000e38 <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	; 0x24
 800263e:	e00c      	b.n	800265a <HAL_RCC_OscConfig+0x35e>
 8002640:	2000006c 	.word	0x2000006c
 8002644:	20000070 	.word	0x20000070
 8002648:	f7fe fbf6 	bl	8000e38 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x35e>
 8002656:	2303      	movs	r3, #3
 8002658:	e1bd      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 800265a:	f7ff fc00 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f1      	beq.n	8002648 <HAL_RCC_OscConfig+0x34c>
 8002664:	f7ff fc1e 	bl	8001ea4 <LL_RCC_LSI2_Disable>
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x380>
 800266a:	f7fe fbe5 	bl	8000e38 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b03      	cmp	r3, #3
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x380>
 8002678:	2303      	movs	r3, #3
 800267a:	e1ac      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 800267c:	f7ff fc23 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f1      	bne.n	800266a <HAL_RCC_OscConfig+0x36e>
 8002686:	e027      	b.n	80026d8 <HAL_RCC_OscConfig+0x3dc>
 8002688:	f7ff fc0c 	bl	8001ea4 <LL_RCC_LSI2_Disable>
 800268c:	f7fe fbd4 	bl	8000e38 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3aa>
 8002694:	f7fe fbd0 	bl	8000e38 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3aa>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e197      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80026a6:	f7ff fc0e 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f1      	bne.n	8002694 <HAL_RCC_OscConfig+0x398>
 80026b0:	f7ff fbc4 	bl	8001e3c <LL_RCC_LSI1_Disable>
 80026b4:	f7fe fbc0 	bl	8000e38 <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3d2>
 80026bc:	f7fe fbbc 	bl	8000e38 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3d2>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e183      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80026ce:	f7ff fbc6 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f1      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d05b      	beq.n	800279c <HAL_RCC_OscConfig+0x4a0>
 80026e4:	4ba7      	ldr	r3, [pc, #668]	; (8002984 <HAL_RCC_OscConfig+0x688>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d114      	bne.n	800271a <HAL_RCC_OscConfig+0x41e>
 80026f0:	f7ff fa64 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>
 80026f4:	f7fe fba0 	bl	8000e38 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x412>
 80026fc:	f7fe fb9c 	bl	8000e38 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x412>
 800270a:	2303      	movs	r3, #3
 800270c:	e163      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 800270e:	4b9d      	ldr	r3, [pc, #628]	; (8002984 <HAL_RCC_OscConfig+0x688>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x400>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0x42c>
 8002722:	f7ff fb24 	bl	8001d6e <LL_RCC_LSE_Enable>
 8002726:	e00c      	b.n	8002742 <HAL_RCC_OscConfig+0x446>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d104      	bne.n	800273a <HAL_RCC_OscConfig+0x43e>
 8002730:	f7ff fb3f 	bl	8001db2 <LL_RCC_LSE_EnableBypass>
 8002734:	f7ff fb1b 	bl	8001d6e <LL_RCC_LSE_Enable>
 8002738:	e003      	b.n	8002742 <HAL_RCC_OscConfig+0x446>
 800273a:	f7ff fb29 	bl	8001d90 <LL_RCC_LSE_Disable>
 800273e:	f7ff fb49 	bl	8001dd4 <LL_RCC_LSE_DisableBypass>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d014      	beq.n	8002774 <HAL_RCC_OscConfig+0x478>
 800274a:	f7fe fb75 	bl	8000e38 <HAL_GetTick>
 800274e:	6278      	str	r0, [r7, #36]	; 0x24
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x46c>
 8002752:	f7fe fb71 	bl	8000e38 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x46c>
 8002764:	2303      	movs	r3, #3
 8002766:	e136      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002768:	f7ff fb45 	bl	8001df6 <LL_RCC_LSE_IsReady>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <HAL_RCC_OscConfig+0x456>
 8002772:	e013      	b.n	800279c <HAL_RCC_OscConfig+0x4a0>
 8002774:	f7fe fb60 	bl	8000e38 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	; 0x24
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x496>
 800277c:	f7fe fb5c 	bl	8000e38 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x496>
 800278e:	2303      	movs	r3, #3
 8002790:	e121      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002792:	f7ff fb30 	bl	8001df6 <LL_RCC_LSE_IsReady>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ef      	bne.n	800277c <HAL_RCC_OscConfig+0x480>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d02c      	beq.n	8002802 <HAL_RCC_OscConfig+0x506>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d014      	beq.n	80027da <HAL_RCC_OscConfig+0x4de>
 80027b0:	f7ff faa9 	bl	8001d06 <LL_RCC_HSI48_Enable>
 80027b4:	f7fe fb40 	bl	8000e38 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	; 0x24
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x4d2>
 80027bc:	f7fe fb3c 	bl	8000e38 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x4d2>
 80027ca:	2303      	movs	r3, #3
 80027cc:	e103      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80027ce:	f7ff fabc 	bl	8001d4a <LL_RCC_HSI48_IsReady>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f1      	beq.n	80027bc <HAL_RCC_OscConfig+0x4c0>
 80027d8:	e013      	b.n	8002802 <HAL_RCC_OscConfig+0x506>
 80027da:	f7ff faa5 	bl	8001d28 <LL_RCC_HSI48_Disable>
 80027de:	f7fe fb2b 	bl	8000e38 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x4fc>
 80027e6:	f7fe fb27 	bl	8000e38 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x4fc>
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0ee      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80027f8:	f7ff faa7 	bl	8001d4a <LL_RCC_HSI48_IsReady>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f1      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4ea>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80e4 	beq.w	80029d4 <HAL_RCC_OscConfig+0x6d8>
 800280c:	f7ff fc05 	bl	800201a <LL_RCC_GetSysClkSource>
 8002810:	6138      	str	r0, [r7, #16]
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	2b02      	cmp	r3, #2
 8002820:	f040 80b4 	bne.w	800298c <HAL_RCC_OscConfig+0x690>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0203 	and.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	429a      	cmp	r2, r3
 8002830:	d123      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	429a      	cmp	r2, r3
 800283e:	d11c      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	429a      	cmp	r2, r3
 800284e:	d114      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	429a      	cmp	r2, r3
 800285c:	d10d      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	429a      	cmp	r2, r3
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	429a      	cmp	r2, r3
 8002878:	d05d      	beq.n	8002936 <HAL_RCC_OscConfig+0x63a>
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d058      	beq.n	8002932 <HAL_RCC_OscConfig+0x636>
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x596>
 800288e:	2301      	movs	r3, #1
 8002890:	e0a1      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002892:	f7ff fc85 	bl	80021a0 <LL_RCC_PLL_Disable>
 8002896:	f7fe facf 	bl	8000e38 <HAL_GetTick>
 800289a:	6278      	str	r0, [r7, #36]	; 0x24
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x5b4>
 800289e:	f7fe facb 	bl	8000e38 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x5b4>
 80028ac:	2303      	movs	r3, #3
 80028ae:	e092      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ef      	bne.n	800289e <HAL_RCC_OscConfig+0x5a2>
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4b30      	ldr	r3, [pc, #192]	; (8002988 <HAL_RCC_OscConfig+0x68c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d6:	0212      	lsls	r2, r2, #8
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028de:	4311      	orrs	r1, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028ea:	430a      	orrs	r2, r1
 80028ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
 80028f4:	f7ff fc45 	bl	8002182 <LL_RCC_PLL_Enable>
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	60d3      	str	r3, [r2, #12]
 8002908:	f7fe fa96 	bl	8000e38 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x626>
 8002910:	f7fe fa92 	bl	8000e38 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x626>
 800291e:	2303      	movs	r3, #3
 8002920:	e059      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <HAL_RCC_OscConfig+0x614>
 8002930:	e050      	b.n	80029d4 <HAL_RCC_OscConfig+0x6d8>
 8002932:	2301      	movs	r3, #1
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d147      	bne.n	80029d4 <HAL_RCC_OscConfig+0x6d8>
 8002944:	f7ff fc1d 	bl	8002182 <LL_RCC_PLL_Enable>
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	60d3      	str	r3, [r2, #12]
 8002958:	f7fe fa6e 	bl	8000e38 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x676>
 8002960:	f7fe fa6a 	bl	8000e38 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x676>
 800296e:	2303      	movs	r3, #3
 8002970:	e031      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ef      	beq.n	8002960 <HAL_RCC_OscConfig+0x664>
 8002980:	e028      	b.n	80029d4 <HAL_RCC_OscConfig+0x6d8>
 8002982:	bf00      	nop
 8002984:	58000400 	.word	0x58000400
 8002988:	11c1808c 	.word	0x11c1808c
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d01e      	beq.n	80029d0 <HAL_RCC_OscConfig+0x6d4>
 8002992:	f7ff fc05 	bl	80021a0 <LL_RCC_PLL_Disable>
 8002996:	f7fe fa4f 	bl	8000e38 <HAL_GetTick>
 800299a:	6278      	str	r0, [r7, #36]	; 0x24
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x6b4>
 800299e:	f7fe fa4b 	bl	8000e38 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x6b4>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e012      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ef      	bne.n	800299e <HAL_RCC_OscConfig+0x6a2>
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_OscConfig+0x6e4>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	60cb      	str	r3, [r1, #12]
 80029ce:	e001      	b.n	80029d4 <HAL_RCC_OscConfig+0x6d8>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
 80029d4:	2300      	movs	r3, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	3734      	adds	r7, #52	; 0x34
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	eefefffc 	.word	0xeefefffc

080029e4 <HAL_RCC_ClockConfig>:
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e12d      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 80029f8:	4b98      	ldr	r3, [pc, #608]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d91b      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x5a>
 8002a06:	4b95      	ldr	r3, [pc, #596]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	4993      	ldr	r1, [pc, #588]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
 8002a16:	f7fe fa0f 	bl	8000e38 <HAL_GetTick>
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_ClockConfig+0x4c>
 8002a1e:	f7fe fa0b 	bl	8000e38 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x4c>
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e111      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002a30:	4b8a      	ldr	r3, [pc, #552]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d1ef      	bne.n	8002a1e <HAL_RCC_ClockConfig+0x3a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x94>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff faef 	bl	8002032 <LL_RCC_SetAHBPrescaler>
 8002a54:	f7fe f9f0 	bl	8000e38 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_ClockConfig+0x8a>
 8002a5c:	f7fe f9ec 	bl	8000e38 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x8a>
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0f2      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002a6e:	f7ff fbe9 	bl	8002244 <LL_RCC_IsActiveFlag_HPRE>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f1      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x78>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d016      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fae6 	bl	800205a <LL_C2_RCC_SetAHBPrescaler>
 8002a8e:	f7fe f9d3 	bl	8000e38 <HAL_GetTick>
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_ClockConfig+0xc4>
 8002a96:	f7fe f9cf 	bl	8000e38 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0xc4>
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0d5      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002aa8:	f7ff fbde 	bl	8002268 <LL_RCC_IsActiveFlag_C2HPRE>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f1      	beq.n	8002a96 <HAL_RCC_ClockConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d016      	beq.n	8002aec <HAL_RCC_ClockConfig+0x108>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fadf 	bl	8002086 <LL_RCC_SetAHB4Prescaler>
 8002ac8:	f7fe f9b6 	bl	8000e38 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_ClockConfig+0xfe>
 8002ad0:	f7fe f9b2 	bl	8000e38 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0xfe>
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0b8      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002ae2:	f7ff fbd4 	bl	800228e <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f1      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0xec>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d016      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x142>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fad9 	bl	80020b4 <LL_RCC_SetAPB1Prescaler>
 8002b02:	f7fe f999 	bl	8000e38 <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_ClockConfig+0x138>
 8002b0a:	f7fe f995 	bl	8000e38 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x138>
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e09b      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002b1c:	f7ff fbca 	bl	80022b4 <LL_RCC_IsActiveFlag_PPRE1>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f1      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x126>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d017      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x17e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff facf 	bl	80020dc <LL_RCC_SetAPB2Prescaler>
 8002b3e:	f7fe f97b 	bl	8000e38 <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_ClockConfig+0x174>
 8002b46:	f7fe f977 	bl	8000e38 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x174>
 8002b54:	2303      	movs	r3, #3
 8002b56:	e07d      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002b58:	f7ff fbbe 	bl	80022d8 <LL_RCC_IsActiveFlag_PPRE2>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f1      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x162>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d043      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x212>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x1a0>
 8002b76:	f7ff f86f 	bl	8001c58 <LL_RCC_HSE_IsReady>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11e      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1da>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e067      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
 8002b8c:	f7ff fb17 	bl	80021be <LL_RCC_PLL_IsReady>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1da>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e05c      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1cc>
 8002ba2:	f7ff f9d7 	bl	8001f54 <LL_RCC_MSI_IsReady>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d108      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1da>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e051      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002bb0:	f7ff f882 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1da>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e04a      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fa15 	bl	8001ff2 <LL_RCC_SetSysClkSource>
 8002bc8:	f7fe f936 	bl	8000e38 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x202>
 8002bd0:	f7fe f932 	bl	8000e38 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x202>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e036      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002be6:	f7ff fa18 	bl	800201a <LL_RCC_GetSysClkSource>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d1ec      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x1ec>
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d21b      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x258>
 8002c04:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 0207 	bic.w	r2, r3, #7
 8002c0c:	4913      	ldr	r1, [pc, #76]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]
 8002c14:	f7fe f910 	bl	8000e38 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_ClockConfig+0x24a>
 8002c1c:	f7fe f90c 	bl	8000e38 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x24a>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e012      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1ef      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x238>
 8002c3c:	f000 f87e 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_RCC_ClockConfig+0x27c>)
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	f7fe f903 	bl	8000e50 <HAL_GetTickPrio>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd ffa9 	bl	8000ba4 <HAL_InitTick>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	58004000 	.word	0x58004000
 8002c60:	2000006c 	.word	0x2000006c

08002c64 <HAL_RCC_GetSysClockFreq>:
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	f7ff f9d6 	bl	800201a <LL_RCC_GetSysClkSource>
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x28>
 8002c76:	f7ff f992 	bl	8001f9e <LL_RCC_MSI_GetRange>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	4a2b      	ldr	r2, [pc, #172]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e04b      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xc0>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x34>
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e045      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xc0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x50>
 8002c9e:	f7fe ffab 	bl	8001bf8 <LL_RCC_HSE_IsEnabledDiv2>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0x4a>
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e03a      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xc0>
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e037      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xc0>
 8002cb4:	f7ff faba 	bl	800222c <LL_RCC_PLL_GetMainSource>
 8002cb8:	6038      	str	r0, [r7, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x64>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x6a>
 8002cc6:	e00d      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x80>
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	e015      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x96>
 8002cce:	f7fe ff93 	bl	8001bf8 <LL_RCC_HSE_IsEnabledDiv2>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d102      	bne.n	8002cde <HAL_RCC_GetSysClockFreq+0x7a>
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	e00d      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x96>
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x96>
 8002ce4:	f7ff f95b 	bl	8001f9e <LL_RCC_MSI_GetRange>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	bf00      	nop
 8002cfa:	f7ff fa72 	bl	80021e2 <LL_RCC_PLL_GetN>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	fb03 f402 	mul.w	r4, r3, r2
 8002d06:	f7ff fa85 	bl	8002214 <LL_RCC_PLL_GetDivider>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	3301      	adds	r3, #1
 8002d10:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d14:	f7ff fa72 	bl	80021fc <LL_RCC_PLL_GetR>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	0f5b      	lsrs	r3, r3, #29
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	0800bf5c 	.word	0x0800bf5c
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	01e84800 	.word	0x01e84800

08002d3c <HAL_RCC_GetHCLKFreq>:
 8002d3c:	b598      	push	{r3, r4, r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	f7ff ff90 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002d44:	4604      	mov	r4, r0
 8002d46:	f7ff f9dd 	bl	8002104 <LL_RCC_GetAHBPrescaler>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	4a03      	ldr	r2, [pc, #12]	; (8002d60 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd98      	pop	{r3, r4, r7, pc}
 8002d60:	0800befc 	.word	0x0800befc

08002d64 <HAL_RCC_GetPCLK1Freq>:
 8002d64:	b598      	push	{r3, r4, r7, lr}
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	f7ff ffe8 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	f7ff f9f0 	bl	8002152 <LL_RCC_GetAPB1Prescaler>
 8002d72:	4603      	mov	r3, r0
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	fa24 f303 	lsr.w	r3, r4, r3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	bd98      	pop	{r3, r4, r7, pc}
 8002d8c:	0800bf3c 	.word	0x0800bf3c

08002d90 <HAL_RCC_GetPCLK2Freq>:
 8002d90:	b598      	push	{r3, r4, r7, lr}
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	f7ff ffd2 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d98:	4604      	mov	r4, r0
 8002d9a:	f7ff f9e6 	bl	800216a <LL_RCC_GetAPB2Prescaler>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	0adb      	lsrs	r3, r3, #11
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa24 f303 	lsr.w	r3, r4, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd98      	pop	{r3, r4, r7, pc}
 8002db8:	0800bf3c 	.word	0x0800bf3c

08002dbc <HAL_RCC_GetClockConfig>:
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	226f      	movs	r2, #111	; 0x6f
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	f7ff f925 	bl	800201a <LL_RCC_GetSysClkSource>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	f7ff f995 	bl	8002104 <LL_RCC_GetAHBPrescaler>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	f7ff f9b7 	bl	8002152 <LL_RCC_GetAPB1Prescaler>
 8002de4:	4602      	mov	r2, r0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	f7ff f9be 	bl	800216a <LL_RCC_GetAPB2Prescaler>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]
 8002df4:	f7ff f992 	bl	800211c <LL_C2_RCC_GetAHBPrescaler>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	f7ff f99a 	bl	8002136 <LL_RCC_GetAHB4Prescaler>
 8002e02:	4602      	mov	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <HAL_RCC_GetClockConfig+0x60>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0207 	and.w	r2, r3, #7
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	58004000 	.word	0x58004000

08002e20 <RCC_SetFlashLatencyFromMSIRange>:
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2bb0      	cmp	r3, #176	; 0xb0
 8002e2c:	d903      	bls.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0x16>
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e007      	b.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0x26>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	f7ff f976 	bl	8002136 <LL_RCC_GetAHB4Prescaler>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	0c9c      	lsrs	r4, r3, #18
 8002e6a:	f7fe feb7 	bl	8001bdc <HAL_PWREx_GetVoltageRange>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4619      	mov	r1, r3
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 f80c 	bl	8002e90 <RCC_SetFlashLatency>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	0800bf5c 	.word	0x0800bf5c
 8002e88:	0800befc 	.word	0x0800befc
 8002e8c:	431bde83 	.word	0x431bde83

08002e90 <RCC_SetFlashLatency>:
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b093      	sub	sp, #76	; 0x4c
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <RCC_SetFlashLatency+0xe8>)
 8002e9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ea6:	4a35      	ldr	r2, [pc, #212]	; (8002f7c <RCC_SetFlashLatency+0xec>)
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002eb2:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <RCC_SetFlashLatency+0xf0>)
 8002eb4:	f107 040c 	add.w	r4, r7, #12
 8002eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec8:	d11a      	bne.n	8002f00 <RCC_SetFlashLatency+0x70>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ece:	e013      	b.n	8002ef8 <RCC_SetFlashLatency+0x68>
 8002ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	3348      	adds	r3, #72	; 0x48
 8002ed6:	443b      	add	r3, r7
 8002ed8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d807      	bhi.n	8002ef2 <RCC_SetFlashLatency+0x62>
 8002ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	3348      	adds	r3, #72	; 0x48
 8002ee8:	443b      	add	r3, r7
 8002eea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef0:	e020      	b.n	8002f34 <RCC_SetFlashLatency+0xa4>
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d9e8      	bls.n	8002ed0 <RCC_SetFlashLatency+0x40>
 8002efe:	e019      	b.n	8002f34 <RCC_SetFlashLatency+0xa4>
 8002f00:	2300      	movs	r3, #0
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f04:	e013      	b.n	8002f2e <RCC_SetFlashLatency+0x9e>
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	3348      	adds	r3, #72	; 0x48
 8002f0c:	443b      	add	r3, r7
 8002f0e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d807      	bhi.n	8002f28 <RCC_SetFlashLatency+0x98>
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3348      	adds	r3, #72	; 0x48
 8002f1e:	443b      	add	r3, r7
 8002f20:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f24:	647b      	str	r3, [r7, #68]	; 0x44
 8002f26:	e005      	b.n	8002f34 <RCC_SetFlashLatency+0xa4>
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d9e8      	bls.n	8002f06 <RCC_SetFlashLatency+0x76>
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <RCC_SetFlashLatency+0xf4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 0207 	bic.w	r2, r3, #7
 8002f3c:	4911      	ldr	r1, [pc, #68]	; (8002f84 <RCC_SetFlashLatency+0xf4>)
 8002f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
 8002f44:	f7fd ff78 	bl	8000e38 <HAL_GetTick>
 8002f48:	63b8      	str	r0, [r7, #56]	; 0x38
 8002f4a:	e008      	b.n	8002f5e <RCC_SetFlashLatency+0xce>
 8002f4c:	f7fd ff74 	bl	8000e38 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <RCC_SetFlashLatency+0xce>
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e007      	b.n	8002f6e <RCC_SetFlashLatency+0xde>
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <RCC_SetFlashLatency+0xf4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1ef      	bne.n	8002f4c <RCC_SetFlashLatency+0xbc>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	374c      	adds	r7, #76	; 0x4c
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	bf00      	nop
 8002f78:	0800be58 	.word	0x0800be58
 8002f7c:	0800be68 	.word	0x0800be68
 8002f80:	0800be74 	.word	0x0800be74
 8002f84:	58004000 	.word	0x58004000

08002f88 <LL_RCC_LSE_IsEnabled>:
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <LL_RCC_LSE_IsEnabled+0x18>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_RCC_LSE_IsReady>:
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d101      	bne.n	8002fc4 <LL_RCC_LSE_IsReady+0x18>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <LL_RCC_LSE_IsReady+0x1a>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_RCC_MSI_EnablePLLMode>:
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_SetRFWKPClockSource>:
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_SetSMPSClockSource>:
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f023 0203 	bic.w	r2, r3, #3
 800302c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4313      	orrs	r3, r2
 8003034:	624b      	str	r3, [r1, #36]	; 0x24
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_RCC_SetSMPSPrescaler>:
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	624b      	str	r3, [r1, #36]	; 0x24
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_RCC_SetUSARTClockSource>:
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_RCC_SetLPUARTClockSource>:
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_RCC_SetI2CClockSource>:
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80030da:	43db      	mvns	r3, r3
 80030dc:	401a      	ands	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80030e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_SetLPTIMClockSource>:
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0c1b      	lsrs	r3, r3, #16
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	43db      	mvns	r3, r3
 8003114:	401a      	ands	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_RCC_SetSAIClockSource>:
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_RCC_SetRNGClockSource>:
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003170:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_RCC_SetCLK48ClockSource>:
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800319c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_RCC_SetUSBClockSource>:
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ffe3 	bl	8003188 <LL_RCC_SetCLK48ClockSource>
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <LL_RCC_SetADCClockSource>:
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_RCC_SetRTCClockSource>:
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_RCC_GetRTCClockSource>:
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_RCC_ForceBackupDomainReset>:
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_RCC_ReleaseBackupDomainReset>:
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_RCC_PLLSAI1_Enable>:
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_RCC_PLLSAI1_Disable>:
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_RCC_PLLSAI1_IsReady>:
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ce:	d101      	bne.n	80032d4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80032d4:	2300      	movs	r3, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_RCCEx_PeriphCLKConfig>:
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	2300      	movs	r3, #0
 80032ee:	77bb      	strb	r3, [r7, #30]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d034      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003304:	d021      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003306:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800330a:	d81b      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800330c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003310:	d01d      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003316:	d815      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800331c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003320:	d110      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	60d3      	str	r3, [r2, #12]
 8003332:	e00d      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f94d 	bl	80035d8 <RCCEx_PLLSAI1_ConfigNP>
 800333e:	4603      	mov	r3, r0
 8003340:	77fb      	strb	r3, [r7, #31]
 8003342:	e005      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e002      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800334e:	bf00      	nop
 8003350:	7ffb      	ldrb	r3, [r7, #31]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fee8 	bl	8003130 <LL_RCC_SetSAIClockSource>
 8003360:	e001      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8003362:	7ffb      	ldrb	r3, [r7, #31]
 8003364:	77bb      	strb	r3, [r7, #30]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	2b00      	cmp	r3, #0
 8003370:	d046      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8003372:	f7ff ff56 	bl	8003222 <LL_RCC_GetRTCClockSource>
 8003376:	61b8      	str	r0, [r7, #24]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	429a      	cmp	r2, r3
 8003380:	d03c      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003382:	f7fe fc1b 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff30 	bl	80031f6 <LL_RCC_SetRTCClockSource>
 8003396:	e02e      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	f7ff ff4b 	bl	800323c <LL_RCC_ForceBackupDomainReset>
 80033a6:	f7ff ff5a 	bl	800325e <LL_RCC_ReleaseBackupDomainReset>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c2:	f7ff fde1 	bl	8002f88 <LL_RCC_LSE_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d114      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033cc:	f7fd fd34 	bl	8000e38 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]
 80033d2:	e00b      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033d4:	f7fd fd30 	bl	8000e38 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d902      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033e6:	2303      	movs	r3, #3
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e004      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033ec:	f7ff fdde 	bl	8002fac <LL_RCC_LSE_IsReady>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d1ee      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f6:	7ffb      	ldrb	r3, [r7, #31]
 80033f8:	77bb      	strb	r3, [r7, #30]
 80033fa:	e001      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80033fc:	7ffb      	ldrb	r3, [r7, #31]
 80033fe:	77bb      	strb	r3, [r7, #30]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fe2a 	bl	800306a <LL_RCC_SetUSARTClockSource>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fe35 	bl	8003096 <LL_RCC_SetLPUARTClockSource>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5d 	bl	80030fc <LL_RCC_SetLPTIMClockSource>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fe52 	bl	80030fc <LL_RCC_SetLPTIMClockSource>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fe2a 	bl	80030c2 <LL_RCC_SetI2CClockSource>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d004      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fe1f 	bl	80030c2 <LL_RCC_SetI2CClockSource>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d022      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fe8d 	bl	80031b4 <LL_RCC_SetUSBClockSource>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a2:	d107      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80034a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b2:	60d3      	str	r3, [r2, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034bc:	d10b      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f8e3 	bl	800368e <RCCEx_PLLSAI1_ConfigNQ>
 80034c8:	4603      	mov	r3, r0
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	7ffb      	ldrb	r3, [r7, #31]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	77bb      	strb	r3, [r7, #30]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02b      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d008      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f4:	d003      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fe2a 	bl	800315c <LL_RCC_SetRNGClockSource>
 8003508:	e00a      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	2000      	movs	r0, #0
 8003516:	f7ff fe21 	bl	800315c <LL_RCC_SetRNGClockSource>
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff fe34 	bl	8003188 <LL_RCC_SetCLK48ClockSource>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003528:	d107      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800352a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003538:	60d3      	str	r3, [r2, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003542:	2b00      	cmp	r3, #0
 8003544:	d022      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fe3d 	bl	80031ca <LL_RCC_SetADCClockSource>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003558:	d107      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	60d3      	str	r3, [r2, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003572:	d10b      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f8e3 	bl	8003744 <RCCEx_PLLSAI1_ConfigNR>
 800357e:	4603      	mov	r3, r0
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003588:	7ffb      	ldrb	r3, [r7, #31]
 800358a:	77bb      	strb	r3, [r7, #30]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fd26 	bl	8002fee <LL_RCC_SetRFWKPClockSource>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fd45 	bl	8003042 <LL_RCC_SetSMPSPrescaler>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fd2c 	bl	800301a <LL_RCC_SetSMPSClockSource>
 80035c2:	7fbb      	ldrb	r3, [r7, #30]
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_RCCEx_EnableMSIPLLMode>:
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	f7ff fcfe 	bl	8002fd0 <LL_RCC_MSI_EnablePLLMode>
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <RCCEx_PLLSAI1_ConfigNP>:
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	f7ff fe5b 	bl	800329e <LL_RCC_PLLSAI1_Disable>
 80035e8:	f7fd fc26 	bl	8000e38 <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]
 80035ee:	e009      	b.n	8003604 <RCCEx_PLLSAI1_ConfigNP+0x2c>
 80035f0:	f7fd fc22 	bl	8000e38 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <RCCEx_PLLSAI1_ConfigNP+0x2c>
 80035fe:	2303      	movs	r3, #3
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	e004      	b.n	800360e <RCCEx_PLLSAI1_ConfigNP+0x36>
 8003604:	f7ff fe5a 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <RCCEx_PLLSAI1_ConfigNP+0x18>
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d137      	bne.n	8003684 <RCCEx_PLLSAI1_ConfigNP+0xac>
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003628:	4313      	orrs	r3, r2
 800362a:	610b      	str	r3, [r1, #16]
 800362c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800363e:	4313      	orrs	r3, r2
 8003640:	610b      	str	r3, [r1, #16]
 8003642:	f7ff fe1d 	bl	8003280 <LL_RCC_PLLSAI1_Enable>
 8003646:	f7fd fbf7 	bl	8000e38 <HAL_GetTick>
 800364a:	60b8      	str	r0, [r7, #8]
 800364c:	e009      	b.n	8003662 <RCCEx_PLLSAI1_ConfigNP+0x8a>
 800364e:	f7fd fbf3 	bl	8000e38 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d902      	bls.n	8003662 <RCCEx_PLLSAI1_ConfigNP+0x8a>
 800365c:	2303      	movs	r3, #3
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	e004      	b.n	800366c <RCCEx_PLLSAI1_ConfigNP+0x94>
 8003662:	f7ff fe2b 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d1f0      	bne.n	800364e <RCCEx_PLLSAI1_ConfigNP+0x76>
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <RCCEx_PLLSAI1_ConfigNP+0xac>
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <RCCEx_PLLSAI1_ConfigNQ>:
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	f7ff fe00 	bl	800329e <LL_RCC_PLLSAI1_Disable>
 800369e:	f7fd fbcb 	bl	8000e38 <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]
 80036a4:	e009      	b.n	80036ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 80036a6:	f7fd fbc7 	bl	8000e38 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d902      	bls.n	80036ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 80036b4:	2303      	movs	r3, #3
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e004      	b.n	80036c4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
 80036ba:	f7ff fdff 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d137      	bne.n	800373a <RCCEx_PLLSAI1_ConfigNQ+0xac>
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036de:	4313      	orrs	r3, r2
 80036e0:	610b      	str	r3, [r1, #16]
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]
 80036f8:	f7ff fdc2 	bl	8003280 <LL_RCC_PLLSAI1_Enable>
 80036fc:	f7fd fb9c 	bl	8000e38 <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]
 8003702:	e009      	b.n	8003718 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8003704:	f7fd fb98 	bl	8000e38 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8003712:	2303      	movs	r3, #3
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	e004      	b.n	8003722 <RCCEx_PLLSAI1_ConfigNQ+0x94>
 8003718:	f7ff fdd0 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d1f0      	bne.n	8003704 <RCCEx_PLLSAI1_ConfigNQ+0x76>
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003736:	4313      	orrs	r3, r2
 8003738:	610b      	str	r3, [r1, #16]
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <RCCEx_PLLSAI1_ConfigNR>:
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	f7ff fda5 	bl	800329e <LL_RCC_PLLSAI1_Disable>
 8003754:	f7fd fb70 	bl	8000e38 <HAL_GetTick>
 8003758:	60b8      	str	r0, [r7, #8]
 800375a:	e009      	b.n	8003770 <RCCEx_PLLSAI1_ConfigNR+0x2c>
 800375c:	f7fd fb6c 	bl	8000e38 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d902      	bls.n	8003770 <RCCEx_PLLSAI1_ConfigNR+0x2c>
 800376a:	2303      	movs	r3, #3
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e004      	b.n	800377a <RCCEx_PLLSAI1_ConfigNR+0x36>
 8003770:	f7ff fda4 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <RCCEx_PLLSAI1_ConfigNR+0x18>
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d137      	bne.n	80037f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003794:	4313      	orrs	r3, r2
 8003796:	610b      	str	r3, [r1, #16]
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
 80037ae:	f7ff fd67 	bl	8003280 <LL_RCC_PLLSAI1_Enable>
 80037b2:	f7fd fb41 	bl	8000e38 <HAL_GetTick>
 80037b6:	60b8      	str	r0, [r7, #8]
 80037b8:	e009      	b.n	80037ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80037ba:	f7fd fb3d 	bl	8000e38 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80037c8:	2303      	movs	r3, #3
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e004      	b.n	80037d8 <RCCEx_PLLSAI1_ConfigNR+0x94>
 80037ce:	f7ff fd75 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d1f0      	bne.n	80037ba <RCCEx_PLLSAI1_ConfigNR+0x76>
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ec:	4313      	orrs	r3, r2
 80037ee:	610b      	str	r3, [r1, #16]
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_TIM_Base_Init>:
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_TIM_Base_Init+0x12>
 8003808:	2301      	movs	r3, #1
 800380a:	e049      	b.n	80038a0 <HAL_TIM_Base_Init+0xa6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <HAL_TIM_Base_Init+0x2c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f841 	bl	80038a8 <HAL_TIM_Base_MspInit>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f000 f9b7 	bl	8003bac <TIM_Base_SetConfig>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800389e:	2300      	movs	r3, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_Base_MspInit>:
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIM_Base_Start_IT>:
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d001      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x18>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e036      	b.n	8003942 <HAL_TIM_Base_Start_IT+0x86>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	60da      	str	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_TIM_Base_Start_IT+0x94>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x44>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d115      	bne.n	800392c <HAL_TIM_Base_Start_IT+0x70>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_TIM_Base_Start_IT+0x98>)
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b06      	cmp	r3, #6
 8003910:	d015      	beq.n	800393e <HAL_TIM_Base_Start_IT+0x82>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d011      	beq.n	800393e <HAL_TIM_Base_Start_IT+0x82>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e008      	b.n	800393e <HAL_TIM_Base_Start_IT+0x82>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e000      	b.n	8003940 <HAL_TIM_Base_Start_IT+0x84>
 800393e:	bf00      	nop
 8003940:	2300      	movs	r3, #0
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00
 8003954:	00010007 	.word	0x00010007

08003958 <HAL_TIM_IRQHandler>:
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d020      	beq.n	80039bc <HAL_TIM_IRQHandler+0x64>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <HAL_TIM_IRQHandler+0x64>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0202 	mvn.w	r2, #2
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	771a      	strb	r2, [r3, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x52>
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8e4 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x5e>
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8d6 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f8e7 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d020      	beq.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0204 	mvn.w	r2, #4
 80039d8:	611a      	str	r2, [r3, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	771a      	strb	r2, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x9e>
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8be 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xaa>
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8b0 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f8c1 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d020      	beq.n	8003a54 <HAL_TIM_IRQHandler+0xfc>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01b      	beq.n	8003a54 <HAL_TIM_IRQHandler+0xfc>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0208 	mvn.w	r2, #8
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	771a      	strb	r2, [r3, #28]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0xea>
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f898 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0xf6>
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f88a 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f89b 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d020      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x148>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01b      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x148>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0210 	mvn.w	r2, #16
 8003a70:	611a      	str	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2208      	movs	r2, #8
 8003a76:	771a      	strb	r2, [r3, #28]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x136>
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f872 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0x142>
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f864 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f875 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x16c>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x16c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0201 	mvn.w	r2, #1
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc feec 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x190>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x190>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae0:	611a      	str	r2, [r3, #16]
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8d0 	bl	8003c88 <HAL_TIMEx_BreakCallback>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x1b4>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x1b4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b04:	611a      	str	r2, [r3, #16]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8c8 	bl	8003c9c <HAL_TIMEx_Break2Callback>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x1d8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x1d8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b28:	611a      	str	r2, [r3, #16]
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f834 	bl	8003b98 <HAL_TIM_TriggerCallback>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00c      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x1fc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x1fc>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0220 	mvn.w	r2, #32
 8003b4c:	611a      	str	r2, [r3, #16]
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f890 	bl	8003c74 <HAL_TIMEx_CommutCallback>
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_TIM_OC_DelayElapsedCallback>:
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_IC_CaptureCallback>:
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIM_TriggerCallback>:
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <TIM_Base_SetConfig>:
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <TIM_Base_SetConfig+0xbc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0x20>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bca:	d108      	bne.n	8003bde <TIM_Base_SetConfig+0x32>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_Base_SetConfig+0xbc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0x52>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0x52>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <TIM_Base_SetConfig+0xc0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0x52>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <TIM_Base_SetConfig+0xc4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0x64>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_Base_SetConfig+0xbc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0xa0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <TIM_Base_SetConfig+0xc0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0xa0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <TIM_Base_SetConfig+0xc4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d103      	bne.n	8003c54 <TIM_Base_SetConfig+0xa8>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	615a      	str	r2, [r3, #20]
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800

08003c74 <HAL_TIMEx_CommutCallback>:
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_BreakCallback>:
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIMEx_Break2Callback>:
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_GetUSARTClockSource>:
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_RCC_GetLPUARTClockSource>:
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_Init>:
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x12>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e042      	b.n	8003d88 <HAL_UART_Init+0x98>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_UART_Init+0x2a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7fc fe2d 	bl	8000974 <HAL_UART_MspInit>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2224      	movs	r2, #36	; 0x24
 8003d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_UART_Init+0x50>
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 f914 	bl	8004f68 <UART_AdvFeatureConfig>
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fee9 	bl	8004b18 <UART_SetConfig>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Init+0x60>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e01b      	b.n	8003d88 <HAL_UART_Init+0x98>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f001 f993 	bl	80050ac <UART_CheckIdleState>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_Transmit_IT>:
 8003d90:	b480      	push	{r7}
 8003d92:	b091      	sub	sp, #68	; 0x44
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d178      	bne.n	8003e9a <HAL_UART_Transmit_IT+0x10a>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_UART_Transmit_IT+0x24>
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_UART_Transmit_IT+0x28>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e071      	b.n	8003e9c <HAL_UART_Transmit_IT+0x10c>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	679a      	str	r2, [r3, #120]	; 0x78
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2221      	movs	r2, #33	; 0x21
 8003de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dec:	d12a      	bne.n	8003e44 <HAL_UART_Transmit_IT+0xb4>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d107      	bne.n	8003e08 <HAL_UART_Transmit_IT+0x78>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <HAL_UART_Transmit_IT+0x78>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <HAL_UART_Transmit_IT+0x118>)
 8003e04:	679a      	str	r2, [r3, #120]	; 0x78
 8003e06:	e002      	b.n	8003e0e <HAL_UART_Transmit_IT+0x7e>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a28      	ldr	r2, [pc, #160]	; (8003eac <HAL_UART_Transmit_IT+0x11c>)
 8003e0c:	679a      	str	r2, [r3, #120]	; 0x78
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3308      	adds	r3, #8
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e2e:	637a      	str	r2, [r7, #52]	; 0x34
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
 8003e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <HAL_UART_Transmit_IT+0x7e>
 8003e42:	e028      	b.n	8003e96 <HAL_UART_Transmit_IT+0x106>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d107      	bne.n	8003e5e <HAL_UART_Transmit_IT+0xce>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_UART_Transmit_IT+0xce>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a15      	ldr	r2, [pc, #84]	; (8003eb0 <HAL_UART_Transmit_IT+0x120>)
 8003e5a:	679a      	str	r2, [r3, #120]	; 0x78
 8003e5c:	e002      	b.n	8003e64 <HAL_UART_Transmit_IT+0xd4>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_UART_Transmit_IT+0x124>)
 8003e62:	679a      	str	r2, [r3, #120]	; 0x78
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e82:	623b      	str	r3, [r7, #32]
 8003e84:	61fa      	str	r2, [r7, #28]
 8003e86:	69f9      	ldr	r1, [r7, #28]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e6      	bne.n	8003e64 <HAL_UART_Transmit_IT+0xd4>
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_UART_Transmit_IT+0x10c>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3744      	adds	r7, #68	; 0x44
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	08005d1f 	.word	0x08005d1f
 8003eac:	08005c3f 	.word	0x08005c3f
 8003eb0:	08005b7d 	.word	0x08005b7d
 8003eb4:	08005ac5 	.word	0x08005ac5

08003eb8 <HAL_UART_Receive_IT>:
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d137      	bne.n	8003f40 <HAL_UART_Receive_IT+0x88>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Receive_IT+0x24>
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Receive_IT+0x28>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e030      	b.n	8003f42 <HAL_UART_Receive_IT+0x8a>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_UART_Receive_IT+0x94>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d01f      	beq.n	8003f30 <HAL_UART_Receive_IT+0x78>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d018      	beq.n	8003f30 <HAL_UART_Receive_IT+0x78>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	61fa      	str	r2, [r7, #28]
 8003f20:	69f9      	ldr	r1, [r7, #28]
 8003f22:	6a3a      	ldr	r2, [r7, #32]
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e6      	bne.n	8003efe <HAL_UART_Receive_IT+0x46>
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f001 f9ca 	bl	80052d0 <UART_Start_Receive_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	e000      	b.n	8003f42 <HAL_UART_Receive_IT+0x8a>
 8003f40:	2302      	movs	r3, #2
 8003f42:	4618      	mov	r0, r3
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40008000 	.word	0x40008000

08003f50 <HAL_UART_Transmit_DMA>:
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d167      	bne.n	8004038 <HAL_UART_Transmit_DMA+0xe8>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_UART_Transmit_DMA+0x24>
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_UART_Transmit_DMA+0x28>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e060      	b.n	800403a <HAL_UART_Transmit_DMA+0xea>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	651a      	str	r2, [r3, #80]	; 0x50
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2221      	movs	r2, #33	; 0x21
 8003f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d028      	beq.n	8003ff8 <HAL_UART_Transmit_DMA+0xa8>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <HAL_UART_Transmit_DMA+0xf4>)
 8003fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb2:	4a25      	ldr	r2, [pc, #148]	; (8004048 <HAL_UART_Transmit_DMA+0xf8>)
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fba:	4a24      	ldr	r2, [pc, #144]	; (800404c <HAL_UART_Transmit_DMA+0xfc>)
 8003fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3328      	adds	r3, #40	; 0x28
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	f7fd f8cd 	bl	8001178 <HAL_DMA_Start_IT>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_UART_Transmit_DMA+0xa8>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e020      	b.n	800403a <HAL_UART_Transmit_DMA+0xea>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2240      	movs	r2, #64	; 0x40
 8003ffe:	621a      	str	r2, [r3, #32]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	623a      	str	r2, [r7, #32]
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69f9      	ldr	r1, [r7, #28]
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <HAL_UART_Transmit_DMA+0xb0>
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <HAL_UART_Transmit_DMA+0xea>
 8004038:	2302      	movs	r3, #2
 800403a:	4618      	mov	r0, r3
 800403c:	3728      	adds	r7, #40	; 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	080057af 	.word	0x080057af
 8004048:	08005849 	.word	0x08005849
 800404c:	080059cf 	.word	0x080059cf

08004050 <HAL_UART_DMAStop>:
 8004050:	b580      	push	{r7, lr}
 8004052:	b090      	sub	sp, #64	; 0x40
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004066:	63bb      	str	r3, [r7, #56]	; 0x38
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d139      	bne.n	80040ea <HAL_UART_DMAStop+0x9a>
 8004076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004078:	2b21      	cmp	r3, #33	; 0x21
 800407a:	d136      	bne.n	80040ea <HAL_UART_DMAStop+0x9a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3308      	adds	r3, #8
 800409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e5      	bne.n	800407c <HAL_UART_DMAStop+0x2c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_UART_DMAStop+0x94>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd f8d6 	bl	800126e <HAL_DMA_Abort>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <HAL_UART_DMAStop+0x94>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fd fa3b 	bl	8001548 <HAL_DMA_GetError>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d105      	bne.n	80040e4 <HAL_UART_DMAStop+0x94>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2210      	movs	r2, #16
 80040dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80040e0:	2303      	movs	r3, #3
 80040e2:	e047      	b.n	8004174 <HAL_UART_DMAStop+0x124>
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f001 fabb 	bl	8005660 <UART_EndTxTransfer>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d13c      	bne.n	8004172 <HAL_UART_DMAStop+0x122>
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	2b22      	cmp	r3, #34	; 0x22
 80040fc:	d139      	bne.n	8004172 <HAL_UART_DMAStop+0x122>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	61ba      	str	r2, [r7, #24]
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	6979      	ldr	r1, [r7, #20]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <HAL_UART_DMAStop+0xae>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d017      	beq.n	800416c <HAL_UART_DMAStop+0x11c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd f893 	bl	800126e <HAL_DMA_Abort>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <HAL_UART_DMAStop+0x11c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd f9f7 	bl	8001548 <HAL_DMA_GetError>
 800415a:	4603      	mov	r3, r0
 800415c:	2b20      	cmp	r3, #32
 800415e:	d105      	bne.n	800416c <HAL_UART_DMAStop+0x11c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2210      	movs	r2, #16
 8004164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004168:	2303      	movs	r3, #3
 800416a:	e003      	b.n	8004174 <HAL_UART_DMAStop+0x124>
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f001 fab8 	bl	80056e2 <UART_EndRxTransfer>
 8004172:	2300      	movs	r3, #0
 8004174:	4618      	mov	r0, r3
 8004176:	3740      	adds	r7, #64	; 0x40
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_UART_AbortReceive_IT>:
 800417c:	b580      	push	{r7, lr}
 800417e:	b09a      	sub	sp, #104	; 0x68
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	64bb      	str	r3, [r7, #72]	; 0x48
 800418a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
 8004192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004198:	667b      	str	r3, [r7, #100]	; 0x64
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54
 80041a4:	653a      	str	r2, [r7, #80]	; 0x50
 80041a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <HAL_UART_AbortReceive_IT+0x8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
 80041be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	663b      	str	r3, [r7, #96]	; 0x60
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041da:	643a      	str	r2, [r7, #64]	; 0x40
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e3      	bne.n	80041b6 <HAL_UART_AbortReceive_IT+0x3a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d118      	bne.n	8004228 <HAL_UART_AbortReceive_IT+0xac>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	623b      	str	r3, [r7, #32]
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f023 0310 	bic.w	r3, r3, #16
 800420a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004216:	62ba      	str	r2, [r7, #40]	; 0x28
 8004218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <HAL_UART_AbortReceive_IT+0x7a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d154      	bne.n	80042e0 <HAL_UART_AbortReceive_IT+0x164>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424c:	65bb      	str	r3, [r7, #88]	; 0x58
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004256:	61ba      	str	r2, [r7, #24]
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <HAL_UART_AbortReceive_IT+0xba>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d017      	beq.n	80042a4 <HAL_UART_AbortReceive_IT+0x128>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427a:	4a26      	ldr	r2, [pc, #152]	; (8004314 <HAL_UART_AbortReceive_IT+0x198>)
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd f851 	bl	800132c <HAL_DMA_Abort_IT>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03c      	beq.n	800430a <HAL_UART_AbortReceive_IT+0x18e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800429e:	4610      	mov	r0, r2
 80042a0:	4798      	blx	r3
 80042a2:	e032      	b.n	800430a <HAL_UART_AbortReceive_IT+0x18e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	659a      	str	r2, [r3, #88]	; 0x58
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	220f      	movs	r2, #15
 80042b8:	621a      	str	r2, [r3, #32]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0208 	orr.w	r2, r2, #8
 80042c8:	619a      	str	r2, [r3, #24]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fb55 	bl	8004988 <HAL_UART_AbortReceiveCpltCallback>
 80042de:	e014      	b.n	800430a <HAL_UART_AbortReceive_IT+0x18e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	659a      	str	r2, [r3, #88]	; 0x58
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	220f      	movs	r2, #15
 80042f4:	621a      	str	r2, [r3, #32]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	66da      	str	r2, [r3, #108]	; 0x6c
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fb3f 	bl	8004988 <HAL_UART_AbortReceiveCpltCallback>
 800430a:	2300      	movs	r3, #0
 800430c:	4618      	mov	r0, r3
 800430e:	3768      	adds	r7, #104	; 0x68
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	08005a7b 	.word	0x08005a7b

08004318 <HAL_UART_IRQHandler>:
 8004318:	b580      	push	{r7, lr}
 800431a:	b0ba      	sub	sp, #232	; 0xe8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800433e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004342:	f640 030f 	movw	r3, #2063	; 0x80f
 8004346:	4013      	ands	r3, r2
 8004348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800434c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d11b      	bne.n	800438c <HAL_UART_IRQHandler+0x74>
 8004354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <HAL_UART_IRQHandler+0x74>
 8004360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <HAL_UART_IRQHandler+0x60>
 800436c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_UART_IRQHandler+0x74>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 82e3 	beq.w	8004948 <HAL_UART_IRQHandler+0x630>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
 800438a:	e2dd      	b.n	8004948 <HAL_UART_IRQHandler+0x630>
 800438c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8123 	beq.w	80045dc <HAL_UART_IRQHandler+0x2c4>
 8004396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800439a:	4b8d      	ldr	r3, [pc, #564]	; (80045d0 <HAL_UART_IRQHandler+0x2b8>)
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_UART_IRQHandler+0x98>
 80043a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80043a6:	4b8b      	ldr	r3, [pc, #556]	; (80045d4 <HAL_UART_IRQHandler+0x2bc>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8116 	beq.w	80045dc <HAL_UART_IRQHandler+0x2c4>
 80043b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d011      	beq.n	80043e0 <HAL_UART_IRQHandler+0xc8>
 80043bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_UART_IRQHandler+0xc8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	621a      	str	r2, [r3, #32]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f043 0201 	orr.w	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80043e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d011      	beq.n	8004410 <HAL_UART_IRQHandler+0xf8>
 80043ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00b      	beq.n	8004410 <HAL_UART_IRQHandler+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2202      	movs	r2, #2
 80043fe:	621a      	str	r2, [r3, #32]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f043 0204 	orr.w	r2, r3, #4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d011      	beq.n	8004440 <HAL_UART_IRQHandler+0x128>
 800441c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <HAL_UART_IRQHandler+0x128>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2204      	movs	r2, #4
 800442e:	621a      	str	r2, [r3, #32]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f043 0202 	orr.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d017      	beq.n	800447c <HAL_UART_IRQHandler+0x164>
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <HAL_UART_IRQHandler+0x14c>
 8004458:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800445c:	4b5c      	ldr	r3, [pc, #368]	; (80045d0 <HAL_UART_IRQHandler+0x2b8>)
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_UART_IRQHandler+0x164>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2208      	movs	r2, #8
 800446a:	621a      	str	r2, [r3, #32]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_UART_IRQHandler+0x196>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00c      	beq.n	80044ae <HAL_UART_IRQHandler+0x196>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800449c:	621a      	str	r2, [r3, #32]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8249 	beq.w	800494c <HAL_UART_IRQHandler+0x634>
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d013      	beq.n	80044ee <HAL_UART_IRQHandler+0x1d6>
 80044c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <HAL_UART_IRQHandler+0x1c6>
 80044d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_UART_IRQHandler+0x1d6>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_UART_IRQHandler+0x1d6>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4798      	blx	r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d005      	beq.n	8004512 <HAL_UART_IRQHandler+0x1fa>
 8004506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800450a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d054      	beq.n	80045bc <HAL_UART_IRQHandler+0x2a4>
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 f8e5 	bl	80056e2 <UART_EndRxTransfer>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d146      	bne.n	80045b4 <HAL_UART_IRQHandler+0x29c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800453c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800455a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800455e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800456a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1d9      	bne.n	8004526 <HAL_UART_IRQHandler+0x20e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d017      	beq.n	80045ac <HAL_UART_IRQHandler+0x294>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <HAL_UART_IRQHandler+0x2c0>)
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458c:	4618      	mov	r0, r3
 800458e:	f7fc fecd 	bl	800132c <HAL_DMA_Abort_IT>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d019      	beq.n	80045cc <HAL_UART_IRQHandler+0x2b4>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80045a6:	4610      	mov	r0, r2
 80045a8:	4798      	blx	r3
 80045aa:	e00f      	b.n	80045cc <HAL_UART_IRQHandler+0x2b4>
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f003 ff8b 	bl	80084c8 <HAL_UART_ErrorCallback>
 80045b2:	e00b      	b.n	80045cc <HAL_UART_IRQHandler+0x2b4>
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f003 ff87 	bl	80084c8 <HAL_UART_ErrorCallback>
 80045ba:	e007      	b.n	80045cc <HAL_UART_IRQHandler+0x2b4>
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f003 ff83 	bl	80084c8 <HAL_UART_ErrorCallback>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80045ca:	e1bf      	b.n	800494c <HAL_UART_IRQHandler+0x634>
 80045cc:	bf00      	nop
 80045ce:	e1bd      	b.n	800494c <HAL_UART_IRQHandler+0x634>
 80045d0:	10000001 	.word	0x10000001
 80045d4:	04000120 	.word	0x04000120
 80045d8:	08005a4f 	.word	0x08005a4f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f040 8153 	bne.w	800488c <HAL_UART_IRQHandler+0x574>
 80045e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 814c 	beq.w	800488c <HAL_UART_IRQHandler+0x574>
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8145 	beq.w	800488c <HAL_UART_IRQHandler+0x574>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2210      	movs	r2, #16
 8004608:	621a      	str	r2, [r3, #32]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b40      	cmp	r3, #64	; 0x40
 8004616:	f040 80bb 	bne.w	8004790 <HAL_UART_IRQHandler+0x478>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8004628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 818f 	beq.w	8004950 <HAL_UART_IRQHandler+0x638>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004638:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800463c:	429a      	cmp	r2, r3
 800463e:	f080 8187 	bcs.w	8004950 <HAL_UART_IRQHandler+0x638>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004648:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8087 	bne.w	800476e <HAL_UART_IRQHandler+0x456>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800468a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800468e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004692:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80046a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1da      	bne.n	8004660 <HAL_UART_IRQHandler+0x348>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3308      	adds	r3, #8
 80046b0:	677b      	str	r3, [r7, #116]	; 0x74
 80046b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	673b      	str	r3, [r7, #112]	; 0x70
 80046ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	67bb      	str	r3, [r7, #120]	; 0x78
 80046e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e1      	bne.n	80046aa <HAL_UART_IRQHandler+0x392>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	663b      	str	r3, [r7, #96]	; 0x60
 80046ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800470a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800470c:	66bb      	str	r3, [r7, #104]	; 0x68
 800470e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	667b      	str	r3, [r7, #100]	; 0x64
 8004718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <HAL_UART_IRQHandler+0x3ce>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	66da      	str	r2, [r3, #108]	; 0x6c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
 800473a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473c:	f023 0310 	bic.w	r3, r3, #16
 8004740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004750:	657a      	str	r2, [r7, #84]	; 0x54
 8004752:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	653b      	str	r3, [r7, #80]	; 0x50
 800475c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e4      	bne.n	800472c <HAL_UART_IRQHandler+0x414>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	4618      	mov	r0, r3
 800476a:	f7fc fd80 	bl	800126e <HAL_DMA_Abort>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	671a      	str	r2, [r3, #112]	; 0x70
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004780:	b29b      	uxth	r3, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	b29b      	uxth	r3, r3
 8004786:	4619      	mov	r1, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f003 fef7 	bl	800857c <HAL_UARTEx_RxEventCallback>
 800478e:	e0df      	b.n	8004950 <HAL_UART_IRQHandler+0x638>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800479c:	b29b      	uxth	r3, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80d1 	beq.w	8004954 <HAL_UART_IRQHandler+0x63c>
 80047b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80cc 	beq.w	8004954 <HAL_UART_IRQHandler+0x63c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
 80047e0:	643a      	str	r2, [r7, #64]	; 0x40
 80047e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e4      	bne.n	80047bc <HAL_UART_IRQHandler+0x4a4>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800481a:	633a      	str	r2, [r7, #48]	; 0x30
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e1      	bne.n	80047f2 <HAL_UART_IRQHandler+0x4da>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	66da      	str	r2, [r3, #108]	; 0x6c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	675a      	str	r2, [r3, #116]	; 0x74
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0310 	bic.w	r3, r3, #16
 8004856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	61ba      	str	r2, [r7, #24]
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e4      	bne.n	8004842 <HAL_UART_IRQHandler+0x52a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	671a      	str	r2, [r3, #112]	; 0x70
 800487e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f003 fe79 	bl	800857c <HAL_UARTEx_RxEventCallback>
 800488a:	e063      	b.n	8004954 <HAL_UART_IRQHandler+0x63c>
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00e      	beq.n	80048b6 <HAL_UART_IRQHandler+0x59e>
 8004898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_UART_IRQHandler+0x59e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048ac:	621a      	str	r2, [r3, #32]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fff2 	bl	8006898 <HAL_UARTEx_WakeupCallback>
 80048b4:	e051      	b.n	800495a <HAL_UART_IRQHandler+0x642>
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d014      	beq.n	80048ec <HAL_UART_IRQHandler+0x5d4>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <HAL_UART_IRQHandler+0x5c2>
 80048ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_UART_IRQHandler+0x5d4>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03a      	beq.n	8004958 <HAL_UART_IRQHandler+0x640>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
 80048ea:	e035      	b.n	8004958 <HAL_UART_IRQHandler+0x640>
 80048ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <HAL_UART_IRQHandler+0x5f4>
 80048f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_UART_IRQHandler+0x5f4>
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 fa7f 	bl	8005e08 <UART_EndTransmit_IT>
 800490a:	e026      	b.n	800495a <HAL_UART_IRQHandler+0x642>
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <HAL_UART_IRQHandler+0x614>
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_UART_IRQHandler+0x614>
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f001 ffcb 	bl	80068c0 <HAL_UARTEx_TxFifoEmptyCallback>
 800492a:	e016      	b.n	800495a <HAL_UART_IRQHandler+0x642>
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <HAL_UART_IRQHandler+0x642>
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493c:	2b00      	cmp	r3, #0
 800493e:	da0c      	bge.n	800495a <HAL_UART_IRQHandler+0x642>
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 ffb3 	bl	80068ac <HAL_UARTEx_RxFifoFullCallback>
 8004946:	e008      	b.n	800495a <HAL_UART_IRQHandler+0x642>
 8004948:	bf00      	nop
 800494a:	e006      	b.n	800495a <HAL_UART_IRQHandler+0x642>
 800494c:	bf00      	nop
 800494e:	e004      	b.n	800495a <HAL_UART_IRQHandler+0x642>
 8004950:	bf00      	nop
 8004952:	e002      	b.n	800495a <HAL_UART_IRQHandler+0x642>
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HAL_UART_IRQHandler+0x642>
 8004958:	bf00      	nop
 800495a:	37e8      	adds	r7, #232	; 0xe8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_UART_TxHalfCpltCallback>:
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_UART_RxHalfCpltCallback>:
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_UART_AbortReceiveCpltCallback>:
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_HalfDuplex_EnableTransmitter>:
 800499c:	b480      	push	{r7}
 800499e:	b08f      	sub	sp, #60	; 0x3c
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e042      	b.n	8004a38 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2224      	movs	r2, #36	; 0x24
 80049be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f023 030c 	bic.w	r3, r3, #12
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80049e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e6      	bne.n	80049c2 <HAL_HalfDuplex_EnableTransmitter+0x26>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f043 0308 	orr.w	r3, r3, #8
 8004a08:	633b      	str	r3, [r7, #48]	; 0x30
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	617a      	str	r2, [r7, #20]
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e6      	bne.n	80049f4 <HAL_HalfDuplex_EnableTransmitter+0x58>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8004a36:	2300      	movs	r3, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	373c      	adds	r7, #60	; 0x3c
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_HalfDuplex_EnableReceiver>:
 8004a44:	b480      	push	{r7}
 8004a46:	b08f      	sub	sp, #60	; 0x3c
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_HalfDuplex_EnableReceiver+0x16>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e042      	b.n	8004ae0 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2224      	movs	r2, #36	; 0x24
 8004a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	623b      	str	r3, [r7, #32]
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f023 030c 	bic.w	r3, r3, #12
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e6      	bne.n	8004a6a <HAL_HalfDuplex_EnableReceiver+0x26>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f043 0304 	orr.w	r3, r3, #4
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	617a      	str	r2, [r7, #20]
 8004abe:	6979      	ldr	r1, [r7, #20]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e6      	bne.n	8004a9c <HAL_HalfDuplex_EnableReceiver+0x58>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8004ade:	2300      	movs	r3, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	373c      	adds	r7, #60	; 0x3c
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UART_GetState>:
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <UART_SetConfig>:
 8004b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b1c:	b08c      	sub	sp, #48	; 0x30
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6178      	str	r0, [r7, #20]
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4baf      	ldr	r3, [pc, #700]	; (8004e04 <UART_SetConfig+0x2ec>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4aa4      	ldr	r2, [pc, #656]	; (8004e08 <UART_SetConfig+0x2f0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <UART_SetConfig+0x6c>
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b80:	4313      	orrs	r3, r2
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6093      	str	r3, [r2, #8]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f023 010f 	bic.w	r1, r3, #15
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a95      	ldr	r2, [pc, #596]	; (8004e0c <UART_SetConfig+0x2f4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d125      	bne.n	8004c08 <UART_SetConfig+0xf0>
 8004bbc:	2003      	movs	r0, #3
 8004bbe:	f7ff f877 	bl	8003cb0 <LL_RCC_GetUSARTClockSource>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d81b      	bhi.n	8004c00 <UART_SetConfig+0xe8>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0xb8>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004bf1 	.word	0x08004bf1
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bf9 	.word	0x08004bf9
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be6:	e042      	b.n	8004c6e <UART_SetConfig+0x156>
 8004be8:	2302      	movs	r3, #2
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bee:	e03e      	b.n	8004c6e <UART_SetConfig+0x156>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf6:	e03a      	b.n	8004c6e <UART_SetConfig+0x156>
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfe:	e036      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c00:	2310      	movs	r3, #16
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c06:	e032      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a7e      	ldr	r2, [pc, #504]	; (8004e08 <UART_SetConfig+0x2f0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d12a      	bne.n	8004c68 <UART_SetConfig+0x150>
 8004c12:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004c16:	f7ff f85b 	bl	8003cd0 <LL_RCC_GetLPUARTClockSource>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c20:	d01a      	beq.n	8004c58 <UART_SetConfig+0x140>
 8004c22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c26:	d81b      	bhi.n	8004c60 <UART_SetConfig+0x148>
 8004c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2c:	d00c      	beq.n	8004c48 <UART_SetConfig+0x130>
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c32:	d815      	bhi.n	8004c60 <UART_SetConfig+0x148>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <UART_SetConfig+0x128>
 8004c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3c:	d008      	beq.n	8004c50 <UART_SetConfig+0x138>
 8004c3e:	e00f      	b.n	8004c60 <UART_SetConfig+0x148>
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c46:	e012      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e00e      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c50:	2304      	movs	r3, #4
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e00a      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c58:	2308      	movs	r3, #8
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e006      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e002      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <UART_SetConfig+0x2f0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f040 8097 	bne.w	8004da8 <UART_SetConfig+0x290>
 8004c7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d823      	bhi.n	8004cca <UART_SetConfig+0x1b2>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <UART_SetConfig+0x170>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004cad 	.word	0x08004cad
 8004c8c:	08004ccb 	.word	0x08004ccb
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004ccb 	.word	0x08004ccb
 8004c98:	08004cbb 	.word	0x08004cbb
 8004c9c:	08004ccb 	.word	0x08004ccb
 8004ca0:	08004ccb 	.word	0x08004ccb
 8004ca4:	08004ccb 	.word	0x08004ccb
 8004ca8:	08004cc3 	.word	0x08004cc3
 8004cac:	f7fe f85a 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8004cb0:	6278      	str	r0, [r7, #36]	; 0x24
 8004cb2:	e010      	b.n	8004cd6 <UART_SetConfig+0x1be>
 8004cb4:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <UART_SetConfig+0x2f8>)
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb8:	e00d      	b.n	8004cd6 <UART_SetConfig+0x1be>
 8004cba:	f7fd ffd3 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8004cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8004cc0:	e009      	b.n	8004cd6 <UART_SetConfig+0x1be>
 8004cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc8:	e005      	b.n	8004cd6 <UART_SetConfig+0x1be>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cd4:	bf00      	nop
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 812b 	beq.w	8004f34 <UART_SetConfig+0x41c>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	4a4c      	ldr	r2, [pc, #304]	; (8004e14 <UART_SetConfig+0x2fc>)
 8004ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d305      	bcc.n	8004d0e <UART_SetConfig+0x1f6>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	031b      	lsls	r3, r3, #12
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d903      	bls.n	8004d16 <UART_SetConfig+0x1fe>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d14:	e10e      	b.n	8004f34 <UART_SetConfig+0x41c>
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	2200      	movs	r2, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	60fa      	str	r2, [r7, #12]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	4a3c      	ldr	r2, [pc, #240]	; (8004e14 <UART_SetConfig+0x2fc>)
 8004d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d38:	f7fb fa22 	bl	8000180 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	020b      	lsls	r3, r1, #8
 8004d4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d52:	0202      	lsls	r2, r0, #8
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	6849      	ldr	r1, [r1, #4]
 8004d58:	0849      	lsrs	r1, r1, #1
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	4605      	mov	r5, r0
 8004d60:	eb12 0804 	adds.w	r8, r2, r4
 8004d64:	eb43 0905 	adc.w	r9, r3, r5
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	469a      	mov	sl, r3
 8004d70:	4693      	mov	fp, r2
 8004d72:	4652      	mov	r2, sl
 8004d74:	465b      	mov	r3, fp
 8004d76:	4640      	mov	r0, r8
 8004d78:	4649      	mov	r1, r9
 8004d7a:	f7fb fa01 	bl	8000180 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4613      	mov	r3, r2
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8c:	d308      	bcc.n	8004da0 <UART_SetConfig+0x288>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d94:	d204      	bcs.n	8004da0 <UART_SetConfig+0x288>
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e0c9      	b.n	8004f34 <UART_SetConfig+0x41c>
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004da6:	e0c5      	b.n	8004f34 <UART_SetConfig+0x41c>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db0:	d16d      	bne.n	8004e8e <UART_SetConfig+0x376>
 8004db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004db6:	3b01      	subs	r3, #1
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d82d      	bhi.n	8004e18 <UART_SetConfig+0x300>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <UART_SetConfig+0x2ac>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004de5 	.word	0x08004de5
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004df3 	.word	0x08004df3
 8004dd4:	08004e19 	.word	0x08004e19
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004dfb 	.word	0x08004dfb
 8004de4:	f7fd ffd4 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24
 8004dea:	e01b      	b.n	8004e24 <UART_SetConfig+0x30c>
 8004dec:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <UART_SetConfig+0x2f8>)
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
 8004df0:	e018      	b.n	8004e24 <UART_SetConfig+0x30c>
 8004df2:	f7fd ff37 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24
 8004df8:	e014      	b.n	8004e24 <UART_SetConfig+0x30c>
 8004dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004e00:	e010      	b.n	8004e24 <UART_SetConfig+0x30c>
 8004e02:	bf00      	nop
 8004e04:	cfff69f3 	.word	0xcfff69f3
 8004e08:	40008000 	.word	0x40008000
 8004e0c:	40013800 	.word	0x40013800
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	0800bf9c 	.word	0x0800bf9c
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e22:	bf00      	nop
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8084 	beq.w	8004f34 <UART_SetConfig+0x41c>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4a4b      	ldr	r2, [pc, #300]	; (8004f60 <UART_SetConfig+0x448>)
 8004e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e3e:	005a      	lsls	r2, r3, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	441a      	add	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	623b      	str	r3, [r7, #32]
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d916      	bls.n	8004e86 <UART_SetConfig+0x36e>
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d212      	bcs.n	8004e86 <UART_SetConfig+0x36e>
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f023 030f 	bic.w	r3, r3, #15
 8004e68:	83fb      	strh	r3, [r7, #30]
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	8bfb      	ldrh	r3, [r7, #30]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	83fb      	strh	r3, [r7, #30]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	8bfa      	ldrh	r2, [r7, #30]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	e056      	b.n	8004f34 <UART_SetConfig+0x41c>
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e8c:	e052      	b.n	8004f34 <UART_SetConfig+0x41c>
 8004e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e92:	3b01      	subs	r3, #1
 8004e94:	2b07      	cmp	r3, #7
 8004e96:	d822      	bhi.n	8004ede <UART_SetConfig+0x3c6>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0x388>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004ec1 	.word	0x08004ec1
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004edf 	.word	0x08004edf
 8004eac:	08004ecf 	.word	0x08004ecf
 8004eb0:	08004edf 	.word	0x08004edf
 8004eb4:	08004edf 	.word	0x08004edf
 8004eb8:	08004edf 	.word	0x08004edf
 8004ebc:	08004ed7 	.word	0x08004ed7
 8004ec0:	f7fd ff66 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8004ec4:	6278      	str	r0, [r7, #36]	; 0x24
 8004ec6:	e010      	b.n	8004eea <UART_SetConfig+0x3d2>
 8004ec8:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <UART_SetConfig+0x44c>)
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	e00d      	b.n	8004eea <UART_SetConfig+0x3d2>
 8004ece:	f7fd fec9 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8004ed2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ed4:	e009      	b.n	8004eea <UART_SetConfig+0x3d2>
 8004ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
 8004edc:	e005      	b.n	8004eea <UART_SetConfig+0x3d2>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ee8:	bf00      	nop
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d021      	beq.n	8004f34 <UART_SetConfig+0x41c>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <UART_SetConfig+0x448>)
 8004ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004efa:	461a      	mov	r2, r3
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	441a      	add	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	623b      	str	r3, [r7, #32]
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	2b0f      	cmp	r3, #15
 8004f18:	d909      	bls.n	8004f2e <UART_SetConfig+0x416>
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d205      	bcs.n	8004f2e <UART_SetConfig+0x416>
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	e002      	b.n	8004f34 <UART_SetConfig+0x41c>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2200      	movs	r2, #0
 8004f48:	675a      	str	r2, [r3, #116]	; 0x74
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	679a      	str	r2, [r3, #120]	; 0x78
 8004f50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004f54:	4618      	mov	r0, r3
 8004f56:	3730      	adds	r7, #48	; 0x30
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5e:	bf00      	nop
 8004f60:	0800bf9c 	.word	0x0800bf9c
 8004f64:	00f42400 	.word	0x00f42400

08004f68 <UART_AdvFeatureConfig>:
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x2a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x4c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x6e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x90>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <UART_AdvFeatureConfig+0xb2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <UART_AdvFeatureConfig+0xd4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01a      	beq.n	800507e <UART_AdvFeatureConfig+0x116>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005066:	d10a      	bne.n	800507e <UART_AdvFeatureConfig+0x116>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x138>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <UART_CheckIdleState>:
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b098      	sub	sp, #96	; 0x60
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80050bc:	f7fb febc 	bl	8000e38 <HAL_GetTick>
 80050c0:	6578      	str	r0, [r7, #84]	; 0x54
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d12f      	bne.n	8005130 <UART_CheckIdleState+0x84>
 80050d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f88e 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d022      	beq.n	8005130 <UART_CheckIdleState+0x84>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
 800510a:	643a      	str	r2, [r7, #64]	; 0x40
 800510c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800510e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e6      	bne.n	80050ea <UART_CheckIdleState+0x3e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800512c:	2303      	movs	r3, #3
 800512e:	e063      	b.n	80051f8 <UART_CheckIdleState+0x14c>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d149      	bne.n	80051d2 <UART_CheckIdleState+0x126>
 800513e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005146:	2200      	movs	r2, #0
 8005148:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f857 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d03c      	beq.n	80051d2 <UART_CheckIdleState+0x126>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800516c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
 8005178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e6      	bne.n	8005158 <UART_CheckIdleState+0xac>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3308      	adds	r3, #8
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051aa:	61fa      	str	r2, [r7, #28]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	69b9      	ldr	r1, [r7, #24]
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <UART_CheckIdleState+0xde>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80051ce:	2303      	movs	r3, #3
 80051d0:	e012      	b.n	80051f8 <UART_CheckIdleState+0x14c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	671a      	str	r2, [r3, #112]	; 0x70
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80051f6:	2300      	movs	r3, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	3758      	adds	r7, #88	; 0x58
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_WaitOnFlagUntilTimeout>:
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
 8005210:	e049      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d045      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
 800521a:	f7fb fe0d 	bl	8000e38 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <UART_WaitOnFlagUntilTimeout+0x30>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0x34>
 8005230:	2303      	movs	r3, #3
 8005232:	e048      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d031      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d110      	bne.n	8005272 <UART_WaitOnFlagUntilTimeout+0x72>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	621a      	str	r2, [r3, #32]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fa42 	bl	80056e2 <UART_EndRxTransfer>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2208      	movs	r2, #8
 8005262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800526e:	2301      	movs	r3, #1
 8005270:	e029      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005280:	d111      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800528a:	621a      	str	r2, [r3, #32]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fa28 	bl	80056e2 <UART_EndRxTransfer>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80052a2:	2303      	movs	r3, #3
 80052a4:	e00f      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d0a6      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x12>
 80052c4:	2300      	movs	r3, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <UART_Start_Receive_IT>:
 80052d0:	b480      	push	{r7}
 80052d2:	b0a3      	sub	sp, #140	; 0x8c
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	80fb      	strh	r3, [r7, #6]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	659a      	str	r2, [r3, #88]	; 0x58
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	675a      	str	r2, [r3, #116]	; 0x74
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005302:	d10e      	bne.n	8005322 <UART_Start_Receive_IT+0x52>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <UART_Start_Receive_IT+0x48>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005312:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005316:	e02d      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	22ff      	movs	r2, #255	; 0xff
 800531c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005320:	e028      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10d      	bne.n	8005346 <UART_Start_Receive_IT+0x76>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <UART_Start_Receive_IT+0x6c>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800533a:	e01b      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	227f      	movs	r2, #127	; 0x7f
 8005340:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005344:	e016      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800534e:	d10d      	bne.n	800536c <UART_Start_Receive_IT+0x9c>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <UART_Start_Receive_IT+0x92>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	227f      	movs	r2, #127	; 0x7f
 800535c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005360:	e008      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	223f      	movs	r2, #63	; 0x3f
 8005366:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800536a:	e003      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2222      	movs	r2, #34	; 0x22
 8005380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	667b      	str	r3, [r7, #100]	; 0x64
 800538c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	663b      	str	r3, [r7, #96]	; 0x60
 8005394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80053a8:	673a      	str	r2, [r7, #112]	; 0x70
 80053aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80053ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e3      	bne.n	8005384 <UART_Start_Receive_IT+0xb4>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c4:	d14f      	bne.n	8005466 <UART_Start_Receive_IT+0x196>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80053cc:	88fa      	ldrh	r2, [r7, #6]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d349      	bcc.n	8005466 <UART_Start_Receive_IT+0x196>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	d107      	bne.n	80053ec <UART_Start_Receive_IT+0x11c>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <UART_Start_Receive_IT+0x11c>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4a47      	ldr	r2, [pc, #284]	; (8005504 <UART_Start_Receive_IT+0x234>)
 80053e8:	675a      	str	r2, [r3, #116]	; 0x74
 80053ea:	e002      	b.n	80053f2 <UART_Start_Receive_IT+0x122>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a46      	ldr	r2, [pc, #280]	; (8005508 <UART_Start_Receive_IT+0x238>)
 80053f0:	675a      	str	r2, [r3, #116]	; 0x74
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01a      	beq.n	8005430 <UART_Start_Receive_IT+0x160>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800541c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005420:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005422:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	657b      	str	r3, [r7, #84]	; 0x54
 800542a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e4      	bne.n	80053fa <UART_Start_Receive_IT+0x12a>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005446:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005450:	64ba      	str	r2, [r7, #72]	; 0x48
 8005452:	647b      	str	r3, [r7, #68]	; 0x44
 8005454:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	643b      	str	r3, [r7, #64]	; 0x40
 800545e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_Start_Receive_IT+0x160>
 8005464:	e046      	b.n	80054f4 <UART_Start_Receive_IT+0x224>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546e:	d107      	bne.n	8005480 <UART_Start_Receive_IT+0x1b0>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <UART_Start_Receive_IT+0x1b0>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a24      	ldr	r2, [pc, #144]	; (800550c <UART_Start_Receive_IT+0x23c>)
 800547c:	675a      	str	r2, [r3, #116]	; 0x74
 800547e:	e002      	b.n	8005486 <UART_Start_Receive_IT+0x1b6>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a23      	ldr	r2, [pc, #140]	; (8005510 <UART_Start_Receive_IT+0x240>)
 8005484:	675a      	str	r2, [r3, #116]	; 0x74
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d019      	beq.n	80054c2 <UART_Start_Receive_IT+0x1f2>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80054a2:	677b      	str	r3, [r7, #116]	; 0x74
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
 80054ae:	633a      	str	r2, [r7, #48]	; 0x30
 80054b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e6      	bne.n	800548e <UART_Start_Receive_IT+0x1be>
 80054c0:	e018      	b.n	80054f4 <UART_Start_Receive_IT+0x224>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f043 0320 	orr.w	r3, r3, #32
 80054d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	61fa      	str	r2, [r7, #28]
 80054e4:	69f9      	ldr	r1, [r7, #28]
 80054e6:	6a3a      	ldr	r2, [r7, #32]
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e6      	bne.n	80054c2 <UART_Start_Receive_IT+0x1f2>
 80054f4:	2300      	movs	r3, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	378c      	adds	r7, #140	; 0x8c
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	08006531 	.word	0x08006531
 8005508:	080061d1 	.word	0x080061d1
 800550c:	08006019 	.word	0x08006019
 8005510:	08005e61 	.word	0x08005e61

08005514 <UART_Start_Receive_DMA>:
 8005514:	b580      	push	{r7, lr}
 8005516:	b096      	sub	sp, #88	; 0x58
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	659a      	str	r2, [r3, #88]	; 0x58
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2222      	movs	r2, #34	; 0x22
 800553c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02d      	beq.n	80055a6 <UART_Start_Receive_DMA+0x92>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005550:	4a40      	ldr	r2, [pc, #256]	; (8005654 <UART_Start_Receive_DMA+0x140>)
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555a:	4a3f      	ldr	r2, [pc, #252]	; (8005658 <UART_Start_Receive_DMA+0x144>)
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	4a3d      	ldr	r2, [pc, #244]	; (800565c <UART_Start_Receive_DMA+0x148>)
 8005566:	635a      	str	r2, [r3, #52]	; 0x34
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800556e:	2200      	movs	r2, #0
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3324      	adds	r3, #36	; 0x24
 800557e:	4619      	mov	r1, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	461a      	mov	r2, r3
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	f7fb fdf6 	bl	8001178 <HAL_DMA_Start_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <UART_Start_Receive_DMA+0x92>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2210      	movs	r2, #16
 8005596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80055a2:	2301      	movs	r3, #1
 80055a4:	e051      	b.n	800564a <UART_Start_Receive_DMA+0x136>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d018      	beq.n	80055e0 <UART_Start_Receive_DMA+0xcc>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c2:	657b      	str	r3, [r7, #84]	; 0x54
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ce:	647a      	str	r2, [r7, #68]	; 0x44
 80055d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	643b      	str	r3, [r7, #64]	; 0x40
 80055da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_Start_Receive_DMA+0x9a>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	653b      	str	r3, [r7, #80]	; 0x50
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3308      	adds	r3, #8
 80055fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005600:	637a      	str	r2, [r7, #52]	; 0x34
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
 8005604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_Start_Receive_DMA+0xcc>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005634:	623a      	str	r2, [r7, #32]
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	6a3a      	ldr	r2, [r7, #32]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_Start_Receive_DMA+0x100>
 8005648:	2300      	movs	r3, #0
 800564a:	4618      	mov	r0, r3
 800564c:	3758      	adds	r7, #88	; 0x58
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	08005865 	.word	0x08005865
 8005658:	08005991 	.word	0x08005991
 800565c:	080059cf 	.word	0x080059cf

08005660 <UART_EndTxTransfer>:
 8005660:	b480      	push	{r7}
 8005662:	b08f      	sub	sp, #60	; 0x3c
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	623b      	str	r3, [r7, #32]
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005688:	62ba      	str	r2, [r7, #40]	; 0x28
 800568a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800568c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e6      	bne.n	8005668 <UART_EndTxTransfer+0x8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ba:	61ba      	str	r2, [r7, #24]
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_EndTxTransfer+0x3a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80056d6:	bf00      	nop
 80056d8:	373c      	adds	r7, #60	; 0x3c
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <UART_EndRxTransfer>:
 80056e2:	b480      	push	{r7}
 80056e4:	b095      	sub	sp, #84	; 0x54
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	643b      	str	r3, [r7, #64]	; 0x40
 800570a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800570c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800570e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	63bb      	str	r3, [r7, #56]	; 0x38
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_EndRxTransfer+0x8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	64bb      	str	r3, [r7, #72]	; 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005740:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
 8005744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e3      	bne.n	800571c <UART_EndRxTransfer+0x3a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d118      	bne.n	800578e <UART_EndRxTransfer+0xac>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f023 0310 	bic.w	r3, r3, #16
 8005770:	647b      	str	r3, [r7, #68]	; 0x44
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	617a      	str	r2, [r7, #20]
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <UART_EndRxTransfer+0x7a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	66da      	str	r2, [r3, #108]	; 0x6c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	675a      	str	r2, [r3, #116]	; 0x74
 80057a2:	bf00      	nop
 80057a4:	3754      	adds	r7, #84	; 0x54
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <UART_DMATransmitCplt>:
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b090      	sub	sp, #64	; 0x40
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d137      	bne.n	800583a <UART_DMATransmitCplt+0x8c>
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	623b      	str	r3, [r7, #32]
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f2:	633a      	str	r2, [r7, #48]	; 0x30
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e5      	bne.n	80057d2 <UART_DMATransmitCplt+0x24>
 8005806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	61ba      	str	r2, [r7, #24]
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e6      	bne.n	8005806 <UART_DMATransmitCplt+0x58>
 8005838:	e002      	b.n	8005840 <UART_DMATransmitCplt+0x92>
 800583a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800583c:	f002 fd9c 	bl	8008378 <HAL_UART_TxCpltCallback>
 8005840:	bf00      	nop
 8005842:	3740      	adds	r7, #64	; 0x40
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UART_DMATxHalfCplt>:
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff f882 	bl	8004960 <HAL_UART_TxHalfCpltCallback>
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_DMAReceiveCplt>:
 8005864:	b580      	push	{r7, lr}
 8005866:	b09c      	sub	sp, #112	; 0x70
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d171      	bne.n	8005964 <UART_DMAReceiveCplt+0x100>
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	2200      	movs	r2, #0
 8005884:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800588e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	64bb      	str	r3, [r7, #72]	; 0x48
 8005896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589c:	66bb      	str	r3, [r7, #104]	; 0x68
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80058a8:	657a      	str	r2, [r7, #84]	; 0x54
 80058aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	653b      	str	r3, [r7, #80]	; 0x50
 80058b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e6      	bne.n	8005888 <UART_DMAReceiveCplt+0x24>
 80058ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3308      	adds	r3, #8
 80058c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	667b      	str	r3, [r7, #100]	; 0x64
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058da:	647a      	str	r2, [r7, #68]	; 0x44
 80058dc:	643b      	str	r3, [r7, #64]	; 0x40
 80058de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e5      	bne.n	80058ba <UART_DMAReceiveCplt+0x56>
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005904:	663b      	str	r3, [r7, #96]	; 0x60
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800590e:	633a      	str	r2, [r7, #48]	; 0x30
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_DMAReceiveCplt+0x8a>
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800592a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d118      	bne.n	8005964 <UART_DMAReceiveCplt+0x100>
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0310 	bic.w	r3, r3, #16
 8005946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	61ba      	str	r2, [r7, #24]
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e6      	bne.n	8005932 <UART_DMAReceiveCplt+0xce>
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	2200      	movs	r2, #0
 8005968:	671a      	str	r2, [r3, #112]	; 0x70
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	2b01      	cmp	r3, #1
 8005970:	d107      	bne.n	8005982 <UART_DMAReceiveCplt+0x11e>
 8005972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005978:	4619      	mov	r1, r3
 800597a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800597c:	f002 fdfe 	bl	800857c <HAL_UARTEx_RxEventCallback>
 8005980:	e002      	b.n	8005988 <UART_DMAReceiveCplt+0x124>
 8005982:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005984:	f002 fd36 	bl	80083f4 <HAL_UART_RxCpltCallback>
 8005988:	bf00      	nop
 800598a:	3770      	adds	r7, #112	; 0x70
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_DMARxHalfCplt>:
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	671a      	str	r2, [r3, #112]	; 0x70
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d109      	bne.n	80059c0 <UART_DMARxHalfCplt+0x30>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f002 fddf 	bl	800857c <HAL_UARTEx_RxEventCallback>
 80059be:	e002      	b.n	80059c6 <UART_DMARxHalfCplt+0x36>
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7fe ffd7 	bl	8004974 <HAL_UART_RxHalfCpltCallback>
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_DMAError>:
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d109      	bne.n	8005a0e <UART_DMAError+0x40>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b21      	cmp	r3, #33	; 0x21
 80059fe:	d106      	bne.n	8005a0e <UART_DMAError+0x40>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005a08:	6978      	ldr	r0, [r7, #20]
 8005a0a:	f7ff fe29 	bl	8005660 <UART_EndTxTransfer>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d109      	bne.n	8005a30 <UART_DMAError+0x62>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b22      	cmp	r3, #34	; 0x22
 8005a20:	d106      	bne.n	8005a30 <UART_DMAError+0x62>
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005a2a:	6978      	ldr	r0, [r7, #20]
 8005a2c:	f7ff fe59 	bl	80056e2 <UART_EndRxTransfer>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	f043 0210 	orr.w	r2, r3, #16
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005a40:	6978      	ldr	r0, [r7, #20]
 8005a42:	f002 fd41 	bl	80084c8 <HAL_UART_ErrorCallback>
 8005a46:	bf00      	nop
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_DMAAbortOnError>:
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f002 fd2b 	bl	80084c8 <HAL_UART_ErrorCallback>
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <UART_DMARxOnlyAbortCallback>:
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	220f      	movs	r2, #15
 8005a96:	621a      	str	r2, [r3, #32]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0208 	orr.w	r2, r2, #8
 8005aa6:	619a      	str	r2, [r3, #24]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	66da      	str	r2, [r3, #108]	; 0x6c
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7fe ff66 	bl	8004988 <HAL_UART_AbortReceiveCpltCallback>
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_TxISR_8BIT>:
 8005ac4:	b480      	push	{r7}
 8005ac6:	b08f      	sub	sp, #60	; 0x3c
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	2b21      	cmp	r3, #33	; 0x21
 8005ad4:	d14c      	bne.n	8005b70 <UART_TxISR_8BIT+0xac>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d132      	bne.n	8005b48 <UART_TxISR_8BIT+0x84>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	623b      	str	r3, [r7, #32]
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b02:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_TxISR_8BIT+0x1e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	617a      	str	r2, [r7, #20]
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_TxISR_8BIT+0x50>
 8005b46:	e013      	b.n	8005b70 <UART_TxISR_8BIT+0xac>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	781a      	ldrb	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	651a      	str	r2, [r3, #80]	; 0x50
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005b70:	bf00      	nop
 8005b72:	373c      	adds	r7, #60	; 0x3c
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_TxISR_16BIT>:
 8005b7c:	b480      	push	{r7}
 8005b7e:	b091      	sub	sp, #68	; 0x44
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8a:	2b21      	cmp	r3, #33	; 0x21
 8005b8c:	d151      	bne.n	8005c32 <UART_TxISR_16BIT+0xb6>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d132      	bne.n	8005c00 <UART_TxISR_16BIT+0x84>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_TxISR_16BIT+0x1e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	61ba      	str	r2, [r7, #24]
 8005bee:	69b9      	ldr	r1, [r7, #24]
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e6      	bne.n	8005bcc <UART_TxISR_16BIT+0x50>
 8005bfe:	e018      	b.n	8005c32 <UART_TxISR_16BIT+0xb6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c14:	629a      	str	r2, [r3, #40]	; 0x28
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	651a      	str	r2, [r3, #80]	; 0x50
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005c32:	bf00      	nop
 8005c34:	3744      	adds	r7, #68	; 0x44
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <UART_TxISR_8BIT_FIFOEN>:
 8005c3e:	b480      	push	{r7}
 8005c40:	b091      	sub	sp, #68	; 0x44
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	2b21      	cmp	r3, #33	; 0x21
 8005c4e:	d160      	bne.n	8005d12 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c56:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005c58:	e057      	b.n	8005d0a <UART_TxISR_8BIT_FIFOEN+0xcc>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d133      	bne.n	8005cce <UART_TxISR_8BIT_FIFOEN+0x90>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c86:	633a      	str	r2, [r7, #48]	; 0x30
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_TxISR_8BIT_FIFOEN+0x28>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	61ba      	str	r2, [r7, #24]
 8005cbc:	69b9      	ldr	r1, [r7, #24]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e6      	bne.n	8005c9a <UART_TxISR_8BIT_FIFOEN+0x5c>
 8005ccc:	e021      	b.n	8005d12 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <UART_TxISR_8BIT_FIFOEN+0xc6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d06:	3b01      	subs	r3, #1
 8005d08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1a4      	bne.n	8005c5a <UART_TxISR_8BIT_FIFOEN+0x1c>
 8005d10:	e7ff      	b.n	8005d12 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005d12:	bf00      	nop
 8005d14:	3744      	adds	r7, #68	; 0x44
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <UART_TxISR_16BIT_FIFOEN>:
 8005d1e:	b480      	push	{r7}
 8005d20:	b091      	sub	sp, #68	; 0x44
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	2b21      	cmp	r3, #33	; 0x21
 8005d2e:	d165      	bne.n	8005dfc <UART_TxISR_16BIT_FIFOEN+0xde>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d36:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d38:	e05c      	b.n	8005df4 <UART_TxISR_16BIT_FIFOEN+0xd6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d133      	bne.n	8005dae <UART_TxISR_16BIT_FIFOEN+0x90>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3308      	adds	r3, #8
 8005d64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <UART_TxISR_16BIT_FIFOEN+0x28>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	617a      	str	r2, [r7, #20]
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e6      	bne.n	8005d7a <UART_TxISR_16BIT_FIFOEN+0x5c>
 8005dac:	e026      	b.n	8005dfc <UART_TxISR_16BIT_FIFOEN+0xde>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d018      	beq.n	8005dee <UART_TxISR_16BIT_FIFOEN+0xd0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	651a      	str	r2, [r3, #80]	; 0x50
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005dee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005df0:	3b01      	subs	r3, #1
 8005df2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005df4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d19f      	bne.n	8005d3a <UART_TxISR_16BIT_FIFOEN+0x1c>
 8005dfa:	e7ff      	b.n	8005dfc <UART_TxISR_16BIT_FIFOEN+0xde>
 8005dfc:	bf00      	nop
 8005dfe:	3744      	adds	r7, #68	; 0x44
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <UART_EndTransmit_IT>:
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	617a      	str	r2, [r7, #20]
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e6      	bne.n	8005e10 <UART_EndTransmit_IT+0x8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	679a      	str	r2, [r3, #120]	; 0x78
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f002 fa91 	bl	8008378 <HAL_UART_TxCpltCallback>
 8005e56:	bf00      	nop
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <UART_RxISR_8BIT>:
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b09c      	sub	sp, #112	; 0x70
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e78:	2b22      	cmp	r3, #34	; 0x22
 8005e7a:	f040 80be 	bne.w	8005ffa <UART_RxISR_8BIT+0x19a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8005e88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e8c:	b2d9      	uxtb	r1, r3
 8005e8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	400a      	ands	r2, r1
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 80a1 	bne.w	800600a <UART_RxISR_8BIT+0x1aa>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ee6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee8:	657a      	str	r2, [r7, #84]	; 0x54
 8005eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e6      	bne.n	8005ec8 <UART_RxISR_8BIT+0x68>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	667b      	str	r3, [r7, #100]	; 0x64
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_RxISR_8BIT+0x9a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	675a      	str	r2, [r3, #116]	; 0x74
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	671a      	str	r2, [r3, #112]	; 0x70
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a33      	ldr	r2, [pc, #204]	; (8006014 <UART_RxISR_8BIT+0x1b4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d01f      	beq.n	8005f8c <UART_RxISR_8BIT+0x12c>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <UART_RxISR_8BIT+0x12c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	623b      	str	r3, [r7, #32]
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f78:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e6      	bne.n	8005f5a <UART_RxISR_8BIT+0xfa>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d12e      	bne.n	8005ff2 <UART_RxISR_8BIT+0x192>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	66da      	str	r2, [r3, #108]	; 0x6c
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0310 	bic.w	r3, r3, #16
 8005fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	61ba      	str	r2, [r7, #24]
 8005fbc:	69b9      	ldr	r1, [r7, #24]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	e841 2300 	strex	r3, r2, [r1]
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e6      	bne.n	8005f9a <UART_RxISR_8BIT+0x13a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d103      	bne.n	8005fe2 <UART_RxISR_8BIT+0x182>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2210      	movs	r2, #16
 8005fe0:	621a      	str	r2, [r3, #32]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f002 fac6 	bl	800857c <HAL_UARTEx_RxEventCallback>
 8005ff0:	e00b      	b.n	800600a <UART_RxISR_8BIT+0x1aa>
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f002 f9fe 	bl	80083f4 <HAL_UART_RxCpltCallback>
 8005ff8:	e007      	b.n	800600a <UART_RxISR_8BIT+0x1aa>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0208 	orr.w	r2, r2, #8
 8006008:	619a      	str	r2, [r3, #24]
 800600a:	bf00      	nop
 800600c:	3770      	adds	r7, #112	; 0x70
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40008000 	.word	0x40008000

08006018 <UART_RxISR_16BIT>:
 8006018:	b580      	push	{r7, lr}
 800601a:	b09c      	sub	sp, #112	; 0x70
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006026:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006030:	2b22      	cmp	r3, #34	; 0x22
 8006032:	f040 80be 	bne.w	80061b2 <UART_RxISR_16BIT+0x19a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006044:	66bb      	str	r3, [r7, #104]	; 0x68
 8006046:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800604a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800604e:	4013      	ands	r3, r2
 8006050:	b29a      	uxth	r2, r3
 8006052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	659a      	str	r2, [r3, #88]	; 0x58
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	f040 80a1 	bne.w	80061c2 <UART_RxISR_16BIT+0x1aa>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	64bb      	str	r3, [r7, #72]	; 0x48
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	647b      	str	r3, [r7, #68]	; 0x44
 800608e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006094:	667b      	str	r3, [r7, #100]	; 0x64
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609e:	657b      	str	r3, [r7, #84]	; 0x54
 80060a0:	653a      	str	r2, [r7, #80]	; 0x50
 80060a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e6      	bne.n	8006080 <UART_RxISR_16BIT+0x68>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	663b      	str	r3, [r7, #96]	; 0x60
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060d2:	643a      	str	r2, [r7, #64]	; 0x40
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e5      	bne.n	80060b2 <UART_RxISR_16BIT+0x9a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	675a      	str	r2, [r3, #116]	; 0x74
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	671a      	str	r2, [r3, #112]	; 0x70
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a33      	ldr	r2, [pc, #204]	; (80061cc <UART_RxISR_16BIT+0x1b4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01f      	beq.n	8006144 <UART_RxISR_16BIT+0x12c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <UART_RxISR_16BIT+0x12c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	623b      	str	r3, [r7, #32]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006132:	62ba      	str	r2, [r7, #40]	; 0x28
 8006134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e6      	bne.n	8006112 <UART_RxISR_16BIT+0xfa>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d12e      	bne.n	80061aa <UART_RxISR_16BIT+0x192>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	66da      	str	r2, [r3, #108]	; 0x6c
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	60bb      	str	r3, [r7, #8]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f023 0310 	bic.w	r3, r3, #16
 8006166:	65bb      	str	r3, [r7, #88]	; 0x58
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	617a      	str	r2, [r7, #20]
 8006174:	6979      	ldr	r1, [r7, #20]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e6      	bne.n	8006152 <UART_RxISR_16BIT+0x13a>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b10      	cmp	r3, #16
 8006190:	d103      	bne.n	800619a <UART_RxISR_16BIT+0x182>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2210      	movs	r2, #16
 8006198:	621a      	str	r2, [r3, #32]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f002 f9ea 	bl	800857c <HAL_UARTEx_RxEventCallback>
 80061a8:	e00b      	b.n	80061c2 <UART_RxISR_16BIT+0x1aa>
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f002 f922 	bl	80083f4 <HAL_UART_RxCpltCallback>
 80061b0:	e007      	b.n	80061c2 <UART_RxISR_16BIT+0x1aa>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0208 	orr.w	r2, r2, #8
 80061c0:	619a      	str	r2, [r3, #24]
 80061c2:	bf00      	nop
 80061c4:	3770      	adds	r7, #112	; 0x70
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40008000 	.word	0x40008000

080061d0 <UART_RxISR_8BIT_FIFOEN>:
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b0ac      	sub	sp, #176	; 0xb0
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006206:	2b22      	cmp	r3, #34	; 0x22
 8006208:	f040 8182 	bne.w	8006510 <UART_RxISR_8BIT_FIFOEN+0x340>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006212:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006216:	e125      	b.n	8006464 <UART_RxISR_8BIT_FIFOEN+0x294>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006222:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006226:	b2d9      	uxtb	r1, r3
 8006228:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800622c:	b2da      	uxtb	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006232:	400a      	ands	r2, r1
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	659a      	str	r2, [r3, #88]	; 0x58
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800625e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	2b00      	cmp	r3, #0
 8006268:	d053      	beq.n	8006312 <UART_RxISR_8BIT_FIFOEN+0x142>
 800626a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800627a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	621a      	str	r2, [r3, #32]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006290:	f043 0201 	orr.w	r2, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800629a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d011      	beq.n	80062ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80062a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2202      	movs	r2, #2
 80062b8:	621a      	str	r2, [r3, #32]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c0:	f043 0204 	orr.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80062ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d011      	beq.n	80062fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80062d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2204      	movs	r2, #4
 80062e8:	621a      	str	r2, [r3, #32]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f0:	f043 0202 	orr.w	r2, r3, #2
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	2b00      	cmp	r3, #0
 8006302:	d006      	beq.n	8006312 <UART_RxISR_8BIT_FIFOEN+0x142>
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f002 f8df 	bl	80084c8 <HAL_UART_ErrorCallback>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 80a2 	bne.w	8006464 <UART_RxISR_8BIT_FIFOEN+0x294>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	673b      	str	r3, [r7, #112]	; 0x70
 8006326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006342:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006344:	67ba      	str	r2, [r7, #120]	; 0x78
 8006346:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006348:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	677b      	str	r3, [r7, #116]	; 0x74
 8006350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e4      	bne.n	8006320 <UART_RxISR_8BIT_FIFOEN+0x150>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800635e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	65bb      	str	r3, [r7, #88]	; 0x58
 8006366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800637e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006380:	667b      	str	r3, [r7, #100]	; 0x64
 8006382:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006384:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	663b      	str	r3, [r7, #96]	; 0x60
 800638c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e1      	bne.n	8006356 <UART_RxISR_8BIT_FIFOEN+0x186>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	675a      	str	r2, [r3, #116]	; 0x74
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	671a      	str	r2, [r3, #112]	; 0x70
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a5f      	ldr	r2, [pc, #380]	; (8006528 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d021      	beq.n	80063f4 <UART_RxISR_8BIT_FIFOEN+0x224>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d01a      	beq.n	80063f4 <UART_RxISR_8BIT_FIFOEN+0x224>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
 80063cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063e0:	657b      	str	r3, [r7, #84]	; 0x54
 80063e2:	653a      	str	r2, [r7, #80]	; 0x50
 80063e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e4      	bne.n	80063be <UART_RxISR_8BIT_FIFOEN+0x1ee>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d130      	bne.n	800645e <UART_RxISR_8BIT_FIFOEN+0x28e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	66da      	str	r2, [r3, #108]	; 0x6c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	637b      	str	r3, [r7, #52]	; 0x34
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	f023 0310 	bic.w	r3, r3, #16
 8006416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006424:	643b      	str	r3, [r7, #64]	; 0x40
 8006426:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800642a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	63bb      	str	r3, [r7, #56]	; 0x38
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e4      	bne.n	8006402 <UART_RxISR_8BIT_FIFOEN+0x232>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b10      	cmp	r3, #16
 8006444:	d103      	bne.n	800644e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2210      	movs	r2, #16
 800644c:	621a      	str	r2, [r3, #32]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f002 f890 	bl	800857c <HAL_UARTEx_RxEventCallback>
 800645c:	e002      	b.n	8006464 <UART_RxISR_8BIT_FIFOEN+0x294>
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 ffc8 	bl	80083f4 <HAL_UART_RxCpltCallback>
 8006464:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800646c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	f47f aecf 	bne.w	8006218 <UART_RxISR_8BIT_FIFOEN+0x48>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006480:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006484:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006488:	2b00      	cmp	r3, #0
 800648a:	d049      	beq.n	8006520 <UART_RxISR_8BIT_FIFOEN+0x350>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006492:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006496:	429a      	cmp	r2, r3
 8006498:	d242      	bcs.n	8006520 <UART_RxISR_8BIT_FIFOEN+0x350>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80064be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e3      	bne.n	800649a <UART_RxISR_8BIT_FIFOEN+0x2ca>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a15      	ldr	r2, [pc, #84]	; (800652c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80064d6:	675a      	str	r2, [r3, #116]	; 0x74
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f043 0320 	orr.w	r3, r3, #32
 80064ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	617a      	str	r2, [r7, #20]
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e4      	bne.n	80064d8 <UART_RxISR_8BIT_FIFOEN+0x308>
 800650e:	e007      	b.n	8006520 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0208 	orr.w	r2, r2, #8
 800651e:	619a      	str	r2, [r3, #24]
 8006520:	bf00      	nop
 8006522:	37b0      	adds	r7, #176	; 0xb0
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40008000 	.word	0x40008000
 800652c:	08005e61 	.word	0x08005e61

08006530 <UART_RxISR_16BIT_FIFOEN>:
 8006530:	b580      	push	{r7, lr}
 8006532:	b0ae      	sub	sp, #184	; 0xb8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800653e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006566:	2b22      	cmp	r3, #34	; 0x22
 8006568:	f040 8186 	bne.w	8006878 <UART_RxISR_16BIT_FIFOEN+0x348>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006572:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8006576:	e129      	b.n	80067cc <UART_RxISR_16BIT_FIFOEN+0x29c>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800658a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800658e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006592:	4013      	ands	r3, r2
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	659a      	str	r2, [r3, #88]	; 0x58
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d053      	beq.n	8006676 <UART_RxISR_16BIT_FIFOEN+0x146>
 80065ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d011      	beq.n	80065fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80065da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	621a      	str	r2, [r3, #32]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f4:	f043 0201 	orr.w	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80065fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d011      	beq.n	800662e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800660a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2202      	movs	r2, #2
 800661c:	621a      	str	r2, [r3, #32]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006624:	f043 0204 	orr.w	r2, r3, #4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800662e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	d011      	beq.n	800665e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800663a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2204      	movs	r2, #4
 800664c:	621a      	str	r2, [r3, #32]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006654:	f043 0202 	orr.w	r2, r3, #2
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006664:	2b00      	cmp	r3, #0
 8006666:	d006      	beq.n	8006676 <UART_RxISR_16BIT_FIFOEN+0x146>
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 ff2d 	bl	80084c8 <HAL_UART_ErrorCallback>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 80a4 	bne.w	80067cc <UART_RxISR_16BIT_FIFOEN+0x29c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	677b      	str	r3, [r7, #116]	; 0x74
 800668a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
 8006692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e2      	bne.n	8006684 <UART_RxISR_16BIT_FIFOEN+0x154>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	663b      	str	r3, [r7, #96]	; 0x60
 80066c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80066e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	667b      	str	r3, [r7, #100]	; 0x64
 80066f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e1      	bne.n	80066be <UART_RxISR_16BIT_FIFOEN+0x18e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	675a      	str	r2, [r3, #116]	; 0x74
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	671a      	str	r2, [r3, #112]	; 0x70
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a5f      	ldr	r2, [pc, #380]	; (8006890 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d021      	beq.n	800675c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01a      	beq.n	800675c <UART_RxISR_16BIT_FIFOEN+0x22c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	64bb      	str	r3, [r7, #72]	; 0x48
 8006734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800673a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006748:	65bb      	str	r3, [r7, #88]	; 0x58
 800674a:	657a      	str	r2, [r7, #84]	; 0x54
 800674c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800674e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
 8006756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e4      	bne.n	8006726 <UART_RxISR_16BIT_FIFOEN+0x1f6>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d130      	bne.n	80067c6 <UART_RxISR_16BIT_FIFOEN+0x296>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	66da      	str	r2, [r3, #108]	; 0x6c
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800678c:	647b      	str	r3, [r7, #68]	; 0x44
 800678e:	643a      	str	r2, [r7, #64]	; 0x40
 8006790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e4      	bne.n	800676a <UART_RxISR_16BIT_FIFOEN+0x23a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d103      	bne.n	80067b6 <UART_RxISR_16BIT_FIFOEN+0x286>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2210      	movs	r2, #16
 80067b4:	621a      	str	r2, [r3, #32]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fedc 	bl	800857c <HAL_UARTEx_RxEventCallback>
 80067c4:	e002      	b.n	80067cc <UART_RxISR_16BIT_FIFOEN+0x29c>
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 fe14 	bl	80083f4 <HAL_UART_RxCpltCallback>
 80067cc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80067d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f aecb 	bne.w	8006578 <UART_RxISR_16BIT_FIFOEN+0x48>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067e8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d049      	beq.n	8006888 <UART_RxISR_16BIT_FIFOEN+0x358>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067fa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80067fe:	429a      	cmp	r2, r3
 8006800:	d242      	bcs.n	8006888 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	623b      	str	r3, [r7, #32]
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006826:	633a      	str	r2, [r7, #48]	; 0x30
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800682c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e3      	bne.n	8006802 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a15      	ldr	r2, [pc, #84]	; (8006894 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800683e:	675a      	str	r2, [r3, #116]	; 0x74
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f043 0320 	orr.w	r3, r3, #32
 8006854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	61ba      	str	r2, [r7, #24]
 8006866:	69b9      	ldr	r1, [r7, #24]
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e4      	bne.n	8006840 <UART_RxISR_16BIT_FIFOEN+0x310>
 8006876:	e007      	b.n	8006888 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0208 	orr.w	r2, r2, #8
 8006886:	619a      	str	r2, [r3, #24]
 8006888:	bf00      	nop
 800688a:	37b8      	adds	r7, #184	; 0xb8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40008000 	.word	0x40008000
 8006894:	08006019 	.word	0x08006019

08006898 <HAL_UARTEx_WakeupCallback>:
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_UARTEx_RxFifoFullCallback>:
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_UARTEx_TxFifoEmptyCallback>:
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_UARTEx_DisableFifoMode>:
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_UARTEx_DisableFifoMode+0x16>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e027      	b.n	800693a <HAL_UARTEx_DisableFifoMode+0x66>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2224      	movs	r2, #36	; 0x24
 80068f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	665a      	str	r2, [r3, #100]	; 0x64
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006938:	2300      	movs	r3, #0
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_UARTEx_SetTxFifoThreshold>:
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800695a:	2302      	movs	r3, #2
 800695c:	e02d      	b.n	80069ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2224      	movs	r2, #36	; 0x24
 800696a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8a4 	bl	8006ae8 <UARTEx_SetNbDataToProcess>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80069b8:	2300      	movs	r3, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_UARTEx_SetRxFifoThreshold>:
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e02d      	b.n	8006a36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2224      	movs	r2, #36	; 0x24
 80069e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f866 	bl	8006ae8 <UARTEx_SetNbDataToProcess>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006a34:	2300      	movs	r3, #0
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_UARTEx_ReceiveToIdle_DMA>:
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b08c      	sub	sp, #48	; 0x30
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	80fb      	strh	r3, [r7, #6]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d142      	bne.n	8006adc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e03b      	b.n	8006ade <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	671a      	str	r2, [r3, #112]	; 0x70
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	461a      	mov	r2, r3
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7fe fd4b 	bl	8005514 <UART_Start_Receive_DMA>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d124      	bne.n	8006ad6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d11d      	bne.n	8006ad0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2210      	movs	r2, #16
 8006a9a:	621a      	str	r2, [r3, #32]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f043 0310 	orr.w	r3, r3, #16
 8006ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
 8006abc:	623a      	str	r2, [r7, #32]
 8006abe:	6a39      	ldr	r1, [r7, #32]
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e6      	bne.n	8006a9c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8006ace:	e002      	b.n	8006ad6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ada:	e000      	b.n	8006ade <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
 8006adc:	2302      	movs	r3, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3730      	adds	r7, #48	; 0x30
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <UARTEx_SetNbDataToProcess>:
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d108      	bne.n	8006b0a <UARTEx_SetNbDataToProcess+0x22>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8006b08:	e031      	b.n	8006b6e <UARTEx_SetNbDataToProcess+0x86>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	73fb      	strb	r3, [r7, #15]
 8006b0e:	2308      	movs	r3, #8
 8006b10:	73bb      	strb	r3, [r7, #14]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	0e5b      	lsrs	r3, r3, #25
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	737b      	strb	r3, [r7, #13]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	0f5b      	lsrs	r3, r3, #29
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	733b      	strb	r3, [r7, #12]
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	7b3a      	ldrb	r2, [r7, #12]
 8006b36:	4911      	ldr	r1, [pc, #68]	; (8006b7c <UARTEx_SetNbDataToProcess+0x94>)
 8006b38:	5c8a      	ldrb	r2, [r1, r2]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	7b3a      	ldrb	r2, [r7, #12]
 8006b40:	490f      	ldr	r1, [pc, #60]	; (8006b80 <UARTEx_SetNbDataToProcess+0x98>)
 8006b42:	5c8a      	ldrb	r2, [r1, r2]
 8006b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	7b7a      	ldrb	r2, [r7, #13]
 8006b54:	4909      	ldr	r1, [pc, #36]	; (8006b7c <UARTEx_SetNbDataToProcess+0x94>)
 8006b56:	5c8a      	ldrb	r2, [r1, r2]
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
 8006b5c:	7b7a      	ldrb	r2, [r7, #13]
 8006b5e:	4908      	ldr	r1, [pc, #32]	; (8006b80 <UARTEx_SetNbDataToProcess+0x98>)
 8006b60:	5c8a      	ldrb	r2, [r1, r2]
 8006b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	0800bfb4 	.word	0x0800bfb4
 8006b80:	0800bfbc 	.word	0x0800bfbc

08006b84 <USB_DisableGlobalInt>:
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006bac:	2300      	movs	r3, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_DevInit>:
 8006bba:	b084      	sub	sp, #16
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	f107 0014 	add.w	r0, r7, #20
 8006bc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8006bec:	2300      	movs	r3, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	b004      	add	sp, #16
 8006bfa:	4770      	bx	lr

08006bfc <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c0e:	4619      	mov	r1, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	425a      	negs	r2, r3
 8006c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c28:	bf58      	it	pl
 8006c2a:	4253      	negpl	r3, r2
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c3a:	2b80      	cmp	r3, #128	; 0x80
 8006c3c:	d113      	bne.n	8006c66 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	425a      	negs	r2, r3
 8006c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c58:	bf58      	it	pl
 8006c5a:	4253      	negpl	r3, r2
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8006c64:	e00b      	b.n	8006c7e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c74:	3301      	adds	r3, #1
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f805 	bl	8006cae <RingGetNBytes>
 8006ca4:	4603      	mov	r3, r0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <RingGetNBytes+0x1e>
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <RingGetNBytes+0x22>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e03e      	b.n	8006d4e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	2b80      	cmp	r3, #128	; 0x80
 8006cd4:	d901      	bls.n	8006cda <RingGetNBytes+0x2c>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e039      	b.n	8006d4e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
 8006cde:	e01b      	b.n	8006d18 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	5c52      	ldrb	r2, [r2, r1]
 8006cf2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	425a      	negs	r2, r3
 8006cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d06:	bf58      	it	pl
 8006d08:	4253      	negpl	r3, r2
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	3301      	adds	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
 8006d18:	7dfa      	ldrb	r2, [r7, #23]
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d205      	bcs.n	8006d2c <RingGetNBytes+0x7e>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006d26:	7dfa      	ldrb	r2, [r7, #23]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d3d9      	bcc.n	8006ce0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f805 	bl	8006d56 <RingClear>

	return uCounter;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8006d94:	4b42      	ldr	r3, [pc, #264]	; (8006ea0 <ModbusInit+0x114>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d87d      	bhi.n	8006e98 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	33bc      	adds	r3, #188	; 0xbc
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ffd8 	bl	8006d56 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d109      	bne.n	8006dc2 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8006dae:	4a3d      	ldr	r2, [pc, #244]	; (8006ea4 <ModbusInit+0x118>)
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	483d      	ldr	r0, [pc, #244]	; (8006ea8 <ModbusInit+0x11c>)
 8006db4:	f001 fcfa 	bl	80087ac <osThreadNew>
 8006db8:	4602      	mov	r2, r0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006dc0:	e033      	b.n	8006e2a <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d12e      	bne.n	8006e28 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8006dca:	4a38      	ldr	r2, [pc, #224]	; (8006eac <ModbusInit+0x120>)
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4838      	ldr	r0, [pc, #224]	; (8006eb0 <ModbusInit+0x124>)
 8006dd0:	f001 fcec 	bl	80087ac <osThreadNew>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006de2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006dea:	4a32      	ldr	r2, [pc, #200]	; (8006eb4 <ModbusInit+0x128>)
 8006dec:	9200      	str	r2, [sp, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	4831      	ldr	r0, [pc, #196]	; (8006eb8 <ModbusInit+0x12c>)
 8006df2:	f004 f851 	bl	800ae98 <xTimerCreate>
 8006df6:	4602      	mov	r2, r0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d100      	bne.n	8006e0a <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8006e08:	e7fe      	b.n	8006e08 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8006e0a:	4a2c      	ldr	r2, [pc, #176]	; (8006ebc <ModbusInit+0x130>)
 8006e0c:	2110      	movs	r1, #16
 8006e0e:	2002      	movs	r0, #2
 8006e10:	f001 fde7 	bl	80089e2 <osMessageQueueNew>
 8006e14:	4602      	mov	r2, r0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8006e26:	e7fe      	b.n	8006e26 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8006e28:	e7fe      	b.n	8006e28 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d100      	bne.n	8006e36 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8006e34:	e7fe      	b.n	8006e34 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8006e3c:	4a20      	ldr	r2, [pc, #128]	; (8006ec0 <ModbusInit+0x134>)
 8006e3e:	9200      	str	r2, [sp, #0]
 8006e40:	2200      	movs	r2, #0
 8006e42:	2105      	movs	r1, #5
 8006e44:	481f      	ldr	r0, [pc, #124]	; (8006ec4 <ModbusInit+0x138>)
 8006e46:	f004 f827 	bl	800ae98 <xTimerCreate>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d100      	bne.n	8006e5e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8006e5c:	e7fe      	b.n	8006e5c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8006e5e:	4a1a      	ldr	r2, [pc, #104]	; (8006ec8 <ModbusInit+0x13c>)
 8006e60:	2101      	movs	r1, #1
 8006e62:	2001      	movs	r0, #1
 8006e64:	f001 fd34 	bl	80088d0 <osSemaphoreNew>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d100      	bne.n	8006e7c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8006e7a:	e7fe      	b.n	8006e7a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8006e7c:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <ModbusInit+0x114>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <ModbusInit+0x140>)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8006e8a:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <ModbusInit+0x114>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	4b03      	ldr	r3, [pc, #12]	; (8006ea0 <ModbusInit+0x114>)
 8006e94:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8006e96:	e000      	b.n	8006e9a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8006e98:	e7fe      	b.n	8006e98 <ModbusInit+0x10c>
}
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000067c 	.word	0x2000067c
 8006ea4:	0800bfdc 	.word	0x0800bfdc
 8006ea8:	080070ed 	.word	0x080070ed
 8006eac:	0800c000 	.word	0x0800c000
 8006eb0:	08007561 	.word	0x08007561
 8006eb4:	08007091 	.word	0x08007091
 8006eb8:	0800bec8 	.word	0x0800bec8
 8006ebc:	0800bfc4 	.word	0x0800bfc4
 8006ec0:	0800700d 	.word	0x0800700d
 8006ec4:	0800bed8 	.word	0x0800bed8
 8006ec8:	0800c024 	.word	0x0800c024
 8006ecc:	20000674 	.word	0x20000674

08006ed0 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d00f      	beq.n	8006f02 <ModbusStart+0x32>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d00a      	beq.n	8006f02 <ModbusStart+0x32>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d005      	beq.n	8006f02 <ModbusStart+0x32>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d000      	beq.n	8006f02 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8006f00:	e7fe      	b.n	8006f00 <ModbusStart+0x30>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d004      	beq.n	8006f16 <ModbusStart+0x46>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d15c      	bne.n	8006fd0 <ModbusStart+0x100>
	{

	      if (modH->EN_Port != NULL )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <ModbusStart+0x5e>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68d8      	ldr	r0, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	8a1b      	ldrh	r3, [r3, #16]
 8006f26:	2200      	movs	r2, #0
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f7fa fd2b 	bl	8001984 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d105      	bne.n	8006f42 <ModbusStart+0x72>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d100      	bne.n	8006f42 <ModbusStart+0x72>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8006f40:	e7fe      	b.n	8006f40 <ModbusStart+0x70>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8006f42:	bf00      	nop
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fd fdcf 	bl	8004aec <HAL_UART_GetState>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d1f7      	bne.n	8006f44 <ModbusStart+0x74>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d11a      	bne.n	8006f94 <ModbusStart+0xc4>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6858      	ldr	r0, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	33bc      	adds	r3, #188	; 0xbc
 8006f66:	2280      	movs	r2, #128	; 0x80
 8006f68:	4619      	mov	r1, r3
 8006f6a:	f7ff fd68 	bl	8006a3e <HAL_UARTEx_ReceiveToIdle_DMA>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d000      	beq.n	8006f76 <ModbusStart+0xa6>
        	   {
        	         while(1)
 8006f74:	e7fe      	b.n	8006f74 <ModbusStart+0xa4>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0204 	bic.w	r2, r2, #4
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e00b      	b.n	8006fac <ModbusStart+0xdc>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6858      	ldr	r0, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	33a6      	adds	r3, #166	; 0xa6
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	f7fc ff8a 	bl	8003eb8 <HAL_UART_Receive_IT>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d000      	beq.n	8006fac <ModbusStart+0xdc>
        	  {
        	           while(1)
 8006faa:	e7fe      	b.n	8006faa <ModbusStart+0xda>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	7a1b      	ldrb	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <ModbusStart+0xee>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d100      	bne.n	8006fbe <ModbusStart+0xee>
          {
        	  while(1)
 8006fbc:	e7fe      	b.n	8006fbc <ModbusStart+0xec>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7a1b      	ldrb	r3, [r3, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <ModbusStart+0x100>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d100      	bne.n	8006fd0 <ModbusStart+0x100>
          {
             	  while(1)
 8006fce:	e7fe      	b.n	8006fce <ModbusStart+0xfe>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af02      	add	r7, sp, #8
 8007012:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e02a      	b.n	8007070 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800701a:	4a1b      	ldr	r2, [pc, #108]	; (8007088 <vTimerCallbackT35+0x7c>)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d11e      	bne.n	800706a <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800702c:	4a16      	ldr	r2, [pc, #88]	; (8007088 <vTimerCallbackT35+0x7c>)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b04      	cmp	r3, #4
 8007038:	d10c      	bne.n	8007054 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800703a:	4a13      	ldr	r2, [pc, #76]	; (8007088 <vTimerCallbackT35+0x7c>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007042:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8007046:	2300      	movs	r3, #0
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	2200      	movs	r2, #0
 800704e:	2103      	movs	r1, #3
 8007050:	f003 ff7e 	bl	800af50 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8007054:	4a0c      	ldr	r2, [pc, #48]	; (8007088 <vTimerCallbackT35+0x7c>)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8007060:	2300      	movs	r3, #0
 8007062:	2203      	movs	r2, #3
 8007064:	2100      	movs	r1, #0
 8007066:	f003 fce7 	bl	800aa38 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <vTimerCallbackT35+0x80>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4293      	cmp	r3, r2
 800707a:	dbce      	blt.n	800701a <vTimerCallbackT35+0xe>
		}

	}
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000674 	.word	0x20000674
 800708c:	2000067c 	.word	0x2000067c

08007090 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	e017      	b.n	80070ce <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800709e:	4a11      	ldr	r2, [pc, #68]	; (80070e4 <vTimerCallbackTimeout+0x54>)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d10b      	bne.n	80070c8 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80070b0:	4a0c      	ldr	r2, [pc, #48]	; (80070e4 <vTimerCallbackTimeout+0x54>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80070bc:	2300      	movs	r3, #0
 80070be:	2203      	movs	r2, #3
 80070c0:	f06f 0107 	mvn.w	r1, #7
 80070c4:	f003 fcb8 	bl	800aa38 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <vTimerCallbackTimeout+0x58>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4293      	cmp	r3, r2
 80070d8:	dbe1      	blt.n	800709e <vTimerCallbackTimeout+0xe>
		}

	}

}
 80070da:	bf00      	nop
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000674 	.word	0x20000674
 80070e8:	2000067c 	.word	0x2000067c

080070ec <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	749a      	strb	r2, [r3, #18]
			  	 continue;
			  }
	  }
#endif

   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007104:	2b01      	cmp	r3, #1
 8007106:	d004      	beq.n	8007112 <StartTaskModbusSlave+0x26>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800710e:	2b04      	cmp	r3, #4
 8007110:	d117      	bne.n	8007142 <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8007112:	f04f 31ff 	mov.w	r1, #4294967295
 8007116:	2001      	movs	r0, #1
 8007118:	f003 fc46 	bl	800a9a8 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fbed 	bl	80078fc <getRxBuffer>
 8007122:	4603      	mov	r3, r0
 8007124:	f113 0f03 	cmn.w	r3, #3
 8007128:	d10b      	bne.n	8007142 <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	22fd      	movs	r2, #253	; 0xfd
 800712e:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007136:	3301      	adds	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8007140:	e0a1      	b.n	8007286 <StartTaskModbusSlave+0x19a>
	  }
   }

   if (modH->u8BufferSize < 7)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007148:	2b06      	cmp	r3, #6
 800714a:	d80b      	bhi.n	8007164 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	22fa      	movs	r2, #250	; 0xfa
 8007150:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007158:	3301      	adds	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 8007162:	e090      	b.n	8007286 <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	7cda      	ldrb	r2, [r3, #19]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	7a1b      	ldrb	r3, [r3, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	f040 8089 	bne.w	8007284 <StartTaskModbusSlave+0x198>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fc0c 	bl	8007990 <validateRequest>
 8007178:	4603      	mov	r3, r0
 800717a:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00c      	beq.n	800719c <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8007182:	7afb      	ldrb	r3, [r7, #11]
 8007184:	68f9      	ldr	r1, [r7, #12]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fda6 	bl	8007cd8 <buildException>
			sendTxBuffer(modH);
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fdc2 	bl	8007d16 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8007192:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800719a:	e074      	b.n	8007286 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80071a8:	f04f 31ff 	mov.w	r1, #4294967295
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 f995 	bl	80094dc <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	7d1b      	ldrb	r3, [r3, #20]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	2b0f      	cmp	r3, #15
 80071ba:	d859      	bhi.n	8007270 <StartTaskModbusSlave+0x184>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <StartTaskModbusSlave+0xd8>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	08007205 	.word	0x08007205
 80071c8:	08007205 	.word	0x08007205
 80071cc:	08007217 	.word	0x08007217
 80071d0:	08007217 	.word	0x08007217
 80071d4:	08007229 	.word	0x08007229
 80071d8:	0800723b 	.word	0x0800723b
 80071dc:	08007271 	.word	0x08007271
 80071e0:	08007271 	.word	0x08007271
 80071e4:	08007271 	.word	0x08007271
 80071e8:	08007271 	.word	0x08007271
 80071ec:	08007271 	.word	0x08007271
 80071f0:	08007271 	.word	0x08007271
 80071f4:	08007271 	.word	0x08007271
 80071f8:	08007271 	.word	0x08007271
 80071fc:	0800724d 	.word	0x0800724d
 8007200:	0800725f 	.word	0x0800725f
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fe28 	bl	8007e5a <process_FC1>
 800720a:	4603      	mov	r3, r0
 800720c:	461a      	mov	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8007214:	e02d      	b.n	8007272 <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 fed4 	bl	8007fc4 <process_FC3>
 800721c:	4603      	mov	r3, r0
 800721e:	461a      	mov	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8007226:	e024      	b.n	8007272 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 ff36 	bl	800809a <process_FC5>
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8007238:	e01b      	b.n	8007272 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 ff86 	bl	800814c <process_FC6>
 8007240:	4603      	mov	r3, r0
 8007242:	461a      	mov	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800724a:	e012      	b.n	8007272 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 ffaf 	bl	80081b0 <process_FC15>
 8007252:	4603      	mov	r3, r0
 8007254:	461a      	mov	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800725c:	e009      	b.n	8007272 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f001 f834 	bl	80082cc <process_FC16>
 8007264:	4603      	mov	r3, r0
 8007266:	461a      	mov	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800726e:	e000      	b.n	8007272 <StartTaskModbusSlave+0x186>
			default:
				break;
 8007270:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8007278:	2300      	movs	r3, #0
 800727a:	2200      	movs	r2, #0
 800727c:	2100      	movs	r1, #0
 800727e:	f001 feb3 	bl	8008fe8 <xQueueGenericSend>

	 continue;
 8007282:	e000      	b.n	8007286 <StartTaskModbusSlave+0x19a>
    	continue;
 8007284:	bf00      	nop
  {
 8007286:	e737      	b.n	80070f8 <StartTaskModbusSlave+0xc>

08007288 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8007288:	b084      	sub	sp, #16
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	f107 001c 	add.w	r0, r7, #28
 8007296:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80072a4:	f04f 31ff 	mov.w	r1, #4294967295
 80072a8:	4618      	mov	r0, r3
 80072aa:	f002 f917 	bl	80094dc <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7a1b      	ldrb	r3, [r3, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <SendQuery+0x32>
 80072b6:	23ff      	movs	r3, #255	; 0xff
 80072b8:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <SendQuery+0x40>
 80072c4:	23fe      	movs	r3, #254	; 0xfe
 80072c6:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80072c8:	7f3b      	ldrb	r3, [r7, #28]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <SendQuery+0x4c>
 80072ce:	7f3b      	ldrb	r3, [r7, #28]
 80072d0:	2bf7      	cmp	r3, #247	; 0xf7
 80072d2:	d901      	bls.n	80072d8 <SendQuery+0x50>
 80072d4:	23f7      	movs	r3, #247	; 0xf7
 80072d6:	73bb      	strb	r3, [r7, #14]


	if(error)
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00e      	beq.n	80072fc <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 80072de:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80072ec:	2300      	movs	r3, #0
 80072ee:	2200      	movs	r2, #0
 80072f0:	2100      	movs	r1, #0
 80072f2:	f001 fe79 	bl	8008fe8 <xQueueGenericSend>
		 return error;
 80072f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072fa:	e129      	b.n	8007550 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 80072fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8007304:	7f3a      	ldrb	r2, [r7, #28]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800730a:	7f7a      	ldrb	r2, [r7, #29]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8007310:	8bfb      	ldrh	r3, [r7, #30]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	b29b      	uxth	r3, r3
 8007316:	b2da      	uxtb	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800731c:	8bfb      	ldrh	r3, [r7, #30]
 800731e:	b2da      	uxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8007324:	7f7b      	ldrb	r3, [r7, #29]
 8007326:	3b01      	subs	r3, #1
 8007328:	2b0f      	cmp	r3, #15
 800732a:	f200 80fe 	bhi.w	800752a <SendQuery+0x2a2>
 800732e:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <SendQuery+0xac>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	08007375 	.word	0x08007375
 8007338:	08007375 	.word	0x08007375
 800733c:	08007375 	.word	0x08007375
 8007340:	08007375 	.word	0x08007375
 8007344:	08007393 	.word	0x08007393
 8007348:	080073b5 	.word	0x080073b5
 800734c:	0800752b 	.word	0x0800752b
 8007350:	0800752b 	.word	0x0800752b
 8007354:	0800752b 	.word	0x0800752b
 8007358:	0800752b 	.word	0x0800752b
 800735c:	0800752b 	.word	0x0800752b
 8007360:	0800752b 	.word	0x0800752b
 8007364:	0800752b 	.word	0x0800752b
 8007368:	0800752b 	.word	0x0800752b
 800736c:	080073d7 	.word	0x080073d7
 8007370:	08007495 	.word	0x08007495
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8007374:	8c3b      	ldrh	r3, [r7, #32]
 8007376:	0a1b      	lsrs	r3, r3, #8
 8007378:	b29b      	uxth	r3, r3
 800737a:	b2da      	uxtb	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8007380:	8c3b      	ldrh	r3, [r7, #32]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2206      	movs	r2, #6
 800738c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8007390:	e0cb      	b.n	800752a <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <SendQuery+0x116>
 800739a:	22ff      	movs	r2, #255	; 0xff
 800739c:	e000      	b.n	80073a0 <SendQuery+0x118>
 800739e:	2200      	movs	r2, #0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2206      	movs	r2, #6
 80073ae:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80073b2:	e0ba      	b.n	800752a <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	0a1b      	lsrs	r3, r3, #8
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2206      	movs	r2, #6
 80073d0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80073d4:	e0a9      	b.n	800752a <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80073d6:	8c3b      	ldrh	r3, [r7, #32]
 80073d8:	091b      	lsrs	r3, r3, #4
 80073da:	b29b      	uxth	r3, r3
 80073dc:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 80073de:	7a7b      	ldrb	r3, [r7, #9]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 80073e4:	8c3b      	ldrh	r3, [r7, #32]
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <SendQuery+0x174>
	    {
	        u8bytesno++;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	3301      	adds	r3, #1
 80073f4:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 80073f6:	7a7b      	ldrb	r3, [r7, #9]
 80073f8:	3301      	adds	r3, #1
 80073fa:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80073fc:	8c3b      	ldrh	r3, [r7, #32]
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	b29b      	uxth	r3, r3
 8007402:	b2da      	uxtb	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8007408:	8c3b      	ldrh	r3, [r7, #32]
 800740a:	b2da      	uxtb	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	7bfa      	ldrb	r2, [r7, #15]
 8007414:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2207      	movs	r2, #7
 800741a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800741e:	2300      	movs	r3, #0
 8007420:	81bb      	strh	r3, [r7, #12]
 8007422:	e031      	b.n	8007488 <SendQuery+0x200>
	    {
	        if(i%2)
 8007424:	89bb      	ldrh	r3, [r7, #12]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00f      	beq.n	8007450 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8007430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007432:	89bb      	ldrh	r3, [r7, #12]
 8007434:	085b      	lsrs	r3, r3, #1
 8007436:	b29b      	uxth	r3, r3
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4413      	add	r3, r2
 800743c:	881a      	ldrh	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007444:	4619      	mov	r1, r3
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	440b      	add	r3, r1
 800744c:	74da      	strb	r2, [r3, #19]
 800744e:	e010      	b.n	8007472 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8007450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007452:	89bb      	ldrh	r3, [r7, #12]
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	b29b      	uxth	r3, r3
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	0a1b      	lsrs	r3, r3, #8
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007468:	4619      	mov	r1, r3
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	440b      	add	r3, r1
 8007470:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007478:	3301      	adds	r3, #1
 800747a:	b2da      	uxtb	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8007482:	89bb      	ldrh	r3, [r7, #12]
 8007484:	3301      	adds	r3, #1
 8007486:	81bb      	strh	r3, [r7, #12]
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	b29b      	uxth	r3, r3
 800748c:	89ba      	ldrh	r2, [r7, #12]
 800748e:	429a      	cmp	r2, r3
 8007490:	d3c8      	bcc.n	8007424 <SendQuery+0x19c>
	    }
	    break;
 8007492:	e04a      	b.n	800752a <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8007494:	8c3b      	ldrh	r3, [r7, #32]
 8007496:	0a1b      	lsrs	r3, r3, #8
 8007498:	b29b      	uxth	r3, r3
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80074a0:	8c3b      	ldrh	r3, [r7, #32]
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80074a8:	8c3b      	ldrh	r3, [r7, #32]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2207      	movs	r2, #7
 80074b8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80074bc:	2300      	movs	r3, #0
 80074be:	817b      	strh	r3, [r7, #10]
 80074c0:	e02e      	b.n	8007520 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80074c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c4:	897b      	ldrh	r3, [r7, #10]
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	4413      	add	r3, r2
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	0a1b      	lsrs	r3, r3, #8
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80074d6:	4619      	mov	r1, r3
 80074d8:	b2d2      	uxtb	r2, r2
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	440b      	add	r3, r1
 80074de:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80074e6:	3301      	adds	r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 80074f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f2:	897b      	ldrh	r3, [r7, #10]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4413      	add	r3, r2
 80074f8:	881a      	ldrh	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007500:	4619      	mov	r1, r3
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	440b      	add	r3, r1
 8007508:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007510:	3301      	adds	r3, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800751a:	897b      	ldrh	r3, [r7, #10]
 800751c:	3301      	adds	r3, #1
 800751e:	817b      	strh	r3, [r7, #10]
 8007520:	8c3b      	ldrh	r3, [r7, #32]
 8007522:	897a      	ldrh	r2, [r7, #10]
 8007524:	429a      	cmp	r2, r3
 8007526:	d3cc      	bcc.n	80074c2 <SendQuery+0x23a>
	    }
	    break;
 8007528:	bf00      	nop
	}


	sendTxBuffer(modH);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fbf3 	bl	8007d16 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8007536:	2300      	movs	r3, #0
 8007538:	2200      	movs	r2, #0
 800753a:	2100      	movs	r1, #0
 800753c:	f001 fd54 	bl	8008fe8 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	749a      	strb	r2, [r3, #18]
	return 0;
 800754e:	2300      	movs	r3, #0


}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800755a:	b004      	add	sp, #16
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop

08007560 <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08c      	sub	sp, #48	; 0x30
 8007564:	af02      	add	r7, sp, #8
 8007566:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007572:	f107 010c 	add.w	r1, r7, #12
 8007576:	f04f 32ff 	mov.w	r2, #4294967295
 800757a:	4618      	mov	r0, r3
 800757c:	f001 fece 	bl	800931c <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	f107 030c 	add.w	r3, r7, #12
 8007588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800758a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800758c:	f7ff fe7c 	bl	8007288 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007590:	f04f 31ff 	mov.w	r1, #4294967295
 8007594:	2001      	movs	r0, #1
 8007596:	f003 fa07 	bl	800a9a8 <ulTaskNotifyTake>
 800759a:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	2200      	movs	r2, #0
 80075a0:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d018      	beq.n	80075da <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	22f8      	movs	r2, #248	; 0xf8
 80075b4:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80075bc:	3301      	adds	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80075c6:	69b8      	ldr	r0, [r7, #24]
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80075ce:	4619      	mov	r1, r3
 80075d0:	2300      	movs	r3, #0
 80075d2:	2203      	movs	r2, #3
 80075d4:	f003 fa30 	bl	800aa38 <xTaskGenericNotify>
    	  continue;
 80075d8:	e09a      	b.n	8007710 <StartTaskModbusMaster+0x1b0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 80075da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075dc:	f000 f98e 	bl	80078fc <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80075e6:	2b05      	cmp	r3, #5
 80075e8:	d818      	bhi.n	800761c <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	22fa      	movs	r2, #250	; 0xfa
 80075f6:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80075fe:	3301      	adds	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8007608:	69b8      	ldr	r0, [r7, #24]
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8007610:	4619      	mov	r1, r3
 8007612:	2300      	movs	r3, #0
 8007614:	2203      	movs	r2, #3
 8007616:	f003 fa0f 	bl	800aa38 <xTaskGenericNotify>
		  continue;
 800761a:	e079      	b.n	8007710 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8007622:	2300      	movs	r3, #0
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	2200      	movs	r2, #0
 800762a:	2103      	movs	r1, #3
 800762c:	f003 fc90 	bl	800af50 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8007630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007632:	f000 f8f5 	bl	8007820 <validateAnswer>
 8007636:	4603      	mov	r3, r0
 8007638:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800763a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	2200      	movs	r2, #0
 8007646:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	7ffa      	ldrb	r2, [r7, #31]
 800764e:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8007650:	69b8      	ldr	r0, [r7, #24]
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8007658:	4619      	mov	r1, r3
 800765a:	2300      	movs	r3, #0
 800765c:	2203      	movs	r2, #3
 800765e:	f003 f9eb 	bl	800aa38 <xTaskGenericNotify>
	     continue;
 8007662:	e055      	b.n	8007710 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	7ffa      	ldrb	r2, [r7, #31]
 8007668:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007670:	f04f 31ff 	mov.w	r1, #4294967295
 8007674:	4618      	mov	r0, r3
 8007676:	f001 ff31 	bl	80094dc <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	7d1b      	ldrb	r3, [r3, #20]
 800767e:	3b01      	subs	r3, #1
 8007680:	2b0f      	cmp	r3, #15
 8007682:	d82b      	bhi.n	80076dc <StartTaskModbusMaster+0x17c>
 8007684:	a201      	add	r2, pc, #4	; (adr r2, 800768c <StartTaskModbusMaster+0x12c>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	080076cd 	.word	0x080076cd
 8007690:	080076cd 	.word	0x080076cd
 8007694:	080076d5 	.word	0x080076d5
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076dd 	.word	0x080076dd
 80076a0:	080076dd 	.word	0x080076dd
 80076a4:	080076dd 	.word	0x080076dd
 80076a8:	080076dd 	.word	0x080076dd
 80076ac:	080076dd 	.word	0x080076dd
 80076b0:	080076dd 	.word	0x080076dd
 80076b4:	080076dd 	.word	0x080076dd
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	080076dd 	.word	0x080076dd
 80076c0:	080076dd 	.word	0x080076dd
 80076c4:	080076dd 	.word	0x080076dd
 80076c8:	080076dd 	.word	0x080076dd
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80076cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ce:	f000 f821 	bl	8007714 <get_FC1>
	      break;
 80076d2:	e004      	b.n	80076de <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80076d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076d6:	f000 f874 	bl	80077c2 <get_FC3>
	      break;
 80076da:	e000      	b.n	80076de <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80076dc:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10e      	bne.n	800770e <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80076f6:	2300      	movs	r3, #0
 80076f8:	2200      	movs	r2, #0
 80076fa:	2100      	movs	r1, #0
 80076fc:	f001 fc74 	bl	8008fe8 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8007700:	69b8      	ldr	r0, [r7, #24]
 8007702:	2300      	movs	r3, #0
 8007704:	2203      	movs	r2, #3
 8007706:	f06f 010a 	mvn.w	r1, #10
 800770a:	f003 f995 	bl	800aa38 <xTaskGenericNotify>
	  }


	  continue;
 800770e:	bf00      	nop
  {
 8007710:	e72c      	b.n	800756c <StartTaskModbusMaster+0xc>
 8007712:	bf00      	nop

08007714 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8007714:	b590      	push	{r4, r7, lr}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800771c:	2303      	movs	r3, #3
 800771e:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]
 8007724:	e043      	b.n	80077ae <get_FC1+0x9a>

        if(i%2)
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01c      	beq.n	800776c <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8007732:	7bfa      	ldrb	r2, [r7, #15]
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	4413      	add	r3, r2
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	4413      	add	r3, r2
 800773c:	7cd8      	ldrb	r0, [r3, #19]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	085b      	lsrs	r3, r3, #1
 8007748:	b2db      	uxtb	r3, r3
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	4413      	add	r3, r2
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b2d9      	uxtb	r1, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	18d4      	adds	r4, r2, r3
 8007762:	f000 fa5f 	bl	8007c24 <word>
 8007766:	4603      	mov	r3, r0
 8007768:	8023      	strh	r3, [r4, #0]
 800776a:	e01d      	b.n	80077a8 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	085b      	lsrs	r3, r3, #1
 8007776:	b2db      	uxtb	r3, r3
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	4413      	add	r3, r2
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	0a1b      	lsrs	r3, r3, #8
 8007780:	b29b      	uxth	r3, r3
 8007782:	b2d8      	uxtb	r0, r3
 8007784:	7bfa      	ldrb	r2, [r7, #15]
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	4413      	add	r3, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	7cd9      	ldrb	r1, [r3, #19]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	085b      	lsrs	r3, r3, #1
 800779a:	b2db      	uxtb	r3, r3
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	18d4      	adds	r4, r2, r3
 80077a0:	f000 fa40 	bl	8007c24 <word>
 80077a4:	4603      	mov	r3, r0
 80077a6:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	3301      	adds	r3, #1
 80077ac:	73fb      	strb	r3, [r7, #15]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7d5b      	ldrb	r3, [r3, #21]
 80077b2:	7bfa      	ldrb	r2, [r7, #15]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d3b6      	bcc.n	8007726 <get_FC1+0x12>
        }

     }
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd90      	pop	{r4, r7, pc}

080077c2 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80077c2:	b590      	push	{r4, r7, lr}
 80077c4:	b085      	sub	sp, #20
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80077ca:	2303      	movs	r3, #3
 80077cc:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80077ce:	2300      	movs	r3, #0
 80077d0:	73bb      	strb	r3, [r7, #14]
 80077d2:	e018      	b.n	8007806 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	7cd8      	ldrb	r0, [r3, #19]
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	3301      	adds	r3, #1
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	4413      	add	r3, r2
 80077e4:	7cd9      	ldrb	r1, [r3, #19]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	18d4      	adds	r4, r2, r3
 80077f2:	f000 fa17 	bl	8007c24 <word>
 80077f6:	4603      	mov	r3, r0
 80077f8:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	3302      	adds	r3, #2
 80077fe:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	3301      	adds	r3, #1
 8007804:	73bb      	strb	r3, [r7, #14]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7d5b      	ldrb	r3, [r3, #21]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	b2db      	uxtb	r3, r3
 800780e:	7bba      	ldrb	r2, [r7, #14]
 8007810:	429a      	cmp	r2, r3
 8007812:	d3df      	bcc.n	80077d4 <get_FC3+0x12>
    }
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	bd90      	pop	{r4, r7, pc}
	...

08007820 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800782e:	3b02      	subs	r3, #2
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	4413      	add	r3, r2
 8007834:	7cdb      	ldrb	r3, [r3, #19]
 8007836:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8007838:	b21a      	sxth	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007840:	3b01      	subs	r3, #1
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	440b      	add	r3, r1
 8007846:	7cdb      	ldrb	r3, [r3, #19]
 8007848:	b21b      	sxth	r3, r3
 800784a:	4313      	orrs	r3, r2
 800784c:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800784e:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f103 0213 	add.w	r2, r3, #19
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800785c:	3b02      	subs	r3, #2
 800785e:	b2db      	uxtb	r3, r3
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f000 f9f1 	bl	8007c4a <calcCRC>
 8007868:	4603      	mov	r3, r0
 800786a:	461a      	mov	r2, r3
 800786c:	89bb      	ldrh	r3, [r7, #12]
 800786e:	4293      	cmp	r3, r2
 8007870:	d009      	beq.n	8007886 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007878:	3301      	adds	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8007882:	23fc      	movs	r3, #252	; 0xfc
 8007884:	e034      	b.n	80078f0 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7d1b      	ldrb	r3, [r3, #20]
 800788a:	b25b      	sxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	da09      	bge.n	80078a4 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007896:	3301      	adds	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 80078a0:	23fb      	movs	r3, #251	; 0xfb
 80078a2:	e025      	b.n	80078f0 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80078a8:	2300      	movs	r3, #0
 80078aa:	73bb      	strb	r3, [r7, #14]
 80078ac:	e00c      	b.n	80078c8 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	4a11      	ldr	r2, [pc, #68]	; (80078f8 <validateAnswer+0xd8>)
 80078b2:	5cd2      	ldrb	r2, [r2, r3]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7d1b      	ldrb	r3, [r3, #20]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d102      	bne.n	80078c2 <validateAnswer+0xa2>
        {
            isSupported = 1;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
            break;
 80078c0:	e005      	b.n	80078ce <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	3301      	adds	r3, #1
 80078c6:	73bb      	strb	r3, [r7, #14]
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2b07      	cmp	r3, #7
 80078cc:	d9ef      	bls.n	80078ae <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	f083 0301 	eor.w	r3, r3, #1
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80078e0:	3301      	adds	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e000      	b.n	80078f0 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	0800c034 	.word	0x0800c034

080078fc <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800790a:	2b01      	cmp	r3, #1
 800790c:	d104      	bne.n	8007918 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4618      	mov	r0, r3
 8007914:	f7fc fc32 	bl	800417c <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800791e:	2b00      	cmp	r3, #0
 8007920:	d008      	beq.n	8007934 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	33bc      	adds	r3, #188	; 0xbc
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff fa15 	bl	8006d56 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800792c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8007930:	81fb      	strh	r3, [r7, #14]
 8007932:	e019      	b.n	8007968 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3313      	adds	r3, #19
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7ff f9a2 	bl	8006c8a <RingGetAllBytes>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8007956:	3301      	adds	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007966:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800796e:	2b01      	cmp	r3, #1
 8007970:	d107      	bne.n	8007982 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6858      	ldr	r0, [r3, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	33a6      	adds	r3, #166	; 0xa6
 800797a:	2201      	movs	r2, #1
 800797c:	4619      	mov	r1, r3
 800797e:	f7fc fa9b 	bl	8003eb8 <HAL_UART_Receive_IT>
	}

    return i16result;
 8007982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800799e:	3b02      	subs	r3, #2
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	7cdb      	ldrb	r3, [r3, #19]
 80079a6:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80079a8:	b21a      	sxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80079b0:	3b01      	subs	r3, #1
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	440b      	add	r3, r1
 80079b6:	7cdb      	ldrb	r3, [r3, #19]
 80079b8:	b21b      	sxth	r3, r3
 80079ba:	4313      	orrs	r3, r2
 80079bc:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80079be:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f103 0213 	add.w	r2, r3, #19
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80079cc:	3b02      	subs	r3, #2
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f000 f939 	bl	8007c4a <calcCRC>
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	893b      	ldrh	r3, [r7, #8]
 80079de:	4293      	cmp	r3, r2
 80079e0:	d009      	beq.n	80079f6 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80079e8:	3301      	adds	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 80079f2:	23fc      	movs	r3, #252	; 0xfc
 80079f4:	e10f      	b.n	8007c16 <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	73bb      	strb	r3, [r7, #14]
 80079fe:	e00c      	b.n	8007a1a <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	4a87      	ldr	r2, [pc, #540]	; (8007c20 <validateRequest+0x290>)
 8007a04:	5cd2      	ldrb	r2, [r2, r3]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7d1b      	ldrb	r3, [r3, #20]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d102      	bne.n	8007a14 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
	            break;
 8007a12:	e005      	b.n	8007a20 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	3301      	adds	r3, #1
 8007a18:	73bb      	strb	r3, [r7, #14]
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b07      	cmp	r3, #7
 8007a1e:	d9ef      	bls.n	8007a00 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	f083 0301 	eor.w	r3, r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007a32:	3301      	adds	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e0ea      	b.n	8007c16 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	7d1b      	ldrb	r3, [r3, #20]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	2b0f      	cmp	r3, #15
 8007a50:	f200 80e0 	bhi.w	8007c14 <validateRequest+0x284>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <validateRequest+0xcc>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007a9d 	.word	0x08007a9d
 8007a64:	08007bb5 	.word	0x08007bb5
 8007a68:	08007bb5 	.word	0x08007bb5
 8007a6c:	08007b49 	.word	0x08007b49
 8007a70:	08007b91 	.word	0x08007b91
 8007a74:	08007c15 	.word	0x08007c15
 8007a78:	08007c15 	.word	0x08007c15
 8007a7c:	08007c15 	.word	0x08007c15
 8007a80:	08007c15 	.word	0x08007c15
 8007a84:	08007c15 	.word	0x08007c15
 8007a88:	08007c15 	.word	0x08007c15
 8007a8c:	08007c15 	.word	0x08007c15
 8007a90:	08007c15 	.word	0x08007c15
 8007a94:	08007a9d 	.word	0x08007a9d
 8007a98:	08007bb5 	.word	0x08007bb5
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	7d5a      	ldrb	r2, [r3, #21]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7d9b      	ldrb	r3, [r3, #22]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	f000 f8bc 	bl	8007c24 <word>
 8007aac:	4603      	mov	r3, r0
 8007aae:	091b      	lsrs	r3, r3, #4
 8007ab0:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7dda      	ldrb	r2, [r3, #23]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7e1b      	ldrb	r3, [r3, #24]
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f000 f8b1 	bl	8007c24 <word>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	091b      	lsrs	r3, r3, #4
 8007ac6:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7dda      	ldrb	r2, [r3, #23]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7e1b      	ldrb	r3, [r3, #24]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f000 f8a6 	bl	8007c24 <word>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <validateRequest+0x15a>
 8007ae4:	897b      	ldrh	r3, [r7, #10]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8007aea:	89ba      	ldrh	r2, [r7, #12]
 8007aec:	897b      	ldrh	r3, [r7, #10]
 8007aee:	4413      	add	r3, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8007af6:	4293      	cmp	r3, r2
 8007af8:	dd01      	ble.n	8007afe <validateRequest+0x16e>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e08b      	b.n	8007c16 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	7dda      	ldrb	r2, [r3, #23]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7e1b      	ldrb	r3, [r3, #24]
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f000 f88b 	bl	8007c24 <word>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	08db      	lsrs	r3, r3, #3
 8007b12:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7dda      	ldrb	r2, [r3, #23]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7e1b      	ldrb	r3, [r3, #24]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	f000 f880 	bl	8007c24 <word>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <validateRequest+0x1a6>
 8007b30:	897b      	ldrh	r3, [r7, #10]
 8007b32:	3301      	adds	r3, #1
 8007b34:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8007b36:	897b      	ldrh	r3, [r7, #10]
 8007b38:	3305      	adds	r3, #5
 8007b3a:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8007b3c:	897b      	ldrh	r3, [r7, #10]
 8007b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b42:	d960      	bls.n	8007c06 <validateRequest+0x276>
 8007b44:	2303      	movs	r3, #3
 8007b46:	e066      	b.n	8007c16 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7d5a      	ldrb	r2, [r3, #21]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7d9b      	ldrb	r3, [r3, #22]
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f000 f866 	bl	8007c24 <word>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	091b      	lsrs	r3, r3, #4
 8007b5c:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7d5a      	ldrb	r2, [r3, #21]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7d9b      	ldrb	r3, [r3, #22]
 8007b66:	4619      	mov	r1, r3
 8007b68:	4610      	mov	r0, r2
 8007b6a:	f000 f85b 	bl	8007c24 <word>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <validateRequest+0x1f0>
 8007b7a:	89bb      	ldrh	r3, [r7, #12]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8007b86:	89ba      	ldrh	r2, [r7, #12]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d93e      	bls.n	8007c0a <validateRequest+0x27a>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e042      	b.n	8007c16 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	7d5a      	ldrb	r2, [r3, #21]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7d9b      	ldrb	r3, [r3, #22]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f000 f842 	bl	8007c24 <word>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8007baa:	89ba      	ldrh	r2, [r7, #12]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d92e      	bls.n	8007c0e <validateRequest+0x27e>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	e030      	b.n	8007c16 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	7d5a      	ldrb	r2, [r3, #21]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7d9b      	ldrb	r3, [r3, #22]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 f830 	bl	8007c24 <word>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	7dda      	ldrb	r2, [r3, #23]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7e1b      	ldrb	r3, [r3, #24]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f000 f826 	bl	8007c24 <word>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8007bdc:	89ba      	ldrh	r2, [r7, #12]
 8007bde:	897b      	ldrh	r3, [r7, #10]
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8007be8:	4293      	cmp	r3, r2
 8007bea:	dd01      	ble.n	8007bf0 <validateRequest+0x260>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e012      	b.n	8007c16 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8007bf0:	897b      	ldrh	r3, [r7, #10]
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3305      	adds	r3, #5
 8007bf8:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8007bfa:	897b      	ldrh	r3, [r7, #10]
 8007bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c00:	d907      	bls.n	8007c12 <validateRequest+0x282>
 8007c02:	2303      	movs	r3, #3
 8007c04:	e007      	b.n	8007c16 <validateRequest+0x286>
	        break;
 8007c06:	bf00      	nop
 8007c08:	e004      	b.n	8007c14 <validateRequest+0x284>
	        break;
 8007c0a:	bf00      	nop
 8007c0c:	e002      	b.n	8007c14 <validateRequest+0x284>
	        break;
 8007c0e:	bf00      	nop
 8007c10:	e000      	b.n	8007c14 <validateRequest+0x284>
	        break;
 8007c12:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8007c14:	2300      	movs	r3, #0

}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	0800c034 	.word	0x0800c034

08007c24 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	460a      	mov	r2, r1
 8007c2e:	71fb      	strb	r3, [r7, #7]
 8007c30:	4613      	mov	r3, r2
 8007c32:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8007c34:	79bb      	ldrb	r3, [r7, #6]
 8007c36:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8007c3c:	89bb      	ldrh	r3, [r7, #12]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8007c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c5a:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	74fb      	strb	r3, [r7, #19]
 8007c60:	e023      	b.n	8007caa <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8007c62:	7cfb      	ldrb	r3, [r7, #19]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	4413      	add	r3, r2
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	4053      	eors	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8007c72:	2301      	movs	r3, #1
 8007c74:	74bb      	strb	r3, [r7, #18]
 8007c76:	e012      	b.n	8007c9e <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	617b      	str	r3, [r7, #20]
            if (flag)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <calcCRC+0x4e>
                temp ^= 0xA001;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8007c92:	f083 0301 	eor.w	r3, r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8007c98:	7cbb      	ldrb	r3, [r7, #18]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	74bb      	strb	r3, [r7, #18]
 8007c9e:	7cbb      	ldrb	r3, [r7, #18]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d9e9      	bls.n	8007c78 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8007ca4:	7cfb      	ldrb	r3, [r7, #19]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	74fb      	strb	r3, [r7, #19]
 8007caa:	7cfa      	ldrb	r2, [r7, #19]
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d3d7      	bcc.n	8007c62 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	b29b      	uxth	r3, r3

}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	7d1b      	ldrb	r3, [r3, #20]
 8007ce8:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	7a1a      	ldrb	r2, [r3, #8]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	3b80      	subs	r3, #128	; 0x80
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	79fa      	ldrb	r2, [r7, #7]
 8007d00:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2203      	movs	r2, #3
 8007d06:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8007d0a:	bf00      	nop
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8007d16:	b590      	push	{r4, r7, lr}
 8007d18:	b087      	sub	sp, #28
 8007d1a:	af02      	add	r7, sp, #8
 8007d1c:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f103 0213 	add.w	r2, r3, #19
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	f7ff ff8c 	bl	8007c4a <calcCRC>
 8007d32:	4603      	mov	r3, r0
 8007d34:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8007d36:	89fb      	ldrh	r3, [r7, #14]
 8007d38:	0a1b      	lsrs	r3, r3, #8
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d42:	4619      	mov	r1, r3
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	440b      	add	r3, r1
 8007d4a:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d52:	3301      	adds	r3, #1
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d62:	4619      	mov	r1, r3
 8007d64:	89fb      	ldrh	r3, [r7, #14]
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	440b      	add	r3, r1
 8007d6c:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d74:	3301      	adds	r3, #1
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00c      	beq.n	8007da0 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fc fe06 	bl	800499c <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68d8      	ldr	r0, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8a1b      	ldrh	r3, [r3, #16]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	f7f9 fdf2 	bl	8001984 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d10c      	bne.n	8007dc4 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6858      	ldr	r0, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f103 0113 	add.w	r1, r3, #19
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	f7fb ffe7 	bl	8003d90 <HAL_UART_Transmit_IT>
 8007dc2:	e00b      	b.n	8007ddc <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6858      	ldr	r0, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f103 0113 	add.w	r1, r3, #19
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7fc f8ba 	bl	8003f50 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8007ddc:	21fa      	movs	r1, #250	; 0xfa
 8007dde:	2001      	movs	r0, #1
 8007de0:	f002 fde2 	bl	800a9a8 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8007de4:	bf00      	nop
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0f7      	beq.n	8007de6 <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00c      	beq.n	8007e18 <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68d8      	ldr	r0, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	8a1b      	ldrh	r3, [r3, #16]
 8007e06:	2200      	movs	r2, #0
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f7f9 fdbb 	bl	8001984 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fc fe16 	bl	8004a44 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d10c      	bne.n	8007e3a <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8007e26:	f002 f8ed 	bl	800a004 <xTaskGetTickCount>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	2300      	movs	r3, #0
 8007e32:	2102      	movs	r1, #2
 8007e34:	4620      	mov	r0, r4
 8007e36:	f003 f88b 	bl	800af50 <xTimerGenericCommand>
    	}

	}
#endif

     modH->u8BufferSize = 0;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8007e48:	3301      	adds	r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8007e52:	bf00      	nop
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd90      	pop	{r4, r7, pc}

08007e5a <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7d5a      	ldrb	r2, [r3, #21]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7d9b      	ldrb	r3, [r3, #22]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f7ff fed9 	bl	8007c24 <word>
 8007e72:	4603      	mov	r3, r0
 8007e74:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	7dda      	ldrb	r2, [r3, #23]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7e1b      	ldrb	r3, [r3, #24]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f7ff fecf 	bl	8007c24 <word>
 8007e86:	4603      	mov	r3, r0
 8007e88:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8007e8a:	8a3b      	ldrh	r3, [r7, #16]
 8007e8c:	08db      	lsrs	r3, r3, #3
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8007e92:	8a3b      	ldrh	r3, [r7, #16]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <process_FC1+0x4a>
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	7dfa      	ldrb	r2, [r7, #23]
 8007ea8:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2203      	movs	r2, #3
 8007eae:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007eb8:	461a      	mov	r2, r3
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	82bb      	strh	r3, [r7, #20]
 8007ed0:	e058      	b.n	8007f84 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8007ed2:	8a7a      	ldrh	r2, [r7, #18]
 8007ed4:	8abb      	ldrh	r3, [r7, #20]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8007eda:	89bb      	ldrh	r3, [r7, #12]
 8007edc:	091b      	lsrs	r3, r3, #4
 8007ede:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8007ee0:	89bb      	ldrh	r3, [r7, #12]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007ef0:	897b      	ldrh	r3, [r7, #10]
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	4413      	add	r3, r2
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	7a7b      	ldrb	r3, [r7, #9]
 8007efc:	fa42 f303 	asr.w	r3, r2, r3
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d014      	beq.n	8007f32 <process_FC1+0xd8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	7cda      	ldrb	r2, [r3, #19]
 8007f16:	7dbb      	ldrb	r3, [r7, #22]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8007f26:	4313      	orrs	r3, r2
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	440b      	add	r3, r1
 8007f2e:	74da      	strb	r2, [r3, #19]
 8007f30:	e015      	b.n	8007f5e <process_FC1+0x104>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f38:	461a      	mov	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	7cda      	ldrb	r2, [r3, #19]
 8007f40:	7dbb      	ldrb	r3, [r7, #22]
 8007f42:	2101      	movs	r1, #1
 8007f44:	fa01 f303 	lsl.w	r3, r1, r3
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	43db      	mvns	r3, r3
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8007f54:	4013      	ands	r3, r2
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	440b      	add	r3, r1
 8007f5c:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8007f5e:	7dbb      	ldrb	r3, [r7, #22]
 8007f60:	3301      	adds	r3, #1
 8007f62:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8007f64:	7dbb      	ldrb	r3, [r7, #22]
 8007f66:	2b07      	cmp	r3, #7
 8007f68:	d909      	bls.n	8007f7e <process_FC1+0x124>
        {
            u8bitsno = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f74:	3301      	adds	r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007f7e:	8abb      	ldrh	r3, [r7, #20]
 8007f80:	3301      	adds	r3, #1
 8007f82:	82bb      	strh	r3, [r7, #20]
 8007f84:	8aba      	ldrh	r2, [r7, #20]
 8007f86:	8a3b      	ldrh	r3, [r7, #16]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d3a2      	bcc.n	8007ed2 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8007f8c:	8a3b      	ldrh	r3, [r7, #16]
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d007      	beq.n	8007fa8 <process_FC1+0x14e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007fae:	3302      	adds	r3, #2
 8007fb0:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff feaf 	bl	8007d16 <sendTxBuffer>
    return u8CopyBufferSize;
 8007fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	7d5a      	ldrb	r2, [r3, #21]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7d9b      	ldrb	r3, [r3, #22]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	f7ff fe24 	bl	8007c24 <word>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7dda      	ldrb	r2, [r3, #23]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7e1b      	ldrb	r3, [r3, #24]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4610      	mov	r0, r2
 8007fec:	f7ff fe1a 	bl	8007c24 <word>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8007ff4:	7afb      	ldrb	r3, [r7, #11]
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2203      	movs	r2, #3
 8008002:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8008006:	89bb      	ldrh	r3, [r7, #12]
 8008008:	81fb      	strh	r3, [r7, #14]
 800800a:	e032      	b.n	8008072 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008012:	89fb      	ldrh	r3, [r7, #14]
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	4413      	add	r3, r2
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008024:	4619      	mov	r1, r3
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	440b      	add	r3, r1
 800802c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008034:	3301      	adds	r3, #1
 8008036:	b2da      	uxtb	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008044:	89fb      	ldrh	r3, [r7, #14]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	4413      	add	r3, r2
 800804a:	881a      	ldrh	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008052:	4619      	mov	r1, r3
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	440b      	add	r3, r1
 800805a:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008062:	3301      	adds	r3, #1
 8008064:	b2da      	uxtb	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800806c:	89fb      	ldrh	r3, [r7, #14]
 800806e:	3301      	adds	r3, #1
 8008070:	81fb      	strh	r3, [r7, #14]
 8008072:	89fa      	ldrh	r2, [r7, #14]
 8008074:	89b9      	ldrh	r1, [r7, #12]
 8008076:	7afb      	ldrb	r3, [r7, #11]
 8008078:	440b      	add	r3, r1
 800807a:	429a      	cmp	r2, r3
 800807c:	dbc6      	blt.n	800800c <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008084:	3302      	adds	r3, #2
 8008086:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff fe44 	bl	8007d16 <sendTxBuffer>

    return u8CopyBufferSize;
 800808e:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7d5a      	ldrb	r2, [r3, #21]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	7d9b      	ldrb	r3, [r3, #22]
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f7ff fdb9 	bl	8007c24 <word>
 80080b2:	4603      	mov	r3, r0
 80080b4:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 80080b6:	89fb      	ldrh	r3, [r7, #14]
 80080b8:	091b      	lsrs	r3, r3, #4
 80080ba:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 80080bc:	89fb      	ldrh	r3, [r7, #14]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	7ddb      	ldrb	r3, [r3, #23]
 80080ca:	2bff      	cmp	r3, #255	; 0xff
 80080cc:	d115      	bne.n	80080fa <process_FC5+0x60>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80080d4:	89bb      	ldrh	r3, [r7, #12]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	4413      	add	r3, r2
 80080da:	8819      	ldrh	r1, [r3, #0]
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	2201      	movs	r2, #1
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80080ec:	89bb      	ldrh	r3, [r7, #12]
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	4403      	add	r3, r0
 80080f2:	430a      	orrs	r2, r1
 80080f4:	b292      	uxth	r2, r2
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	e016      	b.n	8008128 <process_FC5+0x8e>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008100:	89bb      	ldrh	r3, [r7, #12]
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	4413      	add	r3, r2
 8008106:	8819      	ldrh	r1, [r3, #0]
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	2201      	movs	r2, #1
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	b29b      	uxth	r3, r3
 8008112:	43db      	mvns	r3, r3
 8008114:	b29a      	uxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800811c:	89bb      	ldrh	r3, [r7, #12]
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	4403      	add	r3, r0
 8008122:	400a      	ands	r2, r1
 8008124:	b292      	uxth	r2, r2
 8008126:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2206      	movs	r2, #6
 800812c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008136:	3302      	adds	r3, #2
 8008138:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff fdeb 	bl	8007d16 <sendTxBuffer>

    return u8CopyBufferSize;
 8008140:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7d5a      	ldrb	r2, [r3, #21]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	7d9b      	ldrb	r3, [r3, #22]
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7ff fd60 	bl	8007c24 <word>
 8008164:	4603      	mov	r3, r0
 8008166:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7dda      	ldrb	r2, [r3, #23]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	7e1b      	ldrb	r3, [r3, #24]
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f7ff fd56 	bl	8007c24 <word>
 8008178:	4603      	mov	r3, r0
 800817a:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008182:	89fb      	ldrh	r3, [r7, #14]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4413      	add	r3, r2
 8008188:	89ba      	ldrh	r2, [r7, #12]
 800818a:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2206      	movs	r2, #6
 8008190:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800819a:	3302      	adds	r3, #2
 800819c:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff fdb9 	bl	8007d16 <sendTxBuffer>

    return u8CopyBufferSize;
 80081a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7d5a      	ldrb	r2, [r3, #21]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7d9b      	ldrb	r3, [r3, #22]
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7ff fd2e 	bl	8007c24 <word>
 80081c8:	4603      	mov	r3, r0
 80081ca:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	7dda      	ldrb	r2, [r3, #23]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7e1b      	ldrb	r3, [r3, #24]
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7ff fd24 	bl	8007c24 <word>
 80081dc:	4603      	mov	r3, r0
 80081de:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80081e4:	2307      	movs	r3, #7
 80081e6:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80081e8:	2300      	movs	r3, #0
 80081ea:	82bb      	strh	r3, [r7, #20]
 80081ec:	e058      	b.n	80082a0 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80081ee:	8a7a      	ldrh	r2, [r7, #18]
 80081f0:	8abb      	ldrh	r3, [r7, #20]
 80081f2:	4413      	add	r3, r2
 80081f4:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80081f6:	89bb      	ldrh	r3, [r7, #12]
 80081f8:	091b      	lsrs	r3, r3, #4
 80081fa:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80081fc:	89bb      	ldrh	r3, [r7, #12]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	4413      	add	r3, r2
 800820c:	7cdb      	ldrb	r3, [r3, #19]
 800820e:	461a      	mov	r2, r3
 8008210:	7dbb      	ldrb	r3, [r7, #22]
 8008212:	fa42 f303 	asr.w	r3, r2, r3
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8008224:	7a3b      	ldrb	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d015      	beq.n	8008256 <process_FC15+0xa6>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008230:	897b      	ldrh	r3, [r7, #10]
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	4413      	add	r3, r2
 8008236:	8819      	ldrh	r1, [r3, #0]
 8008238:	7a7b      	ldrb	r3, [r7, #9]
 800823a:	2201      	movs	r2, #1
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8008248:	897b      	ldrh	r3, [r7, #10]
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	4403      	add	r3, r0
 800824e:	430a      	orrs	r2, r1
 8008250:	b292      	uxth	r2, r2
 8008252:	801a      	strh	r2, [r3, #0]
 8008254:	e016      	b.n	8008284 <process_FC15+0xd4>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800825c:	897b      	ldrh	r3, [r7, #10]
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	4413      	add	r3, r2
 8008262:	8819      	ldrh	r1, [r3, #0]
 8008264:	7a7b      	ldrb	r3, [r7, #9]
 8008266:	2201      	movs	r2, #1
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	b29b      	uxth	r3, r3
 800826e:	43db      	mvns	r3, r3
 8008270:	b29a      	uxth	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8008278:	897b      	ldrh	r3, [r7, #10]
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	4403      	add	r3, r0
 800827e:	400a      	ands	r2, r1
 8008280:	b292      	uxth	r2, r2
 8008282:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8008284:	7dbb      	ldrb	r3, [r7, #22]
 8008286:	3301      	adds	r3, #1
 8008288:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800828a:	7dbb      	ldrb	r3, [r7, #22]
 800828c:	2b07      	cmp	r3, #7
 800828e:	d904      	bls.n	800829a <process_FC15+0xea>
        {
            u8bitsno = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	3301      	adds	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800829a:	8abb      	ldrh	r3, [r7, #20]
 800829c:	3301      	adds	r3, #1
 800829e:	82bb      	strh	r3, [r7, #20]
 80082a0:	8aba      	ldrh	r2, [r7, #20]
 80082a2:	8a3b      	ldrh	r3, [r7, #16]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d3a2      	bcc.n	80081ee <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2206      	movs	r2, #6
 80082ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80082b6:	3302      	adds	r3, #2
 80082b8:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fd2b 	bl	8007d16 <sendTxBuffer>
    return u8CopyBufferSize;
 80082c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7d5b      	ldrb	r3, [r3, #21]
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	b21a      	sxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7d9b      	ldrb	r3, [r3, #22]
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	4313      	orrs	r3, r2
 80082e4:	b21b      	sxth	r3, r3
 80082e6:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	7ddb      	ldrb	r3, [r3, #23]
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	b21a      	sxth	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7e1b      	ldrb	r3, [r3, #24]
 80082f4:	b21b      	sxth	r3, r3
 80082f6:	4313      	orrs	r3, r2
 80082f8:	b21b      	sxth	r3, r3
 80082fa:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8008302:	8a7b      	ldrh	r3, [r7, #18]
 8008304:	b2da      	uxtb	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2206      	movs	r2, #6
 800830e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8008312:	2300      	movs	r3, #0
 8008314:	82fb      	strh	r3, [r7, #22]
 8008316:	e01d      	b.n	8008354 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8008318:	8afb      	ldrh	r3, [r7, #22]
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	3307      	adds	r3, #7
        temp = word(
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8008324:	8afb      	ldrh	r3, [r7, #22]
 8008326:	3304      	adds	r3, #4
 8008328:	005b      	lsls	r3, r3, #1
        temp = word(
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4413      	add	r3, r2
 800832e:	7cdb      	ldrb	r3, [r3, #19]
 8008330:	4619      	mov	r1, r3
 8008332:	f7ff fc77 	bl	8007c24 <word>
 8008336:	4603      	mov	r3, r0
 8008338:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008340:	8ab9      	ldrh	r1, [r7, #20]
 8008342:	8afb      	ldrh	r3, [r7, #22]
 8008344:	440b      	add	r3, r1
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	4413      	add	r3, r2
 800834a:	89fa      	ldrh	r2, [r7, #14]
 800834c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800834e:	8afb      	ldrh	r3, [r7, #22]
 8008350:	3301      	adds	r3, #1
 8008352:	82fb      	strh	r3, [r7, #22]
 8008354:	8afa      	ldrh	r2, [r7, #22]
 8008356:	8a7b      	ldrh	r3, [r7, #18]
 8008358:	429a      	cmp	r2, r3
 800835a:	d3dd      	bcc.n	8008318 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008362:	3302      	adds	r3, #2
 8008364:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fcd5 	bl	8007d16 <sendTxBuffer>

    return u8CopyBufferSize;
 800836c:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af02      	add	r7, sp, #8
 800837e:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	e019      	b.n	80083be <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800838a:	4a17      	ldr	r2, [pc, #92]	; (80083e8 <HAL_UART_TxCpltCallback+0x70>)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d10e      	bne.n	80083b8 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800839a:	4a13      	ldr	r2, [pc, #76]	; (80083e8 <HAL_UART_TxCpltCallback+0x70>)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80083a6:	f107 0308 	add.w	r3, r7, #8
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	2300      	movs	r3, #0
 80083ae:	2200      	movs	r2, #0
 80083b0:	2100      	movs	r1, #0
 80083b2:	f002 fbf9 	bl	800aba8 <xTaskGenericNotifyFromISR>
	   		break;
 80083b6:	e008      	b.n	80083ca <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <HAL_UART_TxCpltCallback+0x74>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4293      	cmp	r3, r2
 80083c8:	dbdf      	blt.n	800838a <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d007      	beq.n	80083e0 <HAL_UART_TxCpltCallback+0x68>
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <HAL_UART_TxCpltCallback+0x78>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000674 	.word	0x20000674
 80083ec:	2000067c 	.word	0x2000067c
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80083f4:	b590      	push	{r4, r7, lr}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	e042      	b.n	800848c <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8008406:	4a2d      	ldr	r2, [pc, #180]	; (80084bc <HAL_UART_RxCpltCallback+0xc8>)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	429a      	cmp	r2, r3
 8008414:	d137      	bne.n	8008486 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8008416:	4a29      	ldr	r2, [pc, #164]	; (80084bc <HAL_UART_RxCpltCallback+0xc8>)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800841e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8008422:	2b01      	cmp	r3, #1
 8008424:	d139      	bne.n	800849a <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8008426:	4a25      	ldr	r2, [pc, #148]	; (80084bc <HAL_UART_RxCpltCallback+0xc8>)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800842e:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8008432:	4922      	ldr	r1, [pc, #136]	; (80084bc <HAL_UART_RxCpltCallback+0xc8>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800843a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f7fe fbdb 	bl	8006bfc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8008446:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <HAL_UART_RxCpltCallback+0xc8>)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800844e:	6858      	ldr	r0, [r3, #4]
 8008450:	4a1a      	ldr	r2, [pc, #104]	; (80084bc <HAL_UART_RxCpltCallback+0xc8>)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008458:	33a6      	adds	r3, #166	; 0xa6
 800845a:	2201      	movs	r2, #1
 800845c:	4619      	mov	r1, r3
 800845e:	f7fb fd2b 	bl	8003eb8 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8008462:	4a16      	ldr	r2, [pc, #88]	; (80084bc <HAL_UART_RxCpltCallback+0xc8>)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800846a:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800846e:	f001 fdd9 	bl	800a024 <xTaskGetTickCountFromISR>
 8008472:	4602      	mov	r2, r0
 8008474:	f107 0308 	add.w	r3, r7, #8
 8008478:	2100      	movs	r1, #0
 800847a:	9100      	str	r1, [sp, #0]
 800847c:	2107      	movs	r1, #7
 800847e:	4620      	mov	r0, r4
 8008480:	f002 fd66 	bl	800af50 <xTimerGenericCommand>
    		}
    		break;
 8008484:	e009      	b.n	800849a <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3301      	adds	r3, #1
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <HAL_UART_RxCpltCallback+0xcc>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4293      	cmp	r3, r2
 8008496:	dbb6      	blt.n	8008406 <HAL_UART_RxCpltCallback+0x12>
 8008498:	e000      	b.n	800849c <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800849a:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d007      	beq.n	80084b2 <HAL_UART_RxCpltCallback+0xbe>
 80084a2:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <HAL_UART_RxCpltCallback+0xd0>)
 80084a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd90      	pop	{r4, r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000674 	.word	0x20000674
 80084c0:	2000067c 	.word	0x2000067c
 80084c4:	e000ed04 	.word	0xe000ed04

080084c8 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e041      	b.n	800855a <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 80084d6:	4a27      	ldr	r2, [pc, #156]	; (8008574 <HAL_UART_ErrorCallback+0xac>)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d136      	bne.n	8008554 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 80084e6:	4a23      	ldr	r2, [pc, #140]	; (8008574 <HAL_UART_ErrorCallback+0xac>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ee:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d138      	bne.n	8008568 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80084f6:	e007      	b.n	8008508 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 80084f8:	4a1e      	ldr	r2, [pc, #120]	; (8008574 <HAL_UART_ErrorCallback+0xac>)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	4618      	mov	r0, r3
 8008504:	f7fb fda4 	bl	8004050 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8008508:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <HAL_UART_ErrorCallback+0xac>)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008510:	6858      	ldr	r0, [r3, #4]
 8008512:	4a18      	ldr	r2, [pc, #96]	; (8008574 <HAL_UART_ErrorCallback+0xac>)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851a:	33bc      	adds	r3, #188	; 0xbc
 800851c:	2280      	movs	r2, #128	; 0x80
 800851e:	4619      	mov	r1, r3
 8008520:	f7fe fa8d 	bl	8006a3e <HAL_UARTEx_ReceiveToIdle_DMA>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e6      	bne.n	80084f8 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800852a:	4a12      	ldr	r2, [pc, #72]	; (8008574 <HAL_UART_ErrorCallback+0xac>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	490d      	ldr	r1, [pc, #52]	; (8008574 <HAL_UART_ErrorCallback+0xac>)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0204 	bic.w	r2, r2, #4
 8008550:	601a      	str	r2, [r3, #0]

    		}

    		break;
 8008552:	e009      	b.n	8008568 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3301      	adds	r3, #1
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	4b07      	ldr	r3, [pc, #28]	; (8008578 <HAL_UART_ErrorCallback+0xb0>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4293      	cmp	r3, r2
 8008564:	dbb7      	blt.n	80084d6 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 8008566:	e000      	b.n	800856a <HAL_UART_ErrorCallback+0xa2>
    		break;
 8008568:	bf00      	nop
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000674 	.word	0x20000674
 8008578:	2000067c 	.word	0x2000067c

0800857c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af02      	add	r7, sp, #8
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008588:	2300      	movs	r3, #0
 800858a:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e061      	b.n	8008656 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 8008592:	4a3c      	ldr	r2, [pc, #240]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d156      	bne.n	8008650 <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 80085a2:	4a38      	ldr	r2, [pc, #224]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085aa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d158      	bne.n	8008664 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 80085b2:	887b      	ldrh	r3, [r7, #2]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d055      	beq.n	8008664 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 80085b8:	4a32      	ldr	r2, [pc, #200]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085c0:	887a      	ldrh	r2, [r7, #2]
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 80085c8:	4a2e      	ldr	r2, [pc, #184]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80085d6:	e007      	b.n	80085e8 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 80085d8:	4a2a      	ldr	r2, [pc, #168]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fb fd34 	bl	8004050 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80085e8:	4a26      	ldr	r2, [pc, #152]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f0:	6858      	ldr	r0, [r3, #4]
 80085f2:	4a24      	ldr	r2, [pc, #144]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085fa:	33bc      	adds	r3, #188	; 0xbc
 80085fc:	2280      	movs	r2, #128	; 0x80
 80085fe:	4619      	mov	r1, r3
 8008600:	f7fe fa1d 	bl	8006a3e <HAL_UARTEx_ReceiveToIdle_DMA>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e6      	bne.n	80085d8 <HAL_UARTEx_RxEventCallback+0x5c>

		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800860a:	4a1e      	ldr	r2, [pc, #120]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	4919      	ldr	r1, [pc, #100]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0204 	bic.w	r2, r2, #4
 8008630:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8008632:	4a14      	ldr	r2, [pc, #80]	; (8008684 <HAL_UARTEx_RxEventCallback+0x108>)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800863a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800863e:	f107 0308 	add.w	r3, r7, #8
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	2300      	movs	r3, #0
 8008646:	2203      	movs	r2, #3
 8008648:	2100      	movs	r1, #0
 800864a:	f002 faad 	bl	800aba8 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800864e:	e009      	b.n	8008664 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <HAL_UARTEx_RxEventCallback+0x10c>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4293      	cmp	r3, r2
 8008660:	db97      	blt.n	8008592 <HAL_UARTEx_RxEventCallback+0x16>
 8008662:	e000      	b.n	8008666 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 8008664:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <HAL_UARTEx_RxEventCallback+0x100>
 800866c:	4b07      	ldr	r3, [pc, #28]	; (800868c <HAL_UARTEx_RxEventCallback+0x110>)
 800866e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	f3bf 8f6f 	isb	sy
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20000674 	.word	0x20000674
 8008688:	2000067c 	.word	0x2000067c
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <__NVIC_SetPriority>:
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	6039      	str	r1, [r7, #0]
 800869a:	71fb      	strb	r3, [r7, #7]
 800869c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	db0a      	blt.n	80086ba <__NVIC_SetPriority+0x2a>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	490c      	ldr	r1, [pc, #48]	; (80086dc <__NVIC_SetPriority+0x4c>)
 80086aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ae:	0112      	lsls	r2, r2, #4
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	440b      	add	r3, r1
 80086b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80086b8:	e00a      	b.n	80086d0 <__NVIC_SetPriority+0x40>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	4908      	ldr	r1, [pc, #32]	; (80086e0 <__NVIC_SetPriority+0x50>)
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	f003 030f 	and.w	r3, r3, #15
 80086c6:	3b04      	subs	r3, #4
 80086c8:	0112      	lsls	r2, r2, #4
 80086ca:	b2d2      	uxtb	r2, r2
 80086cc:	440b      	add	r3, r1
 80086ce:	761a      	strb	r2, [r3, #24]
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	e000e100 	.word	0xe000e100
 80086e0:	e000ed00 	.word	0xe000ed00

080086e4 <SysTick_Handler>:
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <SysTick_Handler+0x1c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f001 ffd2 	bl	800a694 <xTaskGetSchedulerState>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d001      	beq.n	80086fa <SysTick_Handler+0x16>
 80086f6:	f003 f8ef 	bl	800b8d8 <xPortSysTickHandler>
 80086fa:	bf00      	nop
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	e000e010 	.word	0xe000e010

08008704 <SVC_Setup>:
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
 8008708:	2100      	movs	r1, #0
 800870a:	f06f 0004 	mvn.w	r0, #4
 800870e:	f7ff ffbf 	bl	8008690 <__NVIC_SetPriority>
 8008712:	bf00      	nop
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <osKernelInitialize>:
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	f3ef 8305 	mrs	r3, IPSR
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <osKernelInitialize+0x1a>
 800872a:	f06f 0305 	mvn.w	r3, #5
 800872e:	607b      	str	r3, [r7, #4]
 8008730:	e00c      	b.n	800874c <osKernelInitialize+0x34>
 8008732:	4b0a      	ldr	r3, [pc, #40]	; (800875c <osKernelInitialize+0x44>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <osKernelInitialize+0x2e>
 800873a:	4b08      	ldr	r3, [pc, #32]	; (800875c <osKernelInitialize+0x44>)
 800873c:	2201      	movs	r2, #1
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	2300      	movs	r3, #0
 8008742:	607b      	str	r3, [r7, #4]
 8008744:	e002      	b.n	800874c <osKernelInitialize+0x34>
 8008746:	f04f 33ff 	mov.w	r3, #4294967295
 800874a:	607b      	str	r3, [r7, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4618      	mov	r0, r3
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	20000680 	.word	0x20000680

08008760 <osKernelStart>:
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	f3ef 8305 	mrs	r3, IPSR
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <osKernelStart+0x1a>
 8008772:	f06f 0305 	mvn.w	r3, #5
 8008776:	607b      	str	r3, [r7, #4]
 8008778:	e010      	b.n	800879c <osKernelStart+0x3c>
 800877a:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <osKernelStart+0x48>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d109      	bne.n	8008796 <osKernelStart+0x36>
 8008782:	f7ff ffbf 	bl	8008704 <SVC_Setup>
 8008786:	4b08      	ldr	r3, [pc, #32]	; (80087a8 <osKernelStart+0x48>)
 8008788:	2202      	movs	r2, #2
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	f001 fb28 	bl	8009de0 <vTaskStartScheduler>
 8008790:	2300      	movs	r3, #0
 8008792:	607b      	str	r3, [r7, #4]
 8008794:	e002      	b.n	800879c <osKernelStart+0x3c>
 8008796:	f04f 33ff 	mov.w	r3, #4294967295
 800879a:	607b      	str	r3, [r7, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4618      	mov	r0, r3
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000680 	.word	0x20000680

080087ac <osThreadNew>:
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08e      	sub	sp, #56	; 0x38
 80087b0:	af04      	add	r7, sp, #16
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	2300      	movs	r3, #0
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	f3ef 8305 	mrs	r3, IPSR
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d17e      	bne.n	80088c6 <osThreadNew+0x11a>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d07b      	beq.n	80088c6 <osThreadNew+0x11a>
 80087ce:	2380      	movs	r3, #128	; 0x80
 80087d0:	623b      	str	r3, [r7, #32]
 80087d2:	2318      	movs	r3, #24
 80087d4:	61fb      	str	r3, [r7, #28]
 80087d6:	2300      	movs	r3, #0
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
 80087da:	f04f 33ff 	mov.w	r3, #4294967295
 80087de:	61bb      	str	r3, [r7, #24]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d045      	beq.n	8008872 <osThreadNew+0xc6>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <osThreadNew+0x48>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <osThreadNew+0x56>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <osThreadNew+0x6e>
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	2b38      	cmp	r3, #56	; 0x38
 800880c:	d805      	bhi.n	800881a <osThreadNew+0x6e>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <osThreadNew+0x72>
 800881a:	2300      	movs	r3, #0
 800881c:	e054      	b.n	80088c8 <osThreadNew+0x11c>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <osThreadNew+0x82>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	089b      	lsrs	r3, r3, #2
 800882c:	623b      	str	r3, [r7, #32]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <osThreadNew+0xa8>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	2b5b      	cmp	r3, #91	; 0x5b
 800883c:	d90a      	bls.n	8008854 <osThreadNew+0xa8>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d006      	beq.n	8008854 <osThreadNew+0xa8>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <osThreadNew+0xa8>
 800884e:	2301      	movs	r3, #1
 8008850:	61bb      	str	r3, [r7, #24]
 8008852:	e010      	b.n	8008876 <osThreadNew+0xca>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10c      	bne.n	8008876 <osThreadNew+0xca>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <osThreadNew+0xca>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d104      	bne.n	8008876 <osThreadNew+0xca>
 800886c:	2300      	movs	r3, #0
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	e001      	b.n	8008876 <osThreadNew+0xca>
 8008872:	2300      	movs	r3, #0
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d110      	bne.n	800889e <osThreadNew+0xf2>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6892      	ldr	r2, [r2, #8]
 8008884:	9202      	str	r2, [sp, #8]
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6a3a      	ldr	r2, [r7, #32]
 8008890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f001 f902 	bl	8009a9c <xTaskCreateStatic>
 8008898:	4603      	mov	r3, r0
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	e013      	b.n	80088c6 <osThreadNew+0x11a>
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d110      	bne.n	80088c6 <osThreadNew+0x11a>
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	f107 0310 	add.w	r3, r7, #16
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f001 f94d 	bl	8009b56 <xTaskCreate>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d001      	beq.n	80088c6 <osThreadNew+0x11a>
 80088c2:	2300      	movs	r3, #0
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	4618      	mov	r0, r3
 80088ca:	3728      	adds	r7, #40	; 0x28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <osSemaphoreNew>:
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08a      	sub	sp, #40	; 0x28
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	2300      	movs	r3, #0
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	f3ef 8305 	mrs	r3, IPSR
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d175      	bne.n	80089d8 <osSemaphoreNew+0x108>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d072      	beq.n	80089d8 <osSemaphoreNew+0x108>
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d86e      	bhi.n	80089d8 <osSemaphoreNew+0x108>
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295
 80088fe:	61bb      	str	r3, [r7, #24]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d015      	beq.n	8008932 <osSemaphoreNew+0x62>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d006      	beq.n	800891c <osSemaphoreNew+0x4c>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	2b4f      	cmp	r3, #79	; 0x4f
 8008914:	d902      	bls.n	800891c <osSemaphoreNew+0x4c>
 8008916:	2301      	movs	r3, #1
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	e00c      	b.n	8008936 <osSemaphoreNew+0x66>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d108      	bne.n	8008936 <osSemaphoreNew+0x66>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d104      	bne.n	8008936 <osSemaphoreNew+0x66>
 800892c:	2300      	movs	r3, #0
 800892e:	61bb      	str	r3, [r7, #24]
 8008930:	e001      	b.n	8008936 <osSemaphoreNew+0x66>
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d04c      	beq.n	80089d8 <osSemaphoreNew+0x108>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d128      	bne.n	8008996 <osSemaphoreNew+0xc6>
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d10a      	bne.n	8008960 <osSemaphoreNew+0x90>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	2203      	movs	r2, #3
 8008950:	9200      	str	r2, [sp, #0]
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	2001      	movs	r0, #1
 8008958:	f000 fa06 	bl	8008d68 <xQueueGenericCreateStatic>
 800895c:	61f8      	str	r0, [r7, #28]
 800895e:	e005      	b.n	800896c <osSemaphoreNew+0x9c>
 8008960:	2203      	movs	r2, #3
 8008962:	2100      	movs	r1, #0
 8008964:	2001      	movs	r0, #1
 8008966:	f000 fa77 	bl	8008e58 <xQueueGenericCreate>
 800896a:	61f8      	str	r0, [r7, #28]
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d022      	beq.n	80089b8 <osSemaphoreNew+0xe8>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01f      	beq.n	80089b8 <osSemaphoreNew+0xe8>
 8008978:	2300      	movs	r3, #0
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	69f8      	ldr	r0, [r7, #28]
 8008980:	f000 fb32 	bl	8008fe8 <xQueueGenericSend>
 8008984:	4603      	mov	r3, r0
 8008986:	2b01      	cmp	r3, #1
 8008988:	d016      	beq.n	80089b8 <osSemaphoreNew+0xe8>
 800898a:	69f8      	ldr	r0, [r7, #28]
 800898c:	f000 feb2 	bl	80096f4 <vQueueDelete>
 8008990:	2300      	movs	r3, #0
 8008992:	61fb      	str	r3, [r7, #28]
 8008994:	e010      	b.n	80089b8 <osSemaphoreNew+0xe8>
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d108      	bne.n	80089ae <osSemaphoreNew+0xde>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	461a      	mov	r2, r3
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fab4 	bl	8008f12 <xQueueCreateCountingSemaphoreStatic>
 80089aa:	61f8      	str	r0, [r7, #28]
 80089ac:	e004      	b.n	80089b8 <osSemaphoreNew+0xe8>
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fae5 	bl	8008f80 <xQueueCreateCountingSemaphore>
 80089b6:	61f8      	str	r0, [r7, #28]
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00c      	beq.n	80089d8 <osSemaphoreNew+0x108>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <osSemaphoreNew+0xfc>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e001      	b.n	80089d0 <osSemaphoreNew+0x100>
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	6979      	ldr	r1, [r7, #20]
 80089d2:	69f8      	ldr	r0, [r7, #28]
 80089d4:	f000 ffda 	bl	800998c <vQueueAddToRegistry>
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4618      	mov	r0, r3
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <osMessageQueueNew>:
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b08a      	sub	sp, #40	; 0x28
 80089e6:	af02      	add	r7, sp, #8
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]
 80089f2:	f3ef 8305 	mrs	r3, IPSR
 80089f6:	613b      	str	r3, [r7, #16]
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d15f      	bne.n	8008abe <osMessageQueueNew+0xdc>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d05c      	beq.n	8008abe <osMessageQueueNew+0xdc>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d059      	beq.n	8008abe <osMessageQueueNew+0xdc>
 8008a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0e:	61bb      	str	r3, [r7, #24]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d029      	beq.n	8008a6a <osMessageQueueNew+0x88>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d012      	beq.n	8008a44 <osMessageQueueNew+0x62>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	2b4f      	cmp	r3, #79	; 0x4f
 8008a24:	d90e      	bls.n	8008a44 <osMessageQueueNew+0x62>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00a      	beq.n	8008a44 <osMessageQueueNew+0x62>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	695a      	ldr	r2, [r3, #20]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	fb01 f303 	mul.w	r3, r1, r3
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d302      	bcc.n	8008a44 <osMessageQueueNew+0x62>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	61bb      	str	r3, [r7, #24]
 8008a42:	e014      	b.n	8008a6e <osMessageQueueNew+0x8c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d110      	bne.n	8008a6e <osMessageQueueNew+0x8c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10c      	bne.n	8008a6e <osMessageQueueNew+0x8c>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d108      	bne.n	8008a6e <osMessageQueueNew+0x8c>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d104      	bne.n	8008a6e <osMessageQueueNew+0x8c>
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
 8008a68:	e001      	b.n	8008a6e <osMessageQueueNew+0x8c>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61bb      	str	r3, [r7, #24]
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d10b      	bne.n	8008a8c <osMessageQueueNew+0xaa>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691a      	ldr	r2, [r3, #16]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	9100      	str	r1, [sp, #0]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f970 	bl	8008d68 <xQueueGenericCreateStatic>
 8008a88:	61f8      	str	r0, [r7, #28]
 8008a8a:	e008      	b.n	8008a9e <osMessageQueueNew+0xbc>
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d105      	bne.n	8008a9e <osMessageQueueNew+0xbc>
 8008a92:	2200      	movs	r2, #0
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 f9de 	bl	8008e58 <xQueueGenericCreate>
 8008a9c:	61f8      	str	r0, [r7, #28]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00c      	beq.n	8008abe <osMessageQueueNew+0xdc>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <osMessageQueueNew+0xd0>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	e001      	b.n	8008ab6 <osMessageQueueNew+0xd4>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	6979      	ldr	r1, [r7, #20]
 8008ab8:	69f8      	ldr	r0, [r7, #28]
 8008aba:	f000 ff67 	bl	800998c <vQueueAddToRegistry>
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3720      	adds	r7, #32
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <vApplicationGetIdleTaskMemory>:
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a07      	ldr	r2, [pc, #28]	; (8008af4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4a06      	ldr	r2, [pc, #24]	; (8008af8 <vApplicationGetIdleTaskMemory+0x30>)
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2280      	movs	r2, #128	; 0x80
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20000684 	.word	0x20000684
 8008af8:	200006e0 	.word	0x200006e0

08008afc <vApplicationGetTimerTaskMemory>:
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4a07      	ldr	r2, [pc, #28]	; (8008b28 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	4a06      	ldr	r2, [pc, #24]	; (8008b2c <vApplicationGetTimerTaskMemory+0x30>)
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	bf00      	nop
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	200008e0 	.word	0x200008e0
 8008b2c:	2000093c 	.word	0x2000093c

08008b30 <vListInitialise>:
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f103 0208 	add.w	r2, r3, #8
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	605a      	str	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f04f 32ff 	mov.w	r2, #4294967295
 8008b48:	609a      	str	r2, [r3, #8]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f103 0208 	add.w	r2, r3, #8
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60da      	str	r2, [r3, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f103 0208 	add.w	r2, r3, #8
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	611a      	str	r2, [r3, #16]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <vListInitialiseItem>:
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	611a      	str	r2, [r3, #16]
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <vListInsertEnd>:
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	605a      	str	r2, [r3, #4]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	609a      	str	r2, [r3, #8]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	605a      	str	r2, [r3, #4]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	609a      	str	r2, [r3, #8]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	611a      	str	r2, [r3, #16]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <vListInsert>:
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60bb      	str	r3, [r7, #8]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be8:	d103      	bne.n	8008bf2 <vListInsert+0x20>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e00c      	b.n	8008c0c <vListInsert+0x3a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e002      	b.n	8008c00 <vListInsert+0x2e>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d2f6      	bcs.n	8008bfa <vListInsert+0x28>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	609a      	str	r2, [r3, #8]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	609a      	str	r2, [r3, #8]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	605a      	str	r2, [r3, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	611a      	str	r2, [r3, #16]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	bf00      	nop
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <uxListRemove>:
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	6892      	ldr	r2, [r2, #8]
 8008c5a:	609a      	str	r2, [r3, #8]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6852      	ldr	r2, [r2, #4]
 8008c64:	605a      	str	r2, [r3, #4]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d103      	bne.n	8008c78 <uxListRemove+0x34>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	605a      	str	r2, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	611a      	str	r2, [r3, #16]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	1e5a      	subs	r2, r3, #1
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <xQueueGenericReset>:
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <xQueueGenericReset+0x2a>
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	60bb      	str	r3, [r7, #8]
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <xQueueGenericReset+0x28>
 8008cc2:	f002 fd77 	bl	800b7b4 <vPortEnterCritical>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	441a      	add	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	609a      	str	r2, [r3, #8]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	68f9      	ldr	r1, [r7, #12]
 8008cf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cf8:	fb01 f303 	mul.w	r3, r1, r3
 8008cfc:	441a      	add	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	60da      	str	r2, [r3, #12]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	22ff      	movs	r2, #255	; 0xff
 8008d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	22ff      	movs	r2, #255	; 0xff
 8008d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d114      	bne.n	8008d42 <xQueueGenericReset+0xaa>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01a      	beq.n	8008d56 <xQueueGenericReset+0xbe>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3310      	adds	r3, #16
 8008d24:	4618      	mov	r0, r3
 8008d26:	f001 faf7 	bl	800a318 <xTaskRemoveFromEventList>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <xQueueGenericReset+0xbe>
 8008d30:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <xQueueGenericReset+0xcc>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	e009      	b.n	8008d56 <xQueueGenericReset+0xbe>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3310      	adds	r3, #16
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fef2 	bl	8008b30 <vListInitialise>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3324      	adds	r3, #36	; 0x24
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff feed 	bl	8008b30 <vListInitialise>
 8008d56:	f002 fd5d 	bl	800b814 <vPortExitCritical>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <xQueueGenericCreateStatic>:
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08e      	sub	sp, #56	; 0x38
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <xQueueGenericCreateStatic+0x2a>
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xQueueGenericCreateStatic+0x28>
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <xQueueGenericCreateStatic+0x46>
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xQueueGenericCreateStatic+0x44>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <xQueueGenericCreateStatic+0x52>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <xQueueGenericCreateStatic+0x56>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e000      	b.n	8008dc0 <xQueueGenericCreateStatic+0x58>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <xQueueGenericCreateStatic+0x72>
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	623b      	str	r3, [r7, #32]
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <xQueueGenericCreateStatic+0x70>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <xQueueGenericCreateStatic+0x7e>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <xQueueGenericCreateStatic+0x82>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <xQueueGenericCreateStatic+0x84>
 8008dea:	2300      	movs	r3, #0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xQueueGenericCreateStatic+0x9e>
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	61fb      	str	r3, [r7, #28]
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xQueueGenericCreateStatic+0x9c>
 8008e06:	2350      	movs	r3, #80	; 0x50
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b50      	cmp	r3, #80	; 0x50
 8008e0e:	d00a      	beq.n	8008e26 <xQueueGenericCreateStatic+0xbe>
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <xQueueGenericCreateStatic+0xbc>
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00d      	beq.n	8008e4e <xQueueGenericCreateStatic+0xe6>
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	4613      	mov	r3, r2
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f83f 	bl	8008ecc <prvInitialiseNewQueue>
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	4618      	mov	r0, r3
 8008e52:	3730      	adds	r7, #48	; 0x30
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <xQueueGenericCreate>:
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	; 0x28
 8008e5c:	af02      	add	r7, sp, #8
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	71fb      	strb	r3, [r7, #7]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <xQueueGenericCreate+0x2a>
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	613b      	str	r3, [r7, #16]
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <xQueueGenericCreate+0x28>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
 8008e8a:	61fb      	str	r3, [r7, #28]
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	3350      	adds	r3, #80	; 0x50
 8008e90:	4618      	mov	r0, r3
 8008e92:	f002 fdb1 	bl	800b9f8 <pvPortMalloc>
 8008e96:	61b8      	str	r0, [r7, #24]
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d011      	beq.n	8008ec2 <xQueueGenericCreate+0x6a>
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	3350      	adds	r3, #80	; 0x50
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008eb0:	79fa      	ldrb	r2, [r7, #7]
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 f805 	bl	8008ecc <prvInitialiseNewQueue>
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <prvInitialiseNewQueue>:
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	70fb      	strb	r3, [r7, #3]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d103      	bne.n	8008ee8 <prvInitialiseNewQueue+0x1c>
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	e002      	b.n	8008eee <prvInitialiseNewQueue+0x22>
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	63da      	str	r2, [r3, #60]	; 0x3c
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8008efa:	2101      	movs	r1, #1
 8008efc:	69b8      	ldr	r0, [r7, #24]
 8008efe:	f7ff fecb 	bl	8008c98 <xQueueGenericReset>
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	78fa      	ldrb	r2, [r7, #3]
 8008f06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <xQueueCreateCountingSemaphoreStatic>:
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b08a      	sub	sp, #40	; 0x28
 8008f16:	af02      	add	r7, sp, #8
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10a      	bne.n	8008f3a <xQueueCreateCountingSemaphoreStatic+0x28>
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	61bb      	str	r3, [r7, #24]
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <xQueueCreateCountingSemaphoreStatic+0x26>
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d90a      	bls.n	8008f58 <xQueueCreateCountingSemaphoreStatic+0x46>
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <xQueueCreateCountingSemaphoreStatic+0x44>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2100      	movs	r1, #0
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff ff00 	bl	8008d68 <xQueueGenericCreateStatic>
 8008f68:	61f8      	str	r0, [r7, #28]
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <xQueueCreateCountingSemaphoreStatic+0x64>
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	639a      	str	r2, [r3, #56]	; 0x38
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3720      	adds	r7, #32
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <xQueueCreateCountingSemaphore>:
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <xQueueCreateCountingSemaphore+0x26>
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	613b      	str	r3, [r7, #16]
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <xQueueCreateCountingSemaphore+0x24>
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d90a      	bls.n	8008fc4 <xQueueCreateCountingSemaphore+0x44>
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <xQueueCreateCountingSemaphore+0x42>
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ff45 	bl	8008e58 <xQueueGenericCreate>
 8008fce:	6178      	str	r0, [r7, #20]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <xQueueCreateCountingSemaphore+0x5c>
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	639a      	str	r2, [r3, #56]	; 0x38
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <xQueueGenericSend>:
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08e      	sub	sp, #56	; 0x38
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xQueueGenericSend+0x32>
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	62bb      	str	r3, [r7, #40]	; 0x28
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xQueueGenericSend+0x30>
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d103      	bne.n	8009028 <xQueueGenericSend+0x40>
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <xQueueGenericSend+0x44>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <xQueueGenericSend+0x46>
 800902c:	2300      	movs	r3, #0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <xQueueGenericSend+0x60>
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <xQueueGenericSend+0x5e>
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d103      	bne.n	8009056 <xQueueGenericSend+0x6e>
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009052:	2b01      	cmp	r3, #1
 8009054:	d101      	bne.n	800905a <xQueueGenericSend+0x72>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <xQueueGenericSend+0x74>
 800905a:	2300      	movs	r3, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xQueueGenericSend+0x8e>
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	623b      	str	r3, [r7, #32]
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xQueueGenericSend+0x8c>
 8009076:	f001 fb0d 	bl	800a694 <xTaskGetSchedulerState>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <xQueueGenericSend+0x9e>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <xQueueGenericSend+0xa2>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <xQueueGenericSend+0xa4>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xQueueGenericSend+0xbe>
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	61fb      	str	r3, [r7, #28]
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueGenericSend+0xbc>
 80090a6:	f002 fb85 	bl	800b7b4 <vPortEnterCritical>
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d302      	bcc.n	80090bc <xQueueGenericSend+0xd4>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d129      	bne.n	8009110 <xQueueGenericSend+0x128>
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c2:	f000 fb52 	bl	800976a <prvCopyDataToQueue>
 80090c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d010      	beq.n	80090f2 <xQueueGenericSend+0x10a>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	3324      	adds	r3, #36	; 0x24
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 f91f 	bl	800a318 <xTaskRemoveFromEventList>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d013      	beq.n	8009108 <xQueueGenericSend+0x120>
 80090e0:	4b3f      	ldr	r3, [pc, #252]	; (80091e0 <xQueueGenericSend+0x1f8>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	e00a      	b.n	8009108 <xQueueGenericSend+0x120>
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d007      	beq.n	8009108 <xQueueGenericSend+0x120>
 80090f8:	4b39      	ldr	r3, [pc, #228]	; (80091e0 <xQueueGenericSend+0x1f8>)
 80090fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f002 fb84 	bl	800b814 <vPortExitCritical>
 800910c:	2301      	movs	r3, #1
 800910e:	e063      	b.n	80091d8 <xQueueGenericSend+0x1f0>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d103      	bne.n	800911e <xQueueGenericSend+0x136>
 8009116:	f002 fb7d 	bl	800b814 <vPortExitCritical>
 800911a:	2300      	movs	r3, #0
 800911c:	e05c      	b.n	80091d8 <xQueueGenericSend+0x1f0>
 800911e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009120:	2b00      	cmp	r3, #0
 8009122:	d106      	bne.n	8009132 <xQueueGenericSend+0x14a>
 8009124:	f107 0314 	add.w	r3, r7, #20
 8009128:	4618      	mov	r0, r3
 800912a:	f001 f959 	bl	800a3e0 <vTaskInternalSetTimeOutState>
 800912e:	2301      	movs	r3, #1
 8009130:	637b      	str	r3, [r7, #52]	; 0x34
 8009132:	f002 fb6f 	bl	800b814 <vPortExitCritical>
 8009136:	f000 feb9 	bl	8009eac <vTaskSuspendAll>
 800913a:	f002 fb3b 	bl	800b7b4 <vPortEnterCritical>
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009144:	b25b      	sxtb	r3, r3
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d103      	bne.n	8009154 <xQueueGenericSend+0x16c>
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800915a:	b25b      	sxtb	r3, r3
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d103      	bne.n	800916a <xQueueGenericSend+0x182>
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800916a:	f002 fb53 	bl	800b814 <vPortExitCritical>
 800916e:	1d3a      	adds	r2, r7, #4
 8009170:	f107 0314 	add.w	r3, r7, #20
 8009174:	4611      	mov	r1, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f001 f948 	bl	800a40c <xTaskCheckForTimeOut>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d124      	bne.n	80091cc <xQueueGenericSend+0x1e4>
 8009182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009184:	f000 fbe9 	bl	800995a <prvIsQueueFull>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d018      	beq.n	80091c0 <xQueueGenericSend+0x1d8>
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	3310      	adds	r3, #16
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f001 f86e 	bl	800a278 <vTaskPlaceOnEventList>
 800919c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800919e:	f000 fb74 	bl	800988a <prvUnlockQueue>
 80091a2:	f000 fe91 	bl	8009ec8 <xTaskResumeAll>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f47f af7c 	bne.w	80090a6 <xQueueGenericSend+0xbe>
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <xQueueGenericSend+0x1f8>)
 80091b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	e772      	b.n	80090a6 <xQueueGenericSend+0xbe>
 80091c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c2:	f000 fb62 	bl	800988a <prvUnlockQueue>
 80091c6:	f000 fe7f 	bl	8009ec8 <xTaskResumeAll>
 80091ca:	e76c      	b.n	80090a6 <xQueueGenericSend+0xbe>
 80091cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ce:	f000 fb5c 	bl	800988a <prvUnlockQueue>
 80091d2:	f000 fe79 	bl	8009ec8 <xTaskResumeAll>
 80091d6:	2300      	movs	r3, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	3738      	adds	r7, #56	; 0x38
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	e000ed04 	.word	0xe000ed04

080091e4 <xQueueGenericSendFromISR>:
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b090      	sub	sp, #64	; 0x40
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericSendFromISR+0x2e>
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericSendFromISR+0x2c>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <xQueueGenericSendFromISR+0x3c>
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <xQueueGenericSendFromISR+0x40>
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <xQueueGenericSendFromISR+0x42>
 8009224:	2300      	movs	r3, #0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xQueueGenericSendFromISR+0x5c>
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xQueueGenericSendFromISR+0x5a>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d103      	bne.n	800924e <xQueueGenericSendFromISR+0x6a>
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <xQueueGenericSendFromISR+0x6e>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xQueueGenericSendFromISR+0x70>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueGenericSendFromISR+0x8a>
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericSendFromISR+0x88>
 800926e:	f002 fb83 	bl	800b978 <vPortValidateInterruptPriority>
 8009272:	f3ef 8211 	mrs	r2, BASEPRI
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	61fa      	str	r2, [r7, #28]
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	637b      	str	r3, [r7, #52]	; 0x34
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	429a      	cmp	r2, r3
 8009298:	d302      	bcc.n	80092a0 <xQueueGenericSendFromISR+0xbc>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d12f      	bne.n	8009300 <xQueueGenericSendFromISR+0x11c>
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092b6:	f000 fa58 	bl	800976a <prvCopyDataToQueue>
 80092ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c2:	d112      	bne.n	80092ea <xQueueGenericSendFromISR+0x106>
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d016      	beq.n	80092fa <xQueueGenericSendFromISR+0x116>
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	3324      	adds	r3, #36	; 0x24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 f821 	bl	800a318 <xTaskRemoveFromEventList>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00e      	beq.n	80092fa <xQueueGenericSendFromISR+0x116>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00b      	beq.n	80092fa <xQueueGenericSendFromISR+0x116>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	e007      	b.n	80092fa <xQueueGenericSendFromISR+0x116>
 80092ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092ee:	3301      	adds	r3, #1
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	b25a      	sxtb	r2, r3
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092fa:	2301      	movs	r3, #1
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092fe:	e001      	b.n	8009304 <xQueueGenericSendFromISR+0x120>
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	bf00      	nop
 8009310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009312:	4618      	mov	r0, r3
 8009314:	3740      	adds	r7, #64	; 0x40
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <xQueueReceive>:
 800931c:	b580      	push	{r7, lr}
 800931e:	b08c      	sub	sp, #48	; 0x30
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	2300      	movs	r3, #0
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10a      	bne.n	800934c <xQueueReceive+0x30>
 8009336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	623b      	str	r3, [r7, #32]
 8009348:	bf00      	nop
 800934a:	e7fe      	b.n	800934a <xQueueReceive+0x2e>
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <xQueueReceive+0x3e>
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <xQueueReceive+0x42>
 800935a:	2301      	movs	r3, #1
 800935c:	e000      	b.n	8009360 <xQueueReceive+0x44>
 800935e:	2300      	movs	r3, #0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <xQueueReceive+0x5e>
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <xQueueReceive+0x5c>
 800937a:	f001 f98b 	bl	800a694 <xTaskGetSchedulerState>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d102      	bne.n	800938a <xQueueReceive+0x6e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <xQueueReceive+0x72>
 800938a:	2301      	movs	r3, #1
 800938c:	e000      	b.n	8009390 <xQueueReceive+0x74>
 800938e:	2300      	movs	r3, #0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <xQueueReceive+0x8e>
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <xQueueReceive+0x8c>
 80093aa:	f002 fa03 	bl	800b7b4 <vPortEnterCritical>
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d01f      	beq.n	80093fa <xQueueReceive+0xde>
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093be:	f000 fa3e 	bl	800983e <prvCopyDataFromQueue>
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	1e5a      	subs	r2, r3, #1
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38
 80093ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00f      	beq.n	80093f2 <xQueueReceive+0xd6>
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	3310      	adds	r3, #16
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 ff9e 	bl	800a318 <xTaskRemoveFromEventList>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d007      	beq.n	80093f2 <xQueueReceive+0xd6>
 80093e2:	4b3d      	ldr	r3, [pc, #244]	; (80094d8 <xQueueReceive+0x1bc>)
 80093e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f002 fa0f 	bl	800b814 <vPortExitCritical>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e069      	b.n	80094ce <xQueueReceive+0x1b2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d103      	bne.n	8009408 <xQueueReceive+0xec>
 8009400:	f002 fa08 	bl	800b814 <vPortExitCritical>
 8009404:	2300      	movs	r3, #0
 8009406:	e062      	b.n	80094ce <xQueueReceive+0x1b2>
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <xQueueReceive+0x100>
 800940e:	f107 0310 	add.w	r3, r7, #16
 8009412:	4618      	mov	r0, r3
 8009414:	f000 ffe4 	bl	800a3e0 <vTaskInternalSetTimeOutState>
 8009418:	2301      	movs	r3, #1
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800941c:	f002 f9fa 	bl	800b814 <vPortExitCritical>
 8009420:	f000 fd44 	bl	8009eac <vTaskSuspendAll>
 8009424:	f002 f9c6 	bl	800b7b4 <vPortEnterCritical>
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800942e:	b25b      	sxtb	r3, r3
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009434:	d103      	bne.n	800943e <xQueueReceive+0x122>
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009444:	b25b      	sxtb	r3, r3
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	d103      	bne.n	8009454 <xQueueReceive+0x138>
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009454:	f002 f9de 	bl	800b814 <vPortExitCritical>
 8009458:	1d3a      	adds	r2, r7, #4
 800945a:	f107 0310 	add.w	r3, r7, #16
 800945e:	4611      	mov	r1, r2
 8009460:	4618      	mov	r0, r3
 8009462:	f000 ffd3 	bl	800a40c <xTaskCheckForTimeOut>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d123      	bne.n	80094b4 <xQueueReceive+0x198>
 800946c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946e:	f000 fa5e 	bl	800992e <prvIsQueueEmpty>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d017      	beq.n	80094a8 <xQueueReceive+0x18c>
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	3324      	adds	r3, #36	; 0x24
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fef9 	bl	800a278 <vTaskPlaceOnEventList>
 8009486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009488:	f000 f9ff 	bl	800988a <prvUnlockQueue>
 800948c:	f000 fd1c 	bl	8009ec8 <xTaskResumeAll>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d189      	bne.n	80093aa <xQueueReceive+0x8e>
 8009496:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <xQueueReceive+0x1bc>)
 8009498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	e780      	b.n	80093aa <xQueueReceive+0x8e>
 80094a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094aa:	f000 f9ee 	bl	800988a <prvUnlockQueue>
 80094ae:	f000 fd0b 	bl	8009ec8 <xTaskResumeAll>
 80094b2:	e77a      	b.n	80093aa <xQueueReceive+0x8e>
 80094b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b6:	f000 f9e8 	bl	800988a <prvUnlockQueue>
 80094ba:	f000 fd05 	bl	8009ec8 <xTaskResumeAll>
 80094be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c0:	f000 fa35 	bl	800992e <prvIsQueueEmpty>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f43f af6f 	beq.w	80093aa <xQueueReceive+0x8e>
 80094cc:	2300      	movs	r3, #0
 80094ce:	4618      	mov	r0, r3
 80094d0:	3730      	adds	r7, #48	; 0x30
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <xQueueSemaphoreTake>:
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08e      	sub	sp, #56	; 0x38
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
 80094e6:	2300      	movs	r3, #0
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094ee:	2300      	movs	r3, #0
 80094f0:	633b      	str	r3, [r7, #48]	; 0x30
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10a      	bne.n	800950e <xQueueSemaphoreTake+0x32>
 80094f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	623b      	str	r3, [r7, #32]
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <xQueueSemaphoreTake+0x30>
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <xQueueSemaphoreTake+0x50>
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	61fb      	str	r3, [r7, #28]
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <xQueueSemaphoreTake+0x4e>
 800952c:	f001 f8b2 	bl	800a694 <xTaskGetSchedulerState>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <xQueueSemaphoreTake+0x60>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <xQueueSemaphoreTake+0x64>
 800953c:	2301      	movs	r3, #1
 800953e:	e000      	b.n	8009542 <xQueueSemaphoreTake+0x66>
 8009540:	2300      	movs	r3, #0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <xQueueSemaphoreTake+0x80>
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <xQueueSemaphoreTake+0x7e>
 800955c:	f002 f92a 	bl	800b7b4 <vPortEnterCritical>
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	62bb      	str	r3, [r7, #40]	; 0x28
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	2b00      	cmp	r3, #0
 800956a:	d024      	beq.n	80095b6 <xQueueSemaphoreTake+0xda>
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	1e5a      	subs	r2, r3, #1
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	639a      	str	r2, [r3, #56]	; 0x38
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d104      	bne.n	8009586 <xQueueSemaphoreTake+0xaa>
 800957c:	f001 fa00 	bl	800a980 <pvTaskIncrementMutexHeldCount>
 8009580:	4602      	mov	r2, r0
 8009582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009584:	609a      	str	r2, [r3, #8]
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00f      	beq.n	80095ae <xQueueSemaphoreTake+0xd2>
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	3310      	adds	r3, #16
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fec0 	bl	800a318 <xTaskRemoveFromEventList>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d007      	beq.n	80095ae <xQueueSemaphoreTake+0xd2>
 800959e:	4b54      	ldr	r3, [pc, #336]	; (80096f0 <xQueueSemaphoreTake+0x214>)
 80095a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f002 f931 	bl	800b814 <vPortExitCritical>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e097      	b.n	80096e6 <xQueueSemaphoreTake+0x20a>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d111      	bne.n	80095e0 <xQueueSemaphoreTake+0x104>
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <xQueueSemaphoreTake+0xfc>
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <xQueueSemaphoreTake+0xfa>
 80095d8:	f002 f91c 	bl	800b814 <vPortExitCritical>
 80095dc:	2300      	movs	r3, #0
 80095de:	e082      	b.n	80096e6 <xQueueSemaphoreTake+0x20a>
 80095e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d106      	bne.n	80095f4 <xQueueSemaphoreTake+0x118>
 80095e6:	f107 030c 	add.w	r3, r7, #12
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fef8 	bl	800a3e0 <vTaskInternalSetTimeOutState>
 80095f0:	2301      	movs	r3, #1
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
 80095f4:	f002 f90e 	bl	800b814 <vPortExitCritical>
 80095f8:	f000 fc58 	bl	8009eac <vTaskSuspendAll>
 80095fc:	f002 f8da 	bl	800b7b4 <vPortEnterCritical>
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009606:	b25b      	sxtb	r3, r3
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d103      	bne.n	8009616 <xQueueSemaphoreTake+0x13a>
 800960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800961c:	b25b      	sxtb	r3, r3
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009622:	d103      	bne.n	800962c <xQueueSemaphoreTake+0x150>
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800962c:	f002 f8f2 	bl	800b814 <vPortExitCritical>
 8009630:	463a      	mov	r2, r7
 8009632:	f107 030c 	add.w	r3, r7, #12
 8009636:	4611      	mov	r1, r2
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fee7 	bl	800a40c <xTaskCheckForTimeOut>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d132      	bne.n	80096aa <xQueueSemaphoreTake+0x1ce>
 8009644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009646:	f000 f972 	bl	800992e <prvIsQueueEmpty>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d026      	beq.n	800969e <xQueueSemaphoreTake+0x1c2>
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d109      	bne.n	800966c <xQueueSemaphoreTake+0x190>
 8009658:	f002 f8ac 	bl	800b7b4 <vPortEnterCritical>
 800965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	4618      	mov	r0, r3
 8009662:	f001 f835 	bl	800a6d0 <xTaskPriorityInherit>
 8009666:	6338      	str	r0, [r7, #48]	; 0x30
 8009668:	f002 f8d4 	bl	800b814 <vPortExitCritical>
 800966c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966e:	3324      	adds	r3, #36	; 0x24
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	4611      	mov	r1, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fdff 	bl	800a278 <vTaskPlaceOnEventList>
 800967a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800967c:	f000 f905 	bl	800988a <prvUnlockQueue>
 8009680:	f000 fc22 	bl	8009ec8 <xTaskResumeAll>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	f47f af68 	bne.w	800955c <xQueueSemaphoreTake+0x80>
 800968c:	4b18      	ldr	r3, [pc, #96]	; (80096f0 <xQueueSemaphoreTake+0x214>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	e75e      	b.n	800955c <xQueueSemaphoreTake+0x80>
 800969e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096a0:	f000 f8f3 	bl	800988a <prvUnlockQueue>
 80096a4:	f000 fc10 	bl	8009ec8 <xTaskResumeAll>
 80096a8:	e758      	b.n	800955c <xQueueSemaphoreTake+0x80>
 80096aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ac:	f000 f8ed 	bl	800988a <prvUnlockQueue>
 80096b0:	f000 fc0a 	bl	8009ec8 <xTaskResumeAll>
 80096b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096b6:	f000 f93a 	bl	800992e <prvIsQueueEmpty>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f43f af4d 	beq.w	800955c <xQueueSemaphoreTake+0x80>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00d      	beq.n	80096e4 <xQueueSemaphoreTake+0x208>
 80096c8:	f002 f874 	bl	800b7b4 <vPortEnterCritical>
 80096cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ce:	f000 f834 	bl	800973a <prvGetDisinheritPriorityAfterTimeout>
 80096d2:	6278      	str	r0, [r7, #36]	; 0x24
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096da:	4618      	mov	r0, r3
 80096dc:	f001 f8ce 	bl	800a87c <vTaskPriorityDisinheritAfterTimeout>
 80096e0:	f002 f898 	bl	800b814 <vPortExitCritical>
 80096e4:	2300      	movs	r3, #0
 80096e6:	4618      	mov	r0, r3
 80096e8:	3738      	adds	r7, #56	; 0x38
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	e000ed04 	.word	0xe000ed04

080096f4 <vQueueDelete>:
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <vQueueDelete+0x28>
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60bb      	str	r3, [r7, #8]
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <vQueueDelete+0x26>
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 f95f 	bl	80099e0 <vQueueUnregisterQueue>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <vQueueDelete+0x3e>
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f002 fa2f 	bl	800bb90 <vPortFree>
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <prvGetDisinheritPriorityAfterTimeout>:
 800973a:	b480      	push	{r7}
 800973c:	b085      	sub	sp, #20
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	2b00      	cmp	r3, #0
 8009748:	d006      	beq.n	8009758 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	e001      	b.n	800975c <prvGetDisinheritPriorityAfterTimeout+0x22>
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <prvCopyDataToQueue>:
 800976a:	b580      	push	{r7, lr}
 800976c:	b086      	sub	sp, #24
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	607a      	str	r2, [r7, #4]
 8009776:	2300      	movs	r3, #0
 8009778:	617b      	str	r3, [r7, #20]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	613b      	str	r3, [r7, #16]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10d      	bne.n	80097a4 <prvCopyDataToQueue+0x3a>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d14d      	bne.n	800982c <prvCopyDataToQueue+0xc2>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	4618      	mov	r0, r3
 8009796:	f001 f803 	bl	800a7a0 <xTaskPriorityDisinherit>
 800979a:	6178      	str	r0, [r7, #20]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	609a      	str	r2, [r3, #8]
 80097a2:	e043      	b.n	800982c <prvCopyDataToQueue+0xc2>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d119      	bne.n	80097de <prvCopyDataToQueue+0x74>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6858      	ldr	r0, [r3, #4]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b2:	461a      	mov	r2, r3
 80097b4:	68b9      	ldr	r1, [r7, #8]
 80097b6:	f002 fb35 	bl	800be24 <memcpy>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	441a      	add	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	605a      	str	r2, [r3, #4]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d32b      	bcc.n	800982c <prvCopyDataToQueue+0xc2>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	605a      	str	r2, [r3, #4]
 80097dc:	e026      	b.n	800982c <prvCopyDataToQueue+0xc2>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68d8      	ldr	r0, [r3, #12]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e6:	461a      	mov	r2, r3
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	f002 fb1b 	bl	800be24 <memcpy>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f6:	425b      	negs	r3, r3
 80097f8:	441a      	add	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d207      	bcs.n	800981a <prvCopyDataToQueue+0xb0>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	689a      	ldr	r2, [r3, #8]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009812:	425b      	negs	r3, r3
 8009814:	441a      	add	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	60da      	str	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b02      	cmp	r3, #2
 800981e:	d105      	bne.n	800982c <prvCopyDataToQueue+0xc2>
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <prvCopyDataToQueue+0xc2>
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3b01      	subs	r3, #1
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	639a      	str	r2, [r3, #56]	; 0x38
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <prvCopyDataFromQueue>:
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984c:	2b00      	cmp	r3, #0
 800984e:	d018      	beq.n	8009882 <prvCopyDataFromQueue+0x44>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68da      	ldr	r2, [r3, #12]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	441a      	add	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60da      	str	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	429a      	cmp	r2, r3
 8009868:	d303      	bcc.n	8009872 <prvCopyDataFromQueue+0x34>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60da      	str	r2, [r3, #12]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68d9      	ldr	r1, [r3, #12]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987a:	461a      	mov	r2, r3
 800987c:	6838      	ldr	r0, [r7, #0]
 800987e:	f002 fad1 	bl	800be24 <memcpy>
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <prvUnlockQueue>:
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	f001 ff8f 	bl	800b7b4 <vPortEnterCritical>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800989c:	73fb      	strb	r3, [r7, #15]
 800989e:	e011      	b.n	80098c4 <prvUnlockQueue+0x3a>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d012      	beq.n	80098ce <prvUnlockQueue+0x44>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 fd33 	bl	800a318 <xTaskRemoveFromEventList>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <prvUnlockQueue+0x32>
 80098b8:	f000 fe0a 	bl	800a4d0 <vTaskMissedYield>
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	3b01      	subs	r3, #1
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	73fb      	strb	r3, [r7, #15]
 80098c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dce9      	bgt.n	80098a0 <prvUnlockQueue+0x16>
 80098cc:	e000      	b.n	80098d0 <prvUnlockQueue+0x46>
 80098ce:	bf00      	nop
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	22ff      	movs	r2, #255	; 0xff
 80098d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098d8:	f001 ff9c 	bl	800b814 <vPortExitCritical>
 80098dc:	f001 ff6a 	bl	800b7b4 <vPortEnterCritical>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098e6:	73bb      	strb	r3, [r7, #14]
 80098e8:	e011      	b.n	800990e <prvUnlockQueue+0x84>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d012      	beq.n	8009918 <prvUnlockQueue+0x8e>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3310      	adds	r3, #16
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 fd0e 	bl	800a318 <xTaskRemoveFromEventList>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <prvUnlockQueue+0x7c>
 8009902:	f000 fde5 	bl	800a4d0 <vTaskMissedYield>
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	3b01      	subs	r3, #1
 800990a:	b2db      	uxtb	r3, r3
 800990c:	73bb      	strb	r3, [r7, #14]
 800990e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009912:	2b00      	cmp	r3, #0
 8009914:	dce9      	bgt.n	80098ea <prvUnlockQueue+0x60>
 8009916:	e000      	b.n	800991a <prvUnlockQueue+0x90>
 8009918:	bf00      	nop
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	22ff      	movs	r2, #255	; 0xff
 800991e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009922:	f001 ff77 	bl	800b814 <vPortExitCritical>
 8009926:	bf00      	nop
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <prvIsQueueEmpty>:
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	f001 ff3d 	bl	800b7b4 <vPortEnterCritical>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <prvIsQueueEmpty+0x1a>
 8009942:	2301      	movs	r3, #1
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	e001      	b.n	800994c <prvIsQueueEmpty+0x1e>
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	f001 ff62 	bl	800b814 <vPortExitCritical>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <prvIsQueueFull>:
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	f001 ff27 	bl	800b7b4 <vPortEnterCritical>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	429a      	cmp	r2, r3
 8009970:	d102      	bne.n	8009978 <prvIsQueueFull+0x1e>
 8009972:	2301      	movs	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	e001      	b.n	800997c <prvIsQueueFull+0x22>
 8009978:	2300      	movs	r3, #0
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	f001 ff4a 	bl	800b814 <vPortExitCritical>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
	...

0800998c <vQueueAddToRegistry>:
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]
 800999a:	e014      	b.n	80099c6 <vQueueAddToRegistry+0x3a>
 800999c:	4a0f      	ldr	r2, [pc, #60]	; (80099dc <vQueueAddToRegistry+0x50>)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10b      	bne.n	80099c0 <vQueueAddToRegistry+0x34>
 80099a8:	490c      	ldr	r1, [pc, #48]	; (80099dc <vQueueAddToRegistry+0x50>)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80099b2:	4a0a      	ldr	r2, [pc, #40]	; (80099dc <vQueueAddToRegistry+0x50>)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	4413      	add	r3, r2
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	605a      	str	r2, [r3, #4]
 80099be:	e006      	b.n	80099ce <vQueueAddToRegistry+0x42>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	3301      	adds	r3, #1
 80099c4:	60fb      	str	r3, [r7, #12]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2b07      	cmp	r3, #7
 80099ca:	d9e7      	bls.n	800999c <vQueueAddToRegistry+0x10>
 80099cc:	bf00      	nop
 80099ce:	bf00      	nop
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	20000d3c 	.word	0x20000d3c

080099e0 <vQueueUnregisterQueue>:
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	e016      	b.n	8009a1c <vQueueUnregisterQueue+0x3c>
 80099ee:	4a10      	ldr	r2, [pc, #64]	; (8009a30 <vQueueUnregisterQueue+0x50>)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	4413      	add	r3, r2
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d10b      	bne.n	8009a16 <vQueueUnregisterQueue+0x36>
 80099fe:	4a0c      	ldr	r2, [pc, #48]	; (8009a30 <vQueueUnregisterQueue+0x50>)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2100      	movs	r1, #0
 8009a04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8009a08:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <vQueueUnregisterQueue+0x50>)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	4413      	add	r3, r2
 8009a10:	2200      	movs	r2, #0
 8009a12:	605a      	str	r2, [r3, #4]
 8009a14:	e006      	b.n	8009a24 <vQueueUnregisterQueue+0x44>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b07      	cmp	r3, #7
 8009a20:	d9e5      	bls.n	80099ee <vQueueUnregisterQueue+0xe>
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	20000d3c 	.word	0x20000d3c

08009a34 <vQueueWaitForMessageRestricted>:
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	f001 feb6 	bl	800b7b4 <vPortEnterCritical>
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a4e:	b25b      	sxtb	r3, r3
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a54:	d103      	bne.n	8009a5e <vQueueWaitForMessageRestricted+0x2a>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a64:	b25b      	sxtb	r3, r3
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6a:	d103      	bne.n	8009a74 <vQueueWaitForMessageRestricted+0x40>
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a74:	f001 fece 	bl	800b814 <vPortExitCritical>
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <vQueueWaitForMessageRestricted+0x5a>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	3324      	adds	r3, #36	; 0x24
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	68b9      	ldr	r1, [r7, #8]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fc19 	bl	800a2c0 <vTaskPlaceOnEventListRestricted>
 8009a8e:	6978      	ldr	r0, [r7, #20]
 8009a90:	f7ff fefb 	bl	800988a <prvUnlockQueue>
 8009a94:	bf00      	nop
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <xTaskCreateStatic>:
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08e      	sub	sp, #56	; 0x38
 8009aa0:	af04      	add	r7, sp, #16
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <xTaskCreateStatic+0x2a>
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	623b      	str	r3, [r7, #32]
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <xTaskCreateStatic+0x28>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xTaskCreateStatic+0x46>
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	61fb      	str	r3, [r7, #28]
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xTaskCreateStatic+0x44>
 8009ae2:	235c      	movs	r3, #92	; 0x5c
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8009aea:	d00a      	beq.n	8009b02 <xTaskCreateStatic+0x66>
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	61bb      	str	r3, [r7, #24]
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <xTaskCreateStatic+0x64>
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01e      	beq.n	8009b48 <xTaskCreateStatic+0xac>
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01b      	beq.n	8009b48 <xTaskCreateStatic+0xac>
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	627b      	str	r3, [r7, #36]	; 0x24
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b18:	631a      	str	r2, [r3, #48]	; 0x30
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8009b22:	2300      	movs	r3, #0
 8009b24:	9303      	str	r3, [sp, #12]
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	9302      	str	r3, [sp, #8]
 8009b2a:	f107 0314 	add.w	r3, r7, #20
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	68b9      	ldr	r1, [r7, #8]
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 f850 	bl	8009be0 <prvInitialiseNewTask>
 8009b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b42:	f000 f8dd 	bl	8009d00 <prvAddNewTaskToReadyList>
 8009b46:	e001      	b.n	8009b4c <xTaskCreateStatic+0xb0>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3728      	adds	r7, #40	; 0x28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <xTaskCreate>:
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b08c      	sub	sp, #48	; 0x30
 8009b5a:	af04      	add	r7, sp, #16
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	603b      	str	r3, [r7, #0]
 8009b62:	4613      	mov	r3, r2
 8009b64:	80fb      	strh	r3, [r7, #6]
 8009b66:	88fb      	ldrh	r3, [r7, #6]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f001 ff44 	bl	800b9f8 <pvPortMalloc>
 8009b70:	6178      	str	r0, [r7, #20]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00e      	beq.n	8009b96 <xTaskCreate+0x40>
 8009b78:	205c      	movs	r0, #92	; 0x5c
 8009b7a:	f001 ff3d 	bl	800b9f8 <pvPortMalloc>
 8009b7e:	61f8      	str	r0, [r7, #28]
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <xTaskCreate+0x38>
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8009b8c:	e005      	b.n	8009b9a <xTaskCreate+0x44>
 8009b8e:	6978      	ldr	r0, [r7, #20]
 8009b90:	f001 fffe 	bl	800bb90 <vPortFree>
 8009b94:	e001      	b.n	8009b9a <xTaskCreate+0x44>
 8009b96:	2300      	movs	r3, #0
 8009b98:	61fb      	str	r3, [r7, #28]
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d017      	beq.n	8009bd0 <xTaskCreate+0x7a>
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8009ba8:	88fa      	ldrh	r2, [r7, #6]
 8009baa:	2300      	movs	r3, #0
 8009bac:	9303      	str	r3, [sp, #12]
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	9302      	str	r3, [sp, #8]
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f80e 	bl	8009be0 <prvInitialiseNewTask>
 8009bc4:	69f8      	ldr	r0, [r7, #28]
 8009bc6:	f000 f89b 	bl	8009d00 <prvAddNewTaskToReadyList>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	61bb      	str	r3, [r7, #24]
 8009bce:	e002      	b.n	8009bd6 <xTaskCreate+0x80>
 8009bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd4:	61bb      	str	r3, [r7, #24]
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <prvInitialiseNewTask>:
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	21a5      	movs	r1, #165	; 0xa5
 8009bfa:	f002 f8e7 	bl	800bdcc <memset>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	61bb      	str	r3, [r7, #24]
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	f023 0307 	bic.w	r3, r3, #7
 8009c16:	61bb      	str	r3, [r7, #24]
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <prvInitialiseNewTask+0x58>
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <prvInitialiseNewTask+0x56>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d01f      	beq.n	8009c7e <prvInitialiseNewTask+0x9e>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	61fb      	str	r3, [r7, #28]
 8009c42:	e012      	b.n	8009c6a <prvInitialiseNewTask+0x8a>
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	4413      	add	r3, r2
 8009c4a:	7819      	ldrb	r1, [r3, #0]
 8009c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	4413      	add	r3, r2
 8009c52:	3334      	adds	r3, #52	; 0x34
 8009c54:	460a      	mov	r2, r1
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d006      	beq.n	8009c72 <prvInitialiseNewTask+0x92>
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	3301      	adds	r3, #1
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	2b0f      	cmp	r3, #15
 8009c6e:	d9e9      	bls.n	8009c44 <prvInitialiseNewTask+0x64>
 8009c70:	e000      	b.n	8009c74 <prvInitialiseNewTask+0x94>
 8009c72:	bf00      	nop
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c7c:	e003      	b.n	8009c86 <prvInitialiseNewTask+0xa6>
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	2b37      	cmp	r3, #55	; 0x37
 8009c8a:	d901      	bls.n	8009c90 <prvInitialiseNewTask+0xb0>
 8009c8c:	2337      	movs	r3, #55	; 0x37
 8009c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	651a      	str	r2, [r3, #80]	; 0x50
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe ff62 	bl	8008b70 <vListInitialiseItem>
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	3318      	adds	r3, #24
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe ff5d 	bl	8008b70 <vListInitialiseItem>
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cba:	611a      	str	r2, [r3, #16]
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	619a      	str	r2, [r3, #24]
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cce:	2200      	movs	r2, #0
 8009cd0:	655a      	str	r2, [r3, #84]	; 0x54
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	68f9      	ldr	r1, [r7, #12]
 8009cde:	69b8      	ldr	r0, [r7, #24]
 8009ce0:	f001 fc3c 	bl	800b55c <pxPortInitialiseStack>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <prvInitialiseNewTask+0x116>
 8009cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	bf00      	nop
 8009cf8:	3720      	adds	r7, #32
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <prvAddNewTaskToReadyList>:
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	f001 fd54 	bl	800b7b4 <vPortEnterCritical>
 8009d0c:	4b2d      	ldr	r3, [pc, #180]	; (8009dc4 <prvAddNewTaskToReadyList+0xc4>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3301      	adds	r3, #1
 8009d12:	4a2c      	ldr	r2, [pc, #176]	; (8009dc4 <prvAddNewTaskToReadyList+0xc4>)
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	4b2c      	ldr	r3, [pc, #176]	; (8009dc8 <prvAddNewTaskToReadyList+0xc8>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d109      	bne.n	8009d32 <prvAddNewTaskToReadyList+0x32>
 8009d1e:	4a2a      	ldr	r2, [pc, #168]	; (8009dc8 <prvAddNewTaskToReadyList+0xc8>)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6013      	str	r3, [r2, #0]
 8009d24:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <prvAddNewTaskToReadyList+0xc4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d110      	bne.n	8009d4e <prvAddNewTaskToReadyList+0x4e>
 8009d2c:	f000 fbf4 	bl	800a518 <prvInitialiseTaskLists>
 8009d30:	e00d      	b.n	8009d4e <prvAddNewTaskToReadyList+0x4e>
 8009d32:	4b26      	ldr	r3, [pc, #152]	; (8009dcc <prvAddNewTaskToReadyList+0xcc>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <prvAddNewTaskToReadyList+0x4e>
 8009d3a:	4b23      	ldr	r3, [pc, #140]	; (8009dc8 <prvAddNewTaskToReadyList+0xc8>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d802      	bhi.n	8009d4e <prvAddNewTaskToReadyList+0x4e>
 8009d48:	4a1f      	ldr	r2, [pc, #124]	; (8009dc8 <prvAddNewTaskToReadyList+0xc8>)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	4b20      	ldr	r3, [pc, #128]	; (8009dd0 <prvAddNewTaskToReadyList+0xd0>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3301      	adds	r3, #1
 8009d54:	4a1e      	ldr	r2, [pc, #120]	; (8009dd0 <prvAddNewTaskToReadyList+0xd0>)
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <prvAddNewTaskToReadyList+0xd0>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	645a      	str	r2, [r3, #68]	; 0x44
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d64:	4b1b      	ldr	r3, [pc, #108]	; (8009dd4 <prvAddNewTaskToReadyList+0xd4>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d903      	bls.n	8009d74 <prvAddNewTaskToReadyList+0x74>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d70:	4a18      	ldr	r2, [pc, #96]	; (8009dd4 <prvAddNewTaskToReadyList+0xd4>)
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4a15      	ldr	r2, [pc, #84]	; (8009dd8 <prvAddNewTaskToReadyList+0xd8>)
 8009d82:	441a      	add	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3304      	adds	r3, #4
 8009d88:	4619      	mov	r1, r3
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	f7fe fefd 	bl	8008b8a <vListInsertEnd>
 8009d90:	f001 fd40 	bl	800b814 <vPortExitCritical>
 8009d94:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <prvAddNewTaskToReadyList+0xcc>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00e      	beq.n	8009dba <prvAddNewTaskToReadyList+0xba>
 8009d9c:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <prvAddNewTaskToReadyList+0xc8>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d207      	bcs.n	8009dba <prvAddNewTaskToReadyList+0xba>
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <prvAddNewTaskToReadyList+0xdc>)
 8009dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	bf00      	nop
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20001250 	.word	0x20001250
 8009dc8:	20000d7c 	.word	0x20000d7c
 8009dcc:	2000125c 	.word	0x2000125c
 8009dd0:	2000126c 	.word	0x2000126c
 8009dd4:	20001258 	.word	0x20001258
 8009dd8:	20000d80 	.word	0x20000d80
 8009ddc:	e000ed04 	.word	0xe000ed04

08009de0 <vTaskStartScheduler>:
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08a      	sub	sp, #40	; 0x28
 8009de4:	af04      	add	r7, sp, #16
 8009de6:	2300      	movs	r3, #0
 8009de8:	60bb      	str	r3, [r7, #8]
 8009dea:	2300      	movs	r3, #0
 8009dec:	607b      	str	r3, [r7, #4]
 8009dee:	463a      	mov	r2, r7
 8009df0:	1d39      	adds	r1, r7, #4
 8009df2:	f107 0308 	add.w	r3, r7, #8
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fe66 	bl	8008ac8 <vApplicationGetIdleTaskMemory>
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	9202      	str	r2, [sp, #8]
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	2300      	movs	r3, #0
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	460a      	mov	r2, r1
 8009e0e:	4921      	ldr	r1, [pc, #132]	; (8009e94 <vTaskStartScheduler+0xb4>)
 8009e10:	4821      	ldr	r0, [pc, #132]	; (8009e98 <vTaskStartScheduler+0xb8>)
 8009e12:	f7ff fe43 	bl	8009a9c <xTaskCreateStatic>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4a20      	ldr	r2, [pc, #128]	; (8009e9c <vTaskStartScheduler+0xbc>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	4b1f      	ldr	r3, [pc, #124]	; (8009e9c <vTaskStartScheduler+0xbc>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <vTaskStartScheduler+0x4a>
 8009e24:	2301      	movs	r3, #1
 8009e26:	617b      	str	r3, [r7, #20]
 8009e28:	e001      	b.n	8009e2e <vTaskStartScheduler+0x4e>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d102      	bne.n	8009e3a <vTaskStartScheduler+0x5a>
 8009e34:	f000 ffe8 	bl	800ae08 <xTimerCreateTimerTask>
 8009e38:	6178      	str	r0, [r7, #20]
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d116      	bne.n	8009e6e <vTaskStartScheduler+0x8e>
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	bf00      	nop
 8009e54:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <vTaskStartScheduler+0xc0>)
 8009e56:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	4b11      	ldr	r3, [pc, #68]	; (8009ea4 <vTaskStartScheduler+0xc4>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	601a      	str	r2, [r3, #0]
 8009e62:	4b11      	ldr	r3, [pc, #68]	; (8009ea8 <vTaskStartScheduler+0xc8>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	f001 fc02 	bl	800b670 <xPortStartScheduler>
 8009e6c:	e00e      	b.n	8009e8c <vTaskStartScheduler+0xac>
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e74:	d10a      	bne.n	8009e8c <vTaskStartScheduler+0xac>
 8009e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	bf00      	nop
 8009e8a:	e7fe      	b.n	8009e8a <vTaskStartScheduler+0xaa>
 8009e8c:	bf00      	nop
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	0800bee4 	.word	0x0800bee4
 8009e98:	0800a4e9 	.word	0x0800a4e9
 8009e9c:	20001274 	.word	0x20001274
 8009ea0:	20001270 	.word	0x20001270
 8009ea4:	2000125c 	.word	0x2000125c
 8009ea8:	20001254 	.word	0x20001254

08009eac <vTaskSuspendAll>:
 8009eac:	b480      	push	{r7}
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <vTaskSuspendAll+0x18>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	4a03      	ldr	r2, [pc, #12]	; (8009ec4 <vTaskSuspendAll+0x18>)
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	bf00      	nop
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	20001278 	.word	0x20001278

08009ec8 <xTaskResumeAll>:
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60bb      	str	r3, [r7, #8]
 8009ed6:	4b42      	ldr	r3, [pc, #264]	; (8009fe0 <xTaskResumeAll+0x118>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10a      	bne.n	8009ef4 <xTaskResumeAll+0x2c>
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	bf00      	nop
 8009ef2:	e7fe      	b.n	8009ef2 <xTaskResumeAll+0x2a>
 8009ef4:	f001 fc5e 	bl	800b7b4 <vPortEnterCritical>
 8009ef8:	4b39      	ldr	r3, [pc, #228]	; (8009fe0 <xTaskResumeAll+0x118>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3b01      	subs	r3, #1
 8009efe:	4a38      	ldr	r2, [pc, #224]	; (8009fe0 <xTaskResumeAll+0x118>)
 8009f00:	6013      	str	r3, [r2, #0]
 8009f02:	4b37      	ldr	r3, [pc, #220]	; (8009fe0 <xTaskResumeAll+0x118>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d162      	bne.n	8009fd0 <xTaskResumeAll+0x108>
 8009f0a:	4b36      	ldr	r3, [pc, #216]	; (8009fe4 <xTaskResumeAll+0x11c>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d05e      	beq.n	8009fd0 <xTaskResumeAll+0x108>
 8009f12:	e02f      	b.n	8009f74 <xTaskResumeAll+0xac>
 8009f14:	4b34      	ldr	r3, [pc, #208]	; (8009fe8 <xTaskResumeAll+0x120>)
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3318      	adds	r3, #24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fe fe8f 	bl	8008c44 <uxListRemove>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fe8a 	bl	8008c44 <uxListRemove>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f34:	4b2d      	ldr	r3, [pc, #180]	; (8009fec <xTaskResumeAll+0x124>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d903      	bls.n	8009f44 <xTaskResumeAll+0x7c>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	4a2a      	ldr	r2, [pc, #168]	; (8009fec <xTaskResumeAll+0x124>)
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4a27      	ldr	r2, [pc, #156]	; (8009ff0 <xTaskResumeAll+0x128>)
 8009f52:	441a      	add	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3304      	adds	r3, #4
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f7fe fe15 	bl	8008b8a <vListInsertEnd>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f64:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <xTaskResumeAll+0x12c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d302      	bcc.n	8009f74 <xTaskResumeAll+0xac>
 8009f6e:	4b22      	ldr	r3, [pc, #136]	; (8009ff8 <xTaskResumeAll+0x130>)
 8009f70:	2201      	movs	r2, #1
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	4b1c      	ldr	r3, [pc, #112]	; (8009fe8 <xTaskResumeAll+0x120>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1cb      	bne.n	8009f14 <xTaskResumeAll+0x4c>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <xTaskResumeAll+0xbe>
 8009f82:	f000 fb67 	bl	800a654 <prvResetNextTaskUnblockTime>
 8009f86:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <xTaskResumeAll+0x134>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	607b      	str	r3, [r7, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d010      	beq.n	8009fb4 <xTaskResumeAll+0xec>
 8009f92:	f000 f859 	bl	800a048 <xTaskIncrementTick>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <xTaskResumeAll+0xda>
 8009f9c:	4b16      	ldr	r3, [pc, #88]	; (8009ff8 <xTaskResumeAll+0x130>)
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	607b      	str	r3, [r7, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1f1      	bne.n	8009f92 <xTaskResumeAll+0xca>
 8009fae:	4b13      	ldr	r3, [pc, #76]	; (8009ffc <xTaskResumeAll+0x134>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	4b10      	ldr	r3, [pc, #64]	; (8009ff8 <xTaskResumeAll+0x130>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d009      	beq.n	8009fd0 <xTaskResumeAll+0x108>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	60bb      	str	r3, [r7, #8]
 8009fc0:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <xTaskResumeAll+0x138>)
 8009fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f001 fc20 	bl	800b814 <vPortExitCritical>
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20001278 	.word	0x20001278
 8009fe4:	20001250 	.word	0x20001250
 8009fe8:	20001210 	.word	0x20001210
 8009fec:	20001258 	.word	0x20001258
 8009ff0:	20000d80 	.word	0x20000d80
 8009ff4:	20000d7c 	.word	0x20000d7c
 8009ff8:	20001264 	.word	0x20001264
 8009ffc:	20001260 	.word	0x20001260
 800a000:	e000ed04 	.word	0xe000ed04

0800a004 <xTaskGetTickCount>:
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4b05      	ldr	r3, [pc, #20]	; (800a020 <xTaskGetTickCount+0x1c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	607b      	str	r3, [r7, #4]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	20001254 	.word	0x20001254

0800a024 <xTaskGetTickCountFromISR>:
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	f001 fca5 	bl	800b978 <vPortValidateInterruptPriority>
 800a02e:	2300      	movs	r3, #0
 800a030:	607b      	str	r3, [r7, #4]
 800a032:	4b04      	ldr	r3, [pc, #16]	; (800a044 <xTaskGetTickCountFromISR+0x20>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20001254 	.word	0x20001254

0800a048 <xTaskIncrementTick>:
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
 800a052:	4b4f      	ldr	r3, [pc, #316]	; (800a190 <xTaskIncrementTick+0x148>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	f040 808f 	bne.w	800a17a <xTaskIncrementTick+0x132>
 800a05c:	4b4d      	ldr	r3, [pc, #308]	; (800a194 <xTaskIncrementTick+0x14c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3301      	adds	r3, #1
 800a062:	613b      	str	r3, [r7, #16]
 800a064:	4a4b      	ldr	r2, [pc, #300]	; (800a194 <xTaskIncrementTick+0x14c>)
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d120      	bne.n	800a0b2 <xTaskIncrementTick+0x6a>
 800a070:	4b49      	ldr	r3, [pc, #292]	; (800a198 <xTaskIncrementTick+0x150>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00a      	beq.n	800a090 <xTaskIncrementTick+0x48>
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	bf00      	nop
 800a08e:	e7fe      	b.n	800a08e <xTaskIncrementTick+0x46>
 800a090:	4b41      	ldr	r3, [pc, #260]	; (800a198 <xTaskIncrementTick+0x150>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	4b41      	ldr	r3, [pc, #260]	; (800a19c <xTaskIncrementTick+0x154>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a3f      	ldr	r2, [pc, #252]	; (800a198 <xTaskIncrementTick+0x150>)
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	4a3f      	ldr	r2, [pc, #252]	; (800a19c <xTaskIncrementTick+0x154>)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	4b3e      	ldr	r3, [pc, #248]	; (800a1a0 <xTaskIncrementTick+0x158>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	4a3d      	ldr	r2, [pc, #244]	; (800a1a0 <xTaskIncrementTick+0x158>)
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	f000 fad1 	bl	800a654 <prvResetNextTaskUnblockTime>
 800a0b2:	4b3c      	ldr	r3, [pc, #240]	; (800a1a4 <xTaskIncrementTick+0x15c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d349      	bcc.n	800a150 <xTaskIncrementTick+0x108>
 800a0bc:	4b36      	ldr	r3, [pc, #216]	; (800a198 <xTaskIncrementTick+0x150>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d104      	bne.n	800a0d0 <xTaskIncrementTick+0x88>
 800a0c6:	4b37      	ldr	r3, [pc, #220]	; (800a1a4 <xTaskIncrementTick+0x15c>)
 800a0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e03f      	b.n	800a150 <xTaskIncrementTick+0x108>
 800a0d0:	4b31      	ldr	r3, [pc, #196]	; (800a198 <xTaskIncrementTick+0x150>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	60bb      	str	r3, [r7, #8]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	607b      	str	r3, [r7, #4]
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d203      	bcs.n	800a0f0 <xTaskIncrementTick+0xa8>
 800a0e8:	4a2e      	ldr	r2, [pc, #184]	; (800a1a4 <xTaskIncrementTick+0x15c>)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	e02f      	b.n	800a150 <xTaskIncrementTick+0x108>
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fda5 	bl	8008c44 <uxListRemove>
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <xTaskIncrementTick+0xc4>
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	3318      	adds	r3, #24
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fd9c 	bl	8008c44 <uxListRemove>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a110:	4b25      	ldr	r3, [pc, #148]	; (800a1a8 <xTaskIncrementTick+0x160>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	429a      	cmp	r2, r3
 800a116:	d903      	bls.n	800a120 <xTaskIncrementTick+0xd8>
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	4a22      	ldr	r2, [pc, #136]	; (800a1a8 <xTaskIncrementTick+0x160>)
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4a1f      	ldr	r2, [pc, #124]	; (800a1ac <xTaskIncrementTick+0x164>)
 800a12e:	441a      	add	r2, r3
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	3304      	adds	r3, #4
 800a134:	4619      	mov	r1, r3
 800a136:	4610      	mov	r0, r2
 800a138:	f7fe fd27 	bl	8008b8a <vListInsertEnd>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a140:	4b1b      	ldr	r3, [pc, #108]	; (800a1b0 <xTaskIncrementTick+0x168>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	429a      	cmp	r2, r3
 800a148:	d3b8      	bcc.n	800a0bc <xTaskIncrementTick+0x74>
 800a14a:	2301      	movs	r3, #1
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	e7b5      	b.n	800a0bc <xTaskIncrementTick+0x74>
 800a150:	4b17      	ldr	r3, [pc, #92]	; (800a1b0 <xTaskIncrementTick+0x168>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a156:	4915      	ldr	r1, [pc, #84]	; (800a1ac <xTaskIncrementTick+0x164>)
 800a158:	4613      	mov	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	440b      	add	r3, r1
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d901      	bls.n	800a16c <xTaskIncrementTick+0x124>
 800a168:	2301      	movs	r3, #1
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <xTaskIncrementTick+0x16c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d007      	beq.n	800a184 <xTaskIncrementTick+0x13c>
 800a174:	2301      	movs	r3, #1
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	e004      	b.n	800a184 <xTaskIncrementTick+0x13c>
 800a17a:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <xTaskIncrementTick+0x170>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3301      	adds	r3, #1
 800a180:	4a0d      	ldr	r2, [pc, #52]	; (800a1b8 <xTaskIncrementTick+0x170>)
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20001278 	.word	0x20001278
 800a194:	20001254 	.word	0x20001254
 800a198:	20001208 	.word	0x20001208
 800a19c:	2000120c 	.word	0x2000120c
 800a1a0:	20001268 	.word	0x20001268
 800a1a4:	20001270 	.word	0x20001270
 800a1a8:	20001258 	.word	0x20001258
 800a1ac:	20000d80 	.word	0x20000d80
 800a1b0:	20000d7c 	.word	0x20000d7c
 800a1b4:	20001264 	.word	0x20001264
 800a1b8:	20001260 	.word	0x20001260

0800a1bc <vTaskSwitchContext>:
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4b28      	ldr	r3, [pc, #160]	; (800a264 <vTaskSwitchContext+0xa8>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <vTaskSwitchContext+0x16>
 800a1ca:	4b27      	ldr	r3, [pc, #156]	; (800a268 <vTaskSwitchContext+0xac>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	e041      	b.n	800a256 <vTaskSwitchContext+0x9a>
 800a1d2:	4b25      	ldr	r3, [pc, #148]	; (800a268 <vTaskSwitchContext+0xac>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	4b24      	ldr	r3, [pc, #144]	; (800a26c <vTaskSwitchContext+0xb0>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	e010      	b.n	800a202 <vTaskSwitchContext+0x46>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10a      	bne.n	800a1fc <vTaskSwitchContext+0x40>
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	607b      	str	r3, [r7, #4]
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <vTaskSwitchContext+0x3e>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	491b      	ldr	r1, [pc, #108]	; (800a270 <vTaskSwitchContext+0xb4>)
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	440b      	add	r3, r1
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d0e4      	beq.n	800a1e0 <vTaskSwitchContext+0x24>
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	4613      	mov	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4a13      	ldr	r2, [pc, #76]	; (800a270 <vTaskSwitchContext+0xb4>)
 800a222:	4413      	add	r3, r2
 800a224:	60bb      	str	r3, [r7, #8]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	605a      	str	r2, [r3, #4]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	3308      	adds	r3, #8
 800a238:	429a      	cmp	r2, r3
 800a23a:	d104      	bne.n	800a246 <vTaskSwitchContext+0x8a>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	605a      	str	r2, [r3, #4]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	4a09      	ldr	r2, [pc, #36]	; (800a274 <vTaskSwitchContext+0xb8>)
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	4a06      	ldr	r2, [pc, #24]	; (800a26c <vTaskSwitchContext+0xb0>)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	bf00      	nop
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20001278 	.word	0x20001278
 800a268:	20001264 	.word	0x20001264
 800a26c:	20001258 	.word	0x20001258
 800a270:	20000d80 	.word	0x20000d80
 800a274:	20000d7c 	.word	0x20000d7c

0800a278 <vTaskPlaceOnEventList>:
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <vTaskPlaceOnEventList+0x26>
 800a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	60fb      	str	r3, [r7, #12]
 800a29a:	bf00      	nop
 800a29c:	e7fe      	b.n	800a29c <vTaskPlaceOnEventList+0x24>
 800a29e:	4b07      	ldr	r3, [pc, #28]	; (800a2bc <vTaskPlaceOnEventList+0x44>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3318      	adds	r3, #24
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7fe fc93 	bl	8008bd2 <vListInsert>
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	6838      	ldr	r0, [r7, #0]
 800a2b0:	f000 fd56 	bl	800ad60 <prvAddCurrentTaskToDelayedList>
 800a2b4:	bf00      	nop
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20000d7c 	.word	0x20000d7c

0800a2c0 <vTaskPlaceOnEventListRestricted>:
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <vTaskPlaceOnEventListRestricted+0x28>
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <vTaskPlaceOnEventListRestricted+0x26>
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <vTaskPlaceOnEventListRestricted+0x54>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3318      	adds	r3, #24
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7fe fc4a 	bl	8008b8a <vListInsertEnd>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <vTaskPlaceOnEventListRestricted+0x42>
 800a2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a300:	60bb      	str	r3, [r7, #8]
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	68b8      	ldr	r0, [r7, #8]
 800a306:	f000 fd2b 	bl	800ad60 <prvAddCurrentTaskToDelayedList>
 800a30a:	bf00      	nop
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20000d7c 	.word	0x20000d7c

0800a318 <xTaskRemoveFromEventList>:
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	613b      	str	r3, [r7, #16]
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <xTaskRemoveFromEventList+0x2c>
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <xTaskRemoveFromEventList+0x2a>
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	3318      	adds	r3, #24
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe fc7b 	bl	8008c44 <uxListRemove>
 800a34e:	4b1e      	ldr	r3, [pc, #120]	; (800a3c8 <xTaskRemoveFromEventList+0xb0>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d11d      	bne.n	800a392 <xTaskRemoveFromEventList+0x7a>
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	3304      	adds	r3, #4
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fc72 	bl	8008c44 <uxListRemove>
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <xTaskRemoveFromEventList+0xb4>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d903      	bls.n	800a374 <xTaskRemoveFromEventList+0x5c>
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <xTaskRemoveFromEventList+0xb4>)
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4a13      	ldr	r2, [pc, #76]	; (800a3d0 <xTaskRemoveFromEventList+0xb8>)
 800a382:	441a      	add	r2, r3
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	3304      	adds	r3, #4
 800a388:	4619      	mov	r1, r3
 800a38a:	4610      	mov	r0, r2
 800a38c:	f7fe fbfd 	bl	8008b8a <vListInsertEnd>
 800a390:	e005      	b.n	800a39e <xTaskRemoveFromEventList+0x86>
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	3318      	adds	r3, #24
 800a396:	4619      	mov	r1, r3
 800a398:	480e      	ldr	r0, [pc, #56]	; (800a3d4 <xTaskRemoveFromEventList+0xbc>)
 800a39a:	f7fe fbf6 	bl	8008b8a <vListInsertEnd>
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <xTaskRemoveFromEventList+0xc0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d905      	bls.n	800a3b8 <xTaskRemoveFromEventList+0xa0>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	4b0a      	ldr	r3, [pc, #40]	; (800a3dc <xTaskRemoveFromEventList+0xc4>)
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	e001      	b.n	800a3bc <xTaskRemoveFromEventList+0xa4>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	20001278 	.word	0x20001278
 800a3cc:	20001258 	.word	0x20001258
 800a3d0:	20000d80 	.word	0x20000d80
 800a3d4:	20001210 	.word	0x20001210
 800a3d8:	20000d7c 	.word	0x20000d7c
 800a3dc:	20001264 	.word	0x20001264

0800a3e0 <vTaskInternalSetTimeOutState>:
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	4b06      	ldr	r3, [pc, #24]	; (800a404 <vTaskInternalSetTimeOutState+0x24>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	4b05      	ldr	r3, [pc, #20]	; (800a408 <vTaskInternalSetTimeOutState+0x28>)
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	605a      	str	r2, [r3, #4]
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	20001268 	.word	0x20001268
 800a408:	20001254 	.word	0x20001254

0800a40c <xTaskCheckForTimeOut>:
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <xTaskCheckForTimeOut+0x26>
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	613b      	str	r3, [r7, #16]
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <xTaskCheckForTimeOut+0x24>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <xTaskCheckForTimeOut+0x42>
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	60fb      	str	r3, [r7, #12]
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xTaskCheckForTimeOut+0x40>
 800a44e:	f001 f9b1 	bl	800b7b4 <vPortEnterCritical>
 800a452:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <xTaskCheckForTimeOut+0xbc>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	61bb      	str	r3, [r7, #24]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46a:	d102      	bne.n	800a472 <xTaskCheckForTimeOut+0x66>
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
 800a470:	e023      	b.n	800a4ba <xTaskCheckForTimeOut+0xae>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <xTaskCheckForTimeOut+0xc0>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d007      	beq.n	800a48e <xTaskCheckForTimeOut+0x82>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	429a      	cmp	r2, r3
 800a486:	d302      	bcc.n	800a48e <xTaskCheckForTimeOut+0x82>
 800a488:	2301      	movs	r3, #1
 800a48a:	61fb      	str	r3, [r7, #28]
 800a48c:	e015      	b.n	800a4ba <xTaskCheckForTimeOut+0xae>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	429a      	cmp	r2, r3
 800a496:	d20b      	bcs.n	800a4b0 <xTaskCheckForTimeOut+0xa4>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	1ad2      	subs	r2, r2, r3
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff ff9b 	bl	800a3e0 <vTaskInternalSetTimeOutState>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	61fb      	str	r3, [r7, #28]
 800a4ae:	e004      	b.n	800a4ba <xTaskCheckForTimeOut+0xae>
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	61fb      	str	r3, [r7, #28]
 800a4ba:	f001 f9ab 	bl	800b814 <vPortExitCritical>
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3720      	adds	r7, #32
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20001254 	.word	0x20001254
 800a4cc:	20001268 	.word	0x20001268

0800a4d0 <vTaskMissedYield>:
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	4b03      	ldr	r3, [pc, #12]	; (800a4e4 <vTaskMissedYield+0x14>)
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	bf00      	nop
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	20001264 	.word	0x20001264

0800a4e8 <prvIdleTask>:
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	f000 f852 	bl	800a598 <prvCheckTasksWaitingTermination>
 800a4f4:	4b06      	ldr	r3, [pc, #24]	; (800a510 <prvIdleTask+0x28>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d9f9      	bls.n	800a4f0 <prvIdleTask+0x8>
 800a4fc:	4b05      	ldr	r3, [pc, #20]	; (800a514 <prvIdleTask+0x2c>)
 800a4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	e7f0      	b.n	800a4f0 <prvIdleTask+0x8>
 800a50e:	bf00      	nop
 800a510:	20000d80 	.word	0x20000d80
 800a514:	e000ed04 	.word	0xe000ed04

0800a518 <prvInitialiseTaskLists>:
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	2300      	movs	r3, #0
 800a520:	607b      	str	r3, [r7, #4]
 800a522:	e00c      	b.n	800a53e <prvInitialiseTaskLists+0x26>
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	4613      	mov	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4a12      	ldr	r2, [pc, #72]	; (800a578 <prvInitialiseTaskLists+0x60>)
 800a530:	4413      	add	r3, r2
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fafc 	bl	8008b30 <vListInitialise>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3301      	adds	r3, #1
 800a53c:	607b      	str	r3, [r7, #4]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b37      	cmp	r3, #55	; 0x37
 800a542:	d9ef      	bls.n	800a524 <prvInitialiseTaskLists+0xc>
 800a544:	480d      	ldr	r0, [pc, #52]	; (800a57c <prvInitialiseTaskLists+0x64>)
 800a546:	f7fe faf3 	bl	8008b30 <vListInitialise>
 800a54a:	480d      	ldr	r0, [pc, #52]	; (800a580 <prvInitialiseTaskLists+0x68>)
 800a54c:	f7fe faf0 	bl	8008b30 <vListInitialise>
 800a550:	480c      	ldr	r0, [pc, #48]	; (800a584 <prvInitialiseTaskLists+0x6c>)
 800a552:	f7fe faed 	bl	8008b30 <vListInitialise>
 800a556:	480c      	ldr	r0, [pc, #48]	; (800a588 <prvInitialiseTaskLists+0x70>)
 800a558:	f7fe faea 	bl	8008b30 <vListInitialise>
 800a55c:	480b      	ldr	r0, [pc, #44]	; (800a58c <prvInitialiseTaskLists+0x74>)
 800a55e:	f7fe fae7 	bl	8008b30 <vListInitialise>
 800a562:	4b0b      	ldr	r3, [pc, #44]	; (800a590 <prvInitialiseTaskLists+0x78>)
 800a564:	4a05      	ldr	r2, [pc, #20]	; (800a57c <prvInitialiseTaskLists+0x64>)
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <prvInitialiseTaskLists+0x7c>)
 800a56a:	4a05      	ldr	r2, [pc, #20]	; (800a580 <prvInitialiseTaskLists+0x68>)
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20000d80 	.word	0x20000d80
 800a57c:	200011e0 	.word	0x200011e0
 800a580:	200011f4 	.word	0x200011f4
 800a584:	20001210 	.word	0x20001210
 800a588:	20001224 	.word	0x20001224
 800a58c:	2000123c 	.word	0x2000123c
 800a590:	20001208 	.word	0x20001208
 800a594:	2000120c 	.word	0x2000120c

0800a598 <prvCheckTasksWaitingTermination>:
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	e019      	b.n	800a5d4 <prvCheckTasksWaitingTermination+0x3c>
 800a5a0:	f001 f908 	bl	800b7b4 <vPortEnterCritical>
 800a5a4:	4b10      	ldr	r3, [pc, #64]	; (800a5e8 <prvCheckTasksWaitingTermination+0x50>)
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	607b      	str	r3, [r7, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fb47 	bl	8008c44 <uxListRemove>
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <prvCheckTasksWaitingTermination+0x54>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	4a0b      	ldr	r2, [pc, #44]	; (800a5ec <prvCheckTasksWaitingTermination+0x54>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <prvCheckTasksWaitingTermination+0x58>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	4a0a      	ldr	r2, [pc, #40]	; (800a5f0 <prvCheckTasksWaitingTermination+0x58>)
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	f001 f923 	bl	800b814 <vPortExitCritical>
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f810 	bl	800a5f4 <prvDeleteTCB>
 800a5d4:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <prvCheckTasksWaitingTermination+0x58>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1e1      	bne.n	800a5a0 <prvCheckTasksWaitingTermination+0x8>
 800a5dc:	bf00      	nop
 800a5de:	bf00      	nop
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20001224 	.word	0x20001224
 800a5ec:	20001250 	.word	0x20001250
 800a5f0:	20001238 	.word	0x20001238

0800a5f4 <prvDeleteTCB>:
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a602:	2b00      	cmp	r3, #0
 800a604:	d108      	bne.n	800a618 <prvDeleteTCB+0x24>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 fac0 	bl	800bb90 <vPortFree>
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f001 fabd 	bl	800bb90 <vPortFree>
 800a616:	e018      	b.n	800a64a <prvDeleteTCB+0x56>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d103      	bne.n	800a62a <prvDeleteTCB+0x36>
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fab4 	bl	800bb90 <vPortFree>
 800a628:	e00f      	b.n	800a64a <prvDeleteTCB+0x56>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a630:	2b02      	cmp	r3, #2
 800a632:	d00a      	beq.n	800a64a <prvDeleteTCB+0x56>
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <prvDeleteTCB+0x54>
 800a64a:	bf00      	nop
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <prvResetNextTaskUnblockTime>:
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4b0c      	ldr	r3, [pc, #48]	; (800a68c <prvResetNextTaskUnblockTime+0x38>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d104      	bne.n	800a66e <prvResetNextTaskUnblockTime+0x1a>
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <prvResetNextTaskUnblockTime+0x3c>)
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	e008      	b.n	800a680 <prvResetNextTaskUnblockTime+0x2c>
 800a66e:	4b07      	ldr	r3, [pc, #28]	; (800a68c <prvResetNextTaskUnblockTime+0x38>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	607b      	str	r3, [r7, #4]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	4a04      	ldr	r2, [pc, #16]	; (800a690 <prvResetNextTaskUnblockTime+0x3c>)
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	20001208 	.word	0x20001208
 800a690:	20001270 	.word	0x20001270

0800a694 <xTaskGetSchedulerState>:
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <xTaskGetSchedulerState+0x34>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d102      	bne.n	800a6a8 <xTaskGetSchedulerState+0x14>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	607b      	str	r3, [r7, #4]
 800a6a6:	e008      	b.n	800a6ba <xTaskGetSchedulerState+0x26>
 800a6a8:	4b08      	ldr	r3, [pc, #32]	; (800a6cc <xTaskGetSchedulerState+0x38>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d102      	bne.n	800a6b6 <xTaskGetSchedulerState+0x22>
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	607b      	str	r3, [r7, #4]
 800a6b4:	e001      	b.n	800a6ba <xTaskGetSchedulerState+0x26>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	607b      	str	r3, [r7, #4]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	2000125c 	.word	0x2000125c
 800a6cc:	20001278 	.word	0x20001278

0800a6d0 <xTaskPriorityInherit>:
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	60bb      	str	r3, [r7, #8]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d051      	beq.n	800a78a <xTaskPriorityInherit+0xba>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ea:	4b2a      	ldr	r3, [pc, #168]	; (800a794 <xTaskPriorityInherit+0xc4>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d241      	bcs.n	800a778 <xTaskPriorityInherit+0xa8>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	db06      	blt.n	800a70a <xTaskPriorityInherit+0x3a>
 800a6fc:	4b25      	ldr	r3, [pc, #148]	; (800a794 <xTaskPriorityInherit+0xc4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a702:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	619a      	str	r2, [r3, #24]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	6959      	ldr	r1, [r3, #20]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4a1f      	ldr	r2, [pc, #124]	; (800a798 <xTaskPriorityInherit+0xc8>)
 800a71c:	4413      	add	r3, r2
 800a71e:	4299      	cmp	r1, r3
 800a720:	d122      	bne.n	800a768 <xTaskPriorityInherit+0x98>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	3304      	adds	r3, #4
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe fa8c 	bl	8008c44 <uxListRemove>
 800a72c:	4b19      	ldr	r3, [pc, #100]	; (800a794 <xTaskPriorityInherit+0xc4>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	62da      	str	r2, [r3, #44]	; 0x2c
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73a:	4b18      	ldr	r3, [pc, #96]	; (800a79c <xTaskPriorityInherit+0xcc>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d903      	bls.n	800a74a <xTaskPriorityInherit+0x7a>
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	4a15      	ldr	r2, [pc, #84]	; (800a79c <xTaskPriorityInherit+0xcc>)
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74e:	4613      	mov	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4a10      	ldr	r2, [pc, #64]	; (800a798 <xTaskPriorityInherit+0xc8>)
 800a758:	441a      	add	r2, r3
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4619      	mov	r1, r3
 800a760:	4610      	mov	r0, r2
 800a762:	f7fe fa12 	bl	8008b8a <vListInsertEnd>
 800a766:	e004      	b.n	800a772 <xTaskPriorityInherit+0xa2>
 800a768:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <xTaskPriorityInherit+0xc4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	62da      	str	r2, [r3, #44]	; 0x2c
 800a772:	2301      	movs	r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
 800a776:	e008      	b.n	800a78a <xTaskPriorityInherit+0xba>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a77c:	4b05      	ldr	r3, [pc, #20]	; (800a794 <xTaskPriorityInherit+0xc4>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a782:	429a      	cmp	r2, r3
 800a784:	d201      	bcs.n	800a78a <xTaskPriorityInherit+0xba>
 800a786:	2301      	movs	r3, #1
 800a788:	60fb      	str	r3, [r7, #12]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	20000d7c 	.word	0x20000d7c
 800a798:	20000d80 	.word	0x20000d80
 800a79c:	20001258 	.word	0x20001258

0800a7a0 <xTaskPriorityDisinherit>:
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	613b      	str	r3, [r7, #16]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d056      	beq.n	800a864 <xTaskPriorityDisinherit+0xc4>
 800a7b6:	4b2e      	ldr	r3, [pc, #184]	; (800a870 <xTaskPriorityDisinherit+0xd0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d00a      	beq.n	800a7d6 <xTaskPriorityDisinherit+0x36>
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	60fb      	str	r3, [r7, #12]
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xTaskPriorityDisinherit+0x34>
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <xTaskPriorityDisinherit+0x54>
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	60bb      	str	r3, [r7, #8]
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <xTaskPriorityDisinherit+0x52>
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f8:	1e5a      	subs	r2, r3, #1
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	651a      	str	r2, [r3, #80]	; 0x50
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a806:	429a      	cmp	r2, r3
 800a808:	d02c      	beq.n	800a864 <xTaskPriorityDisinherit+0xc4>
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d128      	bne.n	800a864 <xTaskPriorityDisinherit+0xc4>
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	3304      	adds	r3, #4
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fa14 	bl	8008c44 <uxListRemove>
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	62da      	str	r2, [r3, #44]	; 0x2c
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	619a      	str	r2, [r3, #24]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a834:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <xTaskPriorityDisinherit+0xd4>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d903      	bls.n	800a844 <xTaskPriorityDisinherit+0xa4>
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	4a0c      	ldr	r2, [pc, #48]	; (800a874 <xTaskPriorityDisinherit+0xd4>)
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4a09      	ldr	r2, [pc, #36]	; (800a878 <xTaskPriorityDisinherit+0xd8>)
 800a852:	441a      	add	r2, r3
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	3304      	adds	r3, #4
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f7fe f995 	bl	8008b8a <vListInsertEnd>
 800a860:	2301      	movs	r3, #1
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	4618      	mov	r0, r3
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20000d7c 	.word	0x20000d7c
 800a874:	20001258 	.word	0x20001258
 800a878:	20000d80 	.word	0x20000d80

0800a87c <vTaskPriorityDisinheritAfterTimeout>:
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	61bb      	str	r3, [r7, #24]
 800a88a:	2301      	movs	r3, #1
 800a88c:	617b      	str	r3, [r7, #20]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d06a      	beq.n	800a96a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10a      	bne.n	800a8b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d902      	bls.n	800a8c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	61fb      	str	r3, [r7, #28]
 800a8c0:	e002      	b.n	800a8c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c6:	61fb      	str	r3, [r7, #28]
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8cc:	69fa      	ldr	r2, [r7, #28]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d04b      	beq.n	800a96a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d146      	bne.n	800a96a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a8dc:	4b25      	ldr	r3, [pc, #148]	; (800a974 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d10a      	bne.n	800a8fc <vTaskPriorityDisinheritAfterTimeout+0x80>
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	60bb      	str	r3, [r7, #8]
 800a8f8:	bf00      	nop
 800a8fa:	e7fe      	b.n	800a8fa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	613b      	str	r3, [r7, #16]
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	69fa      	ldr	r2, [r7, #28]
 800a906:	62da      	str	r2, [r3, #44]	; 0x2c
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	db04      	blt.n	800a91a <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	619a      	str	r2, [r3, #24]
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	6959      	ldr	r1, [r3, #20]
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	4613      	mov	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4a13      	ldr	r2, [pc, #76]	; (800a978 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a92a:	4413      	add	r3, r2
 800a92c:	4299      	cmp	r1, r3
 800a92e:	d11c      	bne.n	800a96a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	3304      	adds	r3, #4
 800a934:	4618      	mov	r0, r3
 800a936:	f7fe f985 	bl	8008c44 <uxListRemove>
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93e:	4b0f      	ldr	r3, [pc, #60]	; (800a97c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d903      	bls.n	800a94e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94a:	4a0c      	ldr	r2, [pc, #48]	; (800a97c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	4613      	mov	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4a07      	ldr	r2, [pc, #28]	; (800a978 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a95c:	441a      	add	r2, r3
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	3304      	adds	r3, #4
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f7fe f910 	bl	8008b8a <vListInsertEnd>
 800a96a:	bf00      	nop
 800a96c:	3720      	adds	r7, #32
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20000d7c 	.word	0x20000d7c
 800a978:	20000d80 	.word	0x20000d80
 800a97c:	20001258 	.word	0x20001258

0800a980 <pvTaskIncrementMutexHeldCount>:
 800a980:	b480      	push	{r7}
 800a982:	af00      	add	r7, sp, #0
 800a984:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d004      	beq.n	800a996 <pvTaskIncrementMutexHeldCount+0x16>
 800a98c:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a992:	3201      	adds	r2, #1
 800a994:	651a      	str	r2, [r3, #80]	; 0x50
 800a996:	4b03      	ldr	r3, [pc, #12]	; (800a9a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4618      	mov	r0, r3
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	20000d7c 	.word	0x20000d7c

0800a9a8 <ulTaskNotifyTake>:
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	f000 feff 	bl	800b7b4 <vPortEnterCritical>
 800a9b6:	4b1e      	ldr	r3, [pc, #120]	; (800aa30 <ulTaskNotifyTake+0x88>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d113      	bne.n	800a9e8 <ulTaskNotifyTake+0x40>
 800a9c0:	4b1b      	ldr	r3, [pc, #108]	; (800aa30 <ulTaskNotifyTake+0x88>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00b      	beq.n	800a9e8 <ulTaskNotifyTake+0x40>
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	6838      	ldr	r0, [r7, #0]
 800a9d4:	f000 f9c4 	bl	800ad60 <prvAddCurrentTaskToDelayedList>
 800a9d8:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <ulTaskNotifyTake+0x8c>)
 800a9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f000 ff14 	bl	800b814 <vPortExitCritical>
 800a9ec:	f000 fee2 	bl	800b7b4 <vPortEnterCritical>
 800a9f0:	4b0f      	ldr	r3, [pc, #60]	; (800aa30 <ulTaskNotifyTake+0x88>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00c      	beq.n	800aa18 <ulTaskNotifyTake+0x70>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d004      	beq.n	800aa0e <ulTaskNotifyTake+0x66>
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <ulTaskNotifyTake+0x88>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	655a      	str	r2, [r3, #84]	; 0x54
 800aa0c:	e004      	b.n	800aa18 <ulTaskNotifyTake+0x70>
 800aa0e:	4b08      	ldr	r3, [pc, #32]	; (800aa30 <ulTaskNotifyTake+0x88>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	3a01      	subs	r2, #1
 800aa16:	655a      	str	r2, [r3, #84]	; 0x54
 800aa18:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <ulTaskNotifyTake+0x88>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800aa22:	f000 fef7 	bl	800b814 <vPortExitCritical>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20000d7c 	.word	0x20000d7c
 800aa34:	e000ed04 	.word	0xe000ed04

0800aa38 <xTaskGenericNotify>:
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08a      	sub	sp, #40	; 0x28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	603b      	str	r3, [r7, #0]
 800aa44:	4613      	mov	r3, r2
 800aa46:	71fb      	strb	r3, [r7, #7]
 800aa48:	2301      	movs	r3, #1
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10a      	bne.n	800aa68 <xTaskGenericNotify+0x30>
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	61bb      	str	r3, [r7, #24]
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <xTaskGenericNotify+0x2e>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	623b      	str	r3, [r7, #32]
 800aa6c:	f000 fea2 	bl	800b7b4 <vPortEnterCritical>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <xTaskGenericNotify+0x46>
 800aa76:	6a3b      	ldr	r3, [r7, #32]
 800aa78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800aa84:	77fb      	strb	r3, [r7, #31]
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	2b04      	cmp	r3, #4
 800aa92:	d828      	bhi.n	800aae6 <xTaskGenericNotify+0xae>
 800aa94:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <xTaskGenericNotify+0x64>)
 800aa96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9a:	bf00      	nop
 800aa9c:	0800ab07 	.word	0x0800ab07
 800aaa0:	0800aab1 	.word	0x0800aab1
 800aaa4:	0800aabf 	.word	0x0800aabf
 800aaa8:	0800aacb 	.word	0x0800aacb
 800aaac:	0800aad3 	.word	0x0800aad3
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	431a      	orrs	r2, r3
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	655a      	str	r2, [r3, #84]	; 0x54
 800aabc:	e026      	b.n	800ab0c <xTaskGenericNotify+0xd4>
 800aabe:	6a3b      	ldr	r3, [r7, #32]
 800aac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	655a      	str	r2, [r3, #84]	; 0x54
 800aac8:	e020      	b.n	800ab0c <xTaskGenericNotify+0xd4>
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	655a      	str	r2, [r3, #84]	; 0x54
 800aad0:	e01c      	b.n	800ab0c <xTaskGenericNotify+0xd4>
 800aad2:	7ffb      	ldrb	r3, [r7, #31]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d003      	beq.n	800aae0 <xTaskGenericNotify+0xa8>
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	655a      	str	r2, [r3, #84]	; 0x54
 800aade:	e015      	b.n	800ab0c <xTaskGenericNotify+0xd4>
 800aae0:	2300      	movs	r3, #0
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
 800aae4:	e012      	b.n	800ab0c <xTaskGenericNotify+0xd4>
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaee:	d00c      	beq.n	800ab0a <xTaskGenericNotify+0xd2>
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	617b      	str	r3, [r7, #20]
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xTaskGenericNotify+0xcc>
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <xTaskGenericNotify+0xd4>
 800ab0a:	bf00      	nop
 800ab0c:	7ffb      	ldrb	r3, [r7, #31]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d13a      	bne.n	800ab88 <xTaskGenericNotify+0x150>
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	3304      	adds	r3, #4
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fe f894 	bl	8008c44 <uxListRemove>
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	4b1d      	ldr	r3, [pc, #116]	; (800ab98 <xTaskGenericNotify+0x160>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d903      	bls.n	800ab30 <xTaskGenericNotify+0xf8>
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	4a1a      	ldr	r2, [pc, #104]	; (800ab98 <xTaskGenericNotify+0x160>)
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4a17      	ldr	r2, [pc, #92]	; (800ab9c <xTaskGenericNotify+0x164>)
 800ab3e:	441a      	add	r2, r3
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	3304      	adds	r3, #4
 800ab44:	4619      	mov	r1, r3
 800ab46:	4610      	mov	r0, r2
 800ab48:	f7fe f81f 	bl	8008b8a <vListInsertEnd>
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00a      	beq.n	800ab6a <xTaskGenericNotify+0x132>
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	613b      	str	r3, [r7, #16]
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <xTaskGenericNotify+0x130>
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6e:	4b0c      	ldr	r3, [pc, #48]	; (800aba0 <xTaskGenericNotify+0x168>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d907      	bls.n	800ab88 <xTaskGenericNotify+0x150>
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <xTaskGenericNotify+0x16c>)
 800ab7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f000 fe44 	bl	800b814 <vPortExitCritical>
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3728      	adds	r7, #40	; 0x28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20001258 	.word	0x20001258
 800ab9c:	20000d80 	.word	0x20000d80
 800aba0:	20000d7c 	.word	0x20000d7c
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xTaskGenericNotifyFromISR>:
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08e      	sub	sp, #56	; 0x38
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	4613      	mov	r3, r2
 800abb6:	71fb      	strb	r3, [r7, #7]
 800abb8:	2301      	movs	r3, #1
 800abba:	637b      	str	r3, [r7, #52]	; 0x34
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10a      	bne.n	800abd8 <xTaskGenericNotifyFromISR+0x30>
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <xTaskGenericNotifyFromISR+0x2e>
 800abd8:	f000 fece 	bl	800b978 <vPortValidateInterruptPriority>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	633b      	str	r3, [r7, #48]	; 0x30
 800abe0:	f3ef 8211 	mrs	r2, BASEPRI
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	623a      	str	r2, [r7, #32]
 800abf6:	61fb      	str	r3, [r7, #28]
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <xTaskGenericNotifyFromISR+0x62>
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	601a      	str	r2, [r3, #0]
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ac10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d828      	bhi.n	800ac74 <xTaskGenericNotifyFromISR+0xcc>
 800ac22:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <xTaskGenericNotifyFromISR+0x80>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800ac95 	.word	0x0800ac95
 800ac2c:	0800ac3d 	.word	0x0800ac3d
 800ac30:	0800ac4b 	.word	0x0800ac4b
 800ac34:	0800ac57 	.word	0x0800ac57
 800ac38:	0800ac5f 	.word	0x0800ac5f
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	431a      	orrs	r2, r3
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	655a      	str	r2, [r3, #84]	; 0x54
 800ac48:	e027      	b.n	800ac9a <xTaskGenericNotifyFromISR+0xf2>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	655a      	str	r2, [r3, #84]	; 0x54
 800ac54:	e021      	b.n	800ac9a <xTaskGenericNotifyFromISR+0xf2>
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	655a      	str	r2, [r3, #84]	; 0x54
 800ac5c:	e01d      	b.n	800ac9a <xTaskGenericNotifyFromISR+0xf2>
 800ac5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d003      	beq.n	800ac6e <xTaskGenericNotifyFromISR+0xc6>
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	655a      	str	r2, [r3, #84]	; 0x54
 800ac6c:	e015      	b.n	800ac9a <xTaskGenericNotifyFromISR+0xf2>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	637b      	str	r3, [r7, #52]	; 0x34
 800ac72:	e012      	b.n	800ac9a <xTaskGenericNotifyFromISR+0xf2>
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7c:	d00c      	beq.n	800ac98 <xTaskGenericNotifyFromISR+0xf0>
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	61bb      	str	r3, [r7, #24]
 800ac90:	bf00      	nop
 800ac92:	e7fe      	b.n	800ac92 <xTaskGenericNotifyFromISR+0xea>
 800ac94:	bf00      	nop
 800ac96:	e000      	b.n	800ac9a <xTaskGenericNotifyFromISR+0xf2>
 800ac98:	bf00      	nop
 800ac9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d146      	bne.n	800ad30 <xTaskGenericNotifyFromISR+0x188>
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <xTaskGenericNotifyFromISR+0x118>
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <xTaskGenericNotifyFromISR+0x116>
 800acc0:	4b21      	ldr	r3, [pc, #132]	; (800ad48 <xTaskGenericNotifyFromISR+0x1a0>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d11d      	bne.n	800ad04 <xTaskGenericNotifyFromISR+0x15c>
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	3304      	adds	r3, #4
 800accc:	4618      	mov	r0, r3
 800acce:	f7fd ffb9 	bl	8008c44 <uxListRemove>
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd6:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <xTaskGenericNotifyFromISR+0x1a4>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d903      	bls.n	800ace6 <xTaskGenericNotifyFromISR+0x13e>
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace2:	4a1a      	ldr	r2, [pc, #104]	; (800ad4c <xTaskGenericNotifyFromISR+0x1a4>)
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4a17      	ldr	r2, [pc, #92]	; (800ad50 <xTaskGenericNotifyFromISR+0x1a8>)
 800acf4:	441a      	add	r2, r3
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	3304      	adds	r3, #4
 800acfa:	4619      	mov	r1, r3
 800acfc:	4610      	mov	r0, r2
 800acfe:	f7fd ff44 	bl	8008b8a <vListInsertEnd>
 800ad02:	e005      	b.n	800ad10 <xTaskGenericNotifyFromISR+0x168>
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	3318      	adds	r3, #24
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4812      	ldr	r0, [pc, #72]	; (800ad54 <xTaskGenericNotifyFromISR+0x1ac>)
 800ad0c:	f7fd ff3d 	bl	8008b8a <vListInsertEnd>
 800ad10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad14:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <xTaskGenericNotifyFromISR+0x1b0>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d908      	bls.n	800ad30 <xTaskGenericNotifyFromISR+0x188>
 800ad1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <xTaskGenericNotifyFromISR+0x182>
 800ad24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad26:	2201      	movs	r2, #1
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	; (800ad5c <xTaskGenericNotifyFromISR+0x1b4>)
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	613b      	str	r3, [r7, #16]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	bf00      	nop
 800ad3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3738      	adds	r7, #56	; 0x38
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20001278 	.word	0x20001278
 800ad4c:	20001258 	.word	0x20001258
 800ad50:	20000d80 	.word	0x20000d80
 800ad54:	20001210 	.word	0x20001210
 800ad58:	20000d7c 	.word	0x20000d7c
 800ad5c:	20001264 	.word	0x20001264

0800ad60 <prvAddCurrentTaskToDelayedList>:
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
 800ad6a:	4b21      	ldr	r3, [pc, #132]	; (800adf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	4b20      	ldr	r3, [pc, #128]	; (800adf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3304      	adds	r3, #4
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fd ff64 	bl	8008c44 <uxListRemove>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad82:	d10a      	bne.n	800ad9a <prvAddCurrentTaskToDelayedList+0x3a>
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d007      	beq.n	800ad9a <prvAddCurrentTaskToDelayedList+0x3a>
 800ad8a:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4619      	mov	r1, r3
 800ad92:	4819      	ldr	r0, [pc, #100]	; (800adf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad94:	f7fd fef9 	bl	8008b8a <vListInsertEnd>
 800ad98:	e026      	b.n	800ade8 <prvAddCurrentTaskToDelayedList+0x88>
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4413      	add	r3, r2
 800ada0:	60bb      	str	r3, [r7, #8]
 800ada2:	4b14      	ldr	r3, [pc, #80]	; (800adf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d209      	bcs.n	800adc6 <prvAddCurrentTaskToDelayedList+0x66>
 800adb2:	4b12      	ldr	r3, [pc, #72]	; (800adfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b0f      	ldr	r3, [pc, #60]	; (800adf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3304      	adds	r3, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fd ff07 	bl	8008bd2 <vListInsert>
 800adc4:	e010      	b.n	800ade8 <prvAddCurrentTaskToDelayedList+0x88>
 800adc6:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3304      	adds	r3, #4
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f7fd fefd 	bl	8008bd2 <vListInsert>
 800add8:	4b0a      	ldr	r3, [pc, #40]	; (800ae04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d202      	bcs.n	800ade8 <prvAddCurrentTaskToDelayedList+0x88>
 800ade2:	4a08      	ldr	r2, [pc, #32]	; (800ae04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	bf00      	nop
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	20001254 	.word	0x20001254
 800adf4:	20000d7c 	.word	0x20000d7c
 800adf8:	2000123c 	.word	0x2000123c
 800adfc:	2000120c 	.word	0x2000120c
 800ae00:	20001208 	.word	0x20001208
 800ae04:	20001270 	.word	0x20001270

0800ae08 <xTimerCreateTimerTask>:
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08a      	sub	sp, #40	; 0x28
 800ae0c:	af04      	add	r7, sp, #16
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
 800ae12:	f000 fb63 	bl	800b4dc <prvCheckForValidListAndQueue>
 800ae16:	4b1c      	ldr	r3, [pc, #112]	; (800ae88 <xTimerCreateTimerTask+0x80>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d021      	beq.n	800ae62 <xTimerCreateTimerTask+0x5a>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	2300      	movs	r3, #0
 800ae24:	60bb      	str	r3, [r7, #8]
 800ae26:	1d3a      	adds	r2, r7, #4
 800ae28:	f107 0108 	add.w	r1, r7, #8
 800ae2c:	f107 030c 	add.w	r3, r7, #12
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fd fe63 	bl	8008afc <vApplicationGetTimerTaskMemory>
 800ae36:	6879      	ldr	r1, [r7, #4]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	9202      	str	r2, [sp, #8]
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	2302      	movs	r3, #2
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	2300      	movs	r3, #0
 800ae46:	460a      	mov	r2, r1
 800ae48:	4910      	ldr	r1, [pc, #64]	; (800ae8c <xTimerCreateTimerTask+0x84>)
 800ae4a:	4811      	ldr	r0, [pc, #68]	; (800ae90 <xTimerCreateTimerTask+0x88>)
 800ae4c:	f7fe fe26 	bl	8009a9c <xTaskCreateStatic>
 800ae50:	4603      	mov	r3, r0
 800ae52:	4a10      	ldr	r2, [pc, #64]	; (800ae94 <xTimerCreateTimerTask+0x8c>)
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	4b0f      	ldr	r3, [pc, #60]	; (800ae94 <xTimerCreateTimerTask+0x8c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <xTimerCreateTimerTask+0x5a>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	617b      	str	r3, [r7, #20]
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10a      	bne.n	800ae7e <xTimerCreateTimerTask+0x76>
 800ae68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	613b      	str	r3, [r7, #16]
 800ae7a:	bf00      	nop
 800ae7c:	e7fe      	b.n	800ae7c <xTimerCreateTimerTask+0x74>
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	200012ac 	.word	0x200012ac
 800ae8c:	0800beec 	.word	0x0800beec
 800ae90:	0800b085 	.word	0x0800b085
 800ae94:	200012b0 	.word	0x200012b0

0800ae98 <xTimerCreate>:
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	603b      	str	r3, [r7, #0]
 800aea6:	202c      	movs	r0, #44	; 0x2c
 800aea8:	f000 fda6 	bl	800b9f8 <pvPortMalloc>
 800aeac:	6178      	str	r0, [r7, #20]
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00d      	beq.n	800aed0 <xTimerCreate+0x38>
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	68b9      	ldr	r1, [r7, #8]
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 f805 	bl	800aeda <prvInitialiseNewTimer>
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <prvInitialiseNewTimer>:
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b086      	sub	sp, #24
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	607a      	str	r2, [r7, #4]
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <prvInitialiseNewTimer+0x2a>
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <prvInitialiseNewTimer+0x28>
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	2b00      	cmp	r3, #0
 800af08:	d01e      	beq.n	800af48 <prvInitialiseNewTimer+0x6e>
 800af0a:	f000 fae7 	bl	800b4dc <prvCheckForValidListAndQueue>
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	619a      	str	r2, [r3, #24]
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	61da      	str	r2, [r3, #28]
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	6a3a      	ldr	r2, [r7, #32]
 800af24:	621a      	str	r2, [r3, #32]
 800af26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af28:	3304      	adds	r3, #4
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fd fe20 	bl	8008b70 <vListInitialiseItem>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d008      	beq.n	800af48 <prvInitialiseNewTimer+0x6e>
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af3c:	f043 0304 	orr.w	r3, r3, #4
 800af40:	b2da      	uxtb	r2, r3
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800af48:	bf00      	nop
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <xTimerGenericCommand>:
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	; 0x28
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
 800af5e:	2300      	movs	r3, #0
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <xTimerGenericCommand+0x2e>
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	623b      	str	r3, [r7, #32]
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xTimerGenericCommand+0x2c>
 800af7e:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <xTimerGenericCommand+0x98>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d02a      	beq.n	800afdc <xTimerGenericCommand+0x8c>
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	61bb      	str	r3, [r7, #24]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b05      	cmp	r3, #5
 800af96:	dc18      	bgt.n	800afca <xTimerGenericCommand+0x7a>
 800af98:	f7ff fb7c 	bl	800a694 <xTaskGetSchedulerState>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d109      	bne.n	800afb6 <xTimerGenericCommand+0x66>
 800afa2:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <xTimerGenericCommand+0x98>)
 800afa4:	6818      	ldr	r0, [r3, #0]
 800afa6:	f107 0110 	add.w	r1, r7, #16
 800afaa:	2300      	movs	r3, #0
 800afac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afae:	f7fe f81b 	bl	8008fe8 <xQueueGenericSend>
 800afb2:	6278      	str	r0, [r7, #36]	; 0x24
 800afb4:	e012      	b.n	800afdc <xTimerGenericCommand+0x8c>
 800afb6:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <xTimerGenericCommand+0x98>)
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	f107 0110 	add.w	r1, r7, #16
 800afbe:	2300      	movs	r3, #0
 800afc0:	2200      	movs	r2, #0
 800afc2:	f7fe f811 	bl	8008fe8 <xQueueGenericSend>
 800afc6:	6278      	str	r0, [r7, #36]	; 0x24
 800afc8:	e008      	b.n	800afdc <xTimerGenericCommand+0x8c>
 800afca:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <xTimerGenericCommand+0x98>)
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f107 0110 	add.w	r1, r7, #16
 800afd2:	2300      	movs	r3, #0
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	f7fe f905 	bl	80091e4 <xQueueGenericSendFromISR>
 800afda:	6278      	str	r0, [r7, #36]	; 0x24
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	4618      	mov	r0, r3
 800afe0:	3728      	adds	r7, #40	; 0x28
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	200012ac 	.word	0x200012ac

0800afec <prvProcessExpiredTimer>:
 800afec:	b580      	push	{r7, lr}
 800afee:	b088      	sub	sp, #32
 800aff0:	af02      	add	r7, sp, #8
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	4b22      	ldr	r3, [pc, #136]	; (800b080 <prvProcessExpiredTimer+0x94>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	3304      	adds	r3, #4
 800b004:	4618      	mov	r0, r3
 800b006:	f7fd fe1d 	bl	8008c44 <uxListRemove>
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b010:	f003 0304 	and.w	r3, r3, #4
 800b014:	2b00      	cmp	r3, #0
 800b016:	d022      	beq.n	800b05e <prvProcessExpiredTimer+0x72>
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	699a      	ldr	r2, [r3, #24]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	18d1      	adds	r1, r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	6978      	ldr	r0, [r7, #20]
 800b026:	f000 f8d1 	bl	800b1cc <prvInsertTimerInActiveList>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d01f      	beq.n	800b070 <prvProcessExpiredTimer+0x84>
 800b030:	2300      	movs	r3, #0
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	2300      	movs	r3, #0
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	2100      	movs	r1, #0
 800b03a:	6978      	ldr	r0, [r7, #20]
 800b03c:	f7ff ff88 	bl	800af50 <xTimerGenericCommand>
 800b040:	6138      	str	r0, [r7, #16]
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d113      	bne.n	800b070 <prvProcessExpiredTimer+0x84>
 800b048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	60fb      	str	r3, [r7, #12]
 800b05a:	bf00      	nop
 800b05c:	e7fe      	b.n	800b05c <prvProcessExpiredTimer+0x70>
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b064:	f023 0301 	bic.w	r3, r3, #1
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	6a1b      	ldr	r3, [r3, #32]
 800b074:	6978      	ldr	r0, [r7, #20]
 800b076:	4798      	blx	r3
 800b078:	bf00      	nop
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	200012a4 	.word	0x200012a4

0800b084 <prvTimerTask>:
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	f107 0308 	add.w	r3, r7, #8
 800b090:	4618      	mov	r0, r3
 800b092:	f000 f857 	bl	800b144 <prvGetNextExpireTime>
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	4619      	mov	r1, r3
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 f803 	bl	800b0a8 <prvProcessTimerOrBlockTask>
 800b0a2:	f000 f8d5 	bl	800b250 <prvProcessReceivedCommands>
 800b0a6:	e7f1      	b.n	800b08c <prvTimerTask+0x8>

0800b0a8 <prvProcessTimerOrBlockTask>:
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
 800b0b2:	f7fe fefb 	bl	8009eac <vTaskSuspendAll>
 800b0b6:	f107 0308 	add.w	r3, r7, #8
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 f866 	bl	800b18c <prvSampleTimeNow>
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d130      	bne.n	800b12a <prvProcessTimerOrBlockTask+0x82>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <prvProcessTimerOrBlockTask+0x3c>
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d806      	bhi.n	800b0e4 <prvProcessTimerOrBlockTask+0x3c>
 800b0d6:	f7fe fef7 	bl	8009ec8 <xTaskResumeAll>
 800b0da:	68f9      	ldr	r1, [r7, #12]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff ff85 	bl	800afec <prvProcessExpiredTimer>
 800b0e2:	e024      	b.n	800b12e <prvProcessTimerOrBlockTask+0x86>
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d008      	beq.n	800b0fc <prvProcessTimerOrBlockTask+0x54>
 800b0ea:	4b13      	ldr	r3, [pc, #76]	; (800b138 <prvProcessTimerOrBlockTask+0x90>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <prvProcessTimerOrBlockTask+0x50>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e000      	b.n	800b0fa <prvProcessTimerOrBlockTask+0x52>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	603b      	str	r3, [r7, #0]
 800b0fc:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <prvProcessTimerOrBlockTask+0x94>)
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	4619      	mov	r1, r3
 800b10a:	f7fe fc93 	bl	8009a34 <vQueueWaitForMessageRestricted>
 800b10e:	f7fe fedb 	bl	8009ec8 <xTaskResumeAll>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10a      	bne.n	800b12e <prvProcessTimerOrBlockTask+0x86>
 800b118:	4b09      	ldr	r3, [pc, #36]	; (800b140 <prvProcessTimerOrBlockTask+0x98>)
 800b11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	e001      	b.n	800b12e <prvProcessTimerOrBlockTask+0x86>
 800b12a:	f7fe fecd 	bl	8009ec8 <xTaskResumeAll>
 800b12e:	bf00      	nop
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	200012a8 	.word	0x200012a8
 800b13c:	200012ac 	.word	0x200012ac
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <prvGetNextExpireTime>:
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <prvGetNextExpireTime+0x44>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <prvGetNextExpireTime+0x16>
 800b156:	2201      	movs	r2, #1
 800b158:	e000      	b.n	800b15c <prvGetNextExpireTime+0x18>
 800b15a:	2200      	movs	r2, #0
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d105      	bne.n	800b174 <prvGetNextExpireTime+0x30>
 800b168:	4b07      	ldr	r3, [pc, #28]	; (800b188 <prvGetNextExpireTime+0x44>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e001      	b.n	800b178 <prvGetNextExpireTime+0x34>
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	4618      	mov	r0, r3
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	200012a4 	.word	0x200012a4

0800b18c <prvSampleTimeNow>:
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	f7fe ff36 	bl	800a004 <xTaskGetTickCount>
 800b198:	60f8      	str	r0, [r7, #12]
 800b19a:	4b0b      	ldr	r3, [pc, #44]	; (800b1c8 <prvSampleTimeNow+0x3c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d205      	bcs.n	800b1b0 <prvSampleTimeNow+0x24>
 800b1a4:	f000 f936 	bl	800b414 <prvSwitchTimerLists>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	e002      	b.n	800b1b6 <prvSampleTimeNow+0x2a>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	4a04      	ldr	r2, [pc, #16]	; (800b1c8 <prvSampleTimeNow+0x3c>)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	200012b4 	.word	0x200012b4

0800b1cc <prvInsertTimerInActiveList>:
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	617b      	str	r3, [r7, #20]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	605a      	str	r2, [r3, #4]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	611a      	str	r2, [r3, #16]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d812      	bhi.n	800b218 <prvInsertTimerInActiveList+0x4c>
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	1ad2      	subs	r2, r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d302      	bcc.n	800b206 <prvInsertTimerInActiveList+0x3a>
 800b200:	2301      	movs	r3, #1
 800b202:	617b      	str	r3, [r7, #20]
 800b204:	e01b      	b.n	800b23e <prvInsertTimerInActiveList+0x72>
 800b206:	4b10      	ldr	r3, [pc, #64]	; (800b248 <prvInsertTimerInActiveList+0x7c>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3304      	adds	r3, #4
 800b20e:	4619      	mov	r1, r3
 800b210:	4610      	mov	r0, r2
 800b212:	f7fd fcde 	bl	8008bd2 <vListInsert>
 800b216:	e012      	b.n	800b23e <prvInsertTimerInActiveList+0x72>
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d206      	bcs.n	800b22e <prvInsertTimerInActiveList+0x62>
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	429a      	cmp	r2, r3
 800b226:	d302      	bcc.n	800b22e <prvInsertTimerInActiveList+0x62>
 800b228:	2301      	movs	r3, #1
 800b22a:	617b      	str	r3, [r7, #20]
 800b22c:	e007      	b.n	800b23e <prvInsertTimerInActiveList+0x72>
 800b22e:	4b07      	ldr	r3, [pc, #28]	; (800b24c <prvInsertTimerInActiveList+0x80>)
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3304      	adds	r3, #4
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f7fd fcca 	bl	8008bd2 <vListInsert>
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	200012a8 	.word	0x200012a8
 800b24c:	200012a4 	.word	0x200012a4

0800b250 <prvProcessReceivedCommands>:
 800b250:	b580      	push	{r7, lr}
 800b252:	b08e      	sub	sp, #56	; 0x38
 800b254:	af02      	add	r7, sp, #8
 800b256:	e0ca      	b.n	800b3ee <prvProcessReceivedCommands+0x19e>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	da18      	bge.n	800b290 <prvProcessReceivedCommands+0x40>
 800b25e:	1d3b      	adds	r3, r7, #4
 800b260:	3304      	adds	r3, #4
 800b262:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <prvProcessReceivedCommands+0x30>
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	61fb      	str	r3, [r7, #28]
 800b27c:	bf00      	nop
 800b27e:	e7fe      	b.n	800b27e <prvProcessReceivedCommands+0x2e>
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b286:	6850      	ldr	r0, [r2, #4]
 800b288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b28a:	6892      	ldr	r2, [r2, #8]
 800b28c:	4611      	mov	r1, r2
 800b28e:	4798      	blx	r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	f2c0 80ab 	blt.w	800b3ee <prvProcessReceivedCommands+0x19e>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d004      	beq.n	800b2ae <prvProcessReceivedCommands+0x5e>
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fd fccb 	bl	8008c44 <uxListRemove>
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff ff6b 	bl	800b18c <prvSampleTimeNow>
 800b2b6:	6278      	str	r0, [r7, #36]	; 0x24
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b09      	cmp	r3, #9
 800b2bc:	f200 8096 	bhi.w	800b3ec <prvProcessReceivedCommands+0x19c>
 800b2c0:	a201      	add	r2, pc, #4	; (adr r2, 800b2c8 <prvProcessReceivedCommands+0x78>)
 800b2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c6:	bf00      	nop
 800b2c8:	0800b2f1 	.word	0x0800b2f1
 800b2cc:	0800b2f1 	.word	0x0800b2f1
 800b2d0:	0800b2f1 	.word	0x0800b2f1
 800b2d4:	0800b365 	.word	0x0800b365
 800b2d8:	0800b379 	.word	0x0800b379
 800b2dc:	0800b3c3 	.word	0x0800b3c3
 800b2e0:	0800b2f1 	.word	0x0800b2f1
 800b2e4:	0800b2f1 	.word	0x0800b2f1
 800b2e8:	0800b365 	.word	0x0800b365
 800b2ec:	0800b379 	.word	0x0800b379
 800b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2f6:	f043 0301 	orr.w	r3, r3, #1
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	18d1      	adds	r1, r2, r3
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b30e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b310:	f7ff ff5c 	bl	800b1cc <prvInsertTimerInActiveList>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d069      	beq.n	800b3ee <prvProcessReceivedCommands+0x19e>
 800b31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b320:	4798      	blx	r3
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b328:	f003 0304 	and.w	r3, r3, #4
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d05e      	beq.n	800b3ee <prvProcessReceivedCommands+0x19e>
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	441a      	add	r2, r3
 800b338:	2300      	movs	r3, #0
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	2300      	movs	r3, #0
 800b33e:	2100      	movs	r1, #0
 800b340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b342:	f7ff fe05 	bl	800af50 <xTimerGenericCommand>
 800b346:	6238      	str	r0, [r7, #32]
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d14f      	bne.n	800b3ee <prvProcessReceivedCommands+0x19e>
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	61bb      	str	r3, [r7, #24]
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <prvProcessReceivedCommands+0x112>
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b36a:	f023 0301 	bic.w	r3, r3, #1
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b376:	e03a      	b.n	800b3ee <prvProcessReceivedCommands+0x19e>
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	b2da      	uxtb	r2, r3
 800b384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	619a      	str	r2, [r3, #24]
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10a      	bne.n	800b3ae <prvProcessReceivedCommands+0x15e>
 800b398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	bf00      	nop
 800b3ac:	e7fe      	b.n	800b3ac <prvProcessReceivedCommands+0x15c>
 800b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b0:	699a      	ldr	r2, [r3, #24]
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	18d1      	adds	r1, r2, r3
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3bc:	f7ff ff06 	bl	800b1cc <prvInsertTimerInActiveList>
 800b3c0:	e015      	b.n	800b3ee <prvProcessReceivedCommands+0x19e>
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3c8:	f003 0302 	and.w	r3, r3, #2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d103      	bne.n	800b3d8 <prvProcessReceivedCommands+0x188>
 800b3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3d2:	f000 fbdd 	bl	800bb90 <vPortFree>
 800b3d6:	e00a      	b.n	800b3ee <prvProcessReceivedCommands+0x19e>
 800b3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3de:	f023 0301 	bic.w	r3, r3, #1
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b3ea:	e000      	b.n	800b3ee <prvProcessReceivedCommands+0x19e>
 800b3ec:	bf00      	nop
 800b3ee:	4b08      	ldr	r3, [pc, #32]	; (800b410 <prvProcessReceivedCommands+0x1c0>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	1d39      	adds	r1, r7, #4
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fd ff90 	bl	800931c <xQueueReceive>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f47f af2a 	bne.w	800b258 <prvProcessReceivedCommands+0x8>
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	3730      	adds	r7, #48	; 0x30
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	200012ac 	.word	0x200012ac

0800b414 <prvSwitchTimerLists>:
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af02      	add	r7, sp, #8
 800b41a:	e048      	b.n	800b4ae <prvSwitchTimerLists+0x9a>
 800b41c:	4b2d      	ldr	r3, [pc, #180]	; (800b4d4 <prvSwitchTimerLists+0xc0>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	613b      	str	r3, [r7, #16]
 800b426:	4b2b      	ldr	r3, [pc, #172]	; (800b4d4 <prvSwitchTimerLists+0xc0>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	3304      	adds	r3, #4
 800b434:	4618      	mov	r0, r3
 800b436:	f7fd fc05 	bl	8008c44 <uxListRemove>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	4798      	blx	r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d02e      	beq.n	800b4ae <prvSwitchTimerLists+0x9a>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	4413      	add	r3, r2
 800b458:	60bb      	str	r3, [r7, #8]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d90e      	bls.n	800b480 <prvSwitchTimerLists+0x6c>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	605a      	str	r2, [r3, #4]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	611a      	str	r2, [r3, #16]
 800b46e:	4b19      	ldr	r3, [pc, #100]	; (800b4d4 <prvSwitchTimerLists+0xc0>)
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3304      	adds	r3, #4
 800b476:	4619      	mov	r1, r3
 800b478:	4610      	mov	r0, r2
 800b47a:	f7fd fbaa 	bl	8008bd2 <vListInsert>
 800b47e:	e016      	b.n	800b4ae <prvSwitchTimerLists+0x9a>
 800b480:	2300      	movs	r3, #0
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	2300      	movs	r3, #0
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	2100      	movs	r1, #0
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f7ff fd60 	bl	800af50 <xTimerGenericCommand>
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10a      	bne.n	800b4ae <prvSwitchTimerLists+0x9a>
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	603b      	str	r3, [r7, #0]
 800b4aa:	bf00      	nop
 800b4ac:	e7fe      	b.n	800b4ac <prvSwitchTimerLists+0x98>
 800b4ae:	4b09      	ldr	r3, [pc, #36]	; (800b4d4 <prvSwitchTimerLists+0xc0>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1b1      	bne.n	800b41c <prvSwitchTimerLists+0x8>
 800b4b8:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <prvSwitchTimerLists+0xc0>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <prvSwitchTimerLists+0xc4>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a04      	ldr	r2, [pc, #16]	; (800b4d4 <prvSwitchTimerLists+0xc0>)
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	4a04      	ldr	r2, [pc, #16]	; (800b4d8 <prvSwitchTimerLists+0xc4>)
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	6013      	str	r3, [r2, #0]
 800b4cc:	bf00      	nop
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	200012a4 	.word	0x200012a4
 800b4d8:	200012a8 	.word	0x200012a8

0800b4dc <prvCheckForValidListAndQueue>:
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	f000 f967 	bl	800b7b4 <vPortEnterCritical>
 800b4e6:	4b15      	ldr	r3, [pc, #84]	; (800b53c <prvCheckForValidListAndQueue+0x60>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d120      	bne.n	800b530 <prvCheckForValidListAndQueue+0x54>
 800b4ee:	4814      	ldr	r0, [pc, #80]	; (800b540 <prvCheckForValidListAndQueue+0x64>)
 800b4f0:	f7fd fb1e 	bl	8008b30 <vListInitialise>
 800b4f4:	4813      	ldr	r0, [pc, #76]	; (800b544 <prvCheckForValidListAndQueue+0x68>)
 800b4f6:	f7fd fb1b 	bl	8008b30 <vListInitialise>
 800b4fa:	4b13      	ldr	r3, [pc, #76]	; (800b548 <prvCheckForValidListAndQueue+0x6c>)
 800b4fc:	4a10      	ldr	r2, [pc, #64]	; (800b540 <prvCheckForValidListAndQueue+0x64>)
 800b4fe:	601a      	str	r2, [r3, #0]
 800b500:	4b12      	ldr	r3, [pc, #72]	; (800b54c <prvCheckForValidListAndQueue+0x70>)
 800b502:	4a10      	ldr	r2, [pc, #64]	; (800b544 <prvCheckForValidListAndQueue+0x68>)
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	2300      	movs	r3, #0
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	4b11      	ldr	r3, [pc, #68]	; (800b550 <prvCheckForValidListAndQueue+0x74>)
 800b50c:	4a11      	ldr	r2, [pc, #68]	; (800b554 <prvCheckForValidListAndQueue+0x78>)
 800b50e:	2110      	movs	r1, #16
 800b510:	200a      	movs	r0, #10
 800b512:	f7fd fc29 	bl	8008d68 <xQueueGenericCreateStatic>
 800b516:	4603      	mov	r3, r0
 800b518:	4a08      	ldr	r2, [pc, #32]	; (800b53c <prvCheckForValidListAndQueue+0x60>)
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	4b07      	ldr	r3, [pc, #28]	; (800b53c <prvCheckForValidListAndQueue+0x60>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d005      	beq.n	800b530 <prvCheckForValidListAndQueue+0x54>
 800b524:	4b05      	ldr	r3, [pc, #20]	; (800b53c <prvCheckForValidListAndQueue+0x60>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	490b      	ldr	r1, [pc, #44]	; (800b558 <prvCheckForValidListAndQueue+0x7c>)
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe fa2e 	bl	800998c <vQueueAddToRegistry>
 800b530:	f000 f970 	bl	800b814 <vPortExitCritical>
 800b534:	bf00      	nop
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200012ac 	.word	0x200012ac
 800b540:	2000127c 	.word	0x2000127c
 800b544:	20001290 	.word	0x20001290
 800b548:	200012a4 	.word	0x200012a4
 800b54c:	200012a8 	.word	0x200012a8
 800b550:	20001358 	.word	0x20001358
 800b554:	200012b8 	.word	0x200012b8
 800b558:	0800bef4 	.word	0x0800bef4

0800b55c <pxPortInitialiseStack>:
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	3b04      	subs	r3, #4
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3b04      	subs	r3, #4
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	f023 0201 	bic.w	r2, r3, #1
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3b04      	subs	r3, #4
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	4a0c      	ldr	r2, [pc, #48]	; (800b5c0 <pxPortInitialiseStack+0x64>)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	3b14      	subs	r3, #20
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	3b04      	subs	r3, #4
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f06f 0202 	mvn.w	r2, #2
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	3b20      	subs	r3, #32
 800b5b0:	60fb      	str	r3, [r7, #12]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	0800b5c5 	.word	0x0800b5c5

0800b5c4 <prvTaskExitError>:
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	607b      	str	r3, [r7, #4]
 800b5ce:	4b12      	ldr	r3, [pc, #72]	; (800b618 <prvTaskExitError+0x54>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d6:	d00a      	beq.n	800b5ee <prvTaskExitError+0x2a>
 800b5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	60fb      	str	r3, [r7, #12]
 800b5ea:	bf00      	nop
 800b5ec:	e7fe      	b.n	800b5ec <prvTaskExitError+0x28>
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	60bb      	str	r3, [r7, #8]
 800b600:	bf00      	nop
 800b602:	bf00      	nop
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d0fc      	beq.n	800b604 <prvTaskExitError+0x40>
 800b60a:	bf00      	nop
 800b60c:	bf00      	nop
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	20000078 	.word	0x20000078
 800b61c:	00000000 	.word	0x00000000

0800b620 <SVC_Handler>:
 800b620:	4b07      	ldr	r3, [pc, #28]	; (800b640 <pxCurrentTCBConst2>)
 800b622:	6819      	ldr	r1, [r3, #0]
 800b624:	6808      	ldr	r0, [r1, #0]
 800b626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62a:	f380 8809 	msr	PSP, r0
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f04f 0000 	mov.w	r0, #0
 800b636:	f380 8811 	msr	BASEPRI, r0
 800b63a:	4770      	bx	lr
 800b63c:	f3af 8000 	nop.w

0800b640 <pxCurrentTCBConst2>:
 800b640:	20000d7c 	.word	0x20000d7c
 800b644:	bf00      	nop
 800b646:	bf00      	nop

0800b648 <prvPortStartFirstTask>:
 800b648:	4808      	ldr	r0, [pc, #32]	; (800b66c <prvPortStartFirstTask+0x24>)
 800b64a:	6800      	ldr	r0, [r0, #0]
 800b64c:	6800      	ldr	r0, [r0, #0]
 800b64e:	f380 8808 	msr	MSP, r0
 800b652:	f04f 0000 	mov.w	r0, #0
 800b656:	f380 8814 	msr	CONTROL, r0
 800b65a:	b662      	cpsie	i
 800b65c:	b661      	cpsie	f
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	df00      	svc	0
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	e000ed08 	.word	0xe000ed08

0800b670 <xPortStartScheduler>:
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	4b46      	ldr	r3, [pc, #280]	; (800b790 <xPortStartScheduler+0x120>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a46      	ldr	r2, [pc, #280]	; (800b794 <xPortStartScheduler+0x124>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d10a      	bne.n	800b696 <xPortStartScheduler+0x26>
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	613b      	str	r3, [r7, #16]
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <xPortStartScheduler+0x24>
 800b696:	4b3e      	ldr	r3, [pc, #248]	; (800b790 <xPortStartScheduler+0x120>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a3f      	ldr	r2, [pc, #252]	; (800b798 <xPortStartScheduler+0x128>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d10a      	bne.n	800b6b6 <xPortStartScheduler+0x46>
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	60fb      	str	r3, [r7, #12]
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xPortStartScheduler+0x44>
 800b6b6:	4b39      	ldr	r3, [pc, #228]	; (800b79c <xPortStartScheduler+0x12c>)
 800b6b8:	617b      	str	r3, [r7, #20]
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	607b      	str	r3, [r7, #4]
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	22ff      	movs	r2, #255	; 0xff
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	70fb      	strb	r3, [r7, #3]
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	4b31      	ldr	r3, [pc, #196]	; (800b7a0 <xPortStartScheduler+0x130>)
 800b6dc:	701a      	strb	r2, [r3, #0]
 800b6de:	4b31      	ldr	r3, [pc, #196]	; (800b7a4 <xPortStartScheduler+0x134>)
 800b6e0:	2207      	movs	r2, #7
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	e009      	b.n	800b6fa <xPortStartScheduler+0x8a>
 800b6e6:	4b2f      	ldr	r3, [pc, #188]	; (800b7a4 <xPortStartScheduler+0x134>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	4a2d      	ldr	r2, [pc, #180]	; (800b7a4 <xPortStartScheduler+0x134>)
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	70fb      	strb	r3, [r7, #3]
 800b6fa:	78fb      	ldrb	r3, [r7, #3]
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b702:	2b80      	cmp	r3, #128	; 0x80
 800b704:	d0ef      	beq.n	800b6e6 <xPortStartScheduler+0x76>
 800b706:	4b27      	ldr	r3, [pc, #156]	; (800b7a4 <xPortStartScheduler+0x134>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f1c3 0307 	rsb	r3, r3, #7
 800b70e:	2b04      	cmp	r3, #4
 800b710:	d00a      	beq.n	800b728 <xPortStartScheduler+0xb8>
 800b712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	60bb      	str	r3, [r7, #8]
 800b724:	bf00      	nop
 800b726:	e7fe      	b.n	800b726 <xPortStartScheduler+0xb6>
 800b728:	4b1e      	ldr	r3, [pc, #120]	; (800b7a4 <xPortStartScheduler+0x134>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	021b      	lsls	r3, r3, #8
 800b72e:	4a1d      	ldr	r2, [pc, #116]	; (800b7a4 <xPortStartScheduler+0x134>)
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	4b1c      	ldr	r3, [pc, #112]	; (800b7a4 <xPortStartScheduler+0x134>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b73a:	4a1a      	ldr	r2, [pc, #104]	; (800b7a4 <xPortStartScheduler+0x134>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	b2da      	uxtb	r2, r3
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	701a      	strb	r2, [r3, #0]
 800b746:	4b18      	ldr	r3, [pc, #96]	; (800b7a8 <xPortStartScheduler+0x138>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a17      	ldr	r2, [pc, #92]	; (800b7a8 <xPortStartScheduler+0x138>)
 800b74c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b750:	6013      	str	r3, [r2, #0]
 800b752:	4b15      	ldr	r3, [pc, #84]	; (800b7a8 <xPortStartScheduler+0x138>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a14      	ldr	r2, [pc, #80]	; (800b7a8 <xPortStartScheduler+0x138>)
 800b758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	f000 f8dd 	bl	800b91c <vPortSetupTimerInterrupt>
 800b762:	4b12      	ldr	r3, [pc, #72]	; (800b7ac <xPortStartScheduler+0x13c>)
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	f000 f8fc 	bl	800b964 <vPortEnableVFP>
 800b76c:	4b10      	ldr	r3, [pc, #64]	; (800b7b0 <xPortStartScheduler+0x140>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a0f      	ldr	r2, [pc, #60]	; (800b7b0 <xPortStartScheduler+0x140>)
 800b772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	f7ff ff66 	bl	800b648 <prvPortStartFirstTask>
 800b77c:	f7fe fd1e 	bl	800a1bc <vTaskSwitchContext>
 800b780:	f7ff ff20 	bl	800b5c4 <prvTaskExitError>
 800b784:	2300      	movs	r3, #0
 800b786:	4618      	mov	r0, r3
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	e000ed00 	.word	0xe000ed00
 800b794:	410fc271 	.word	0x410fc271
 800b798:	410fc270 	.word	0x410fc270
 800b79c:	e000e400 	.word	0xe000e400
 800b7a0:	200013a8 	.word	0x200013a8
 800b7a4:	200013ac 	.word	0x200013ac
 800b7a8:	e000ed20 	.word	0xe000ed20
 800b7ac:	20000078 	.word	0x20000078
 800b7b0:	e000ef34 	.word	0xe000ef34

0800b7b4 <vPortEnterCritical>:
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	607b      	str	r3, [r7, #4]
 800b7cc:	bf00      	nop
 800b7ce:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <vPortEnterCritical+0x58>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	4a0d      	ldr	r2, [pc, #52]	; (800b80c <vPortEnterCritical+0x58>)
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <vPortEnterCritical+0x58>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d10f      	bne.n	800b800 <vPortEnterCritical+0x4c>
 800b7e0:	4b0b      	ldr	r3, [pc, #44]	; (800b810 <vPortEnterCritical+0x5c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00a      	beq.n	800b800 <vPortEnterCritical+0x4c>
 800b7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ee:	f383 8811 	msr	BASEPRI, r3
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	f3bf 8f4f 	dsb	sy
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	bf00      	nop
 800b7fe:	e7fe      	b.n	800b7fe <vPortEnterCritical+0x4a>
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	20000078 	.word	0x20000078
 800b810:	e000ed04 	.word	0xe000ed04

0800b814 <vPortExitCritical>:
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	4b12      	ldr	r3, [pc, #72]	; (800b864 <vPortExitCritical+0x50>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <vPortExitCritical+0x24>
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	607b      	str	r3, [r7, #4]
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <vPortExitCritical+0x22>
 800b838:	4b0a      	ldr	r3, [pc, #40]	; (800b864 <vPortExitCritical+0x50>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	4a09      	ldr	r2, [pc, #36]	; (800b864 <vPortExitCritical+0x50>)
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	4b08      	ldr	r3, [pc, #32]	; (800b864 <vPortExitCritical+0x50>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d105      	bne.n	800b856 <vPortExitCritical+0x42>
 800b84a:	2300      	movs	r3, #0
 800b84c:	603b      	str	r3, [r7, #0]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	bf00      	nop
 800b856:	bf00      	nop
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20000078 	.word	0x20000078
	...

0800b870 <PendSV_Handler>:
 800b870:	f3ef 8009 	mrs	r0, PSP
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	4b15      	ldr	r3, [pc, #84]	; (800b8d0 <pxCurrentTCBConst>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	f01e 0f10 	tst.w	lr, #16
 800b880:	bf08      	it	eq
 800b882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88a:	6010      	str	r0, [r2, #0]
 800b88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b890:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b894:	f380 8811 	msr	BASEPRI, r0
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f7fe fc8c 	bl	800a1bc <vTaskSwitchContext>
 800b8a4:	f04f 0000 	mov.w	r0, #0
 800b8a8:	f380 8811 	msr	BASEPRI, r0
 800b8ac:	bc09      	pop	{r0, r3}
 800b8ae:	6819      	ldr	r1, [r3, #0]
 800b8b0:	6808      	ldr	r0, [r1, #0]
 800b8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b6:	f01e 0f10 	tst.w	lr, #16
 800b8ba:	bf08      	it	eq
 800b8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8c0:	f380 8809 	msr	PSP, r0
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	f3af 8000 	nop.w

0800b8d0 <pxCurrentTCBConst>:
 800b8d0:	20000d7c 	.word	0x20000d7c
 800b8d4:	bf00      	nop
 800b8d6:	bf00      	nop

0800b8d8 <xPortSysTickHandler>:
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	607b      	str	r3, [r7, #4]
 800b8f0:	bf00      	nop
 800b8f2:	f7fe fba9 	bl	800a048 <xTaskIncrementTick>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <xPortSysTickHandler+0x2c>
 800b8fc:	4b06      	ldr	r3, [pc, #24]	; (800b918 <xPortSysTickHandler+0x40>)
 800b8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b902:	601a      	str	r2, [r3, #0]
 800b904:	2300      	movs	r3, #0
 800b906:	603b      	str	r3, [r7, #0]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	bf00      	nop
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	e000ed04 	.word	0xe000ed04

0800b91c <vPortSetupTimerInterrupt>:
 800b91c:	b480      	push	{r7}
 800b91e:	af00      	add	r7, sp, #0
 800b920:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <vPortSetupTimerInterrupt+0x34>)
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <vPortSetupTimerInterrupt+0x38>)
 800b928:	2200      	movs	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	4b0a      	ldr	r3, [pc, #40]	; (800b958 <vPortSetupTimerInterrupt+0x3c>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a0a      	ldr	r2, [pc, #40]	; (800b95c <vPortSetupTimerInterrupt+0x40>)
 800b932:	fba2 2303 	umull	r2, r3, r2, r3
 800b936:	099b      	lsrs	r3, r3, #6
 800b938:	4a09      	ldr	r2, [pc, #36]	; (800b960 <vPortSetupTimerInterrupt+0x44>)
 800b93a:	3b01      	subs	r3, #1
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	4b04      	ldr	r3, [pc, #16]	; (800b950 <vPortSetupTimerInterrupt+0x34>)
 800b940:	2207      	movs	r2, #7
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	bf00      	nop
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	e000e010 	.word	0xe000e010
 800b954:	e000e018 	.word	0xe000e018
 800b958:	2000006c 	.word	0x2000006c
 800b95c:	10624dd3 	.word	0x10624dd3
 800b960:	e000e014 	.word	0xe000e014

0800b964 <vPortEnableVFP>:
 800b964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b974 <vPortEnableVFP+0x10>
 800b968:	6801      	ldr	r1, [r0, #0]
 800b96a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b96e:	6001      	str	r1, [r0, #0]
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	e000ed88 	.word	0xe000ed88

0800b978 <vPortValidateInterruptPriority>:
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	f3ef 8305 	mrs	r3, IPSR
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2b0f      	cmp	r3, #15
 800b988:	d914      	bls.n	800b9b4 <vPortValidateInterruptPriority+0x3c>
 800b98a:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <vPortValidateInterruptPriority+0x70>)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4413      	add	r3, r2
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	72fb      	strb	r3, [r7, #11]
 800b994:	4b15      	ldr	r3, [pc, #84]	; (800b9ec <vPortValidateInterruptPriority+0x74>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	7afa      	ldrb	r2, [r7, #11]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d20a      	bcs.n	800b9b4 <vPortValidateInterruptPriority+0x3c>
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	607b      	str	r3, [r7, #4]
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <vPortValidateInterruptPriority+0x3a>
 800b9b4:	4b0e      	ldr	r3, [pc, #56]	; (800b9f0 <vPortValidateInterruptPriority+0x78>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b9bc:	4b0d      	ldr	r3, [pc, #52]	; (800b9f4 <vPortValidateInterruptPriority+0x7c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d90a      	bls.n	800b9da <vPortValidateInterruptPriority+0x62>
 800b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	603b      	str	r3, [r7, #0]
 800b9d6:	bf00      	nop
 800b9d8:	e7fe      	b.n	800b9d8 <vPortValidateInterruptPriority+0x60>
 800b9da:	bf00      	nop
 800b9dc:	3714      	adds	r7, #20
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	e000e3f0 	.word	0xe000e3f0
 800b9ec:	200013a8 	.word	0x200013a8
 800b9f0:	e000ed0c 	.word	0xe000ed0c
 800b9f4:	200013ac 	.word	0x200013ac

0800b9f8 <pvPortMalloc>:
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08a      	sub	sp, #40	; 0x28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	2300      	movs	r3, #0
 800ba02:	61fb      	str	r3, [r7, #28]
 800ba04:	f7fe fa52 	bl	8009eac <vTaskSuspendAll>
 800ba08:	4b5b      	ldr	r3, [pc, #364]	; (800bb78 <pvPortMalloc+0x180>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <pvPortMalloc+0x1c>
 800ba10:	f000 f920 	bl	800bc54 <prvHeapInit>
 800ba14:	4b59      	ldr	r3, [pc, #356]	; (800bb7c <pvPortMalloc+0x184>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f040 8093 	bne.w	800bb48 <pvPortMalloc+0x150>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01d      	beq.n	800ba64 <pvPortMalloc+0x6c>
 800ba28:	2208      	movs	r2, #8
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	607b      	str	r3, [r7, #4]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f003 0307 	and.w	r3, r3, #7
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d014      	beq.n	800ba64 <pvPortMalloc+0x6c>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f023 0307 	bic.w	r3, r3, #7
 800ba40:	3308      	adds	r3, #8
 800ba42:	607b      	str	r3, [r7, #4]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f003 0307 	and.w	r3, r3, #7
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00a      	beq.n	800ba64 <pvPortMalloc+0x6c>
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <pvPortMalloc+0x6a>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d06e      	beq.n	800bb48 <pvPortMalloc+0x150>
 800ba6a:	4b45      	ldr	r3, [pc, #276]	; (800bb80 <pvPortMalloc+0x188>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d869      	bhi.n	800bb48 <pvPortMalloc+0x150>
 800ba74:	4b43      	ldr	r3, [pc, #268]	; (800bb84 <pvPortMalloc+0x18c>)
 800ba76:	623b      	str	r3, [r7, #32]
 800ba78:	4b42      	ldr	r3, [pc, #264]	; (800bb84 <pvPortMalloc+0x18c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba7e:	e004      	b.n	800ba8a <pvPortMalloc+0x92>
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	623b      	str	r3, [r7, #32]
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d903      	bls.n	800ba9c <pvPortMalloc+0xa4>
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1f1      	bne.n	800ba80 <pvPortMalloc+0x88>
 800ba9c:	4b36      	ldr	r3, [pc, #216]	; (800bb78 <pvPortMalloc+0x180>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d050      	beq.n	800bb48 <pvPortMalloc+0x150>
 800baa6:	6a3b      	ldr	r3, [r7, #32]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2208      	movs	r2, #8
 800baac:	4413      	add	r3, r2
 800baae:	61fb      	str	r3, [r7, #28]
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	1ad2      	subs	r2, r2, r3
 800bac0:	2308      	movs	r3, #8
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d91f      	bls.n	800bb08 <pvPortMalloc+0x110>
 800bac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4413      	add	r3, r2
 800bace:	61bb      	str	r3, [r7, #24]
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	f003 0307 	and.w	r3, r3, #7
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <pvPortMalloc+0xf8>
 800bada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bade:	f383 8811 	msr	BASEPRI, r3
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	613b      	str	r3, [r7, #16]
 800baec:	bf00      	nop
 800baee:	e7fe      	b.n	800baee <pvPortMalloc+0xf6>
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	1ad2      	subs	r2, r2, r3
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	605a      	str	r2, [r3, #4]
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	605a      	str	r2, [r3, #4]
 800bb02:	69b8      	ldr	r0, [r7, #24]
 800bb04:	f000 f908 	bl	800bd18 <prvInsertBlockIntoFreeList>
 800bb08:	4b1d      	ldr	r3, [pc, #116]	; (800bb80 <pvPortMalloc+0x188>)
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	4a1b      	ldr	r2, [pc, #108]	; (800bb80 <pvPortMalloc+0x188>)
 800bb14:	6013      	str	r3, [r2, #0]
 800bb16:	4b1a      	ldr	r3, [pc, #104]	; (800bb80 <pvPortMalloc+0x188>)
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	4b1b      	ldr	r3, [pc, #108]	; (800bb88 <pvPortMalloc+0x190>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d203      	bcs.n	800bb2a <pvPortMalloc+0x132>
 800bb22:	4b17      	ldr	r3, [pc, #92]	; (800bb80 <pvPortMalloc+0x188>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a18      	ldr	r2, [pc, #96]	; (800bb88 <pvPortMalloc+0x190>)
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	4b13      	ldr	r3, [pc, #76]	; (800bb7c <pvPortMalloc+0x184>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	431a      	orrs	r2, r3
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	605a      	str	r2, [r3, #4]
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	4b13      	ldr	r3, [pc, #76]	; (800bb8c <pvPortMalloc+0x194>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3301      	adds	r3, #1
 800bb44:	4a11      	ldr	r2, [pc, #68]	; (800bb8c <pvPortMalloc+0x194>)
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	f7fe f9be 	bl	8009ec8 <xTaskResumeAll>
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	f003 0307 	and.w	r3, r3, #7
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00a      	beq.n	800bb6c <pvPortMalloc+0x174>
 800bb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	bf00      	nop
 800bb6a:	e7fe      	b.n	800bb6a <pvPortMalloc+0x172>
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3728      	adds	r7, #40	; 0x28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20001fb8 	.word	0x20001fb8
 800bb7c:	20001fcc 	.word	0x20001fcc
 800bb80:	20001fbc 	.word	0x20001fbc
 800bb84:	20001fb0 	.word	0x20001fb0
 800bb88:	20001fc0 	.word	0x20001fc0
 800bb8c:	20001fc4 	.word	0x20001fc4

0800bb90 <vPortFree>:
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d04d      	beq.n	800bc3e <vPortFree+0xae>
 800bba2:	2308      	movs	r3, #8
 800bba4:	425b      	negs	r3, r3
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	4413      	add	r3, r2
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	613b      	str	r3, [r7, #16]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	4b24      	ldr	r3, [pc, #144]	; (800bc48 <vPortFree+0xb8>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4013      	ands	r3, r2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10a      	bne.n	800bbd4 <vPortFree+0x44>
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	60fb      	str	r3, [r7, #12]
 800bbd0:	bf00      	nop
 800bbd2:	e7fe      	b.n	800bbd2 <vPortFree+0x42>
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00a      	beq.n	800bbf2 <vPortFree+0x62>
 800bbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	60bb      	str	r3, [r7, #8]
 800bbee:	bf00      	nop
 800bbf0:	e7fe      	b.n	800bbf0 <vPortFree+0x60>
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	4b14      	ldr	r3, [pc, #80]	; (800bc48 <vPortFree+0xb8>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d01e      	beq.n	800bc3e <vPortFree+0xae>
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d11a      	bne.n	800bc3e <vPortFree+0xae>
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	4b0e      	ldr	r3, [pc, #56]	; (800bc48 <vPortFree+0xb8>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	43db      	mvns	r3, r3
 800bc12:	401a      	ands	r2, r3
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	605a      	str	r2, [r3, #4]
 800bc18:	f7fe f948 	bl	8009eac <vTaskSuspendAll>
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	4b0a      	ldr	r3, [pc, #40]	; (800bc4c <vPortFree+0xbc>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4413      	add	r3, r2
 800bc26:	4a09      	ldr	r2, [pc, #36]	; (800bc4c <vPortFree+0xbc>)
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	6938      	ldr	r0, [r7, #16]
 800bc2c:	f000 f874 	bl	800bd18 <prvInsertBlockIntoFreeList>
 800bc30:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <vPortFree+0xc0>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3301      	adds	r3, #1
 800bc36:	4a06      	ldr	r2, [pc, #24]	; (800bc50 <vPortFree+0xc0>)
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	f7fe f945 	bl	8009ec8 <xTaskResumeAll>
 800bc3e:	bf00      	nop
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20001fcc 	.word	0x20001fcc
 800bc4c:	20001fbc 	.word	0x20001fbc
 800bc50:	20001fc8 	.word	0x20001fc8

0800bc54 <prvHeapInit>:
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bc5e:	60bb      	str	r3, [r7, #8]
 800bc60:	4b27      	ldr	r3, [pc, #156]	; (800bd00 <prvHeapInit+0xac>)
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f003 0307 	and.w	r3, r3, #7
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00c      	beq.n	800bc88 <prvHeapInit+0x34>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	3307      	adds	r3, #7
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f023 0307 	bic.w	r3, r3, #7
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	4a1f      	ldr	r2, [pc, #124]	; (800bd00 <prvHeapInit+0xac>)
 800bc84:	4413      	add	r3, r2
 800bc86:	60bb      	str	r3, [r7, #8]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	607b      	str	r3, [r7, #4]
 800bc8c:	4a1d      	ldr	r2, [pc, #116]	; (800bd04 <prvHeapInit+0xb0>)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	4b1c      	ldr	r3, [pc, #112]	; (800bd04 <prvHeapInit+0xb0>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	605a      	str	r2, [r3, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	2208      	movs	r2, #8
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	1a9b      	subs	r3, r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f023 0307 	bic.w	r3, r3, #7
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4a15      	ldr	r2, [pc, #84]	; (800bd08 <prvHeapInit+0xb4>)
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	4b14      	ldr	r3, [pc, #80]	; (800bd08 <prvHeapInit+0xb4>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	605a      	str	r2, [r3, #4]
 800bcbe:	4b12      	ldr	r3, [pc, #72]	; (800bd08 <prvHeapInit+0xb4>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	603b      	str	r3, [r7, #0]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	1ad2      	subs	r2, r2, r3
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	605a      	str	r2, [r3, #4]
 800bcd4:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <prvHeapInit+0xb4>)
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	4a0a      	ldr	r2, [pc, #40]	; (800bd0c <prvHeapInit+0xb8>)
 800bce2:	6013      	str	r3, [r2, #0]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	4a09      	ldr	r2, [pc, #36]	; (800bd10 <prvHeapInit+0xbc>)
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <prvHeapInit+0xc0>)
 800bcee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	bf00      	nop
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	200013b0 	.word	0x200013b0
 800bd04:	20001fb0 	.word	0x20001fb0
 800bd08:	20001fb8 	.word	0x20001fb8
 800bd0c:	20001fc0 	.word	0x20001fc0
 800bd10:	20001fbc 	.word	0x20001fbc
 800bd14:	20001fcc 	.word	0x20001fcc

0800bd18 <prvInsertBlockIntoFreeList>:
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	4b28      	ldr	r3, [pc, #160]	; (800bdc4 <prvInsertBlockIntoFreeList+0xac>)
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	e002      	b.n	800bd2c <prvInsertBlockIntoFreeList+0x14>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d8f7      	bhi.n	800bd26 <prvInsertBlockIntoFreeList+0xe>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	60bb      	str	r3, [r7, #8]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	4413      	add	r3, r2
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d108      	bne.n	800bd5a <prvInsertBlockIntoFreeList+0x42>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	441a      	add	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	605a      	str	r2, [r3, #4]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	607b      	str	r3, [r7, #4]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	60bb      	str	r3, [r7, #8]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	441a      	add	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d118      	bne.n	800bda0 <prvInsertBlockIntoFreeList+0x88>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4b15      	ldr	r3, [pc, #84]	; (800bdc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d00d      	beq.n	800bd96 <prvInsertBlockIntoFreeList+0x7e>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685a      	ldr	r2, [r3, #4]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	441a      	add	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	605a      	str	r2, [r3, #4]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	e008      	b.n	800bda8 <prvInsertBlockIntoFreeList+0x90>
 800bd96:	4b0c      	ldr	r3, [pc, #48]	; (800bdc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	e003      	b.n	800bda8 <prvInsertBlockIntoFreeList+0x90>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d002      	beq.n	800bdb6 <prvInsertBlockIntoFreeList+0x9e>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	601a      	str	r2, [r3, #0]
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	20001fb0 	.word	0x20001fb0
 800bdc8:	20001fb8 	.word	0x20001fb8

0800bdcc <memset>:
 800bdcc:	4402      	add	r2, r0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d100      	bne.n	800bdd6 <memset+0xa>
 800bdd4:	4770      	bx	lr
 800bdd6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdda:	e7f9      	b.n	800bdd0 <memset+0x4>

0800bddc <__libc_init_array>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	4d0d      	ldr	r5, [pc, #52]	; (800be14 <__libc_init_array+0x38>)
 800bde0:	4c0d      	ldr	r4, [pc, #52]	; (800be18 <__libc_init_array+0x3c>)
 800bde2:	1b64      	subs	r4, r4, r5
 800bde4:	10a4      	asrs	r4, r4, #2
 800bde6:	2600      	movs	r6, #0
 800bde8:	42a6      	cmp	r6, r4
 800bdea:	d109      	bne.n	800be00 <__libc_init_array+0x24>
 800bdec:	4d0b      	ldr	r5, [pc, #44]	; (800be1c <__libc_init_array+0x40>)
 800bdee:	4c0c      	ldr	r4, [pc, #48]	; (800be20 <__libc_init_array+0x44>)
 800bdf0:	f000 f826 	bl	800be40 <_init>
 800bdf4:	1b64      	subs	r4, r4, r5
 800bdf6:	10a4      	asrs	r4, r4, #2
 800bdf8:	2600      	movs	r6, #0
 800bdfa:	42a6      	cmp	r6, r4
 800bdfc:	d105      	bne.n	800be0a <__libc_init_array+0x2e>
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}
 800be00:	f855 3b04 	ldr.w	r3, [r5], #4
 800be04:	4798      	blx	r3
 800be06:	3601      	adds	r6, #1
 800be08:	e7ee      	b.n	800bde8 <__libc_init_array+0xc>
 800be0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be0e:	4798      	blx	r3
 800be10:	3601      	adds	r6, #1
 800be12:	e7f2      	b.n	800bdfa <__libc_init_array+0x1e>
 800be14:	0800c044 	.word	0x0800c044
 800be18:	0800c044 	.word	0x0800c044
 800be1c:	0800c044 	.word	0x0800c044
 800be20:	0800c048 	.word	0x0800c048

0800be24 <memcpy>:
 800be24:	440a      	add	r2, r1
 800be26:	4291      	cmp	r1, r2
 800be28:	f100 33ff 	add.w	r3, r0, #4294967295
 800be2c:	d100      	bne.n	800be30 <memcpy+0xc>
 800be2e:	4770      	bx	lr
 800be30:	b510      	push	{r4, lr}
 800be32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be3a:	4291      	cmp	r1, r2
 800be3c:	d1f9      	bne.n	800be32 <memcpy+0xe>
 800be3e:	bd10      	pop	{r4, pc}

0800be40 <_init>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	bf00      	nop
 800be44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be46:	bc08      	pop	{r3}
 800be48:	469e      	mov	lr, r3
 800be4a:	4770      	bx	lr

0800be4c <_fini>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	bf00      	nop
 800be50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be52:	bc08      	pop	{r3}
 800be54:	469e      	mov	lr, r3
 800be56:	4770      	bx	lr
