
IO_Module_Modbus_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd08  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800be48  0800be48  0001be48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c02c  0800c02c  0001c02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800c03c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f54  2000007c  0800c0b0  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001fd0  0800c0b0  00021fd0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026ca9  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004e61  00000000  00000000  00046d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000023d0  00000000  00000000  0004bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001ba5  00000000  00000000  0004dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00004eb0  00000000  00000000  0004fb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000242e0  00000000  00000000  00054a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ef1b4  00000000  00000000  00078d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000988c  00000000  00000000  00167ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  00171748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800be30 	.word	0x0800be30

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800be30 	.word	0x0800be30

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b970 	b.w	8000478 <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	460d      	mov	r5, r1
 80001b8:	4604      	mov	r4, r0
 80001ba:	460f      	mov	r7, r1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d14a      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001c0:	428a      	cmp	r2, r1
 80001c2:	4694      	mov	ip, r2
 80001c4:	d965      	bls.n	8000292 <__udivmoddi4+0xe2>
 80001c6:	fab2 f382 	clz	r3, r2
 80001ca:	b143      	cbz	r3, 80001de <__udivmoddi4+0x2e>
 80001cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d0:	f1c3 0220 	rsb	r2, r3, #32
 80001d4:	409f      	lsls	r7, r3
 80001d6:	fa20 f202 	lsr.w	r2, r0, r2
 80001da:	4317      	orrs	r7, r2
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001e2:	fa1f f58c 	uxth.w	r5, ip
 80001e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80001ea:	0c22      	lsrs	r2, r4, #16
 80001ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f4:	fb01 f005 	mul.w	r0, r1, r5
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x62>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 37ff 	add.w	r7, r1, #4294967295
 8000204:	f080 811c 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8119 	bls.w	8000440 <__udivmoddi4+0x290>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	b2a4      	uxth	r4, r4
 8000216:	fbb2 f0fe 	udiv	r0, r2, lr
 800021a:	fb0e 2210 	mls	r2, lr, r0, r2
 800021e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000222:	fb00 f505 	mul.w	r5, r0, r5
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x90>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8107 	bcs.w	8000444 <__udivmoddi4+0x294>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8104 	bls.w	8000444 <__udivmoddi4+0x294>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	1b64      	subs	r4, r4, r5
 8000246:	2100      	movs	r1, #0
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa2>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xbc>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ed 	beq.w	800043a <__udivmoddi4+0x28a>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d149      	bne.n	8000308 <__udivmoddi4+0x158>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xce>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2be>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4617      	mov	r7, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa2>
 800028c:	e9c6 4700 	strd	r4, r7, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa2>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xe6>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a0:	1a8a      	subs	r2, r1, r2
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b0:	fb07 2015 	mls	r0, r7, r5, r2
 80002b4:	0c22      	lsrs	r2, r4, #16
 80002b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002ba:	fb0e f005 	mul.w	r0, lr, r5
 80002be:	4290      	cmp	r0, r2
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c2:	eb1c 0202 	adds.w	r2, ip, r2
 80002c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4290      	cmp	r0, r2
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2b8>
 80002d2:	4645      	mov	r5, r8
 80002d4:	1a12      	subs	r2, r2, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002dc:	fb07 2210 	mls	r2, r7, r0, r2
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x14e>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x14c>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2c2>
 80002fc:	4610      	mov	r0, r2
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000306:	e79f      	b.n	8000248 <__udivmoddi4+0x98>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa05 f401 	lsl.w	r4, r5, r1
 800031a:	fa20 f307 	lsr.w	r3, r0, r7
 800031e:	40fd      	lsrs	r5, r7
 8000320:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000324:	4323      	orrs	r3, r4
 8000326:	fbb5 f8f9 	udiv	r8, r5, r9
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	fb09 5518 	mls	r5, r9, r8, r5
 8000332:	0c1c      	lsrs	r4, r3, #16
 8000334:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000338:	fb08 f50e 	mul.w	r5, r8, lr
 800033c:	42a5      	cmp	r5, r4
 800033e:	fa02 f201 	lsl.w	r2, r2, r1
 8000342:	fa00 f001 	lsl.w	r0, r0, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2b4>
 8000354:	42a5      	cmp	r5, r4
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2b4>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4464      	add	r4, ip
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	b29d      	uxth	r5, r3
 8000364:	fbb4 f3f9 	udiv	r3, r4, r9
 8000368:	fb09 4413 	mls	r4, r9, r3, r4
 800036c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000370:	fb03 fe0e 	mul.w	lr, r3, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2ac>
 8000382:	45a6      	cmp	lr, r4
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2ac>
 8000386:	3b02      	subs	r3, #2
 8000388:	4464      	add	r4, ip
 800038a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038e:	fba3 9502 	umull	r9, r5, r3, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	42ac      	cmp	r4, r5
 8000398:	46c8      	mov	r8, r9
 800039a:	46ae      	mov	lr, r5
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x29c>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x298>
 80003a0:	b156      	cbz	r6, 80003b8 <__udivmoddi4+0x208>
 80003a2:	ebb0 0208 	subs.w	r2, r0, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	fa04 f707 	lsl.w	r7, r4, r7
 80003ae:	40ca      	lsrs	r2, r1
 80003b0:	40cc      	lsrs	r4, r1
 80003b2:	4317      	orrs	r7, r2
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	4618      	mov	r0, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c3 0120 	rsb	r1, r3, #32
 80003c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c8:	fa20 f201 	lsr.w	r2, r0, r1
 80003cc:	fa25 f101 	lsr.w	r1, r5, r1
 80003d0:	409d      	lsls	r5, r3
 80003d2:	432a      	orrs	r2, r5
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e0:	fb07 1510 	mls	r5, r7, r0, r1
 80003e4:	0c11      	lsrs	r1, r2, #16
 80003e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003ea:	fb00 f50e 	mul.w	r5, r0, lr
 80003ee:	428d      	cmp	r5, r1
 80003f0:	fa04 f403 	lsl.w	r4, r4, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x258>
 80003f6:	eb1c 0101 	adds.w	r1, ip, r1
 80003fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b0>
 8000400:	428d      	cmp	r5, r1
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b0>
 8000404:	3802      	subs	r0, #2
 8000406:	4461      	add	r1, ip
 8000408:	1b49      	subs	r1, r1, r5
 800040a:	b292      	uxth	r2, r2
 800040c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000410:	fb07 1115 	mls	r1, r7, r5, r1
 8000414:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000418:	fb05 f10e 	mul.w	r1, r5, lr
 800041c:	4291      	cmp	r1, r2
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x282>
 8000420:	eb1c 0202 	adds.w	r2, ip, r2
 8000424:	f105 38ff 	add.w	r8, r5, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2a8>
 800042a:	4291      	cmp	r1, r2
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2a8>
 800042e:	3d02      	subs	r5, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a52      	subs	r2, r2, r1
 8000434:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0xfc>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e708      	b.n	8000252 <__udivmoddi4+0xa2>
 8000440:	4639      	mov	r1, r7
 8000442:	e6e6      	b.n	8000212 <__udivmoddi4+0x62>
 8000444:	4610      	mov	r0, r2
 8000446:	e6fb      	b.n	8000240 <__udivmoddi4+0x90>
 8000448:	4548      	cmp	r0, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000454:	3b01      	subs	r3, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000458:	4645      	mov	r5, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x282>
 800045c:	462b      	mov	r3, r5
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1da>
 8000460:	4640      	mov	r0, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x258>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x124>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xd8>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x14e>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004cc:	68fb      	ldr	r3, [r7, #12]
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004da:	b480      	push	{r7}
 80004dc:	b085      	sub	sp, #20
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4313      	orrs	r3, r2
 80004f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4013      	ands	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fc5e 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f840 	bl	8000598 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000518:	f000 f8b4 	bl	8000684 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f964 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000520:	f000 f948 	bl	80007b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000524:	f000 f8d2 	bl	80006cc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000528:	f000 f91c 	bl	8000764 <MX_USB_PCD_Init>
  MX_MEMORYMAP_Init();
 800052c:	f000 f8c7 	bl	80006be <MX_MEMORYMAP_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <main+0x7c>)
 8000532:	2203      	movs	r2, #3
 8000534:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <main+0x7c>)
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <main+0x80>)
 800053a:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <main+0x7c>)
 800053e:	2201      	movs	r2, #1
 8000540:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <main+0x7c>)
 8000544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000548:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <main+0x7c>)
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <main+0x84>)
 8000550:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <main+0x7c>)
 8000554:	2208      	movs	r2, #8
 8000556:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regs = ModbusDATA;
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x7c>)
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <main+0x88>)
 800055c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <main+0x7c>)
 8000562:	2232      	movs	r2, #50	; 0x32
 8000564:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
  ModbusH.xTypeHW = USART_HW_DMA;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <main+0x7c>)
 800056a:	2204      	movs	r2, #4
 800056c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x7c>)
 8000572:	f006 fc0b 	bl	8006d8c <ModbusInit>

 //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <main+0x7c>)
 8000578:	f006 fcaa 	bl	8006ed0 <ModbusStart>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057c:	f008 f8c2 	bl	8008704 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000580:	f008 f8e4 	bl	800874c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x78>
 8000586:	bf00      	nop
 8000588:	200004e0 	.word	0x200004e0
 800058c:	20000098 	.word	0x20000098
 8000590:	48000800 	.word	0x48000800
 8000594:	20000008 	.word	0x20000008

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09a      	sub	sp, #104	; 0x68
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2248      	movs	r2, #72	; 0x48
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00b fc08 	bl	800bdbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80005be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005cc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	f023 0303 	bic.w	r3, r3, #3
 80005d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e2:	f001 faeb 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff ff48 	bl	800047c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xe8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xe8>)
 80005f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xe8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000608:	2327      	movs	r3, #39	; 0x27
 800060a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000612:	2301      	movs	r3, #1
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000624:	2300      	movs	r3, #0
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000628:	2360      	movs	r3, #96	; 0x60
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fe61 	bl	80022fc <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000640:	f000 f93e 	bl	80008c0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000644:	236f      	movs	r3, #111	; 0x6f
 8000646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000648:	2302      	movs	r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2101      	movs	r1, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f002 f9bd 	bl	80029e4 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000670:	f000 f926 	bl	80008c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000674:	f002 ffaa 	bl	80035cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000678:	bf00      	nop
 800067a:	3768      	adds	r7, #104	; 0x68
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	58000400 	.word	0x58000400

08000684 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800068a:	463b      	mov	r3, r7
 800068c:	2250      	movs	r2, #80	; 0x50
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00b fb93 	bl	800bdbc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fe1a 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80006b2:	f000 f905 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006d2:	4a23      	ldr	r2, [pc, #140]	; (8000760 <MX_USART1_UART_Init+0x94>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_USART1_UART_Init+0x90>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_USART1_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART1_UART_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART1_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000714:	4811      	ldr	r0, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x90>)
 8000716:	f003 faeb 	bl	8003cf0 <HAL_UART_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000720:	f000 f8ce 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_USART1_UART_Init+0x90>)
 8000728:	f006 f90d 	bl	8006946 <HAL_UARTEx_SetTxFifoThreshold>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000732:	f000 f8c5 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4808      	ldr	r0, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x90>)
 800073a:	f006 f942 	bl	80069c2 <HAL_UARTEx_SetRxFifoThreshold>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000744:	f000 f8bc 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_USART1_UART_Init+0x90>)
 800074a:	f006 f8c3 	bl	80068d4 <HAL_UARTEx_DisableFifoMode>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000754:	f000 f8b4 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000098 	.word	0x20000098
 8000760:	40013800 	.word	0x40013800

08000764 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USB_PCD_Init+0x48>)
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <MX_USB_PCD_Init+0x4c>)
 800076c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000770:	2208      	movs	r2, #8
 8000772:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000776:	2202      	movs	r2, #2
 8000778:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USB_PCD_Init+0x48>)
 800077c:	2202      	movs	r2, #2
 800077e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_USB_PCD_Init+0x48>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USB_PCD_Init+0x48>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_USB_PCD_Init+0x48>)
 800079a:	f001 f90b 	bl	80019b4 <HAL_PCD_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007a4:	f000 f88c 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200001ec 	.word	0x200001ec
 80007b0:	40006800 	.word	0x40006800

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007b8:	2004      	movs	r0, #4
 80007ba:	f7ff fe75 	bl	80004a8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fe72 	bl	80004a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2105      	movs	r1, #5
 80007c8:	200b      	movs	r0, #11
 80007ca:	f000 fc05 	bl	8000fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007ce:	200b      	movs	r0, #11
 80007d0:	f000 fc1c 	bl	800100c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2105      	movs	r1, #5
 80007d8:	200c      	movs	r0, #12
 80007da:	f000 fbfd 	bl	8000fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007de:	200c      	movs	r0, #12
 80007e0:	f000 fc14 	bl	800100c <HAL_NVIC_EnableIRQ>

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	2004      	movs	r0, #4
 80007fe:	f7ff fe6c 	bl	80004da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2002      	movs	r0, #2
 8000804:	f7ff fe69 	bl	80004da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fe66 	bl	80004da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2008      	movs	r0, #8
 8000810:	f7ff fe63 	bl	80004da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2108      	movs	r1, #8
 8000818:	481d      	ldr	r0, [pc, #116]	; (8000890 <MX_GPIO_Init+0xa8>)
 800081a:	f001 f8b3 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2123      	movs	r1, #35	; 0x23
 8000822:	481c      	ldr	r0, [pc, #112]	; (8000894 <MX_GPIO_Init+0xac>)
 8000824:	f001 f8ae 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 8000828:	2308      	movs	r3, #8
 800082a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_GPIO_Init+0xa8>)
 800083e:	f000 ff31 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	480f      	ldr	r0, [pc, #60]	; (8000890 <MX_GPIO_Init+0xa8>)
 8000854:	f000 ff26 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000858:	2323      	movs	r3, #35	; 0x23
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <MX_GPIO_Init+0xac>)
 800086e:	f000 ff19 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000872:	2303      	movs	r3, #3
 8000874:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0xb0>)
 8000884:	f000 ff0e 	bl	80016a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000800 	.word	0x48000800
 8000894:	48000400 	.word	0x48000400
 8000898:	48000c00 	.word	0x48000c00

0800089c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ae:	f000 faaf 	bl	8000e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40014400 	.word	0x40014400

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>

080008ca <LL_AHB2_GRP1_EnableClock>:
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4313      	orrs	r3, r2
 80008e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800090a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000918:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000920:	68fb      	ldr	r3, [r7, #12]
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800093c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4313      	orrs	r3, r2
 8000944:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800094a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4013      	ands	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	210f      	movs	r1, #15
 8000968:	f06f 0001 	mvn.w	r0, #1
 800096c:	f000 fb34 	bl	8000fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	; 0x70
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2250      	movs	r2, #80	; 0x50
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f00b fa11 	bl	800bdbc <memset>
  if(huart->Instance==USART1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a43      	ldr	r2, [pc, #268]	; (8000aac <HAL_UART_MspInit+0x138>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d17f      	bne.n	8000aa4 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fc95 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009bc:	f7ff ff80 	bl	80008c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009c4:	f7ff ffb3 	bl	800092e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff ff7e 	bl	80008ca <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009ce:	23c0      	movs	r3, #192	; 0xc0
 80009d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009de:	2307      	movs	r3, #7
 80009e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009e6:	4619      	mov	r1, r3
 80009e8:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <HAL_UART_MspInit+0x13c>)
 80009ea:	f000 fe5b 	bl	80016a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 80009f0:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <HAL_UART_MspInit+0x144>)
 80009f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 80009f6:	220e      	movs	r2, #14
 80009f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a24:	4823      	ldr	r0, [pc, #140]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a26:	f000 faff 	bl	8001028 <HAL_DMA_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000a30:	f7ff ff46 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_UART_MspInit+0x140>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a44:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <HAL_UART_MspInit+0x14c>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a50:	2210      	movs	r2, #16
 8000a52:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a78:	4810      	ldr	r0, [pc, #64]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a7a:	f000 fad5 	bl	8001028 <HAL_DMA_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8000a84:	f7ff ff1c 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a8c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_UART_MspInit+0x148>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2105      	movs	r1, #5
 8000a98:	2024      	movs	r0, #36	; 0x24
 8000a9a:	f000 fa9d 	bl	8000fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a9e:	2024      	movs	r0, #36	; 0x24
 8000aa0:	f000 fab4 	bl	800100c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3770      	adds	r7, #112	; 0x70
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	48000400 	.word	0x48000400
 8000ab4:	2000012c 	.word	0x2000012c
 8000ab8:	40020008 	.word	0x40020008
 8000abc:	2000018c 	.word	0x2000018c
 8000ac0:	4002001c 	.word	0x4002001c

08000ac4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09c      	sub	sp, #112	; 0x70
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2250      	movs	r2, #80	; 0x50
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b f969 	bl	800bdbc <memset>
  if(hpcd->Instance==USB)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1f      	ldr	r2, [pc, #124]	; (8000b6c <HAL_PCD_MspInit+0xa8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d136      	bne.n	8000b62 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000afa:	2318      	movs	r3, #24
 8000afc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b08:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000b0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b14:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fbdd 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000b2c:	f7ff fec8 	bl	80008c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff feca 	bl	80008ca <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b48:	230a      	movs	r3, #10
 8000b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f000 fda5 	bl	80016a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b5a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b5e:	f7ff fecd 	bl	80008fc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3770      	adds	r7, #112	; 0x70
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40006800 	.word	0x40006800

08000b70 <LL_APB2_GRP1_EnableClock>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2019      	movs	r0, #25
 8000bba:	f000 fa0d 	bl	8000fd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bbe:	2019      	movs	r0, #25
 8000bc0:	f000 fa24 	bl	800100c <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000bc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bc8:	f7ff ffd2 	bl	8000b70 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bcc:	f107 0208 	add.w	r2, r7, #8
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f8f0 	bl	8002dbc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bdc:	f002 f8d8 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8000be0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_InitTick+0x8c>)
 8000be6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bea:	0c9b      	lsrs	r3, r3, #18
 8000bec:	3b01      	subs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_InitTick+0x90>)
 8000bf2:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <HAL_InitTick+0x94>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_InitTick+0x90>)
 8000bf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bfc:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_InitTick+0x90>)
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_InitTick+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_InitTick+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <HAL_InitTick+0x90>)
 8000c12:	f002 fdf2 	bl	80037fa <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d104      	bne.n	8000c26 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_InitTick+0x90>)
 8000c1e:	f002 fe4d 	bl	80038bc <HAL_TIM_Base_Start_IT>
 8000c22:	4603      	mov	r3, r0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000624 	.word	0x20000624
 8000c38:	40014400 	.word	0x40014400

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA1_Channel1_IRQHandler+0x10>)
 8000c6e:	f000 fbbc 	bl	80013ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000012c 	.word	0x2000012c

08000c7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA1_Channel2_IRQHandler+0x10>)
 8000c82:	f000 fbb2 	bl	80013ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000018c 	.word	0x2000018c

08000c90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c96:	f002 fe5f 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000624 	.word	0x20000624

08000ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <USART1_IRQHandler+0x10>)
 8000caa:	f003 fb35 	bl	8004318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000098 	.word	0x20000098

08000cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <SystemInit+0x98>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <SystemInit+0x98>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ce4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <SystemInit+0x9c>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d02:	f023 0305 	bic.w	r3, r3, #5
 8000d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d16:	f023 0301 	bic.w	r3, r3, #1
 8000d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <SystemInit+0xa0>)
 8000d24:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <SystemInit+0xa0>)
 8000d2c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00
 8000d54:	faf6fefb 	.word	0xfaf6fefb
 8000d58:	22041000 	.word	0x22041000

08000d5c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d5c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d60:	3304      	adds	r3, #4

08000d62 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d62:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d64:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d66:	d3f9      	bcc.n	8000d5c <CopyDataInit>
  bx lr
 8000d68:	4770      	bx	lr

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d6a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d6c:	3004      	adds	r0, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d6e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>
  bx lr
 8000d72:	4770      	bx	lr

08000d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d78:	f7ff ff9e 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <LoopForever+0x6>)
 8000d7e:	490c      	ldr	r1, [pc, #48]	; (8000db0 <LoopForever+0xa>)
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <LoopForever+0xe>)
 8000d82:	2300      	movs	r3, #0
 8000d84:	f7ff ffed 	bl	8000d62 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LoopForever+0x12>)
 8000d8a:	490c      	ldr	r1, [pc, #48]	; (8000dbc <LoopForever+0x16>)
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <LoopForever+0x1a>)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f7ff ffe7 	bl	8000d62 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <LoopForever+0x1e>)
 8000d96:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <LoopForever+0x22>)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f7ff ffe8 	bl	8000d6e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d9e:	f00b f815 	bl	800bdcc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000da2:	f7ff fbb3 	bl	800050c <main>

08000da6 <LoopForever>:

LoopForever:
  b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   r0, =_estack
 8000da8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000dac:	20000008 	.word	0x20000008
 8000db0:	2000007c 	.word	0x2000007c
 8000db4:	0800c03c 	.word	0x0800c03c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000db8:	20030000 	.word	0x20030000
 8000dbc:	20030000 	.word	0x20030000
 8000dc0:	0800c0b0 	.word	0x0800c0b0
  INIT_BSS _sbss, _ebss
 8000dc4:	2000007c 	.word	0x2000007c
 8000dc8:	20001fd0 	.word	0x20001fd0

08000dcc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_Init+0x3c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <HAL_Init+0x3c>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de6:	2003      	movs	r0, #3
 8000de8:	f000 f8eb 	bl	8000fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dec:	200f      	movs	r0, #15
 8000dee:	f7ff fed9 	bl	8000ba4 <HAL_InitTick>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	e001      	b.n	8000e02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfe:	f7ff fdaf 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e02:	79fb      	ldrb	r3, [r7, #7]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	58004000 	.word	0x58004000

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000074 	.word	0x20000074
 8000e34:	20000670 	.word	0x20000670

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000670 	.word	0x20000670

08000e50 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTickPrio+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000070 	.word	0x20000070

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff4c 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe6:	f7ff ff63 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000fea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	6978      	ldr	r0, [r7, #20]
 8000ff2:	f7ff ffb3 	bl	8000f5c <NVIC_EncodePriority>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff82 	bl	8000f08 <__NVIC_SetPriority>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff56 	bl	8000ecc <__NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e08e      	b.n	8001158 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_DMA_Init+0x138>)
 8001042:	429a      	cmp	r2, r3
 8001044:	d80f      	bhi.n	8001066 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <HAL_DMA_Init+0x13c>)
 800104e:	4413      	add	r3, r2
 8001050:	4a45      	ldr	r2, [pc, #276]	; (8001168 <HAL_DMA_Init+0x140>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	009a      	lsls	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a42      	ldr	r2, [pc, #264]	; (800116c <HAL_DMA_Init+0x144>)
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
 8001064:	e00e      	b.n	8001084 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b40      	ldr	r3, [pc, #256]	; (8001170 <HAL_DMA_Init+0x148>)
 800106e:	4413      	add	r3, r2
 8001070:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <HAL_DMA_Init+0x140>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	009a      	lsls	r2, r3, #2
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a3c      	ldr	r2, [pc, #240]	; (8001174 <HAL_DMA_Init+0x14c>)
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800109a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800109e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fa80 	bl	80015dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010e4:	d102      	bne.n	80010ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001102:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d010      	beq.n	800112e <HAL_DMA_Init+0x106>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d80c      	bhi.n	800112e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fa9f 	bl	8001658 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	e008      	b.n	8001140 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020407 	.word	0x40020407
 8001164:	bffdfff8 	.word	0xbffdfff8
 8001168:	cccccccd 	.word	0xcccccccd
 800116c:	40020000 	.word	0x40020000
 8001170:	bffdfbf8 	.word	0xbffdfbf8
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_DMA_Start_IT+0x20>
 8001194:	2302      	movs	r3, #2
 8001196:	e066      	b.n	8001266 <HAL_DMA_Start_IT+0xee>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d155      	bne.n	8001258 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2202      	movs	r2, #2
 80011b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 f9c5 	bl	8001560 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d008      	beq.n	80011f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 020e 	orr.w	r2, r2, #14
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e00f      	b.n	8001210 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0204 	bic.w	r2, r2, #4
 80011fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 020a 	orr.w	r2, r2, #10
 800120e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001244:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e005      	b.n	8001264 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001260:	2302      	movs	r3, #2
 8001262:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001264:	7dfb      	ldrb	r3, [r7, #23]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e04f      	b.n	8001320 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d008      	beq.n	800129e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e040      	b.n	8001320 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 020e 	bic.w	r2, r2, #14
 80012ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f003 021c 	and.w	r2, r3, #28
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2101      	movs	r1, #1
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00c      	beq.n	800130e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001302:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800130c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d005      	beq.n	8001350 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e047      	b.n	80013e0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 020e 	bic.w	r2, r2, #14
 800135e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800137e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	f003 021c 	and.w	r2, r3, #28
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2101      	movs	r1, #1
 800138e:	fa01 f202 	lsl.w	r2, r1, r2
 8001392:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800139c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00c      	beq.n	80013c0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
    }
  }
  return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 031c 	and.w	r3, r3, #28
 800140a:	2204      	movs	r2, #4
 800140c:	409a      	lsls	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d026      	beq.n	8001464 <HAL_DMA_IRQHandler+0x7a>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d021      	beq.n	8001464 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	2b00      	cmp	r3, #0
 800142c:	d107      	bne.n	800143e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0204 	bic.w	r2, r2, #4
 800143c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 021c 	and.w	r2, r3, #28
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2104      	movs	r1, #4
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	2b00      	cmp	r3, #0
 8001458:	d071      	beq.n	800153e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001462:	e06c      	b.n	800153e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	f003 031c 	and.w	r3, r3, #28
 800146c:	2202      	movs	r2, #2
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d02e      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xec>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d029      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0320 	and.w	r3, r3, #32
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10b      	bne.n	80014a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 020a 	bic.w	r2, r2, #10
 800149e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f003 021c 	and.w	r2, r3, #28
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2102      	movs	r1, #2
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d038      	beq.n	800153e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014d4:	e033      	b.n	800153e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f003 031c 	and.w	r3, r3, #28
 80014de:	2208      	movs	r2, #8
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d02a      	beq.n	8001540 <HAL_DMA_IRQHandler+0x156>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d025      	beq.n	8001540 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 020e 	bic.w	r2, r2, #14
 8001502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f003 021c 	and.w	r2, r3, #28
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800153e:	bf00      	nop
 8001540:	bf00      	nop
}
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001576:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001588:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 021c 	and.w	r2, r3, #28
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d108      	bne.n	80015c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015be:	e007      	b.n	80015d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d80a      	bhi.n	8001606 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015fc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6493      	str	r3, [r2, #72]	; 0x48
 8001604:	e007      	b.n	8001616 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001610:	4413      	add	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3b08      	subs	r3, #8
 800161e:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800162c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2201      	movs	r2, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40020407 	.word	0x40020407
 800164c:	4002081c 	.word	0x4002081c
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	40020880 	.word	0x40020880

08001658 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800167c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3b01      	subs	r3, #1
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2201      	movs	r2, #1
 8001688:	409a      	lsls	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	1000823f 	.word	0x1000823f
 80016a0:	40020940 	.word	0x40020940

080016a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e14c      	b.n	800194e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 813e 	beq.w	8001948 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d005      	beq.n	80016e4 <HAL_GPIO_Init+0x40>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800171a:	2201      	movs	r2, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 0201 	and.w	r2, r3, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b03      	cmp	r3, #3
 8001750:	d017      	beq.n	8001782 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	6939      	ldr	r1, [r7, #16]
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8098 	beq.w	8001948 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001818:	4a54      	ldr	r2, [pc, #336]	; (800196c <HAL_GPIO_Init+0x2c8>)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001842:	d019      	beq.n	8001878 <HAL_GPIO_Init+0x1d4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a4a      	ldr	r2, [pc, #296]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d013      	beq.n	8001874 <HAL_GPIO_Init+0x1d0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a49      	ldr	r2, [pc, #292]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00d      	beq.n	8001870 <HAL_GPIO_Init+0x1cc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a48      	ldr	r2, [pc, #288]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_GPIO_Init+0x1c8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_GPIO_Init+0x2d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_GPIO_Init+0x1c4>
 8001864:	2304      	movs	r3, #4
 8001866:	e008      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 8001868:	2307      	movs	r3, #7
 800186a:	e006      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 800186c:	2303      	movs	r3, #3
 800186e:	e004      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 8001870:	2302      	movs	r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_GPIO_Init+0x1d6>
 8001878:	2300      	movs	r3, #0
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	f002 0203 	and.w	r2, r2, #3
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4093      	lsls	r3, r2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800188a:	4938      	ldr	r1, [pc, #224]	; (800196c <HAL_GPIO_Init+0x2c8>)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001898:	4b39      	ldr	r3, [pc, #228]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018bc:	4a30      	ldr	r2, [pc, #192]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e6:	4a26      	ldr	r2, [pc, #152]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 80018ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001912:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 800191c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	f47f aeab 	bne.w	80016b4 <HAL_GPIO_Init+0x10>
  }
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40010000 	.word	0x40010000
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	48000c00 	.word	0x48000c00
 800197c:	48001000 	.word	0x48001000
 8001980:	58000800 	.word	0x58000800

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af06      	add	r7, sp, #24
 80019ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0cb      	b.n	8001b5e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff f872 	bl	8000ac4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2203      	movs	r2, #3
 80019e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f005 f8c9 	bl	8006b84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	e040      	b.n	8001a7a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3301      	adds	r3, #1
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3303      	adds	r3, #3
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3338      	adds	r3, #56	; 0x38
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	333c      	adds	r3, #60	; 0x3c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3340      	adds	r3, #64	; 0x40
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	3301      	adds	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3b9      	bcc.n	80019f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e044      	b.n	8001b14 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a8a:	7bfa      	ldrb	r2, [r7, #15]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	3301      	adds	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d3b5      	bcc.n	8001a8a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	687e      	ldr	r6, [r7, #4]
 8001b26:	466d      	mov	r5, sp
 8001b28:	f106 0410 	add.w	r4, r6, #16
 8001b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	602b      	str	r3, [r5, #0]
 8001b34:	1d33      	adds	r3, r6, #4
 8001b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f005 f83e 	bl	8006bba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d102      	bne.n	8001b5c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f805 	bl	8001b66 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b66 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	58000400 	.word	0x58000400

08001bdc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	58000400 	.word	0x58000400

08001bf8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c0a:	d101      	bne.n	8001c10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_HSE_Enable>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_HSE_Disable>:
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_HSE_IsReady>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c6a:	d101      	bne.n	8001c70 <LL_RCC_HSE_IsReady+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_RCC_HSE_IsReady+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_HSI_Enable>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_HSI_Disable>:
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_RCC_HSI_IsReady>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d101      	bne.n	8001cd0 <LL_RCC_HSI_IsReady+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_RCC_HSI_IsReady+0x1a>
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_RCC_HSI_SetCalibTrimming>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_RCC_HSI48_Enable>:
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_HSI48_Disable>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_HSI48_IsReady>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d101      	bne.n	8001d62 <LL_RCC_HSI48_IsReady+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_RCC_HSI48_IsReady+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_RCC_LSE_Enable>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_LSE_Disable>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_RCC_LSE_EnableBypass>:
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_RCC_LSE_DisableBypass>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d101      	bne.n	8001e0e <LL_RCC_LSE_IsReady+0x18>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <LL_RCC_LSE_IsReady+0x1a>
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d101      	bne.n	8001e76 <LL_RCC_LSI1_IsReady+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_RCC_LSI1_IsReady+0x1a>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d101      	bne.n	8001ede <LL_RCC_LSI2_IsReady+0x18>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_RCC_LSI2_IsReady+0x1a>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d101      	bne.n	8001f6a <LL_RCC_MSI_IsReady+0x16>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_RCC_MSI_IsReady+0x18>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2bb0      	cmp	r3, #176	; 0xb0
 8001fb4:	d901      	bls.n	8001fba <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001fb6:	23b0      	movs	r3, #176	; 0xb0
 8001fb8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 0203 	bic.w	r2, r3, #3
 8002004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800206a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002096:	f023 020f 	bic.w	r2, r3, #15
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002194:	6013      	str	r3, [r2, #0]
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d0:	d101      	bne.n	80021d6 <LL_RCC_PLL_IsReady+0x18>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_RCC_PLL_IsReady+0x1a>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d101      	bne.n	800225c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800227c:	d101      	bne.n	8002282 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a2:	d101      	bne.n	80022a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022c6:	d101      	bne.n	80022cc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022ea:	d101      	bne.n	80022f0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b08d      	sub	sp, #52	; 0x34
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e363      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 808d 	beq.w	8002436 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231c:	f7ff fe7d 	bl	800201a <LL_RCC_GetSysClkSource>
 8002320:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002322:	f7ff ff83 	bl	800222c <LL_RCC_PLL_GetMainSource>
 8002326:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x3e>
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d147      	bne.n	80023c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	2b01      	cmp	r3, #1
 8002338:	d144      	bne.n	80023c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e347      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800234a:	f7ff fe28 	bl	8001f9e <LL_RCC_MSI_GetRange>
 800234e:	4603      	mov	r3, r0
 8002350:	429c      	cmp	r4, r3
 8002352:	d914      	bls.n	800237e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd61 	bl	8002e20 <RCC_SetFlashLatencyFromMSIRange>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e336      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fe02 	bl	8001f76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe26 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>
 800237c:	e013      	b.n	80023a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fdf7 	bl	8001f76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe1b 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fd42 	bl	8002e20 <RCC_SetFlashLatencyFromMSIRange>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e317      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023a6:	f000 fcc9 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4aa4      	ldr	r2, [pc, #656]	; (8002640 <HAL_RCC_OscConfig+0x344>)
 80023ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023b0:	4ba4      	ldr	r3, [pc, #656]	; (8002644 <HAL_RCC_OscConfig+0x348>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fbf5 	bl	8000ba4 <HAL_InitTick>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d039      	beq.n	8002434 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e308      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01e      	beq.n	800240a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023cc:	f7ff fda4 	bl	8001f18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fd32 	bl	8000e38 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d8:	f7fe fd2e 	bl	8000e38 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e2f5      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023ea:	f7ff fdb3 	bl	8001f54 <LL_RCC_MSI_IsReady>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f1      	beq.n	80023d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fdbc 	bl	8001f76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fde0 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800240a:	f7ff fd94 	bl	8001f36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800240e:	f7fe fd13 	bl	8000e38 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002416:	f7fe fd0f 	bl	8000e38 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e2d6      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002428:	f7ff fd94 	bl	8001f54 <LL_RCC_MSI_IsReady>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f1      	bne.n	8002416 <HAL_RCC_OscConfig+0x11a>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002434:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d047      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002442:	f7ff fdea 	bl	800201a <LL_RCC_GetSysClkSource>
 8002446:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	f7ff fef0 	bl	800222c <LL_RCC_PLL_GetMainSource>
 800244c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x164>
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d105      	bne.n	800246c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d134      	bne.n	80024d2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e2b4      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x180>
 8002476:	f7ff fbd1 	bl	8001c1c <LL_RCC_HSE_Enable>
 800247a:	e001      	b.n	8002480 <HAL_RCC_OscConfig+0x184>
 800247c:	f7ff fbdd 	bl	8001c3a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d012      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fcd6 	bl	8000e38 <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7fe fcd2 	bl	8000e38 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e299      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80024a2:	f7ff fbd9 	bl	8001c58 <LL_RCC_HSE_IsReady>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f1      	beq.n	8002490 <HAL_RCC_OscConfig+0x194>
 80024ac:	e011      	b.n	80024d2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe fcc3 	bl	8000e38 <HAL_GetTick>
 80024b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b6:	f7fe fcbf 	bl	8000e38 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e286      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024c8:	f7ff fbc6 	bl	8001c58 <LL_RCC_HSE_IsReady>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f1      	bne.n	80024b6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d04c      	beq.n	8002578 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024de:	f7ff fd9c 	bl	800201a <LL_RCC_GetSysClkSource>
 80024e2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e4:	f7ff fea2 	bl	800222c <LL_RCC_PLL_GetMainSource>
 80024e8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d10e      	bne.n	8002514 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e266      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fbe5 	bl	8001cdc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002512:	e031      	b.n	8002578 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d019      	beq.n	8002550 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800251c:	f7ff fbae 	bl	8001c7c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fc8a 	bl	8000e38 <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002528:	f7fe fc86 	bl	8000e38 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e24d      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800253a:	f7ff fbbd 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f1      	beq.n	8002528 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fbc7 	bl	8001cdc <LL_RCC_HSI_SetCalibTrimming>
 800254e:	e013      	b.n	8002578 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002550:	f7ff fba3 	bl	8001c9a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe fc70 	bl	8000e38 <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255c:	f7fe fc6c 	bl	8000e38 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e233      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800256e:	f7ff fba3 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f1      	bne.n	800255c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a3 	beq.w	80026d8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d076      	beq.n	8002688 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d046      	beq.n	8002634 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80025a6:	f7ff fc5a 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d113      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80025b0:	f7ff fc33 	bl	8001e1a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025b4:	f7fe fc40 	bl	8000e38 <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025bc:	f7fe fc3c 	bl	8000e38 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e203      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025ce:	f7ff fc46 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f1      	beq.n	80025bc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025d8:	f7ff fc53 	bl	8001e82 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fc2c 	bl	8000e38 <HAL_GetTick>
 80025e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025e4:	f7fe fc28 	bl	8000e38 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1ef      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025f6:	f7ff fc66 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f1      	beq.n	80025e4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fc70 	bl	8001eea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800260a:	f7ff fc17 	bl	8001e3c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fc13 	bl	8000e38 <HAL_GetTick>
 8002612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002616:	f7fe fc0f 	bl	8000e38 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1d6      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002628:	f7ff fc19 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f1      	bne.n	8002616 <HAL_RCC_OscConfig+0x31a>
 8002632:	e051      	b.n	80026d8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002634:	f7ff fbf1 	bl	8001e1a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fbfe 	bl	8000e38 <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800263e:	e00c      	b.n	800265a <HAL_RCC_OscConfig+0x35e>
 8002640:	2000006c 	.word	0x2000006c
 8002644:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002648:	f7fe fbf6 	bl	8000e38 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1bd      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800265a:	f7ff fc00 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f1      	beq.n	8002648 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002664:	f7ff fc1e 	bl	8001ea4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800266a:	f7fe fbe5 	bl	8000e38 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b03      	cmp	r3, #3
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1ac      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800267c:	f7ff fc23 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f1      	bne.n	800266a <HAL_RCC_OscConfig+0x36e>
 8002686:	e027      	b.n	80026d8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002688:	f7ff fc0c 	bl	8001ea4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fbd4 	bl	8000e38 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002694:	f7fe fbd0 	bl	8000e38 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e197      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80026a6:	f7ff fc0e 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f1      	bne.n	8002694 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80026b0:	f7ff fbc4 	bl	8001e3c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe fbc0 	bl	8000e38 <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026bc:	f7fe fbbc 	bl	8000e38 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e183      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026ce:	f7ff fbc6 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f1      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d05b      	beq.n	800279c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e4:	4ba7      	ldr	r3, [pc, #668]	; (8002984 <HAL_RCC_OscConfig+0x688>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d114      	bne.n	800271a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026f0:	f7ff fa64 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fba0 	bl	8000e38 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fc:	f7fe fb9c 	bl	8000e38 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e163      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270e:	4b9d      	ldr	r3, [pc, #628]	; (8002984 <HAL_RCC_OscConfig+0x688>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0x42c>
 8002722:	f7ff fb24 	bl	8001d6e <LL_RCC_LSE_Enable>
 8002726:	e00c      	b.n	8002742 <HAL_RCC_OscConfig+0x446>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d104      	bne.n	800273a <HAL_RCC_OscConfig+0x43e>
 8002730:	f7ff fb3f 	bl	8001db2 <LL_RCC_LSE_EnableBypass>
 8002734:	f7ff fb1b 	bl	8001d6e <LL_RCC_LSE_Enable>
 8002738:	e003      	b.n	8002742 <HAL_RCC_OscConfig+0x446>
 800273a:	f7ff fb29 	bl	8001d90 <LL_RCC_LSE_Disable>
 800273e:	f7ff fb49 	bl	8001dd4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d014      	beq.n	8002774 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7fe fb75 	bl	8000e38 <HAL_GetTick>
 800274e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe fb71 	bl	8000e38 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e136      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002768:	f7ff fb45 	bl	8001df6 <LL_RCC_LSE_IsReady>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <HAL_RCC_OscConfig+0x456>
 8002772:	e013      	b.n	800279c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fb60 	bl	8000e38 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe fb5c 	bl	8000e38 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e121      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002792:	f7ff fb30 	bl	8001df6 <LL_RCC_LSE_IsReady>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ef      	bne.n	800277c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d02c      	beq.n	8002802 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d014      	beq.n	80027da <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027b0:	f7ff faa9 	bl	8001d06 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe fb40 	bl	8000e38 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027bc:	f7fe fb3c 	bl	8000e38 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e103      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027ce:	f7ff fabc 	bl	8001d4a <LL_RCC_HSI48_IsReady>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f1      	beq.n	80027bc <HAL_RCC_OscConfig+0x4c0>
 80027d8:	e013      	b.n	8002802 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027da:	f7ff faa5 	bl	8001d28 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fb2b 	bl	8000e38 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027e6:	f7fe fb27 	bl	8000e38 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0ee      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027f8:	f7ff faa7 	bl	8001d4a <LL_RCC_HSI48_IsReady>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f1      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80e4 	beq.w	80029d4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280c:	f7ff fc05 	bl	800201a <LL_RCC_GetSysClkSource>
 8002810:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	2b02      	cmp	r3, #2
 8002820:	f040 80b4 	bne.w	800298c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0203 	and.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	429a      	cmp	r2, r3
 8002830:	d123      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d11c      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d114      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d10d      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d05d      	beq.n	8002936 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d058      	beq.n	8002932 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0a1      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002892:	f7ff fc85 	bl	80021a0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002896:	f7fe facf 	bl	8000e38 <HAL_GetTick>
 800289a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe facb 	bl	8000e38 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e092      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ef      	bne.n	800289e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4b30      	ldr	r3, [pc, #192]	; (8002988 <HAL_RCC_OscConfig+0x68c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d6:	0212      	lsls	r2, r2, #8
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028de:	4311      	orrs	r1, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028ea:	430a      	orrs	r2, r1
 80028ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028f4:	f7ff fc45 	bl	8002182 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002908:	f7fe fa96 	bl	8000e38 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fa92 	bl	8000e38 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e059      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ef      	beq.n	8002910 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	e050      	b.n	80029d4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d147      	bne.n	80029d4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002944:	f7ff fc1d 	bl	8002182 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002958:	f7fe fa6e 	bl	8000e38 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fa6a 	bl	8000e38 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e031      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ef      	beq.n	8002960 <HAL_RCC_OscConfig+0x664>
 8002980:	e028      	b.n	80029d4 <HAL_RCC_OscConfig+0x6d8>
 8002982:	bf00      	nop
 8002984:	58000400 	.word	0x58000400
 8002988:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d01e      	beq.n	80029d0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	f7ff fc05 	bl	80021a0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fa4f 	bl	8000e38 <HAL_GetTick>
 800299a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe fa4b 	bl	8000e38 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e012      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ef      	bne.n	800299e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_OscConfig+0x6e4>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	60cb      	str	r3, [r1, #12]
 80029ce:	e001      	b.n	80029d4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3734      	adds	r7, #52	; 0x34
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	eefefffc 	.word	0xeefefffc

080029e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e12d      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b98      	ldr	r3, [pc, #608]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d91b      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b95      	ldr	r3, [pc, #596]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	4993      	ldr	r1, [pc, #588]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a16:	f7fe fa0f 	bl	8000e38 <HAL_GetTick>
 8002a1a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a1e:	f7fe fa0b 	bl	8000e38 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e111      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a30:	4b8a      	ldr	r3, [pc, #552]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d1ef      	bne.n	8002a1e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff faef 	bl	8002032 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a54:	f7fe f9f0 	bl	8000e38 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a5c:	f7fe f9ec 	bl	8000e38 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e0f2      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a6e:	f7ff fbe9 	bl	8002244 <LL_RCC_IsActiveFlag_HPRE>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f1      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d016      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fae6 	bl	800205a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a8e:	f7fe f9d3 	bl	8000e38 <HAL_GetTick>
 8002a92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a96:	f7fe f9cf 	bl	8000e38 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0d5      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002aa8:	f7ff fbde 	bl	8002268 <LL_RCC_IsActiveFlag_C2HPRE>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f1      	beq.n	8002a96 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d016      	beq.n	8002aec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fadf 	bl	8002086 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe f9b6 	bl	8000e38 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ad0:	f7fe f9b2 	bl	8000e38 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0b8      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ae2:	f7ff fbd4 	bl	800228e <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f1      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d016      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fad9 	bl	80020b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b02:	f7fe f999 	bl	8000e38 <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b0a:	f7fe f995 	bl	8000e38 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e09b      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b1c:	f7ff fbca 	bl	80022b4 <LL_RCC_IsActiveFlag_PPRE1>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f1      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d017      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff facf 	bl	80020dc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe f97b 	bl	8000e38 <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b46:	f7fe f977 	bl	8000e38 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e07d      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b58:	f7ff fbbe 	bl	80022d8 <LL_RCC_IsActiveFlag_PPRE2>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f1      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d043      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b76:	f7ff f86f 	bl	8001c58 <LL_RCC_HSE_IsReady>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11e      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e067      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b8c:	f7ff fb17 	bl	80021be <LL_RCC_PLL_IsReady>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e05c      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ba2:	f7ff f9d7 	bl	8001f54 <LL_RCC_MSI_IsReady>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d108      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e051      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002bb0:	f7ff f882 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e04a      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fa15 	bl	8001ff2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe f936 	bl	8000e38 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fe f932 	bl	8000e38 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e036      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	f7ff fa18 	bl	800201a <LL_RCC_GetSysClkSource>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d1ec      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d21b      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c04:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 0207 	bic.w	r2, r3, #7
 8002c0c:	4913      	ldr	r1, [pc, #76]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c14:	f7fe f910 	bl	8000e38 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c1c:	f7fe f90c 	bl	8000e38 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e012      	b.n	8002c54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x278>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1ef      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c3c:	f000 f87e 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_RCC_ClockConfig+0x27c>)
 8002c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c46:	f7fe f903 	bl	8000e50 <HAL_GetTickPrio>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd ffa9 	bl	8000ba4 <HAL_InitTick>
 8002c52:	4603      	mov	r3, r0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	58004000 	.word	0x58004000
 8002c60:	2000006c 	.word	0x2000006c

08002c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6a:	f7ff f9d6 	bl	800201a <LL_RCC_GetSysClkSource>
 8002c6e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c76:	f7ff f992 	bl	8001f9e <LL_RCC_MSI_GetRange>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	4a2b      	ldr	r2, [pc, #172]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e04b      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e045      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c9e:	f7fe ffab 	bl	8001bf8 <LL_RCC_HSE_IsEnabledDiv2>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e03a      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e037      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002cb4:	f7ff faba 	bl	800222c <LL_RCC_PLL_GetMainSource>
 8002cb8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x64>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x6a>
 8002cc6:	e00d      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cca:	60bb      	str	r3, [r7, #8]
        break;
 8002ccc:	e015      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cce:	f7fe ff93 	bl	8001bf8 <LL_RCC_HSE_IsEnabledDiv2>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d102      	bne.n	8002cde <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cda:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cdc:	e00d      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002cde:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ce0:	60bb      	str	r3, [r7, #8]
        break;
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ce4:	f7ff f95b 	bl	8001f9e <LL_RCC_MSI_GetRange>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	60bb      	str	r3, [r7, #8]
        break;
 8002cf8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002cfa:	f7ff fa72 	bl	80021e2 <LL_RCC_PLL_GetN>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	fb03 f402 	mul.w	r4, r3, r2
 8002d06:	f7ff fa85 	bl	8002214 <LL_RCC_PLL_GetDivider>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	3301      	adds	r3, #1
 8002d10:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d14:	f7ff fa72 	bl	80021fc <LL_RCC_PLL_GetR>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	0f5b      	lsrs	r3, r3, #29
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d22:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	0800bf4c 	.word	0x0800bf4c
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	01e84800 	.word	0x01e84800

08002d3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b598      	push	{r3, r4, r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d40:	f7ff ff90 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002d44:	4604      	mov	r4, r0
 8002d46:	f7ff f9dd 	bl	8002104 <LL_RCC_GetAHBPrescaler>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	4a03      	ldr	r2, [pc, #12]	; (8002d60 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd98      	pop	{r3, r4, r7, pc}
 8002d60:	0800beec 	.word	0x0800beec

08002d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d64:	b598      	push	{r3, r4, r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d68:	f7ff ffe8 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	f7ff f9f0 	bl	8002152 <LL_RCC_GetAPB1Prescaler>
 8002d72:	4603      	mov	r3, r0
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	bd98      	pop	{r3, r4, r7, pc}
 8002d8c:	0800bf2c 	.word	0x0800bf2c

08002d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d90:	b598      	push	{r3, r4, r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d94:	f7ff ffd2 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d98:	4604      	mov	r4, r0
 8002d9a:	f7ff f9e6 	bl	800216a <LL_RCC_GetAPB2Prescaler>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	0adb      	lsrs	r3, r3, #11
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd98      	pop	{r3, r4, r7, pc}
 8002db8:	0800bf2c 	.word	0x0800bf2c

08002dbc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	226f      	movs	r2, #111	; 0x6f
 8002dca:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002dcc:	f7ff f925 	bl	800201a <LL_RCC_GetSysClkSource>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002dd6:	f7ff f995 	bl	8002104 <LL_RCC_GetAHBPrescaler>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002de0:	f7ff f9b7 	bl	8002152 <LL_RCC_GetAPB1Prescaler>
 8002de4:	4602      	mov	r2, r0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002dea:	f7ff f9be 	bl	800216a <LL_RCC_GetAPB2Prescaler>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002df4:	f7ff f992 	bl	800211c <LL_C2_RCC_GetAHBPrescaler>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002dfe:	f7ff f99a 	bl	8002136 <LL_RCC_GetAHB4Prescaler>
 8002e02:	4602      	mov	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <HAL_RCC_GetClockConfig+0x60>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0207 	and.w	r2, r3, #7
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	58004000 	.word	0x58004000

08002e20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2bb0      	cmp	r3, #176	; 0xb0
 8002e2c:	d903      	bls.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e007      	b.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002e46:	f7ff f976 	bl	8002136 <LL_RCC_GetAHB4Prescaler>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	0c9c      	lsrs	r4, r3, #18
 8002e6a:	f7fe feb7 	bl	8001bdc <HAL_PWREx_GetVoltageRange>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4619      	mov	r1, r3
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 f80c 	bl	8002e90 <RCC_SetFlashLatency>
 8002e78:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	0800bf4c 	.word	0x0800bf4c
 8002e88:	0800beec 	.word	0x0800beec
 8002e8c:	431bde83 	.word	0x431bde83

08002e90 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b093      	sub	sp, #76	; 0x4c
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <RCC_SetFlashLatency+0xe8>)
 8002e9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002ea6:	4a35      	ldr	r2, [pc, #212]	; (8002f7c <RCC_SetFlashLatency+0xec>)
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002eb2:	4b33      	ldr	r3, [pc, #204]	; (8002f80 <RCC_SetFlashLatency+0xf0>)
 8002eb4:	f107 040c 	add.w	r4, r7, #12
 8002eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec8:	d11a      	bne.n	8002f00 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ece:	e013      	b.n	8002ef8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	3348      	adds	r3, #72	; 0x48
 8002ed6:	443b      	add	r3, r7
 8002ed8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d807      	bhi.n	8002ef2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	3348      	adds	r3, #72	; 0x48
 8002ee8:	443b      	add	r3, r7
 8002eea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ef0:	e020      	b.n	8002f34 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d9e8      	bls.n	8002ed0 <RCC_SetFlashLatency+0x40>
 8002efe:	e019      	b.n	8002f34 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f04:	e013      	b.n	8002f2e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	3348      	adds	r3, #72	; 0x48
 8002f0c:	443b      	add	r3, r7
 8002f0e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d807      	bhi.n	8002f28 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3348      	adds	r3, #72	; 0x48
 8002f1e:	443b      	add	r3, r7
 8002f20:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f24:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002f26:	e005      	b.n	8002f34 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d9e8      	bls.n	8002f06 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <RCC_SetFlashLatency+0xf4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 0207 	bic.w	r2, r3, #7
 8002f3c:	4911      	ldr	r1, [pc, #68]	; (8002f84 <RCC_SetFlashLatency+0xf4>)
 8002f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f44:	f7fd ff78 	bl	8000e38 <HAL_GetTick>
 8002f48:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f4a:	e008      	b.n	8002f5e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f4c:	f7fd ff74 	bl	8000e38 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e007      	b.n	8002f6e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <RCC_SetFlashLatency+0xf4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1ef      	bne.n	8002f4c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	374c      	adds	r7, #76	; 0x4c
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	bf00      	nop
 8002f78:	0800be48 	.word	0x0800be48
 8002f7c:	0800be58 	.word	0x0800be58
 8002f80:	0800be64 	.word	0x0800be64
 8002f84:	58004000 	.word	0x58004000

08002f88 <LL_RCC_LSE_IsEnabled>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <LL_RCC_LSE_IsEnabled+0x18>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_RCC_LSE_IsReady>:
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d101      	bne.n	8002fc4 <LL_RCC_LSE_IsReady+0x18>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <LL_RCC_LSE_IsReady+0x1a>
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_RCC_MSI_EnablePLLMode>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fde:	f043 0304 	orr.w	r3, r3, #4
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_SetRFWKPClockSource>:
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_SetSMPSClockSource>:
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f023 0203 	bic.w	r2, r3, #3
 800302c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4313      	orrs	r3, r2
 8003034:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_RCC_SetSMPSPrescaler>:
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_RCC_SetUSARTClockSource>:
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_RCC_SetLPUARTClockSource>:
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_RCC_SetI2CClockSource>:
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80030da:	43db      	mvns	r3, r3
 80030dc:	401a      	ands	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80030e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_RCC_SetLPTIMClockSource>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003108:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0c1b      	lsrs	r3, r3, #16
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	43db      	mvns	r3, r3
 8003114:	401a      	ands	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_RCC_SetSAIClockSource>:
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_RCC_SetRNGClockSource>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003170:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_RCC_SetCLK48ClockSource>:
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800319c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_RCC_SetUSBClockSource>:
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ffe3 	bl	8003188 <LL_RCC_SetCLK48ClockSource>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <LL_RCC_SetADCClockSource>:
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_RCC_SetRTCClockSource>:
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_RCC_GetRTCClockSource>:
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_RCC_ForceBackupDomainReset>:
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_RCC_ReleaseBackupDomainReset>:
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_RCC_PLLSAI1_Enable>:
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_RCC_PLLSAI1_Disable>:
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032b0:	6013      	str	r3, [r2, #0]
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_RCC_PLLSAI1_IsReady>:
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80032c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ce:	d101      	bne.n	80032d4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80032e8:	2300      	movs	r3, #0
 80032ea:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80032ec:	2300      	movs	r3, #0
 80032ee:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d034      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003304:	d021      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003306:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800330a:	d81b      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800330c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003310:	d01d      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003316:	d815      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800331c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003320:	d110      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003332:	e00d      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f94d 	bl	80035d8 <RCCEx_PLLSAI1_ConfigNP>
 800333e:	4603      	mov	r3, r0
 8003340:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003342:	e005      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
        break;
 8003348:	e002      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800334e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003350:	7ffb      	ldrb	r3, [r7, #31]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fee8 	bl	8003130 <LL_RCC_SetSAIClockSource>
 8003360:	e001      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003362:	7ffb      	ldrb	r3, [r7, #31]
 8003364:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	2b00      	cmp	r3, #0
 8003370:	d046      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003372:	f7ff ff56 	bl	8003222 <LL_RCC_GetRTCClockSource>
 8003376:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	429a      	cmp	r2, r3
 8003380:	d03c      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003382:	f7fe fc1b 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff30 	bl	80031f6 <LL_RCC_SetRTCClockSource>
 8003396:	e02e      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80033a2:	f7ff ff4b 	bl	800323c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80033a6:	f7ff ff5a 	bl	800325e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80033b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80033c2:	f7ff fde1 	bl	8002f88 <LL_RCC_LSE_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d114      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033cc:	f7fd fd34 	bl	8000e38 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80033d2:	e00b      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fd fd30 	bl	8000e38 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d902      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	77fb      	strb	r3, [r7, #31]
              break;
 80033ea:	e004      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80033ec:	f7ff fdde 	bl	8002fac <LL_RCC_LSE_IsReady>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d1ee      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80033f6:	7ffb      	ldrb	r3, [r7, #31]
 80033f8:	77bb      	strb	r3, [r7, #30]
 80033fa:	e001      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fc:	7ffb      	ldrb	r3, [r7, #31]
 80033fe:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fe2a 	bl	800306a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fe35 	bl	8003096 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5d 	bl	80030fc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fe52 	bl	80030fc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fe2a 	bl	80030c2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d004      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fe1f 	bl	80030c2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d022      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fe8d 	bl	80031b4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a2:	d107      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80034a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034bc:	d10b      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f8e3 	bl	800368e <RCCEx_PLLSAI1_ConfigNQ>
 80034c8:	4603      	mov	r3, r0
 80034ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80034cc:	7ffb      	ldrb	r3, [r7, #31]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d02b      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d008      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f4:	d003      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fe2a 	bl	800315c <LL_RCC_SetRNGClockSource>
 8003508:	e00a      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	2000      	movs	r0, #0
 8003516:	f7ff fe21 	bl	800315c <LL_RCC_SetRNGClockSource>
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff fe34 	bl	8003188 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003528:	d107      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800352a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003538:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003542:	2b00      	cmp	r3, #0
 8003544:	d022      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fe3d 	bl	80031ca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003558:	d107      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003572:	d10b      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f8e3 	bl	8003744 <RCCEx_PLLSAI1_ConfigNR>
 800357e:	4603      	mov	r3, r0
 8003580:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003588:	7ffb      	ldrb	r3, [r7, #31]
 800358a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fd26 	bl	8002fee <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fd45 	bl	8003042 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fd2c 	bl	800301a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80035c2:	7fbb      	ldrb	r3, [r7, #30]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80035d0:	f7ff fcfe 	bl	8002fd0 <LL_RCC_MSI_EnablePLLMode>
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035e4:	f7ff fe5b 	bl	800329e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035e8:	f7fd fc26 	bl	8000e38 <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035ee:	e009      	b.n	8003604 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f0:	f7fd fc22 	bl	8000e38 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	73fb      	strb	r3, [r7, #15]
      break;
 8003602:	e004      	b.n	800360e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003604:	f7ff fe5a 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d137      	bne.n	8003684 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003628:	4313      	orrs	r3, r2
 800362a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800362c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800363e:	4313      	orrs	r3, r2
 8003640:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003642:	f7ff fe1d 	bl	8003280 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003646:	f7fd fbf7 	bl	8000e38 <HAL_GetTick>
 800364a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800364c:	e009      	b.n	8003662 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800364e:	f7fd fbf3 	bl	8000e38 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d902      	bls.n	8003662 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	73fb      	strb	r3, [r7, #15]
        break;
 8003660:	e004      	b.n	800366c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003662:	f7ff fe2b 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d1f0      	bne.n	800364e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800369a:	f7ff fe00 	bl	800329e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800369e:	f7fd fbcb 	bl	8000e38 <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036a4:	e009      	b.n	80036ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a6:	f7fd fbc7 	bl	8000e38 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d902      	bls.n	80036ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	e004      	b.n	80036c4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036ba:	f7ff fdff 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d137      	bne.n	800373a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036de:	4313      	orrs	r3, r2
 80036e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036f8:	f7ff fdc2 	bl	8003280 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fc:	f7fd fb9c 	bl	8000e38 <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003702:	e009      	b.n	8003718 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003704:	f7fd fb98 	bl	8000e38 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	73fb      	strb	r3, [r7, #15]
        break;
 8003716:	e004      	b.n	8003722 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003718:	f7ff fdd0 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d1f0      	bne.n	8003704 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003736:	4313      	orrs	r3, r2
 8003738:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003750:	f7ff fda5 	bl	800329e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003754:	f7fd fb70 	bl	8000e38 <HAL_GetTick>
 8003758:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800375a:	e009      	b.n	8003770 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800375c:	f7fd fb6c 	bl	8000e38 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d902      	bls.n	8003770 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	73fb      	strb	r3, [r7, #15]
      break;
 800376e:	e004      	b.n	800377a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003770:	f7ff fda4 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d137      	bne.n	80037f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003794:	4313      	orrs	r3, r2
 8003796:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80037ae:	f7ff fd67 	bl	8003280 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b2:	f7fd fb41 	bl	8000e38 <HAL_GetTick>
 80037b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037b8:	e009      	b.n	80037ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ba:	f7fd fb3d 	bl	8000e38 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	73fb      	strb	r3, [r7, #15]
        break;
 80037cc:	e004      	b.n	80037d8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80037ce:	f7ff fd75 	bl	80032bc <LL_RCC_PLLSAI1_IsReady>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d1f0      	bne.n	80037ba <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ec:	4313      	orrs	r3, r2
 80037ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e049      	b.n	80038a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f841 	bl	80038a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f000 f9b7 	bl	8003bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d001      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e036      	b.n	8003942 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_TIM_Base_Start_IT+0x94>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x44>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d115      	bne.n	800392c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_TIM_Base_Start_IT+0x98>)
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b06      	cmp	r3, #6
 8003910:	d015      	beq.n	800393e <HAL_TIM_Base_Start_IT+0x82>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d011      	beq.n	800393e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	e008      	b.n	800393e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e000      	b.n	8003940 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00
 8003954:	00010007 	.word	0x00010007

08003958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d020      	beq.n	80039bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0202 	mvn.w	r2, #2
 800398c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8e4 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8d6 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f8e7 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d020      	beq.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0204 	mvn.w	r2, #4
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8be 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8b0 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f8c1 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d020      	beq.n	8003a54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01b      	beq.n	8003a54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0208 	mvn.w	r2, #8
 8003a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f898 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003a40:	e005      	b.n	8003a4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f88a 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f89b 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d020      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01b      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0210 	mvn.w	r2, #16
 8003a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2208      	movs	r2, #8
 8003a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f872 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e005      	b.n	8003a9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f864 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f875 	bl	8003b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0201 	mvn.w	r2, #1
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc feec 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8d0 	bl	8003c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8c8 	bl	8003c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f834 	bl	8003b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00c      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0220 	mvn.w	r2, #32
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f890 	bl	8003c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <TIM_Base_SetConfig+0xbc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0x20>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bca:	d108      	bne.n	8003bde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_Base_SetConfig+0xbc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0x52>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0x52>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <TIM_Base_SetConfig+0xc0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0x52>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <TIM_Base_SetConfig+0xc4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <TIM_Base_SetConfig+0xbc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0xa0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <TIM_Base_SetConfig+0xc0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0xa0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <TIM_Base_SetConfig+0xc4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d103      	bne.n	8003c54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	615a      	str	r2, [r3, #20]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800

08003c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_GetUSARTClockSource>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4013      	ands	r3, r2
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_RCC_GetLPUARTClockSource>:
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4013      	ands	r3, r2
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e042      	b.n	8003d88 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7fc fe2d 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2224      	movs	r2, #36	; 0x24
 8003d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 f914 	bl	8004f68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fee9 	bl	8004b18 <UART_SetConfig>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e01b      	b.n	8003d88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f001 f993 	bl	80050ac <UART_CheckIdleState>
 8003d86:	4603      	mov	r3, r0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b091      	sub	sp, #68	; 0x44
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d178      	bne.n	8003e9a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_UART_Transmit_IT+0x24>
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e071      	b.n	8003e9c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2221      	movs	r2, #33	; 0x21
 8003de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dec:	d12a      	bne.n	8003e44 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d107      	bne.n	8003e08 <HAL_UART_Transmit_IT+0x78>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <HAL_UART_Transmit_IT+0x118>)
 8003e04:	679a      	str	r2, [r3, #120]	; 0x78
 8003e06:	e002      	b.n	8003e0e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a28      	ldr	r2, [pc, #160]	; (8003eac <HAL_UART_Transmit_IT+0x11c>)
 8003e0c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3308      	adds	r3, #8
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e2e:	637a      	str	r2, [r7, #52]	; 0x34
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <HAL_UART_Transmit_IT+0x7e>
 8003e42:	e028      	b.n	8003e96 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d107      	bne.n	8003e5e <HAL_UART_Transmit_IT+0xce>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4a15      	ldr	r2, [pc, #84]	; (8003eb0 <HAL_UART_Transmit_IT+0x120>)
 8003e5a:	679a      	str	r2, [r3, #120]	; 0x78
 8003e5c:	e002      	b.n	8003e64 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_UART_Transmit_IT+0x124>)
 8003e62:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	613b      	str	r3, [r7, #16]
   return(result);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e82:	623b      	str	r3, [r7, #32]
 8003e84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	69f9      	ldr	r1, [r7, #28]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e6      	bne.n	8003e64 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3744      	adds	r7, #68	; 0x44
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	08005d1f 	.word	0x08005d1f
 8003eac:	08005c3f 	.word	0x08005c3f
 8003eb0:	08005b7d 	.word	0x08005b7d
 8003eb4:	08005ac5 	.word	0x08005ac5

08003eb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d137      	bne.n	8003f40 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Receive_IT+0x24>
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e030      	b.n	8003f42 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_UART_Receive_IT+0x94>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d01f      	beq.n	8003f30 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d018      	beq.n	8003f30 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	69f9      	ldr	r1, [r7, #28]
 8003f22:	6a3a      	ldr	r2, [r7, #32]
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e6      	bne.n	8003efe <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f001 f9ca 	bl	80052d0 <UART_Start_Receive_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	e000      	b.n	8003f42 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40008000 	.word	0x40008000

08003f50 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d167      	bne.n	8004038 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_UART_Transmit_DMA+0x24>
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e060      	b.n	800403a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2221      	movs	r2, #33	; 0x21
 8003f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d028      	beq.n	8003ff8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <HAL_UART_Transmit_DMA+0xf4>)
 8003fac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fb2:	4a25      	ldr	r2, [pc, #148]	; (8004048 <HAL_UART_Transmit_DMA+0xf8>)
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fba:	4a24      	ldr	r2, [pc, #144]	; (800404c <HAL_UART_Transmit_DMA+0xfc>)
 8003fbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3328      	adds	r3, #40	; 0x28
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	f7fd f8cd 	bl	8001178 <HAL_DMA_Start_IT>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e020      	b.n	800403a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2240      	movs	r2, #64	; 0x40
 8003ffe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	613b      	str	r3, [r7, #16]
   return(result);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	623a      	str	r2, [r7, #32]
 8004022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	69f9      	ldr	r1, [r7, #28]
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	61bb      	str	r3, [r7, #24]
   return(result);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3728      	adds	r7, #40	; 0x28
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	080057af 	.word	0x080057af
 8004048:	08005849 	.word	0x08005849
 800404c:	080059cf 	.word	0x080059cf

08004050 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b090      	sub	sp, #64	; 0x40
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004066:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d139      	bne.n	80040ea <HAL_UART_DMAStop+0x9a>
 8004076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004078:	2b21      	cmp	r3, #33	; 0x21
 800407a:	d136      	bne.n	80040ea <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	61fb      	str	r3, [r7, #28]
   return(result);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3308      	adds	r3, #8
 800409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e5      	bne.n	800407c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd f8d6 	bl	800126e <HAL_DMA_Abort>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fd fa3b 	bl	8001548 <HAL_DMA_GetError>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d105      	bne.n	80040e4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2210      	movs	r2, #16
 80040dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e047      	b.n	8004174 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f001 fabb 	bl	8005660 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d13c      	bne.n	8004172 <HAL_UART_DMAStop+0x122>
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	2b22      	cmp	r3, #34	; 0x22
 80040fc:	d139      	bne.n	8004172 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	60bb      	str	r3, [r7, #8]
   return(result);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	61ba      	str	r2, [r7, #24]
 8004120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6979      	ldr	r1, [r7, #20]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	613b      	str	r3, [r7, #16]
   return(result);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d017      	beq.n	800416c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd f893 	bl	800126e <HAL_DMA_Abort>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd f9f7 	bl	8001548 <HAL_DMA_GetError>
 800415a:	4603      	mov	r3, r0
 800415c:	2b20      	cmp	r3, #32
 800415e:	d105      	bne.n	800416c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2210      	movs	r2, #16
 8004164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e003      	b.n	8004174 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f001 fab8 	bl	80056e2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3740      	adds	r7, #64	; 0x40
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b09a      	sub	sp, #104	; 0x68
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004198:	667b      	str	r3, [r7, #100]	; 0x64
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54
 80041a4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	663b      	str	r3, [r7, #96]	; 0x60
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041da:	643a      	str	r2, [r7, #64]	; 0x40
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e3      	bne.n	80041b6 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d118      	bne.n	8004228 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	61fb      	str	r3, [r7, #28]
   return(result);
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f023 0310 	bic.w	r3, r3, #16
 800420a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004216:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d154      	bne.n	80042e0 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	60bb      	str	r3, [r7, #8]
   return(result);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424c:	65bb      	str	r3, [r7, #88]	; 0x58
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004256:	61ba      	str	r2, [r7, #24]
 8004258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	613b      	str	r3, [r7, #16]
   return(result);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d017      	beq.n	80042a4 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427a:	4a26      	ldr	r2, [pc, #152]	; (8004314 <HAL_UART_AbortReceive_IT+0x198>)
 800427c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd f851 	bl	800132c <HAL_DMA_Abort_IT>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03c      	beq.n	800430a <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800429e:	4610      	mov	r0, r2
 80042a0:	4798      	blx	r3
 80042a2:	e032      	b.n	800430a <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	220f      	movs	r2, #15
 80042b8:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699a      	ldr	r2, [r3, #24]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0208 	orr.w	r2, r2, #8
 80042c8:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fb55 	bl	8004988 <HAL_UART_AbortReceiveCpltCallback>
 80042de:	e014      	b.n	800430a <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	220f      	movs	r2, #15
 80042f4:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fb3f 	bl	8004988 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3768      	adds	r7, #104	; 0x68
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	08005a7b 	.word	0x08005a7b

08004318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b0ba      	sub	sp, #232	; 0xe8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800433e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004342:	f640 030f 	movw	r3, #2063	; 0x80f
 8004346:	4013      	ands	r3, r2
 8004348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800434c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d11b      	bne.n	800438c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800436c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 82e3 	beq.w	8004948 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
      }
      return;
 800438a:	e2dd      	b.n	8004948 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800438c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8123 	beq.w	80045dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800439a:	4b8d      	ldr	r3, [pc, #564]	; (80045d0 <HAL_UART_IRQHandler+0x2b8>)
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80043a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80043a6:	4b8b      	ldr	r3, [pc, #556]	; (80045d4 <HAL_UART_IRQHandler+0x2bc>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8116 	beq.w	80045dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d011      	beq.n	80043e0 <HAL_UART_IRQHandler+0xc8>
 80043bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f043 0201 	orr.w	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d011      	beq.n	8004410 <HAL_UART_IRQHandler+0xf8>
 80043ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00b      	beq.n	8004410 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2202      	movs	r2, #2
 80043fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f043 0204 	orr.w	r2, r3, #4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d011      	beq.n	8004440 <HAL_UART_IRQHandler+0x128>
 800441c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2204      	movs	r2, #4
 800442e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f043 0202 	orr.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d017      	beq.n	800447c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004458:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800445c:	4b5c      	ldr	r3, [pc, #368]	; (80045d0 <HAL_UART_IRQHandler+0x2b8>)
 800445e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2208      	movs	r2, #8
 800446a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_UART_IRQHandler+0x196>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00c      	beq.n	80044ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800449c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8249 	beq.w	800494c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d013      	beq.n	80044ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d005      	beq.n	8004512 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800450a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800450e:	2b00      	cmp	r3, #0
 8004510:	d054      	beq.n	80045bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 f8e5 	bl	80056e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d146      	bne.n	80045b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800453c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800455e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800456a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1d9      	bne.n	8004526 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d017      	beq.n	80045ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <HAL_UART_IRQHandler+0x2c0>)
 8004584:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458c:	4618      	mov	r0, r3
 800458e:	f7fc fecd 	bl	800132c <HAL_DMA_Abort_IT>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d019      	beq.n	80045cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80045a6:	4610      	mov	r0, r2
 80045a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045aa:	e00f      	b.n	80045cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f003 ff81 	bl	80084b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b2:	e00b      	b.n	80045cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f003 ff7d 	bl	80084b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ba:	e007      	b.n	80045cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f003 ff79 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80045ca:	e1bf      	b.n	800494c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045cc:	bf00      	nop
    return;
 80045ce:	e1bd      	b.n	800494c <HAL_UART_IRQHandler+0x634>
 80045d0:	10000001 	.word	0x10000001
 80045d4:	04000120 	.word	0x04000120
 80045d8:	08005a4f 	.word	0x08005a4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f040 8153 	bne.w	800488c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 814c 	beq.w	800488c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8145 	beq.w	800488c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2210      	movs	r2, #16
 8004608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b40      	cmp	r3, #64	; 0x40
 8004616:	f040 80bb 	bne.w	8004790 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 818f 	beq.w	8004950 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004638:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800463c:	429a      	cmp	r2, r3
 800463e:	f080 8187 	bcs.w	8004950 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004648:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8087 	bne.w	800476e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800468a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800468e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1da      	bne.n	8004660 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3308      	adds	r3, #8
 80046b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e1      	bne.n	80046aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800470a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800470c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800473a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473c:	f023 0310 	bic.w	r3, r3, #16
 8004740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004750:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800475c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e4      	bne.n	800472c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	4618      	mov	r0, r3
 800476a:	f7fc fd80 	bl	800126e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004780:	b29b      	uxth	r3, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	b29b      	uxth	r3, r3
 8004786:	4619      	mov	r1, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f003 feed 	bl	8008568 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800478e:	e0df      	b.n	8004950 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800479c:	b29b      	uxth	r3, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80d1 	beq.w	8004954 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80047b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80cc 	beq.w	8004954 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
 80047e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e4      	bne.n	80047bc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	623b      	str	r3, [r7, #32]
   return(result);
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800481a:	633a      	str	r2, [r7, #48]	; 0x30
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e1      	bne.n	80047f2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0310 	bic.w	r3, r3, #16
 8004856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	617b      	str	r3, [r7, #20]
   return(result);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e4      	bne.n	8004842 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800487e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f003 fe6f 	bl	8008568 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800488a:	e063      	b.n	8004954 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00e      	beq.n	80048b6 <HAL_UART_IRQHandler+0x59e>
 8004898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fff2 	bl	8006898 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048b4:	e051      	b.n	800495a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d014      	beq.n	80048ec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80048ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03a      	beq.n	8004958 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
    }
    return;
 80048ea:	e035      	b.n	8004958 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <HAL_UART_IRQHandler+0x5f4>
 80048f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 fa7f 	bl	8005e08 <UART_EndTransmit_IT>
    return;
 800490a:	e026      	b.n	800495a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <HAL_UART_IRQHandler+0x614>
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f001 ffcb 	bl	80068c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800492a:	e016      	b.n	800495a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <HAL_UART_IRQHandler+0x642>
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493c:	2b00      	cmp	r3, #0
 800493e:	da0c      	bge.n	800495a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 ffb3 	bl	80068ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004946:	e008      	b.n	800495a <HAL_UART_IRQHandler+0x642>
      return;
 8004948:	bf00      	nop
 800494a:	e006      	b.n	800495a <HAL_UART_IRQHandler+0x642>
    return;
 800494c:	bf00      	nop
 800494e:	e004      	b.n	800495a <HAL_UART_IRQHandler+0x642>
      return;
 8004950:	bf00      	nop
 8004952:	e002      	b.n	800495a <HAL_UART_IRQHandler+0x642>
      return;
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HAL_UART_IRQHandler+0x642>
    return;
 8004958:	bf00      	nop
  }
}
 800495a:	37e8      	adds	r7, #232	; 0xe8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b08f      	sub	sp, #60	; 0x3c
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e042      	b.n	8004a38 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2224      	movs	r2, #36	; 0x24
 80049be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f023 030c 	bic.w	r3, r3, #12
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e6      	bne.n	80049c2 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f043 0308 	orr.w	r3, r3, #8
 8004a08:	633b      	str	r3, [r7, #48]	; 0x30
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e6      	bne.n	80049f4 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	373c      	adds	r7, #60	; 0x3c
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b08f      	sub	sp, #60	; 0x3c
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_HalfDuplex_EnableReceiver+0x16>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e042      	b.n	8004ae0 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2224      	movs	r2, #36	; 0x24
 8004a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f023 030c 	bic.w	r3, r3, #12
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e6      	bne.n	8004a6a <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f043 0304 	orr.w	r3, r3, #4
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6979      	ldr	r1, [r7, #20]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e6      	bne.n	8004a9c <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	373c      	adds	r7, #60	; 0x3c
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b02:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4313      	orrs	r3, r2
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b1c:	b08c      	sub	sp, #48	; 0x30
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	4baf      	ldr	r3, [pc, #700]	; (8004e04 <UART_SetConfig+0x2ec>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4aa4      	ldr	r2, [pc, #656]	; (8004e08 <UART_SetConfig+0x2f0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b80:	4313      	orrs	r3, r2
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f023 010f 	bic.w	r1, r3, #15
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a95      	ldr	r2, [pc, #596]	; (8004e0c <UART_SetConfig+0x2f4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d125      	bne.n	8004c08 <UART_SetConfig+0xf0>
 8004bbc:	2003      	movs	r0, #3
 8004bbe:	f7ff f877 	bl	8003cb0 <LL_RCC_GetUSARTClockSource>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d81b      	bhi.n	8004c00 <UART_SetConfig+0xe8>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0xb8>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004bf1 	.word	0x08004bf1
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bf9 	.word	0x08004bf9
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be6:	e042      	b.n	8004c6e <UART_SetConfig+0x156>
 8004be8:	2302      	movs	r3, #2
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bee:	e03e      	b.n	8004c6e <UART_SetConfig+0x156>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf6:	e03a      	b.n	8004c6e <UART_SetConfig+0x156>
 8004bf8:	2308      	movs	r3, #8
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfe:	e036      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c00:	2310      	movs	r3, #16
 8004c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c06:	e032      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a7e      	ldr	r2, [pc, #504]	; (8004e08 <UART_SetConfig+0x2f0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d12a      	bne.n	8004c68 <UART_SetConfig+0x150>
 8004c12:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004c16:	f7ff f85b 	bl	8003cd0 <LL_RCC_GetLPUARTClockSource>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c20:	d01a      	beq.n	8004c58 <UART_SetConfig+0x140>
 8004c22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c26:	d81b      	bhi.n	8004c60 <UART_SetConfig+0x148>
 8004c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2c:	d00c      	beq.n	8004c48 <UART_SetConfig+0x130>
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c32:	d815      	bhi.n	8004c60 <UART_SetConfig+0x148>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <UART_SetConfig+0x128>
 8004c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3c:	d008      	beq.n	8004c50 <UART_SetConfig+0x138>
 8004c3e:	e00f      	b.n	8004c60 <UART_SetConfig+0x148>
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c46:	e012      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e00e      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c50:	2304      	movs	r3, #4
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e00a      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c58:	2308      	movs	r3, #8
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e006      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c60:	2310      	movs	r3, #16
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e002      	b.n	8004c6e <UART_SetConfig+0x156>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a65      	ldr	r2, [pc, #404]	; (8004e08 <UART_SetConfig+0x2f0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f040 8097 	bne.w	8004da8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d823      	bhi.n	8004cca <UART_SetConfig+0x1b2>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <UART_SetConfig+0x170>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004cad 	.word	0x08004cad
 8004c8c:	08004ccb 	.word	0x08004ccb
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004ccb 	.word	0x08004ccb
 8004c98:	08004cbb 	.word	0x08004cbb
 8004c9c:	08004ccb 	.word	0x08004ccb
 8004ca0:	08004ccb 	.word	0x08004ccb
 8004ca4:	08004ccb 	.word	0x08004ccb
 8004ca8:	08004cc3 	.word	0x08004cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7fe f85a 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8004cb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cb2:	e010      	b.n	8004cd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb4:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <UART_SetConfig+0x2f8>)
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cb8:	e00d      	b.n	8004cd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cba:	f7fd ffd3 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8004cbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cc0:	e009      	b.n	8004cd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cc8:	e005      	b.n	8004cd6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 812b 	beq.w	8004f34 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	4a4c      	ldr	r2, [pc, #304]	; (8004e14 <UART_SetConfig+0x2fc>)
 8004ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d305      	bcc.n	8004d0e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d903      	bls.n	8004d16 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d14:	e10e      	b.n	8004f34 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	2200      	movs	r2, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	60fa      	str	r2, [r7, #12]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	4a3c      	ldr	r2, [pc, #240]	; (8004e14 <UART_SetConfig+0x2fc>)
 8004d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d38:	f7fb fa22 	bl	8000180 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	020b      	lsls	r3, r1, #8
 8004d4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d52:	0202      	lsls	r2, r0, #8
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	6849      	ldr	r1, [r1, #4]
 8004d58:	0849      	lsrs	r1, r1, #1
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	4605      	mov	r5, r0
 8004d60:	eb12 0804 	adds.w	r8, r2, r4
 8004d64:	eb43 0905 	adc.w	r9, r3, r5
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	469a      	mov	sl, r3
 8004d70:	4693      	mov	fp, r2
 8004d72:	4652      	mov	r2, sl
 8004d74:	465b      	mov	r3, fp
 8004d76:	4640      	mov	r0, r8
 8004d78:	4649      	mov	r1, r9
 8004d7a:	f7fb fa01 	bl	8000180 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4613      	mov	r3, r2
 8004d84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8c:	d308      	bcc.n	8004da0 <UART_SetConfig+0x288>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d94:	d204      	bcs.n	8004da0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e0c9      	b.n	8004f34 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004da6:	e0c5      	b.n	8004f34 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db0:	d16d      	bne.n	8004e8e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004db6:	3b01      	subs	r3, #1
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d82d      	bhi.n	8004e18 <UART_SetConfig+0x300>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <UART_SetConfig+0x2ac>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004de5 	.word	0x08004de5
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004df3 	.word	0x08004df3
 8004dd4:	08004e19 	.word	0x08004e19
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004dfb 	.word	0x08004dfb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004de4:	f7fd ffd4 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dea:	e01b      	b.n	8004e24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dec:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <UART_SetConfig+0x2f8>)
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004df0:	e018      	b.n	8004e24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df2:	f7fd ff37 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004df8:	e014      	b.n	8004e24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e00:	e010      	b.n	8004e24 <UART_SetConfig+0x30c>
 8004e02:	bf00      	nop
 8004e04:	cfff69f3 	.word	0xcfff69f3
 8004e08:	40008000 	.word	0x40008000
 8004e0c:	40013800 	.word	0x40013800
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	0800bf8c 	.word	0x0800bf8c
      default:
        pclk = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8084 	beq.w	8004f34 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4a4b      	ldr	r2, [pc, #300]	; (8004f60 <UART_SetConfig+0x448>)
 8004e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e3e:	005a      	lsls	r2, r3, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	441a      	add	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d916      	bls.n	8004e86 <UART_SetConfig+0x36e>
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d212      	bcs.n	8004e86 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f023 030f 	bic.w	r3, r3, #15
 8004e68:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	8bfb      	ldrh	r3, [r7, #30]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	8bfa      	ldrh	r2, [r7, #30]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	e056      	b.n	8004f34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e8c:	e052      	b.n	8004f34 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e92:	3b01      	subs	r3, #1
 8004e94:	2b07      	cmp	r3, #7
 8004e96:	d822      	bhi.n	8004ede <UART_SetConfig+0x3c6>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0x388>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004ec1 	.word	0x08004ec1
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004edf 	.word	0x08004edf
 8004eac:	08004ecf 	.word	0x08004ecf
 8004eb0:	08004edf 	.word	0x08004edf
 8004eb4:	08004edf 	.word	0x08004edf
 8004eb8:	08004edf 	.word	0x08004edf
 8004ebc:	08004ed7 	.word	0x08004ed7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec0:	f7fd ff66 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8004ec4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ec6:	e010      	b.n	8004eea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec8:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <UART_SetConfig+0x44c>)
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ecc:	e00d      	b.n	8004eea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ece:	f7fd fec9 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8004ed2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ed4:	e009      	b.n	8004eea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004edc:	e005      	b.n	8004eea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ee8:	bf00      	nop
    }

    if (pclk != 0U)
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d021      	beq.n	8004f34 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <UART_SetConfig+0x448>)
 8004ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004efa:	461a      	mov	r2, r3
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	441a      	add	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	2b0f      	cmp	r3, #15
 8004f18:	d909      	bls.n	8004f2e <UART_SetConfig+0x416>
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d205      	bcs.n	8004f2e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	e002      	b.n	8004f34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2200      	movs	r2, #0
 8004f48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004f50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3730      	adds	r7, #48	; 0x30
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5e:	bf00      	nop
 8004f60:	0800bf8c 	.word	0x0800bf8c
 8004f64:	00f42400 	.word	0x00f42400

08004f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01a      	beq.n	800507e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005066:	d10a      	bne.n	800507e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b098      	sub	sp, #96	; 0x60
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050bc:	f7fb febc 	bl	8000e38 <HAL_GetTick>
 80050c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d12f      	bne.n	8005130 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f88e 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d022      	beq.n	8005130 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
 800510a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800510e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e6      	bne.n	80050ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e063      	b.n	80051f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d149      	bne.n	80051d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005146:	2200      	movs	r2, #0
 8005148:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f857 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d03c      	beq.n	80051d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	623b      	str	r3, [r7, #32]
   return(result);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800516c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
 8005178:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e6      	bne.n	8005158 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3308      	adds	r3, #8
 8005190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	60fb      	str	r3, [r7, #12]
   return(result);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051aa:	61fa      	str	r2, [r7, #28]
 80051ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	69b9      	ldr	r1, [r7, #24]
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	617b      	str	r3, [r7, #20]
   return(result);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e012      	b.n	80051f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3758      	adds	r7, #88	; 0x58
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005210:	e049      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d045      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521a:	f7fb fe0d 	bl	8000e38 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <UART_WaitOnFlagUntilTimeout+0x30>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e048      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d031      	beq.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d110      	bne.n	8005272 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fa42 	bl	80056e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2208      	movs	r2, #8
 8005262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e029      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005280:	d111      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800528a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fa28 	bl	80056e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e00f      	b.n	80052c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4013      	ands	r3, r2
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d0a6      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b0a3      	sub	sp, #140	; 0x8c
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005302:	d10e      	bne.n	8005322 <UART_Start_Receive_IT+0x52>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <UART_Start_Receive_IT+0x48>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005312:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005316:	e02d      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	22ff      	movs	r2, #255	; 0xff
 800531c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005320:	e028      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10d      	bne.n	8005346 <UART_Start_Receive_IT+0x76>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <UART_Start_Receive_IT+0x6c>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800533a:	e01b      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	227f      	movs	r2, #127	; 0x7f
 8005340:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005344:	e016      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800534e:	d10d      	bne.n	800536c <UART_Start_Receive_IT+0x9c>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <UART_Start_Receive_IT+0x92>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	227f      	movs	r2, #127	; 0x7f
 800535c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005360:	e008      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	223f      	movs	r2, #63	; 0x3f
 8005366:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800536a:	e003      	b.n	8005374 <UART_Start_Receive_IT+0xa4>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2222      	movs	r2, #34	; 0x22
 8005380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80053a8:	673a      	str	r2, [r7, #112]	; 0x70
 80053aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80053ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80053b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e3      	bne.n	8005384 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c4:	d14f      	bne.n	8005466 <UART_Start_Receive_IT+0x196>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80053cc:	88fa      	ldrh	r2, [r7, #6]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d349      	bcc.n	8005466 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	d107      	bne.n	80053ec <UART_Start_Receive_IT+0x11c>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4a47      	ldr	r2, [pc, #284]	; (8005504 <UART_Start_Receive_IT+0x234>)
 80053e8:	675a      	str	r2, [r3, #116]	; 0x74
 80053ea:	e002      	b.n	80053f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a46      	ldr	r2, [pc, #280]	; (8005508 <UART_Start_Receive_IT+0x238>)
 80053f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01a      	beq.n	8005430 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800541c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800541e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005422:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800542a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e4      	bne.n	80053fa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005446:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005450:	64ba      	str	r2, [r7, #72]	; 0x48
 8005452:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800545e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_Start_Receive_IT+0x160>
 8005464:	e046      	b.n	80054f4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546e:	d107      	bne.n	8005480 <UART_Start_Receive_IT+0x1b0>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d103      	bne.n	8005480 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a24      	ldr	r2, [pc, #144]	; (800550c <UART_Start_Receive_IT+0x23c>)
 800547c:	675a      	str	r2, [r3, #116]	; 0x74
 800547e:	e002      	b.n	8005486 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a23      	ldr	r2, [pc, #140]	; (8005510 <UART_Start_Receive_IT+0x240>)
 8005484:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d019      	beq.n	80054c2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80054a2:	677b      	str	r3, [r7, #116]	; 0x74
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
 80054ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e6      	bne.n	800548e <UART_Start_Receive_IT+0x1be>
 80054c0:	e018      	b.n	80054f4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	613b      	str	r3, [r7, #16]
   return(result);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f043 0320 	orr.w	r3, r3, #32
 80054d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	69f9      	ldr	r1, [r7, #28]
 80054e6:	6a3a      	ldr	r2, [r7, #32]
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e6      	bne.n	80054c2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	378c      	adds	r7, #140	; 0x8c
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	08006531 	.word	0x08006531
 8005508:	080061d1 	.word	0x080061d1
 800550c:	08006019 	.word	0x08006019
 8005510:	08005e61 	.word	0x08005e61

08005514 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b096      	sub	sp, #88	; 0x58
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2222      	movs	r2, #34	; 0x22
 800553c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02d      	beq.n	80055a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005550:	4a40      	ldr	r2, [pc, #256]	; (8005654 <UART_Start_Receive_DMA+0x140>)
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555a:	4a3f      	ldr	r2, [pc, #252]	; (8005658 <UART_Start_Receive_DMA+0x144>)
 800555c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	4a3d      	ldr	r2, [pc, #244]	; (800565c <UART_Start_Receive_DMA+0x148>)
 8005566:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800556e:	2200      	movs	r2, #0
 8005570:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3324      	adds	r3, #36	; 0x24
 800557e:	4619      	mov	r1, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	461a      	mov	r2, r3
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	f7fb fdf6 	bl	8001178 <HAL_DMA_Start_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2210      	movs	r2, #16
 8005596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e051      	b.n	800564a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d018      	beq.n	80055e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c2:	657b      	str	r3, [r7, #84]	; 0x54
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ce:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	653b      	str	r3, [r7, #80]	; 0x50
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3308      	adds	r3, #8
 80055fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005600:	637a      	str	r2, [r7, #52]	; 0x34
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005634:	623a      	str	r2, [r7, #32]
 8005636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	6a3a      	ldr	r2, [r7, #32]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	61bb      	str	r3, [r7, #24]
   return(result);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3758      	adds	r7, #88	; 0x58
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	08005865 	.word	0x08005865
 8005658:	08005991 	.word	0x08005991
 800565c:	080059cf 	.word	0x080059cf

08005660 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b08f      	sub	sp, #60	; 0x3c
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	61fb      	str	r3, [r7, #28]
   return(result);
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005688:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800568c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e6      	bne.n	8005668 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ba:	61ba      	str	r2, [r7, #24]
 80056bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	613b      	str	r3, [r7, #16]
   return(result);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e5      	bne.n	800569a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80056d6:	bf00      	nop
 80056d8:	373c      	adds	r7, #60	; 0x3c
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b095      	sub	sp, #84	; 0x54
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	643b      	str	r3, [r7, #64]	; 0x40
 800570a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800570e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	61fb      	str	r3, [r7, #28]
   return(result);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	64bb      	str	r3, [r7, #72]	; 0x48
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005740:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e3      	bne.n	800571c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d118      	bne.n	800578e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	60bb      	str	r3, [r7, #8]
   return(result);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f023 0310 	bic.w	r3, r3, #16
 8005770:	647b      	str	r3, [r7, #68]	; 0x44
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6979      	ldr	r1, [r7, #20]
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	613b      	str	r3, [r7, #16]
   return(result);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80057a2:	bf00      	nop
 80057a4:	3754      	adds	r7, #84	; 0x54
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b090      	sub	sp, #64	; 0x40
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d137      	bne.n	800583a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	623b      	str	r3, [r7, #32]
   return(result);
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f2:	633a      	str	r2, [r7, #48]	; 0x30
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e5      	bne.n	80057d2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	60fb      	str	r3, [r7, #12]
   return(result);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	617b      	str	r3, [r7, #20]
   return(result);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e6      	bne.n	8005806 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005838:	e002      	b.n	8005840 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800583a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800583c:	f002 fd92 	bl	8008364 <HAL_UART_TxCpltCallback>
}
 8005840:	bf00      	nop
 8005842:	3740      	adds	r7, #64	; 0x40
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff f882 	bl	8004960 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b09c      	sub	sp, #112	; 0x70
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d171      	bne.n	8005964 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	2200      	movs	r2, #0
 8005884:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589c:	66bb      	str	r3, [r7, #104]	; 0x68
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80058a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e6      	bne.n	8005888 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3308      	adds	r3, #8
 80058c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	667b      	str	r3, [r7, #100]	; 0x64
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058da:	647a      	str	r2, [r7, #68]	; 0x44
 80058dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e5      	bne.n	80058ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	623b      	str	r3, [r7, #32]
   return(result);
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005904:	663b      	str	r3, [r7, #96]	; 0x60
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800590e:	633a      	str	r2, [r7, #48]	; 0x30
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d118      	bne.n	8005964 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0310 	bic.w	r3, r3, #16
 8005946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	617b      	str	r3, [r7, #20]
   return(result);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e6      	bne.n	8005932 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	2200      	movs	r2, #0
 8005968:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	2b01      	cmp	r3, #1
 8005970:	d107      	bne.n	8005982 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005978:	4619      	mov	r1, r3
 800597a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800597c:	f002 fdf4 	bl	8008568 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005980:	e002      	b.n	8005988 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005982:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005984:	f002 fd2c 	bl	80083e0 <HAL_UART_RxCpltCallback>
}
 8005988:	bf00      	nop
 800598a:	3770      	adds	r7, #112	; 0x70
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d109      	bne.n	80059c0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f002 fdd5 	bl	8008568 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059be:	e002      	b.n	80059c6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7fe ffd7 	bl	8004974 <HAL_UART_RxHalfCpltCallback>
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d109      	bne.n	8005a0e <UART_DMAError+0x40>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b21      	cmp	r3, #33	; 0x21
 80059fe:	d106      	bne.n	8005a0e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005a08:	6978      	ldr	r0, [r7, #20]
 8005a0a:	f7ff fe29 	bl	8005660 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d109      	bne.n	8005a30 <UART_DMAError+0x62>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b22      	cmp	r3, #34	; 0x22
 8005a20:	d106      	bne.n	8005a30 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005a2a:	6978      	ldr	r0, [r7, #20]
 8005a2c:	f7ff fe59 	bl	80056e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	f043 0210 	orr.w	r2, r3, #16
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a40:	6978      	ldr	r0, [r7, #20]
 8005a42:	f002 fd37 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a46:	bf00      	nop
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f002 fd21 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	220f      	movs	r2, #15
 8005a96:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0208 	orr.w	r2, r2, #8
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7fe ff66 	bl	8004988 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b08f      	sub	sp, #60	; 0x3c
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	2b21      	cmp	r3, #33	; 0x21
 8005ad4:	d14c      	bne.n	8005b70 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d132      	bne.n	8005b48 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b02:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e6      	bne.n	8005ae2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e6      	bne.n	8005b14 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005b46:	e013      	b.n	8005b70 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	781a      	ldrb	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005b70:	bf00      	nop
 8005b72:	373c      	adds	r7, #60	; 0x3c
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b091      	sub	sp, #68	; 0x44
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8a:	2b21      	cmp	r3, #33	; 0x21
 8005b8c:	d151      	bne.n	8005c32 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d132      	bne.n	8005c00 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	69b9      	ldr	r1, [r7, #24]
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e6      	bne.n	8005bcc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005bfe:	e018      	b.n	8005c32 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c14:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005c32:	bf00      	nop
 8005c34:	3744      	adds	r7, #68	; 0x44
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b091      	sub	sp, #68	; 0x44
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	2b21      	cmp	r3, #33	; 0x21
 8005c4e:	d160      	bne.n	8005d12 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005c56:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005c58:	e057      	b.n	8005d0a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d133      	bne.n	8005cce <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	623b      	str	r3, [r7, #32]
   return(result);
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c86:	633a      	str	r2, [r7, #48]	; 0x30
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	69b9      	ldr	r1, [r7, #24]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e6      	bne.n	8005c9a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005ccc:	e021      	b.n	8005d12 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce0:	781a      	ldrb	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d06:	3b01      	subs	r3, #1
 8005d08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1a4      	bne.n	8005c5a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005d10:	e7ff      	b.n	8005d12 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005d12:	bf00      	nop
 8005d14:	3744      	adds	r7, #68	; 0x44
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b091      	sub	sp, #68	; 0x44
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	2b21      	cmp	r3, #33	; 0x21
 8005d2e:	d165      	bne.n	8005dfc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d36:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d38:	e05c      	b.n	8005df4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d133      	bne.n	8005dae <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3308      	adds	r3, #8
 8005d64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e6      	bne.n	8005d7a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005dac:	e026      	b.n	8005dfc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d018      	beq.n	8005dee <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005dee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005df0:	3b01      	subs	r3, #1
 8005df2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005df4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d19f      	bne.n	8005d3a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005dfa:	e7ff      	b.n	8005dfc <UART_TxISR_16BIT_FIFOEN+0xde>
 8005dfc:	bf00      	nop
 8005dfe:	3744      	adds	r7, #68	; 0x44
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e6      	bne.n	8005e10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f002 fa87 	bl	8008364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e56:	bf00      	nop
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b09c      	sub	sp, #112	; 0x70
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e6e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e78:	2b22      	cmp	r3, #34	; 0x22
 8005e7a:	f040 80be 	bne.w	8005ffa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e8c:	b2d9      	uxtb	r1, r3
 8005e8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	400a      	ands	r2, r1
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 80a1 	bne.w	800600a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ee6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e6      	bne.n	8005ec8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	667b      	str	r3, [r7, #100]	; 0x64
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a33      	ldr	r2, [pc, #204]	; (8006014 <UART_RxISR_8BIT+0x1b4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d01f      	beq.n	8005f8c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	623b      	str	r3, [r7, #32]
   return(result);
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f78:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e6      	bne.n	8005f5a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d12e      	bne.n	8005ff2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0310 	bic.w	r3, r3, #16
 8005fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	69b9      	ldr	r1, [r7, #24]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	e841 2300 	strex	r3, r2, [r1]
 8005fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e6      	bne.n	8005f9a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d103      	bne.n	8005fe2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2210      	movs	r2, #16
 8005fe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f002 fabc 	bl	8008568 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ff0:	e00b      	b.n	800600a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f002 f9f4 	bl	80083e0 <HAL_UART_RxCpltCallback>
}
 8005ff8:	e007      	b.n	800600a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0208 	orr.w	r2, r2, #8
 8006008:	619a      	str	r2, [r3, #24]
}
 800600a:	bf00      	nop
 800600c:	3770      	adds	r7, #112	; 0x70
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40008000 	.word	0x40008000

08006018 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b09c      	sub	sp, #112	; 0x70
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006026:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006030:	2b22      	cmp	r3, #34	; 0x22
 8006032:	f040 80be 	bne.w	80061b2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006044:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006046:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800604a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800604e:	4013      	ands	r3, r2
 8006050:	b29a      	uxth	r2, r3
 8006052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006054:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	f040 80a1 	bne.w	80061c2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800608e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006094:	667b      	str	r3, [r7, #100]	; 0x64
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609e:	657b      	str	r3, [r7, #84]	; 0x54
 80060a0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e6      	bne.n	8006080 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	663b      	str	r3, [r7, #96]	; 0x60
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060d2:	643a      	str	r2, [r7, #64]	; 0x40
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e5      	bne.n	80060b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a33      	ldr	r2, [pc, #204]	; (80061cc <UART_RxISR_16BIT+0x1b4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01f      	beq.n	8006144 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d018      	beq.n	8006144 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006132:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e6      	bne.n	8006112 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d12e      	bne.n	80061aa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f023 0310 	bic.w	r3, r3, #16
 8006166:	65bb      	str	r3, [r7, #88]	; 0x58
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6979      	ldr	r1, [r7, #20]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	613b      	str	r3, [r7, #16]
   return(result);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e6      	bne.n	8006152 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b10      	cmp	r3, #16
 8006190:	d103      	bne.n	800619a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2210      	movs	r2, #16
 8006198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f002 f9e0 	bl	8008568 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061a8:	e00b      	b.n	80061c2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f002 f918 	bl	80083e0 <HAL_UART_RxCpltCallback>
}
 80061b0:	e007      	b.n	80061c2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0208 	orr.w	r2, r2, #8
 80061c0:	619a      	str	r2, [r3, #24]
}
 80061c2:	bf00      	nop
 80061c4:	3770      	adds	r7, #112	; 0x70
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40008000 	.word	0x40008000

080061d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b0ac      	sub	sp, #176	; 0xb0
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006206:	2b22      	cmp	r3, #34	; 0x22
 8006208:	f040 8182 	bne.w	8006510 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006212:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006216:	e125      	b.n	8006464 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006222:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006226:	b2d9      	uxtb	r1, r3
 8006228:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800622c:	b2da      	uxtb	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006232:	400a      	ands	r2, r1
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800625e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	2b00      	cmp	r3, #0
 8006268:	d053      	beq.n	8006312 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800626a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800627a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006290:	f043 0201 	orr.w	r2, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800629a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d011      	beq.n	80062ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80062a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2202      	movs	r2, #2
 80062b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c0:	f043 0204 	orr.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d011      	beq.n	80062fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80062d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2204      	movs	r2, #4
 80062e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f0:	f043 0202 	orr.w	r2, r3, #2
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	2b00      	cmp	r3, #0
 8006302:	d006      	beq.n	8006312 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f002 f8d5 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 80a2 	bne.w	8006464 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006342:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006344:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006348:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e4      	bne.n	8006320 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800637e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006380:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006384:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800638c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e1      	bne.n	8006356 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a5f      	ldr	r2, [pc, #380]	; (8006528 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d021      	beq.n	80063f4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d01a      	beq.n	80063f4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80063cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063e0:	657b      	str	r3, [r7, #84]	; 0x54
 80063e2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e4      	bne.n	80063be <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d130      	bne.n	800645e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	f023 0310 	bic.w	r3, r3, #16
 8006416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006424:	643b      	str	r3, [r7, #64]	; 0x40
 8006426:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800642a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e4      	bne.n	8006402 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b10      	cmp	r3, #16
 8006444:	d103      	bne.n	800644e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2210      	movs	r2, #16
 800644c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f002 f886 	bl	8008568 <HAL_UARTEx_RxEventCallback>
 800645c:	e002      	b.n	8006464 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 ffbe 	bl	80083e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006464:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800646c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	f47f aecf 	bne.w	8006218 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006480:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006484:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006488:	2b00      	cmp	r3, #0
 800648a:	d049      	beq.n	8006520 <UART_RxISR_8BIT_FIFOEN+0x350>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006492:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006496:	429a      	cmp	r2, r3
 8006498:	d242      	bcs.n	8006520 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80064be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e3      	bne.n	800649a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a15      	ldr	r2, [pc, #84]	; (800652c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80064d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f043 0320 	orr.w	r3, r3, #32
 80064ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	613b      	str	r3, [r7, #16]
   return(result);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e4      	bne.n	80064d8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800650e:	e007      	b.n	8006520 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0208 	orr.w	r2, r2, #8
 800651e:	619a      	str	r2, [r3, #24]
}
 8006520:	bf00      	nop
 8006522:	37b0      	adds	r7, #176	; 0xb0
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40008000 	.word	0x40008000
 800652c:	08005e61 	.word	0x08005e61

08006530 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b0ae      	sub	sp, #184	; 0xb8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800653e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006566:	2b22      	cmp	r3, #34	; 0x22
 8006568:	f040 8186 	bne.w	8006878 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006572:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006576:	e129      	b.n	80067cc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800658a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800658e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006592:	4013      	ands	r3, r2
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800659a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80065c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d053      	beq.n	8006676 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d011      	beq.n	80065fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80065da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f4:	f043 0201 	orr.w	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d011      	beq.n	800662e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800660a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2202      	movs	r2, #2
 800661c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006624:	f043 0204 	orr.w	r2, r3, #4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800662e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	d011      	beq.n	800665e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800663a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2204      	movs	r2, #4
 800664c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006654:	f043 0202 	orr.w	r2, r3, #2
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006664:	2b00      	cmp	r3, #0
 8006666:	d006      	beq.n	8006676 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 ff23 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	f040 80a4 	bne.w	80067cc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066aa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e2      	bne.n	8006684 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80066e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e1      	bne.n	80066be <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a5f      	ldr	r2, [pc, #380]	; (8006890 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d021      	beq.n	800675c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01a      	beq.n	800675c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800673a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006748:	65bb      	str	r3, [r7, #88]	; 0x58
 800674a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800674e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e4      	bne.n	8006726 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d130      	bne.n	80067c6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800678c:	647b      	str	r3, [r7, #68]	; 0x44
 800678e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e4      	bne.n	800676a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d103      	bne.n	80067b6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2210      	movs	r2, #16
 80067b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fed2 	bl	8008568 <HAL_UARTEx_RxEventCallback>
 80067c4:	e002      	b.n	80067cc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 fe0a 	bl	80083e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067cc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80067d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f aecb 	bne.w	8006578 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067e8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80067ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d049      	beq.n	8006888 <UART_RxISR_16BIT_FIFOEN+0x358>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067fa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80067fe:	429a      	cmp	r2, r3
 8006800:	d242      	bcs.n	8006888 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	623b      	str	r3, [r7, #32]
   return(result);
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006826:	633a      	str	r2, [r7, #48]	; 0x30
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800682c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e3      	bne.n	8006802 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a15      	ldr	r2, [pc, #84]	; (8006894 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800683e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	60fb      	str	r3, [r7, #12]
   return(result);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f043 0320 	orr.w	r3, r3, #32
 8006854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	69b9      	ldr	r1, [r7, #24]
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	617b      	str	r3, [r7, #20]
   return(result);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e4      	bne.n	8006840 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006876:	e007      	b.n	8006888 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0208 	orr.w	r2, r2, #8
 8006886:	619a      	str	r2, [r3, #24]
}
 8006888:	bf00      	nop
 800688a:	37b8      	adds	r7, #184	; 0xb8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40008000 	.word	0x40008000
 8006894:	08006019 	.word	0x08006019

08006898 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_UARTEx_DisableFifoMode+0x16>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e027      	b.n	800693a <HAL_UARTEx_DisableFifoMode+0x66>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2224      	movs	r2, #36	; 0x24
 80068f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006918:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800695a:	2302      	movs	r3, #2
 800695c:	e02d      	b.n	80069ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2224      	movs	r2, #36	; 0x24
 800696a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8a4 	bl	8006ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e02d      	b.n	8006a36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2224      	movs	r2, #36	; 0x24
 80069e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f866 	bl	8006ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b08c      	sub	sp, #48	; 0x30
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d142      	bne.n	8006adc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e03b      	b.n	8006ade <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	461a      	mov	r2, r3
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7fe fd4b 	bl	8005514 <UART_Start_Receive_DMA>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d124      	bne.n	8006ad6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d11d      	bne.n	8006ad0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2210      	movs	r2, #16
 8006a9a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f043 0310 	orr.w	r3, r3, #16
 8006ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
 8006abc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6a39      	ldr	r1, [r7, #32]
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e6      	bne.n	8006a9c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8006ace:	e002      	b.n	8006ad6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ada:	e000      	b.n	8006ade <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3730      	adds	r7, #48	; 0x30
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d108      	bne.n	8006b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b08:	e031      	b.n	8006b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b0e:	2308      	movs	r3, #8
 8006b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	0e5b      	lsrs	r3, r3, #25
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	0f5b      	lsrs	r3, r3, #29
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	7b3a      	ldrb	r2, [r7, #12]
 8006b36:	4911      	ldr	r1, [pc, #68]	; (8006b7c <UARTEx_SetNbDataToProcess+0x94>)
 8006b38:	5c8a      	ldrb	r2, [r1, r2]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b3e:	7b3a      	ldrb	r2, [r7, #12]
 8006b40:	490f      	ldr	r1, [pc, #60]	; (8006b80 <UARTEx_SetNbDataToProcess+0x98>)
 8006b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	7b7a      	ldrb	r2, [r7, #13]
 8006b54:	4909      	ldr	r1, [pc, #36]	; (8006b7c <UARTEx_SetNbDataToProcess+0x94>)
 8006b56:	5c8a      	ldrb	r2, [r1, r2]
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b5c:	7b7a      	ldrb	r2, [r7, #13]
 8006b5e:	4908      	ldr	r1, [pc, #32]	; (8006b80 <UARTEx_SetNbDataToProcess+0x98>)
 8006b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	0800bfa4 	.word	0x0800bfa4
 8006b80:	0800bfac 	.word	0x0800bfac

08006b84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b8c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bba:	b084      	sub	sp, #16
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	f107 0014 	add.w	r0, r7, #20
 8006bc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	b004      	add	sp, #16
 8006bfa:	4770      	bx	lr

08006bfc <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c0e:	4619      	mov	r1, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	425a      	negs	r2, r3
 8006c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c28:	bf58      	it	pl
 8006c2a:	4253      	negpl	r3, r2
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c3a:	2b80      	cmp	r3, #128	; 0x80
 8006c3c:	d113      	bne.n	8006c66 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	425a      	negs	r2, r3
 8006c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c58:	bf58      	it	pl
 8006c5a:	4253      	negpl	r3, r2
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8006c64:	e00b      	b.n	8006c7e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c74:	3301      	adds	r3, #1
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f805 	bl	8006cae <RingGetNBytes>
 8006ca4:	4603      	mov	r3, r0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <RingGetNBytes+0x1e>
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <RingGetNBytes+0x22>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e03e      	b.n	8006d4e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	2b80      	cmp	r3, #128	; 0x80
 8006cd4:	d901      	bls.n	8006cda <RingGetNBytes+0x2c>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e039      	b.n	8006d4e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
 8006cde:	e01b      	b.n	8006d18 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	5c52      	ldrb	r2, [r2, r1]
 8006cf2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	425a      	negs	r2, r3
 8006cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d06:	bf58      	it	pl
 8006d08:	4253      	negpl	r3, r2
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	3301      	adds	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
 8006d18:	7dfa      	ldrb	r2, [r7, #23]
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d205      	bcs.n	8006d2c <RingGetNBytes+0x7e>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006d26:	7dfa      	ldrb	r2, [r7, #23]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d3d9      	bcc.n	8006ce0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f805 	bl	8006d56 <RingClear>

	return uCounter;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8006d94:	4b42      	ldr	r3, [pc, #264]	; (8006ea0 <ModbusInit+0x114>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d87d      	bhi.n	8006e98 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	33bc      	adds	r3, #188	; 0xbc
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ffd8 	bl	8006d56 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d109      	bne.n	8006dc2 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8006dae:	4a3d      	ldr	r2, [pc, #244]	; (8006ea4 <ModbusInit+0x118>)
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	483d      	ldr	r0, [pc, #244]	; (8006ea8 <ModbusInit+0x11c>)
 8006db4:	f001 fcf0 	bl	8008798 <osThreadNew>
 8006db8:	4602      	mov	r2, r0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006dc0:	e033      	b.n	8006e2a <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d12e      	bne.n	8006e28 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8006dca:	4a38      	ldr	r2, [pc, #224]	; (8006eac <ModbusInit+0x120>)
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4838      	ldr	r0, [pc, #224]	; (8006eb0 <ModbusInit+0x124>)
 8006dd0:	f001 fce2 	bl	8008798 <osThreadNew>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006de2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006dea:	4a32      	ldr	r2, [pc, #200]	; (8006eb4 <ModbusInit+0x128>)
 8006dec:	9200      	str	r2, [sp, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	4831      	ldr	r0, [pc, #196]	; (8006eb8 <ModbusInit+0x12c>)
 8006df2:	f004 f847 	bl	800ae84 <xTimerCreate>
 8006df6:	4602      	mov	r2, r0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d100      	bne.n	8006e0a <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8006e08:	e7fe      	b.n	8006e08 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8006e0a:	4a2c      	ldr	r2, [pc, #176]	; (8006ebc <ModbusInit+0x130>)
 8006e0c:	2110      	movs	r1, #16
 8006e0e:	2002      	movs	r0, #2
 8006e10:	f001 fddd 	bl	80089ce <osMessageQueueNew>
 8006e14:	4602      	mov	r2, r0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8006e26:	e7fe      	b.n	8006e26 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8006e28:	e7fe      	b.n	8006e28 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d100      	bne.n	8006e36 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8006e34:	e7fe      	b.n	8006e34 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8006e3c:	4a20      	ldr	r2, [pc, #128]	; (8006ec0 <ModbusInit+0x134>)
 8006e3e:	9200      	str	r2, [sp, #0]
 8006e40:	2200      	movs	r2, #0
 8006e42:	2105      	movs	r1, #5
 8006e44:	481f      	ldr	r0, [pc, #124]	; (8006ec4 <ModbusInit+0x138>)
 8006e46:	f004 f81d 	bl	800ae84 <xTimerCreate>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d100      	bne.n	8006e5e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8006e5c:	e7fe      	b.n	8006e5c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8006e5e:	4a1a      	ldr	r2, [pc, #104]	; (8006ec8 <ModbusInit+0x13c>)
 8006e60:	2101      	movs	r1, #1
 8006e62:	2001      	movs	r0, #1
 8006e64:	f001 fd2a 	bl	80088bc <osSemaphoreNew>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d100      	bne.n	8006e7c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8006e7a:	e7fe      	b.n	8006e7a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8006e7c:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <ModbusInit+0x114>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <ModbusInit+0x140>)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8006e8a:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <ModbusInit+0x114>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	4b03      	ldr	r3, [pc, #12]	; (8006ea0 <ModbusInit+0x114>)
 8006e94:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8006e96:	e000      	b.n	8006e9a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8006e98:	e7fe      	b.n	8006e98 <ModbusInit+0x10c>
}
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000067c 	.word	0x2000067c
 8006ea4:	0800bfcc 	.word	0x0800bfcc
 8006ea8:	080070d9 	.word	0x080070d9
 8006eac:	0800bff0 	.word	0x0800bff0
 8006eb0:	0800754d 	.word	0x0800754d
 8006eb4:	0800707d 	.word	0x0800707d
 8006eb8:	0800beb8 	.word	0x0800beb8
 8006ebc:	0800bfb4 	.word	0x0800bfb4
 8006ec0:	08006ff9 	.word	0x08006ff9
 8006ec4:	0800bec8 	.word	0x0800bec8
 8006ec8:	0800c014 	.word	0x0800c014
 8006ecc:	20000674 	.word	0x20000674

08006ed0 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d005      	beq.n	8006eee <ModbusStart+0x1e>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d000      	beq.n	8006eee <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 8006eec:	e7fe      	b.n	8006eec <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d004      	beq.n	8006f02 <ModbusStart+0x32>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d15c      	bne.n	8006fbc <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68d8      	ldr	r0, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8a1b      	ldrh	r3, [r3, #16]
 8006f12:	2200      	movs	r2, #0
 8006f14:	4619      	mov	r1, r3
 8006f16:	f7fa fd35 	bl	8001984 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d105      	bne.n	8006f2e <ModbusStart+0x5e>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d100      	bne.n	8006f2e <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8006f2c:	e7fe      	b.n	8006f2c <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8006f2e:	bf00      	nop
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fd fdd9 	bl	8004aec <HAL_UART_GetState>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d1f7      	bne.n	8006f30 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d11a      	bne.n	8006f80 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6858      	ldr	r0, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	33bc      	adds	r3, #188	; 0xbc
 8006f52:	2280      	movs	r2, #128	; 0x80
 8006f54:	4619      	mov	r1, r3
 8006f56:	f7ff fd72 	bl	8006a3e <HAL_UARTEx_ReceiveToIdle_DMA>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d000      	beq.n	8006f62 <ModbusStart+0x92>
        	   {
        	         while(1)
 8006f60:	e7fe      	b.n	8006f60 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0204 	bic.w	r2, r2, #4
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e00b      	b.n	8006f98 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6858      	ldr	r0, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	33a6      	adds	r3, #166	; 0xa6
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	f7fc ff94 	bl	8003eb8 <HAL_UART_Receive_IT>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d000      	beq.n	8006f98 <ModbusStart+0xc8>
        	  {
        	           while(1)
 8006f96:	e7fe      	b.n	8006f96 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7a1b      	ldrb	r3, [r3, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <ModbusStart+0xda>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d100      	bne.n	8006faa <ModbusStart+0xda>
          {
        	  while(1)
 8006fa8:	e7fe      	b.n	8006fa8 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	7a1b      	ldrb	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <ModbusStart+0xec>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d100      	bne.n	8006fbc <ModbusStart+0xec>
          {
             	  while(1)
 8006fba:	e7fe      	b.n	8006fba <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e02a      	b.n	800705c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8007006:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <vTimerCallbackT35+0x7c>)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d11e      	bne.n	8007056 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8007018:	4a16      	ldr	r2, [pc, #88]	; (8007074 <vTimerCallbackT35+0x7c>)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b04      	cmp	r3, #4
 8007024:	d10c      	bne.n	8007040 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <vTimerCallbackT35+0x7c>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8007032:	2300      	movs	r3, #0
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2300      	movs	r3, #0
 8007038:	2200      	movs	r2, #0
 800703a:	2103      	movs	r1, #3
 800703c:	f003 ff7e 	bl	800af3c <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8007040:	4a0c      	ldr	r2, [pc, #48]	; (8007074 <vTimerCallbackT35+0x7c>)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007048:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800704c:	2300      	movs	r3, #0
 800704e:	2203      	movs	r2, #3
 8007050:	2100      	movs	r1, #0
 8007052:	f003 fce7 	bl	800aa24 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3301      	adds	r3, #1
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <vTimerCallbackT35+0x80>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4293      	cmp	r3, r2
 8007066:	dbce      	blt.n	8007006 <vTimerCallbackT35+0xe>
		}

	}
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000674 	.word	0x20000674
 8007078:	2000067c 	.word	0x2000067c

0800707c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e017      	b.n	80070ba <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <vTimerCallbackTimeout+0x54>)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d10b      	bne.n	80070b4 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800709c:	4a0c      	ldr	r2, [pc, #48]	; (80070d0 <vTimerCallbackTimeout+0x54>)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a4:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80070a8:	2300      	movs	r3, #0
 80070aa:	2203      	movs	r2, #3
 80070ac:	f06f 0107 	mvn.w	r1, #7
 80070b0:	f003 fcb8 	bl	800aa24 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <vTimerCallbackTimeout+0x58>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4293      	cmp	r3, r2
 80070c4:	dbe1      	blt.n	800708a <vTimerCallbackTimeout+0xe>
		}

	}

}
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000674 	.word	0x20000674
 80070d4:	2000067c 	.word	0x2000067c

080070d8 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d004      	beq.n	80070fe <StartTaskModbusSlave+0x26>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d117      	bne.n	800712e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 80070fe:	f04f 31ff 	mov.w	r1, #4294967295
 8007102:	2001      	movs	r0, #1
 8007104:	f003 fc46 	bl	800a994 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fbed 	bl	80078e8 <getRxBuffer>
 800710e:	4603      	mov	r3, r0
 8007110:	f113 0f03 	cmn.w	r3, #3
 8007114:	d10b      	bne.n	800712e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	22fd      	movs	r2, #253	; 0xfd
 800711a:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007122:	3301      	adds	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 800712c:	e0a1      	b.n	8007272 <StartTaskModbusSlave+0x19a>
	  }
   }

   if (modH->u8BufferSize < 7)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007134:	2b06      	cmp	r3, #6
 8007136:	d80b      	bhi.n	8007150 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	22fa      	movs	r2, #250	; 0xfa
 800713c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007144:	3301      	adds	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 800714e:	e090      	b.n	8007272 <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	7cda      	ldrb	r2, [r3, #19]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	7a1b      	ldrb	r3, [r3, #8]
 8007158:	429a      	cmp	r2, r3
 800715a:	f040 8089 	bne.w	8007270 <StartTaskModbusSlave+0x198>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 fc0c 	bl	800797c <validateRequest>
 8007164:	4603      	mov	r3, r0
 8007166:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	68f9      	ldr	r1, [r7, #12]
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fda6 	bl	8007cc4 <buildException>
			sendTxBuffer(modH);
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fdc2 	bl	8007d02 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800717e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 8007186:	e074      	b.n	8007272 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007194:	f04f 31ff 	mov.w	r1, #4294967295
 8007198:	4618      	mov	r0, r3
 800719a:	f002 f995 	bl	80094c8 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	7d1b      	ldrb	r3, [r3, #20]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	2b0f      	cmp	r3, #15
 80071a6:	d859      	bhi.n	800725c <StartTaskModbusSlave+0x184>
 80071a8:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <StartTaskModbusSlave+0xd8>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071f1 	.word	0x080071f1
 80071b4:	080071f1 	.word	0x080071f1
 80071b8:	08007203 	.word	0x08007203
 80071bc:	08007203 	.word	0x08007203
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007227 	.word	0x08007227
 80071c8:	0800725d 	.word	0x0800725d
 80071cc:	0800725d 	.word	0x0800725d
 80071d0:	0800725d 	.word	0x0800725d
 80071d4:	0800725d 	.word	0x0800725d
 80071d8:	0800725d 	.word	0x0800725d
 80071dc:	0800725d 	.word	0x0800725d
 80071e0:	0800725d 	.word	0x0800725d
 80071e4:	0800725d 	.word	0x0800725d
 80071e8:	08007239 	.word	0x08007239
 80071ec:	0800724b 	.word	0x0800724b
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fe28 	bl	8007e46 <process_FC1>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8007200:	e02d      	b.n	800725e <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fed4 	bl	8007fb0 <process_FC3>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8007212:	e024      	b.n	800725e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 ff36 	bl	8008086 <process_FC5>
 800721a:	4603      	mov	r3, r0
 800721c:	461a      	mov	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8007224:	e01b      	b.n	800725e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 ff86 	bl	8008138 <process_FC6>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8007236:	e012      	b.n	800725e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 ffaf 	bl	800819c <process_FC15>
 800723e:	4603      	mov	r3, r0
 8007240:	461a      	mov	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8007248:	e009      	b.n	800725e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f001 f834 	bl	80082b8 <process_FC16>
 8007250:	4603      	mov	r3, r0
 8007252:	461a      	mov	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800725a:	e000      	b.n	800725e <StartTaskModbusSlave+0x186>
			default:
				break;
 800725c:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8007264:	2300      	movs	r3, #0
 8007266:	2200      	movs	r2, #0
 8007268:	2100      	movs	r1, #0
 800726a:	f001 feb3 	bl	8008fd4 <xQueueGenericSend>

	 continue;
 800726e:	e000      	b.n	8007272 <StartTaskModbusSlave+0x19a>
    	continue;
 8007270:	bf00      	nop
  {
 8007272:	e737      	b.n	80070e4 <StartTaskModbusSlave+0xc>

08007274 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8007274:	b084      	sub	sp, #16
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	f107 001c 	add.w	r0, r7, #28
 8007282:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007290:	f04f 31ff 	mov.w	r1, #4294967295
 8007294:	4618      	mov	r0, r3
 8007296:	f002 f917 	bl	80094c8 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7a1b      	ldrb	r3, [r3, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <SendQuery+0x32>
 80072a2:	23ff      	movs	r3, #255	; 0xff
 80072a4:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <SendQuery+0x40>
 80072b0:	23fe      	movs	r3, #254	; 0xfe
 80072b2:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80072b4:	7f3b      	ldrb	r3, [r7, #28]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <SendQuery+0x4c>
 80072ba:	7f3b      	ldrb	r3, [r7, #28]
 80072bc:	2bf7      	cmp	r3, #247	; 0xf7
 80072be:	d901      	bls.n	80072c4 <SendQuery+0x50>
 80072c0:	23f7      	movs	r3, #247	; 0xf7
 80072c2:	73bb      	strb	r3, [r7, #14]


	if(error)
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00e      	beq.n	80072e8 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 80072ca:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80072d8:	2300      	movs	r3, #0
 80072da:	2200      	movs	r2, #0
 80072dc:	2100      	movs	r1, #0
 80072de:	f001 fe79 	bl	8008fd4 <xQueueGenericSend>
		 return error;
 80072e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e6:	e129      	b.n	800753c <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 80072e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 80072f0:	7f3a      	ldrb	r2, [r7, #28]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 80072f6:	7f7a      	ldrb	r2, [r7, #29]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80072fc:	8bfb      	ldrh	r3, [r7, #30]
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	b29b      	uxth	r3, r3
 8007302:	b2da      	uxtb	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8007308:	8bfb      	ldrh	r3, [r7, #30]
 800730a:	b2da      	uxtb	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8007310:	7f7b      	ldrb	r3, [r7, #29]
 8007312:	3b01      	subs	r3, #1
 8007314:	2b0f      	cmp	r3, #15
 8007316:	f200 80fe 	bhi.w	8007516 <SendQuery+0x2a2>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <SendQuery+0xac>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007361 	.word	0x08007361
 8007324:	08007361 	.word	0x08007361
 8007328:	08007361 	.word	0x08007361
 800732c:	08007361 	.word	0x08007361
 8007330:	0800737f 	.word	0x0800737f
 8007334:	080073a1 	.word	0x080073a1
 8007338:	08007517 	.word	0x08007517
 800733c:	08007517 	.word	0x08007517
 8007340:	08007517 	.word	0x08007517
 8007344:	08007517 	.word	0x08007517
 8007348:	08007517 	.word	0x08007517
 800734c:	08007517 	.word	0x08007517
 8007350:	08007517 	.word	0x08007517
 8007354:	08007517 	.word	0x08007517
 8007358:	080073c3 	.word	0x080073c3
 800735c:	08007481 	.word	0x08007481
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8007360:	8c3b      	ldrh	r3, [r7, #32]
 8007362:	0a1b      	lsrs	r3, r3, #8
 8007364:	b29b      	uxth	r3, r3
 8007366:	b2da      	uxtb	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800736c:	8c3b      	ldrh	r3, [r7, #32]
 800736e:	b2da      	uxtb	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2206      	movs	r2, #6
 8007378:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800737c:	e0cb      	b.n	8007516 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <SendQuery+0x116>
 8007386:	22ff      	movs	r2, #255	; 0xff
 8007388:	e000      	b.n	800738c <SendQuery+0x118>
 800738a:	2200      	movs	r2, #0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2206      	movs	r2, #6
 800739a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800739e:	e0ba      	b.n	8007516 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	0a1b      	lsrs	r3, r3, #8
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2206      	movs	r2, #6
 80073bc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80073c0:	e0a9      	b.n	8007516 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80073c2:	8c3b      	ldrh	r3, [r7, #32]
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 80073ca:	7a7b      	ldrb	r3, [r7, #9]
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 80073d0:	8c3b      	ldrh	r3, [r7, #32]
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <SendQuery+0x174>
	    {
	        u8bytesno++;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	3301      	adds	r3, #1
 80073e0:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 80073e2:	7a7b      	ldrb	r3, [r7, #9]
 80073e4:	3301      	adds	r3, #1
 80073e6:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80073e8:	8c3b      	ldrh	r3, [r7, #32]
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80073f4:	8c3b      	ldrh	r3, [r7, #32]
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	7bfa      	ldrb	r2, [r7, #15]
 8007400:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2207      	movs	r2, #7
 8007406:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800740a:	2300      	movs	r3, #0
 800740c:	81bb      	strh	r3, [r7, #12]
 800740e:	e031      	b.n	8007474 <SendQuery+0x200>
	    {
	        if(i%2)
 8007410:	89bb      	ldrh	r3, [r7, #12]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00f      	beq.n	800743c <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800741c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741e:	89bb      	ldrh	r3, [r7, #12]
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	b29b      	uxth	r3, r3
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	4413      	add	r3, r2
 8007428:	881a      	ldrh	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007430:	4619      	mov	r1, r3
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	440b      	add	r3, r1
 8007438:	74da      	strb	r2, [r3, #19]
 800743a:	e010      	b.n	800745e <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800743c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743e:	89bb      	ldrh	r3, [r7, #12]
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	b29b      	uxth	r3, r3
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	4413      	add	r3, r2
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	b29a      	uxth	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007454:	4619      	mov	r1, r3
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	440b      	add	r3, r1
 800745c:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007464:	3301      	adds	r3, #1
 8007466:	b2da      	uxtb	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800746e:	89bb      	ldrh	r3, [r7, #12]
 8007470:	3301      	adds	r3, #1
 8007472:	81bb      	strh	r3, [r7, #12]
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	b29b      	uxth	r3, r3
 8007478:	89ba      	ldrh	r2, [r7, #12]
 800747a:	429a      	cmp	r2, r3
 800747c:	d3c8      	bcc.n	8007410 <SendQuery+0x19c>
	    }
	    break;
 800747e:	e04a      	b.n	8007516 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8007480:	8c3b      	ldrh	r3, [r7, #32]
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	b29b      	uxth	r3, r3
 8007486:	b2da      	uxtb	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800748c:	8c3b      	ldrh	r3, [r7, #32]
 800748e:	b2da      	uxtb	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8007494:	8c3b      	ldrh	r3, [r7, #32]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2207      	movs	r2, #7
 80074a4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80074a8:	2300      	movs	r3, #0
 80074aa:	817b      	strh	r3, [r7, #10]
 80074ac:	e02e      	b.n	800750c <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80074ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b0:	897b      	ldrh	r3, [r7, #10]
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	4413      	add	r3, r2
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80074c2:	4619      	mov	r1, r3
 80074c4:	b2d2      	uxtb	r2, r2
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	440b      	add	r3, r1
 80074ca:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80074d2:	3301      	adds	r3, #1
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 80074dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074de:	897b      	ldrh	r3, [r7, #10]
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	4413      	add	r3, r2
 80074e4:	881a      	ldrh	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80074ec:	4619      	mov	r1, r3
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	440b      	add	r3, r1
 80074f4:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80074fc:	3301      	adds	r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8007506:	897b      	ldrh	r3, [r7, #10]
 8007508:	3301      	adds	r3, #1
 800750a:	817b      	strh	r3, [r7, #10]
 800750c:	8c3b      	ldrh	r3, [r7, #32]
 800750e:	897a      	ldrh	r2, [r7, #10]
 8007510:	429a      	cmp	r2, r3
 8007512:	d3cc      	bcc.n	80074ae <SendQuery+0x23a>
	    }
	    break;
 8007514:	bf00      	nop
	}


	sendTxBuffer(modH);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fbf3 	bl	8007d02 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8007522:	2300      	movs	r3, #0
 8007524:	2200      	movs	r2, #0
 8007526:	2100      	movs	r1, #0
 8007528:	f001 fd54 	bl	8008fd4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	749a      	strb	r2, [r3, #18]
	return 0;
 800753a:	2300      	movs	r3, #0


}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007546:	b004      	add	sp, #16
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop

0800754c <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08c      	sub	sp, #48	; 0x30
 8007550:	af02      	add	r7, sp, #8
 8007552:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800755e:	f107 010c 	add.w	r1, r7, #12
 8007562:	f04f 32ff 	mov.w	r2, #4294967295
 8007566:	4618      	mov	r0, r3
 8007568:	f001 fece 	bl	8009308 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007578:	f7ff fe7c 	bl	8007274 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800757c:	f04f 31ff 	mov.w	r1, #4294967295
 8007580:	2001      	movs	r0, #1
 8007582:	f003 fa07 	bl	800a994 <ulTaskNotifyTake>
 8007586:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	2200      	movs	r2, #0
 800758c:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d018      	beq.n	80075c6 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	2200      	movs	r2, #0
 8007598:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	22f8      	movs	r2, #248	; 0xf8
 80075a0:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80075a8:	3301      	adds	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80075b2:	69b8      	ldr	r0, [r7, #24]
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80075ba:	4619      	mov	r1, r3
 80075bc:	2300      	movs	r3, #0
 80075be:	2203      	movs	r2, #3
 80075c0:	f003 fa30 	bl	800aa24 <xTaskGenericNotify>
    	  continue;
 80075c4:	e09a      	b.n	80076fc <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 80075c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075c8:	f000 f98e 	bl	80078e8 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d818      	bhi.n	8007608 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	22fa      	movs	r2, #250	; 0xfa
 80075e2:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80075ea:	3301      	adds	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80075f4:	69b8      	ldr	r0, [r7, #24]
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80075fc:	4619      	mov	r1, r3
 80075fe:	2300      	movs	r3, #0
 8007600:	2203      	movs	r2, #3
 8007602:	f003 fa0f 	bl	800aa24 <xTaskGenericNotify>
		  continue;
 8007606:	e079      	b.n	80076fc <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800760e:	2300      	movs	r3, #0
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	2300      	movs	r3, #0
 8007614:	2200      	movs	r2, #0
 8007616:	2103      	movs	r1, #3
 8007618:	f003 fc90 	bl	800af3c <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800761c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800761e:	f000 f8f5 	bl	800780c <validateAnswer>
 8007622:	4603      	mov	r3, r0
 8007624:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8007626:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d010      	beq.n	8007650 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2200      	movs	r2, #0
 8007632:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	7ffa      	ldrb	r2, [r7, #31]
 800763a:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800763c:	69b8      	ldr	r0, [r7, #24]
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8007644:	4619      	mov	r1, r3
 8007646:	2300      	movs	r3, #0
 8007648:	2203      	movs	r2, #3
 800764a:	f003 f9eb 	bl	800aa24 <xTaskGenericNotify>
	     continue;
 800764e:	e055      	b.n	80076fc <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	7ffa      	ldrb	r2, [r7, #31]
 8007654:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800765c:	f04f 31ff 	mov.w	r1, #4294967295
 8007660:	4618      	mov	r0, r3
 8007662:	f001 ff31 	bl	80094c8 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	7d1b      	ldrb	r3, [r3, #20]
 800766a:	3b01      	subs	r3, #1
 800766c:	2b0f      	cmp	r3, #15
 800766e:	d82b      	bhi.n	80076c8 <StartTaskModbusMaster+0x17c>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <StartTaskModbusMaster+0x12c>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	080076b9 	.word	0x080076b9
 800767c:	080076b9 	.word	0x080076b9
 8007680:	080076c1 	.word	0x080076c1
 8007684:	080076c1 	.word	0x080076c1
 8007688:	080076c9 	.word	0x080076c9
 800768c:	080076c9 	.word	0x080076c9
 8007690:	080076c9 	.word	0x080076c9
 8007694:	080076c9 	.word	0x080076c9
 8007698:	080076c9 	.word	0x080076c9
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076c9 	.word	0x080076c9
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076c9 	.word	0x080076c9
 80076b4:	080076c9 	.word	0x080076c9
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80076b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ba:	f000 f821 	bl	8007700 <get_FC1>
	      break;
 80076be:	e004      	b.n	80076ca <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80076c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076c2:	f000 f874 	bl	80077ae <get_FC3>
	      break;
 80076c6:	e000      	b.n	80076ca <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80076c8:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10e      	bne.n	80076fa <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80076e2:	2300      	movs	r3, #0
 80076e4:	2200      	movs	r2, #0
 80076e6:	2100      	movs	r1, #0
 80076e8:	f001 fc74 	bl	8008fd4 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 80076ec:	69b8      	ldr	r0, [r7, #24]
 80076ee:	2300      	movs	r3, #0
 80076f0:	2203      	movs	r2, #3
 80076f2:	f06f 010a 	mvn.w	r1, #10
 80076f6:	f003 f995 	bl	800aa24 <xTaskGenericNotify>
	  }


	  continue;
 80076fa:	bf00      	nop
  {
 80076fc:	e72c      	b.n	8007558 <StartTaskModbusMaster+0xc>
 80076fe:	bf00      	nop

08007700 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8007700:	b590      	push	{r4, r7, lr}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8007708:	2303      	movs	r3, #3
 800770a:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e043      	b.n	800779a <get_FC1+0x9a>

        if(i%2)
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01c      	beq.n	8007758 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800771e:	7bfa      	ldrb	r2, [r7, #15]
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	4413      	add	r3, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	7cd8      	ldrb	r0, [r3, #19]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	b2db      	uxtb	r3, r3
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	4413      	add	r3, r2
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b2d9      	uxtb	r1, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	085b      	lsrs	r3, r3, #1
 8007748:	b2db      	uxtb	r3, r3
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	18d4      	adds	r4, r2, r3
 800774e:	f000 fa5f 	bl	8007c10 <word>
 8007752:	4603      	mov	r3, r0
 8007754:	8023      	strh	r3, [r4, #0]
 8007756:	e01d      	b.n	8007794 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	085b      	lsrs	r3, r3, #1
 8007762:	b2db      	uxtb	r3, r3
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	4413      	add	r3, r2
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	b29b      	uxth	r3, r3
 800776e:	b2d8      	uxtb	r0, r3
 8007770:	7bfa      	ldrb	r2, [r7, #15]
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	4413      	add	r3, r2
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	4413      	add	r3, r2
 800777a:	7cd9      	ldrb	r1, [r3, #19]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	b2db      	uxtb	r3, r3
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	18d4      	adds	r4, r2, r3
 800778c:	f000 fa40 	bl	8007c10 <word>
 8007790:	4603      	mov	r3, r0
 8007792:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	3301      	adds	r3, #1
 8007798:	73fb      	strb	r3, [r7, #15]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7d5b      	ldrb	r3, [r3, #21]
 800779e:	7bfa      	ldrb	r2, [r7, #15]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d3b6      	bcc.n	8007712 <get_FC1+0x12>
        }

     }
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd90      	pop	{r4, r7, pc}

080077ae <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80077ae:	b590      	push	{r4, r7, lr}
 80077b0:	b085      	sub	sp, #20
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80077b6:	2303      	movs	r3, #3
 80077b8:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80077ba:	2300      	movs	r3, #0
 80077bc:	73bb      	strb	r3, [r7, #14]
 80077be:	e018      	b.n	80077f2 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	7cd8      	ldrb	r0, [r3, #19]
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	3301      	adds	r3, #1
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	4413      	add	r3, r2
 80077d0:	7cd9      	ldrb	r1, [r3, #19]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	18d4      	adds	r4, r2, r3
 80077de:	f000 fa17 	bl	8007c10 <word>
 80077e2:	4603      	mov	r3, r0
 80077e4:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	3302      	adds	r3, #2
 80077ea:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	3301      	adds	r3, #1
 80077f0:	73bb      	strb	r3, [r7, #14]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7d5b      	ldrb	r3, [r3, #21]
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	7bba      	ldrb	r2, [r7, #14]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d3df      	bcc.n	80077c0 <get_FC3+0x12>
    }
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	bd90      	pop	{r4, r7, pc}
	...

0800780c <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800781a:	3b02      	subs	r3, #2
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	7cdb      	ldrb	r3, [r3, #19]
 8007822:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8007824:	b21a      	sxth	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800782c:	3b01      	subs	r3, #1
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	440b      	add	r3, r1
 8007832:	7cdb      	ldrb	r3, [r3, #19]
 8007834:	b21b      	sxth	r3, r3
 8007836:	4313      	orrs	r3, r2
 8007838:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800783a:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f103 0213 	add.w	r2, r3, #19
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007848:	3b02      	subs	r3, #2
 800784a:	b2db      	uxtb	r3, r3
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f000 f9f1 	bl	8007c36 <calcCRC>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	89bb      	ldrh	r3, [r7, #12]
 800785a:	4293      	cmp	r3, r2
 800785c:	d009      	beq.n	8007872 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007864:	3301      	adds	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800786e:	23fc      	movs	r3, #252	; 0xfc
 8007870:	e034      	b.n	80078dc <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	7d1b      	ldrb	r3, [r3, #20]
 8007876:	b25b      	sxtb	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	da09      	bge.n	8007890 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007882:	3301      	adds	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 800788c:	23fb      	movs	r3, #251	; 0xfb
 800788e:	e025      	b.n	80078dc <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007894:	2300      	movs	r3, #0
 8007896:	73bb      	strb	r3, [r7, #14]
 8007898:	e00c      	b.n	80078b4 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	4a11      	ldr	r2, [pc, #68]	; (80078e4 <validateAnswer+0xd8>)
 800789e:	5cd2      	ldrb	r2, [r2, r3]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7d1b      	ldrb	r3, [r3, #20]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d102      	bne.n	80078ae <validateAnswer+0xa2>
        {
            isSupported = 1;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73fb      	strb	r3, [r7, #15]
            break;
 80078ac:	e005      	b.n	80078ba <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	3301      	adds	r3, #1
 80078b2:	73bb      	strb	r3, [r7, #14]
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b07      	cmp	r3, #7
 80078b8:	d9ef      	bls.n	800789a <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	f083 0301 	eor.w	r3, r3, #1
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80078cc:	3301      	adds	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	0800c024 	.word	0x0800c024

080078e8 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d104      	bne.n	8007904 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fc fc3c 	bl	800417c <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800790a:	2b00      	cmp	r3, #0
 800790c:	d008      	beq.n	8007920 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	33bc      	adds	r3, #188	; 0xbc
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff fa1f 	bl	8006d56 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8007918:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800791c:	81fb      	strh	r3, [r7, #14]
 800791e:	e019      	b.n	8007954 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3313      	adds	r3, #19
 800792a:	4619      	mov	r1, r3
 800792c:	4610      	mov	r0, r2
 800792e:	f7ff f9ac 	bl	8006c8a <RingGetAllBytes>
 8007932:	4603      	mov	r3, r0
 8007934:	461a      	mov	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8007942:	3301      	adds	r3, #1
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007952:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800795a:	2b01      	cmp	r3, #1
 800795c:	d107      	bne.n	800796e <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6858      	ldr	r0, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	33a6      	adds	r3, #166	; 0xa6
 8007966:	2201      	movs	r2, #1
 8007968:	4619      	mov	r1, r3
 800796a:	f7fc faa5 	bl	8003eb8 <HAL_UART_Receive_IT>
	}

    return i16result;
 800796e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800798a:	3b02      	subs	r3, #2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	4413      	add	r3, r2
 8007990:	7cdb      	ldrb	r3, [r3, #19]
 8007992:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8007994:	b21a      	sxth	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800799c:	3b01      	subs	r3, #1
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	440b      	add	r3, r1
 80079a2:	7cdb      	ldrb	r3, [r3, #19]
 80079a4:	b21b      	sxth	r3, r3
 80079a6:	4313      	orrs	r3, r2
 80079a8:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80079aa:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f103 0213 	add.w	r2, r3, #19
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80079b8:	3b02      	subs	r3, #2
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f000 f939 	bl	8007c36 <calcCRC>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	893b      	ldrh	r3, [r7, #8]
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d009      	beq.n	80079e2 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80079d4:	3301      	adds	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 80079de:	23fc      	movs	r3, #252	; 0xfc
 80079e0:	e10f      	b.n	8007c02 <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80079e6:	2300      	movs	r3, #0
 80079e8:	73bb      	strb	r3, [r7, #14]
 80079ea:	e00c      	b.n	8007a06 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	4a87      	ldr	r2, [pc, #540]	; (8007c0c <validateRequest+0x290>)
 80079f0:	5cd2      	ldrb	r2, [r2, r3]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7d1b      	ldrb	r3, [r3, #20]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d102      	bne.n	8007a00 <validateRequest+0x84>
	        {
	            isSupported = 1;
 80079fa:	2301      	movs	r3, #1
 80079fc:	73fb      	strb	r3, [r7, #15]
	            break;
 80079fe:	e005      	b.n	8007a0c <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	3301      	adds	r3, #1
 8007a04:	73bb      	strb	r3, [r7, #14]
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b07      	cmp	r3, #7
 8007a0a:	d9ef      	bls.n	80079ec <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	f083 0301 	eor.w	r3, r3, #1
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007a1e:	3301      	adds	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e0ea      	b.n	8007c02 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	7d1b      	ldrb	r3, [r3, #20]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	2b0f      	cmp	r3, #15
 8007a3c:	f200 80e0 	bhi.w	8007c00 <validateRequest+0x284>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <validateRequest+0xcc>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a89 	.word	0x08007a89
 8007a4c:	08007a89 	.word	0x08007a89
 8007a50:	08007ba1 	.word	0x08007ba1
 8007a54:	08007ba1 	.word	0x08007ba1
 8007a58:	08007b35 	.word	0x08007b35
 8007a5c:	08007b7d 	.word	0x08007b7d
 8007a60:	08007c01 	.word	0x08007c01
 8007a64:	08007c01 	.word	0x08007c01
 8007a68:	08007c01 	.word	0x08007c01
 8007a6c:	08007c01 	.word	0x08007c01
 8007a70:	08007c01 	.word	0x08007c01
 8007a74:	08007c01 	.word	0x08007c01
 8007a78:	08007c01 	.word	0x08007c01
 8007a7c:	08007c01 	.word	0x08007c01
 8007a80:	08007a89 	.word	0x08007a89
 8007a84:	08007ba1 	.word	0x08007ba1
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7d5a      	ldrb	r2, [r3, #21]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	7d9b      	ldrb	r3, [r3, #22]
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f000 f8bc 	bl	8007c10 <word>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	091b      	lsrs	r3, r3, #4
 8007a9c:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	7dda      	ldrb	r2, [r3, #23]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7e1b      	ldrb	r3, [r3, #24]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f000 f8b1 	bl	8007c10 <word>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	091b      	lsrs	r3, r3, #4
 8007ab2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7dda      	ldrb	r2, [r3, #23]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7e1b      	ldrb	r3, [r3, #24]
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f000 f8a6 	bl	8007c10 <word>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f003 030f 	and.w	r3, r3, #15
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <validateRequest+0x15a>
 8007ad0:	897b      	ldrh	r3, [r7, #10]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8007ad6:	89ba      	ldrh	r2, [r7, #12]
 8007ad8:	897b      	ldrh	r3, [r7, #10]
 8007ada:	4413      	add	r3, r2
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	dd01      	ble.n	8007aea <validateRequest+0x16e>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e08b      	b.n	8007c02 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7dda      	ldrb	r2, [r3, #23]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	7e1b      	ldrb	r3, [r3, #24]
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f000 f88b 	bl	8007c10 <word>
 8007afa:	4603      	mov	r3, r0
 8007afc:	08db      	lsrs	r3, r3, #3
 8007afe:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7dda      	ldrb	r2, [r3, #23]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	7e1b      	ldrb	r3, [r3, #24]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	f000 f880 	bl	8007c10 <word>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <validateRequest+0x1a6>
 8007b1c:	897b      	ldrh	r3, [r7, #10]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8007b22:	897b      	ldrh	r3, [r7, #10]
 8007b24:	3305      	adds	r3, #5
 8007b26:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8007b28:	897b      	ldrh	r3, [r7, #10]
 8007b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2e:	d960      	bls.n	8007bf2 <validateRequest+0x276>
 8007b30:	2303      	movs	r3, #3
 8007b32:	e066      	b.n	8007c02 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7d5a      	ldrb	r2, [r3, #21]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	7d9b      	ldrb	r3, [r3, #22]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f000 f866 	bl	8007c10 <word>
 8007b44:	4603      	mov	r3, r0
 8007b46:	091b      	lsrs	r3, r3, #4
 8007b48:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7d5a      	ldrb	r2, [r3, #21]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7d9b      	ldrb	r3, [r3, #22]
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f000 f85b 	bl	8007c10 <word>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <validateRequest+0x1f0>
 8007b66:	89bb      	ldrh	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8007b72:	89ba      	ldrh	r2, [r7, #12]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d93e      	bls.n	8007bf6 <validateRequest+0x27a>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e042      	b.n	8007c02 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	7d5a      	ldrb	r2, [r3, #21]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	7d9b      	ldrb	r3, [r3, #22]
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f000 f842 	bl	8007c10 <word>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8007b96:	89ba      	ldrh	r2, [r7, #12]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d92e      	bls.n	8007bfa <validateRequest+0x27e>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e030      	b.n	8007c02 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7d5a      	ldrb	r2, [r3, #21]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7d9b      	ldrb	r3, [r3, #22]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	f000 f830 	bl	8007c10 <word>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	7dda      	ldrb	r2, [r3, #23]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7e1b      	ldrb	r3, [r3, #24]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 f826 	bl	8007c10 <word>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8007bc8:	89ba      	ldrh	r2, [r7, #12]
 8007bca:	897b      	ldrh	r3, [r7, #10]
 8007bcc:	4413      	add	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	dd01      	ble.n	8007bdc <validateRequest+0x260>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e012      	b.n	8007c02 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8007bdc:	897b      	ldrh	r3, [r7, #10]
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3305      	adds	r3, #5
 8007be4:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8007be6:	897b      	ldrh	r3, [r7, #10]
 8007be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bec:	d907      	bls.n	8007bfe <validateRequest+0x282>
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e007      	b.n	8007c02 <validateRequest+0x286>
	        break;
 8007bf2:	bf00      	nop
 8007bf4:	e004      	b.n	8007c00 <validateRequest+0x284>
	        break;
 8007bf6:	bf00      	nop
 8007bf8:	e002      	b.n	8007c00 <validateRequest+0x284>
	        break;
 8007bfa:	bf00      	nop
 8007bfc:	e000      	b.n	8007c00 <validateRequest+0x284>
	        break;
 8007bfe:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8007c00:	2300      	movs	r3, #0

}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	0800c024 	.word	0x0800c024

08007c10 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	460a      	mov	r2, r1
 8007c1a:	71fb      	strb	r3, [r7, #7]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8007c20:	79bb      	ldrb	r3, [r7, #6]
 8007c22:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8007c28:	89bb      	ldrh	r3, [r7, #12]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b087      	sub	sp, #28
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8007c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c46:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	74fb      	strb	r3, [r7, #19]
 8007c4c:	e023      	b.n	8007c96 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8007c4e:	7cfb      	ldrb	r3, [r7, #19]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	4053      	eors	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8007c5e:	2301      	movs	r3, #1
 8007c60:	74bb      	strb	r3, [r7, #18]
 8007c62:	e012      	b.n	8007c8a <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	085b      	lsrs	r3, r3, #1
 8007c70:	617b      	str	r3, [r7, #20]
            if (flag)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <calcCRC+0x4e>
                temp ^= 0xA001;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8007c7e:	f083 0301 	eor.w	r3, r3, #1
 8007c82:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8007c84:	7cbb      	ldrb	r3, [r7, #18]
 8007c86:	3301      	adds	r3, #1
 8007c88:	74bb      	strb	r3, [r7, #18]
 8007c8a:	7cbb      	ldrb	r3, [r7, #18]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d9e9      	bls.n	8007c64 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8007c90:	7cfb      	ldrb	r3, [r7, #19]
 8007c92:	3301      	adds	r3, #1
 8007c94:	74fb      	strb	r3, [r7, #19]
 8007c96:	7cfa      	ldrb	r2, [r7, #19]
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d3d7      	bcc.n	8007c4e <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	0a1b      	lsrs	r3, r3, #8
 8007ca2:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	b29b      	uxth	r3, r3

}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6039      	str	r1, [r7, #0]
 8007cce:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	7d1b      	ldrb	r3, [r3, #20]
 8007cd4:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	7a1a      	ldrb	r2, [r3, #8]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	3b80      	subs	r3, #128	; 0x80
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	79fa      	ldrb	r2, [r7, #7]
 8007cec:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8007cf6:	bf00      	nop
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8007d02:	b590      	push	{r4, r7, lr}
 8007d04:	b087      	sub	sp, #28
 8007d06:	af02      	add	r7, sp, #8
 8007d08:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f103 0213 	add.w	r2, r3, #19
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f7ff ff8c 	bl	8007c36 <calcCRC>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8007d22:	89fb      	ldrh	r3, [r7, #14]
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d2e:	4619      	mov	r1, r3
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	440b      	add	r3, r1
 8007d36:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d3e:	3301      	adds	r3, #1
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d4e:	4619      	mov	r1, r3
 8007d50:	89fb      	ldrh	r3, [r7, #14]
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	440b      	add	r3, r1
 8007d58:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007d60:	3301      	adds	r3, #1
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00c      	beq.n	8007d8c <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fc fe10 	bl	800499c <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68d8      	ldr	r0, [r3, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8a1b      	ldrh	r3, [r3, #16]
 8007d84:	2201      	movs	r2, #1
 8007d86:	4619      	mov	r1, r3
 8007d88:	f7f9 fdfc 	bl	8001984 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d10c      	bne.n	8007db0 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6858      	ldr	r0, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f103 0113 	add.w	r1, r3, #19
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	f7fb fff1 	bl	8003d90 <HAL_UART_Transmit_IT>
 8007dae:	e00b      	b.n	8007dc8 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6858      	ldr	r0, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f103 0113 	add.w	r1, r3, #19
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f7fc f8c4 	bl	8003f50 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8007dc8:	21fa      	movs	r1, #250	; 0xfa
 8007dca:	2001      	movs	r0, #1
 8007dcc:	f002 fde2 	bl	800a994 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8007dd0:	bf00      	nop
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f7      	beq.n	8007dd2 <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00c      	beq.n	8007e04 <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68d8      	ldr	r0, [r3, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8a1b      	ldrh	r3, [r3, #16]
 8007df2:	2200      	movs	r2, #0
 8007df4:	4619      	mov	r1, r3
 8007df6:	f7f9 fdc5 	bl	8001984 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fc fe20 	bl	8004a44 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d10c      	bne.n	8007e26 <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8007e12:	f002 f8ed 	bl	8009ff0 <xTaskGetTickCount>
 8007e16:	4602      	mov	r2, r0
 8007e18:	2300      	movs	r3, #0
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	2102      	movs	r1, #2
 8007e20:	4620      	mov	r0, r4
 8007e22:	f003 f88b 	bl	800af3c <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8007e34:	3301      	adds	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd90      	pop	{r4, r7, pc}

08007e46 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	7d5a      	ldrb	r2, [r3, #21]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	7d9b      	ldrb	r3, [r3, #22]
 8007e56:	4619      	mov	r1, r3
 8007e58:	4610      	mov	r0, r2
 8007e5a:	f7ff fed9 	bl	8007c10 <word>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7dda      	ldrb	r2, [r3, #23]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7e1b      	ldrb	r3, [r3, #24]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f7ff fecf 	bl	8007c10 <word>
 8007e72:	4603      	mov	r3, r0
 8007e74:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8007e76:	8a3b      	ldrh	r3, [r7, #16]
 8007e78:	08db      	lsrs	r3, r3, #3
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8007e7e:	8a3b      	ldrh	r3, [r7, #16]
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <process_FC1+0x4a>
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7dfa      	ldrb	r2, [r7, #23]
 8007e94:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	4413      	add	r3, r2
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	82bb      	strh	r3, [r7, #20]
 8007ebc:	e058      	b.n	8007f70 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8007ebe:	8a7a      	ldrh	r2, [r7, #18]
 8007ec0:	8abb      	ldrh	r3, [r7, #20]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8007ec6:	89bb      	ldrh	r3, [r7, #12]
 8007ec8:	091b      	lsrs	r3, r3, #4
 8007eca:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8007ecc:	89bb      	ldrh	r3, [r7, #12]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 030f 	and.w	r3, r3, #15
 8007ed4:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007edc:	897b      	ldrh	r3, [r7, #10]
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	7a7b      	ldrb	r3, [r7, #9]
 8007ee8:	fa42 f303 	asr.w	r3, r2, r3
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d014      	beq.n	8007f1e <process_FC1+0xd8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007efa:	461a      	mov	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4413      	add	r3, r2
 8007f00:	7cda      	ldrb	r2, [r3, #19]
 8007f02:	7dbb      	ldrb	r3, [r7, #22]
 8007f04:	2101      	movs	r1, #1
 8007f06:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8007f12:	4313      	orrs	r3, r2
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	440b      	add	r3, r1
 8007f1a:	74da      	strb	r2, [r3, #19]
 8007f1c:	e015      	b.n	8007f4a <process_FC1+0x104>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f24:	461a      	mov	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4413      	add	r3, r2
 8007f2a:	7cda      	ldrb	r2, [r3, #19]
 8007f2c:	7dbb      	ldrb	r3, [r7, #22]
 8007f2e:	2101      	movs	r1, #1
 8007f30:	fa01 f303 	lsl.w	r3, r1, r3
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	43db      	mvns	r3, r3
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8007f40:	4013      	ands	r3, r2
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	440b      	add	r3, r1
 8007f48:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8007f4a:	7dbb      	ldrb	r3, [r7, #22]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8007f50:	7dbb      	ldrb	r3, [r7, #22]
 8007f52:	2b07      	cmp	r3, #7
 8007f54:	d909      	bls.n	8007f6a <process_FC1+0x124>
        {
            u8bitsno = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f60:	3301      	adds	r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007f6a:	8abb      	ldrh	r3, [r7, #20]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	82bb      	strh	r3, [r7, #20]
 8007f70:	8aba      	ldrh	r2, [r7, #20]
 8007f72:	8a3b      	ldrh	r3, [r7, #16]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d3a2      	bcc.n	8007ebe <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8007f78:	8a3b      	ldrh	r3, [r7, #16]
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <process_FC1+0x14e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f9a:	3302      	adds	r3, #2
 8007f9c:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff feaf 	bl	8007d02 <sendTxBuffer>
    return u8CopyBufferSize;
 8007fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7d5a      	ldrb	r2, [r3, #21]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7d9b      	ldrb	r3, [r3, #22]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f7ff fe24 	bl	8007c10 <word>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	7dda      	ldrb	r2, [r3, #23]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7e1b      	ldrb	r3, [r3, #24]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	f7ff fe1a 	bl	8007c10 <word>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8007fe0:	7afb      	ldrb	r3, [r7, #11]
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8007ff2:	89bb      	ldrh	r3, [r7, #12]
 8007ff4:	81fb      	strh	r3, [r7, #14]
 8007ff6:	e032      	b.n	800805e <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007ffe:	89fb      	ldrh	r3, [r7, #14]
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	b29a      	uxth	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008010:	4619      	mov	r1, r3
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	440b      	add	r3, r1
 8008018:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008020:	3301      	adds	r3, #1
 8008022:	b2da      	uxtb	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	4413      	add	r3, r2
 8008036:	881a      	ldrh	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800803e:	4619      	mov	r1, r3
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	440b      	add	r3, r1
 8008046:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800804e:	3301      	adds	r3, #1
 8008050:	b2da      	uxtb	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8008058:	89fb      	ldrh	r3, [r7, #14]
 800805a:	3301      	adds	r3, #1
 800805c:	81fb      	strh	r3, [r7, #14]
 800805e:	89fa      	ldrh	r2, [r7, #14]
 8008060:	89b9      	ldrh	r1, [r7, #12]
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	440b      	add	r3, r1
 8008066:	429a      	cmp	r2, r3
 8008068:	dbc6      	blt.n	8007ff8 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008070:	3302      	adds	r3, #2
 8008072:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fe44 	bl	8007d02 <sendTxBuffer>

    return u8CopyBufferSize;
 800807a:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	7d5a      	ldrb	r2, [r3, #21]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7d9b      	ldrb	r3, [r3, #22]
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f7ff fdb9 	bl	8007c10 <word>
 800809e:	4603      	mov	r3, r0
 80080a0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 80080a2:	89fb      	ldrh	r3, [r7, #14]
 80080a4:	091b      	lsrs	r3, r3, #4
 80080a6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 80080a8:	89fb      	ldrh	r3, [r7, #14]
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	7ddb      	ldrb	r3, [r3, #23]
 80080b6:	2bff      	cmp	r3, #255	; 0xff
 80080b8:	d115      	bne.n	80080e6 <process_FC5+0x60>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80080c0:	89bb      	ldrh	r3, [r7, #12]
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	4413      	add	r3, r2
 80080c6:	8819      	ldrh	r1, [r3, #0]
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	2201      	movs	r2, #1
 80080cc:	fa02 f303 	lsl.w	r3, r2, r3
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80080d8:	89bb      	ldrh	r3, [r7, #12]
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	4403      	add	r3, r0
 80080de:	430a      	orrs	r2, r1
 80080e0:	b292      	uxth	r2, r2
 80080e2:	801a      	strh	r2, [r3, #0]
 80080e4:	e016      	b.n	8008114 <process_FC5+0x8e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80080ec:	89bb      	ldrh	r3, [r7, #12]
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	4413      	add	r3, r2
 80080f2:	8819      	ldrh	r1, [r3, #0]
 80080f4:	7afb      	ldrb	r3, [r7, #11]
 80080f6:	2201      	movs	r2, #1
 80080f8:	fa02 f303 	lsl.w	r3, r2, r3
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	43db      	mvns	r3, r3
 8008100:	b29a      	uxth	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8008108:	89bb      	ldrh	r3, [r7, #12]
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	4403      	add	r3, r0
 800810e:	400a      	ands	r2, r1
 8008110:	b292      	uxth	r2, r2
 8008112:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2206      	movs	r2, #6
 8008118:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008122:	3302      	adds	r3, #2
 8008124:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fdeb 	bl	8007d02 <sendTxBuffer>

    return u8CopyBufferSize;
 800812c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7d5a      	ldrb	r2, [r3, #21]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	7d9b      	ldrb	r3, [r3, #22]
 8008148:	4619      	mov	r1, r3
 800814a:	4610      	mov	r0, r2
 800814c:	f7ff fd60 	bl	8007c10 <word>
 8008150:	4603      	mov	r3, r0
 8008152:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7dda      	ldrb	r2, [r3, #23]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	7e1b      	ldrb	r3, [r3, #24]
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7ff fd56 	bl	8007c10 <word>
 8008164:	4603      	mov	r3, r0
 8008166:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800816e:	89fb      	ldrh	r3, [r7, #14]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4413      	add	r3, r2
 8008174:	89ba      	ldrh	r2, [r7, #12]
 8008176:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2206      	movs	r2, #6
 800817c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008186:	3302      	adds	r3, #2
 8008188:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fdb9 	bl	8007d02 <sendTxBuffer>

    return u8CopyBufferSize;
 8008190:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	7d5a      	ldrb	r2, [r3, #21]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7d9b      	ldrb	r3, [r3, #22]
 80081ac:	4619      	mov	r1, r3
 80081ae:	4610      	mov	r0, r2
 80081b0:	f7ff fd2e 	bl	8007c10 <word>
 80081b4:	4603      	mov	r3, r0
 80081b6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	7dda      	ldrb	r2, [r3, #23]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7e1b      	ldrb	r3, [r3, #24]
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7ff fd24 	bl	8007c10 <word>
 80081c8:	4603      	mov	r3, r0
 80081ca:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80081d0:	2307      	movs	r3, #7
 80081d2:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80081d4:	2300      	movs	r3, #0
 80081d6:	82bb      	strh	r3, [r7, #20]
 80081d8:	e058      	b.n	800828c <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80081da:	8a7a      	ldrh	r2, [r7, #18]
 80081dc:	8abb      	ldrh	r3, [r7, #20]
 80081de:	4413      	add	r3, r2
 80081e0:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80081e2:	89bb      	ldrh	r3, [r7, #12]
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80081e8:	89bb      	ldrh	r3, [r7, #12]
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	4413      	add	r3, r2
 80081f8:	7cdb      	ldrb	r3, [r3, #19]
 80081fa:	461a      	mov	r2, r3
 80081fc:	7dbb      	ldrb	r3, [r7, #22]
 80081fe:	fa42 f303 	asr.w	r3, r2, r3
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	bf14      	ite	ne
 800820a:	2301      	movne	r3, #1
 800820c:	2300      	moveq	r3, #0
 800820e:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8008210:	7a3b      	ldrb	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d015      	beq.n	8008242 <process_FC15+0xa6>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800821c:	897b      	ldrh	r3, [r7, #10]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	4413      	add	r3, r2
 8008222:	8819      	ldrh	r1, [r3, #0]
 8008224:	7a7b      	ldrb	r3, [r7, #9]
 8008226:	2201      	movs	r2, #1
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	b29a      	uxth	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8008234:	897b      	ldrh	r3, [r7, #10]
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	4403      	add	r3, r0
 800823a:	430a      	orrs	r2, r1
 800823c:	b292      	uxth	r2, r2
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	e016      	b.n	8008270 <process_FC15+0xd4>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008248:	897b      	ldrh	r3, [r7, #10]
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	4413      	add	r3, r2
 800824e:	8819      	ldrh	r1, [r3, #0]
 8008250:	7a7b      	ldrb	r3, [r7, #9]
 8008252:	2201      	movs	r2, #1
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	b29b      	uxth	r3, r3
 800825a:	43db      	mvns	r3, r3
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8008264:	897b      	ldrh	r3, [r7, #10]
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4403      	add	r3, r0
 800826a:	400a      	ands	r2, r1
 800826c:	b292      	uxth	r2, r2
 800826e:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8008270:	7dbb      	ldrb	r3, [r7, #22]
 8008272:	3301      	adds	r3, #1
 8008274:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8008276:	7dbb      	ldrb	r3, [r7, #22]
 8008278:	2b07      	cmp	r3, #7
 800827a:	d904      	bls.n	8008286 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	3301      	adds	r3, #1
 8008284:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8008286:	8abb      	ldrh	r3, [r7, #20]
 8008288:	3301      	adds	r3, #1
 800828a:	82bb      	strh	r3, [r7, #20]
 800828c:	8aba      	ldrh	r2, [r7, #20]
 800828e:	8a3b      	ldrh	r3, [r7, #16]
 8008290:	429a      	cmp	r2, r3
 8008292:	d3a2      	bcc.n	80081da <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2206      	movs	r2, #6
 8008298:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80082a2:	3302      	adds	r3, #2
 80082a4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff fd2b 	bl	8007d02 <sendTxBuffer>
    return u8CopyBufferSize;
 80082ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	7d5b      	ldrb	r3, [r3, #21]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	b21a      	sxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7d9b      	ldrb	r3, [r3, #22]
 80082cc:	b21b      	sxth	r3, r3
 80082ce:	4313      	orrs	r3, r2
 80082d0:	b21b      	sxth	r3, r3
 80082d2:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7ddb      	ldrb	r3, [r3, #23]
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	b21a      	sxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7e1b      	ldrb	r3, [r3, #24]
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	4313      	orrs	r3, r2
 80082e4:	b21b      	sxth	r3, r3
 80082e6:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80082ee:	8a7b      	ldrh	r3, [r7, #18]
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2206      	movs	r2, #6
 80082fa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 80082fe:	2300      	movs	r3, #0
 8008300:	82fb      	strh	r3, [r7, #22]
 8008302:	e01d      	b.n	8008340 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8008304:	8afb      	ldrh	r3, [r7, #22]
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	3307      	adds	r3, #7
        temp = word(
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8008310:	8afb      	ldrh	r3, [r7, #22]
 8008312:	3304      	adds	r3, #4
 8008314:	005b      	lsls	r3, r3, #1
        temp = word(
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	7cdb      	ldrb	r3, [r3, #19]
 800831c:	4619      	mov	r1, r3
 800831e:	f7ff fc77 	bl	8007c10 <word>
 8008322:	4603      	mov	r3, r0
 8008324:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800832c:	8ab9      	ldrh	r1, [r7, #20]
 800832e:	8afb      	ldrh	r3, [r7, #22]
 8008330:	440b      	add	r3, r1
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	4413      	add	r3, r2
 8008336:	89fa      	ldrh	r2, [r7, #14]
 8008338:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800833a:	8afb      	ldrh	r3, [r7, #22]
 800833c:	3301      	adds	r3, #1
 800833e:	82fb      	strh	r3, [r7, #22]
 8008340:	8afa      	ldrh	r2, [r7, #22]
 8008342:	8a7b      	ldrh	r3, [r7, #18]
 8008344:	429a      	cmp	r2, r3
 8008346:	d3dd      	bcc.n	8008304 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800834e:	3302      	adds	r3, #2
 8008350:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff fcd5 	bl	8007d02 <sendTxBuffer>

    return u8CopyBufferSize;
 8008358:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800836c:	2300      	movs	r3, #0
 800836e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e019      	b.n	80083aa <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8008376:	4a17      	ldr	r2, [pc, #92]	; (80083d4 <HAL_UART_TxCpltCallback+0x70>)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d10e      	bne.n	80083a4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8008386:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <HAL_UART_TxCpltCallback+0x70>)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800838e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8008392:	f107 0308 	add.w	r3, r7, #8
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	2300      	movs	r3, #0
 800839a:	2200      	movs	r2, #0
 800839c:	2100      	movs	r1, #0
 800839e:	f002 fbf9 	bl	800ab94 <xTaskGenericNotifyFromISR>
	   		break;
 80083a2:	e008      	b.n	80083b6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <HAL_UART_TxCpltCallback+0x74>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4293      	cmp	r3, r2
 80083b4:	dbdf      	blt.n	8008376 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_UART_TxCpltCallback+0x68>
 80083bc:	4b07      	ldr	r3, [pc, #28]	; (80083dc <HAL_UART_TxCpltCallback+0x78>)
 80083be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000674 	.word	0x20000674
 80083d8:	2000067c 	.word	0x2000067c
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80083e0:	b590      	push	{r4, r7, lr}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e042      	b.n	8008478 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80083f2:	4a2d      	ldr	r2, [pc, #180]	; (80084a8 <HAL_UART_RxCpltCallback+0xc8>)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d137      	bne.n	8008472 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8008402:	4a29      	ldr	r2, [pc, #164]	; (80084a8 <HAL_UART_RxCpltCallback+0xc8>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800840e:	2b01      	cmp	r3, #1
 8008410:	d139      	bne.n	8008486 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8008412:	4a25      	ldr	r2, [pc, #148]	; (80084a8 <HAL_UART_RxCpltCallback+0xc8>)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800841a:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800841e:	4922      	ldr	r1, [pc, #136]	; (80084a8 <HAL_UART_RxCpltCallback+0xc8>)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008426:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f7fe fbe5 	bl	8006bfc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8008432:	4a1d      	ldr	r2, [pc, #116]	; (80084a8 <HAL_UART_RxCpltCallback+0xc8>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800843a:	6858      	ldr	r0, [r3, #4]
 800843c:	4a1a      	ldr	r2, [pc, #104]	; (80084a8 <HAL_UART_RxCpltCallback+0xc8>)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008444:	33a6      	adds	r3, #166	; 0xa6
 8008446:	2201      	movs	r2, #1
 8008448:	4619      	mov	r1, r3
 800844a:	f7fb fd35 	bl	8003eb8 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800844e:	4a16      	ldr	r2, [pc, #88]	; (80084a8 <HAL_UART_RxCpltCallback+0xc8>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008456:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800845a:	f001 fdd9 	bl	800a010 <xTaskGetTickCountFromISR>
 800845e:	4602      	mov	r2, r0
 8008460:	f107 0308 	add.w	r3, r7, #8
 8008464:	2100      	movs	r1, #0
 8008466:	9100      	str	r1, [sp, #0]
 8008468:	2107      	movs	r1, #7
 800846a:	4620      	mov	r0, r4
 800846c:	f002 fd66 	bl	800af3c <xTimerGenericCommand>
    		}
    		break;
 8008470:	e009      	b.n	8008486 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	4b0c      	ldr	r3, [pc, #48]	; (80084ac <HAL_UART_RxCpltCallback+0xcc>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	461a      	mov	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4293      	cmp	r3, r2
 8008482:	dbb6      	blt.n	80083f2 <HAL_UART_RxCpltCallback+0x12>
 8008484:	e000      	b.n	8008488 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8008486:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <HAL_UART_RxCpltCallback+0xbe>
 800848e:	4b08      	ldr	r3, [pc, #32]	; (80084b0 <HAL_UART_RxCpltCallback+0xd0>)
 8008490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd90      	pop	{r4, r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000674 	.word	0x20000674
 80084ac:	2000067c 	.word	0x2000067c
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	e041      	b.n	8008546 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 80084c2:	4a27      	ldr	r2, [pc, #156]	; (8008560 <HAL_UART_ErrorCallback+0xac>)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d136      	bne.n	8008540 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 80084d2:	4a23      	ldr	r2, [pc, #140]	; (8008560 <HAL_UART_ErrorCallback+0xac>)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084da:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d138      	bne.n	8008554 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80084e2:	e007      	b.n	80084f4 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 80084e4:	4a1e      	ldr	r2, [pc, #120]	; (8008560 <HAL_UART_ErrorCallback+0xac>)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fb fdae 	bl	8004050 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80084f4:	4a1a      	ldr	r2, [pc, #104]	; (8008560 <HAL_UART_ErrorCallback+0xac>)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084fc:	6858      	ldr	r0, [r3, #4]
 80084fe:	4a18      	ldr	r2, [pc, #96]	; (8008560 <HAL_UART_ErrorCallback+0xac>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008506:	33bc      	adds	r3, #188	; 0xbc
 8008508:	2280      	movs	r2, #128	; 0x80
 800850a:	4619      	mov	r1, r3
 800850c:	f7fe fa97 	bl	8006a3e <HAL_UARTEx_ReceiveToIdle_DMA>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e6      	bne.n	80084e4 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8008516:	4a12      	ldr	r2, [pc, #72]	; (8008560 <HAL_UART_ErrorCallback+0xac>)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	490d      	ldr	r1, [pc, #52]	; (8008560 <HAL_UART_ErrorCallback+0xac>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0204 	bic.w	r2, r2, #4
 800853c:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800853e:	e009      	b.n	8008554 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	4b07      	ldr	r3, [pc, #28]	; (8008564 <HAL_UART_ErrorCallback+0xb0>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4293      	cmp	r3, r2
 8008550:	dbb7      	blt.n	80084c2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 8008552:	e000      	b.n	8008556 <HAL_UART_ErrorCallback+0xa2>
    		break;
 8008554:	bf00      	nop
}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000674 	.word	0x20000674
 8008564:	2000067c 	.word	0x2000067c

08008568 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af02      	add	r7, sp, #8
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008574:	2300      	movs	r3, #0
 8008576:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 8008578:	2300      	movs	r3, #0
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	e061      	b.n	8008642 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800857e:	4a3c      	ldr	r2, [pc, #240]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	429a      	cmp	r2, r3
 800858c:	d156      	bne.n	800863c <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800858e:	4a38      	ldr	r2, [pc, #224]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008596:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800859a:	2b04      	cmp	r3, #4
 800859c:	d158      	bne.n	8008650 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800859e:	887b      	ldrh	r3, [r7, #2]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d055      	beq.n	8008650 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 80085a4:	4a32      	ldr	r2, [pc, #200]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ac:	887a      	ldrh	r2, [r7, #2]
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 80085b4:	4a2e      	ldr	r2, [pc, #184]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80085c2:	e007      	b.n	80085d4 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 80085c4:	4a2a      	ldr	r2, [pc, #168]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fb fd3e 	bl	8004050 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 80085d4:	4a26      	ldr	r2, [pc, #152]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085dc:	6858      	ldr	r0, [r3, #4]
 80085de:	4a24      	ldr	r2, [pc, #144]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e6:	33bc      	adds	r3, #188	; 0xbc
 80085e8:	2280      	movs	r2, #128	; 0x80
 80085ea:	4619      	mov	r1, r3
 80085ec:	f7fe fa27 	bl	8006a3e <HAL_UARTEx_ReceiveToIdle_DMA>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e6      	bne.n	80085c4 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80085f6:	4a1e      	ldr	r2, [pc, #120]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	4919      	ldr	r1, [pc, #100]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0204 	bic.w	r2, r2, #4
 800861c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800861e:	4a14      	ldr	r2, [pc, #80]	; (8008670 <HAL_UARTEx_RxEventCallback+0x108>)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008626:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	2300      	movs	r3, #0
 8008632:	2203      	movs	r2, #3
 8008634:	2100      	movs	r1, #0
 8008636:	f002 faad 	bl	800ab94 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800863a:	e009      	b.n	8008650 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3301      	adds	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <HAL_UARTEx_RxEventCallback+0x10c>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4293      	cmp	r3, r2
 800864c:	db97      	blt.n	800857e <HAL_UARTEx_RxEventCallback+0x16>
 800864e:	e000      	b.n	8008652 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 8008650:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <HAL_UARTEx_RxEventCallback+0x100>
 8008658:	4b07      	ldr	r3, [pc, #28]	; (8008678 <HAL_UARTEx_RxEventCallback+0x110>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
}
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20000674 	.word	0x20000674
 8008674:	2000067c 	.word	0x2000067c
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <__NVIC_SetPriority>:
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	6039      	str	r1, [r7, #0]
 8008686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800868c:	2b00      	cmp	r3, #0
 800868e:	db0a      	blt.n	80086a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	b2da      	uxtb	r2, r3
 8008694:	490c      	ldr	r1, [pc, #48]	; (80086c8 <__NVIC_SetPriority+0x4c>)
 8008696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800869a:	0112      	lsls	r2, r2, #4
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	440b      	add	r3, r1
 80086a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086a4:	e00a      	b.n	80086bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	4908      	ldr	r1, [pc, #32]	; (80086cc <__NVIC_SetPriority+0x50>)
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	3b04      	subs	r3, #4
 80086b4:	0112      	lsls	r2, r2, #4
 80086b6:	b2d2      	uxtb	r2, r2
 80086b8:	440b      	add	r3, r1
 80086ba:	761a      	strb	r2, [r3, #24]
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	e000e100 	.word	0xe000e100
 80086cc:	e000ed00 	.word	0xe000ed00

080086d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <SysTick_Handler+0x1c>)
 80086d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80086d8:	f001 ffd2 	bl	800a680 <xTaskGetSchedulerState>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d001      	beq.n	80086e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80086e2:	f003 f8f1 	bl	800b8c8 <xPortSysTickHandler>
  }
}
 80086e6:	bf00      	nop
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	e000e010 	.word	0xe000e010

080086f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80086f4:	2100      	movs	r1, #0
 80086f6:	f06f 0004 	mvn.w	r0, #4
 80086fa:	f7ff ffbf 	bl	800867c <__NVIC_SetPriority>
#endif
}
 80086fe:	bf00      	nop
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800870a:	f3ef 8305 	mrs	r3, IPSR
 800870e:	603b      	str	r3, [r7, #0]
  return(result);
 8008710:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008716:	f06f 0305 	mvn.w	r3, #5
 800871a:	607b      	str	r3, [r7, #4]
 800871c:	e00c      	b.n	8008738 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800871e:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <osKernelInitialize+0x44>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d105      	bne.n	8008732 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008726:	4b08      	ldr	r3, [pc, #32]	; (8008748 <osKernelInitialize+0x44>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800872c:	2300      	movs	r3, #0
 800872e:	607b      	str	r3, [r7, #4]
 8008730:	e002      	b.n	8008738 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008732:	f04f 33ff 	mov.w	r3, #4294967295
 8008736:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008738:	687b      	ldr	r3, [r7, #4]
}
 800873a:	4618      	mov	r0, r3
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	20000680 	.word	0x20000680

0800874c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008752:	f3ef 8305 	mrs	r3, IPSR
 8008756:	603b      	str	r3, [r7, #0]
  return(result);
 8008758:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <osKernelStart+0x1a>
    stat = osErrorISR;
 800875e:	f06f 0305 	mvn.w	r3, #5
 8008762:	607b      	str	r3, [r7, #4]
 8008764:	e010      	b.n	8008788 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008766:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <osKernelStart+0x48>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d109      	bne.n	8008782 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800876e:	f7ff ffbf 	bl	80086f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <osKernelStart+0x48>)
 8008774:	2202      	movs	r2, #2
 8008776:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008778:	f001 fb28 	bl	8009dcc <vTaskStartScheduler>
      stat = osOK;
 800877c:	2300      	movs	r3, #0
 800877e:	607b      	str	r3, [r7, #4]
 8008780:	e002      	b.n	8008788 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008782:	f04f 33ff 	mov.w	r3, #4294967295
 8008786:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008788:	687b      	ldr	r3, [r7, #4]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000680 	.word	0x20000680

08008798 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008798:	b580      	push	{r7, lr}
 800879a:	b08e      	sub	sp, #56	; 0x38
 800879c:	af04      	add	r7, sp, #16
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087a8:	f3ef 8305 	mrs	r3, IPSR
 80087ac:	617b      	str	r3, [r7, #20]
  return(result);
 80087ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d17e      	bne.n	80088b2 <osThreadNew+0x11a>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d07b      	beq.n	80088b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80087ba:	2380      	movs	r3, #128	; 0x80
 80087bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80087be:	2318      	movs	r3, #24
 80087c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d045      	beq.n	800885e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <osThreadNew+0x48>
        name = attr->name;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <osThreadNew+0x6e>
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b38      	cmp	r3, #56	; 0x38
 80087f8:	d805      	bhi.n	8008806 <osThreadNew+0x6e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <osThreadNew+0x72>
        return (NULL);
 8008806:	2300      	movs	r3, #0
 8008808:	e054      	b.n	80088b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	089b      	lsrs	r3, r3, #2
 8008818:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00e      	beq.n	8008840 <osThreadNew+0xa8>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2b5b      	cmp	r3, #91	; 0x5b
 8008828:	d90a      	bls.n	8008840 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800882e:	2b00      	cmp	r3, #0
 8008830:	d006      	beq.n	8008840 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <osThreadNew+0xa8>
        mem = 1;
 800883a:	2301      	movs	r3, #1
 800883c:	61bb      	str	r3, [r7, #24]
 800883e:	e010      	b.n	8008862 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10c      	bne.n	8008862 <osThreadNew+0xca>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d108      	bne.n	8008862 <osThreadNew+0xca>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <osThreadNew+0xca>
          mem = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	61bb      	str	r3, [r7, #24]
 800885c:	e001      	b.n	8008862 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d110      	bne.n	800888a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008870:	9202      	str	r2, [sp, #8]
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6a3a      	ldr	r2, [r7, #32]
 800887c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 f902 	bl	8009a88 <xTaskCreateStatic>
 8008884:	4603      	mov	r3, r0
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	e013      	b.n	80088b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d110      	bne.n	80088b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	b29a      	uxth	r2, r3
 8008894:	f107 0310 	add.w	r3, r7, #16
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f001 f94d 	bl	8009b42 <xTaskCreate>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d001      	beq.n	80088b2 <osThreadNew+0x11a>
            hTask = NULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088b2:	693b      	ldr	r3, [r7, #16]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3728      	adds	r7, #40	; 0x28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	; 0x28
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088cc:	f3ef 8305 	mrs	r3, IPSR
 80088d0:	613b      	str	r3, [r7, #16]
  return(result);
 80088d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d175      	bne.n	80089c4 <osSemaphoreNew+0x108>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d072      	beq.n	80089c4 <osSemaphoreNew+0x108>
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d86e      	bhi.n	80089c4 <osSemaphoreNew+0x108>
    mem = -1;
 80088e6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d015      	beq.n	800891e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d006      	beq.n	8008908 <osSemaphoreNew+0x4c>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	2b4f      	cmp	r3, #79	; 0x4f
 8008900:	d902      	bls.n	8008908 <osSemaphoreNew+0x4c>
        mem = 1;
 8008902:	2301      	movs	r3, #1
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	e00c      	b.n	8008922 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d108      	bne.n	8008922 <osSemaphoreNew+0x66>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <osSemaphoreNew+0x66>
          mem = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	e001      	b.n	8008922 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d04c      	beq.n	80089c4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d128      	bne.n	8008982 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d10a      	bne.n	800894c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2203      	movs	r2, #3
 800893c:	9200      	str	r2, [sp, #0]
 800893e:	2200      	movs	r2, #0
 8008940:	2100      	movs	r1, #0
 8008942:	2001      	movs	r0, #1
 8008944:	f000 fa06 	bl	8008d54 <xQueueGenericCreateStatic>
 8008948:	61f8      	str	r0, [r7, #28]
 800894a:	e005      	b.n	8008958 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800894c:	2203      	movs	r2, #3
 800894e:	2100      	movs	r1, #0
 8008950:	2001      	movs	r0, #1
 8008952:	f000 fa77 	bl	8008e44 <xQueueGenericCreate>
 8008956:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d022      	beq.n	80089a4 <osSemaphoreNew+0xe8>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01f      	beq.n	80089a4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008964:	2300      	movs	r3, #0
 8008966:	2200      	movs	r2, #0
 8008968:	2100      	movs	r1, #0
 800896a:	69f8      	ldr	r0, [r7, #28]
 800896c:	f000 fb32 	bl	8008fd4 <xQueueGenericSend>
 8008970:	4603      	mov	r3, r0
 8008972:	2b01      	cmp	r3, #1
 8008974:	d016      	beq.n	80089a4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008976:	69f8      	ldr	r0, [r7, #28]
 8008978:	f000 feb2 	bl	80096e0 <vQueueDelete>
            hSemaphore = NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	e010      	b.n	80089a4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d108      	bne.n	800899a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	461a      	mov	r2, r3
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 fab4 	bl	8008efe <xQueueCreateCountingSemaphoreStatic>
 8008996:	61f8      	str	r0, [r7, #28]
 8008998:	e004      	b.n	80089a4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 fae5 	bl	8008f6c <xQueueCreateCountingSemaphore>
 80089a2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00c      	beq.n	80089c4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	e001      	b.n	80089bc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80089bc:	6979      	ldr	r1, [r7, #20]
 80089be:	69f8      	ldr	r0, [r7, #28]
 80089c0:	f000 ffda 	bl	8009978 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80089c4:	69fb      	ldr	r3, [r7, #28]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3720      	adds	r7, #32
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b08a      	sub	sp, #40	; 0x28
 80089d2:	af02      	add	r7, sp, #8
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089de:	f3ef 8305 	mrs	r3, IPSR
 80089e2:	613b      	str	r3, [r7, #16]
  return(result);
 80089e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d15f      	bne.n	8008aaa <osMessageQueueNew+0xdc>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d05c      	beq.n	8008aaa <osMessageQueueNew+0xdc>
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d059      	beq.n	8008aaa <osMessageQueueNew+0xdc>
    mem = -1;
 80089f6:	f04f 33ff 	mov.w	r3, #4294967295
 80089fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d029      	beq.n	8008a56 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d012      	beq.n	8008a30 <osMessageQueueNew+0x62>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	2b4f      	cmp	r3, #79	; 0x4f
 8008a10:	d90e      	bls.n	8008a30 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695a      	ldr	r2, [r3, #20]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	fb01 f303 	mul.w	r3, r1, r3
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d302      	bcc.n	8008a30 <osMessageQueueNew+0x62>
        mem = 1;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	61bb      	str	r3, [r7, #24]
 8008a2e:	e014      	b.n	8008a5a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d110      	bne.n	8008a5a <osMessageQueueNew+0x8c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10c      	bne.n	8008a5a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d108      	bne.n	8008a5a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d104      	bne.n	8008a5a <osMessageQueueNew+0x8c>
          mem = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	61bb      	str	r3, [r7, #24]
 8008a54:	e001      	b.n	8008a5a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d10b      	bne.n	8008a78 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691a      	ldr	r2, [r3, #16]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	9100      	str	r1, [sp, #0]
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 f970 	bl	8008d54 <xQueueGenericCreateStatic>
 8008a74:	61f8      	str	r0, [r7, #28]
 8008a76:	e008      	b.n	8008a8a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008a7e:	2200      	movs	r2, #0
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f9de 	bl	8008e44 <xQueueGenericCreate>
 8008a88:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00c      	beq.n	8008aaa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <osMessageQueueNew+0xd0>
        name = attr->name;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e001      	b.n	8008aa2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008aa2:	6979      	ldr	r1, [r7, #20]
 8008aa4:	69f8      	ldr	r0, [r7, #28]
 8008aa6:	f000 ff67 	bl	8009978 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008aaa:	69fb      	ldr	r3, [r7, #28]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3720      	adds	r7, #32
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4a07      	ldr	r2, [pc, #28]	; (8008ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	4a06      	ldr	r2, [pc, #24]	; (8008ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8008aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2280      	movs	r2, #128	; 0x80
 8008ad0:	601a      	str	r2, [r3, #0]
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000684 	.word	0x20000684
 8008ae4:	200006e0 	.word	0x200006e0

08008ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4a07      	ldr	r2, [pc, #28]	; (8008b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8008af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a06      	ldr	r2, [pc, #24]	; (8008b18 <vApplicationGetTimerTaskMemory+0x30>)
 8008afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b06:	601a      	str	r2, [r3, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	200008e0 	.word	0x200008e0
 8008b18:	2000093c 	.word	0x2000093c

08008b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f103 0208 	add.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f103 0208 	add.w	r2, r3, #8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f103 0208 	add.w	r2, r3, #8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd4:	d103      	bne.n	8008bde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	e00c      	b.n	8008bf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3308      	adds	r3, #8
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e002      	b.n	8008bec <vListInsert+0x2e>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d2f6      	bcs.n	8008be6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	601a      	str	r2, [r3, #0]
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6892      	ldr	r2, [r2, #8]
 8008c46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	6852      	ldr	r2, [r2, #4]
 8008c50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d103      	bne.n	8008c64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	1e5a      	subs	r2, r3, #1
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008caa:	bf00      	nop
 8008cac:	e7fe      	b.n	8008cac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cae:	f002 fd79 	bl	800b7a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
 8008cc2:	441a      	add	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	68f9      	ldr	r1, [r7, #12]
 8008ce2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ce4:	fb01 f303 	mul.w	r3, r1, r3
 8008ce8:	441a      	add	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	22ff      	movs	r2, #255	; 0xff
 8008cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	22ff      	movs	r2, #255	; 0xff
 8008cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d114      	bne.n	8008d2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01a      	beq.n	8008d42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3310      	adds	r3, #16
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 faf7 	bl	800a304 <xTaskRemoveFromEventList>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d012      	beq.n	8008d42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <xQueueGenericReset+0xcc>)
 8008d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	e009      	b.n	8008d42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3310      	adds	r3, #16
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fef2 	bl	8008b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3324      	adds	r3, #36	; 0x24
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff feed 	bl	8008b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d42:	f002 fd5f 	bl	800b804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d46:	2301      	movs	r3, #1
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08e      	sub	sp, #56	; 0x38
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10a      	bne.n	8008d7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d7a:	bf00      	nop
 8008d7c:	e7fe      	b.n	8008d7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <xQueueGenericCreateStatic+0x52>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <xQueueGenericCreateStatic+0x56>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <xQueueGenericCreateStatic+0x58>
 8008daa:	2300      	movs	r3, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	623b      	str	r3, [r7, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <xQueueGenericCreateStatic+0x7e>
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <xQueueGenericCreateStatic+0x82>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <xQueueGenericCreateStatic+0x84>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	61fb      	str	r3, [r7, #28]
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008df2:	2350      	movs	r3, #80	; 0x50
 8008df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b50      	cmp	r3, #80	; 0x50
 8008dfa:	d00a      	beq.n	8008e12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	61bb      	str	r3, [r7, #24]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00d      	beq.n	8008e3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f83f 	bl	8008eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3730      	adds	r7, #48	; 0x30
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	; 0x28
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	613b      	str	r3, [r7, #16]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	fb02 f303 	mul.w	r3, r2, r3
 8008e76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	3350      	adds	r3, #80	; 0x50
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f002 fdb3 	bl	800b9e8 <pvPortMalloc>
 8008e82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d011      	beq.n	8008eae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	3350      	adds	r3, #80	; 0x50
 8008e92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e9c:	79fa      	ldrb	r2, [r7, #7]
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	68b9      	ldr	r1, [r7, #8]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 f805 	bl	8008eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008eae:	69bb      	ldr	r3, [r7, #24]
	}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3720      	adds	r7, #32
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d103      	bne.n	8008ed4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	e002      	b.n	8008eda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	69b8      	ldr	r0, [r7, #24]
 8008eea:	f7ff fecb 	bl	8008c84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b08a      	sub	sp, #40	; 0x28
 8008f02:	af02      	add	r7, sp, #8
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	61bb      	str	r3, [r7, #24]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d90a      	bls.n	8008f44 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	617b      	str	r3, [r7, #20]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f44:	2302      	movs	r3, #2
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff ff00 	bl	8008d54 <xQueueGenericCreateStatic>
 8008f54:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f62:	69fb      	ldr	r3, [r7, #28]
	}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	613b      	str	r3, [r7, #16]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d90a      	bls.n	8008fb0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	60fb      	str	r3, [r7, #12]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff ff45 	bl	8008e44 <xQueueGenericCreate>
 8008fba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008fc8:	697b      	ldr	r3, [r7, #20]
	}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b08e      	sub	sp, #56	; 0x38
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <xQueueGenericSend+0x32>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d103      	bne.n	8009014 <xQueueGenericSend+0x40>
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <xQueueGenericSend+0x44>
 8009014:	2301      	movs	r3, #1
 8009016:	e000      	b.n	800901a <xQueueGenericSend+0x46>
 8009018:	2300      	movs	r3, #0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <xQueueGenericSend+0x60>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d103      	bne.n	8009042 <xQueueGenericSend+0x6e>
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <xQueueGenericSend+0x72>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <xQueueGenericSend+0x74>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <xQueueGenericSend+0x8e>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	623b      	str	r3, [r7, #32]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009062:	f001 fb0d 	bl	800a680 <xTaskGetSchedulerState>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <xQueueGenericSend+0x9e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <xQueueGenericSend+0xa2>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <xQueueGenericSend+0xa4>
 8009076:	2300      	movs	r3, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <xQueueGenericSend+0xbe>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	61fb      	str	r3, [r7, #28]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009092:	f002 fb87 	bl	800b7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909e:	429a      	cmp	r2, r3
 80090a0:	d302      	bcc.n	80090a8 <xQueueGenericSend+0xd4>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d129      	bne.n	80090fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ae:	f000 fb52 	bl	8009756 <prvCopyDataToQueue>
 80090b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d010      	beq.n	80090de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	3324      	adds	r3, #36	; 0x24
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 f91f 	bl	800a304 <xTaskRemoveFromEventList>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d013      	beq.n	80090f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090cc:	4b3f      	ldr	r3, [pc, #252]	; (80091cc <xQueueGenericSend+0x1f8>)
 80090ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	e00a      	b.n	80090f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d007      	beq.n	80090f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090e4:	4b39      	ldr	r3, [pc, #228]	; (80091cc <xQueueGenericSend+0x1f8>)
 80090e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090f4:	f002 fb86 	bl	800b804 <vPortExitCritical>
				return pdPASS;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e063      	b.n	80091c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009102:	f002 fb7f 	bl	800b804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009106:	2300      	movs	r3, #0
 8009108:	e05c      	b.n	80091c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800910a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	4618      	mov	r0, r3
 8009116:	f001 f959 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800911a:	2301      	movs	r3, #1
 800911c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800911e:	f002 fb71 	bl	800b804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009122:	f000 feb9 	bl	8009e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009126:	f002 fb3d 	bl	800b7a4 <vPortEnterCritical>
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009130:	b25b      	sxtb	r3, r3
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d103      	bne.n	8009140 <xQueueGenericSend+0x16c>
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009146:	b25b      	sxtb	r3, r3
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914c:	d103      	bne.n	8009156 <xQueueGenericSend+0x182>
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009156:	f002 fb55 	bl	800b804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800915a:	1d3a      	adds	r2, r7, #4
 800915c:	f107 0314 	add.w	r3, r7, #20
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f001 f948 	bl	800a3f8 <xTaskCheckForTimeOut>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d124      	bne.n	80091b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800916e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009170:	f000 fbe9 	bl	8009946 <prvIsQueueFull>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d018      	beq.n	80091ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	3310      	adds	r3, #16
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f001 f86e 	bl	800a264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800918a:	f000 fb74 	bl	8009876 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800918e:	f000 fe91 	bl	8009eb4 <xTaskResumeAll>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	f47f af7c 	bne.w	8009092 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800919a:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <xQueueGenericSend+0x1f8>)
 800919c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	e772      	b.n	8009092 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ae:	f000 fb62 	bl	8009876 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091b2:	f000 fe7f 	bl	8009eb4 <xTaskResumeAll>
 80091b6:	e76c      	b.n	8009092 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ba:	f000 fb5c 	bl	8009876 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091be:	f000 fe79 	bl	8009eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3738      	adds	r7, #56	; 0x38
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	e000ed04 	.word	0xe000ed04

080091d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b090      	sub	sp, #64	; 0x40
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d103      	bne.n	800920c <xQueueGenericSendFromISR+0x3c>
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <xQueueGenericSendFromISR+0x40>
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <xQueueGenericSendFromISR+0x42>
 8009210:	2300      	movs	r3, #0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10a      	bne.n	800922c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009228:	bf00      	nop
 800922a:	e7fe      	b.n	800922a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d103      	bne.n	800923a <xQueueGenericSendFromISR+0x6a>
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009236:	2b01      	cmp	r3, #1
 8009238:	d101      	bne.n	800923e <xQueueGenericSendFromISR+0x6e>
 800923a:	2301      	movs	r3, #1
 800923c:	e000      	b.n	8009240 <xQueueGenericSendFromISR+0x70>
 800923e:	2300      	movs	r3, #0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10a      	bne.n	800925a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	623b      	str	r3, [r7, #32]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800925a:	f002 fb85 	bl	800b968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800925e:	f3ef 8211 	mrs	r2, BASEPRI
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	61fa      	str	r2, [r7, #28]
 8009274:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009276:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009278:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800927a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	429a      	cmp	r2, r3
 8009284:	d302      	bcc.n	800928c <xQueueGenericSendFromISR+0xbc>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d12f      	bne.n	80092ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092a2:	f000 fa58 	bl	8009756 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ae:	d112      	bne.n	80092d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d016      	beq.n	80092e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	3324      	adds	r3, #36	; 0x24
 80092bc:	4618      	mov	r0, r3
 80092be:	f001 f821 	bl	800a304 <xTaskRemoveFromEventList>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00e      	beq.n	80092e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e007      	b.n	80092e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092da:	3301      	adds	r3, #1
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	b25a      	sxtb	r2, r3
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092e6:	2301      	movs	r3, #1
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092ea:	e001      	b.n	80092f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092ec:	2300      	movs	r3, #0
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3740      	adds	r7, #64	; 0x40
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b08c      	sub	sp, #48	; 0x30
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009314:	2300      	movs	r3, #0
 8009316:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10a      	bne.n	8009338 <xQueueReceive+0x30>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	623b      	str	r3, [r7, #32]
}
 8009334:	bf00      	nop
 8009336:	e7fe      	b.n	8009336 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d103      	bne.n	8009346 <xQueueReceive+0x3e>
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <xQueueReceive+0x42>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <xQueueReceive+0x44>
 800934a:	2300      	movs	r3, #0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <xQueueReceive+0x5e>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	61fb      	str	r3, [r7, #28]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009366:	f001 f98b 	bl	800a680 <xTaskGetSchedulerState>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <xQueueReceive+0x6e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <xQueueReceive+0x72>
 8009376:	2301      	movs	r3, #1
 8009378:	e000      	b.n	800937c <xQueueReceive+0x74>
 800937a:	2300      	movs	r3, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10a      	bne.n	8009396 <xQueueReceive+0x8e>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	61bb      	str	r3, [r7, #24]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009396:	f002 fa05 	bl	800b7a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01f      	beq.n	80093e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093aa:	f000 fa3e 	bl	800982a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	1e5a      	subs	r2, r3, #1
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00f      	beq.n	80093de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c0:	3310      	adds	r3, #16
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 ff9e 	bl	800a304 <xTaskRemoveFromEventList>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d007      	beq.n	80093de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093ce:	4b3d      	ldr	r3, [pc, #244]	; (80094c4 <xQueueReceive+0x1bc>)
 80093d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093de:	f002 fa11 	bl	800b804 <vPortExitCritical>
				return pdPASS;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e069      	b.n	80094ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d103      	bne.n	80093f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093ec:	f002 fa0a 	bl	800b804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093f0:	2300      	movs	r3, #0
 80093f2:	e062      	b.n	80094ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d106      	bne.n	8009408 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093fa:	f107 0310 	add.w	r3, r7, #16
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 ffe4 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009404:	2301      	movs	r3, #1
 8009406:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009408:	f002 f9fc 	bl	800b804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800940c:	f000 fd44 	bl	8009e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009410:	f002 f9c8 	bl	800b7a4 <vPortEnterCritical>
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800941a:	b25b      	sxtb	r3, r3
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d103      	bne.n	800942a <xQueueReceive+0x122>
 8009422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009430:	b25b      	sxtb	r3, r3
 8009432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009436:	d103      	bne.n	8009440 <xQueueReceive+0x138>
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009440:	f002 f9e0 	bl	800b804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009444:	1d3a      	adds	r2, r7, #4
 8009446:	f107 0310 	add.w	r3, r7, #16
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f000 ffd3 	bl	800a3f8 <xTaskCheckForTimeOut>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d123      	bne.n	80094a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945a:	f000 fa5e 	bl	800991a <prvIsQueueEmpty>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d017      	beq.n	8009494 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	3324      	adds	r3, #36	; 0x24
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	4611      	mov	r1, r2
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fef9 	bl	800a264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009474:	f000 f9ff 	bl	8009876 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009478:	f000 fd1c 	bl	8009eb4 <xTaskResumeAll>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d189      	bne.n	8009396 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009482:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <xQueueReceive+0x1bc>)
 8009484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	e780      	b.n	8009396 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009496:	f000 f9ee 	bl	8009876 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800949a:	f000 fd0b 	bl	8009eb4 <xTaskResumeAll>
 800949e:	e77a      	b.n	8009396 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a2:	f000 f9e8 	bl	8009876 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094a6:	f000 fd05 	bl	8009eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ac:	f000 fa35 	bl	800991a <prvIsQueueEmpty>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f43f af6f 	beq.w	8009396 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3730      	adds	r7, #48	; 0x30
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	e000ed04 	.word	0xe000ed04

080094c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08e      	sub	sp, #56	; 0x38
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80094da:	2300      	movs	r3, #0
 80094dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	623b      	str	r3, [r7, #32]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80094fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	61fb      	str	r3, [r7, #28]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009518:	f001 f8b2 	bl	800a680 <xTaskGetSchedulerState>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d102      	bne.n	8009528 <xQueueSemaphoreTake+0x60>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <xQueueSemaphoreTake+0x64>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <xQueueSemaphoreTake+0x66>
 800952c:	2300      	movs	r3, #0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10a      	bne.n	8009548 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	61bb      	str	r3, [r7, #24]
}
 8009544:	bf00      	nop
 8009546:	e7fe      	b.n	8009546 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009548:	f002 f92c 	bl	800b7a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	2b00      	cmp	r3, #0
 8009556:	d024      	beq.n	80095a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	1e5a      	subs	r2, r3, #1
 800955c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009568:	f001 fa00 	bl	800a96c <pvTaskIncrementMutexHeldCount>
 800956c:	4602      	mov	r2, r0
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00f      	beq.n	800959a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	3310      	adds	r3, #16
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fec0 	bl	800a304 <xTaskRemoveFromEventList>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d007      	beq.n	800959a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800958a:	4b54      	ldr	r3, [pc, #336]	; (80096dc <xQueueSemaphoreTake+0x214>)
 800958c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800959a:	f002 f933 	bl	800b804 <vPortExitCritical>
				return pdPASS;
 800959e:	2301      	movs	r3, #1
 80095a0:	e097      	b.n	80096d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d111      	bne.n	80095cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00a      	beq.n	80095c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	617b      	str	r3, [r7, #20]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80095c4:	f002 f91e 	bl	800b804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095c8:	2300      	movs	r3, #0
 80095ca:	e082      	b.n	80096d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095d2:	f107 030c 	add.w	r3, r7, #12
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fef8 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095dc:	2301      	movs	r3, #1
 80095de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095e0:	f002 f910 	bl	800b804 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095e4:	f000 fc58 	bl	8009e98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095e8:	f002 f8dc 	bl	800b7a4 <vPortEnterCritical>
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d103      	bne.n	8009602 <xQueueSemaphoreTake+0x13a>
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009608:	b25b      	sxtb	r3, r3
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960e:	d103      	bne.n	8009618 <xQueueSemaphoreTake+0x150>
 8009610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009618:	f002 f8f4 	bl	800b804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800961c:	463a      	mov	r2, r7
 800961e:	f107 030c 	add.w	r3, r7, #12
 8009622:	4611      	mov	r1, r2
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fee7 	bl	800a3f8 <xTaskCheckForTimeOut>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d132      	bne.n	8009696 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009632:	f000 f972 	bl	800991a <prvIsQueueEmpty>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d026      	beq.n	800968a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d109      	bne.n	8009658 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009644:	f002 f8ae 	bl	800b7a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	4618      	mov	r0, r3
 800964e:	f001 f835 	bl	800a6bc <xTaskPriorityInherit>
 8009652:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009654:	f002 f8d6 	bl	800b804 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	3324      	adds	r3, #36	; 0x24
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	4611      	mov	r1, r2
 8009660:	4618      	mov	r0, r3
 8009662:	f000 fdff 	bl	800a264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009668:	f000 f905 	bl	8009876 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800966c:	f000 fc22 	bl	8009eb4 <xTaskResumeAll>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	f47f af68 	bne.w	8009548 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009678:	4b18      	ldr	r3, [pc, #96]	; (80096dc <xQueueSemaphoreTake+0x214>)
 800967a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	e75e      	b.n	8009548 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800968a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800968c:	f000 f8f3 	bl	8009876 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009690:	f000 fc10 	bl	8009eb4 <xTaskResumeAll>
 8009694:	e758      	b.n	8009548 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009698:	f000 f8ed 	bl	8009876 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800969c:	f000 fc0a 	bl	8009eb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096a2:	f000 f93a 	bl	800991a <prvIsQueueEmpty>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f43f af4d 	beq.w	8009548 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00d      	beq.n	80096d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80096b4:	f002 f876 	bl	800b7a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80096b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ba:	f000 f834 	bl	8009726 <prvGetDisinheritPriorityAfterTimeout>
 80096be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f001 f8ce 	bl	800a868 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80096cc:	f002 f89a 	bl	800b804 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3738      	adds	r7, #56	; 0x38
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	e000ed04 	.word	0xe000ed04

080096e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <vQueueDelete+0x28>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60bb      	str	r3, [r7, #8]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 f95f 	bl	80099cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009714:	2b00      	cmp	r3, #0
 8009716:	d102      	bne.n	800971e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f002 fa31 	bl	800bb80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	2b00      	cmp	r3, #0
 8009734:	d006      	beq.n	8009744 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	e001      	b.n	8009748 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009748:	68fb      	ldr	r3, [r7, #12]
	}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af00      	add	r7, sp, #0
 800975c:	60f8      	str	r0, [r7, #12]
 800975e:	60b9      	str	r1, [r7, #8]
 8009760:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10d      	bne.n	8009790 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d14d      	bne.n	8009818 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	4618      	mov	r0, r3
 8009782:	f001 f803 	bl	800a78c <xTaskPriorityDisinherit>
 8009786:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	609a      	str	r2, [r3, #8]
 800978e:	e043      	b.n	8009818 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d119      	bne.n	80097ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6858      	ldr	r0, [r3, #4]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	461a      	mov	r2, r3
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	f002 fb37 	bl	800be14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	441a      	add	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d32b      	bcc.n	8009818 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	605a      	str	r2, [r3, #4]
 80097c8:	e026      	b.n	8009818 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	68d8      	ldr	r0, [r3, #12]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d2:	461a      	mov	r2, r3
 80097d4:	68b9      	ldr	r1, [r7, #8]
 80097d6:	f002 fb1d 	bl	800be14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e2:	425b      	negs	r3, r3
 80097e4:	441a      	add	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d207      	bcs.n	8009806 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fe:	425b      	negs	r3, r3
 8009800:	441a      	add	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b02      	cmp	r3, #2
 800980a:	d105      	bne.n	8009818 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	3b01      	subs	r3, #1
 8009816:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009820:	697b      	ldr	r3, [r7, #20]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009838:	2b00      	cmp	r3, #0
 800983a:	d018      	beq.n	800986e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68da      	ldr	r2, [r3, #12]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009844:	441a      	add	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	429a      	cmp	r2, r3
 8009854:	d303      	bcc.n	800985e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68d9      	ldr	r1, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	461a      	mov	r2, r3
 8009868:	6838      	ldr	r0, [r7, #0]
 800986a:	f002 fad3 	bl	800be14 <memcpy>
	}
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800987e:	f001 ff91 	bl	800b7a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009888:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800988a:	e011      	b.n	80098b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	2b00      	cmp	r3, #0
 8009892:	d012      	beq.n	80098ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3324      	adds	r3, #36	; 0x24
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fd33 	bl	800a304 <xTaskRemoveFromEventList>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098a4:	f000 fe0a 	bl	800a4bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dce9      	bgt.n	800988c <prvUnlockQueue+0x16>
 80098b8:	e000      	b.n	80098bc <prvUnlockQueue+0x46>
					break;
 80098ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	22ff      	movs	r2, #255	; 0xff
 80098c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098c4:	f001 ff9e 	bl	800b804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098c8:	f001 ff6c 	bl	800b7a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098d4:	e011      	b.n	80098fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d012      	beq.n	8009904 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3310      	adds	r3, #16
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fd0e 	bl	800a304 <xTaskRemoveFromEventList>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098ee:	f000 fde5 	bl	800a4bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	dce9      	bgt.n	80098d6 <prvUnlockQueue+0x60>
 8009902:	e000      	b.n	8009906 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009904:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	22ff      	movs	r2, #255	; 0xff
 800990a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800990e:	f001 ff79 	bl	800b804 <vPortExitCritical>
}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009922:	f001 ff3f 	bl	800b7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	2b00      	cmp	r3, #0
 800992c:	d102      	bne.n	8009934 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800992e:	2301      	movs	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	e001      	b.n	8009938 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009938:	f001 ff64 	bl	800b804 <vPortExitCritical>

	return xReturn;
 800993c:	68fb      	ldr	r3, [r7, #12]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800994e:	f001 ff29 	bl	800b7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800995a:	429a      	cmp	r2, r3
 800995c:	d102      	bne.n	8009964 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800995e:	2301      	movs	r3, #1
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	e001      	b.n	8009968 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009968:	f001 ff4c 	bl	800b804 <vPortExitCritical>

	return xReturn;
 800996c:	68fb      	ldr	r3, [r7, #12]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009982:	2300      	movs	r3, #0
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e014      	b.n	80099b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009988:	4a0f      	ldr	r2, [pc, #60]	; (80099c8 <vQueueAddToRegistry+0x50>)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10b      	bne.n	80099ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009994:	490c      	ldr	r1, [pc, #48]	; (80099c8 <vQueueAddToRegistry+0x50>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800999e:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <vQueueAddToRegistry+0x50>)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	4413      	add	r3, r2
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099aa:	e006      	b.n	80099ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2b07      	cmp	r3, #7
 80099b6:	d9e7      	bls.n	8009988 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	20000d3c 	.word	0x20000d3c

080099cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	e016      	b.n	8009a08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80099da:	4a10      	ldr	r2, [pc, #64]	; (8009a1c <vQueueUnregisterQueue+0x50>)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	00db      	lsls	r3, r3, #3
 80099e0:	4413      	add	r3, r2
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d10b      	bne.n	8009a02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80099ea:	4a0c      	ldr	r2, [pc, #48]	; (8009a1c <vQueueUnregisterQueue+0x50>)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2100      	movs	r1, #0
 80099f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80099f4:	4a09      	ldr	r2, [pc, #36]	; (8009a1c <vQueueUnregisterQueue+0x50>)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	4413      	add	r3, r2
 80099fc:	2200      	movs	r2, #0
 80099fe:	605a      	str	r2, [r3, #4]
				break;
 8009a00:	e006      	b.n	8009a10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3301      	adds	r3, #1
 8009a06:	60fb      	str	r3, [r7, #12]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b07      	cmp	r3, #7
 8009a0c:	d9e5      	bls.n	80099da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	20000d3c 	.word	0x20000d3c

08009a20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a30:	f001 feb8 	bl	800b7a4 <vPortEnterCritical>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a3a:	b25b      	sxtb	r3, r3
 8009a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a40:	d103      	bne.n	8009a4a <vQueueWaitForMessageRestricted+0x2a>
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a50:	b25b      	sxtb	r3, r3
 8009a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a56:	d103      	bne.n	8009a60 <vQueueWaitForMessageRestricted+0x40>
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a60:	f001 fed0 	bl	800b804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	3324      	adds	r3, #36	; 0x24
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fc19 	bl	800a2ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a7a:	6978      	ldr	r0, [r7, #20]
 8009a7c:	f7ff fefb 	bl	8009876 <prvUnlockQueue>
	}
 8009a80:	bf00      	nop
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08e      	sub	sp, #56	; 0x38
 8009a8c:	af04      	add	r7, sp, #16
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	623b      	str	r3, [r7, #32]
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <xTaskCreateStatic+0x46>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	61fb      	str	r3, [r7, #28]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ace:	235c      	movs	r3, #92	; 0x5c
 8009ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ad6:	d00a      	beq.n	8009aee <xTaskCreateStatic+0x66>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	61bb      	str	r3, [r7, #24]
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009aee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d01e      	beq.n	8009b34 <xTaskCreateStatic+0xac>
 8009af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01b      	beq.n	8009b34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	2202      	movs	r2, #2
 8009b0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9303      	str	r3, [sp, #12]
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	f107 0314 	add.w	r3, r7, #20
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	68b9      	ldr	r1, [r7, #8]
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 f850 	bl	8009bcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b2e:	f000 f8dd 	bl	8009cec <prvAddNewTaskToReadyList>
 8009b32:	e001      	b.n	8009b38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b38:	697b      	ldr	r3, [r7, #20]
	}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3728      	adds	r7, #40	; 0x28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b08c      	sub	sp, #48	; 0x30
 8009b46:	af04      	add	r7, sp, #16
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	603b      	str	r3, [r7, #0]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b52:	88fb      	ldrh	r3, [r7, #6]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4618      	mov	r0, r3
 8009b58:	f001 ff46 	bl	800b9e8 <pvPortMalloc>
 8009b5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00e      	beq.n	8009b82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b64:	205c      	movs	r0, #92	; 0x5c
 8009b66:	f001 ff3f 	bl	800b9e8 <pvPortMalloc>
 8009b6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	631a      	str	r2, [r3, #48]	; 0x30
 8009b78:	e005      	b.n	8009b86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b7a:	6978      	ldr	r0, [r7, #20]
 8009b7c:	f002 f800 	bl	800bb80 <vPortFree>
 8009b80:	e001      	b.n	8009b86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d017      	beq.n	8009bbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b94:	88fa      	ldrh	r2, [r7, #6]
 8009b96:	2300      	movs	r3, #0
 8009b98:	9303      	str	r3, [sp, #12]
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	9302      	str	r3, [sp, #8]
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68b9      	ldr	r1, [r7, #8]
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f80e 	bl	8009bcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bb0:	69f8      	ldr	r0, [r7, #28]
 8009bb2:	f000 f89b 	bl	8009cec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e002      	b.n	8009bc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009bc2:	69bb      	ldr	r3, [r7, #24]
	}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	461a      	mov	r2, r3
 8009be4:	21a5      	movs	r1, #165	; 0xa5
 8009be6:	f002 f8e9 	bl	800bdbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	f023 0307 	bic.w	r3, r3, #7
 8009c02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00a      	beq.n	8009c24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	617b      	str	r3, [r7, #20]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d01f      	beq.n	8009c6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	e012      	b.n	8009c56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	4413      	add	r3, r2
 8009c36:	7819      	ldrb	r1, [r3, #0]
 8009c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	3334      	adds	r3, #52	; 0x34
 8009c40:	460a      	mov	r2, r1
 8009c42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	4413      	add	r3, r2
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d006      	beq.n	8009c5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	3301      	adds	r3, #1
 8009c54:	61fb      	str	r3, [r7, #28]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	2b0f      	cmp	r3, #15
 8009c5a:	d9e9      	bls.n	8009c30 <prvInitialiseNewTask+0x64>
 8009c5c:	e000      	b.n	8009c60 <prvInitialiseNewTask+0x94>
			{
				break;
 8009c5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c68:	e003      	b.n	8009c72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	2b37      	cmp	r3, #55	; 0x37
 8009c76:	d901      	bls.n	8009c7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c78:	2337      	movs	r3, #55	; 0x37
 8009c7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	3304      	adds	r3, #4
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe ff62 	bl	8008b5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	3318      	adds	r3, #24
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe ff5d 	bl	8008b5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	2200      	movs	r2, #0
 8009cbc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	69b8      	ldr	r0, [r7, #24]
 8009ccc:	f001 fc3c 	bl	800b548 <pxPortInitialiseStack>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ce2:	bf00      	nop
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009cf4:	f001 fd56 	bl	800b7a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009cf8:	4b2d      	ldr	r3, [pc, #180]	; (8009db0 <prvAddNewTaskToReadyList+0xc4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	4a2c      	ldr	r2, [pc, #176]	; (8009db0 <prvAddNewTaskToReadyList+0xc4>)
 8009d00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d02:	4b2c      	ldr	r3, [pc, #176]	; (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d109      	bne.n	8009d1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d0a:	4a2a      	ldr	r2, [pc, #168]	; (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d10:	4b27      	ldr	r3, [pc, #156]	; (8009db0 <prvAddNewTaskToReadyList+0xc4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d110      	bne.n	8009d3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d18:	f000 fbf4 	bl	800a504 <prvInitialiseTaskLists>
 8009d1c:	e00d      	b.n	8009d3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d1e:	4b26      	ldr	r3, [pc, #152]	; (8009db8 <prvAddNewTaskToReadyList+0xcc>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d109      	bne.n	8009d3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d26:	4b23      	ldr	r3, [pc, #140]	; (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d802      	bhi.n	8009d3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d34:	4a1f      	ldr	r2, [pc, #124]	; (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d3a:	4b20      	ldr	r3, [pc, #128]	; (8009dbc <prvAddNewTaskToReadyList+0xd0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	4a1e      	ldr	r2, [pc, #120]	; (8009dbc <prvAddNewTaskToReadyList+0xd0>)
 8009d42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d44:	4b1d      	ldr	r3, [pc, #116]	; (8009dbc <prvAddNewTaskToReadyList+0xd0>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d50:	4b1b      	ldr	r3, [pc, #108]	; (8009dc0 <prvAddNewTaskToReadyList+0xd4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d903      	bls.n	8009d60 <prvAddNewTaskToReadyList+0x74>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5c:	4a18      	ldr	r2, [pc, #96]	; (8009dc0 <prvAddNewTaskToReadyList+0xd4>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4a15      	ldr	r2, [pc, #84]	; (8009dc4 <prvAddNewTaskToReadyList+0xd8>)
 8009d6e:	441a      	add	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f7fe fefd 	bl	8008b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d7c:	f001 fd42 	bl	800b804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d80:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <prvAddNewTaskToReadyList+0xcc>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00e      	beq.n	8009da6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d88:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <prvAddNewTaskToReadyList+0xc8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d207      	bcs.n	8009da6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d96:	4b0c      	ldr	r3, [pc, #48]	; (8009dc8 <prvAddNewTaskToReadyList+0xdc>)
 8009d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20001250 	.word	0x20001250
 8009db4:	20000d7c 	.word	0x20000d7c
 8009db8:	2000125c 	.word	0x2000125c
 8009dbc:	2000126c 	.word	0x2000126c
 8009dc0:	20001258 	.word	0x20001258
 8009dc4:	20000d80 	.word	0x20000d80
 8009dc8:	e000ed04 	.word	0xe000ed04

08009dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08a      	sub	sp, #40	; 0x28
 8009dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dda:	463a      	mov	r2, r7
 8009ddc:	1d39      	adds	r1, r7, #4
 8009dde:	f107 0308 	add.w	r3, r7, #8
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe fe66 	bl	8008ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	9202      	str	r2, [sp, #8]
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	2300      	movs	r3, #0
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	2300      	movs	r3, #0
 8009df8:	460a      	mov	r2, r1
 8009dfa:	4921      	ldr	r1, [pc, #132]	; (8009e80 <vTaskStartScheduler+0xb4>)
 8009dfc:	4821      	ldr	r0, [pc, #132]	; (8009e84 <vTaskStartScheduler+0xb8>)
 8009dfe:	f7ff fe43 	bl	8009a88 <xTaskCreateStatic>
 8009e02:	4603      	mov	r3, r0
 8009e04:	4a20      	ldr	r2, [pc, #128]	; (8009e88 <vTaskStartScheduler+0xbc>)
 8009e06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e08:	4b1f      	ldr	r3, [pc, #124]	; (8009e88 <vTaskStartScheduler+0xbc>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e10:	2301      	movs	r3, #1
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	e001      	b.n	8009e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d102      	bne.n	8009e26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e20:	f000 ffe8 	bl	800adf4 <xTimerCreateTimerTask>
 8009e24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d116      	bne.n	8009e5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	613b      	str	r3, [r7, #16]
}
 8009e3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e40:	4b12      	ldr	r3, [pc, #72]	; (8009e8c <vTaskStartScheduler+0xc0>)
 8009e42:	f04f 32ff 	mov.w	r2, #4294967295
 8009e46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e48:	4b11      	ldr	r3, [pc, #68]	; (8009e90 <vTaskStartScheduler+0xc4>)
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e4e:	4b11      	ldr	r3, [pc, #68]	; (8009e94 <vTaskStartScheduler+0xc8>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e54:	f001 fc04 	bl	800b660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e58:	e00e      	b.n	8009e78 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d10a      	bne.n	8009e78 <vTaskStartScheduler+0xac>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	60fb      	str	r3, [r7, #12]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <vTaskStartScheduler+0xaa>
}
 8009e78:	bf00      	nop
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	0800bed4 	.word	0x0800bed4
 8009e84:	0800a4d5 	.word	0x0800a4d5
 8009e88:	20001274 	.word	0x20001274
 8009e8c:	20001270 	.word	0x20001270
 8009e90:	2000125c 	.word	0x2000125c
 8009e94:	20001254 	.word	0x20001254

08009e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <vTaskSuspendAll+0x18>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a03      	ldr	r2, [pc, #12]	; (8009eb0 <vTaskSuspendAll+0x18>)
 8009ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ea6:	bf00      	nop
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	20001278 	.word	0x20001278

08009eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ec2:	4b42      	ldr	r3, [pc, #264]	; (8009fcc <xTaskResumeAll+0x118>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	603b      	str	r3, [r7, #0]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ee0:	f001 fc60 	bl	800b7a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ee4:	4b39      	ldr	r3, [pc, #228]	; (8009fcc <xTaskResumeAll+0x118>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	4a38      	ldr	r2, [pc, #224]	; (8009fcc <xTaskResumeAll+0x118>)
 8009eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eee:	4b37      	ldr	r3, [pc, #220]	; (8009fcc <xTaskResumeAll+0x118>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d162      	bne.n	8009fbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ef6:	4b36      	ldr	r3, [pc, #216]	; (8009fd0 <xTaskResumeAll+0x11c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d05e      	beq.n	8009fbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009efe:	e02f      	b.n	8009f60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f00:	4b34      	ldr	r3, [pc, #208]	; (8009fd4 <xTaskResumeAll+0x120>)
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3318      	adds	r3, #24
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe fe8f 	bl	8008c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3304      	adds	r3, #4
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe fe8a 	bl	8008c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f20:	4b2d      	ldr	r3, [pc, #180]	; (8009fd8 <xTaskResumeAll+0x124>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d903      	bls.n	8009f30 <xTaskResumeAll+0x7c>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	4a2a      	ldr	r2, [pc, #168]	; (8009fd8 <xTaskResumeAll+0x124>)
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4a27      	ldr	r2, [pc, #156]	; (8009fdc <xTaskResumeAll+0x128>)
 8009f3e:	441a      	add	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f7fe fe15 	bl	8008b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	4b23      	ldr	r3, [pc, #140]	; (8009fe0 <xTaskResumeAll+0x12c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d302      	bcc.n	8009f60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f5a:	4b22      	ldr	r3, [pc, #136]	; (8009fe4 <xTaskResumeAll+0x130>)
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f60:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <xTaskResumeAll+0x120>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1cb      	bne.n	8009f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f6e:	f000 fb67 	bl	800a640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <xTaskResumeAll+0x134>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d010      	beq.n	8009fa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f7e:	f000 f859 	bl	800a034 <xTaskIncrementTick>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f88:	4b16      	ldr	r3, [pc, #88]	; (8009fe4 <xTaskResumeAll+0x130>)
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1f1      	bne.n	8009f7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f9a:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <xTaskResumeAll+0x134>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fa0:	4b10      	ldr	r3, [pc, #64]	; (8009fe4 <xTaskResumeAll+0x130>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d009      	beq.n	8009fbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009fac:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <xTaskResumeAll+0x138>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fbc:	f001 fc22 	bl	800b804 <vPortExitCritical>

	return xAlreadyYielded;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20001278 	.word	0x20001278
 8009fd0:	20001250 	.word	0x20001250
 8009fd4:	20001210 	.word	0x20001210
 8009fd8:	20001258 	.word	0x20001258
 8009fdc:	20000d80 	.word	0x20000d80
 8009fe0:	20000d7c 	.word	0x20000d7c
 8009fe4:	20001264 	.word	0x20001264
 8009fe8:	20001260 	.word	0x20001260
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <xTaskGetTickCount+0x1c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ffc:	687b      	ldr	r3, [r7, #4]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20001254 	.word	0x20001254

0800a010 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a016:	f001 fca7 	bl	800b968 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a01a:	2300      	movs	r3, #0
 800a01c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a01e:	4b04      	ldr	r3, [pc, #16]	; (800a030 <xTaskGetTickCountFromISR+0x20>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a024:	683b      	ldr	r3, [r7, #0]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20001254 	.word	0x20001254

0800a034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a03a:	2300      	movs	r3, #0
 800a03c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a03e:	4b4f      	ldr	r3, [pc, #316]	; (800a17c <xTaskIncrementTick+0x148>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	f040 808f 	bne.w	800a166 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a048:	4b4d      	ldr	r3, [pc, #308]	; (800a180 <xTaskIncrementTick+0x14c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3301      	adds	r3, #1
 800a04e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a050:	4a4b      	ldr	r2, [pc, #300]	; (800a180 <xTaskIncrementTick+0x14c>)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d120      	bne.n	800a09e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a05c:	4b49      	ldr	r3, [pc, #292]	; (800a184 <xTaskIncrementTick+0x150>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00a      	beq.n	800a07c <xTaskIncrementTick+0x48>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	603b      	str	r3, [r7, #0]
}
 800a078:	bf00      	nop
 800a07a:	e7fe      	b.n	800a07a <xTaskIncrementTick+0x46>
 800a07c:	4b41      	ldr	r3, [pc, #260]	; (800a184 <xTaskIncrementTick+0x150>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60fb      	str	r3, [r7, #12]
 800a082:	4b41      	ldr	r3, [pc, #260]	; (800a188 <xTaskIncrementTick+0x154>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a3f      	ldr	r2, [pc, #252]	; (800a184 <xTaskIncrementTick+0x150>)
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	4a3f      	ldr	r2, [pc, #252]	; (800a188 <xTaskIncrementTick+0x154>)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	4b3e      	ldr	r3, [pc, #248]	; (800a18c <xTaskIncrementTick+0x158>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3301      	adds	r3, #1
 800a096:	4a3d      	ldr	r2, [pc, #244]	; (800a18c <xTaskIncrementTick+0x158>)
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	f000 fad1 	bl	800a640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a09e:	4b3c      	ldr	r3, [pc, #240]	; (800a190 <xTaskIncrementTick+0x15c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d349      	bcc.n	800a13c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0a8:	4b36      	ldr	r3, [pc, #216]	; (800a184 <xTaskIncrementTick+0x150>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d104      	bne.n	800a0bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b2:	4b37      	ldr	r3, [pc, #220]	; (800a190 <xTaskIncrementTick+0x15c>)
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b8:	601a      	str	r2, [r3, #0]
					break;
 800a0ba:	e03f      	b.n	800a13c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0bc:	4b31      	ldr	r3, [pc, #196]	; (800a184 <xTaskIncrementTick+0x150>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d203      	bcs.n	800a0dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a0d4:	4a2e      	ldr	r2, [pc, #184]	; (800a190 <xTaskIncrementTick+0x15c>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0da:	e02f      	b.n	800a13c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe fda5 	bl	8008c30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d004      	beq.n	800a0f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	3318      	adds	r3, #24
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fe fd9c 	bl	8008c30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fc:	4b25      	ldr	r3, [pc, #148]	; (800a194 <xTaskIncrementTick+0x160>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	429a      	cmp	r2, r3
 800a102:	d903      	bls.n	800a10c <xTaskIncrementTick+0xd8>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	4a22      	ldr	r2, [pc, #136]	; (800a194 <xTaskIncrementTick+0x160>)
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a110:	4613      	mov	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4a1f      	ldr	r2, [pc, #124]	; (800a198 <xTaskIncrementTick+0x164>)
 800a11a:	441a      	add	r2, r3
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	3304      	adds	r3, #4
 800a120:	4619      	mov	r1, r3
 800a122:	4610      	mov	r0, r2
 800a124:	f7fe fd27 	bl	8008b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a12c:	4b1b      	ldr	r3, [pc, #108]	; (800a19c <xTaskIncrementTick+0x168>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a132:	429a      	cmp	r2, r3
 800a134:	d3b8      	bcc.n	800a0a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a136:	2301      	movs	r3, #1
 800a138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a13a:	e7b5      	b.n	800a0a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a13c:	4b17      	ldr	r3, [pc, #92]	; (800a19c <xTaskIncrementTick+0x168>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a142:	4915      	ldr	r1, [pc, #84]	; (800a198 <xTaskIncrementTick+0x164>)
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	440b      	add	r3, r1
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d901      	bls.n	800a158 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a158:	4b11      	ldr	r3, [pc, #68]	; (800a1a0 <xTaskIncrementTick+0x16c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d007      	beq.n	800a170 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a160:	2301      	movs	r3, #1
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e004      	b.n	800a170 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a166:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <xTaskIncrementTick+0x170>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3301      	adds	r3, #1
 800a16c:	4a0d      	ldr	r2, [pc, #52]	; (800a1a4 <xTaskIncrementTick+0x170>)
 800a16e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a170:	697b      	ldr	r3, [r7, #20]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	20001278 	.word	0x20001278
 800a180:	20001254 	.word	0x20001254
 800a184:	20001208 	.word	0x20001208
 800a188:	2000120c 	.word	0x2000120c
 800a18c:	20001268 	.word	0x20001268
 800a190:	20001270 	.word	0x20001270
 800a194:	20001258 	.word	0x20001258
 800a198:	20000d80 	.word	0x20000d80
 800a19c:	20000d7c 	.word	0x20000d7c
 800a1a0:	20001264 	.word	0x20001264
 800a1a4:	20001260 	.word	0x20001260

0800a1a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1ae:	4b28      	ldr	r3, [pc, #160]	; (800a250 <vTaskSwitchContext+0xa8>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a1b6:	4b27      	ldr	r3, [pc, #156]	; (800a254 <vTaskSwitchContext+0xac>)
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a1bc:	e041      	b.n	800a242 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a1be:	4b25      	ldr	r3, [pc, #148]	; (800a254 <vTaskSwitchContext+0xac>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c4:	4b24      	ldr	r3, [pc, #144]	; (800a258 <vTaskSwitchContext+0xb0>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	e010      	b.n	800a1ee <vTaskSwitchContext+0x46>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10a      	bne.n	800a1e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	607b      	str	r3, [r7, #4]
}
 800a1e4:	bf00      	nop
 800a1e6:	e7fe      	b.n	800a1e6 <vTaskSwitchContext+0x3e>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	491b      	ldr	r1, [pc, #108]	; (800a25c <vTaskSwitchContext+0xb4>)
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	4413      	add	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	440b      	add	r3, r1
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0e4      	beq.n	800a1cc <vTaskSwitchContext+0x24>
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	4613      	mov	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4a13      	ldr	r2, [pc, #76]	; (800a25c <vTaskSwitchContext+0xb4>)
 800a20e:	4413      	add	r3, r2
 800a210:	60bb      	str	r3, [r7, #8]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	605a      	str	r2, [r3, #4]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	3308      	adds	r3, #8
 800a224:	429a      	cmp	r2, r3
 800a226:	d104      	bne.n	800a232 <vTaskSwitchContext+0x8a>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	605a      	str	r2, [r3, #4]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	4a09      	ldr	r2, [pc, #36]	; (800a260 <vTaskSwitchContext+0xb8>)
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	4a06      	ldr	r2, [pc, #24]	; (800a258 <vTaskSwitchContext+0xb0>)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6013      	str	r3, [r2, #0]
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20001278 	.word	0x20001278
 800a254:	20001264 	.word	0x20001264
 800a258:	20001258 	.word	0x20001258
 800a25c:	20000d80 	.word	0x20000d80
 800a260:	20000d7c 	.word	0x20000d7c

0800a264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10a      	bne.n	800a28a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60fb      	str	r3, [r7, #12]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a28a:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <vTaskPlaceOnEventList+0x44>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3318      	adds	r3, #24
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7fe fc93 	bl	8008bbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a298:	2101      	movs	r1, #1
 800a29a:	6838      	ldr	r0, [r7, #0]
 800a29c:	f000 fd56 	bl	800ad4c <prvAddCurrentTaskToDelayedList>
}
 800a2a0:	bf00      	nop
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000d7c 	.word	0x20000d7c

0800a2ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10a      	bne.n	800a2d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	617b      	str	r3, [r7, #20]
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <vTaskPlaceOnEventListRestricted+0x54>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3318      	adds	r3, #24
 800a2da:	4619      	mov	r1, r3
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f7fe fc4a 	bl	8008b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	68b8      	ldr	r0, [r7, #8]
 800a2f2:	f000 fd2b 	bl	800ad4c <prvAddCurrentTaskToDelayedList>
	}
 800a2f6:	bf00      	nop
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000d7c 	.word	0x20000d7c

0800a304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10a      	bne.n	800a330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	60fb      	str	r3, [r7, #12]
}
 800a32c:	bf00      	nop
 800a32e:	e7fe      	b.n	800a32e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	3318      	adds	r3, #24
 800a334:	4618      	mov	r0, r3
 800a336:	f7fe fc7b 	bl	8008c30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a33a:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <xTaskRemoveFromEventList+0xb0>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d11d      	bne.n	800a37e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	3304      	adds	r3, #4
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe fc72 	bl	8008c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a350:	4b19      	ldr	r3, [pc, #100]	; (800a3b8 <xTaskRemoveFromEventList+0xb4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d903      	bls.n	800a360 <xTaskRemoveFromEventList+0x5c>
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35c:	4a16      	ldr	r2, [pc, #88]	; (800a3b8 <xTaskRemoveFromEventList+0xb4>)
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4a13      	ldr	r2, [pc, #76]	; (800a3bc <xTaskRemoveFromEventList+0xb8>)
 800a36e:	441a      	add	r2, r3
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	3304      	adds	r3, #4
 800a374:	4619      	mov	r1, r3
 800a376:	4610      	mov	r0, r2
 800a378:	f7fe fbfd 	bl	8008b76 <vListInsertEnd>
 800a37c:	e005      	b.n	800a38a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	3318      	adds	r3, #24
 800a382:	4619      	mov	r1, r3
 800a384:	480e      	ldr	r0, [pc, #56]	; (800a3c0 <xTaskRemoveFromEventList+0xbc>)
 800a386:	f7fe fbf6 	bl	8008b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38e:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <xTaskRemoveFromEventList+0xc0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	429a      	cmp	r2, r3
 800a396:	d905      	bls.n	800a3a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a398:	2301      	movs	r3, #1
 800a39a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a39c:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <xTaskRemoveFromEventList+0xc4>)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	e001      	b.n	800a3a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3a8:	697b      	ldr	r3, [r7, #20]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20001278 	.word	0x20001278
 800a3b8:	20001258 	.word	0x20001258
 800a3bc:	20000d80 	.word	0x20000d80
 800a3c0:	20001210 	.word	0x20001210
 800a3c4:	20000d7c 	.word	0x20000d7c
 800a3c8:	20001264 	.word	0x20001264

0800a3cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3d4:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <vTaskInternalSetTimeOutState+0x24>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3dc:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <vTaskInternalSetTimeOutState+0x28>)
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	605a      	str	r2, [r3, #4]
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	20001268 	.word	0x20001268
 800a3f4:	20001254 	.word	0x20001254

0800a3f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	613b      	str	r3, [r7, #16]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	60fb      	str	r3, [r7, #12]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a43a:	f001 f9b3 	bl	800b7a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a43e:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <xTaskCheckForTimeOut+0xbc>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a456:	d102      	bne.n	800a45e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	e023      	b.n	800a4a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	4b15      	ldr	r3, [pc, #84]	; (800a4b8 <xTaskCheckForTimeOut+0xc0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d007      	beq.n	800a47a <xTaskCheckForTimeOut+0x82>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	429a      	cmp	r2, r3
 800a472:	d302      	bcc.n	800a47a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a474:	2301      	movs	r3, #1
 800a476:	61fb      	str	r3, [r7, #28]
 800a478:	e015      	b.n	800a4a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	429a      	cmp	r2, r3
 800a482:	d20b      	bcs.n	800a49c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	1ad2      	subs	r2, r2, r3
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff ff9b 	bl	800a3cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a496:	2300      	movs	r3, #0
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	e004      	b.n	800a4a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4a6:	f001 f9ad 	bl	800b804 <vPortExitCritical>

	return xReturn;
 800a4aa:	69fb      	ldr	r3, [r7, #28]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3720      	adds	r7, #32
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	20001254 	.word	0x20001254
 800a4b8:	20001268 	.word	0x20001268

0800a4bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4c0:	4b03      	ldr	r3, [pc, #12]	; (800a4d0 <vTaskMissedYield+0x14>)
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	601a      	str	r2, [r3, #0]
}
 800a4c6:	bf00      	nop
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	20001264 	.word	0x20001264

0800a4d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4dc:	f000 f852 	bl	800a584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4e0:	4b06      	ldr	r3, [pc, #24]	; (800a4fc <prvIdleTask+0x28>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d9f9      	bls.n	800a4dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <prvIdleTask+0x2c>)
 800a4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4f8:	e7f0      	b.n	800a4dc <prvIdleTask+0x8>
 800a4fa:	bf00      	nop
 800a4fc:	20000d80 	.word	0x20000d80
 800a500:	e000ed04 	.word	0xe000ed04

0800a504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a50a:	2300      	movs	r3, #0
 800a50c:	607b      	str	r3, [r7, #4]
 800a50e:	e00c      	b.n	800a52a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4a12      	ldr	r2, [pc, #72]	; (800a564 <prvInitialiseTaskLists+0x60>)
 800a51c:	4413      	add	r3, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe fafc 	bl	8008b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3301      	adds	r3, #1
 800a528:	607b      	str	r3, [r7, #4]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b37      	cmp	r3, #55	; 0x37
 800a52e:	d9ef      	bls.n	800a510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a530:	480d      	ldr	r0, [pc, #52]	; (800a568 <prvInitialiseTaskLists+0x64>)
 800a532:	f7fe faf3 	bl	8008b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a536:	480d      	ldr	r0, [pc, #52]	; (800a56c <prvInitialiseTaskLists+0x68>)
 800a538:	f7fe faf0 	bl	8008b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a53c:	480c      	ldr	r0, [pc, #48]	; (800a570 <prvInitialiseTaskLists+0x6c>)
 800a53e:	f7fe faed 	bl	8008b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a542:	480c      	ldr	r0, [pc, #48]	; (800a574 <prvInitialiseTaskLists+0x70>)
 800a544:	f7fe faea 	bl	8008b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a548:	480b      	ldr	r0, [pc, #44]	; (800a578 <prvInitialiseTaskLists+0x74>)
 800a54a:	f7fe fae7 	bl	8008b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <prvInitialiseTaskLists+0x78>)
 800a550:	4a05      	ldr	r2, [pc, #20]	; (800a568 <prvInitialiseTaskLists+0x64>)
 800a552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a554:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <prvInitialiseTaskLists+0x7c>)
 800a556:	4a05      	ldr	r2, [pc, #20]	; (800a56c <prvInitialiseTaskLists+0x68>)
 800a558:	601a      	str	r2, [r3, #0]
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20000d80 	.word	0x20000d80
 800a568:	200011e0 	.word	0x200011e0
 800a56c:	200011f4 	.word	0x200011f4
 800a570:	20001210 	.word	0x20001210
 800a574:	20001224 	.word	0x20001224
 800a578:	2000123c 	.word	0x2000123c
 800a57c:	20001208 	.word	0x20001208
 800a580:	2000120c 	.word	0x2000120c

0800a584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a58a:	e019      	b.n	800a5c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a58c:	f001 f90a 	bl	800b7a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a590:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <prvCheckTasksWaitingTermination+0x50>)
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe fb47 	bl	8008c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5a2:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <prvCheckTasksWaitingTermination+0x54>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	4a0b      	ldr	r2, [pc, #44]	; (800a5d8 <prvCheckTasksWaitingTermination+0x54>)
 800a5aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <prvCheckTasksWaitingTermination+0x58>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <prvCheckTasksWaitingTermination+0x58>)
 800a5b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5b6:	f001 f925 	bl	800b804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f810 	bl	800a5e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5c0:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <prvCheckTasksWaitingTermination+0x58>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e1      	bne.n	800a58c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20001224 	.word	0x20001224
 800a5d8:	20001250 	.word	0x20001250
 800a5dc:	20001238 	.word	0x20001238

0800a5e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d108      	bne.n	800a604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f001 fac2 	bl	800bb80 <vPortFree>
				vPortFree( pxTCB );
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 fabf 	bl	800bb80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a602:	e018      	b.n	800a636 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d103      	bne.n	800a616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 fab6 	bl	800bb80 <vPortFree>
	}
 800a614:	e00f      	b.n	800a636 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d00a      	beq.n	800a636 <prvDeleteTCB+0x56>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	60fb      	str	r3, [r7, #12]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <prvDeleteTCB+0x54>
	}
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a646:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <prvResetNextTaskUnblockTime+0x38>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d104      	bne.n	800a65a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a650:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <prvResetNextTaskUnblockTime+0x3c>)
 800a652:	f04f 32ff 	mov.w	r2, #4294967295
 800a656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a658:	e008      	b.n	800a66c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a65a:	4b07      	ldr	r3, [pc, #28]	; (800a678 <prvResetNextTaskUnblockTime+0x38>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	4a04      	ldr	r2, [pc, #16]	; (800a67c <prvResetNextTaskUnblockTime+0x3c>)
 800a66a:	6013      	str	r3, [r2, #0]
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	20001208 	.word	0x20001208
 800a67c:	20001270 	.word	0x20001270

0800a680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a686:	4b0b      	ldr	r3, [pc, #44]	; (800a6b4 <xTaskGetSchedulerState+0x34>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a68e:	2301      	movs	r3, #1
 800a690:	607b      	str	r3, [r7, #4]
 800a692:	e008      	b.n	800a6a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a694:	4b08      	ldr	r3, [pc, #32]	; (800a6b8 <xTaskGetSchedulerState+0x38>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a69c:	2302      	movs	r3, #2
 800a69e:	607b      	str	r3, [r7, #4]
 800a6a0:	e001      	b.n	800a6a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6a6:	687b      	ldr	r3, [r7, #4]
	}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	2000125c 	.word	0x2000125c
 800a6b8:	20001278 	.word	0x20001278

0800a6bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d051      	beq.n	800a776 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d6:	4b2a      	ldr	r3, [pc, #168]	; (800a780 <xTaskPriorityInherit+0xc4>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d241      	bcs.n	800a764 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	db06      	blt.n	800a6f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6e8:	4b25      	ldr	r3, [pc, #148]	; (800a780 <xTaskPriorityInherit+0xc4>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	6959      	ldr	r1, [r3, #20]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fe:	4613      	mov	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4413      	add	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4a1f      	ldr	r2, [pc, #124]	; (800a784 <xTaskPriorityInherit+0xc8>)
 800a708:	4413      	add	r3, r2
 800a70a:	4299      	cmp	r1, r3
 800a70c:	d122      	bne.n	800a754 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	3304      	adds	r3, #4
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fa8c 	bl	8008c30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a718:	4b19      	ldr	r3, [pc, #100]	; (800a780 <xTaskPriorityInherit+0xc4>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a726:	4b18      	ldr	r3, [pc, #96]	; (800a788 <xTaskPriorityInherit+0xcc>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d903      	bls.n	800a736 <xTaskPriorityInherit+0x7a>
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a732:	4a15      	ldr	r2, [pc, #84]	; (800a788 <xTaskPriorityInherit+0xcc>)
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4a10      	ldr	r2, [pc, #64]	; (800a784 <xTaskPriorityInherit+0xc8>)
 800a744:	441a      	add	r2, r3
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fe fa12 	bl	8008b76 <vListInsertEnd>
 800a752:	e004      	b.n	800a75e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a754:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <xTaskPriorityInherit+0xc4>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a75e:	2301      	movs	r3, #1
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	e008      	b.n	800a776 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <xTaskPriorityInherit+0xc4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76e:	429a      	cmp	r2, r3
 800a770:	d201      	bcs.n	800a776 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a772:	2301      	movs	r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a776:	68fb      	ldr	r3, [r7, #12]
	}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20000d7c 	.word	0x20000d7c
 800a784:	20000d80 	.word	0x20000d80
 800a788:	20001258 	.word	0x20001258

0800a78c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a798:	2300      	movs	r3, #0
 800a79a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d056      	beq.n	800a850 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7a2:	4b2e      	ldr	r3, [pc, #184]	; (800a85c <xTaskPriorityDisinherit+0xd0>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d00a      	beq.n	800a7c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	60fb      	str	r3, [r7, #12]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10a      	bne.n	800a7e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	60bb      	str	r3, [r7, #8]
}
 800a7dc:	bf00      	nop
 800a7de:	e7fe      	b.n	800a7de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e4:	1e5a      	subs	r2, r3, #1
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d02c      	beq.n	800a850 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d128      	bne.n	800a850 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	3304      	adds	r3, #4
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fa14 	bl	8008c30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <xTaskPriorityDisinherit+0xd4>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	429a      	cmp	r2, r3
 800a826:	d903      	bls.n	800a830 <xTaskPriorityDisinherit+0xa4>
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82c:	4a0c      	ldr	r2, [pc, #48]	; (800a860 <xTaskPriorityDisinherit+0xd4>)
 800a82e:	6013      	str	r3, [r2, #0]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4a09      	ldr	r2, [pc, #36]	; (800a864 <xTaskPriorityDisinherit+0xd8>)
 800a83e:	441a      	add	r2, r3
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	3304      	adds	r3, #4
 800a844:	4619      	mov	r1, r3
 800a846:	4610      	mov	r0, r2
 800a848:	f7fe f995 	bl	8008b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a84c:	2301      	movs	r3, #1
 800a84e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a850:	697b      	ldr	r3, [r7, #20]
	}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20000d7c 	.word	0x20000d7c
 800a860:	20001258 	.word	0x20001258
 800a864:	20000d80 	.word	0x20000d80

0800a868 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a876:	2301      	movs	r3, #1
 800a878:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d06a      	beq.n	800a956 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	60fb      	str	r3, [r7, #12]
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d902      	bls.n	800a8ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	61fb      	str	r3, [r7, #28]
 800a8ac:	e002      	b.n	800a8b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b8:	69fa      	ldr	r2, [r7, #28]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d04b      	beq.n	800a956 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d146      	bne.n	800a956 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a8c8:	4b25      	ldr	r3, [pc, #148]	; (800a960 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d10a      	bne.n	800a8e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	60bb      	str	r3, [r7, #8]
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	69fa      	ldr	r2, [r7, #28]
 800a8f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	db04      	blt.n	800a906 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	6959      	ldr	r1, [r3, #20]
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4a13      	ldr	r2, [pc, #76]	; (800a964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a916:	4413      	add	r3, r2
 800a918:	4299      	cmp	r1, r3
 800a91a:	d11c      	bne.n	800a956 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	3304      	adds	r3, #4
 800a920:	4618      	mov	r0, r3
 800a922:	f7fe f985 	bl	8008c30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92a:	4b0f      	ldr	r3, [pc, #60]	; (800a968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d903      	bls.n	800a93a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a936:	4a0c      	ldr	r2, [pc, #48]	; (800a968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93e:	4613      	mov	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4a07      	ldr	r2, [pc, #28]	; (800a964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a948:	441a      	add	r2, r3
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f7fe f910 	bl	8008b76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a956:	bf00      	nop
 800a958:	3720      	adds	r7, #32
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000d7c 	.word	0x20000d7c
 800a964:	20000d80 	.word	0x20000d80
 800a968:	20001258 	.word	0x20001258

0800a96c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <pvTaskIncrementMutexHeldCount+0x24>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d004      	beq.n	800a982 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a978:	4b05      	ldr	r3, [pc, #20]	; (800a990 <pvTaskIncrementMutexHeldCount+0x24>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a97e:	3201      	adds	r2, #1
 800a980:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a982:	4b03      	ldr	r3, [pc, #12]	; (800a990 <pvTaskIncrementMutexHeldCount+0x24>)
 800a984:	681b      	ldr	r3, [r3, #0]
	}
 800a986:	4618      	mov	r0, r3
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20000d7c 	.word	0x20000d7c

0800a994 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a99e:	f000 ff01 	bl	800b7a4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a9a2:	4b1e      	ldr	r3, [pc, #120]	; (800aa1c <ulTaskNotifyTake+0x88>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d113      	bne.n	800a9d4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a9ac:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <ulTaskNotifyTake+0x88>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9bc:	2101      	movs	r1, #1
 800a9be:	6838      	ldr	r0, [r7, #0]
 800a9c0:	f000 f9c4 	bl	800ad4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a9c4:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <ulTaskNotifyTake+0x8c>)
 800a9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a9d4:	f000 ff16 	bl	800b804 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a9d8:	f000 fee4 	bl	800b7a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a9dc:	4b0f      	ldr	r3, [pc, #60]	; (800aa1c <ulTaskNotifyTake+0x88>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00c      	beq.n	800aa04 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d004      	beq.n	800a9fa <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a9f0:	4b0a      	ldr	r3, [pc, #40]	; (800aa1c <ulTaskNotifyTake+0x88>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	655a      	str	r2, [r3, #84]	; 0x54
 800a9f8:	e004      	b.n	800aa04 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a9fa:	4b08      	ldr	r3, [pc, #32]	; (800aa1c <ulTaskNotifyTake+0x88>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	3a01      	subs	r2, #1
 800aa02:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <ulTaskNotifyTake+0x88>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800aa0e:	f000 fef9 	bl	800b804 <vPortExitCritical>

		return ulReturn;
 800aa12:	68fb      	ldr	r3, [r7, #12]
	}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000d7c 	.word	0x20000d7c
 800aa20:	e000ed04 	.word	0xe000ed04

0800aa24 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08a      	sub	sp, #40	; 0x28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	4613      	mov	r3, r2
 800aa32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800aa34:	2301      	movs	r3, #1
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10a      	bne.n	800aa54 <xTaskGenericNotify+0x30>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	61bb      	str	r3, [r7, #24]
}
 800aa50:	bf00      	nop
 800aa52:	e7fe      	b.n	800aa52 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800aa58:	f000 fea4 	bl	800b7a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d003      	beq.n	800aa6a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800aa70:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	2202      	movs	r2, #2
 800aa76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800aa7a:	79fb      	ldrb	r3, [r7, #7]
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	d828      	bhi.n	800aad2 <xTaskGenericNotify+0xae>
 800aa80:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <xTaskGenericNotify+0x64>)
 800aa82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa86:	bf00      	nop
 800aa88:	0800aaf3 	.word	0x0800aaf3
 800aa8c:	0800aa9d 	.word	0x0800aa9d
 800aa90:	0800aaab 	.word	0x0800aaab
 800aa94:	0800aab7 	.word	0x0800aab7
 800aa98:	0800aabf 	.word	0x0800aabf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800aa9c:	6a3b      	ldr	r3, [r7, #32]
 800aa9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800aaa8:	e026      	b.n	800aaf8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800aab4:	e020      	b.n	800aaf8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800aabc:	e01c      	b.n	800aaf8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800aabe:	7ffb      	ldrb	r3, [r7, #31]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d003      	beq.n	800aacc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800aaca:	e015      	b.n	800aaf8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800aacc:	2300      	movs	r3, #0
 800aace:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800aad0:	e012      	b.n	800aaf8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aada:	d00c      	beq.n	800aaf6 <xTaskGenericNotify+0xd2>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	617b      	str	r3, [r7, #20]
}
 800aaee:	bf00      	nop
 800aaf0:	e7fe      	b.n	800aaf0 <xTaskGenericNotify+0xcc>
					break;
 800aaf2:	bf00      	nop
 800aaf4:	e000      	b.n	800aaf8 <xTaskGenericNotify+0xd4>

					break;
 800aaf6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800aaf8:	7ffb      	ldrb	r3, [r7, #31]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d13a      	bne.n	800ab74 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	3304      	adds	r3, #4
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe f894 	bl	8008c30 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ab08:	6a3b      	ldr	r3, [r7, #32]
 800ab0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0c:	4b1d      	ldr	r3, [pc, #116]	; (800ab84 <xTaskGenericNotify+0x160>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d903      	bls.n	800ab1c <xTaskGenericNotify+0xf8>
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	4a1a      	ldr	r2, [pc, #104]	; (800ab84 <xTaskGenericNotify+0x160>)
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4a17      	ldr	r2, [pc, #92]	; (800ab88 <xTaskGenericNotify+0x164>)
 800ab2a:	441a      	add	r2, r3
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f7fe f81f 	bl	8008b76 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00a      	beq.n	800ab56 <xTaskGenericNotify+0x132>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	613b      	str	r3, [r7, #16]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5a:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <xTaskGenericNotify+0x168>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d907      	bls.n	800ab74 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ab64:	4b0a      	ldr	r3, [pc, #40]	; (800ab90 <xTaskGenericNotify+0x16c>)
 800ab66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ab74:	f000 fe46 	bl	800b804 <vPortExitCritical>

		return xReturn;
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3728      	adds	r7, #40	; 0x28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20001258 	.word	0x20001258
 800ab88:	20000d80 	.word	0x20000d80
 800ab8c:	20000d7c 	.word	0x20000d7c
 800ab90:	e000ed04 	.word	0xe000ed04

0800ab94 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08e      	sub	sp, #56	; 0x38
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	603b      	str	r3, [r7, #0]
 800aba0:	4613      	mov	r3, r2
 800aba2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800aba4:	2301      	movs	r3, #1
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abc4:	f000 fed0 	bl	800b968 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800abcc:	f3ef 8211 	mrs	r2, BASEPRI
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	623a      	str	r2, [r7, #32]
 800abe2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800abe4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abe6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800abfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ac08:	79fb      	ldrb	r3, [r7, #7]
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d828      	bhi.n	800ac60 <xTaskGenericNotifyFromISR+0xcc>
 800ac0e:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <xTaskGenericNotifyFromISR+0x80>)
 800ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac14:	0800ac81 	.word	0x0800ac81
 800ac18:	0800ac29 	.word	0x0800ac29
 800ac1c:	0800ac37 	.word	0x0800ac37
 800ac20:	0800ac43 	.word	0x0800ac43
 800ac24:	0800ac4b 	.word	0x0800ac4b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ac34:	e027      	b.n	800ac86 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ac40:	e021      	b.n	800ac86 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ac48:	e01d      	b.n	800ac86 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ac4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d003      	beq.n	800ac5a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ac58:	e015      	b.n	800ac86 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ac5e:	e012      	b.n	800ac86 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ac60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac68:	d00c      	beq.n	800ac84 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	61bb      	str	r3, [r7, #24]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <xTaskGenericNotifyFromISR+0xea>
					break;
 800ac80:	bf00      	nop
 800ac82:	e000      	b.n	800ac86 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800ac84:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ac86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d146      	bne.n	800ad1c <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	617b      	str	r3, [r7, #20]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acac:	4b21      	ldr	r3, [pc, #132]	; (800ad34 <xTaskGenericNotifyFromISR+0x1a0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d11d      	bne.n	800acf0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb6:	3304      	adds	r3, #4
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fd ffb9 	bl	8008c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc2:	4b1d      	ldr	r3, [pc, #116]	; (800ad38 <xTaskGenericNotifyFromISR+0x1a4>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d903      	bls.n	800acd2 <xTaskGenericNotifyFromISR+0x13e>
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	4a1a      	ldr	r2, [pc, #104]	; (800ad38 <xTaskGenericNotifyFromISR+0x1a4>)
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4a17      	ldr	r2, [pc, #92]	; (800ad3c <xTaskGenericNotifyFromISR+0x1a8>)
 800ace0:	441a      	add	r2, r3
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	3304      	adds	r3, #4
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7fd ff44 	bl	8008b76 <vListInsertEnd>
 800acee:	e005      	b.n	800acfc <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	3318      	adds	r3, #24
 800acf4:	4619      	mov	r1, r3
 800acf6:	4812      	ldr	r0, [pc, #72]	; (800ad40 <xTaskGenericNotifyFromISR+0x1ac>)
 800acf8:	f7fd ff3d 	bl	8008b76 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad00:	4b10      	ldr	r3, [pc, #64]	; (800ad44 <xTaskGenericNotifyFromISR+0x1b0>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d908      	bls.n	800ad1c <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ad0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ad10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad12:	2201      	movs	r2, #1
 800ad14:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ad16:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <xTaskGenericNotifyFromISR+0x1b4>)
 800ad18:	2201      	movs	r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f383 8811 	msr	BASEPRI, r3
}
 800ad26:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ad28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3738      	adds	r7, #56	; 0x38
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20001278 	.word	0x20001278
 800ad38:	20001258 	.word	0x20001258
 800ad3c:	20000d80 	.word	0x20000d80
 800ad40:	20001210 	.word	0x20001210
 800ad44:	20000d7c 	.word	0x20000d7c
 800ad48:	20001264 	.word	0x20001264

0800ad4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad56:	4b21      	ldr	r3, [pc, #132]	; (800addc <prvAddCurrentTaskToDelayedList+0x90>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad5c:	4b20      	ldr	r3, [pc, #128]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd ff64 	bl	8008c30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6e:	d10a      	bne.n	800ad86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d007      	beq.n	800ad86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad76:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4819      	ldr	r0, [pc, #100]	; (800ade4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad80:	f7fd fef9 	bl	8008b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad84:	e026      	b.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad8e:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d209      	bcs.n	800adb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad9e:	4b12      	ldr	r3, [pc, #72]	; (800ade8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3304      	adds	r3, #4
 800ada8:	4619      	mov	r1, r3
 800adaa:	4610      	mov	r0, r2
 800adac:	f7fd ff07 	bl	8008bbe <vListInsert>
}
 800adb0:	e010      	b.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb2:	4b0e      	ldr	r3, [pc, #56]	; (800adec <prvAddCurrentTaskToDelayedList+0xa0>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <prvAddCurrentTaskToDelayedList+0x94>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3304      	adds	r3, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f7fd fefd 	bl	8008bbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adc4:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d202      	bcs.n	800add4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adce:	4a08      	ldr	r2, [pc, #32]	; (800adf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	6013      	str	r3, [r2, #0]
}
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20001254 	.word	0x20001254
 800ade0:	20000d7c 	.word	0x20000d7c
 800ade4:	2000123c 	.word	0x2000123c
 800ade8:	2000120c 	.word	0x2000120c
 800adec:	20001208 	.word	0x20001208
 800adf0:	20001270 	.word	0x20001270

0800adf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	; 0x28
 800adf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adfe:	f000 fb63 	bl	800b4c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae02:	4b1c      	ldr	r3, [pc, #112]	; (800ae74 <xTimerCreateTimerTask+0x80>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d021      	beq.n	800ae4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae12:	1d3a      	adds	r2, r7, #4
 800ae14:	f107 0108 	add.w	r1, r7, #8
 800ae18:	f107 030c 	add.w	r3, r7, #12
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fd fe63 	bl	8008ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	9202      	str	r2, [sp, #8]
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	2300      	movs	r3, #0
 800ae32:	460a      	mov	r2, r1
 800ae34:	4910      	ldr	r1, [pc, #64]	; (800ae78 <xTimerCreateTimerTask+0x84>)
 800ae36:	4811      	ldr	r0, [pc, #68]	; (800ae7c <xTimerCreateTimerTask+0x88>)
 800ae38:	f7fe fe26 	bl	8009a88 <xTaskCreateStatic>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	4a10      	ldr	r2, [pc, #64]	; (800ae80 <xTimerCreateTimerTask+0x8c>)
 800ae40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae42:	4b0f      	ldr	r3, [pc, #60]	; (800ae80 <xTimerCreateTimerTask+0x8c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	613b      	str	r3, [r7, #16]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae6a:	697b      	ldr	r3, [r7, #20]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	200012ac 	.word	0x200012ac
 800ae78:	0800bedc 	.word	0x0800bedc
 800ae7c:	0800b071 	.word	0x0800b071
 800ae80:	200012b0 	.word	0x200012b0

0800ae84 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ae92:	202c      	movs	r0, #44	; 0x2c
 800ae94:	f000 fda8 	bl	800b9e8 <pvPortMalloc>
 800ae98:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00d      	beq.n	800aebc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 f805 	bl	800aec6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800aebc:	697b      	ldr	r3, [r7, #20]
	}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b086      	sub	sp, #24
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
 800aed2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10a      	bne.n	800aef0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	617b      	str	r3, [r7, #20]
}
 800aeec:	bf00      	nop
 800aeee:	e7fe      	b.n	800aeee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d01e      	beq.n	800af34 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800aef6:	f000 fae7 	bl	800b4c8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	6a3a      	ldr	r2, [r7, #32]
 800af10:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	3304      	adds	r3, #4
 800af16:	4618      	mov	r0, r3
 800af18:	f7fd fe20 	bl	8008b5c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d008      	beq.n	800af34 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af28:	f043 0304 	orr.w	r3, r3, #4
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800af34:	bf00      	nop
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08a      	sub	sp, #40	; 0x28
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10a      	bne.n	800af6a <xTimerGenericCommand+0x2e>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	623b      	str	r3, [r7, #32]
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800af6a:	4b1a      	ldr	r3, [pc, #104]	; (800afd4 <xTimerGenericCommand+0x98>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d02a      	beq.n	800afc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b05      	cmp	r3, #5
 800af82:	dc18      	bgt.n	800afb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af84:	f7ff fb7c 	bl	800a680 <xTaskGetSchedulerState>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d109      	bne.n	800afa2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af8e:	4b11      	ldr	r3, [pc, #68]	; (800afd4 <xTimerGenericCommand+0x98>)
 800af90:	6818      	ldr	r0, [r3, #0]
 800af92:	f107 0110 	add.w	r1, r7, #16
 800af96:	2300      	movs	r3, #0
 800af98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af9a:	f7fe f81b 	bl	8008fd4 <xQueueGenericSend>
 800af9e:	6278      	str	r0, [r7, #36]	; 0x24
 800afa0:	e012      	b.n	800afc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800afa2:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <xTimerGenericCommand+0x98>)
 800afa4:	6818      	ldr	r0, [r3, #0]
 800afa6:	f107 0110 	add.w	r1, r7, #16
 800afaa:	2300      	movs	r3, #0
 800afac:	2200      	movs	r2, #0
 800afae:	f7fe f811 	bl	8008fd4 <xQueueGenericSend>
 800afb2:	6278      	str	r0, [r7, #36]	; 0x24
 800afb4:	e008      	b.n	800afc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800afb6:	4b07      	ldr	r3, [pc, #28]	; (800afd4 <xTimerGenericCommand+0x98>)
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	f107 0110 	add.w	r1, r7, #16
 800afbe:	2300      	movs	r3, #0
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	f7fe f905 	bl	80091d0 <xQueueGenericSendFromISR>
 800afc6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3728      	adds	r7, #40	; 0x28
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	200012ac 	.word	0x200012ac

0800afd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b088      	sub	sp, #32
 800afdc:	af02      	add	r7, sp, #8
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe2:	4b22      	ldr	r3, [pc, #136]	; (800b06c <prvProcessExpiredTimer+0x94>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	3304      	adds	r3, #4
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fd fe1d 	bl	8008c30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800affc:	f003 0304 	and.w	r3, r3, #4
 800b000:	2b00      	cmp	r3, #0
 800b002:	d022      	beq.n	800b04a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	699a      	ldr	r2, [r3, #24]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	18d1      	adds	r1, r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	6978      	ldr	r0, [r7, #20]
 800b012:	f000 f8d1 	bl	800b1b8 <prvInsertTimerInActiveList>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d01f      	beq.n	800b05c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b01c:	2300      	movs	r3, #0
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	2300      	movs	r3, #0
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	2100      	movs	r1, #0
 800b026:	6978      	ldr	r0, [r7, #20]
 800b028:	f7ff ff88 	bl	800af3c <xTimerGenericCommand>
 800b02c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d113      	bne.n	800b05c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	60fb      	str	r3, [r7, #12]
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b050:	f023 0301 	bic.w	r3, r3, #1
 800b054:	b2da      	uxtb	r2, r3
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	6978      	ldr	r0, [r7, #20]
 800b062:	4798      	blx	r3
}
 800b064:	bf00      	nop
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	200012a4 	.word	0x200012a4

0800b070 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b078:	f107 0308 	add.w	r3, r7, #8
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 f857 	bl	800b130 <prvGetNextExpireTime>
 800b082:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	4619      	mov	r1, r3
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 f803 	bl	800b094 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b08e:	f000 f8d5 	bl	800b23c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b092:	e7f1      	b.n	800b078 <prvTimerTask+0x8>

0800b094 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b09e:	f7fe fefb 	bl	8009e98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0a2:	f107 0308 	add.w	r3, r7, #8
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f866 	bl	800b178 <prvSampleTimeNow>
 800b0ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d130      	bne.n	800b116 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <prvProcessTimerOrBlockTask+0x3c>
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d806      	bhi.n	800b0d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b0c2:	f7fe fef7 	bl	8009eb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff ff85 	bl	800afd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b0ce:	e024      	b.n	800b11a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d008      	beq.n	800b0e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b0d6:	4b13      	ldr	r3, [pc, #76]	; (800b124 <prvProcessTimerOrBlockTask+0x90>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <prvProcessTimerOrBlockTask+0x50>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e000      	b.n	800b0e6 <prvProcessTimerOrBlockTask+0x52>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b0e8:	4b0f      	ldr	r3, [pc, #60]	; (800b128 <prvProcessTimerOrBlockTask+0x94>)
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f7fe fc93 	bl	8009a20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b0fa:	f7fe fedb 	bl	8009eb4 <xTaskResumeAll>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10a      	bne.n	800b11a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b104:	4b09      	ldr	r3, [pc, #36]	; (800b12c <prvProcessTimerOrBlockTask+0x98>)
 800b106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	f3bf 8f6f 	isb	sy
}
 800b114:	e001      	b.n	800b11a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b116:	f7fe fecd 	bl	8009eb4 <xTaskResumeAll>
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	200012a8 	.word	0x200012a8
 800b128:	200012ac 	.word	0x200012ac
 800b12c:	e000ed04 	.word	0xe000ed04

0800b130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b138:	4b0e      	ldr	r3, [pc, #56]	; (800b174 <prvGetNextExpireTime+0x44>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <prvGetNextExpireTime+0x16>
 800b142:	2201      	movs	r2, #1
 800b144:	e000      	b.n	800b148 <prvGetNextExpireTime+0x18>
 800b146:	2200      	movs	r2, #0
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d105      	bne.n	800b160 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <prvGetNextExpireTime+0x44>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	e001      	b.n	800b164 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b164:	68fb      	ldr	r3, [r7, #12]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	200012a4 	.word	0x200012a4

0800b178 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b180:	f7fe ff36 	bl	8009ff0 <xTaskGetTickCount>
 800b184:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b186:	4b0b      	ldr	r3, [pc, #44]	; (800b1b4 <prvSampleTimeNow+0x3c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d205      	bcs.n	800b19c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b190:	f000 f936 	bl	800b400 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	e002      	b.n	800b1a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b1a2:	4a04      	ldr	r2, [pc, #16]	; (800b1b4 <prvSampleTimeNow+0x3c>)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	200012b4 	.word	0x200012b4

0800b1b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
 800b1c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d812      	bhi.n	800b204 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	1ad2      	subs	r2, r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d302      	bcc.n	800b1f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	e01b      	b.n	800b22a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b1f2:	4b10      	ldr	r3, [pc, #64]	; (800b234 <prvInsertTimerInActiveList+0x7c>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	f7fd fcde 	bl	8008bbe <vListInsert>
 800b202:	e012      	b.n	800b22a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d206      	bcs.n	800b21a <prvInsertTimerInActiveList+0x62>
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	429a      	cmp	r2, r3
 800b212:	d302      	bcc.n	800b21a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b214:	2301      	movs	r3, #1
 800b216:	617b      	str	r3, [r7, #20]
 800b218:	e007      	b.n	800b22a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b21a:	4b07      	ldr	r3, [pc, #28]	; (800b238 <prvInsertTimerInActiveList+0x80>)
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3304      	adds	r3, #4
 800b222:	4619      	mov	r1, r3
 800b224:	4610      	mov	r0, r2
 800b226:	f7fd fcca 	bl	8008bbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b22a:	697b      	ldr	r3, [r7, #20]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	200012a8 	.word	0x200012a8
 800b238:	200012a4 	.word	0x200012a4

0800b23c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08e      	sub	sp, #56	; 0x38
 800b240:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b242:	e0ca      	b.n	800b3da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	da18      	bge.n	800b27c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b24a:	1d3b      	adds	r3, r7, #4
 800b24c:	3304      	adds	r3, #4
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10a      	bne.n	800b26c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	61fb      	str	r3, [r7, #28]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b272:	6850      	ldr	r0, [r2, #4]
 800b274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b276:	6892      	ldr	r2, [r2, #8]
 800b278:	4611      	mov	r1, r2
 800b27a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f2c0 80ab 	blt.w	800b3da <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	3304      	adds	r3, #4
 800b294:	4618      	mov	r0, r3
 800b296:	f7fd fccb 	bl	8008c30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b29a:	463b      	mov	r3, r7
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff ff6b 	bl	800b178 <prvSampleTimeNow>
 800b2a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b09      	cmp	r3, #9
 800b2a8:	f200 8096 	bhi.w	800b3d8 <prvProcessReceivedCommands+0x19c>
 800b2ac:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <prvProcessReceivedCommands+0x78>)
 800b2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b2:	bf00      	nop
 800b2b4:	0800b2dd 	.word	0x0800b2dd
 800b2b8:	0800b2dd 	.word	0x0800b2dd
 800b2bc:	0800b2dd 	.word	0x0800b2dd
 800b2c0:	0800b351 	.word	0x0800b351
 800b2c4:	0800b365 	.word	0x0800b365
 800b2c8:	0800b3af 	.word	0x0800b3af
 800b2cc:	0800b2dd 	.word	0x0800b2dd
 800b2d0:	0800b2dd 	.word	0x0800b2dd
 800b2d4:	0800b351 	.word	0x0800b351
 800b2d8:	0800b365 	.word	0x0800b365
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2e2:	f043 0301 	orr.w	r3, r3, #1
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	18d1      	adds	r1, r2, r3
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2fc:	f7ff ff5c 	bl	800b1b8 <prvInsertTimerInActiveList>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d069      	beq.n	800b3da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b30c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b314:	f003 0304 	and.w	r3, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d05e      	beq.n	800b3da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	441a      	add	r2, r3
 800b324:	2300      	movs	r3, #0
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	2300      	movs	r3, #0
 800b32a:	2100      	movs	r1, #0
 800b32c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b32e:	f7ff fe05 	bl	800af3c <xTimerGenericCommand>
 800b332:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d14f      	bne.n	800b3da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	61bb      	str	r3, [r7, #24]
}
 800b34c:	bf00      	nop
 800b34e:	e7fe      	b.n	800b34e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b356:	f023 0301 	bic.w	r3, r3, #1
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b362:	e03a      	b.n	800b3da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b36a:	f043 0301 	orr.w	r3, r3, #1
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	617b      	str	r3, [r7, #20]
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	699a      	ldr	r2, [r3, #24]
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	18d1      	adds	r1, r2, r3
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3a8:	f7ff ff06 	bl	800b1b8 <prvInsertTimerInActiveList>
					break;
 800b3ac:	e015      	b.n	800b3da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d103      	bne.n	800b3c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b3bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3be:	f000 fbdf 	bl	800bb80 <vPortFree>
 800b3c2:	e00a      	b.n	800b3da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3ca:	f023 0301 	bic.w	r3, r3, #1
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b3d6:	e000      	b.n	800b3da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b3d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3da:	4b08      	ldr	r3, [pc, #32]	; (800b3fc <prvProcessReceivedCommands+0x1c0>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	1d39      	adds	r1, r7, #4
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fd ff90 	bl	8009308 <xQueueReceive>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f47f af2a 	bne.w	800b244 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b3f0:	bf00      	nop
 800b3f2:	bf00      	nop
 800b3f4:	3730      	adds	r7, #48	; 0x30
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	200012ac 	.word	0x200012ac

0800b400 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b406:	e048      	b.n	800b49a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b408:	4b2d      	ldr	r3, [pc, #180]	; (800b4c0 <prvSwitchTimerLists+0xc0>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b412:	4b2b      	ldr	r3, [pc, #172]	; (800b4c0 <prvSwitchTimerLists+0xc0>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3304      	adds	r3, #4
 800b420:	4618      	mov	r0, r3
 800b422:	f7fd fc05 	bl	8008c30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b434:	f003 0304 	and.w	r3, r3, #4
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d02e      	beq.n	800b49a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	4413      	add	r3, r2
 800b444:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b446:	68ba      	ldr	r2, [r7, #8]
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d90e      	bls.n	800b46c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b45a:	4b19      	ldr	r3, [pc, #100]	; (800b4c0 <prvSwitchTimerLists+0xc0>)
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3304      	adds	r3, #4
 800b462:	4619      	mov	r1, r3
 800b464:	4610      	mov	r0, r2
 800b466:	f7fd fbaa 	bl	8008bbe <vListInsert>
 800b46a:	e016      	b.n	800b49a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b46c:	2300      	movs	r3, #0
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	2300      	movs	r3, #0
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	2100      	movs	r1, #0
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f7ff fd60 	bl	800af3c <xTimerGenericCommand>
 800b47c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10a      	bne.n	800b49a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	603b      	str	r3, [r7, #0]
}
 800b496:	bf00      	nop
 800b498:	e7fe      	b.n	800b498 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b49a:	4b09      	ldr	r3, [pc, #36]	; (800b4c0 <prvSwitchTimerLists+0xc0>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1b1      	bne.n	800b408 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b4a4:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <prvSwitchTimerLists+0xc0>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b4aa:	4b06      	ldr	r3, [pc, #24]	; (800b4c4 <prvSwitchTimerLists+0xc4>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a04      	ldr	r2, [pc, #16]	; (800b4c0 <prvSwitchTimerLists+0xc0>)
 800b4b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b4b2:	4a04      	ldr	r2, [pc, #16]	; (800b4c4 <prvSwitchTimerLists+0xc4>)
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	6013      	str	r3, [r2, #0]
}
 800b4b8:	bf00      	nop
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	200012a4 	.word	0x200012a4
 800b4c4:	200012a8 	.word	0x200012a8

0800b4c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b4ce:	f000 f969 	bl	800b7a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b4d2:	4b15      	ldr	r3, [pc, #84]	; (800b528 <prvCheckForValidListAndQueue+0x60>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d120      	bne.n	800b51c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b4da:	4814      	ldr	r0, [pc, #80]	; (800b52c <prvCheckForValidListAndQueue+0x64>)
 800b4dc:	f7fd fb1e 	bl	8008b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b4e0:	4813      	ldr	r0, [pc, #76]	; (800b530 <prvCheckForValidListAndQueue+0x68>)
 800b4e2:	f7fd fb1b 	bl	8008b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b4e6:	4b13      	ldr	r3, [pc, #76]	; (800b534 <prvCheckForValidListAndQueue+0x6c>)
 800b4e8:	4a10      	ldr	r2, [pc, #64]	; (800b52c <prvCheckForValidListAndQueue+0x64>)
 800b4ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b4ec:	4b12      	ldr	r3, [pc, #72]	; (800b538 <prvCheckForValidListAndQueue+0x70>)
 800b4ee:	4a10      	ldr	r2, [pc, #64]	; (800b530 <prvCheckForValidListAndQueue+0x68>)
 800b4f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	4b11      	ldr	r3, [pc, #68]	; (800b53c <prvCheckForValidListAndQueue+0x74>)
 800b4f8:	4a11      	ldr	r2, [pc, #68]	; (800b540 <prvCheckForValidListAndQueue+0x78>)
 800b4fa:	2110      	movs	r1, #16
 800b4fc:	200a      	movs	r0, #10
 800b4fe:	f7fd fc29 	bl	8008d54 <xQueueGenericCreateStatic>
 800b502:	4603      	mov	r3, r0
 800b504:	4a08      	ldr	r2, [pc, #32]	; (800b528 <prvCheckForValidListAndQueue+0x60>)
 800b506:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b508:	4b07      	ldr	r3, [pc, #28]	; (800b528 <prvCheckForValidListAndQueue+0x60>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b510:	4b05      	ldr	r3, [pc, #20]	; (800b528 <prvCheckForValidListAndQueue+0x60>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	490b      	ldr	r1, [pc, #44]	; (800b544 <prvCheckForValidListAndQueue+0x7c>)
 800b516:	4618      	mov	r0, r3
 800b518:	f7fe fa2e 	bl	8009978 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b51c:	f000 f972 	bl	800b804 <vPortExitCritical>
}
 800b520:	bf00      	nop
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	200012ac 	.word	0x200012ac
 800b52c:	2000127c 	.word	0x2000127c
 800b530:	20001290 	.word	0x20001290
 800b534:	200012a4 	.word	0x200012a4
 800b538:	200012a8 	.word	0x200012a8
 800b53c:	20001358 	.word	0x20001358
 800b540:	200012b8 	.word	0x200012b8
 800b544:	0800bee4 	.word	0x0800bee4

0800b548 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3b04      	subs	r3, #4
 800b558:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3b04      	subs	r3, #4
 800b566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f023 0201 	bic.w	r2, r3, #1
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3b04      	subs	r3, #4
 800b576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b578:	4a0c      	ldr	r2, [pc, #48]	; (800b5ac <pxPortInitialiseStack+0x64>)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3b14      	subs	r3, #20
 800b582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3b04      	subs	r3, #4
 800b58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f06f 0202 	mvn.w	r2, #2
 800b596:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3b20      	subs	r3, #32
 800b59c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b59e:	68fb      	ldr	r3, [r7, #12]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	0800b5b1 	.word	0x0800b5b1

0800b5b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b5ba:	4b12      	ldr	r3, [pc, #72]	; (800b604 <prvTaskExitError+0x54>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c2:	d00a      	beq.n	800b5da <prvTaskExitError+0x2a>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	60fb      	str	r3, [r7, #12]
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <prvTaskExitError+0x28>
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	60bb      	str	r3, [r7, #8]
}
 800b5ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b5ee:	bf00      	nop
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0fc      	beq.n	800b5f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b5f6:	bf00      	nop
 800b5f8:	bf00      	nop
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	20000078 	.word	0x20000078
	...

0800b610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b610:	4b07      	ldr	r3, [pc, #28]	; (800b630 <pxCurrentTCBConst2>)
 800b612:	6819      	ldr	r1, [r3, #0]
 800b614:	6808      	ldr	r0, [r1, #0]
 800b616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61a:	f380 8809 	msr	PSP, r0
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f04f 0000 	mov.w	r0, #0
 800b626:	f380 8811 	msr	BASEPRI, r0
 800b62a:	4770      	bx	lr
 800b62c:	f3af 8000 	nop.w

0800b630 <pxCurrentTCBConst2>:
 800b630:	20000d7c 	.word	0x20000d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b634:	bf00      	nop
 800b636:	bf00      	nop

0800b638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b638:	4808      	ldr	r0, [pc, #32]	; (800b65c <prvPortStartFirstTask+0x24>)
 800b63a:	6800      	ldr	r0, [r0, #0]
 800b63c:	6800      	ldr	r0, [r0, #0]
 800b63e:	f380 8808 	msr	MSP, r0
 800b642:	f04f 0000 	mov.w	r0, #0
 800b646:	f380 8814 	msr	CONTROL, r0
 800b64a:	b662      	cpsie	i
 800b64c:	b661      	cpsie	f
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	df00      	svc	0
 800b658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b65a:	bf00      	nop
 800b65c:	e000ed08 	.word	0xe000ed08

0800b660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b666:	4b46      	ldr	r3, [pc, #280]	; (800b780 <xPortStartScheduler+0x120>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a46      	ldr	r2, [pc, #280]	; (800b784 <xPortStartScheduler+0x124>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d10a      	bne.n	800b686 <xPortStartScheduler+0x26>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	613b      	str	r3, [r7, #16]
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b686:	4b3e      	ldr	r3, [pc, #248]	; (800b780 <xPortStartScheduler+0x120>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a3f      	ldr	r2, [pc, #252]	; (800b788 <xPortStartScheduler+0x128>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d10a      	bne.n	800b6a6 <xPortStartScheduler+0x46>
	__asm volatile
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	60fb      	str	r3, [r7, #12]
}
 800b6a2:	bf00      	nop
 800b6a4:	e7fe      	b.n	800b6a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b6a6:	4b39      	ldr	r3, [pc, #228]	; (800b78c <xPortStartScheduler+0x12c>)
 800b6a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	22ff      	movs	r2, #255	; 0xff
 800b6b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b6c0:	78fb      	ldrb	r3, [r7, #3]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	4b31      	ldr	r3, [pc, #196]	; (800b790 <xPortStartScheduler+0x130>)
 800b6cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b6ce:	4b31      	ldr	r3, [pc, #196]	; (800b794 <xPortStartScheduler+0x134>)
 800b6d0:	2207      	movs	r2, #7
 800b6d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6d4:	e009      	b.n	800b6ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b6d6:	4b2f      	ldr	r3, [pc, #188]	; (800b794 <xPortStartScheduler+0x134>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	4a2d      	ldr	r2, [pc, #180]	; (800b794 <xPortStartScheduler+0x134>)
 800b6de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	005b      	lsls	r3, r3, #1
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6ea:	78fb      	ldrb	r3, [r7, #3]
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f2:	2b80      	cmp	r3, #128	; 0x80
 800b6f4:	d0ef      	beq.n	800b6d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b6f6:	4b27      	ldr	r3, [pc, #156]	; (800b794 <xPortStartScheduler+0x134>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f1c3 0307 	rsb	r3, r3, #7
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	d00a      	beq.n	800b718 <xPortStartScheduler+0xb8>
	__asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60bb      	str	r3, [r7, #8]
}
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b718:	4b1e      	ldr	r3, [pc, #120]	; (800b794 <xPortStartScheduler+0x134>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	021b      	lsls	r3, r3, #8
 800b71e:	4a1d      	ldr	r2, [pc, #116]	; (800b794 <xPortStartScheduler+0x134>)
 800b720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b722:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <xPortStartScheduler+0x134>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b72a:	4a1a      	ldr	r2, [pc, #104]	; (800b794 <xPortStartScheduler+0x134>)
 800b72c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	b2da      	uxtb	r2, r3
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b736:	4b18      	ldr	r3, [pc, #96]	; (800b798 <xPortStartScheduler+0x138>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a17      	ldr	r2, [pc, #92]	; (800b798 <xPortStartScheduler+0x138>)
 800b73c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b742:	4b15      	ldr	r3, [pc, #84]	; (800b798 <xPortStartScheduler+0x138>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a14      	ldr	r2, [pc, #80]	; (800b798 <xPortStartScheduler+0x138>)
 800b748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b74c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b74e:	f000 f8dd 	bl	800b90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b752:	4b12      	ldr	r3, [pc, #72]	; (800b79c <xPortStartScheduler+0x13c>)
 800b754:	2200      	movs	r2, #0
 800b756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b758:	f000 f8fc 	bl	800b954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b75c:	4b10      	ldr	r3, [pc, #64]	; (800b7a0 <xPortStartScheduler+0x140>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a0f      	ldr	r2, [pc, #60]	; (800b7a0 <xPortStartScheduler+0x140>)
 800b762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b768:	f7ff ff66 	bl	800b638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b76c:	f7fe fd1c 	bl	800a1a8 <vTaskSwitchContext>
	prvTaskExitError();
 800b770:	f7ff ff1e 	bl	800b5b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	e000ed00 	.word	0xe000ed00
 800b784:	410fc271 	.word	0x410fc271
 800b788:	410fc270 	.word	0x410fc270
 800b78c:	e000e400 	.word	0xe000e400
 800b790:	200013a8 	.word	0x200013a8
 800b794:	200013ac 	.word	0x200013ac
 800b798:	e000ed20 	.word	0xe000ed20
 800b79c:	20000078 	.word	0x20000078
 800b7a0:	e000ef34 	.word	0xe000ef34

0800b7a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	607b      	str	r3, [r7, #4]
}
 800b7bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7be:	4b0f      	ldr	r3, [pc, #60]	; (800b7fc <vPortEnterCritical+0x58>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	4a0d      	ldr	r2, [pc, #52]	; (800b7fc <vPortEnterCritical+0x58>)
 800b7c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b7c8:	4b0c      	ldr	r3, [pc, #48]	; (800b7fc <vPortEnterCritical+0x58>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d10f      	bne.n	800b7f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	; (800b800 <vPortEnterCritical+0x5c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	603b      	str	r3, [r7, #0]
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <vPortEnterCritical+0x4a>
	}
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	20000078 	.word	0x20000078
 800b800:	e000ed04 	.word	0xe000ed04

0800b804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b80a:	4b12      	ldr	r3, [pc, #72]	; (800b854 <vPortExitCritical+0x50>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10a      	bne.n	800b828 <vPortExitCritical+0x24>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	607b      	str	r3, [r7, #4]
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b828:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <vPortExitCritical+0x50>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	4a09      	ldr	r2, [pc, #36]	; (800b854 <vPortExitCritical+0x50>)
 800b830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b832:	4b08      	ldr	r3, [pc, #32]	; (800b854 <vPortExitCritical+0x50>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d105      	bne.n	800b846 <vPortExitCritical+0x42>
 800b83a:	2300      	movs	r3, #0
 800b83c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	f383 8811 	msr	BASEPRI, r3
}
 800b844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b846:	bf00      	nop
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	20000078 	.word	0x20000078
	...

0800b860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b860:	f3ef 8009 	mrs	r0, PSP
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	4b15      	ldr	r3, [pc, #84]	; (800b8c0 <pxCurrentTCBConst>)
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	f01e 0f10 	tst.w	lr, #16
 800b870:	bf08      	it	eq
 800b872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87a:	6010      	str	r0, [r2, #0]
 800b87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b884:	f380 8811 	msr	BASEPRI, r0
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f7fe fc8a 	bl	800a1a8 <vTaskSwitchContext>
 800b894:	f04f 0000 	mov.w	r0, #0
 800b898:	f380 8811 	msr	BASEPRI, r0
 800b89c:	bc09      	pop	{r0, r3}
 800b89e:	6819      	ldr	r1, [r3, #0]
 800b8a0:	6808      	ldr	r0, [r1, #0]
 800b8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a6:	f01e 0f10 	tst.w	lr, #16
 800b8aa:	bf08      	it	eq
 800b8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8b0:	f380 8809 	msr	PSP, r0
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	f3af 8000 	nop.w

0800b8c0 <pxCurrentTCBConst>:
 800b8c0:	20000d7c 	.word	0x20000d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b8c4:	bf00      	nop
 800b8c6:	bf00      	nop

0800b8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b8e2:	f7fe fba7 	bl	800a034 <xTaskIncrementTick>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b8ec:	4b06      	ldr	r3, [pc, #24]	; (800b908 <xPortSysTickHandler+0x40>)
 800b8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	f383 8811 	msr	BASEPRI, r3
}
 800b8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b910:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <vPortSetupTimerInterrupt+0x34>)
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <vPortSetupTimerInterrupt+0x38>)
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b91c:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <vPortSetupTimerInterrupt+0x3c>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a0a      	ldr	r2, [pc, #40]	; (800b94c <vPortSetupTimerInterrupt+0x40>)
 800b922:	fba2 2303 	umull	r2, r3, r2, r3
 800b926:	099b      	lsrs	r3, r3, #6
 800b928:	4a09      	ldr	r2, [pc, #36]	; (800b950 <vPortSetupTimerInterrupt+0x44>)
 800b92a:	3b01      	subs	r3, #1
 800b92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b92e:	4b04      	ldr	r3, [pc, #16]	; (800b940 <vPortSetupTimerInterrupt+0x34>)
 800b930:	2207      	movs	r2, #7
 800b932:	601a      	str	r2, [r3, #0]
}
 800b934:	bf00      	nop
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	e000e010 	.word	0xe000e010
 800b944:	e000e018 	.word	0xe000e018
 800b948:	2000006c 	.word	0x2000006c
 800b94c:	10624dd3 	.word	0x10624dd3
 800b950:	e000e014 	.word	0xe000e014

0800b954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b964 <vPortEnableVFP+0x10>
 800b958:	6801      	ldr	r1, [r0, #0]
 800b95a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b95e:	6001      	str	r1, [r0, #0]
 800b960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b962:	bf00      	nop
 800b964:	e000ed88 	.word	0xe000ed88

0800b968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b96e:	f3ef 8305 	mrs	r3, IPSR
 800b972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2b0f      	cmp	r3, #15
 800b978:	d914      	bls.n	800b9a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b97a:	4a17      	ldr	r2, [pc, #92]	; (800b9d8 <vPortValidateInterruptPriority+0x70>)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b984:	4b15      	ldr	r3, [pc, #84]	; (800b9dc <vPortValidateInterruptPriority+0x74>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	7afa      	ldrb	r2, [r7, #11]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d20a      	bcs.n	800b9a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	607b      	str	r3, [r7, #4]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b9a4:	4b0e      	ldr	r3, [pc, #56]	; (800b9e0 <vPortValidateInterruptPriority+0x78>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b9ac:	4b0d      	ldr	r3, [pc, #52]	; (800b9e4 <vPortValidateInterruptPriority+0x7c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d90a      	bls.n	800b9ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	603b      	str	r3, [r7, #0]
}
 800b9c6:	bf00      	nop
 800b9c8:	e7fe      	b.n	800b9c8 <vPortValidateInterruptPriority+0x60>
	}
 800b9ca:	bf00      	nop
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	e000e3f0 	.word	0xe000e3f0
 800b9dc:	200013a8 	.word	0x200013a8
 800b9e0:	e000ed0c 	.word	0xe000ed0c
 800b9e4:	200013ac 	.word	0x200013ac

0800b9e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b08a      	sub	sp, #40	; 0x28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9f4:	f7fe fa50 	bl	8009e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9f8:	4b5b      	ldr	r3, [pc, #364]	; (800bb68 <pvPortMalloc+0x180>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba00:	f000 f920 	bl	800bc44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba04:	4b59      	ldr	r3, [pc, #356]	; (800bb6c <pvPortMalloc+0x184>)
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f040 8093 	bne.w	800bb38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d01d      	beq.n	800ba54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ba18:	2208      	movs	r2, #8
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f003 0307 	and.w	r3, r3, #7
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d014      	beq.n	800ba54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f023 0307 	bic.w	r3, r3, #7
 800ba30:	3308      	adds	r3, #8
 800ba32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f003 0307 	and.w	r3, r3, #7
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00a      	beq.n	800ba54 <pvPortMalloc+0x6c>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	617b      	str	r3, [r7, #20]
}
 800ba50:	bf00      	nop
 800ba52:	e7fe      	b.n	800ba52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d06e      	beq.n	800bb38 <pvPortMalloc+0x150>
 800ba5a:	4b45      	ldr	r3, [pc, #276]	; (800bb70 <pvPortMalloc+0x188>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d869      	bhi.n	800bb38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba64:	4b43      	ldr	r3, [pc, #268]	; (800bb74 <pvPortMalloc+0x18c>)
 800ba66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba68:	4b42      	ldr	r3, [pc, #264]	; (800bb74 <pvPortMalloc+0x18c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba6e:	e004      	b.n	800ba7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d903      	bls.n	800ba8c <pvPortMalloc+0xa4>
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1f1      	bne.n	800ba70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba8c:	4b36      	ldr	r3, [pc, #216]	; (800bb68 <pvPortMalloc+0x180>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d050      	beq.n	800bb38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba96:	6a3b      	ldr	r3, [r7, #32]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	4413      	add	r3, r2
 800ba9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	1ad2      	subs	r2, r2, r3
 800bab0:	2308      	movs	r3, #8
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d91f      	bls.n	800baf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4413      	add	r3, r2
 800babe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	f003 0307 	and.w	r3, r3, #7
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <pvPortMalloc+0xf8>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	613b      	str	r3, [r7, #16]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	1ad2      	subs	r2, r2, r3
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800baf2:	69b8      	ldr	r0, [r7, #24]
 800baf4:	f000 f908 	bl	800bd08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800baf8:	4b1d      	ldr	r3, [pc, #116]	; (800bb70 <pvPortMalloc+0x188>)
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	4a1b      	ldr	r2, [pc, #108]	; (800bb70 <pvPortMalloc+0x188>)
 800bb04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb06:	4b1a      	ldr	r3, [pc, #104]	; (800bb70 <pvPortMalloc+0x188>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	4b1b      	ldr	r3, [pc, #108]	; (800bb78 <pvPortMalloc+0x190>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d203      	bcs.n	800bb1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb12:	4b17      	ldr	r3, [pc, #92]	; (800bb70 <pvPortMalloc+0x188>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a18      	ldr	r2, [pc, #96]	; (800bb78 <pvPortMalloc+0x190>)
 800bb18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	4b13      	ldr	r3, [pc, #76]	; (800bb6c <pvPortMalloc+0x184>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	431a      	orrs	r2, r3
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb2e:	4b13      	ldr	r3, [pc, #76]	; (800bb7c <pvPortMalloc+0x194>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	4a11      	ldr	r2, [pc, #68]	; (800bb7c <pvPortMalloc+0x194>)
 800bb36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb38:	f7fe f9bc 	bl	8009eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	f003 0307 	and.w	r3, r3, #7
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00a      	beq.n	800bb5c <pvPortMalloc+0x174>
	__asm volatile
 800bb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	60fb      	str	r3, [r7, #12]
}
 800bb58:	bf00      	nop
 800bb5a:	e7fe      	b.n	800bb5a <pvPortMalloc+0x172>
	return pvReturn;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3728      	adds	r7, #40	; 0x28
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20001fb8 	.word	0x20001fb8
 800bb6c:	20001fcc 	.word	0x20001fcc
 800bb70:	20001fbc 	.word	0x20001fbc
 800bb74:	20001fb0 	.word	0x20001fb0
 800bb78:	20001fc0 	.word	0x20001fc0
 800bb7c:	20001fc4 	.word	0x20001fc4

0800bb80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d04d      	beq.n	800bc2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb92:	2308      	movs	r3, #8
 800bb94:	425b      	negs	r3, r3
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	4413      	add	r3, r2
 800bb9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	4b24      	ldr	r3, [pc, #144]	; (800bc38 <vPortFree+0xb8>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4013      	ands	r3, r2
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10a      	bne.n	800bbc4 <vPortFree+0x44>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	60fb      	str	r3, [r7, #12]
}
 800bbc0:	bf00      	nop
 800bbc2:	e7fe      	b.n	800bbc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00a      	beq.n	800bbe2 <vPortFree+0x62>
	__asm volatile
 800bbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd0:	f383 8811 	msr	BASEPRI, r3
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	f3bf 8f4f 	dsb	sy
 800bbdc:	60bb      	str	r3, [r7, #8]
}
 800bbde:	bf00      	nop
 800bbe0:	e7fe      	b.n	800bbe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	685a      	ldr	r2, [r3, #4]
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <vPortFree+0xb8>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4013      	ands	r3, r2
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d01e      	beq.n	800bc2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d11a      	bne.n	800bc2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	4b0e      	ldr	r3, [pc, #56]	; (800bc38 <vPortFree+0xb8>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	43db      	mvns	r3, r3
 800bc02:	401a      	ands	r2, r3
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc08:	f7fe f946 	bl	8009e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	685a      	ldr	r2, [r3, #4]
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <vPortFree+0xbc>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4413      	add	r3, r2
 800bc16:	4a09      	ldr	r2, [pc, #36]	; (800bc3c <vPortFree+0xbc>)
 800bc18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc1a:	6938      	ldr	r0, [r7, #16]
 800bc1c:	f000 f874 	bl	800bd08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc20:	4b07      	ldr	r3, [pc, #28]	; (800bc40 <vPortFree+0xc0>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3301      	adds	r3, #1
 800bc26:	4a06      	ldr	r2, [pc, #24]	; (800bc40 <vPortFree+0xc0>)
 800bc28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc2a:	f7fe f943 	bl	8009eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc2e:	bf00      	nop
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20001fcc 	.word	0x20001fcc
 800bc3c:	20001fbc 	.word	0x20001fbc
 800bc40:	20001fc8 	.word	0x20001fc8

0800bc44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bc4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc50:	4b27      	ldr	r3, [pc, #156]	; (800bcf0 <prvHeapInit+0xac>)
 800bc52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f003 0307 	and.w	r3, r3, #7
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00c      	beq.n	800bc78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3307      	adds	r3, #7
 800bc62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f023 0307 	bic.w	r3, r3, #7
 800bc6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	4a1f      	ldr	r2, [pc, #124]	; (800bcf0 <prvHeapInit+0xac>)
 800bc74:	4413      	add	r3, r2
 800bc76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc7c:	4a1d      	ldr	r2, [pc, #116]	; (800bcf4 <prvHeapInit+0xb0>)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc82:	4b1c      	ldr	r3, [pc, #112]	; (800bcf4 <prvHeapInit+0xb0>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc90:	2208      	movs	r2, #8
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	1a9b      	subs	r3, r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 0307 	bic.w	r3, r3, #7
 800bc9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a15      	ldr	r2, [pc, #84]	; (800bcf8 <prvHeapInit+0xb4>)
 800bca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bca6:	4b14      	ldr	r3, [pc, #80]	; (800bcf8 <prvHeapInit+0xb4>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bcae:	4b12      	ldr	r3, [pc, #72]	; (800bcf8 <prvHeapInit+0xb4>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	1ad2      	subs	r2, r2, r3
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bcc4:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <prvHeapInit+0xb4>)
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	4a0a      	ldr	r2, [pc, #40]	; (800bcfc <prvHeapInit+0xb8>)
 800bcd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	4a09      	ldr	r2, [pc, #36]	; (800bd00 <prvHeapInit+0xbc>)
 800bcda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bcdc:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <prvHeapInit+0xc0>)
 800bcde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bce2:	601a      	str	r2, [r3, #0]
}
 800bce4:	bf00      	nop
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	200013b0 	.word	0x200013b0
 800bcf4:	20001fb0 	.word	0x20001fb0
 800bcf8:	20001fb8 	.word	0x20001fb8
 800bcfc:	20001fc0 	.word	0x20001fc0
 800bd00:	20001fbc 	.word	0x20001fbc
 800bd04:	20001fcc 	.word	0x20001fcc

0800bd08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd10:	4b28      	ldr	r3, [pc, #160]	; (800bdb4 <prvInsertBlockIntoFreeList+0xac>)
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	e002      	b.n	800bd1c <prvInsertBlockIntoFreeList+0x14>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d8f7      	bhi.n	800bd16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	4413      	add	r3, r2
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d108      	bne.n	800bd4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	685a      	ldr	r2, [r3, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	441a      	add	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	441a      	add	r2, r3
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d118      	bne.n	800bd90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	4b15      	ldr	r3, [pc, #84]	; (800bdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d00d      	beq.n	800bd86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685a      	ldr	r2, [r3, #4]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	441a      	add	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	601a      	str	r2, [r3, #0]
 800bd84:	e008      	b.n	800bd98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd86:	4b0c      	ldr	r3, [pc, #48]	; (800bdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	e003      	b.n	800bd98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d002      	beq.n	800bda6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bda6:	bf00      	nop
 800bda8:	3714      	adds	r7, #20
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	20001fb0 	.word	0x20001fb0
 800bdb8:	20001fb8 	.word	0x20001fb8

0800bdbc <memset>:
 800bdbc:	4402      	add	r2, r0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d100      	bne.n	800bdc6 <memset+0xa>
 800bdc4:	4770      	bx	lr
 800bdc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdca:	e7f9      	b.n	800bdc0 <memset+0x4>

0800bdcc <__libc_init_array>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	4d0d      	ldr	r5, [pc, #52]	; (800be04 <__libc_init_array+0x38>)
 800bdd0:	4c0d      	ldr	r4, [pc, #52]	; (800be08 <__libc_init_array+0x3c>)
 800bdd2:	1b64      	subs	r4, r4, r5
 800bdd4:	10a4      	asrs	r4, r4, #2
 800bdd6:	2600      	movs	r6, #0
 800bdd8:	42a6      	cmp	r6, r4
 800bdda:	d109      	bne.n	800bdf0 <__libc_init_array+0x24>
 800bddc:	4d0b      	ldr	r5, [pc, #44]	; (800be0c <__libc_init_array+0x40>)
 800bdde:	4c0c      	ldr	r4, [pc, #48]	; (800be10 <__libc_init_array+0x44>)
 800bde0:	f000 f826 	bl	800be30 <_init>
 800bde4:	1b64      	subs	r4, r4, r5
 800bde6:	10a4      	asrs	r4, r4, #2
 800bde8:	2600      	movs	r6, #0
 800bdea:	42a6      	cmp	r6, r4
 800bdec:	d105      	bne.n	800bdfa <__libc_init_array+0x2e>
 800bdee:	bd70      	pop	{r4, r5, r6, pc}
 800bdf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf4:	4798      	blx	r3
 800bdf6:	3601      	adds	r6, #1
 800bdf8:	e7ee      	b.n	800bdd8 <__libc_init_array+0xc>
 800bdfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdfe:	4798      	blx	r3
 800be00:	3601      	adds	r6, #1
 800be02:	e7f2      	b.n	800bdea <__libc_init_array+0x1e>
 800be04:	0800c034 	.word	0x0800c034
 800be08:	0800c034 	.word	0x0800c034
 800be0c:	0800c034 	.word	0x0800c034
 800be10:	0800c038 	.word	0x0800c038

0800be14 <memcpy>:
 800be14:	440a      	add	r2, r1
 800be16:	4291      	cmp	r1, r2
 800be18:	f100 33ff 	add.w	r3, r0, #4294967295
 800be1c:	d100      	bne.n	800be20 <memcpy+0xc>
 800be1e:	4770      	bx	lr
 800be20:	b510      	push	{r4, lr}
 800be22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be2a:	4291      	cmp	r1, r2
 800be2c:	d1f9      	bne.n	800be22 <memcpy+0xe>
 800be2e:	bd10      	pop	{r4, pc}

0800be30 <_init>:
 800be30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be32:	bf00      	nop
 800be34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be36:	bc08      	pop	{r3}
 800be38:	469e      	mov	lr, r3
 800be3a:	4770      	bx	lr

0800be3c <_fini>:
 800be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3e:	bf00      	nop
 800be40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be42:	bc08      	pop	{r3}
 800be44:	469e      	mov	lr, r3
 800be46:	4770      	bx	lr
