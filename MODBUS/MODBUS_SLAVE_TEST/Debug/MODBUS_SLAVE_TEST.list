
MODBUS_SLAVE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c60  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  08006120  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005a8  20000094  080061ac  00020094  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000063c  080061ac  0002063c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 11 .debug_info   000154c5  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002e4c  00000000  00000000  000355cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001548  00000000  00000000  00038418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001030  00000000  00000000  00039960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021dd6  00000000  00000000  0003a990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013f74  00000000  00000000  0005c766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d839e  00000000  00000000  000706da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000588c  00000000  00000000  00148a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0014e304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000094 	.word	0x20000094
 8000158:	00000000 	.word	0x00000000
 800015c:	08005d84 	.word	0x08005d84

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000098 	.word	0x20000098
 8000178:	08005d84 	.word	0x08005d84

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000488:	f023 0218 	bic.w	r2, r3, #24
 800048c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <HAL_UARTEx_RxEventCallback>:
uint8_t TxData[256];
uint8_t RxData[256];



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	807b      	strh	r3, [r7, #2]
	if(RxData[0] == SLAVE_ID)
 80004e4:	4b57      	ldr	r3, [pc, #348]	; (8000644 <HAL_UARTEx_RxEventCallback+0x16c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b07      	cmp	r3, #7
 80004ea:	f040 80a1 	bne.w	8000630 <HAL_UARTEx_RxEventCallback+0x158>
	{
		switch(RxData[1])
 80004ee:	4b55      	ldr	r3, [pc, #340]	; (8000644 <HAL_UARTEx_RxEventCallback+0x16c>)
 80004f0:	785b      	ldrb	r3, [r3, #1]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	2b15      	cmp	r3, #21
 80004f6:	f200 8097 	bhi.w	8000628 <HAL_UARTEx_RxEventCallback+0x150>
 80004fa:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <HAL_UARTEx_RxEventCallback+0x28>)
 80004fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000500:	08000559 	.word	0x08000559
 8000504:	08000573 	.word	0x08000573
 8000508:	0800058d 	.word	0x0800058d
 800050c:	080005a7 	.word	0x080005a7
 8000510:	080005c1 	.word	0x080005c1
 8000514:	080005db 	.word	0x080005db
 8000518:	08000629 	.word	0x08000629
 800051c:	08000629 	.word	0x08000629
 8000520:	08000629 	.word	0x08000629
 8000524:	08000629 	.word	0x08000629
 8000528:	08000629 	.word	0x08000629
 800052c:	08000629 	.word	0x08000629
 8000530:	08000629 	.word	0x08000629
 8000534:	08000629 	.word	0x08000629
 8000538:	080005f5 	.word	0x080005f5
 800053c:	08000629 	.word	0x08000629
 8000540:	08000629 	.word	0x08000629
 8000544:	08000629 	.word	0x08000629
 8000548:	08000629 	.word	0x08000629
 800054c:	08000629 	.word	0x08000629
 8000550:	08000629 	.word	0x08000629
 8000554:	0800060f 	.word	0x0800060f
		{
		case 0x01:
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 8000558:	2201      	movs	r2, #1
 800055a:	2108      	movs	r1, #8
 800055c:	483a      	ldr	r0, [pc, #232]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 800055e:	f001 fc37 	bl	8001dd0 <HAL_GPIO_WritePin>
			readCoils();
 8000562:	f000 fb35 	bl	8000bd0 <readCoils>
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	4837      	ldr	r0, [pc, #220]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 800056c:	f001 fc30 	bl	8001dd0 <HAL_GPIO_WritePin>
			break;
 8000570:	e05e      	b.n	8000630 <HAL_UARTEx_RxEventCallback+0x158>
		case 0x02:
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	2108      	movs	r1, #8
 8000576:	4834      	ldr	r0, [pc, #208]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 8000578:	f001 fc2a 	bl	8001dd0 <HAL_GPIO_WritePin>
			readInputs();
 800057c:	f000 fbd6 	bl	8000d2c <readInputs>
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2108      	movs	r1, #8
 8000584:	4830      	ldr	r0, [pc, #192]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 8000586:	f001 fc23 	bl	8001dd0 <HAL_GPIO_WritePin>
			break;
 800058a:	e051      	b.n	8000630 <HAL_UARTEx_RxEventCallback+0x158>
		case 0x03:
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	2108      	movs	r1, #8
 8000590:	482d      	ldr	r0, [pc, #180]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 8000592:	f001 fc1d 	bl	8001dd0 <HAL_GPIO_WritePin>
			readHoldingRegs();
 8000596:	f000 fa37 	bl	8000a08 <readHoldingRegs>
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	482a      	ldr	r0, [pc, #168]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 80005a0:	f001 fc16 	bl	8001dd0 <HAL_GPIO_WritePin>
			break;
 80005a4:	e044      	b.n	8000630 <HAL_UARTEx_RxEventCallback+0x158>
		case 0x04:
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2108      	movs	r1, #8
 80005aa:	4827      	ldr	r0, [pc, #156]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 80005ac:	f001 fc10 	bl	8001dd0 <HAL_GPIO_WritePin>
			readInputRegs();
 80005b0:	f000 fa9c 	bl	8000aec <readInputRegs>
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4823      	ldr	r0, [pc, #140]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 80005ba:	f001 fc09 	bl	8001dd0 <HAL_GPIO_WritePin>
			break;
 80005be:	e037      	b.n	8000630 <HAL_UARTEx_RxEventCallback+0x158>
		case 0x05:
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2108      	movs	r1, #8
 80005c4:	4820      	ldr	r0, [pc, #128]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 80005c6:	f001 fc03 	bl	8001dd0 <HAL_GPIO_WritePin>
			writeSingleCoil();
 80005ca:	f000 fd21 	bl	8001010 <writeSingleCoil>
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2108      	movs	r1, #8
 80005d2:	481d      	ldr	r0, [pc, #116]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 80005d4:	f001 fbfc 	bl	8001dd0 <HAL_GPIO_WritePin>
			break;
 80005d8:	e02a      	b.n	8000630 <HAL_UARTEx_RxEventCallback+0x158>
		case 0x06:
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	2108      	movs	r1, #8
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 80005e0:	f001 fbf6 	bl	8001dd0 <HAL_GPIO_WritePin>
			writeSingleReg();
 80005e4:	f000 fcca 	bl	8000f7c <writeSingleReg>
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	4816      	ldr	r0, [pc, #88]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 80005ee:	f001 fbef 	bl	8001dd0 <HAL_GPIO_WritePin>
			break;
 80005f2:	e01d      	b.n	8000630 <HAL_UARTEx_RxEventCallback+0x158>
		case 0x0F:
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2108      	movs	r1, #8
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 80005fa:	f001 fbe9 	bl	8001dd0 <HAL_GPIO_WritePin>
			writeMultiCoils();
 80005fe:	f000 fd81 	bl	8001104 <writeMultiCoils>
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2108      	movs	r1, #8
 8000606:	4810      	ldr	r0, [pc, #64]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 8000608:	f001 fbe2 	bl	8001dd0 <HAL_GPIO_WritePin>
			break;
 800060c:	e010      	b.n	8000630 <HAL_UARTEx_RxEventCallback+0x158>
		case 0x16:
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	2108      	movs	r1, #8
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 8000614:	f001 fbdc 	bl	8001dd0 <HAL_GPIO_WritePin>
			writeHoldingRegs();
 8000618:	f000 fc36 	bl	8000e88 <writeHoldingRegs>
			HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2108      	movs	r1, #8
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <HAL_UARTEx_RxEventCallback+0x170>)
 8000622:	f001 fbd5 	bl	8001dd0 <HAL_GPIO_WritePin>
			break;
 8000626:	e003      	b.n	8000630 <HAL_UARTEx_RxEventCallback+0x158>
		default:
			modbusException(ILLEGAL_FUNCTION);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 f9cd 	bl	80009c8 <modbusException>
			break;
 800062e:	bf00      	nop
		}
	}

	HAL_UARTEx_ReceiveToIdle_IT(&huart1,RxData, 256);
 8000630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000634:	4903      	ldr	r1, [pc, #12]	; (8000644 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <HAL_UARTEx_RxEventCallback+0x174>)
 8000638:	f005 fa9d 	bl	8005b76 <HAL_UARTEx_ReceiveToIdle_IT>

}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000538 	.word	0x20000538
 8000648:	48000800 	.word	0x48000800
 800064c:	200000b0 	.word	0x200000b0

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fff8 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f81c 	bl	8000694 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800065c:	f000 f890 	bl	8000780 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f926 	bl	80008b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000664:	f000 f8b0 	bl	80007c8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000668:	f000 f8fa 	bl	8000860 <MX_USB_PCD_Init>
  MX_MEMORYMAP_Init();
 800066c:	f000 f8a5 	bl	80007ba <MX_MEMORYMAP_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2108      	movs	r1, #8
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <main+0x38>)
 8000676:	f001 fbab 	bl	8001dd0 <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 800067a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800067e:	4903      	ldr	r1, [pc, #12]	; (800068c <main+0x3c>)
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <main+0x40>)
 8000682:	f005 fa78 	bl	8005b76 <HAL_UARTEx_ReceiveToIdle_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000686:	e7fe      	b.n	8000686 <main+0x36>
 8000688:	48000800 	.word	0x48000800
 800068c:	20000538 	.word	0x20000538
 8000690:	200000b0 	.word	0x200000b0

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09a      	sub	sp, #104	; 0x68
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2248      	movs	r2, #72	; 0x48
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 fb42 	bl	8005d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006c8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80006ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	f023 0303 	bic.w	r3, r3, #3
 80006d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006de:	f001 fc93 	bl	8002008 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fec8 	bl	8000478 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <SystemClock_Config+0xe8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006f0:	4a22      	ldr	r2, [pc, #136]	; (800077c <SystemClock_Config+0xe8>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b20      	ldr	r3, [pc, #128]	; (800077c <SystemClock_Config+0xe8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000704:	2327      	movs	r3, #39	; 0x27
 8000706:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000720:	2300      	movs	r3, #0
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000724:	2360      	movs	r3, #96	; 0x60
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fffd 	bl	8002730 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800073c:	f000 f912 	bl	8000964 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000740:	236f      	movs	r3, #111	; 0x6f
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000744:	2302      	movs	r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2101      	movs	r1, #1
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fb59 	bl	8002e18 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800076c:	f000 f8fa 	bl	8000964 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000770:	f003 f914 	bl	800399c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000774:	bf00      	nop
 8000776:	3768      	adds	r7, #104	; 0x68
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58000400 	.word	0x58000400

08000780 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2250      	movs	r2, #80	; 0x50
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f005 facd 	bl	8005d2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000796:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800079c:	2300      	movs	r3, #0
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 ff84 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80007ae:	f000 f8d9 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007ce:	4a23      	ldr	r2, [pc, #140]	; (800085c <MX_USART1_UART_Init+0x94>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_USART1_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_USART1_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000812:	f003 f9fa 	bl	8003c0a <HAL_UART_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800081c:	f000 f8a2 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000824:	f005 f92b 	bl	8005a7e <HAL_UARTEx_SetTxFifoThreshold>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800082e:	f000 f899 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000832:	2100      	movs	r1, #0
 8000834:	4808      	ldr	r0, [pc, #32]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000836:	f005 f960 	bl	8005afa <HAL_UARTEx_SetRxFifoThreshold>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000840:	f000 f890 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_USART1_UART_Init+0x90>)
 8000846:	f005 f8e1 	bl	8005a0c <HAL_UARTEx_DisableFifoMode>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000850:	f000 f888 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000b0 	.word	0x200000b0
 800085c:	40013800 	.word	0x40013800

08000860 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <MX_USB_PCD_Init+0x4c>)
 8000868:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 800086c:	2208      	movs	r2, #8
 800086e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 8000872:	2202      	movs	r2, #2
 8000874:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 8000878:	2202      	movs	r2, #2
 800087a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_USB_PCD_Init+0x48>)
 8000896:	f001 fab3 	bl	8001e00 <HAL_PCD_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80008a0:	f000 f860 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000144 	.word	0x20000144
 80008ac:	40006800 	.word	0x40006800

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	2004      	movs	r0, #4
 80008c6:	f7ff fded 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2002      	movs	r0, #2
 80008cc:	f7ff fdea 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff fde7 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	2008      	movs	r0, #8
 80008d8:	f7ff fde4 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2108      	movs	r1, #8
 80008e0:	481d      	ldr	r0, [pc, #116]	; (8000958 <MX_GPIO_Init+0xa8>)
 80008e2:	f001 fa75 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2123      	movs	r1, #35	; 0x23
 80008ea:	481c      	ldr	r0, [pc, #112]	; (800095c <MX_GPIO_Init+0xac>)
 80008ec:	f001 fa70 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 80008f0:	2308      	movs	r3, #8
 80008f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_GPIO_Init+0xa8>)
 8000906:	f001 f8f3 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090a:	2310      	movs	r3, #16
 800090c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <MX_GPIO_Init+0xa8>)
 800091c:	f001 f8e8 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000920:	2323      	movs	r3, #35	; 0x23
 8000922:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <MX_GPIO_Init+0xac>)
 8000936:	f001 f8db 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800093a:	2303      	movs	r3, #3
 800093c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_GPIO_Init+0xb0>)
 800094c:	f001 f8d0 	bl	8001af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	48000800 	.word	0x48000800
 800095c:	48000400 	.word	0x48000400
 8000960:	48000c00 	.word	0x48000c00

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <sendData>:
extern uint8_t TxData[256];
extern UART_HandleTypeDef huart1;


void sendData (uint8_t *data, int size)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	4619      	mov	r1, r3
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 fc75 	bl	8001270 <crc16>
 8000986:	4603      	mov	r3, r0
 8000988:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	89fa      	ldrh	r2, [r7, #14]
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	b299      	uxth	r1, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	b2ca      	uxtb	r2, r1
 80009a6:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	3302      	adds	r3, #2
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	4803      	ldr	r0, [pc, #12]	; (80009c4 <sendData+0x54>)
 80009b8:	f003 f977 	bl	8003caa <HAL_UART_Transmit>
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000b0 	.word	0x200000b0

080009c8 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <modbusException+0x38>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <modbusException+0x3c>)
 80009d8:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <modbusException+0x38>)
 80009dc:	785b      	ldrb	r3, [r3, #1]
 80009de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <modbusException+0x3c>)
 80009e6:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <modbusException+0x3c>)
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	7093      	strb	r3, [r2, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 80009ee:	2103      	movs	r1, #3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <modbusException+0x3c>)
 80009f2:	f7ff ffbd 	bl	8000970 <sendData>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000538 	.word	0x20000538
 8000a04:	20000438 	.word	0x20000438

08000a08 <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <readHoldingRegs+0xd8>)
 8000a10:	789b      	ldrb	r3, [r3, #2]
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <readHoldingRegs+0xd8>)
 8000a18:	78db      	ldrb	r3, [r3, #3]
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000a22:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <readHoldingRegs+0xd8>)
 8000a24:	791b      	ldrb	r3, [r3, #4]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <readHoldingRegs+0xd8>)
 8000a2c:	795b      	ldrb	r3, [r3, #5]
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <readHoldingRegs+0x3a>
 8000a3c:	887b      	ldrh	r3, [r7, #2]
 8000a3e:	2b7d      	cmp	r3, #125	; 0x7d
 8000a40:	d904      	bls.n	8000a4c <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000a42:	2003      	movs	r0, #3
 8000a44:	f7ff ffc0 	bl	80009c8 <modbusException>
		return 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e044      	b.n	8000ad6 <readHoldingRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000a4c:	89fa      	ldrh	r2, [r7, #14]
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	4413      	add	r3, r2
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	3b01      	subs	r3, #1
 8000a56:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8000a58:	883b      	ldrh	r3, [r7, #0]
 8000a5a:	2b31      	cmp	r3, #49	; 0x31
 8000a5c:	d904      	bls.n	8000a68 <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f7ff ffb2 	bl	80009c8 <modbusException>
		return 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e036      	b.n	8000ad6 <readHoldingRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <readHoldingRegs+0xdc>)
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <readHoldingRegs+0xd8>)
 8000a70:	785a      	ldrb	r2, [r3, #1]
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <readHoldingRegs+0xdc>)
 8000a74:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <readHoldingRegs+0xdc>)
 8000a80:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000a82:	2303      	movs	r3, #3
 8000a84:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	e01b      	b.n	8000ac4 <readHoldingRegs+0xbc>
	{
		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8000a8c:	89fb      	ldrh	r3, [r7, #14]
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <readHoldingRegs+0xe0>)
 8000a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	b299      	uxth	r1, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	b2c9      	uxtb	r1, r1
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <readHoldingRegs+0xdc>)
 8000aa2:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <readHoldingRegs+0xe0>)
 8000aa8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	b2c9      	uxtb	r1, r1
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <readHoldingRegs+0xdc>)
 8000ab6:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
 8000aba:	3301      	adds	r3, #1
 8000abc:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbdf      	blt.n	8000a8c <readHoldingRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <readHoldingRegs+0xdc>)
 8000ad0:	f7ff ff4e 	bl	8000970 <sendData>
	return 1;   // success
 8000ad4:	2301      	movs	r3, #1
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000538 	.word	0x20000538
 8000ae4:	20000438 	.word	0x20000438
 8000ae8:	20000008 	.word	0x20000008

08000aec <readInputRegs>:

uint8_t readInputRegs (void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <readInputRegs+0xd8>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <readInputRegs+0xd8>)
 8000afc:	78db      	ldrb	r3, [r3, #3]
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <readInputRegs+0xd8>)
 8000b08:	791b      	ldrb	r3, [r3, #4]
 8000b0a:	021b      	lsls	r3, r3, #8
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <readInputRegs+0xd8>)
 8000b10:	795b      	ldrb	r3, [r3, #5]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <readInputRegs+0x3a>
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	2b7d      	cmp	r3, #125	; 0x7d
 8000b24:	d904      	bls.n	8000b30 <readInputRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000b26:	2003      	movs	r0, #3
 8000b28:	f7ff ff4e 	bl	80009c8 <modbusException>
		return 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e044      	b.n	8000bba <readInputRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000b30:	89fa      	ldrh	r2, [r7, #14]
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	4413      	add	r3, r2
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8000b3c:	883b      	ldrh	r3, [r7, #0]
 8000b3e:	2b31      	cmp	r3, #49	; 0x31
 8000b40:	d904      	bls.n	8000b4c <readInputRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000b42:	2002      	movs	r0, #2
 8000b44:	f7ff ff40 	bl	80009c8 <modbusException>
		return 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e036      	b.n	8000bba <readInputRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <readInputRegs+0xdc>)
 8000b4e:	2207      	movs	r2, #7
 8000b50:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <readInputRegs+0xd8>)
 8000b54:	785a      	ldrb	r2, [r3, #1]
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <readInputRegs+0xdc>)
 8000b58:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <readInputRegs+0xdc>)
 8000b64:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000b66:	2303      	movs	r3, #3
 8000b68:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	e01b      	b.n	8000ba8 <readInputRegs+0xbc>
	{
		TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <readInputRegs+0xe0>)
 8000b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	b299      	uxth	r1, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2c9      	uxtb	r1, r1
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <readInputRegs+0xdc>)
 8000b86:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8000b88:	89fb      	ldrh	r3, [r7, #14]
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <readInputRegs+0xe0>)
 8000b8c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	b2c9      	uxtb	r1, r1
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <readInputRegs+0xdc>)
 8000b9a:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8000b9c:	89fb      	ldrh	r3, [r7, #14]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbdf      	blt.n	8000b70 <readInputRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <readInputRegs+0xdc>)
 8000bb4:	f7ff fedc 	bl	8000970 <sendData>
	return 1;   // success
 8000bb8:	2301      	movs	r3, #1
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000538 	.word	0x20000538
 8000bc8:	20000438 	.word	0x20000438
 8000bcc:	08005dc8 	.word	0x08005dc8

08000bd0 <readCoils>:

uint8_t readCoils (void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <readCoils+0x150>)
 8000bd8:	789b      	ldrb	r3, [r3, #2]
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	4b50      	ldr	r3, [pc, #320]	; (8000d20 <readCoils+0x150>)
 8000be0:	78db      	ldrb	r3, [r3, #3]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8000bea:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <readCoils+0x150>)
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <readCoils+0x150>)
 8000bf4:	795b      	ldrb	r3, [r3, #5]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8000bfe:	893b      	ldrh	r3, [r7, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <readCoils+0x3c>
 8000c04:	893b      	ldrh	r3, [r7, #8]
 8000c06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c0a:	d904      	bls.n	8000c16 <readCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f7ff fedb 	bl	80009c8 <modbusException>
		return 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e080      	b.n	8000d18 <readCoils+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8000c16:	897a      	ldrh	r2, [r7, #10]
 8000c18:	893b      	ldrh	r3, [r7, #8]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	2bc7      	cmp	r3, #199	; 0xc7
 8000c26:	d904      	bls.n	8000c32 <readCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff fecd 	bl	80009c8 <modbusException>
		return 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e072      	b.n	8000d18 <readCoils+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 8000c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c36:	2100      	movs	r1, #0
 8000c38:	483a      	ldr	r0, [pc, #232]	; (8000d24 <readCoils+0x154>)
 8000c3a:	f005 f877 	bl	8005d2c <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <readCoils+0x154>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000c44:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <readCoils+0x150>)
 8000c46:	785a      	ldrb	r2, [r3, #1]
 8000c48:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <readCoils+0x154>)
 8000c4a:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8000c4c:	893b      	ldrh	r3, [r7, #8]
 8000c4e:	08db      	lsrs	r3, r3, #3
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	893a      	ldrh	r2, [r7, #8]
 8000c56:	f002 0207 	and.w	r2, r2, #7
 8000c5a:	b292      	uxth	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	bf14      	ite	ne
 8000c60:	2201      	movne	r2, #1
 8000c62:	2200      	moveq	r2, #0
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	4413      	add	r3, r2
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <readCoils+0x154>)
 8000c6c:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000c6e:	2303      	movs	r3, #3
 8000c70:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8000c72:	897b      	ldrh	r3, [r7, #10]
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8000c7a:	897b      	ldrh	r3, [r7, #10]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	e033      	b.n	8000cf4 <readCoils+0x124>
	{
		TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8000c8c:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <readCoils+0x154>)
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	4413      	add	r3, r2
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	4924      	ldr	r1, [pc, #144]	; (8000d28 <readCoils+0x158>)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	440b      	add	r3, r1
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	8afb      	ldrh	r3, [r7, #22]
 8000ca2:	fa41 f303 	asr.w	r3, r1, r3
 8000ca6:	f003 0101 	and.w	r1, r3, #1
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	b2d9      	uxtb	r1, r3
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <readCoils+0x154>)
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	8afb      	ldrh	r3, [r7, #22]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	dd04      	ble.n	8000cde <readCoils+0x10e>
		{
			indxPosition = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
			indx++;
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8000cde:	8afb      	ldrh	r3, [r7, #22]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d904      	bls.n	8000cee <readCoils+0x11e>
		{
			bitPosition=0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	3301      	adds	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	893b      	ldrh	r3, [r7, #8]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbc7      	blt.n	8000c8c <readCoils+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8000cfc:	893b      	ldrh	r3, [r7, #8]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d002      	beq.n	8000d0e <readCoils+0x13e>
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000d0e:	69f9      	ldr	r1, [r7, #28]
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <readCoils+0x154>)
 8000d12:	f7ff fe2d 	bl	8000970 <sendData>
	return 1;   // success
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000538 	.word	0x20000538
 8000d24:	20000438 	.word	0x20000438
 8000d28:	2000006c 	.word	0x2000006c

08000d2c <readInputs>:

uint8_t readInputs (void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000d32:	4b52      	ldr	r3, [pc, #328]	; (8000e7c <readInputs+0x150>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	4b50      	ldr	r3, [pc, #320]	; (8000e7c <readInputs+0x150>)
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8000d46:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <readInputs+0x150>)
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <readInputs+0x150>)
 8000d50:	795b      	ldrb	r3, [r3, #5]
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8000d5a:	893b      	ldrh	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <readInputs+0x3c>
 8000d60:	893b      	ldrh	r3, [r7, #8]
 8000d62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d66:	d904      	bls.n	8000d72 <readInputs+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f7ff fe2d 	bl	80009c8 <modbusException>
		return 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e080      	b.n	8000e74 <readInputs+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8000d72:	897a      	ldrh	r2, [r7, #10]
 8000d74:	893b      	ldrh	r3, [r7, #8]
 8000d76:	4413      	add	r3, r2
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	2bc7      	cmp	r3, #199	; 0xc7
 8000d82:	d904      	bls.n	8000d8e <readInputs+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000d84:	2002      	movs	r0, #2
 8000d86:	f7ff fe1f 	bl	80009c8 <modbusException>
		return 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e072      	b.n	8000e74 <readInputs+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 8000d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d92:	2100      	movs	r1, #0
 8000d94:	483a      	ldr	r0, [pc, #232]	; (8000e80 <readInputs+0x154>)
 8000d96:	f004 ffc9 	bl	8005d2c <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000d9a:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <readInputs+0x154>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <readInputs+0x150>)
 8000da2:	785a      	ldrb	r2, [r3, #1]
 8000da4:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <readInputs+0x154>)
 8000da6:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8000da8:	893b      	ldrh	r3, [r7, #8]
 8000daa:	08db      	lsrs	r3, r3, #3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	893a      	ldrh	r2, [r7, #8]
 8000db2:	f002 0207 	and.w	r2, r2, #7
 8000db6:	b292      	uxth	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2201      	movne	r2, #1
 8000dbe:	2200      	moveq	r2, #0
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <readInputs+0x154>)
 8000dc8:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8000dce:	897b      	ldrh	r3, [r7, #10]
 8000dd0:	08db      	lsrs	r3, r3, #3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8000dd6:	897b      	ldrh	r3, [r7, #10]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e033      	b.n	8000e50 <readInputs+0x124>
	{
		TxData[indx] |= ((Inputs_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8000de8:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <readInputs+0x154>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	4924      	ldr	r1, [pc, #144]	; (8000e84 <readInputs+0x158>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	440b      	add	r3, r1
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	fa41 f303 	asr.w	r3, r1, r3
 8000e02:	f003 0101 	and.w	r1, r3, #1
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	b2d9      	uxtb	r1, r3
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <readInputs+0x154>)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	460a      	mov	r2, r1
 8000e1c:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	3301      	adds	r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	8afb      	ldrh	r3, [r7, #22]
 8000e26:	3301      	adds	r3, #1
 8000e28:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b07      	cmp	r3, #7
 8000e2e:	dd04      	ble.n	8000e3a <readInputs+0x10e>
		{
			indxPosition = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
			indx++;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	3301      	adds	r3, #1
 8000e38:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8000e3a:	8afb      	ldrh	r3, [r7, #22]
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	d904      	bls.n	8000e4a <readInputs+0x11e>
		{
			bitPosition=0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	3301      	adds	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	893b      	ldrh	r3, [r7, #8]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbc7      	blt.n	8000de8 <readInputs+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8000e58:	893b      	ldrh	r3, [r7, #8]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <readInputs+0x13e>
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	3301      	adds	r3, #1
 8000e68:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000e6a:	69f9      	ldr	r1, [r7, #28]
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <readInputs+0x154>)
 8000e6e:	f7ff fd7f 	bl	8000970 <sendData>
	return 1;   // success
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000538 	.word	0x20000538
 8000e80:	20000438 	.word	0x20000438
 8000e84:	08005e2c 	.word	0x08005e2c

08000e88 <writeHoldingRegs>:

uint8_t writeHoldingRegs (void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000e90:	789b      	ldrb	r3, [r3, #2]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000e98:	78db      	ldrb	r3, [r3, #3]
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000eac:	795b      	ldrb	r3, [r3, #5]
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <writeHoldingRegs+0x3a>
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	2b7b      	cmp	r3, #123	; 0x7b
 8000ec0:	d904      	bls.n	8000ecc <writeHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f7ff fd80 	bl	80009c8 <modbusException>
		return 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e04c      	b.n	8000f66 <writeHoldingRegs+0xde>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000ecc:	89fa      	ldrh	r2, [r7, #14]
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	2b31      	cmp	r3, #49	; 0x31
 8000edc:	d904      	bls.n	8000ee8 <writeHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f7ff fd72 	bl	80009c8 <modbusException>
		return 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e03e      	b.n	8000f66 <writeHoldingRegs+0xde>

	/* start saving 16 bit data
	 * Data starts from RxData[7] and we need to combine 2 bytes together
	 * 16 bit Data = firstByte<<8|secondByte
	 */
	int indx = 7;  // we need to keep track of index in RxData
 8000ee8:	2307      	movs	r3, #7
 8000eea:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<numRegs; i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	e019      	b.n	8000f26 <writeHoldingRegs+0x9e>
	{
		Holding_Registers_Database[startAddr++] = (RxData[indx++]<<8)|RxData[indx++];
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60ba      	str	r2, [r7, #8]
 8000ef8:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c59      	adds	r1, r3, #1
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	491a      	ldr	r1, [pc, #104]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000f08:	5ccb      	ldrb	r3, [r1, r3]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b219      	sxth	r1, r3
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	81fa      	strh	r2, [r7, #14]
 8000f16:	461a      	mov	r2, r3
 8000f18:	b289      	uxth	r1, r1
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <writeHoldingRegs+0xec>)
 8000f1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<numRegs; i++)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dbe1      	blt.n	8000ef2 <writeHoldingRegs+0x6a>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <writeHoldingRegs+0xf0>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000f36:	785a      	ldrb	r2, [r3, #1]
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <writeHoldingRegs+0xf0>)
 8000f3a:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000f3e:	789a      	ldrb	r2, [r3, #2]
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <writeHoldingRegs+0xf0>)
 8000f42:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000f46:	78da      	ldrb	r2, [r3, #3]
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <writeHoldingRegs+0xf0>)
 8000f4a:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of Regs HIGH Byte
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000f4e:	791a      	ldrb	r2, [r3, #4]
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <writeHoldingRegs+0xf0>)
 8000f52:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of Regs LOW Byte
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <writeHoldingRegs+0xe8>)
 8000f56:	795a      	ldrb	r2, [r3, #5]
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <writeHoldingRegs+0xf0>)
 8000f5a:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8000f5c:	2106      	movs	r1, #6
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <writeHoldingRegs+0xf0>)
 8000f60:	f7ff fd06 	bl	8000970 <sendData>
	return 1;   // success
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000538 	.word	0x20000538
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000438 	.word	0x20000438

08000f7c <writeSingleReg>:

uint8_t writeSingleReg (void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <writeSingleReg+0x88>)
 8000f84:	789b      	ldrb	r3, [r3, #2]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <writeSingleReg+0x88>)
 8000f8c:	78db      	ldrb	r3, [r3, #3]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	80fb      	strh	r3, [r7, #6]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b31      	cmp	r3, #49	; 0x31
 8000f9a:	d904      	bls.n	8000fa6 <writeSingleReg+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f7ff fd13 	bl	80009c8 <modbusException>
		return 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e029      	b.n	8000ffa <writeSingleReg+0x7e>

	/* Save the 16 bit data
	 * Data is the combination of 2 bytes, RxData[4] and RxData[5]
	 */

	Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <writeSingleReg+0x88>)
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <writeSingleReg+0x88>)
 8000fb0:	795b      	ldrb	r3, [r3, #5]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	b291      	uxth	r1, r2
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <writeSingleReg+0x8c>)
 8000fbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <writeSingleReg+0x90>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <writeSingleReg+0x88>)
 8000fca:	785a      	ldrb	r2, [r3, #1]
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <writeSingleReg+0x90>)
 8000fce:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <writeSingleReg+0x88>)
 8000fd2:	789a      	ldrb	r2, [r3, #2]
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <writeSingleReg+0x90>)
 8000fd6:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <writeSingleReg+0x88>)
 8000fda:	78da      	ldrb	r2, [r3, #3]
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <writeSingleReg+0x90>)
 8000fde:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Reg Data HIGH Byte
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <writeSingleReg+0x88>)
 8000fe2:	791a      	ldrb	r2, [r3, #4]
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <writeSingleReg+0x90>)
 8000fe6:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Reg Data LOW  Byte
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <writeSingleReg+0x88>)
 8000fea:	795a      	ldrb	r2, [r3, #5]
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <writeSingleReg+0x90>)
 8000fee:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8000ff0:	2106      	movs	r1, #6
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <writeSingleReg+0x90>)
 8000ff4:	f7ff fcbc 	bl	8000970 <sendData>
	return 1;   // success
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000538 	.word	0x20000538
 8001008:	20000008 	.word	0x20000008
 800100c:	20000438 	.word	0x20000438

08001010 <writeSingleCoil>:

uint8_t writeSingleCoil (void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <writeSingleCoil+0xe8>)
 8001018:	789b      	ldrb	r3, [r3, #2]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <writeSingleCoil+0xe8>)
 8001020:	78db      	ldrb	r3, [r3, #3]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	81fb      	strh	r3, [r7, #14]

	if (startAddr>199)  // The Coil Address can not be more than 199 as we only have record of 200 Coils in total
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	2bc7      	cmp	r3, #199	; 0xc7
 800102e:	d904      	bls.n	800103a <writeSingleCoil+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff fcc9 	bl	80009c8 <modbusException>
		return 0;
 8001036:	2300      	movs	r3, #0
 8001038:	e05a      	b.n	80010f0 <writeSingleCoil+0xe0>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	b29b      	uxth	r3, r3
 8001040:	60bb      	str	r3, [r7, #8]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	80fb      	strh	r3, [r7, #6]
	 * A value of FF 00 hex requests the coil to be ON.
	 * A value of 00 00 requests it to be OFF.
	 * All other values are illegal and will not affect the coil.
	 */

	if ((RxData[4] == 0xFF) && (RxData[5] == 0x00))
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <writeSingleCoil+0xe8>)
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	2bff      	cmp	r3, #255	; 0xff
 8001050:	d116      	bne.n	8001080 <writeSingleCoil+0x70>
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <writeSingleCoil+0xe8>)
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d112      	bne.n	8001080 <writeSingleCoil+0x70>
	{
		Coils_Database[startByte] |= 1<<bitPosition; // Replace that bit with 1
 800105a:	4a28      	ldr	r2, [pc, #160]	; (80010fc <writeSingleCoil+0xec>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25a      	sxtb	r2, r3
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	b2d9      	uxtb	r1, r3
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <writeSingleCoil+0xec>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e01b      	b.n	80010b8 <writeSingleCoil+0xa8>
	}

	else if ((RxData[4] == 0x00) && (RxData[5] == 0x00))
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <writeSingleCoil+0xe8>)
 8001082:	791b      	ldrb	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d117      	bne.n	80010b8 <writeSingleCoil+0xa8>
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <writeSingleCoil+0xe8>)
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d113      	bne.n	80010b8 <writeSingleCoil+0xa8>
	{
		Coils_Database[startByte] &= ~(1<<bitPosition); // Replace that bit with 0
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <writeSingleCoil+0xec>)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b25a      	sxtb	r2, r3
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2d9      	uxtb	r1, r3
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <writeSingleCoil+0xec>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	460a      	mov	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <writeSingleCoil+0xf0>)
 80010ba:	2207      	movs	r2, #7
 80010bc:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <writeSingleCoil+0xe8>)
 80010c0:	785a      	ldrb	r2, [r3, #1]
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <writeSingleCoil+0xf0>)
 80010c4:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <writeSingleCoil+0xe8>)
 80010c8:	789a      	ldrb	r2, [r3, #2]
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <writeSingleCoil+0xf0>)
 80010cc:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <writeSingleCoil+0xe8>)
 80010d0:	78da      	ldrb	r2, [r3, #3]
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <writeSingleCoil+0xf0>)
 80010d4:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Coil Data HIGH Byte
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <writeSingleCoil+0xe8>)
 80010d8:	791a      	ldrb	r2, [r3, #4]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <writeSingleCoil+0xf0>)
 80010dc:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Coil Data LOW  Byte
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <writeSingleCoil+0xe8>)
 80010e0:	795a      	ldrb	r2, [r3, #5]
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <writeSingleCoil+0xf0>)
 80010e4:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 80010e6:	2106      	movs	r1, #6
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <writeSingleCoil+0xf0>)
 80010ea:	f7ff fc41 	bl	8000970 <sendData>
	return 1;   // success
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000538 	.word	0x20000538
 80010fc:	2000006c 	.word	0x2000006c
 8001100:	20000438 	.word	0x20000438

08001104 <writeMultiCoils>:

uint8_t writeMultiCoils (void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 800110a:	4b56      	ldr	r3, [pc, #344]	; (8001264 <writeMultiCoils+0x160>)
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b54      	ldr	r3, [pc, #336]	; (8001264 <writeMultiCoils+0x160>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 800111e:	4b51      	ldr	r3, [pc, #324]	; (8001264 <writeMultiCoils+0x160>)
 8001120:	791b      	ldrb	r3, [r3, #4]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <writeMultiCoils+0x160>)
 8001128:	795b      	ldrb	r3, [r3, #5]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21b      	sxth	r3, r3
 8001130:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>1968))  // maximum no. of coils as per the PDF
 8001132:	893b      	ldrh	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <writeMultiCoils+0x3c>
 8001138:	893b      	ldrh	r3, [r7, #8]
 800113a:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 800113e:	d904      	bls.n	800114a <writeMultiCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8001140:	2003      	movs	r0, #3
 8001142:	f7ff fc41 	bl	80009c8 <modbusException>
		return 0;
 8001146:	2300      	movs	r3, #0
 8001148:	e088      	b.n	800125c <writeMultiCoils+0x158>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 800114a:	897a      	ldrh	r2, [r7, #10]
 800114c:	893b      	ldrh	r3, [r7, #8]
 800114e:	4413      	add	r3, r2
 8001150:	b29b      	uxth	r3, r3
 8001152:	3b01      	subs	r3, #1
 8001154:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	2bc7      	cmp	r3, #199	; 0xc7
 800115a:	d904      	bls.n	8001166 <writeMultiCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800115c:	2002      	movs	r0, #2
 800115e:	f7ff fc33 	bl	80009c8 <modbusException>
		return 0;
 8001162:	2300      	movs	r3, #0
 8001164:	e07a      	b.n	800125c <writeMultiCoils+0x158>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 8001166:	897b      	ldrh	r3, [r7, #10]
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	b29b      	uxth	r3, r3
 800116c:	61fb      	str	r3, [r7, #28]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	837b      	strh	r3, [r7, #26]
	int indxPosition = 0;  // The shift position in the current indx of the RxData buffer
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]

	int indx = 7;  // we need to keep track of index in RxData
 800117a:	2307      	movs	r3, #7
 800117c:	613b      	str	r3, [r7, #16]
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy from the next byte of the RxData
	 * This keeps going until the number of coils required have been modified
	 */

	// Modify the bits as per the Byte received
	for (int i=0; i<numCoils; i++)
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e04b      	b.n	800121c <writeMultiCoils+0x118>
	{
		if (((RxData[indx]>>indxPosition)&0x01) == 1)
 8001184:	4a37      	ldr	r2, [pc, #220]	; (8001264 <writeMultiCoils+0x160>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa42 f303 	asr.w	r3, r2, r3
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d012      	beq.n	80011c2 <writeMultiCoils+0xbe>
		{
			Coils_Database[startByte] |= 1<<bitPosition;  // replace that bit with 1
 800119c:	4a32      	ldr	r2, [pc, #200]	; (8001268 <writeMultiCoils+0x164>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	8b7b      	ldrh	r3, [r7, #26]
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	b2d9      	uxtb	r1, r3
 80011b6:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <writeMultiCoils+0x164>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	4413      	add	r3, r2
 80011bc:	460a      	mov	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e013      	b.n	80011ea <writeMultiCoils+0xe6>
		}
		else
		{
			Coils_Database[startByte] &= ~(1<<bitPosition);  // replace that bit with 0
 80011c2:	4a29      	ldr	r2, [pc, #164]	; (8001268 <writeMultiCoils+0x164>)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25a      	sxtb	r2, r3
 80011cc:	8b7b      	ldrh	r3, [r7, #26]
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4013      	ands	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2d9      	uxtb	r1, r3
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <writeMultiCoils+0x164>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	4413      	add	r3, r2
 80011e6:	460a      	mov	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
		}

		bitPosition++; indxPosition++;
 80011ea:	8b7b      	ldrh	r3, [r7, #26]
 80011ec:	3301      	adds	r3, #1
 80011ee:	837b      	strh	r3, [r7, #26]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]

		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b07      	cmp	r3, #7
 80011fa:	dd04      	ble.n	8001206 <writeMultiCoils+0x102>
		{
			indxPosition = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
			indx++;
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	3301      	adds	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8001206:	8b7b      	ldrh	r3, [r7, #26]
 8001208:	2b07      	cmp	r3, #7
 800120a:	d904      	bls.n	8001216 <writeMultiCoils+0x112>
		{
			bitPosition=0;
 800120c:	2300      	movs	r3, #0
 800120e:	837b      	strh	r3, [r7, #26]
			startByte++;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	3301      	adds	r3, #1
 8001214:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<numCoils; i++)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3301      	adds	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	893b      	ldrh	r3, [r7, #8]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbaf      	blt.n	8001184 <writeMultiCoils+0x80>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <writeMultiCoils+0x168>)
 8001226:	2207      	movs	r2, #7
 8001228:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <writeMultiCoils+0x160>)
 800122c:	785a      	ldrb	r2, [r3, #1]
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <writeMultiCoils+0x168>)
 8001230:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <writeMultiCoils+0x160>)
 8001234:	789a      	ldrb	r2, [r3, #2]
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <writeMultiCoils+0x168>)
 8001238:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <writeMultiCoils+0x160>)
 800123c:	78da      	ldrb	r2, [r3, #3]
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <writeMultiCoils+0x168>)
 8001240:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of coils HIGH Byte
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <writeMultiCoils+0x160>)
 8001244:	791a      	ldrb	r2, [r3, #4]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <writeMultiCoils+0x168>)
 8001248:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of coils LOW  Byte
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <writeMultiCoils+0x160>)
 800124c:	795a      	ldrb	r2, [r3, #5]
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <writeMultiCoils+0x168>)
 8001250:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8001252:	2106      	movs	r1, #6
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <writeMultiCoils+0x168>)
 8001256:	f7ff fb8b 	bl	8000970 <sendData>
	return 1;   // success
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000538 	.word	0x20000538
 8001268:	2000006c 	.word	0x2000006c
 800126c:	20000438 	.word	0x20000438

08001270 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001280:	23ff      	movs	r3, #255	; 0xff
 8001282:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001284:	e013      	b.n	80012ae <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	7bbb      	ldrb	r3, [r7, #14]
 8001290:	4053      	eors	r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <crc16+0x64>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4413      	add	r3, r2
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	4053      	eors	r3, r2
 80012a2:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <crc16+0x68>)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	807a      	strh	r2, [r7, #2]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1e6      	bne.n	8001286 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	b29b      	uxth	r3, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	08005e48 	.word	0x08005e48
 80012d8:	08005f48 	.word	0x08005f48

080012dc <LL_AHB2_GRP1_EnableClock>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800131c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4013      	ands	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800134e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b09c      	sub	sp, #112	; 0x70
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2250      	movs	r2, #80	; 0x50
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fcc3 	bl	8005d2c <memset>
  if(huart->Instance==USART1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_UART_MspInit+0x94>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d12c      	bne.n	800140a <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 f977 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013c8:	f7ff facc 	bl	8000964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013d0:	f7ff ffb6 	bl	8001340 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	2002      	movs	r0, #2
 80013d6:	f7ff ff81 	bl	80012dc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013da:	23c0      	movs	r3, #192	; 0xc0
 80013dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ea:	2307      	movs	r3, #7
 80013ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013f2:	4619      	mov	r1, r3
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <HAL_UART_MspInit+0x98>)
 80013f6:	f000 fb7b 	bl	8001af0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2024      	movs	r0, #36	; 0x24
 8001400:	f000 fa83 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001404:	2024      	movs	r0, #36	; 0x24
 8001406:	f000 fa9a 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3770      	adds	r7, #112	; 0x70
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40013800 	.word	0x40013800
 8001418:	48000400 	.word	0x48000400

0800141c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b09c      	sub	sp, #112	; 0x70
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2250      	movs	r2, #80	; 0x50
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fc75 	bl	8005d2c <memset>
  if(hpcd->Instance==USB)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <HAL_PCD_MspInit+0xa8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d136      	bne.n	80014ba <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001452:	2318      	movs	r3, #24
 8001454:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800145c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001460:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001462:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001466:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800146c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800146e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4618      	mov	r0, r3
 800147a:	f002 f919 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001484:	f7ff fa6e 	bl	8000964 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff ff27 	bl	80012dc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800148e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001492:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80014a0:	230a      	movs	r3, #10
 80014a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ae:	f000 fb1f 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80014b2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80014b6:	f7ff ff2a 	bl	800130e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3770      	adds	r7, #112	; 0x70
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40006800 	.word	0x40006800

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f8f2 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <USART1_IRQHandler+0x10>)
 8001522:	f002 fc51 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200000b0 	.word	0x200000b0

08001530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <SystemInit+0x98>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <SystemInit+0x98>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800155c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <SystemInit+0x9c>)
 800156a:	4013      	ands	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800157a:	f023 0305 	bic.w	r3, r3, #5
 800157e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800158a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159a:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <SystemInit+0xa0>)
 800159c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <SystemInit+0xa0>)
 80015a4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	faf6fefb 	.word	0xfaf6fefb
 80015d0:	22041000 	.word	0x22041000

080015d4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015d4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d8:	3304      	adds	r3, #4

080015da <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015da:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015dc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015de:	d3f9      	bcc.n	80015d4 <CopyDataInit>
  bx lr
 80015e0:	4770      	bx	lr

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015e2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015e4:	3004      	adds	r0, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015e6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>
  bx lr
 80015ea:	4770      	bx	lr

080015ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f0:	f7ff ff9e 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <LoopForever+0x6>)
 80015f6:	490c      	ldr	r1, [pc, #48]	; (8001628 <LoopForever+0xa>)
 80015f8:	4a0c      	ldr	r2, [pc, #48]	; (800162c <LoopForever+0xe>)
 80015fa:	2300      	movs	r3, #0
 80015fc:	f7ff ffed 	bl	80015da <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <LoopForever+0x12>)
 8001602:	490c      	ldr	r1, [pc, #48]	; (8001634 <LoopForever+0x16>)
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <LoopForever+0x1a>)
 8001606:	2300      	movs	r3, #0
 8001608:	f7ff ffe7 	bl	80015da <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <LoopForever+0x1e>)
 800160e:	490c      	ldr	r1, [pc, #48]	; (8001640 <LoopForever+0x22>)
 8001610:	2300      	movs	r3, #0
 8001612:	f7ff ffe8 	bl	80015e6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001616:	f004 fb91 	bl	8005d3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800161a:	f7ff f819 	bl	8000650 <main>

0800161e <LoopForever>:

LoopForever:
  b LoopForever
 800161e:	e7fe      	b.n	800161e <LoopForever>
  ldr   r0, =_estack
 8001620:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001624:	20000008 	.word	0x20000008
 8001628:	20000094 	.word	0x20000094
 800162c:	08006120 	.word	0x08006120
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001630:	20030000 	.word	0x20030000
 8001634:	20030000 	.word	0x20030000
 8001638:	080061ac 	.word	0x080061ac
  INIT_BSS _sbss, _ebss
 800163c:	20000094 	.word	0x20000094
 8001640:	2000063c 	.word	0x2000063c

08001644 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_Init+0x3c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_Init+0x3c>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f000 f948 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001664:	2000      	movs	r0, #0
 8001666:	f000 f80f 	bl	8001688 <HAL_InitTick>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	e001      	b.n	800167a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001676:	f7ff fe7c 	bl	8001372 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800167a:	79fb      	ldrb	r3, [r7, #7]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58004000 	.word	0x58004000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_InitTick+0x6c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d024      	beq.n	80016e6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800169c:	f001 fd68 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_InitTick+0x6c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f950 	bl	800195a <HAL_SYSTICK_Config>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	d809      	bhi.n	80016da <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c6:	2200      	movs	r2, #0
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295
 80016ce:	f000 f91c 	bl	800190a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_InitTick+0x70>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e007      	b.n	80016ea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e004      	b.n	80016ea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e001      	b.n	80016ea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000090 	.word	0x20000090
 80016f8:	2000008c 	.word	0x2000008c

080016fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000090 	.word	0x20000090
 8001720:	20000638 	.word	0x20000638

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000638 	.word	0x20000638

0800173c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTickPrio+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000008c 	.word	0x2000008c

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff8e 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff29 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff40 	bl	800179c <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff90 	bl	8001848 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5f 	bl	80017f4 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff33 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa4 	bl	80018b0 <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e04f      	b.n	8001a24 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d008      	beq.n	80019a2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2204      	movs	r2, #4
 8001994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e040      	b.n	8001a24 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 020e 	bic.w	r2, r2, #14
 80019b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f003 021c 	and.w	r2, r3, #28
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00c      	beq.n	8001a12 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a10:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d005      	beq.n	8001a54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e047      	b.n	8001ae4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 020e 	bic.w	r2, r2, #14
 8001a62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f003 021c 	and.w	r2, r3, #28
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aa0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ac2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
    }
  }
  return status;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e14c      	b.n	8001d9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 813e 	beq.w	8001d94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d005      	beq.n	8001b30 <HAL_GPIO_Init+0x40>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d130      	bne.n	8001b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b66:	2201      	movs	r2, #1
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 0201 	and.w	r2, r3, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d017      	beq.n	8001bce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d123      	bne.n	8001c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	6939      	ldr	r1, [r7, #16]
 8001c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0203 	and.w	r2, r3, #3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8098 	beq.w	8001d94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c64:	4a54      	ldr	r2, [pc, #336]	; (8001db8 <HAL_GPIO_Init+0x2c8>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c8e:	d019      	beq.n	8001cc4 <HAL_GPIO_Init+0x1d4>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a4a      	ldr	r2, [pc, #296]	; (8001dbc <HAL_GPIO_Init+0x2cc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_GPIO_Init+0x1d0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a49      	ldr	r2, [pc, #292]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00d      	beq.n	8001cbc <HAL_GPIO_Init+0x1cc>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a48      	ldr	r2, [pc, #288]	; (8001dc4 <HAL_GPIO_Init+0x2d4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0x1c8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <HAL_GPIO_Init+0x2d8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_GPIO_Init+0x1c4>
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	e008      	b.n	8001cc6 <HAL_GPIO_Init+0x1d6>
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x1d6>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e004      	b.n	8001cc6 <HAL_GPIO_Init+0x1d6>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x1d6>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_GPIO_Init+0x1d6>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd6:	4938      	ldr	r1, [pc, #224]	; (8001db8 <HAL_GPIO_Init+0x2c8>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d08:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d32:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d5e:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f aeab 	bne.w	8001b00 <HAL_GPIO_Init+0x10>
  }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	48000400 	.word	0x48000400
 8001dc0:	48000800 	.word	0x48000800
 8001dc4:	48000c00 	.word	0x48000c00
 8001dc8:	48001000 	.word	0x48001000
 8001dcc:	58000800 	.word	0x58000800

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	b08b      	sub	sp, #44	; 0x2c
 8001e04:	af06      	add	r7, sp, #24
 8001e06:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0cb      	b.n	8001faa <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff faf8 	bl	800141c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 ff3b 	bl	8005cb4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e040      	b.n	8001ec6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3301      	adds	r3, #1
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3303      	adds	r3, #3
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	3338      	adds	r3, #56	; 0x38
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	333c      	adds	r3, #60	; 0x3c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	3340      	adds	r3, #64	; 0x40
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3b9      	bcc.n	8001e44 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e044      	b.n	8001f60 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d3b5      	bcc.n	8001ed6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	687e      	ldr	r6, [r7, #4]
 8001f72:	466d      	mov	r5, sp
 8001f74:	f106 0410 	add.w	r4, r6, #16
 8001f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	602b      	str	r3, [r5, #0]
 8001f80:	1d33      	adds	r3, r6, #4
 8001f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f84:	6838      	ldr	r0, [r7, #0]
 8001f86:	f003 feb0 	bl	8005cea <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f805 	bl	8001fb2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fb2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	58000400 	.word	0x58000400

08002028 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_PWREx_GetVoltageRange+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	58000400 	.word	0x58000400

08002044 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002056:	d101      	bne.n	800205c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_RCC_HSE_Enable>:
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_HSE_Disable>:
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_RCC_HSE_IsReady>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020b6:	d101      	bne.n	80020bc <LL_RCC_HSE_IsReady+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_RCC_HSE_IsReady+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_HSI_Enable>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_RCC_HSI_Disable>:
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_HSI_IsReady>:
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002116:	d101      	bne.n	800211c <LL_RCC_HSI_IsReady+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_RCC_HSI_IsReady+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RCC_HSI48_Enable>:
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800215e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_RCC_HSI48_Disable>:
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_HSI48_IsReady>:
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d101      	bne.n	80021ae <LL_RCC_HSI48_IsReady+0x18>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_RCC_HSI48_IsReady+0x1a>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_LSE_Enable>:
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_RCC_LSE_Disable>:
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_RCC_LSE_EnableBypass>:
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_RCC_LSE_DisableBypass>:
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d101      	bne.n	800225a <LL_RCC_LSE_IsReady+0x18>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <LL_RCC_LSE_IsReady+0x1a>
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d101      	bne.n	80022c2 <LL_RCC_LSI1_IsReady+0x18>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_RCC_LSI1_IsReady+0x1a>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b08      	cmp	r3, #8
 8002324:	d101      	bne.n	800232a <LL_RCC_LSI2_IsReady+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_RCC_LSI2_IsReady+0x1a>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002346:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6013      	str	r3, [r2, #0]
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d101      	bne.n	80023b6 <LL_RCC_MSI_IsReady+0x16>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_RCC_MSI_IsReady+0x18>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2bb0      	cmp	r3, #176	; 0xb0
 8002400:	d901      	bls.n	8002406 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002402:	23b0      	movs	r3, #176	; 0xb0
 8002404:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 030c 	and.w	r3, r3, #12
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024e2:	f023 020f 	bic.w	r2, r3, #15
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e4:	6013      	str	r3, [r2, #0]
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002602:	d101      	bne.n	8002608 <LL_RCC_PLL_IsReady+0x18>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <LL_RCC_PLL_IsReady+0x1a>
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0303 	and.w	r3, r3, #3
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d101      	bne.n	800268e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ae:	d101      	bne.n	80026b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d101      	bne.n	80026da <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026f8:	d101      	bne.n	80026fe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002718:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800271c:	d101      	bne.n	8002722 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b08d      	sub	sp, #52	; 0x34
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e363      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 808d 	beq.w	800286a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002750:	f7ff fe89 	bl	8002466 <LL_RCC_GetSysClkSource>
 8002754:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002756:	f7ff ff82 	bl	800265e <LL_RCC_PLL_GetMainSource>
 800275a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x3e>
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d147      	bne.n	80027f8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b01      	cmp	r3, #1
 800276c:	d144      	bne.n	80027f8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e347      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800277e:	f7ff fe34 	bl	80023ea <LL_RCC_MSI_GetRange>
 8002782:	4603      	mov	r3, r0
 8002784:	429c      	cmp	r4, r3
 8002786:	d914      	bls.n	80027b2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fd2f 	bl	80031f0 <RCC_SetFlashLatencyFromMSIRange>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e336      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fe0e 	bl	80023c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fe32 	bl	8002414 <LL_RCC_MSI_SetCalibTrimming>
 80027b0:	e013      	b.n	80027da <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fe03 	bl	80023c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe27 	bl	8002414 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fd10 	bl	80031f0 <RCC_SetFlashLatencyFromMSIRange>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e317      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027da:	f000 fcc9 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80027de:	4603      	mov	r3, r0
 80027e0:	4aa4      	ldr	r2, [pc, #656]	; (8002a74 <HAL_RCC_OscConfig+0x344>)
 80027e2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027e4:	4ba4      	ldr	r3, [pc, #656]	; (8002a78 <HAL_RCC_OscConfig+0x348>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe ff4d 	bl	8001688 <HAL_InitTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d039      	beq.n	8002868 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e308      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01e      	beq.n	800283e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002800:	f7ff fdb0 	bl	8002364 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002804:	f7fe ff8e 	bl	8001724 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800280c:	f7fe ff8a 	bl	8001724 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e2f5      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800281e:	f7ff fdbf 	bl	80023a0 <LL_RCC_MSI_IsReady>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f1      	beq.n	800280c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fdc8 	bl	80023c2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fdec 	bl	8002414 <LL_RCC_MSI_SetCalibTrimming>
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800283e:	f7ff fda0 	bl	8002382 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002842:	f7fe ff6f 	bl	8001724 <HAL_GetTick>
 8002846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800284a:	f7fe ff6b 	bl	8001724 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e2d6      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800285c:	f7ff fda0 	bl	80023a0 <LL_RCC_MSI_IsReady>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f1      	bne.n	800284a <HAL_RCC_OscConfig+0x11a>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002868:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d047      	beq.n	8002906 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002876:	f7ff fdf6 	bl	8002466 <LL_RCC_GetSysClkSource>
 800287a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800287c:	f7ff feef 	bl	800265e <LL_RCC_PLL_GetMainSource>
 8002880:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d005      	beq.n	8002894 <HAL_RCC_OscConfig+0x164>
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d108      	bne.n	80028a0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d134      	bne.n	8002906 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e2b4      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d102      	bne.n	80028b0 <HAL_RCC_OscConfig+0x180>
 80028aa:	f7ff fbdd 	bl	8002068 <LL_RCC_HSE_Enable>
 80028ae:	e001      	b.n	80028b4 <HAL_RCC_OscConfig+0x184>
 80028b0:	f7ff fbe9 	bl	8002086 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe ff32 	bl	8001724 <HAL_GetTick>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe ff2e 	bl	8001724 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e299      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80028d6:	f7ff fbe5 	bl	80020a4 <LL_RCC_HSE_IsReady>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f1      	beq.n	80028c4 <HAL_RCC_OscConfig+0x194>
 80028e0:	e011      	b.n	8002906 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe ff1f 	bl	8001724 <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ea:	f7fe ff1b 	bl	8001724 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b64      	cmp	r3, #100	; 0x64
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e286      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80028fc:	f7ff fbd2 	bl	80020a4 <LL_RCC_HSE_IsReady>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f1      	bne.n	80028ea <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d04c      	beq.n	80029ac <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002912:	f7ff fda8 	bl	8002466 <LL_RCC_GetSysClkSource>
 8002916:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002918:	f7ff fea1 	bl	800265e <LL_RCC_PLL_GetMainSource>
 800291c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d005      	beq.n	8002930 <HAL_RCC_OscConfig+0x200>
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d10e      	bne.n	8002948 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d10b      	bne.n	8002948 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e266      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fbf1 	bl	8002128 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002946:	e031      	b.n	80029ac <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d019      	beq.n	8002984 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002950:	f7ff fbba 	bl	80020c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fee6 	bl	8001724 <HAL_GetTick>
 8002958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295c:	f7fe fee2 	bl	8001724 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e24d      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800296e:	f7ff fbc9 	bl	8002104 <LL_RCC_HSI_IsReady>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f1      	beq.n	800295c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fbd3 	bl	8002128 <LL_RCC_HSI_SetCalibTrimming>
 8002982:	e013      	b.n	80029ac <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002984:	f7ff fbaf 	bl	80020e6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fecc 	bl	8001724 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe fec8 	bl	8001724 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e233      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80029a2:	f7ff fbaf 	bl	8002104 <LL_RCC_HSI_IsReady>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f1      	bne.n	8002990 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a3 	beq.w	8002b0c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d076      	beq.n	8002abc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d046      	beq.n	8002a68 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80029da:	f7ff fc66 	bl	80022aa <LL_RCC_LSI1_IsReady>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d113      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80029e4:	f7ff fc3f 	bl	8002266 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029e8:	f7fe fe9c 	bl	8001724 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80029f0:	f7fe fe98 	bl	8001724 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e203      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002a02:	f7ff fc52 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f1      	beq.n	80029f0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002a0c:	f7ff fc5f 	bl	80022ce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fe88 	bl	8001724 <HAL_GetTick>
 8002a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a18:	f7fe fe84 	bl	8001724 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1ef      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002a2a:	f7ff fc72 	bl	8002312 <LL_RCC_LSI2_IsReady>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f1      	beq.n	8002a18 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fc7c 	bl	8002336 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002a3e:	f7ff fc23 	bl	8002288 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe fe6f 	bl	8001724 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a4a:	f7fe fe6b 	bl	8001724 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1d6      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002a5c:	f7ff fc25 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f1      	bne.n	8002a4a <HAL_RCC_OscConfig+0x31a>
 8002a66:	e051      	b.n	8002b0c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002a68:	f7ff fbfd 	bl	8002266 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fe5a 	bl	8001724 <HAL_GetTick>
 8002a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a72:	e00c      	b.n	8002a8e <HAL_RCC_OscConfig+0x35e>
 8002a74:	20000088 	.word	0x20000088
 8002a78:	2000008c 	.word	0x2000008c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002a7c:	f7fe fe52 	bl	8001724 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1bd      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002a8e:	f7ff fc0c 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f1      	beq.n	8002a7c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002a98:	f7ff fc2a 	bl	80022f0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002a9e:	f7fe fe41 	bl	8001724 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1ac      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ab0:	f7ff fc2f 	bl	8002312 <LL_RCC_LSI2_IsReady>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f1      	bne.n	8002a9e <HAL_RCC_OscConfig+0x36e>
 8002aba:	e027      	b.n	8002b0c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002abc:	f7ff fc18 	bl	80022f0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fe30 	bl	8001724 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ac8:	f7fe fe2c 	bl	8001724 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e197      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002ada:	f7ff fc1a 	bl	8002312 <LL_RCC_LSI2_IsReady>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f1      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002ae4:	f7ff fbd0 	bl	8002288 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fe1c 	bl	8001724 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002af0:	f7fe fe18 	bl	8001724 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e183      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002b02:	f7ff fbd2 	bl	80022aa <LL_RCC_LSI1_IsReady>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f1      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d05b      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b18:	4ba7      	ldr	r3, [pc, #668]	; (8002db8 <HAL_RCC_OscConfig+0x688>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d114      	bne.n	8002b4e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b24:	f7ff fa70 	bl	8002008 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b28:	f7fe fdfc 	bl	8001724 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe fdf8 	bl	8001724 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e163      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	4b9d      	ldr	r3, [pc, #628]	; (8002db8 <HAL_RCC_OscConfig+0x688>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d102      	bne.n	8002b5c <HAL_RCC_OscConfig+0x42c>
 8002b56:	f7ff fb30 	bl	80021ba <LL_RCC_LSE_Enable>
 8002b5a:	e00c      	b.n	8002b76 <HAL_RCC_OscConfig+0x446>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d104      	bne.n	8002b6e <HAL_RCC_OscConfig+0x43e>
 8002b64:	f7ff fb4b 	bl	80021fe <LL_RCC_LSE_EnableBypass>
 8002b68:	f7ff fb27 	bl	80021ba <LL_RCC_LSE_Enable>
 8002b6c:	e003      	b.n	8002b76 <HAL_RCC_OscConfig+0x446>
 8002b6e:	f7ff fb35 	bl	80021dc <LL_RCC_LSE_Disable>
 8002b72:	f7ff fb55 	bl	8002220 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d014      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe fdd1 	bl	8001724 <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fdcd 	bl	8001724 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e136      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b9c:	f7ff fb51 	bl	8002242 <LL_RCC_LSE_IsReady>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ef      	beq.n	8002b86 <HAL_RCC_OscConfig+0x456>
 8002ba6:	e013      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fdbc 	bl	8001724 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb0:	f7fe fdb8 	bl	8001724 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e121      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bc6:	f7ff fb3c 	bl	8002242 <LL_RCC_LSE_IsReady>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ef      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d02c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d014      	beq.n	8002c0e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002be4:	f7ff fab5 	bl	8002152 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fd9c 	bl	8001724 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf0:	f7fe fd98 	bl	8001724 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e103      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002c02:	f7ff fac8 	bl	8002196 <LL_RCC_HSI48_IsReady>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f1      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4c0>
 8002c0c:	e013      	b.n	8002c36 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c0e:	f7ff fab1 	bl	8002174 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7fe fd87 	bl	8001724 <HAL_GetTick>
 8002c16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c1a:	f7fe fd83 	bl	8001724 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0ee      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002c2c:	f7ff fab3 	bl	8002196 <LL_RCC_HSI48_IsReady>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f1      	bne.n	8002c1a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80e4 	beq.w	8002e08 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c40:	f7ff fc11 	bl	8002466 <LL_RCC_GetSysClkSource>
 8002c44:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	f040 80b4 	bne.w	8002dc0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0203 	and.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d123      	bne.n	8002cae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d11c      	bne.n	8002cae <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d114      	bne.n	8002cae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d10d      	bne.n	8002cae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d05d      	beq.n	8002d6a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d058      	beq.n	8002d66 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0a1      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cc6:	f7ff fc84 	bl	80025d2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cca:	f7fe fd2b 	bl	8001724 <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe fd27 	bl	8001724 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e092      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ef      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_RCC_OscConfig+0x68c>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d0a:	0212      	lsls	r2, r2, #8
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d12:	4311      	orrs	r1, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d28:	f7ff fc44 	bl	80025b4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d3c:	f7fe fcf2 	bl	8001724 <HAL_GetTick>
 8002d40:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fe fcee 	bl	8001724 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e059      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ef      	beq.n	8002d44 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d64:	e050      	b.n	8002e08 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e04f      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d147      	bne.n	8002e08 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d78:	f7ff fc1c 	bl	80025b4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d8c:	f7fe fcca 	bl	8001724 <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe fcc6 	bl	8001724 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e031      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ef      	beq.n	8002d94 <HAL_RCC_OscConfig+0x664>
 8002db4:	e028      	b.n	8002e08 <HAL_RCC_OscConfig+0x6d8>
 8002db6:	bf00      	nop
 8002db8:	58000400 	.word	0x58000400
 8002dbc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d01e      	beq.n	8002e04 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	f7ff fc04 	bl	80025d2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fcab 	bl	8001724 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe fca7 	bl	8001724 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e012      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ef      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_OscConfig+0x6e4>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]
 8002e02:	e001      	b.n	8002e08 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3734      	adds	r7, #52	; 0x34
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	eefefffc 	.word	0xeefefffc

08002e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e12d      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b98      	ldr	r3, [pc, #608]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d91b      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b95      	ldr	r3, [pc, #596]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4993      	ldr	r1, [pc, #588]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4a:	f7fe fc6b 	bl	8001724 <HAL_GetTick>
 8002e4e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e52:	f7fe fc67 	bl	8001724 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e111      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e64:	4b8a      	ldr	r3, [pc, #552]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d1ef      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fafb 	bl	800247e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fc4c 	bl	8001724 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e90:	f7fe fc48 	bl	8001724 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0f2      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ea2:	f7ff fbe8 	bl	8002676 <LL_RCC_IsActiveFlag_HPRE>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f1      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d016      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff faf2 	bl	80024a6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe fc2f 	bl	8001724 <HAL_GetTick>
 8002ec6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eca:	f7fe fc2b 	bl	8001724 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0d5      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002edc:	f7ff fbdd 	bl	800269a <LL_RCC_IsActiveFlag_C2HPRE>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f1      	beq.n	8002eca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff faeb 	bl	80024d2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002efc:	f7fe fc12 	bl	8001724 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f04:	f7fe fc0e 	bl	8001724 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0b8      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f16:	f7ff fbd3 	bl	80026c0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f1      	beq.n	8002f04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d016      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fae5 	bl	8002500 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f36:	f7fe fbf5 	bl	8001724 <HAL_GetTick>
 8002f3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f3e:	f7fe fbf1 	bl	8001724 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e09b      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f50:	f7ff fbc9 	bl	80026e6 <LL_RCC_IsActiveFlag_PPRE1>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f1      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d017      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fadb 	bl	8002528 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f72:	f7fe fbd7 	bl	8001724 <HAL_GetTick>
 8002f76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f7a:	f7fe fbd3 	bl	8001724 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e07d      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f8c:	f7ff fbbd 	bl	800270a <LL_RCC_IsActiveFlag_PPRE2>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f1      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d043      	beq.n	800302a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d106      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002faa:	f7ff f87b 	bl	80020a4 <LL_RCC_HSE_IsReady>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11e      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e067      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002fc0:	f7ff fb16 	bl	80025f0 <LL_RCC_PLL_IsReady>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d113      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e05c      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002fd6:	f7ff f9e3 	bl	80023a0 <LL_RCC_MSI_IsReady>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e051      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002fe4:	f7ff f88e 	bl	8002104 <LL_RCC_HSI_IsReady>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e04a      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fa21 	bl	800243e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fb92 	bl	8001724 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe fb8e 	bl	8001724 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e036      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	f7ff fa24 	bl	8002466 <LL_RCC_GetSysClkSource>
 800301e:	4602      	mov	r2, r0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	429a      	cmp	r2, r3
 8003028:	d1ec      	bne.n	8003004 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d21b      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 0207 	bic.w	r2, r3, #7
 8003040:	4913      	ldr	r1, [pc, #76]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fe fb6c 	bl	8001724 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	e008      	b.n	8003062 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003050:	f7fe fb68 	bl	8001724 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e012      	b.n	8003088 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x278>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d1ef      	bne.n	8003050 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003070:	f000 f87e 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003074:	4603      	mov	r3, r0
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <HAL_RCC_ClockConfig+0x27c>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800307a:	f7fe fb5f 	bl	800173c <HAL_GetTickPrio>
 800307e:	4603      	mov	r3, r0
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe fb01 	bl	8001688 <HAL_InitTick>
 8003086:	4603      	mov	r3, r0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	58004000 	.word	0x58004000
 8003094:	20000088 	.word	0x20000088

08003098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	f7ff f9e2 	bl	8002466 <LL_RCC_GetSysClkSource>
 80030a2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030aa:	f7ff f99e 	bl	80023ea <LL_RCC_MSI_GetRange>
 80030ae:	4603      	mov	r3, r0
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	4a2b      	ldr	r2, [pc, #172]	; (8003164 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e04b      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d102      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e045      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d10a      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80030d2:	f7fe ffb7 	bl	8002044 <LL_RCC_HSE_IsEnabledDiv2>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d102      	bne.n	80030e2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e03a      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_RCC_GetSysClockFreq+0xd4>)
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e037      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80030e8:	f7ff fab9 	bl	800265e <LL_RCC_PLL_GetMainSource>
 80030ec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d003      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x64>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x6a>
 80030fa:	e00d      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030fe:	60bb      	str	r3, [r7, #8]
        break;
 8003100:	e015      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003102:	f7fe ff9f 	bl	8002044 <LL_RCC_HSE_IsEnabledDiv2>
 8003106:	4603      	mov	r3, r0
 8003108:	2b01      	cmp	r3, #1
 800310a:	d102      	bne.n	8003112 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_RCC_GetSysClockFreq+0xd0>)
 800310e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003110:	e00d      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003114:	60bb      	str	r3, [r7, #8]
        break;
 8003116:	e00a      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003118:	f7ff f967 	bl	80023ea <LL_RCC_MSI_GetRange>
 800311c:	4603      	mov	r3, r0
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	60bb      	str	r3, [r7, #8]
        break;
 800312c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800312e:	f7ff fa71 	bl	8002614 <LL_RCC_PLL_GetN>
 8003132:	4602      	mov	r2, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	fb03 f402 	mul.w	r4, r3, r2
 800313a:	f7ff fa84 	bl	8002646 <LL_RCC_PLL_GetDivider>
 800313e:	4603      	mov	r3, r0
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	3301      	adds	r3, #1
 8003144:	fbb4 f4f3 	udiv	r4, r4, r3
 8003148:	f7ff fa71 	bl	800262e <LL_RCC_PLL_GetR>
 800314c:	4603      	mov	r3, r0
 800314e:	0f5b      	lsrs	r3, r3, #29
 8003150:	3301      	adds	r3, #1
 8003152:	fbb4 f3f3 	udiv	r3, r4, r3
 8003156:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003158:	68fb      	ldr	r3, [r7, #12]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bd90      	pop	{r4, r7, pc}
 8003162:	bf00      	nop
 8003164:	080060a8 	.word	0x080060a8
 8003168:	00f42400 	.word	0x00f42400
 800316c:	01e84800 	.word	0x01e84800

08003170 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b598      	push	{r3, r4, r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003174:	f7ff ff90 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003178:	4604      	mov	r4, r0
 800317a:	f7ff f9e9 	bl	8002550 <LL_RCC_GetAHBPrescaler>
 800317e:	4603      	mov	r3, r0
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	4a03      	ldr	r2, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x24>)
 8003188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd98      	pop	{r3, r4, r7, pc}
 8003194:	08006048 	.word	0x08006048

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b598      	push	{r3, r4, r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800319c:	f7ff ffe8 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031a0:	4604      	mov	r4, r0
 80031a2:	f7ff f9ef 	bl	8002584 <LL_RCC_GetAPB1Prescaler>
 80031a6:	4603      	mov	r3, r0
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd98      	pop	{r3, r4, r7, pc}
 80031c0:	08006088 	.word	0x08006088

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b598      	push	{r3, r4, r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80031c8:	f7ff ffd2 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031cc:	4604      	mov	r4, r0
 80031ce:	f7ff f9e5 	bl	800259c <LL_RCC_GetAPB2Prescaler>
 80031d2:	4603      	mov	r3, r0
 80031d4:	0adb      	lsrs	r3, r3, #11
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd98      	pop	{r3, r4, r7, pc}
 80031ec:	08006088 	.word	0x08006088

080031f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2bb0      	cmp	r3, #176	; 0xb0
 80031fc:	d903      	bls.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e007      	b.n	8003216 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003214:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003216:	f7ff f9a7 	bl	8002568 <LL_RCC_GetAHB4Prescaler>
 800321a:	4603      	mov	r3, r0
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	0c9c      	lsrs	r4, r3, #18
 800323a:	f7fe fef5 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 800323e:	4603      	mov	r3, r0
 8003240:	4619      	mov	r1, r3
 8003242:	4620      	mov	r0, r4
 8003244:	f000 f80c 	bl	8003260 <RCC_SetFlashLatency>
 8003248:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bd90      	pop	{r4, r7, pc}
 8003252:	bf00      	nop
 8003254:	080060a8 	.word	0x080060a8
 8003258:	08006048 	.word	0x08006048
 800325c:	431bde83 	.word	0x431bde83

08003260 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b093      	sub	sp, #76	; 0x4c
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <RCC_SetFlashLatency+0xe8>)
 800326c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003276:	4a35      	ldr	r2, [pc, #212]	; (800334c <RCC_SetFlashLatency+0xec>)
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	ca07      	ldmia	r2, {r0, r1, r2}
 800327e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <RCC_SetFlashLatency+0xf0>)
 8003284:	f107 040c 	add.w	r4, r7, #12
 8003288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800328a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800328e:	2300      	movs	r3, #0
 8003290:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003298:	d11a      	bne.n	80032d0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800329a:	2300      	movs	r3, #0
 800329c:	643b      	str	r3, [r7, #64]	; 0x40
 800329e:	e013      	b.n	80032c8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	3348      	adds	r3, #72	; 0x48
 80032a6:	443b      	add	r3, r7
 80032a8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d807      	bhi.n	80032c2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	3348      	adds	r3, #72	; 0x48
 80032b8:	443b      	add	r3, r7
 80032ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80032be:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80032c0:	e020      	b.n	8003304 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c4:	3301      	adds	r3, #1
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40
 80032c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d9e8      	bls.n	80032a0 <RCC_SetFlashLatency+0x40>
 80032ce:	e019      	b.n	8003304 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d4:	e013      	b.n	80032fe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	3348      	adds	r3, #72	; 0x48
 80032dc:	443b      	add	r3, r7
 80032de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d807      	bhi.n	80032f8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3348      	adds	r3, #72	; 0x48
 80032ee:	443b      	add	r3, r7
 80032f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80032f4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80032f6:	e005      	b.n	8003304 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fa:	3301      	adds	r3, #1
 80032fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003300:	2b02      	cmp	r3, #2
 8003302:	d9e8      	bls.n	80032d6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <RCC_SetFlashLatency+0xf4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 0207 	bic.w	r2, r3, #7
 800330c:	4911      	ldr	r1, [pc, #68]	; (8003354 <RCC_SetFlashLatency+0xf4>)
 800330e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003314:	f7fe fa06 	bl	8001724 <HAL_GetTick>
 8003318:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800331a:	e008      	b.n	800332e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800331c:	f7fe fa02 	bl	8001724 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e007      	b.n	800333e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <RCC_SetFlashLatency+0xf4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003338:	429a      	cmp	r2, r3
 800333a:	d1ef      	bne.n	800331c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	374c      	adds	r7, #76	; 0x4c
 8003342:	46bd      	mov	sp, r7
 8003344:	bd90      	pop	{r4, r7, pc}
 8003346:	bf00      	nop
 8003348:	08005d9c 	.word	0x08005d9c
 800334c:	08005dac 	.word	0x08005dac
 8003350:	08005db8 	.word	0x08005db8
 8003354:	58004000 	.word	0x58004000

08003358 <LL_RCC_LSE_IsEnabled>:
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <LL_RCC_LSE_IsEnabled+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_RCC_LSE_IsEnabled+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_RCC_LSE_IsReady>:
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d101      	bne.n	8003394 <LL_RCC_LSE_IsReady+0x18>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <LL_RCC_LSE_IsReady+0x1a>
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_RCC_MSI_EnablePLLMode>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80033a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6013      	str	r3, [r2, #0]
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LL_RCC_SetRFWKPClockSource>:
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_RCC_SetSMPSClockSource>:
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f023 0203 	bic.w	r2, r3, #3
 80033fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4313      	orrs	r3, r2
 8003404:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_RCC_SetSMPSPrescaler>:
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800341a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4313      	orrs	r3, r2
 800342c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <LL_RCC_SetUSARTClockSource>:
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <LL_RCC_SetLPUARTClockSource>:
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800346e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800347a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_RCC_SetI2CClockSource>:
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800349a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80034aa:	43db      	mvns	r3, r3
 80034ac:	401a      	ands	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80034b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_RCC_SetLPTIMClockSource>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	041b      	lsls	r3, r3, #16
 80034e2:	43db      	mvns	r3, r3
 80034e4:	401a      	ands	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_RCC_SetSAIClockSource>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <LL_RCC_SetRNGClockSource>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_RCC_SetCLK48ClockSource>:
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800356c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_RCC_SetUSBClockSource>:
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ffe3 	bl	8003558 <LL_RCC_SetCLK48ClockSource>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <LL_RCC_SetADCClockSource>:
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80035a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_RCC_SetRTCClockSource>:
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <LL_RCC_GetRTCClockSource>:
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_RCC_ForceBackupDomainReset>:
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_RCC_ReleaseBackupDomainReset>:
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_RCC_PLLSAI1_Enable>:
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_RCC_PLLSAI1_Disable>:
{
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003680:	6013      	str	r3, [r2, #0]
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_RCC_PLLSAI1_IsReady>:
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800369e:	d101      	bne.n	80036a4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80036b8:	2300      	movs	r3, #0
 80036ba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80036bc:	2300      	movs	r3, #0
 80036be:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d034      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036d4:	d021      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80036d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036da:	d81b      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e0:	d01d      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80036e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e6:	d815      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80036ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f0:	d110      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80036f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003702:	e00d      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f94d 	bl	80039a8 <RCCEx_PLLSAI1_ConfigNP>
 800370e:	4603      	mov	r3, r0
 8003710:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003712:	e005      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
        break;
 8003718:	e002      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800371e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003720:	7ffb      	ldrb	r3, [r7, #31]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d105      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fee8 	bl	8003500 <LL_RCC_SetSAIClockSource>
 8003730:	e001      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	7ffb      	ldrb	r3, [r7, #31]
 8003734:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373e:	2b00      	cmp	r3, #0
 8003740:	d046      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003742:	f7ff ff56 	bl	80035f2 <LL_RCC_GetRTCClockSource>
 8003746:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	429a      	cmp	r2, r3
 8003750:	d03c      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003752:	f7fe fc59 	bl	8002008 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff30 	bl	80035c6 <LL_RCC_SetRTCClockSource>
 8003766:	e02e      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003772:	f7ff ff4b 	bl	800360c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003776:	f7ff ff5a 	bl	800362e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003792:	f7ff fde1 	bl	8003358 <LL_RCC_LSE_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	d114      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800379c:	f7fd ffc2 	bl	8001724 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80037a2:	e00b      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a4:	f7fd ffbe 	bl	8001724 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d902      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	77fb      	strb	r3, [r7, #31]
              break;
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80037bc:	f7ff fdde 	bl	800337c <LL_RCC_LSE_IsReady>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d1ee      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	77bb      	strb	r3, [r7, #30]
 80037ca:	e001      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7ffb      	ldrb	r3, [r7, #31]
 80037ce:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fe2a 	bl	800343a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fe35 	bl	8003466 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe5d 	bl	80034cc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fe52 	bl	80034cc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fe2a 	bl	8003492 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fe1f 	bl	8003492 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d022      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fe8d 	bl	8003584 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003872:	d107      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800387e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003882:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388c:	d10b      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f8e3 	bl	8003a5e <RCCEx_PLLSAI1_ConfigNQ>
 8003898:	4603      	mov	r3, r0
 800389a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800389c:	7ffb      	ldrb	r3, [r7, #31]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80038a2:	7ffb      	ldrb	r3, [r7, #31]
 80038a4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02b      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c4:	d003      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fe2a 	bl	800352c <LL_RCC_SetRNGClockSource>
 80038d8:	e00a      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7ff fe21 	bl	800352c <LL_RCC_SetRNGClockSource>
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff fe34 	bl	8003558 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038f8:	d107      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003908:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	2b00      	cmp	r3, #0
 8003914:	d022      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fe3d 	bl	800359a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003928:	d107      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003942:	d10b      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f8e3 	bl	8003b14 <RCCEx_PLLSAI1_ConfigNR>
 800394e:	4603      	mov	r3, r0
 8003950:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003952:	7ffb      	ldrb	r3, [r7, #31]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003958:	7ffb      	ldrb	r3, [r7, #31]
 800395a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fd26 	bl	80033be <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fd45 	bl	8003412 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fd2c 	bl	80033ea <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003992:	7fbb      	ldrb	r3, [r7, #30]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3720      	adds	r7, #32
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80039a0:	f7ff fcfe 	bl	80033a0 <LL_RCC_MSI_EnablePLLMode>
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039b4:	f7ff fe5b 	bl	800366e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039b8:	f7fd feb4 	bl	8001724 <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039be:	e009      	b.n	80039d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c0:	f7fd feb0 	bl	8001724 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d902      	bls.n	80039d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	73fb      	strb	r3, [r7, #15]
      break;
 80039d2:	e004      	b.n	80039de <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039d4:	f7ff fe5a 	bl	800368c <LL_RCC_PLLSAI1_IsReady>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d137      	bne.n	8003a54 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f8:	4313      	orrs	r3, r2
 80039fa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80039fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a12:	f7ff fe1d 	bl	8003650 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a16:	f7fd fe85 	bl	8001724 <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a1c:	e009      	b.n	8003a32 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a1e:	f7fd fe81 	bl	8001724 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d902      	bls.n	8003a32 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a30:	e004      	b.n	8003a3c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a32:	f7ff fe2b 	bl	800368c <LL_RCC_PLLSAI1_IsReady>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d1f0      	bne.n	8003a1e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003a6a:	f7ff fe00 	bl	800366e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a6e:	f7fd fe59 	bl	8001724 <HAL_GetTick>
 8003a72:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a74:	e009      	b.n	8003a8a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a76:	f7fd fe55 	bl	8001724 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d902      	bls.n	8003a8a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e004      	b.n	8003a94 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003a8a:	f7ff fdff 	bl	800368c <LL_RCC_PLLSAI1_IsReady>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d137      	bne.n	8003b0a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ac8:	f7ff fdc2 	bl	8003650 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003acc:	f7fd fe2a 	bl	8001724 <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ad2:	e009      	b.n	8003ae8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad4:	f7fd fe26 	bl	8001724 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ae6:	e004      	b.n	8003af2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ae8:	f7ff fdd0 	bl	800368c <LL_RCC_PLLSAI1_IsReady>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d1f0      	bne.n	8003ad4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b06:	4313      	orrs	r3, r2
 8003b08:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003b20:	f7ff fda5 	bl	800366e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b24:	f7fd fdfe 	bl	8001724 <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b2a:	e009      	b.n	8003b40 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b2c:	f7fd fdfa 	bl	8001724 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d902      	bls.n	8003b40 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3e:	e004      	b.n	8003b4a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b40:	f7ff fda4 	bl	800368c <LL_RCC_PLLSAI1_IsReady>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d137      	bne.n	8003bc0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b64:	4313      	orrs	r3, r2
 8003b66:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003b7e:	f7ff fd67 	bl	8003650 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b82:	f7fd fdcf 	bl	8001724 <HAL_GetTick>
 8003b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b88:	e009      	b.n	8003b9e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b8a:	f7fd fdcb 	bl	8001724 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d902      	bls.n	8003b9e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b9c:	e004      	b.n	8003ba8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003b9e:	f7ff fd75 	bl	800368c <LL_RCC_PLLSAI1_IsReady>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d1f0      	bne.n	8003b8a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <LL_RCC_GetUSARTClockSource>:
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4013      	ands	r3, r2
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_RCC_GetLPUARTClockSource>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4013      	ands	r3, r2
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e042      	b.n	8003ca2 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fba6 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fe21 	bl	800489c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fbf6 	bl	800444c <UART_SetConfig>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e01b      	b.n	8003ca2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fea0 	bl	80049e0 <UART_CheckIdleState>
 8003ca0:	4603      	mov	r3, r0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08a      	sub	sp, #40	; 0x28
 8003cae:	af02      	add	r7, sp, #8
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d17b      	bne.n	8003dbc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_UART_Transmit+0x26>
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e074      	b.n	8003dbe <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2221      	movs	r2, #33	; 0x21
 8003ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ce4:	f7fd fd1e 	bl	8001724 <HAL_GetTick>
 8003ce8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	d108      	bne.n	8003d16 <HAL_UART_Transmit+0x6c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e003      	b.n	8003d1e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d1e:	e030      	b.n	8003d82 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 ff02 	bl	8004b34 <UART_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e03d      	b.n	8003dbe <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e007      	b.n	8003d70 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1c8      	bne.n	8003d20 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2140      	movs	r1, #64	; 0x40
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fecb 	bl	8004b34 <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b0ba      	sub	sp, #232	; 0xe8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003df2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003df6:	4013      	ands	r3, r2
 8003df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11b      	bne.n	8003e3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 82e3 	beq.w	80043f8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
      }
      return;
 8003e3a:	e2dd      	b.n	80043f8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8123 	beq.w	800408c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003e4a:	4b8d      	ldr	r3, [pc, #564]	; (8004080 <HAL_UART_IRQHandler+0x2b8>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e56:	4b8b      	ldr	r3, [pc, #556]	; (8004084 <HAL_UART_IRQHandler+0x2bc>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8116 	beq.w	800408c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d011      	beq.n	8003e90 <HAL_UART_IRQHandler+0xc8>
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d011      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xf8>
 8003e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2202      	movs	r2, #2
 8003eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f043 0204 	orr.w	r2, r3, #4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d011      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x128>
 8003ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2204      	movs	r2, #4
 8003ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f043 0202 	orr.w	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d017      	beq.n	8003f2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003f0c:	4b5c      	ldr	r3, [pc, #368]	; (8004080 <HAL_UART_IRQHandler+0x2b8>)
 8003f0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	f043 0208 	orr.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <HAL_UART_IRQHandler+0x196>
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00c      	beq.n	8003f5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8249 	beq.w	80043fc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d013      	beq.n	8003f9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d005      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d054      	beq.n	800406c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 ff40 	bl	8004e48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d146      	bne.n	8004064 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3308      	adds	r3, #8
 8003fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004002:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800400e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800401a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1d9      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004028:	2b00      	cmp	r3, #0
 800402a:	d017      	beq.n	800405c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <HAL_UART_IRQHandler+0x2c0>)
 8004034:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403c:	4618      	mov	r0, r3
 800403e:	f7fd fcf7 	bl	8001a30 <HAL_DMA_Abort_IT>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d019      	beq.n	800407c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004056:	4610      	mov	r0, r2
 8004058:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405a:	e00f      	b.n	800407c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f9eb 	bl	8004438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004062:	e00b      	b.n	800407c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f9e7 	bl	8004438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406a:	e007      	b.n	800407c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f9e3 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800407a:	e1bf      	b.n	80043fc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	bf00      	nop
    return;
 800407e:	e1bd      	b.n	80043fc <HAL_UART_IRQHandler+0x634>
 8004080:	10000001 	.word	0x10000001
 8004084:	04000120 	.word	0x04000120
 8004088:	08004f15 	.word	0x08004f15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 8153 	bne.w	800433c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 814c 	beq.w	800433c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8145 	beq.w	800433c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2210      	movs	r2, #16
 80040b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	f040 80bb 	bne.w	8004240 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 818f 	beq.w	8004400 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ec:	429a      	cmp	r2, r3
 80040ee:	f080 8187 	bcs.w	8004400 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 8087 	bne.w	800421e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800413a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800413e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004146:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1da      	bne.n	8004110 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800416a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3308      	adds	r3, #8
 800417a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800417e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004182:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e1      	bne.n	800415a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3308      	adds	r3, #8
 800419c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3308      	adds	r3, #8
 80041b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e3      	bne.n	8004196 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ec:	f023 0310 	bic.w	r3, r3, #16
 80041f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004200:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800420c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e4      	bne.n	80041dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004218:	4618      	mov	r0, r3
 800421a:	f7fd fbaa 	bl	8001972 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004230:	b29b      	uxth	r3, r3
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fc f94d 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800423e:	e0df      	b.n	8004400 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800424c:	b29b      	uxth	r3, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80d1 	beq.w	8004404 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80cc 	beq.w	8004404 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800427a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
 8004290:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800429c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e4      	bne.n	800426c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	623b      	str	r3, [r7, #32]
   return(result);
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042ca:	633a      	str	r2, [r7, #48]	; 0x30
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e1      	bne.n	80042a2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0310 	bic.w	r3, r3, #16
 8004306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	617b      	str	r3, [r7, #20]
   return(result);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e4      	bne.n	80042f2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800432e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fc f8cf 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800433a:	e063      	b.n	8004404 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00e      	beq.n	8004366 <HAL_UART_IRQHandler+0x59e>
 8004348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800435c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f001 fb36 	bl	80059d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004364:	e051      	b.n	800440a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d014      	beq.n	800439c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03a      	beq.n	8004408 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
    }
    return;
 800439a:	e035      	b.n	8004408 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <HAL_UART_IRQHandler+0x5f4>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fdc3 	bl	8004f40 <UART_EndTransmit_IT>
    return;
 80043ba:	e026      	b.n	800440a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <HAL_UART_IRQHandler+0x614>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f001 fb0f 	bl	80059f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043da:	e016      	b.n	800440a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_UART_IRQHandler+0x642>
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da0c      	bge.n	800440a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f001 faf7 	bl	80059e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043f6:	e008      	b.n	800440a <HAL_UART_IRQHandler+0x642>
      return;
 80043f8:	bf00      	nop
 80043fa:	e006      	b.n	800440a <HAL_UART_IRQHandler+0x642>
    return;
 80043fc:	bf00      	nop
 80043fe:	e004      	b.n	800440a <HAL_UART_IRQHandler+0x642>
      return;
 8004400:	bf00      	nop
 8004402:	e002      	b.n	800440a <HAL_UART_IRQHandler+0x642>
      return;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <HAL_UART_IRQHandler+0x642>
    return;
 8004408:	bf00      	nop
  }
}
 800440a:	37e8      	adds	r7, #232	; 0xe8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800444c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004450:	b08c      	sub	sp, #48	; 0x30
 8004452:	af00      	add	r7, sp, #0
 8004454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	431a      	orrs	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	431a      	orrs	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4313      	orrs	r3, r2
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4baf      	ldr	r3, [pc, #700]	; (8004738 <UART_SetConfig+0x2ec>)
 800447c:	4013      	ands	r3, r2
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004484:	430b      	orrs	r3, r1
 8004486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4aa4      	ldr	r2, [pc, #656]	; (800473c <UART_SetConfig+0x2f0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b4:	4313      	orrs	r3, r2
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	f023 010f 	bic.w	r1, r3, #15
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a95      	ldr	r2, [pc, #596]	; (8004740 <UART_SetConfig+0x2f4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d125      	bne.n	800453c <UART_SetConfig+0xf0>
 80044f0:	2003      	movs	r0, #3
 80044f2:	f7ff fb6a 	bl	8003bca <LL_RCC_GetUSARTClockSource>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d81b      	bhi.n	8004534 <UART_SetConfig+0xe8>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0xb8>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004515 	.word	0x08004515
 8004508:	08004525 	.word	0x08004525
 800450c:	0800451d 	.word	0x0800451d
 8004510:	0800452d 	.word	0x0800452d
 8004514:	2301      	movs	r3, #1
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451a:	e042      	b.n	80045a2 <UART_SetConfig+0x156>
 800451c:	2302      	movs	r3, #2
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004522:	e03e      	b.n	80045a2 <UART_SetConfig+0x156>
 8004524:	2304      	movs	r3, #4
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452a:	e03a      	b.n	80045a2 <UART_SetConfig+0x156>
 800452c:	2308      	movs	r3, #8
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004532:	e036      	b.n	80045a2 <UART_SetConfig+0x156>
 8004534:	2310      	movs	r3, #16
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453a:	e032      	b.n	80045a2 <UART_SetConfig+0x156>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a7e      	ldr	r2, [pc, #504]	; (800473c <UART_SetConfig+0x2f0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d12a      	bne.n	800459c <UART_SetConfig+0x150>
 8004546:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800454a:	f7ff fb4e 	bl	8003bea <LL_RCC_GetLPUARTClockSource>
 800454e:	4603      	mov	r3, r0
 8004550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004554:	d01a      	beq.n	800458c <UART_SetConfig+0x140>
 8004556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800455a:	d81b      	bhi.n	8004594 <UART_SetConfig+0x148>
 800455c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004560:	d00c      	beq.n	800457c <UART_SetConfig+0x130>
 8004562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004566:	d815      	bhi.n	8004594 <UART_SetConfig+0x148>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <UART_SetConfig+0x128>
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004570:	d008      	beq.n	8004584 <UART_SetConfig+0x138>
 8004572:	e00f      	b.n	8004594 <UART_SetConfig+0x148>
 8004574:	2300      	movs	r3, #0
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457a:	e012      	b.n	80045a2 <UART_SetConfig+0x156>
 800457c:	2302      	movs	r3, #2
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004582:	e00e      	b.n	80045a2 <UART_SetConfig+0x156>
 8004584:	2304      	movs	r3, #4
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458a:	e00a      	b.n	80045a2 <UART_SetConfig+0x156>
 800458c:	2308      	movs	r3, #8
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004592:	e006      	b.n	80045a2 <UART_SetConfig+0x156>
 8004594:	2310      	movs	r3, #16
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459a:	e002      	b.n	80045a2 <UART_SetConfig+0x156>
 800459c:	2310      	movs	r3, #16
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a65      	ldr	r2, [pc, #404]	; (800473c <UART_SetConfig+0x2f0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	f040 8097 	bne.w	80046dc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d823      	bhi.n	80045fe <UART_SetConfig+0x1b2>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <UART_SetConfig+0x170>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045ff 	.word	0x080045ff
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045ff 	.word	0x080045ff
 80045cc:	080045ef 	.word	0x080045ef
 80045d0:	080045ff 	.word	0x080045ff
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	080045ff 	.word	0x080045ff
 80045dc:	080045f7 	.word	0x080045f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7fe fdda 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 80045e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045e6:	e010      	b.n	800460a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e8:	4b56      	ldr	r3, [pc, #344]	; (8004744 <UART_SetConfig+0x2f8>)
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045ec:	e00d      	b.n	800460a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ee:	f7fe fd53 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 80045f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045f4:	e009      	b.n	800460a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045fc:	e005      	b.n	800460a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004608:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 812b 	beq.w	8004868 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	4a4c      	ldr	r2, [pc, #304]	; (8004748 <UART_SetConfig+0x2fc>)
 8004618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800461c:	461a      	mov	r2, r3
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	fbb3 f3f2 	udiv	r3, r3, r2
 8004624:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	429a      	cmp	r2, r3
 8004634:	d305      	bcc.n	8004642 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	429a      	cmp	r2, r3
 8004640:	d903      	bls.n	800464a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004648:	e10e      	b.n	8004868 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	2200      	movs	r2, #0
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	60fa      	str	r2, [r7, #12]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	4a3c      	ldr	r2, [pc, #240]	; (8004748 <UART_SetConfig+0x2fc>)
 8004658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800465c:	b29b      	uxth	r3, r3
 800465e:	2200      	movs	r2, #0
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004668:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800466c:	f7fb fd86 	bl	800017c <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	020b      	lsls	r3, r1, #8
 8004682:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004686:	0202      	lsls	r2, r0, #8
 8004688:	6979      	ldr	r1, [r7, #20]
 800468a:	6849      	ldr	r1, [r1, #4]
 800468c:	0849      	lsrs	r1, r1, #1
 800468e:	2000      	movs	r0, #0
 8004690:	460c      	mov	r4, r1
 8004692:	4605      	mov	r5, r0
 8004694:	eb12 0804 	adds.w	r8, r2, r4
 8004698:	eb43 0905 	adc.w	r9, r3, r5
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	469a      	mov	sl, r3
 80046a4:	4693      	mov	fp, r2
 80046a6:	4652      	mov	r2, sl
 80046a8:	465b      	mov	r3, fp
 80046aa:	4640      	mov	r0, r8
 80046ac:	4649      	mov	r1, r9
 80046ae:	f7fb fd65 	bl	800017c <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4613      	mov	r3, r2
 80046b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c0:	d308      	bcc.n	80046d4 <UART_SetConfig+0x288>
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c8:	d204      	bcs.n	80046d4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e0c9      	b.n	8004868 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046da:	e0c5      	b.n	8004868 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e4:	d16d      	bne.n	80047c2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80046e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046ea:	3b01      	subs	r3, #1
 80046ec:	2b07      	cmp	r3, #7
 80046ee:	d82d      	bhi.n	800474c <UART_SetConfig+0x300>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x2ac>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004719 	.word	0x08004719
 80046fc:	08004721 	.word	0x08004721
 8004700:	0800474d 	.word	0x0800474d
 8004704:	08004727 	.word	0x08004727
 8004708:	0800474d 	.word	0x0800474d
 800470c:	0800474d 	.word	0x0800474d
 8004710:	0800474d 	.word	0x0800474d
 8004714:	0800472f 	.word	0x0800472f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7fe fd54 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 800471c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800471e:	e01b      	b.n	8004758 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <UART_SetConfig+0x2f8>)
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004724:	e018      	b.n	8004758 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004726:	f7fe fcb7 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 800472a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800472c:	e014      	b.n	8004758 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004734:	e010      	b.n	8004758 <UART_SetConfig+0x30c>
 8004736:	bf00      	nop
 8004738:	cfff69f3 	.word	0xcfff69f3
 800473c:	40008000 	.word	0x40008000
 8004740:	40013800 	.word	0x40013800
 8004744:	00f42400 	.word	0x00f42400
 8004748:	080060e8 	.word	0x080060e8
      default:
        pclk = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004756:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8084 	beq.w	8004868 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	4a4b      	ldr	r2, [pc, #300]	; (8004894 <UART_SetConfig+0x448>)
 8004766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800476a:	461a      	mov	r2, r3
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004772:	005a      	lsls	r2, r3, #1
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	441a      	add	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2b0f      	cmp	r3, #15
 800478a:	d916      	bls.n	80047ba <UART_SetConfig+0x36e>
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d212      	bcs.n	80047ba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f023 030f 	bic.w	r3, r3, #15
 800479c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	8bfb      	ldrh	r3, [r7, #30]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	8bfa      	ldrh	r2, [r7, #30]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e056      	b.n	8004868 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047c0:	e052      	b.n	8004868 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047c6:	3b01      	subs	r3, #1
 80047c8:	2b07      	cmp	r3, #7
 80047ca:	d822      	bhi.n	8004812 <UART_SetConfig+0x3c6>
 80047cc:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0x388>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	080047f5 	.word	0x080047f5
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	08004813 	.word	0x08004813
 80047e0:	08004803 	.word	0x08004803
 80047e4:	08004813 	.word	0x08004813
 80047e8:	08004813 	.word	0x08004813
 80047ec:	08004813 	.word	0x08004813
 80047f0:	0800480b 	.word	0x0800480b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fe fce6 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047fa:	e010      	b.n	800481e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047fc:	4b26      	ldr	r3, [pc, #152]	; (8004898 <UART_SetConfig+0x44c>)
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004800:	e00d      	b.n	800481e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004802:	f7fe fc49 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004808:	e009      	b.n	800481e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004810:	e005      	b.n	800481e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800481c:	bf00      	nop
    }

    if (pclk != 0U)
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	2b00      	cmp	r3, #0
 8004822:	d021      	beq.n	8004868 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	4a1a      	ldr	r2, [pc, #104]	; (8004894 <UART_SetConfig+0x448>)
 800482a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800482e:	461a      	mov	r2, r3
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	fbb3 f2f2 	udiv	r2, r3, r2
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	441a      	add	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	d909      	bls.n	8004862 <UART_SetConfig+0x416>
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d205      	bcs.n	8004862 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	b29a      	uxth	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60da      	str	r2, [r3, #12]
 8004860:	e002      	b.n	8004868 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2201      	movs	r2, #1
 800486c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2201      	movs	r2, #1
 8004874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2200      	movs	r2, #0
 800487c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004884:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004888:	4618      	mov	r0, r3
 800488a:	3730      	adds	r7, #48	; 0x30
 800488c:	46bd      	mov	sp, r7
 800488e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004892:	bf00      	nop
 8004894:	080060e8 	.word	0x080060e8
 8004898:	00f42400 	.word	0x00f42400

0800489c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01a      	beq.n	80049b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499a:	d10a      	bne.n	80049b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
  }
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b098      	sub	sp, #96	; 0x60
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049f0:	f7fc fe98 	bl	8001724 <HAL_GetTick>
 80049f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d12f      	bne.n	8004a64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f88e 	bl	8004b34 <UART_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d022      	beq.n	8004a64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e063      	b.n	8004b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d149      	bne.n	8004b06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f857 	bl	8004b34 <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03c      	beq.n	8004b06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	623b      	str	r3, [r7, #32]
   return(result);
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8004aac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e6      	bne.n	8004a8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ade:	61fa      	str	r2, [r7, #28]
 8004ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	69b9      	ldr	r1, [r7, #24]
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	617b      	str	r3, [r7, #20]
   return(result);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e5      	bne.n	8004abe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e012      	b.n	8004b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3758      	adds	r7, #88	; 0x58
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b44:	e049      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d045      	beq.n	8004bda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fc fde9 	bl	8001724 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e048      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d031      	beq.n	8004bda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d110      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f95b 	bl	8004e48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2208      	movs	r2, #8
 8004b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e029      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb4:	d111      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f941 	bl	8004e48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e00f      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	bf0c      	ite	eq
 8004bea:	2301      	moveq	r3, #1
 8004bec:	2300      	movne	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d0a6      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b0a3      	sub	sp, #140	; 0x8c
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c36:	d10e      	bne.n	8004c56 <UART_Start_Receive_IT+0x52>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <UART_Start_Receive_IT+0x48>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c4a:	e02d      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	22ff      	movs	r2, #255	; 0xff
 8004c50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c54:	e028      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <UART_Start_Receive_IT+0x76>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <UART_Start_Receive_IT+0x6c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	22ff      	movs	r2, #255	; 0xff
 8004c6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c6e:	e01b      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	227f      	movs	r2, #127	; 0x7f
 8004c74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c78:	e016      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c82:	d10d      	bne.n	8004ca0 <UART_Start_Receive_IT+0x9c>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <UART_Start_Receive_IT+0x92>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	227f      	movs	r2, #127	; 0x7f
 8004c90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c94:	e008      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	223f      	movs	r2, #63	; 0x3f
 8004c9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c9e:	e003      	b.n	8004ca8 <UART_Start_Receive_IT+0xa4>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2222      	movs	r2, #34	; 0x22
 8004cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004cdc:	673a      	str	r2, [r7, #112]	; 0x70
 8004cde:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004ce2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004cea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e3      	bne.n	8004cb8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf8:	d14f      	bne.n	8004d9a <UART_Start_Receive_IT+0x196>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d349      	bcc.n	8004d9a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d107      	bne.n	8004d20 <UART_Start_Receive_IT+0x11c>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a47      	ldr	r2, [pc, #284]	; (8004e38 <UART_Start_Receive_IT+0x234>)
 8004d1c:	675a      	str	r2, [r3, #116]	; 0x74
 8004d1e:	e002      	b.n	8004d26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a46      	ldr	r2, [pc, #280]	; (8004e3c <UART_Start_Receive_IT+0x238>)
 8004d24:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01a      	beq.n	8004d64 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e4      	bne.n	8004d2e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d84:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_Start_Receive_IT+0x160>
 8004d98:	e046      	b.n	8004e28 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da2:	d107      	bne.n	8004db4 <UART_Start_Receive_IT+0x1b0>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <UART_Start_Receive_IT+0x23c>)
 8004db0:	675a      	str	r2, [r3, #116]	; 0x74
 8004db2:	e002      	b.n	8004dba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <UART_Start_Receive_IT+0x240>)
 8004db8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d019      	beq.n	8004df6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004dd6:	677b      	str	r3, [r7, #116]	; 0x74
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
 8004de2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e6      	bne.n	8004dc2 <UART_Start_Receive_IT+0x1be>
 8004df4:	e018      	b.n	8004e28 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	613b      	str	r3, [r7, #16]
   return(result);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f043 0320 	orr.w	r3, r3, #32
 8004e0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	69f9      	ldr	r1, [r7, #28]
 8004e1a:	6a3a      	ldr	r2, [r7, #32]
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e6      	bne.n	8004df6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	378c      	adds	r7, #140	; 0x8c
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	08005669 	.word	0x08005669
 8004e3c:	08005309 	.word	0x08005309
 8004e40:	08005151 	.word	0x08005151
 8004e44:	08004f99 	.word	0x08004f99

08004e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b095      	sub	sp, #84	; 0x54
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e6      	bne.n	8004e50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e3      	bne.n	8004e82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d118      	bne.n	8004ef4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 0310 	bic.w	r3, r3, #16
 8004ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	6979      	ldr	r1, [r7, #20]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	613b      	str	r3, [r7, #16]
   return(result);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e6      	bne.n	8004ec2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f08:	bf00      	nop
 8004f0a:	3754      	adds	r7, #84	; 0x54
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff fa80 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6979      	ldr	r1, [r7, #20]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	613b      	str	r3, [r7, #16]
   return(result);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e6      	bne.n	8004f48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fa41 	bl	8004410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f8e:	bf00      	nop
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b09c      	sub	sp, #112	; 0x70
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004fa6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb0:	2b22      	cmp	r3, #34	; 0x22
 8004fb2:	f040 80be 	bne.w	8005132 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fc4:	b2d9      	uxtb	r1, r3
 8004fc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 80a1 	bne.w	8005142 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005014:	66bb      	str	r3, [r7, #104]	; 0x68
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800501e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005020:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800502c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e6      	bne.n	8005000 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3308      	adds	r3, #8
 8005038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	667b      	str	r3, [r7, #100]	; 0x64
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3308      	adds	r3, #8
 8005050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005052:	647a      	str	r2, [r7, #68]	; 0x44
 8005054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e5      	bne.n	8005032 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a33      	ldr	r2, [pc, #204]	; (800514c <UART_RxISR_8BIT+0x1b4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d01f      	beq.n	80050c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d018      	beq.n	80050c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	623b      	str	r3, [r7, #32]
   return(result);
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050a6:	663b      	str	r3, [r7, #96]	; 0x60
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30
 80050b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e6      	bne.n	8005092 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d12e      	bne.n	800512a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0310 	bic.w	r3, r3, #16
 80050e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	69b9      	ldr	r1, [r7, #24]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	617b      	str	r3, [r7, #20]
   return(result);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e6      	bne.n	80050d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b10      	cmp	r3, #16
 8005110:	d103      	bne.n	800511a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2210      	movs	r2, #16
 8005118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb f9d8 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005128:	e00b      	b.n	8005142 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff f97a 	bl	8004424 <HAL_UART_RxCpltCallback>
}
 8005130:	e007      	b.n	8005142 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	619a      	str	r2, [r3, #24]
}
 8005142:	bf00      	nop
 8005144:	3770      	adds	r7, #112	; 0x70
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40008000 	.word	0x40008000

08005150 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b09c      	sub	sp, #112	; 0x70
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800515e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005168:	2b22      	cmp	r3, #34	; 0x22
 800516a:	f040 80be 	bne.w	80052ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800517e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005182:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005186:	4013      	ands	r3, r2
 8005188:	b29a      	uxth	r2, r3
 800518a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800518c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	1c9a      	adds	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 80a1 	bne.w	80052fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051cc:	667b      	str	r3, [r7, #100]	; 0x64
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d6:	657b      	str	r3, [r7, #84]	; 0x54
 80051d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e6      	bne.n	80051b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3308      	adds	r3, #8
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	663b      	str	r3, [r7, #96]	; 0x60
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800520a:	643a      	str	r2, [r7, #64]	; 0x40
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a33      	ldr	r2, [pc, #204]	; (8005304 <UART_RxISR_16BIT+0x1b4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d01f      	beq.n	800527c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d018      	beq.n	800527c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	61fb      	str	r3, [r7, #28]
   return(result);
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800525e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800526e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e6      	bne.n	800524a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d12e      	bne.n	80052e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	60bb      	str	r3, [r7, #8]
   return(result);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f023 0310 	bic.w	r3, r3, #16
 800529e:	65bb      	str	r3, [r7, #88]	; 0x58
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	613b      	str	r3, [r7, #16]
   return(result);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e6      	bne.n	800528a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d103      	bne.n	80052d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2210      	movs	r2, #16
 80052d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fb f8fc 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052e0:	e00b      	b.n	80052fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff f89e 	bl	8004424 <HAL_UART_RxCpltCallback>
}
 80052e8:	e007      	b.n	80052fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0208 	orr.w	r2, r2, #8
 80052f8:	619a      	str	r2, [r3, #24]
}
 80052fa:	bf00      	nop
 80052fc:	3770      	adds	r7, #112	; 0x70
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40008000 	.word	0x40008000

08005308 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b0ac      	sub	sp, #176	; 0xb0
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005316:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800533e:	2b22      	cmp	r3, #34	; 0x22
 8005340:	f040 8182 	bne.w	8005648 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800534a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800534e:	e125      	b.n	800559c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800535a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800535e:	b2d9      	uxtb	r1, r3
 8005360:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005364:	b2da      	uxtb	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	400a      	ands	r2, r1
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d053      	beq.n	800544a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d011      	beq.n	80053d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80053ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f043 0201 	orr.w	r2, r3, #1
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d011      	beq.n	8005402 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80053de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2202      	movs	r2, #2
 80053f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f043 0204 	orr.w	r2, r3, #4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d011      	beq.n	8005432 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800540e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2204      	movs	r2, #4
 8005420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	f043 0202 	orr.w	r2, r3, #2
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7fe fffb 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 80a2 	bne.w	800559c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800546c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800547a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800547c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005480:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e4      	bne.n	8005458 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800549e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80054b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80054bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80054c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e1      	bne.n	800548e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a5f      	ldr	r2, [pc, #380]	; (8005660 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d021      	beq.n	800552c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01a      	beq.n	800552c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800550a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005518:	657b      	str	r3, [r7, #84]	; 0x54
 800551a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800551e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e4      	bne.n	80054f6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d130      	bne.n	8005596 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	f023 0310 	bic.w	r3, r3, #16
 800554e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800555c:	643b      	str	r3, [r7, #64]	; 0x40
 800555e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e4      	bne.n	800553a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b10      	cmp	r3, #16
 800557c:	d103      	bne.n	8005586 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2210      	movs	r2, #16
 8005584:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fa ffa2 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
 8005594:	e002      	b.n	800559c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fe ff44 	bl	8004424 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800559c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d006      	beq.n	80055b2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80055a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f47f aecf 	bne.w	8005350 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80055bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d049      	beq.n	8005658 <UART_RxISR_8BIT_FIFOEN+0x350>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80055ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d242      	bcs.n	8005658 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3308      	adds	r3, #8
 80055d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80055f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e3      	bne.n	80055d2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a15      	ldr	r2, [pc, #84]	; (8005664 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800560e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	60bb      	str	r3, [r7, #8]
   return(result);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f043 0320 	orr.w	r3, r3, #32
 8005624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6979      	ldr	r1, [r7, #20]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	613b      	str	r3, [r7, #16]
   return(result);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e4      	bne.n	8005610 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005646:	e007      	b.n	8005658 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0208 	orr.w	r2, r2, #8
 8005656:	619a      	str	r2, [r3, #24]
}
 8005658:	bf00      	nop
 800565a:	37b0      	adds	r7, #176	; 0xb0
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40008000 	.word	0x40008000
 8005664:	08004f99 	.word	0x08004f99

08005668 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b0ae      	sub	sp, #184	; 0xb8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005676:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800569e:	2b22      	cmp	r3, #34	; 0x22
 80056a0:	f040 8186 	bne.w	80059b0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ae:	e129      	b.n	8005904 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80056c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80056c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80056ca:	4013      	ands	r3, r2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b00      	cmp	r3, #0
 8005704:	d053      	beq.n	80057ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005706:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2201      	movs	r2, #1
 8005724:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572c:	f043 0201 	orr.w	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d011      	beq.n	8005766 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2202      	movs	r2, #2
 8005754:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575c:	f043 0204 	orr.w	r2, r3, #4
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d011      	beq.n	8005796 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2204      	movs	r2, #4
 8005784:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f043 0202 	orr.w	r2, r3, #2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579c:	2b00      	cmp	r3, #0
 800579e:	d006      	beq.n	80057ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fe fe49 	bl	8004438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 80a4 	bne.w	8005904 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057e2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e2      	bne.n	80057bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800581e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005820:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800582c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e1      	bne.n	80057f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a5f      	ldr	r2, [pc, #380]	; (80059c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d021      	beq.n	8005894 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01a      	beq.n	8005894 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005880:	65bb      	str	r3, [r7, #88]	; 0x58
 8005882:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800588e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e4      	bne.n	800585e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d130      	bne.n	80058fe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	f023 0310 	bic.w	r3, r3, #16
 80058b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058c4:	647b      	str	r3, [r7, #68]	; 0x44
 80058c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e4      	bne.n	80058a2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d103      	bne.n	80058ee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2210      	movs	r2, #16
 80058ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fa fdee 	bl	80004d8 <HAL_UARTEx_RxEventCallback>
 80058fc:	e002      	b.n	8005904 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fe fd90 	bl	8004424 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005904:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800590c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	f47f aecb 	bne.w	80056b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005920:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005924:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005928:	2b00      	cmp	r3, #0
 800592a:	d049      	beq.n	80059c0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005932:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005936:	429a      	cmp	r2, r3
 8005938:	d242      	bcs.n	80059c0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3308      	adds	r3, #8
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	623b      	str	r3, [r7, #32]
   return(result);
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3308      	adds	r3, #8
 800595a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800595e:	633a      	str	r2, [r7, #48]	; 0x30
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e3      	bne.n	800593a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a15      	ldr	r2, [pc, #84]	; (80059cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005976:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	60fb      	str	r3, [r7, #12]
   return(result);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f043 0320 	orr.w	r3, r3, #32
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	69b9      	ldr	r1, [r7, #24]
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	617b      	str	r3, [r7, #20]
   return(result);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e4      	bne.n	8005978 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059ae:	e007      	b.n	80059c0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0208 	orr.w	r2, r2, #8
 80059be:	619a      	str	r2, [r3, #24]
}
 80059c0:	bf00      	nop
 80059c2:	37b8      	adds	r7, #184	; 0xb8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40008000 	.word	0x40008000
 80059cc:	08005151 	.word	0x08005151

080059d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e027      	b.n	8005a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2224      	movs	r2, #36	; 0x24
 8005a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0201 	bic.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e02d      	b.n	8005af2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2224      	movs	r2, #36	; 0x24
 8005aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f8a0 	bl	8005c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e02d      	b.n	8005b6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2224      	movs	r2, #36	; 0x24
 8005b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f862 	bl	8005c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b08c      	sub	sp, #48	; 0x30
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	4613      	mov	r3, r2
 8005b82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d13b      	bne.n	8005c0c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e034      	b.n	8005c0e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff f824 	bl	8004c04 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d11d      	bne.n	8005c00 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2210      	movs	r2, #16
 8005bca:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f043 0310 	orr.w	r3, r3, #16
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6a39      	ldr	r1, [r7, #32]
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e6      	bne.n	8005bcc <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8005bfe:	e002      	b.n	8005c06 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8005c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c0a:	e000      	b.n	8005c0e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3730      	adds	r7, #48	; 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d108      	bne.n	8005c3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c38:	e031      	b.n	8005c9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c3e:	2308      	movs	r3, #8
 8005c40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	0e5b      	lsrs	r3, r3, #25
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	0f5b      	lsrs	r3, r3, #29
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c62:	7bbb      	ldrb	r3, [r7, #14]
 8005c64:	7b3a      	ldrb	r2, [r7, #12]
 8005c66:	4911      	ldr	r1, [pc, #68]	; (8005cac <UARTEx_SetNbDataToProcess+0x94>)
 8005c68:	5c8a      	ldrb	r2, [r1, r2]
 8005c6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c6e:	7b3a      	ldrb	r2, [r7, #12]
 8005c70:	490f      	ldr	r1, [pc, #60]	; (8005cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8005c72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c74:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	7b7a      	ldrb	r2, [r7, #13]
 8005c84:	4909      	ldr	r1, [pc, #36]	; (8005cac <UARTEx_SetNbDataToProcess+0x94>)
 8005c86:	5c8a      	ldrb	r2, [r1, r2]
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c8c:	7b7a      	ldrb	r2, [r7, #13]
 8005c8e:	4908      	ldr	r1, [pc, #32]	; (8005cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8005c90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c92:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	08006100 	.word	0x08006100
 8005cb0:	08006108 	.word	0x08006108

08005cb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cbc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005cc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cea:	b084      	sub	sp, #16
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	f107 0014 	add.w	r0, r7, #20
 8005cf8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	b004      	add	sp, #16
 8005d2a:	4770      	bx	lr

08005d2c <memset>:
 8005d2c:	4402      	add	r2, r0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d100      	bne.n	8005d36 <memset+0xa>
 8005d34:	4770      	bx	lr
 8005d36:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3a:	e7f9      	b.n	8005d30 <memset+0x4>

08005d3c <__libc_init_array>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4d0d      	ldr	r5, [pc, #52]	; (8005d74 <__libc_init_array+0x38>)
 8005d40:	4c0d      	ldr	r4, [pc, #52]	; (8005d78 <__libc_init_array+0x3c>)
 8005d42:	1b64      	subs	r4, r4, r5
 8005d44:	10a4      	asrs	r4, r4, #2
 8005d46:	2600      	movs	r6, #0
 8005d48:	42a6      	cmp	r6, r4
 8005d4a:	d109      	bne.n	8005d60 <__libc_init_array+0x24>
 8005d4c:	4d0b      	ldr	r5, [pc, #44]	; (8005d7c <__libc_init_array+0x40>)
 8005d4e:	4c0c      	ldr	r4, [pc, #48]	; (8005d80 <__libc_init_array+0x44>)
 8005d50:	f000 f818 	bl	8005d84 <_init>
 8005d54:	1b64      	subs	r4, r4, r5
 8005d56:	10a4      	asrs	r4, r4, #2
 8005d58:	2600      	movs	r6, #0
 8005d5a:	42a6      	cmp	r6, r4
 8005d5c:	d105      	bne.n	8005d6a <__libc_init_array+0x2e>
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d64:	4798      	blx	r3
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7ee      	b.n	8005d48 <__libc_init_array+0xc>
 8005d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6e:	4798      	blx	r3
 8005d70:	3601      	adds	r6, #1
 8005d72:	e7f2      	b.n	8005d5a <__libc_init_array+0x1e>
 8005d74:	08006118 	.word	0x08006118
 8005d78:	08006118 	.word	0x08006118
 8005d7c:	08006118 	.word	0x08006118
 8005d80:	0800611c 	.word	0x0800611c

08005d84 <_init>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	bf00      	nop
 8005d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8a:	bc08      	pop	{r3}
 8005d8c:	469e      	mov	lr, r3
 8005d8e:	4770      	bx	lr

08005d90 <_fini>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	bf00      	nop
 8005d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d96:	bc08      	pop	{r3}
 8005d98:	469e      	mov	lr, r3
 8005d9a:	4770      	bx	lr
