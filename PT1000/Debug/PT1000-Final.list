
PT1000-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000619c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  080063e0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000049c  20000018  080063ec  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200004b4  080063ec  000204b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 11 .debug_info   000189e9  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003191  00000000  00000000  00038a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001880  00000000  00000000  0003bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000012ac  00000000  00000000  0003d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023736  00000000  00000000  0003e734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016776  00000000  00000000  00061e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e7610  00000000  00000000  000785e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000692c  00000000  00000000  0015fbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0016651c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000018 	.word	0x20000018
 800015c:	00000000 	.word	0x00000000
 8000160:	080062c4 	.word	0x080062c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000001c 	.word	0x2000001c
 800017c:	080062c4 	.word	0x080062c4

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c28:	f023 0218 	bic.w	r2, r3, #24
 8000c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4013      	ands	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fc92 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f820 	bl	8000cf4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cb4:	f000 f892 	bl	8000ddc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb8:	f000 f9e6 	bl	8001088 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cbc:	f000 f9d2 	bl	8001064 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cc0:	f000 f95a 	bl	8000f78 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000cc4:	f000 f9a6 	bl	8001014 <MX_USB_PCD_Init>
  MX_MEMORYMAP_Init();
 8000cc8:	f000 f94e 	bl	8000f68 <MX_MEMORYMAP_Init>
  MX_ADC1_Init();
 8000ccc:	f000 f8b8 	bl	8000e40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000cd0:	217f      	movs	r1, #127	; 0x7f
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <main+0x44>)
 8000cd4:	f002 f854 	bl	8002d80 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&rawReading, 4);
 8000cd8:	2204      	movs	r2, #4
 8000cda:	4905      	ldr	r1, [pc, #20]	; (8000cf0 <main+0x48>)
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <main+0x44>)
 8000cde:	f001 f897 	bl	8001e10 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 fcfc 	bl	80016e0 <HAL_Delay>
 8000ce8:	e7fb      	b.n	8000ce2 <main+0x3a>
 8000cea:	bf00      	nop
 8000cec:	20000034 	.word	0x20000034
 8000cf0:	20000480 	.word	0x20000480

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b09a      	sub	sp, #104	; 0x68
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	2248      	movs	r2, #72	; 0x48
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 fab2 	bl	800626c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	615a      	str	r2, [r3, #20]
 8000d18:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d1a:	f002 fed5 	bl	8003ac8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000d1e:	2010      	movs	r0, #16
 8000d20:	f7ff ff7a 	bl	8000c18 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <SystemClock_Config+0xe4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d2c:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <SystemClock_Config+0xe4>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <SystemClock_Config+0xe4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000d40:	2327      	movs	r3, #39	; 0x27
 8000d42:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d54:	2301      	movs	r3, #1
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d58:	2340      	movs	r3, #64	; 0x40
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d60:	2360      	movs	r3, #96	; 0x60
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000d70:	2318      	movs	r3, #24
 8000d72:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d84:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fa30 	bl	80041f0 <HAL_RCC_OscConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d96:	f000 fa0f 	bl	80011b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000d9a:	236f      	movs	r3, #111	; 0x6f
 8000d9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2101      	movs	r1, #1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 fd8c 	bl	80048d8 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000dc6:	f000 f9f7 	bl	80011b8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dca:	f004 fb47 	bl	800545c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dce:	bf00      	nop
 8000dd0:	3768      	adds	r7, #104	; 0x68
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	58000400 	.word	0x58000400

08000ddc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2250      	movs	r2, #80	; 0x50
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 fa3f 	bl	800626c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000dee:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8000df2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000df4:	2318      	movs	r3, #24
 8000df6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e02:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000e04:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e08:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000e0a:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000e0e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 f9a2 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000e32:	f000 f9c1 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	; 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e56:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e58:	4a3e      	ldr	r2, [pc, #248]	; (8000f54 <MX_ADC1_Init+0x114>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e70:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8000e88:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb8:	4825      	ldr	r0, [pc, #148]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000eba:	f000 fe5d 	bl	8001b78 <HAL_ADC_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000ec4:	f000 f978 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <MX_ADC1_Init+0x118>)
 8000eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ecc:	2306      	movs	r3, #6
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed4:	237f      	movs	r3, #127	; 0x7f
 8000ed6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481a      	ldr	r0, [pc, #104]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000ee6:	f001 f9eb 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000ef0:	f000 f962 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_ADC1_Init+0x11c>)
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4813      	ldr	r0, [pc, #76]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000f02:	f001 f9dd 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000f0c:	f000 f954 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_ADC1_Init+0x120>)
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f14:	2312      	movs	r3, #18
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000f1e:	f001 f9cf 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000f28:	f000 f946 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_ADC1_Init+0x124>)
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f30:	2318      	movs	r3, #24
 8000f32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000f3a:	f001 f9c1 	bl	80022c0 <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000f44:	f000 f938 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000034 	.word	0x20000034
 8000f54:	50040000 	.word	0x50040000
 8000f58:	04300002 	.word	0x04300002
 8000f5c:	08600004 	.word	0x08600004
 8000f60:	0c900008 	.word	0x0c900008
 8000f64:	10c00010 	.word	0x10c00010

08000f68 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <MX_USART1_UART_Init+0x98>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f90:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc2:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fc4:	f004 fb81 	bl	80056ca <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000fce:	f000 f8f3 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fd6:	f005 f843 	bl	8006060 <HAL_UARTEx_SetTxFifoThreshold>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000fe0:	f000 f8ea 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000fe8:	f005 f878 	bl	80060dc <HAL_UARTEx_SetRxFifoThreshold>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000ff2:	f000 f8e1 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_USART1_UART_Init+0x94>)
 8000ff8:	f004 fff9 	bl	8005fee <HAL_UARTEx_DisableFifoMode>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001002:	f000 f8d9 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000f8 	.word	0x200000f8
 8001010:	40013800 	.word	0x40013800

08001014 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USB_PCD_Init+0x48>)
 800101a:	4a11      	ldr	r2, [pc, #68]	; (8001060 <MX_USB_PCD_Init+0x4c>)
 800101c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_USB_PCD_Init+0x48>)
 8001020:	2208      	movs	r2, #8
 8001022:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_USB_PCD_Init+0x48>)
 8001026:	2202      	movs	r2, #2
 8001028:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USB_PCD_Init+0x48>)
 800102c:	2202      	movs	r2, #2
 800102e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_USB_PCD_Init+0x48>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USB_PCD_Init+0x48>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_USB_PCD_Init+0x48>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USB_PCD_Init+0x48>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_USB_PCD_Init+0x48>)
 800104a:	f002 fc39 	bl	80038c0 <HAL_PCD_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001054:	f000 f8b0 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000018c 	.word	0x2000018c
 8001060:	40006800 	.word	0x40006800

08001064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001068:	2004      	movs	r0, #4
 800106a:	f7ff fdeb 	bl	8000c44 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fde8 	bl	8000c44 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	200b      	movs	r0, #11
 800107a:	f001 fff0 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800107e:	200b      	movs	r0, #11
 8001080:	f002 f807 	bl	8003092 <HAL_NVIC_EnableIRQ>

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109c:	2004      	movs	r0, #4
 800109e:	f7ff fdea 	bl	8000c76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2002      	movs	r0, #2
 80010a4:	f7ff fde7 	bl	8000c76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff fde4 	bl	8000c76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	2008      	movs	r0, #8
 80010b0:	f7ff fde1 	bl	8000c76 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2123      	movs	r1, #35	; 0x23
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <MX_GPIO_Init+0x70>)
 80010ba:	f002 fbe9 	bl	8003890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80010be:	2323      	movs	r3, #35	; 0x23
 80010c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <MX_GPIO_Init+0x70>)
 80010d4:	f002 fa6c 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80010d8:	2303      	movs	r3, #3
 80010da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_GPIO_Init+0x74>)
 80010ea:	f002 fa61 	bl	80035b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	48000400 	.word	0x48000400
 80010fc:	48000c00 	.word	0x48000c00

08001100 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
// Add callback function, where the interrupt handler is already provided to us

// @brief This callback function will execute after completed ADC conversions.
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e036      	b.n	800117c <HAL_ADC_ConvCpltCallback+0x7c>
	{
	  U2 = rawReading[i] * 0.00073242;
 800110e:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f983 	bl	8000424 <__aeabi_i2d>
 800111e:	a31c      	add	r3, pc, #112	; (adr r3, 8001190 <HAL_ADC_ConvCpltCallback+0x90>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff f9e8 	bl	80004f8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	491f      	ldr	r1, [pc, #124]	; (80011ac <HAL_ADC_ConvCpltCallback+0xac>)
 800112e:	e9c1 2300 	strd	r2, r3, [r1]
	  T[i] = ((U2-0.408)*100) / 2.04;
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <HAL_ADC_ConvCpltCallback+0xac>)
 8001134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001138:	a317      	add	r3, pc, #92	; (adr r3, 8001198 <HAL_ADC_ConvCpltCallback+0x98>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff f823 	bl	8000188 <__aeabi_dsub>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001150:	f7ff f9d2 	bl	80004f8 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	a310      	add	r3, pc, #64	; (adr r3, 80011a0 <HAL_ADC_ConvCpltCallback+0xa0>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff faf3 	bl	800074c <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <HAL_ADC_ConvCpltCallback+0xb4>)
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	00c9      	lsls	r1, r1, #3
 8001170:	4401      	add	r1, r0
 8001172:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < 4; i++)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b03      	cmp	r3, #3
 8001180:	ddc5      	ble.n	800110e <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	f3af 8000 	nop.w
 8001190:	f9353597 	.word	0xf9353597
 8001194:	3f47fffb 	.word	0x3f47fffb
 8001198:	083126e9 	.word	0x083126e9
 800119c:	3fda1cac 	.word	0x3fda1cac
 80011a0:	851eb852 	.word	0x851eb852
 80011a4:	400051eb 	.word	0x400051eb
 80011a8:	20000480 	.word	0x20000480
 80011ac:	200004a8 	.word	0x200004a8
 80011b0:	40590000 	.word	0x40590000
 80011b4:	20000488 	.word	0x20000488

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>

080011c2 <LL_AHB2_GRP1_EnableClock>:
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4313      	orrs	r3, r2
 800120a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001218:	68fb      	ldr	r3, [r7, #12]
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001232:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4313      	orrs	r3, r2
 800123c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800123e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001242:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4013      	ands	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800125c:	f000 fa78 	bl	8001750 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001260:	2002      	movs	r0, #2
 8001262:	f000 fa61 	bl	8001728 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <HAL_ADC_MspInit+0xb8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d146      	bne.n	800131c <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800128e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001292:	f7ff ff96 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2004      	movs	r0, #4
 8001298:	f7ff ff93 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800129c:	230f      	movs	r3, #15
 800129e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	481e      	ldr	r0, [pc, #120]	; (8001328 <HAL_ADC_MspInit+0xbc>)
 80012b0:	f002 f97e 	bl	80035b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <HAL_ADC_MspInit+0xc4>)
 80012b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012bc:	2205      	movs	r2, #5
 80012be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012e4:	2220      	movs	r2, #32
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f0:	480e      	ldr	r0, [pc, #56]	; (800132c <HAL_ADC_MspInit+0xc0>)
 80012f2:	f001 fee9 	bl	80030c8 <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80012fc:	f7ff ff5c 	bl	80011b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_ADC_MspInit+0xc0>)
 8001304:	64da      	str	r2, [r3, #76]	; 0x4c
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_ADC_MspInit+0xc0>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2012      	movs	r0, #18
 8001312:	f001 fea4 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001316:	2012      	movs	r0, #18
 8001318:	f001 febb 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	50040000 	.word	0x50040000
 8001328:	48000800 	.word	0x48000800
 800132c:	20000098 	.word	0x20000098
 8001330:	40020008 	.word	0x40020008

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b09c      	sub	sp, #112	; 0x70
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2250      	movs	r2, #80	; 0x50
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f004 ff89 	bl	800626c <memset>
  if(huart->Instance==USART1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <HAL_UART_MspInit+0x84>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d124      	bne.n	80013ae <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001364:	2301      	movs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fefd 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800137c:	f7ff ff1c 	bl	80011b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001380:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001384:	f7ff ff4f 	bl	8001226 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff ff1a 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800139e:	2307      	movs	r3, #7
 80013a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <HAL_UART_MspInit+0x88>)
 80013aa:	f002 f901 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3770      	adds	r7, #112	; 0x70
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40013800 	.word	0x40013800
 80013bc:	48000400 	.word	0x48000400

080013c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_PCD_MspInit+0x5c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d118      	bne.n	8001414 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff feed 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80013fa:	230a      	movs	r3, #10
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f002 f8d2 	bl	80035b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800140c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001410:	f7ff fef0 	bl	80011f4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001414:	bf00      	nop
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40006800 	.word	0x40006800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 f90c 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <DMA1_Channel1_IRQHandler+0x10>)
 800147a:	f001 ff48 	bl	800330e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000098 	.word	0x20000098

08001488 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <ADC1_IRQHandler+0x10>)
 800148e:	f000 fd43 	bl	8001f18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000034 	.word	0x20000034

0800149c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <SystemInit+0x98>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a23      	ldr	r2, [pc, #140]	; (8001534 <SystemInit+0x98>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80014c8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <SystemInit+0x9c>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014e6:	f023 0305 	bic.w	r3, r3, #5
 80014ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001506:	4a0d      	ldr	r2, [pc, #52]	; (800153c <SystemInit+0xa0>)
 8001508:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <SystemInit+0xa0>)
 8001510:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001520:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00
 8001538:	faf6fefb 	.word	0xfaf6fefb
 800153c:	22041000 	.word	0x22041000

08001540 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001540:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001542:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001544:	3304      	adds	r3, #4

08001546 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001546:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001548:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800154a:	d3f9      	bcc.n	8001540 <CopyDataInit>
  bx lr
 800154c:	4770      	bx	lr

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800154e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001550:	3004      	adds	r0, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001552:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>
  bx lr
 8001556:	4770      	bx	lr

08001558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800155a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800155c:	f7ff ff9e 	bl	800149c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopForever+0x6>)
 8001562:	490c      	ldr	r1, [pc, #48]	; (8001594 <LoopForever+0xa>)
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <LoopForever+0xe>)
 8001566:	2300      	movs	r3, #0
 8001568:	f7ff ffed 	bl	8001546 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <LoopForever+0x12>)
 800156e:	490c      	ldr	r1, [pc, #48]	; (80015a0 <LoopForever+0x16>)
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <LoopForever+0x1a>)
 8001572:	2300      	movs	r3, #0
 8001574:	f7ff ffe7 	bl	8001546 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <LoopForever+0x1e>)
 800157a:	490c      	ldr	r1, [pc, #48]	; (80015ac <LoopForever+0x22>)
 800157c:	2300      	movs	r3, #0
 800157e:	f7ff ffe8 	bl	8001552 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001582:	f004 fe7b 	bl	800627c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001586:	f7ff fb8f 	bl	8000ca8 <main>

0800158a <LoopForever>:

LoopForever:
  b LoopForever
 800158a:	e7fe      	b.n	800158a <LoopForever>
  ldr   r0, =_estack
 800158c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001590:	20000008 	.word	0x20000008
 8001594:	20000014 	.word	0x20000014
 8001598:	080063e0 	.word	0x080063e0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800159c:	20030000 	.word	0x20030000
 80015a0:	20030000 	.word	0x20030000
 80015a4:	080063ec 	.word	0x080063ec
  INIT_BSS _sbss, _ebss
 80015a8:	20000018 	.word	0x20000018
 80015ac:	200004b4 	.word	0x200004b4

080015b0 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <AES1_IRQHandler>
	...

080015b4 <LL_VREFBUF_Disable>:
  * @brief  Disable Internal voltage reference
  * @rmtoll VREFBUF_CSR  ENVR          LL_VREFBUF_Disable
  * @retval None
  */
__STATIC_INLINE void LL_VREFBUF_Disable(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_VREFBUF_Disable+0x1c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <LL_VREFBUF_Disable+0x1c>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40010030 	.word	0x40010030

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_Init+0x3c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <HAL_Init+0x3c>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f001 fd2c 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 f80f 	bl	8001614 <HAL_InitTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	e001      	b.n	8001606 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001602:	f7ff fe29 	bl	8001258 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001606:	79fb      	ldrb	r3, [r7, #7]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	58004000 	.word	0x58004000

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_InitTick+0x6c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d024      	beq.n	8001672 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001628:	f003 fb02 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 800162c:	4602      	mov	r2, r0
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_InitTick+0x6c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4619      	mov	r1, r3
 8001634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001638:	fbb3 f3f1 	udiv	r3, r3, r1
 800163c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f001 fd34 	bl	80030ae <HAL_SYSTICK_Config>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10f      	bne.n	800166c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	d809      	bhi.n	8001666 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001652:	2200      	movs	r2, #0
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	f04f 30ff 	mov.w	r0, #4294967295
 800165a:	f001 fd00 	bl	800305e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_InitTick+0x70>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e007      	b.n	8001676 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e004      	b.n	8001676 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000010 	.word	0x20000010
 8001684:	2000000c 	.word	0x2000000c

08001688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000010 	.word	0x20000010
 80016ac:	200004b0 	.word	0x200004b0

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200004b0 	.word	0x200004b0

080016c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTickPrio+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffe2 	bl	80016b0 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_Delay+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffd2 	bl	80016b0 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000010 	.word	0x20000010

08001728 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg @ref SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE : VREF+ pin is internally connect to VREFINT output.
  *            @arg @ref SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE : VREF+ pin is high impedance.
  * @retval HAL_OK/HAL_TIMEOUT
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 0202 	bic.w	r2, r3, #2
 8001738:	4904      	ldr	r1, [pc, #16]	; (800174c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40010030 	.word	0x40010030

08001750 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  LL_VREFBUF_Disable();
 8001754:	f7ff ff2e 	bl	80015b4 <LL_VREFBUF_Disable>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3360      	adds	r3, #96	; 0x60
 80017d6:	461a      	mov	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <LL_ADC_SetOffset+0x44>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	03fff000 	.word	0x03fff000

0800180c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3360      	adds	r3, #96	; 0x60
 800181a:	461a      	mov	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3360      	adds	r3, #96	; 0x60
 8001848:	461a      	mov	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001862:	bf00      	nop
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001886:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3330      	adds	r3, #48	; 0x30
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	211f      	movs	r1, #31
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	0e9b      	lsrs	r3, r3, #26
 80018cc:	f003 011f 	and.w	r1, r3, #31
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800192e:	b480      	push	{r7}
 8001930:	b087      	sub	sp, #28
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3314      	adds	r3, #20
 800193e:	461a      	mov	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	0e5b      	lsrs	r3, r3, #25
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	4413      	add	r3, r2
 800194c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	0d1b      	lsrs	r3, r3, #20
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2107      	movs	r1, #7
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	0d1b      	lsrs	r3, r3, #20
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	431a      	orrs	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199c:	43db      	mvns	r3, r3
 800199e:	401a      	ands	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0318 	and.w	r3, r3, #24
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019a8:	40d9      	lsrs	r1, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	400b      	ands	r3, r1
 80019ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b2:	431a      	orrs	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	0007ffff 	.word	0x0007ffff

080019cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6093      	str	r3, [r2, #8]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a54:	d101      	bne.n	8001a5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa4:	f043 0202 	orr.w	r2, r3, #2
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <LL_ADC_IsEnabled+0x18>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <LL_ADC_IsEnabled+0x1a>
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d101      	bne.n	8001af6 <LL_ADC_IsDisableOngoing+0x18>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <LL_ADC_IsDisableOngoing+0x1a>
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b18:	f043 0204 	orr.w	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d101      	bne.n	8001b44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e12e      	b.n	8001df4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff fb61 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff17 	bl	80019f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d004      	beq.n	8001bd2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fefd 	bl	80019cc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff32 	bl	8001a40 <LL_ADC_IsInternalRegulatorEnabled>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d115      	bne.n	8001c0e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff16 	bl	8001a18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bec:	4b83      	ldr	r3, [pc, #524]	; (8001dfc <HAL_ADC_Init+0x284>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	4a83      	ldr	r2, [pc, #524]	; (8001e00 <HAL_ADC_Init+0x288>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f9      	bne.n	8001c02 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff14 	bl	8001a40 <LL_ADC_IsInternalRegulatorEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	f043 0210 	orr.w	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff74 	bl	8001b2c <LL_ADC_REG_IsConversionOngoing>
 8001c44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 80c7 	bne.w	8001de2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 80c3 	bne.w	8001de2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c64:	f043 0202 	orr.w	r2, r3, #2
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff21 	bl	8001ab8 <LL_ADC_IsEnabled>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10b      	bne.n	8001c94 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c7c:	4861      	ldr	r0, [pc, #388]	; (8001e04 <HAL_ADC_Init+0x28c>)
 8001c7e:	f7ff ff1b 	bl	8001ab8 <LL_ADC_IsEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	485e      	ldr	r0, [pc, #376]	; (8001e08 <HAL_ADC_Init+0x290>)
 8001c90:	f7ff fd64 	bl	800175c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7e5b      	ldrb	r3, [r3, #25]
 8001c98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ca4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001caa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001cb4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d106      	bne.n	8001cd4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	045b      	lsls	r3, r3, #17
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <HAL_ADC_Init+0x294>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff0f 	bl	8001b2c <LL_ADC_REG_IsConversionOngoing>
 8001d0e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff1c 	bl	8001b52 <LL_ADC_INJ_IsConversionOngoing>
 8001d1a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d13d      	bne.n	8001d9e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d13a      	bne.n	8001d9e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d2c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d34:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d44:	f023 0302 	bic.w	r3, r3, #2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	69b9      	ldr	r1, [r7, #24]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d118      	bne.n	8001d8e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d66:	f023 0304 	bic.w	r3, r3, #4
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	e007      	b.n	8001d9e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10c      	bne.n	8001dc0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f023 010f 	bic.w	r1, r3, #15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dbe:	e007      	b.n	8001dd0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 020f 	bic.w	r2, r2, #15
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f023 0303 	bic.w	r3, r3, #3
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
 8001de0:	e007      	b.n	8001df2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	053e2d63 	.word	0x053e2d63
 8001e04:	50040000 	.word	0x50040000
 8001e08:	50040300 	.word	0x50040300
 8001e0c:	fff0c007 	.word	0xfff0c007

08001e10 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fe83 	bl	8001b2c <LL_ADC_REG_IsConversionOngoing>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d167      	bne.n	8001efc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_Start_DMA+0x2a>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e063      	b.n	8001f02 <HAL_ADC_Start_DMA+0xf2>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fe02 	bl	8002a4c <ADC_Enable>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d14f      	bne.n	8001ef2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	f023 0206 	bic.w	r2, r3, #6
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	659a      	str	r2, [r3, #88]	; 0x58
 8001e7e:	e002      	b.n	8001e86 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <HAL_ADC_Start_DMA+0xfc>)
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_ADC_Start_DMA+0x100>)
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_ADC_Start_DMA+0x104>)
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	221c      	movs	r2, #28
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0210 	orr.w	r2, r2, #16
 8001ebc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3340      	adds	r3, #64	; 0x40
 8001ed8:	4619      	mov	r1, r3
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f001 f99b 	bl	8003218 <HAL_DMA_Start_IT>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fe0a 	bl	8001b04 <LL_ADC_REG_StartConversion>
 8001ef0:	e006      	b.n	8001f00 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001efa:	e001      	b.n	8001f00 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
 8001efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	08002bff 	.word	0x08002bff
 8001f10:	08002cd7 	.word	0x08002cd7
 8001f14:	08002cf3 	.word	0x08002cf3

08001f18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d017      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x56>
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d012      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 ff97 	bl	8002e94 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x6a>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d05d      	beq.n	8002048 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d058      	beq.n	8002048 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fc5b 	bl	800186e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03d      	beq.n	800203a <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fcc:	d035      	beq.n	800203a <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d12e      	bne.n	800203a <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fda3 	bl	8001b2c <LL_ADC_REG_IsConversionOngoing>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d11a      	bne.n	8002022 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 020c 	bic.w	r2, r2, #12
 8001ffa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
 8002020:	e00b      	b.n	800203a <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff f860 	bl	8001100 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	220c      	movs	r2, #12
 8002046:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_ADC_IRQHandler+0x144>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002062:	2b00      	cmp	r3, #0
 8002064:	d074      	beq.n	8002150 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d06f      	beq.n	8002150 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fc3b 	bl	8001908 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002092:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fbe8 	bl	800186e <LL_ADC_REG_IsTriggerSourceSWStart>
 800209e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d049      	beq.n	8002142 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_ADC_IRQHandler+0x1b0>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d041      	beq.n	8002142 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13c      	bne.n	8002142 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d135      	bne.n	8002142 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d12e      	bne.n	8002142 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fd32 	bl	8001b52 <LL_ADC_INJ_IsConversionOngoing>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11a      	bne.n	800212a <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002102:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d112      	bne.n	8002142 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
 8002128:	e00b      	b.n	8002142 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fe7e 	bl	8002e44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2260      	movs	r2, #96	; 0x60
 800214e:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	2b00      	cmp	r3, #0
 8002158:	d011      	beq.n	800217e <HAL_ADC_IRQHandler+0x266>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00c      	beq.n	800217e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f891 	bl	8002298 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <HAL_ADC_IRQHandler+0x296>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00d      	beq.n	80021ae <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fe64 	bl	8002e6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_ADC_IRQHandler+0x2c6>
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fe56 	bl	8002e80 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d02b      	beq.n	8002240 <HAL_ADC_IRQHandler+0x328>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d026      	beq.n	8002240 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e009      	b.n	8002214 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fb71 	bl	80018ec <LL_ADC_REG_GetDMATransfer>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002210:	2301      	movs	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10e      	bne.n	8002238 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f043 0202 	orr.w	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f83a 	bl	80022ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2210      	movs	r2, #16
 800223e:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002246:	2b00      	cmp	r3, #0
 8002248:	d018      	beq.n	800227c <HAL_ADC_IRQHandler+0x364>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	f043 0208 	orr.w	r2, r3, #8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002274:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fdee 	bl	8002e58 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800227c:	bf00      	nop
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0b6      	sub	sp, #216	; 0xd8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x22>
 80022de:	2302      	movs	r3, #2
 80022e0:	e39f      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x762>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fc1c 	bl	8001b2c <LL_ADC_REG_IsConversionOngoing>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 8384 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	f7ff fac3 	bl	8001894 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fc0a 	bl	8001b2c <LL_ADC_REG_IsConversionOngoing>
 8002318:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fc16 	bl	8001b52 <LL_ADC_INJ_IsConversionOngoing>
 8002326:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 81a6 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 81a1 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	461a      	mov	r2, r3
 800234c:	f7ff faef 	bl	800192e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	08db      	lsrs	r3, r3, #3
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b04      	cmp	r3, #4
 8002370:	d00a      	beq.n	8002388 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6919      	ldr	r1, [r3, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002382:	f7ff fa1f 	bl	80017c4 <LL_ADC_SetOffset>
 8002386:	e17b      	b.n	8002680 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fa3c 	bl	800180c <LL_ADC_GetOffsetChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0xf4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fa31 	bl	800180c <LL_ADC_GetOffsetChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	f003 021f 	and.w	r2, r3, #31
 80023b2:	e01e      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x132>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fa26 	bl	800180c <LL_ADC_GetOffsetChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e004      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80023e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_ConfigChannel+0x14a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	e018      	b.n	800243c <HAL_ADC_ConfigChannel+0x17c>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800241e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e004      	b.n	800243c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	429a      	cmp	r2, r3
 800243e:	d106      	bne.n	800244e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2200      	movs	r2, #0
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f9f5 	bl	8001838 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff f9d9 	bl	800180c <LL_ADC_GetOffsetChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <HAL_ADC_ConfigChannel+0x1ba>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff f9ce 	bl	800180c <LL_ADC_GetOffsetChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	e01e      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x1f8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2101      	movs	r1, #1
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff f9c3 	bl	800180c <LL_ADC_GetOffsetChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002498:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800249c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e004      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80024ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x210>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	e018      	b.n	8002502 <HAL_ADC_ConfigChannel+0x242>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e004      	b.n	8002502 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80024f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	429a      	cmp	r2, r3
 8002504:	d106      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	2101      	movs	r1, #1
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f992 	bl	8001838 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f976 	bl	800180c <LL_ADC_GetOffsetChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x280>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2102      	movs	r1, #2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff f96b 	bl	800180c <LL_ADC_GetOffsetChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	f003 021f 	and.w	r2, r3, #31
 800253e:	e01e      	b.n	800257e <HAL_ADC_ConfigChannel+0x2be>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2102      	movs	r1, #2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f960 	bl	800180c <LL_ADC_GetOffsetChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800255e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002566:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e004      	b.n	800257c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x2d6>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0e9b      	lsrs	r3, r3, #26
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	e016      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x304>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e004      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80025ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d106      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2200      	movs	r2, #0
 80025ce:	2102      	movs	r1, #2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f931 	bl	8001838 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2103      	movs	r1, #3
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f915 	bl	800180c <LL_ADC_GetOffsetChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x342>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2103      	movs	r1, #3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f90a 	bl	800180c <LL_ADC_GetOffsetChannel>
 80025f8:	4603      	mov	r3, r0
 80025fa:	0e9b      	lsrs	r3, r3, #26
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	e017      	b.n	8002632 <HAL_ADC_ConfigChannel+0x372>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2103      	movs	r1, #3
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f8ff 	bl	800180c <LL_ADC_GetOffsetChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800261a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800261c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800261e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002624:	2320      	movs	r3, #32
 8002626:	e003      	b.n	8002630 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_ADC_ConfigChannel+0x38a>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	e011      	b.n	800266e <HAL_ADC_ConfigChannel+0x3ae>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800265a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800265c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	429a      	cmp	r2, r3
 8002670:	d106      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	2103      	movs	r1, #3
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f8dc 	bl	8001838 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fa17 	bl	8001ab8 <LL_ADC_IsEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 81c2 	bne.w	8002a16 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	461a      	mov	r2, r3
 80026a0:	f7ff f970 	bl	8001984 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a8e      	ldr	r2, [pc, #568]	; (80028e4 <HAL_ADC_ConfigChannel+0x624>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	f040 8130 	bne.w	8002910 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x418>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e019      	b.n	800270c <HAL_ADC_ConfigChannel+0x44c>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80026f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2b09      	cmp	r3, #9
 8002704:	bf94      	ite	ls
 8002706:	2301      	movls	r3, #1
 8002708:	2300      	movhi	r3, #0
 800270a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270c:	2b00      	cmp	r3, #0
 800270e:	d079      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <HAL_ADC_ConfigChannel+0x46c>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	069b      	lsls	r3, r3, #26
 8002726:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800272a:	e015      	b.n	8002758 <HAL_ADC_ConfigChannel+0x498>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800273a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	e003      	b.n	8002750 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3301      	adds	r3, #1
 8002752:	069b      	lsls	r3, r3, #26
 8002754:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x4b8>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	3301      	adds	r3, #1
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	e017      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x4e8>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002788:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e003      	b.n	800279c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	ea42 0103 	orr.w	r1, r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x50e>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	3301      	adds	r3, #1
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	051b      	lsls	r3, r3, #20
 80027cc:	e018      	b.n	8002800 <HAL_ADC_ConfigChannel+0x540>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002800:	430b      	orrs	r3, r1
 8002802:	e080      	b.n	8002906 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x560>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	3301      	adds	r3, #1
 8002818:	069b      	lsls	r3, r3, #26
 800281a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800281e:	e015      	b.n	800284c <HAL_ADC_ConfigChannel+0x58c>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e003      	b.n	8002844 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_ADC_ConfigChannel+0x5ac>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	3301      	adds	r3, #1
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	e017      	b.n	800289c <HAL_ADC_ConfigChannel+0x5dc>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	61fb      	str	r3, [r7, #28]
  return result;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e003      	b.n	8002890 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	ea42 0103 	orr.w	r1, r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x608>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	3301      	adds	r3, #1
 80028b4:	f003 021f 	and.w	r2, r3, #31
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	3b1e      	subs	r3, #30
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c6:	e01d      	b.n	8002904 <HAL_ADC_ConfigChannel+0x644>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	613b      	str	r3, [r7, #16]
  return result;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d103      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e005      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x630>
 80028e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f003 021f 	and.w	r2, r3, #31
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	3b1e      	subs	r3, #30
 80028fe:	051b      	lsls	r3, r3, #20
 8002900:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002904:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290a:	4619      	mov	r1, r3
 800290c:	f7ff f80f 	bl	800192e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b45      	ldr	r3, [pc, #276]	; (8002a2c <HAL_ADC_ConfigChannel+0x76c>)
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d07c      	beq.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800291c:	4844      	ldr	r0, [pc, #272]	; (8002a30 <HAL_ADC_ConfigChannel+0x770>)
 800291e:	f7fe ff43 	bl	80017a8 <LL_ADC_GetCommonPathInternalCh>
 8002922:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002926:	4843      	ldr	r0, [pc, #268]	; (8002a34 <HAL_ADC_ConfigChannel+0x774>)
 8002928:	f7ff f8c6 	bl	8001ab8 <LL_ADC_IsEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d15e      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a40      	ldr	r2, [pc, #256]	; (8002a38 <HAL_ADC_ConfigChannel+0x778>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d127      	bne.n	800298c <HAL_ADC_ConfigChannel+0x6cc>
 800293c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d121      	bne.n	800298c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a39      	ldr	r2, [pc, #228]	; (8002a34 <HAL_ADC_ConfigChannel+0x774>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d161      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002956:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800295a:	4619      	mov	r1, r3
 800295c:	4834      	ldr	r0, [pc, #208]	; (8002a30 <HAL_ADC_ConfigChannel+0x770>)
 800295e:	f7fe ff10 	bl	8001782 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <HAL_ADC_ConfigChannel+0x77c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	4a35      	ldr	r2, [pc, #212]	; (8002a40 <HAL_ADC_ConfigChannel+0x780>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800297c:	e002      	b.n	8002984 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3b01      	subs	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f9      	bne.n	800297e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800298a:	e044      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2c      	ldr	r2, [pc, #176]	; (8002a44 <HAL_ADC_ConfigChannel+0x784>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d113      	bne.n	80029be <HAL_ADC_ConfigChannel+0x6fe>
 8002996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a23      	ldr	r2, [pc, #140]	; (8002a34 <HAL_ADC_ConfigChannel+0x774>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d134      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b4:	4619      	mov	r1, r3
 80029b6:	481e      	ldr	r0, [pc, #120]	; (8002a30 <HAL_ADC_ConfigChannel+0x770>)
 80029b8:	f7fe fee3 	bl	8001782 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029bc:	e02b      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <HAL_ADC_ConfigChannel+0x788>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d126      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
 80029c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d120      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_ADC_ConfigChannel+0x774>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d11b      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80029de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029e6:	4619      	mov	r1, r3
 80029e8:	4811      	ldr	r0, [pc, #68]	; (8002a30 <HAL_ADC_ConfigChannel+0x770>)
 80029ea:	f7fe feca 	bl	8001782 <LL_ADC_SetCommonPathInternalCh>
 80029ee:	e012      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a02:	e008      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002a1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	37d8      	adds	r7, #216	; 0xd8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	80080000 	.word	0x80080000
 8002a30:	50040300 	.word	0x50040300
 8002a34:	50040000 	.word	0x50040000
 8002a38:	c7520000 	.word	0xc7520000
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	053e2d63 	.word	0x053e2d63
 8002a44:	cb840000 	.word	0xcb840000
 8002a48:	80000001 	.word	0x80000001

08002a4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff f82b 	bl	8001ab8 <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d15e      	bne.n	8002b26 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <ADC_Enable+0xe4>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f043 0210 	orr.w	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e04a      	b.n	8002b28 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe ffe6 	bl	8001a68 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a9c:	4825      	ldr	r0, [pc, #148]	; (8002b34 <ADC_Enable+0xe8>)
 8002a9e:	f7fe fe83 	bl	80017a8 <LL_ADC_GetCommonPathInternalCh>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00f      	beq.n	8002acc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <ADC_Enable+0xec>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <ADC_Enable+0xf0>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	3301      	adds	r3, #1
 8002abc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002abe:	e002      	b.n	8002ac6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f9      	bne.n	8002ac0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fdf0 	bl	80016b0 <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad2:	e021      	b.n	8002b18 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe ffed 	bl	8001ab8 <LL_ADC_IsEnabled>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe ffbd 	bl	8001a68 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aee:	f7fe fddf 	bl	80016b0 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d90d      	bls.n	8002b18 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f043 0210 	orr.w	r2, r3, #16
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e007      	b.n	8002b28 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d1d6      	bne.n	8002ad4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	8000003f 	.word	0x8000003f
 8002b34:	50040300 	.word	0x50040300
 8002b38:	20000008 	.word	0x20000008
 8002b3c:	053e2d63 	.word	0x053e2d63

08002b40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe ffc6 	bl	8001ade <LL_ADC_IsDisableOngoing>
 8002b52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe ffad 	bl	8001ab8 <LL_ADC_IsEnabled>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d047      	beq.n	8002bf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d144      	bne.n	8002bf4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030d 	and.w	r3, r3, #13
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d10c      	bne.n	8002b92 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe ff87 	bl	8001a90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2203      	movs	r2, #3
 8002b88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b8a:	f7fe fd91 	bl	80016b0 <HAL_GetTick>
 8002b8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b90:	e029      	b.n	8002be6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e023      	b.n	8002bf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bae:	f7fe fd7f 	bl	80016b0 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d914      	bls.n	8002be6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1dc      	bne.n	8002bae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d14b      	bne.n	8002cb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d021      	beq.n	8002c76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fe19 	bl	800186e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d032      	beq.n	8002ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d12b      	bne.n	8002ca8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d11f      	bne.n	8002ca8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
 8002c74:	e018      	b.n	8002ca8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7fe fa29 	bl	8001100 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cae:	e00e      	b.n	8002cce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff faf5 	bl	80022ac <HAL_ADC_ErrorCallback>
}
 8002cc2:	e004      	b.n	8002cce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff facd 	bl	8002284 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f043 0204 	orr.w	r2, r3, #4
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff fac7 	bl	80022ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <LL_ADC_StartCalibration>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d6c:	d101      	bne.n	8002d72 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADCEx_Calibration_Start+0x1c>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e04d      	b.n	8002e38 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff fecb 	bl	8002b40 <ADC_Disable>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d136      	bne.n	8002e22 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dbc:	f023 0302 	bic.w	r3, r3, #2
 8002dc0:	f043 0202 	orr.w	r2, r3, #2
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ffa9 	bl	8002d26 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dd4:	e014      	b.n	8002e00 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d90d      	bls.n	8002e00 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f023 0312 	bic.w	r3, r3, #18
 8002dec:	f043 0210 	orr.w	r2, r3, #16
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e01b      	b.n	8002e38 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ffa7 	bl	8002d58 <LL_ADC_IsCalibrationOnGoing>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e2      	bne.n	8002dd6 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f023 0303 	bic.w	r3, r3, #3
 8002e18:	f043 0201 	orr.w	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
 8002e20:	e005      	b.n	8002e2e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	00026aaa 	.word	0x00026aaa

08002e44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	; (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	; (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff40 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff90 	bl	8002f9c <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5f 	bl	8002f48 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff33 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa4 	bl	8003004 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e08e      	b.n	80031f8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_DMA_Init+0x138>)
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d80f      	bhi.n	8003106 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b45      	ldr	r3, [pc, #276]	; (8003204 <HAL_DMA_Init+0x13c>)
 80030ee:	4413      	add	r3, r2
 80030f0:	4a45      	ldr	r2, [pc, #276]	; (8003208 <HAL_DMA_Init+0x140>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	009a      	lsls	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a42      	ldr	r2, [pc, #264]	; (800320c <HAL_DMA_Init+0x144>)
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
 8003104:	e00e      	b.n	8003124 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	4b40      	ldr	r3, [pc, #256]	; (8003210 <HAL_DMA_Init+0x148>)
 800310e:	4413      	add	r3, r2
 8003110:	4a3d      	ldr	r2, [pc, #244]	; (8003208 <HAL_DMA_Init+0x140>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	009a      	lsls	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_DMA_Init+0x14c>)
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f9b6 	bl	80034e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003184:	d102      	bne.n	800318c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003198:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_DMA_Init+0x106>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d80c      	bhi.n	80031ce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f9d5 	bl	8003564 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	e008      	b.n	80031e0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40020407 	.word	0x40020407
 8003204:	bffdfff8 	.word	0xbffdfff8
 8003208:	cccccccd 	.word	0xcccccccd
 800320c:	40020000 	.word	0x40020000
 8003210:	bffdfbf8 	.word	0xbffdfbf8
 8003214:	40020400 	.word	0x40020400

08003218 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_DMA_Start_IT+0x20>
 8003234:	2302      	movs	r3, #2
 8003236:	e066      	b.n	8003306 <HAL_DMA_Start_IT+0xee>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d155      	bne.n	80032f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f8fb 	bl	800346c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 020e 	orr.w	r2, r2, #14
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e00f      	b.n	80032b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 020a 	orr.w	r2, r2, #10
 80032ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e005      	b.n	8003304 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003300:	2302      	movs	r3, #2
 8003302:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f003 031c 	and.w	r3, r3, #28
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d026      	beq.n	8003388 <HAL_DMA_IRQHandler+0x7a>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d021      	beq.n	8003388 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f003 021c 	and.w	r2, r3, #28
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2104      	movs	r1, #4
 8003370:	fa01 f202 	lsl.w	r2, r1, r2
 8003374:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	2b00      	cmp	r3, #0
 800337c:	d071      	beq.n	8003462 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003386:	e06c      	b.n	8003462 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f003 031c 	and.w	r3, r3, #28
 8003390:	2202      	movs	r2, #2
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d02e      	beq.n	80033fa <HAL_DMA_IRQHandler+0xec>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d029      	beq.n	80033fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10b      	bne.n	80033cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 020a 	bic.w	r2, r2, #10
 80033c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	f003 021c 	and.w	r2, r3, #28
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	2102      	movs	r1, #2
 80033da:	fa01 f202 	lsl.w	r2, r1, r2
 80033de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d038      	beq.n	8003462 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033f8:	e033      	b.n	8003462 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f003 031c 	and.w	r3, r3, #28
 8003402:	2208      	movs	r2, #8
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d02a      	beq.n	8003464 <HAL_DMA_IRQHandler+0x156>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d025      	beq.n	8003464 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 020e 	bic.w	r2, r2, #14
 8003426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f003 021c 	and.w	r2, r3, #28
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2101      	movs	r1, #1
 8003436:	fa01 f202 	lsl.w	r2, r1, r2
 800343a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003462:	bf00      	nop
 8003464:	bf00      	nop
}
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003482:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	2b00      	cmp	r3, #0
 800348a:	d004      	beq.n	8003496 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f003 021c 	and.w	r2, r3, #28
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d108      	bne.n	80034cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ca:	e007      	b.n	80034dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d80a      	bhi.n	8003512 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003508:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6493      	str	r3, [r2, #72]	; 0x48
 8003510:	e007      	b.n	8003522 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	009a      	lsls	r2, r3, #2
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800351c:	4413      	add	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3b08      	subs	r3, #8
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003538:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40020407 	.word	0x40020407
 8003558:	4002081c 	.word	0x4002081c
 800355c:	cccccccd 	.word	0xcccccccd
 8003560:	40020880 	.word	0x40020880

08003564 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003574:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a09      	ldr	r2, [pc, #36]	; (80035ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003588:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3b01      	subs	r3, #1
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2201      	movs	r2, #1
 8003594:	409a      	lsls	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	1000823f 	.word	0x1000823f
 80035ac:	40020940 	.word	0x40020940

080035b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035be:	e14c      	b.n	800385a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 813e 	beq.w	8003854 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d005      	beq.n	80035f0 <HAL_GPIO_Init+0x40>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d130      	bne.n	8003652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	2203      	movs	r2, #3
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003626:	2201      	movs	r2, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f003 0201 	and.w	r2, r3, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b03      	cmp	r3, #3
 800365c:	d017      	beq.n	800368e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d123      	bne.n	80036e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	08da      	lsrs	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3208      	adds	r2, #8
 80036dc:	6939      	ldr	r1, [r7, #16]
 80036de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0203 	and.w	r2, r3, #3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8098 	beq.w	8003854 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003724:	4a54      	ldr	r2, [pc, #336]	; (8003878 <HAL_GPIO_Init+0x2c8>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800374e:	d019      	beq.n	8003784 <HAL_GPIO_Init+0x1d4>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a4a      	ldr	r2, [pc, #296]	; (800387c <HAL_GPIO_Init+0x2cc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <HAL_GPIO_Init+0x1d0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a49      	ldr	r2, [pc, #292]	; (8003880 <HAL_GPIO_Init+0x2d0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00d      	beq.n	800377c <HAL_GPIO_Init+0x1cc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a48      	ldr	r2, [pc, #288]	; (8003884 <HAL_GPIO_Init+0x2d4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d007      	beq.n	8003778 <HAL_GPIO_Init+0x1c8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a47      	ldr	r2, [pc, #284]	; (8003888 <HAL_GPIO_Init+0x2d8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_GPIO_Init+0x1c4>
 8003770:	2304      	movs	r3, #4
 8003772:	e008      	b.n	8003786 <HAL_GPIO_Init+0x1d6>
 8003774:	2307      	movs	r3, #7
 8003776:	e006      	b.n	8003786 <HAL_GPIO_Init+0x1d6>
 8003778:	2303      	movs	r3, #3
 800377a:	e004      	b.n	8003786 <HAL_GPIO_Init+0x1d6>
 800377c:	2302      	movs	r3, #2
 800377e:	e002      	b.n	8003786 <HAL_GPIO_Init+0x1d6>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_GPIO_Init+0x1d6>
 8003784:	2300      	movs	r3, #0
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	f002 0203 	and.w	r2, r2, #3
 800378c:	0092      	lsls	r2, r2, #2
 800378e:	4093      	lsls	r3, r2
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003796:	4938      	ldr	r1, [pc, #224]	; (8003878 <HAL_GPIO_Init+0x2c8>)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a4:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_GPIO_Init+0x2dc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037c8:	4a30      	ldr	r2, [pc, #192]	; (800388c <HAL_GPIO_Init+0x2dc>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037ce:	4b2f      	ldr	r3, [pc, #188]	; (800388c <HAL_GPIO_Init+0x2dc>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037f2:	4a26      	ldr	r2, [pc, #152]	; (800388c <HAL_GPIO_Init+0x2dc>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_GPIO_Init+0x2dc>)
 80037fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800381e:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_GPIO_Init+0x2dc>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_GPIO_Init+0x2dc>)
 8003828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800384c:	4a0f      	ldr	r2, [pc, #60]	; (800388c <HAL_GPIO_Init+0x2dc>)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3301      	adds	r3, #1
 8003858:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	f47f aeab 	bne.w	80035c0 <HAL_GPIO_Init+0x10>
  }
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40010000 	.word	0x40010000
 800387c:	48000400 	.word	0x48000400
 8003880:	48000800 	.word	0x48000800
 8003884:	48000c00 	.word	0x48000c00
 8003888:	48001000 	.word	0x48001000
 800388c:	58000800 	.word	0x58000800

08003890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
 800389c:	4613      	mov	r3, r2
 800389e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a0:	787b      	ldrb	r3, [r7, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038a6:	887a      	ldrh	r2, [r7, #2]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	b08b      	sub	sp, #44	; 0x2c
 80038c4:	af06      	add	r7, sp, #24
 80038c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0cb      	b.n	8003a6a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fd6a 	bl	80013c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2203      	movs	r2, #3
 80038f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 fc7b 	bl	80061f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e040      	b.n	8003986 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	440b      	add	r3, r1
 8003914:	3301      	adds	r3, #1
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3303      	adds	r3, #3
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003944:	7bfa      	ldrb	r2, [r7, #15]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	440b      	add	r3, r1
 8003952:	3338      	adds	r3, #56	; 0x38
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003958:	7bfa      	ldrb	r2, [r7, #15]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	333c      	adds	r3, #60	; 0x3c
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	3340      	adds	r3, #64	; 0x40
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	3301      	adds	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	d3b9      	bcc.n	8003904 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003990:	2300      	movs	r3, #0
 8003992:	73fb      	strb	r3, [r7, #15]
 8003994:	e044      	b.n	8003a20 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039ac:	7bfa      	ldrb	r2, [r7, #15]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	440b      	add	r3, r1
 80039ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039c2:	7bfa      	ldrb	r2, [r7, #15]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	440b      	add	r3, r1
 80039d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	440b      	add	r3, r1
 80039fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	440b      	add	r3, r1
 8003a12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3b5      	bcc.n	8003996 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	687e      	ldr	r6, [r7, #4]
 8003a32:	466d      	mov	r5, sp
 8003a34:	f106 0410 	add.w	r4, r6, #16
 8003a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	602b      	str	r3, [r5, #0]
 8003a40:	1d33      	adds	r3, r6, #4
 8003a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a44:	6838      	ldr	r0, [r7, #0]
 8003a46:	f002 fbf0 	bl	800622a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f805 	bl	8003a72 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad6:	6013      	str	r3, [r2, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	58000400 	.word	0x58000400

08003ae8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_PWREx_GetVoltageRange+0x18>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	58000400 	.word	0x58000400

08003b04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b16:	d101      	bne.n	8003b1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_RCC_HSE_Enable>:
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_HSE_Disable>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_RCC_HSE_IsReady>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b76:	d101      	bne.n	8003b7c <LL_RCC_HSE_IsReady+0x18>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <LL_RCC_HSE_IsReady+0x1a>
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_RCC_HSI_Enable>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_HSI_Disable>:
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb8:	6013      	str	r3, [r2, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_RCC_HSI_IsReady>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd6:	d101      	bne.n	8003bdc <LL_RCC_HSI_IsReady+0x18>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <LL_RCC_HSI_IsReady+0x1a>
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_RCC_HSI48_Enable>:
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_HSI48_Disable>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_RCC_HSI48_IsReady>:
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d101      	bne.n	8003c6e <LL_RCC_HSI48_IsReady+0x18>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_RCC_HSI48_IsReady+0x1a>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_LSE_Enable>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_LSE_Disable>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_LSE_EnableBypass>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_RCC_LSE_DisableBypass>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d101      	bne.n	8003d1a <LL_RCC_LSE_IsReady+0x18>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <LL_RCC_LSE_IsReady+0x1a>
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d101      	bne.n	8003d82 <LL_RCC_LSI1_IsReady+0x18>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <LL_RCC_LSI1_IsReady+0x1a>
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9e:	f043 0304 	orr.w	r3, r3, #4
 8003da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d101      	bne.n	8003dea <LL_RCC_LSI2_IsReady+0x18>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <LL_RCC_LSI2_IsReady+0x1a>
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6013      	str	r3, [r2, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003e42:	b480      	push	{r7}
 8003e44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6013      	str	r3, [r2, #0]
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d101      	bne.n	8003e76 <LL_RCC_MSI_IsReady+0x16>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <LL_RCC_MSI_IsReady+0x18>
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2bb0      	cmp	r3, #176	; 0xb0
 8003ec0:	d901      	bls.n	8003ec6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003ec2:	23b0      	movs	r3, #176	; 0xb0
 8003ec4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003ec6:	687b      	ldr	r3, [r7, #4]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 0203 	bic.w	r2, r3, #3
 8003f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030c 	and.w	r3, r3, #12
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fa2:	f023 020f 	bic.w	r2, r3, #15
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4313      	orrs	r3, r2
 8004002:	608b      	str	r3, [r1, #8]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800403a:	4618      	mov	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a4:	6013      	str	r3, [r2, #0]
}
 80040a6:	bf00      	nop
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040c2:	d101      	bne.n	80040c8 <LL_RCC_PLL_IsReady+0x18>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <LL_RCC_PLL_IsReady+0x1a>
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80040f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0303 	and.w	r3, r3, #3
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d101      	bne.n	800414e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800415e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004162:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416e:	d101      	bne.n	8004174 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800418c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d101      	bne.n	800419a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b8:	d101      	bne.n	80041be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041dc:	d101      	bne.n	80041e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f0:	b590      	push	{r4, r7, lr}
 80041f2:	b08d      	sub	sp, #52	; 0x34
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e363      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 808d 	beq.w	800432a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004210:	f7ff fe89 	bl	8003f26 <LL_RCC_GetSysClkSource>
 8004214:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004216:	f7ff ff82 	bl	800411e <LL_RCC_PLL_GetMainSource>
 800421a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x3e>
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d147      	bne.n	80042b8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2b01      	cmp	r3, #1
 800422c:	d144      	bne.n	80042b8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e347      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800423e:	f7ff fe34 	bl	8003eaa <LL_RCC_MSI_GetRange>
 8004242:	4603      	mov	r3, r0
 8004244:	429c      	cmp	r4, r3
 8004246:	d914      	bls.n	8004272 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fd2f 	bl	8004cb0 <RCC_SetFlashLatencyFromMSIRange>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e336      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe0e 	bl	8003e82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fe32 	bl	8003ed4 <LL_RCC_MSI_SetCalibTrimming>
 8004270:	e013      	b.n	800429a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fe03 	bl	8003e82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fe27 	bl	8003ed4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fd10 	bl	8004cb0 <RCC_SetFlashLatencyFromMSIRange>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e317      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800429a:	f000 fcc9 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 800429e:	4603      	mov	r3, r0
 80042a0:	4aa4      	ldr	r2, [pc, #656]	; (8004534 <HAL_RCC_OscConfig+0x344>)
 80042a2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042a4:	4ba4      	ldr	r3, [pc, #656]	; (8004538 <HAL_RCC_OscConfig+0x348>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fd f9b3 	bl	8001614 <HAL_InitTick>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d039      	beq.n	8004328 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e308      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01e      	beq.n	80042fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042c0:	f7ff fdb0 	bl	8003e24 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042c4:	f7fd f9f4 	bl	80016b0 <HAL_GetTick>
 80042c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042cc:	f7fd f9f0 	bl	80016b0 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e2f5      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80042de:	f7ff fdbf 	bl	8003e60 <LL_RCC_MSI_IsReady>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f1      	beq.n	80042cc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fdc8 	bl	8003e82 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fdec 	bl	8003ed4 <LL_RCC_MSI_SetCalibTrimming>
 80042fc:	e015      	b.n	800432a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042fe:	f7ff fda0 	bl	8003e42 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004302:	f7fd f9d5 	bl	80016b0 <HAL_GetTick>
 8004306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800430a:	f7fd f9d1 	bl	80016b0 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e2d6      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800431c:	f7ff fda0 	bl	8003e60 <LL_RCC_MSI_IsReady>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f1      	bne.n	800430a <HAL_RCC_OscConfig+0x11a>
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004328:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d047      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004336:	f7ff fdf6 	bl	8003f26 <LL_RCC_GetSysClkSource>
 800433a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800433c:	f7ff feef 	bl	800411e <LL_RCC_PLL_GetMainSource>
 8004340:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d005      	beq.n	8004354 <HAL_RCC_OscConfig+0x164>
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d108      	bne.n	8004360 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d105      	bne.n	8004360 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d134      	bne.n	80043c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e2b4      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004368:	d102      	bne.n	8004370 <HAL_RCC_OscConfig+0x180>
 800436a:	f7ff fbdd 	bl	8003b28 <LL_RCC_HSE_Enable>
 800436e:	e001      	b.n	8004374 <HAL_RCC_OscConfig+0x184>
 8004370:	f7ff fbe9 	bl	8003b46 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d012      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd f998 	bl	80016b0 <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7fd f994 	bl	80016b0 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e299      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004396:	f7ff fbe5 	bl	8003b64 <LL_RCC_HSE_IsReady>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f1      	beq.n	8004384 <HAL_RCC_OscConfig+0x194>
 80043a0:	e011      	b.n	80043c6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fd f985 	bl	80016b0 <HAL_GetTick>
 80043a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043aa:	f7fd f981 	bl	80016b0 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b64      	cmp	r3, #100	; 0x64
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e286      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80043bc:	f7ff fbd2 	bl	8003b64 <LL_RCC_HSE_IsReady>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f1      	bne.n	80043aa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d04c      	beq.n	800446c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	f7ff fda8 	bl	8003f26 <LL_RCC_GetSysClkSource>
 80043d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d8:	f7ff fea1 	bl	800411e <LL_RCC_PLL_GetMainSource>
 80043dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x200>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d10e      	bne.n	8004408 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d10b      	bne.n	8004408 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e266      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fbf1 	bl	8003be8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004406:	e031      	b.n	800446c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d019      	beq.n	8004444 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004410:	f7ff fbba 	bl	8003b88 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fd f94c 	bl	80016b0 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441c:	f7fd f948 	bl	80016b0 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e24d      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800442e:	f7ff fbc9 	bl	8003bc4 <LL_RCC_HSI_IsReady>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f1      	beq.n	800441c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fbd3 	bl	8003be8 <LL_RCC_HSI_SetCalibTrimming>
 8004442:	e013      	b.n	800446c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004444:	f7ff fbaf 	bl	8003ba6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fd f932 	bl	80016b0 <HAL_GetTick>
 800444c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004450:	f7fd f92e 	bl	80016b0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e233      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004462:	f7ff fbaf 	bl	8003bc4 <LL_RCC_HSI_IsReady>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f1      	bne.n	8004450 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80a3 	beq.w	80045cc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d076      	beq.n	800457c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d046      	beq.n	8004528 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800449a:	f7ff fc66 	bl	8003d6a <LL_RCC_LSI1_IsReady>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d113      	bne.n	80044cc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80044a4:	f7ff fc3f 	bl	8003d26 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044a8:	f7fd f902 	bl	80016b0 <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044b0:	f7fd f8fe 	bl	80016b0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e203      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044c2:	f7ff fc52 	bl	8003d6a <LL_RCC_LSI1_IsReady>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f1      	beq.n	80044b0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80044cc:	f7ff fc5f 	bl	8003d8e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd f8ee 	bl	80016b0 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044d8:	f7fd f8ea 	bl	80016b0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e1ef      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80044ea:	f7ff fc72 	bl	8003dd2 <LL_RCC_LSI2_IsReady>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f1      	beq.n	80044d8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fc7c 	bl	8003df6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80044fe:	f7ff fc23 	bl	8003d48 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fd f8d5 	bl	80016b0 <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800450a:	f7fd f8d1 	bl	80016b0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e1d6      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800451c:	f7ff fc25 	bl	8003d6a <LL_RCC_LSI1_IsReady>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f1      	bne.n	800450a <HAL_RCC_OscConfig+0x31a>
 8004526:	e051      	b.n	80045cc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004528:	f7ff fbfd 	bl	8003d26 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd f8c0 	bl	80016b0 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004532:	e00c      	b.n	800454e <HAL_RCC_OscConfig+0x35e>
 8004534:	20000008 	.word	0x20000008
 8004538:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800453c:	f7fd f8b8 	bl	80016b0 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1bd      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800454e:	f7ff fc0c 	bl	8003d6a <LL_RCC_LSI1_IsReady>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f1      	beq.n	800453c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004558:	f7ff fc2a 	bl	8003db0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800455e:	f7fd f8a7 	bl	80016b0 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b03      	cmp	r3, #3
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1ac      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004570:	f7ff fc2f 	bl	8003dd2 <LL_RCC_LSI2_IsReady>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f1      	bne.n	800455e <HAL_RCC_OscConfig+0x36e>
 800457a:	e027      	b.n	80045cc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800457c:	f7ff fc18 	bl	8003db0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fd f896 	bl	80016b0 <HAL_GetTick>
 8004584:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004588:	f7fd f892 	bl	80016b0 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b03      	cmp	r3, #3
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e197      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800459a:	f7ff fc1a 	bl	8003dd2 <LL_RCC_LSI2_IsReady>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f1      	bne.n	8004588 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80045a4:	f7ff fbd0 	bl	8003d48 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd f882 	bl	80016b0 <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045b0:	f7fd f87e 	bl	80016b0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e183      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045c2:	f7ff fbd2 	bl	8003d6a <LL_RCC_LSI1_IsReady>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f1      	bne.n	80045b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05b      	beq.n	8004690 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d8:	4ba7      	ldr	r3, [pc, #668]	; (8004878 <HAL_RCC_OscConfig+0x688>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d114      	bne.n	800460e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80045e4:	f7ff fa70 	bl	8003ac8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e8:	f7fd f862 	bl	80016b0 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f0:	f7fd f85e 	bl	80016b0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e163      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004602:	4b9d      	ldr	r3, [pc, #628]	; (8004878 <HAL_RCC_OscConfig+0x688>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d102      	bne.n	800461c <HAL_RCC_OscConfig+0x42c>
 8004616:	f7ff fb30 	bl	8003c7a <LL_RCC_LSE_Enable>
 800461a:	e00c      	b.n	8004636 <HAL_RCC_OscConfig+0x446>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b05      	cmp	r3, #5
 8004622:	d104      	bne.n	800462e <HAL_RCC_OscConfig+0x43e>
 8004624:	f7ff fb4b 	bl	8003cbe <LL_RCC_LSE_EnableBypass>
 8004628:	f7ff fb27 	bl	8003c7a <LL_RCC_LSE_Enable>
 800462c:	e003      	b.n	8004636 <HAL_RCC_OscConfig+0x446>
 800462e:	f7ff fb35 	bl	8003c9c <LL_RCC_LSE_Disable>
 8004632:	f7ff fb55 	bl	8003ce0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d014      	beq.n	8004668 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463e:	f7fd f837 	bl	80016b0 <HAL_GetTick>
 8004642:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fd f833 	bl	80016b0 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e136      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800465c:	f7ff fb51 	bl	8003d02 <LL_RCC_LSE_IsReady>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0ef      	beq.n	8004646 <HAL_RCC_OscConfig+0x456>
 8004666:	e013      	b.n	8004690 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fd f822 	bl	80016b0 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fd f81e 	bl	80016b0 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e121      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004686:	f7ff fb3c 	bl	8003d02 <LL_RCC_LSE_IsReady>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1ef      	bne.n	8004670 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d014      	beq.n	80046ce <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046a4:	f7ff fab5 	bl	8003c12 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd f802 	bl	80016b0 <HAL_GetTick>
 80046ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b0:	f7fc fffe 	bl	80016b0 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e103      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046c2:	f7ff fac8 	bl	8003c56 <LL_RCC_HSI48_IsReady>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f1      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4c0>
 80046cc:	e013      	b.n	80046f6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046ce:	f7ff fab1 	bl	8003c34 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d2:	f7fc ffed 	bl	80016b0 <HAL_GetTick>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046da:	f7fc ffe9 	bl	80016b0 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e0ee      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80046ec:	f7ff fab3 	bl	8003c56 <LL_RCC_HSI48_IsReady>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f1      	bne.n	80046da <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80e4 	beq.w	80048c8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004700:	f7ff fc11 	bl	8003f26 <LL_RCC_GetSysClkSource>
 8004704:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	2b02      	cmp	r3, #2
 8004714:	f040 80b4 	bne.w	8004880 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0203 	and.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	429a      	cmp	r2, r3
 8004724:	d123      	bne.n	800476e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d11c      	bne.n	800476e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d114      	bne.n	800476e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d10d      	bne.n	800476e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d106      	bne.n	800476e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d05d      	beq.n	800482a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b0c      	cmp	r3, #12
 8004772:	d058      	beq.n	8004826 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e0a1      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004786:	f7ff fc84 	bl	8004092 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800478a:	f7fc ff91 	bl	80016b0 <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004792:	f7fc ff8d 	bl	80016b0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e092      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ef      	bne.n	8004792 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	4b30      	ldr	r3, [pc, #192]	; (800487c <HAL_RCC_OscConfig+0x68c>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c4:	4311      	orrs	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047ca:	0212      	lsls	r2, r2, #8
 80047cc:	4311      	orrs	r1, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047d2:	4311      	orrs	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047d8:	4311      	orrs	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047de:	430a      	orrs	r2, r1
 80047e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047e8:	f7ff fc44 	bl	8004074 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047fc:	f7fc ff58 	bl	80016b0 <HAL_GetTick>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fc ff54 	bl	80016b0 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e059      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0ef      	beq.n	8004804 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004824:	e050      	b.n	80048c8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e04f      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d147      	bne.n	80048c8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004838:	f7ff fc1c 	bl	8004074 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800483c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800484c:	f7fc ff30 	bl	80016b0 <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fc ff2c 	bl	80016b0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e031      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ef      	beq.n	8004854 <HAL_RCC_OscConfig+0x664>
 8004874:	e028      	b.n	80048c8 <HAL_RCC_OscConfig+0x6d8>
 8004876:	bf00      	nop
 8004878:	58000400 	.word	0x58000400
 800487c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d01e      	beq.n	80048c4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	f7ff fc04 	bl	8004092 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488a:	f7fc ff11 	bl	80016b0 <HAL_GetTick>
 800488e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004892:	f7fc ff0d 	bl	80016b0 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e012      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ef      	bne.n	8004892 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCC_OscConfig+0x6e4>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60cb      	str	r3, [r1, #12]
 80048c2:	e001      	b.n	80048c8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3734      	adds	r7, #52	; 0x34
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}
 80048d2:	bf00      	nop
 80048d4:	eefefffc 	.word	0xeefefffc

080048d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e12d      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b98      	ldr	r3, [pc, #608]	; (8004b50 <HAL_RCC_ClockConfig+0x278>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d91b      	bls.n	8004932 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b95      	ldr	r3, [pc, #596]	; (8004b50 <HAL_RCC_ClockConfig+0x278>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 0207 	bic.w	r2, r3, #7
 8004902:	4993      	ldr	r1, [pc, #588]	; (8004b50 <HAL_RCC_ClockConfig+0x278>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	4313      	orrs	r3, r2
 8004908:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490a:	f7fc fed1 	bl	80016b0 <HAL_GetTick>
 800490e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004910:	e008      	b.n	8004924 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004912:	f7fc fecd 	bl	80016b0 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e111      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004924:	4b8a      	ldr	r3, [pc, #552]	; (8004b50 <HAL_RCC_ClockConfig+0x278>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d1ef      	bne.n	8004912 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fafb 	bl	8003f3e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004948:	f7fc feb2 	bl	80016b0 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004950:	f7fc feae 	bl	80016b0 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0f2      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004962:	f7ff fbe8 	bl	8004136 <LL_RCC_IsActiveFlag_HPRE>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f1      	beq.n	8004950 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d016      	beq.n	80049a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff faf2 	bl	8003f66 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004982:	f7fc fe95 	bl	80016b0 <HAL_GetTick>
 8004986:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004988:	e008      	b.n	800499c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800498a:	f7fc fe91 	bl	80016b0 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0d5      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800499c:	f7ff fbdd 	bl	800415a <LL_RCC_IsActiveFlag_C2HPRE>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f1      	beq.n	800498a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d016      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff faeb 	bl	8003f92 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049bc:	f7fc fe78 	bl	80016b0 <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049c4:	f7fc fe74 	bl	80016b0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0b8      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80049d6:	f7ff fbd3 	bl	8004180 <LL_RCC_IsActiveFlag_SHDHPRE>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f1      	beq.n	80049c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d016      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fae5 	bl	8003fc0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049f6:	f7fc fe5b 	bl	80016b0 <HAL_GetTick>
 80049fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049fe:	f7fc fe57 	bl	80016b0 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e09b      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a10:	f7ff fbc9 	bl	80041a6 <LL_RCC_IsActiveFlag_PPRE1>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f1      	beq.n	80049fe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d017      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fadb 	bl	8003fe8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a32:	f7fc fe3d 	bl	80016b0 <HAL_GetTick>
 8004a36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a3a:	f7fc fe39 	bl	80016b0 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e07d      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a4c:	f7ff fbbd 	bl	80041ca <LL_RCC_IsActiveFlag_PPRE2>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f1      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d043      	beq.n	8004aea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d106      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004a6a:	f7ff f87b 	bl	8003b64 <LL_RCC_HSE_IsReady>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11e      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e067      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a80:	f7ff fb16 	bl	80040b0 <LL_RCC_PLL_IsReady>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d113      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e05c      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a96:	f7ff f9e3 	bl	8003e60 <LL_RCC_MSI_IsReady>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d108      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e051      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004aa4:	f7ff f88e 	bl	8003bc4 <LL_RCC_HSI_IsReady>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e04a      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fa21 	bl	8003efe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abc:	f7fc fdf8 	bl	80016b0 <HAL_GetTick>
 8004ac0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac4:	f7fc fdf4 	bl	80016b0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e036      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ada:	f7ff fa24 	bl	8003f26 <LL_RCC_GetSysClkSource>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d1ec      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aea:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_ClockConfig+0x278>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d21b      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af8:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <HAL_RCC_ClockConfig+0x278>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 0207 	bic.w	r2, r3, #7
 8004b00:	4913      	ldr	r1, [pc, #76]	; (8004b50 <HAL_RCC_ClockConfig+0x278>)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fc fdd2 	bl	80016b0 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b10:	f7fc fdce 	bl	80016b0 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e012      	b.n	8004b48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_ClockConfig+0x278>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d1ef      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b30:	f000 f87e 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <HAL_RCC_ClockConfig+0x27c>)
 8004b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004b3a:	f7fc fdc5 	bl	80016c8 <HAL_GetTickPrio>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fc fd67 	bl	8001614 <HAL_InitTick>
 8004b46:	4603      	mov	r3, r0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	58004000 	.word	0x58004000
 8004b54:	20000008 	.word	0x20000008

08004b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5e:	f7ff f9e2 	bl	8003f26 <LL_RCC_GetSysClkSource>
 8004b62:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b6a:	f7ff f99e 	bl	8003eaa <LL_RCC_MSI_GetRange>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	4a2b      	ldr	r2, [pc, #172]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e04b      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d102      	bne.n	8004b8c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b86:	4b28      	ldr	r3, [pc, #160]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	e045      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d10a      	bne.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b92:	f7fe ffb7 	bl	8003b04 <LL_RCC_HSE_IsEnabledDiv2>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d102      	bne.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b9c:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e03a      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e037      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004ba8:	f7ff fab9 	bl	800411e <LL_RCC_PLL_GetMainSource>
 8004bac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x64>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d003      	beq.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x6a>
 8004bba:	e00d      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bbe:	60bb      	str	r3, [r7, #8]
        break;
 8004bc0:	e015      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bc2:	f7fe ff9f 	bl	8003b04 <LL_RCC_HSE_IsEnabledDiv2>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d102      	bne.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004bcc:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bce:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004bd0:	e00d      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004bd2:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004bd4:	60bb      	str	r3, [r7, #8]
        break;
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004bd8:	f7ff f967 	bl	8003eaa <LL_RCC_MSI_GetRange>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	4a0f      	ldr	r2, [pc, #60]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bea:	60bb      	str	r3, [r7, #8]
        break;
 8004bec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004bee:	f7ff fa71 	bl	80040d4 <LL_RCC_PLL_GetN>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	fb03 f402 	mul.w	r4, r3, r2
 8004bfa:	f7ff fa84 	bl	8004106 <LL_RCC_PLL_GetDivider>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	3301      	adds	r3, #1
 8004c04:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c08:	f7ff fa71 	bl	80040ee <LL_RCC_PLL_GetR>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	0f5b      	lsrs	r3, r3, #29
 8004c10:	3301      	adds	r3, #1
 8004c12:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c16:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd90      	pop	{r4, r7, pc}
 8004c22:	bf00      	nop
 8004c24:	08006368 	.word	0x08006368
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	01e84800 	.word	0x01e84800

08004c30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b598      	push	{r3, r4, r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004c34:	f7ff ff90 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004c38:	4604      	mov	r4, r0
 8004c3a:	f7ff f9e9 	bl	8004010 <LL_RCC_GetAHBPrescaler>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	4a03      	ldr	r2, [pc, #12]	; (8004c54 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd98      	pop	{r3, r4, r7, pc}
 8004c54:	08006308 	.word	0x08006308

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b598      	push	{r3, r4, r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c5c:	f7ff ffe8 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c60:	4604      	mov	r4, r0
 8004c62:	f7ff f9ef 	bl	8004044 <LL_RCC_GetAPB1Prescaler>
 8004c66:	4603      	mov	r3, r0
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	4a04      	ldr	r2, [pc, #16]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd98      	pop	{r3, r4, r7, pc}
 8004c80:	08006348 	.word	0x08006348

08004c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c84:	b598      	push	{r3, r4, r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004c88:	f7ff ffd2 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	f7ff f9e5 	bl	800405c <LL_RCC_GetAPB2Prescaler>
 8004c92:	4603      	mov	r3, r0
 8004c94:	0adb      	lsrs	r3, r3, #11
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd98      	pop	{r3, r4, r7, pc}
 8004cac:	08006348 	.word	0x08006348

08004cb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2bb0      	cmp	r3, #176	; 0xb0
 8004cbc:	d903      	bls.n	8004cc6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e007      	b.n	8004cd6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004cd6:	f7ff f9a7 	bl	8004028 <LL_RCC_GetAHB4Prescaler>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	0c9c      	lsrs	r4, r3, #18
 8004cfa:	f7fe fef5 	bl	8003ae8 <HAL_PWREx_GetVoltageRange>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4619      	mov	r1, r3
 8004d02:	4620      	mov	r0, r4
 8004d04:	f000 f80c 	bl	8004d20 <RCC_SetFlashLatency>
 8004d08:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd90      	pop	{r4, r7, pc}
 8004d12:	bf00      	nop
 8004d14:	08006368 	.word	0x08006368
 8004d18:	08006308 	.word	0x08006308
 8004d1c:	431bde83 	.word	0x431bde83

08004d20 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b093      	sub	sp, #76	; 0x4c
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004d2a:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <RCC_SetFlashLatency+0xe8>)
 8004d2c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004d30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <RCC_SetFlashLatency+0xec>)
 8004d38:	f107 031c 	add.w	r3, r7, #28
 8004d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004d42:	4b33      	ldr	r3, [pc, #204]	; (8004e10 <RCC_SetFlashLatency+0xf0>)
 8004d44:	f107 040c 	add.w	r4, r7, #12
 8004d48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004d4e:	2300      	movs	r3, #0
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d58:	d11a      	bne.n	8004d90 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d5e:	e013      	b.n	8004d88 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	3348      	adds	r3, #72	; 0x48
 8004d66:	443b      	add	r3, r7
 8004d68:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d807      	bhi.n	8004d82 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	3348      	adds	r3, #72	; 0x48
 8004d78:	443b      	add	r3, r7
 8004d7a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004d80:	e020      	b.n	8004dc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d84:	3301      	adds	r3, #1
 8004d86:	643b      	str	r3, [r7, #64]	; 0x40
 8004d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d9e8      	bls.n	8004d60 <RCC_SetFlashLatency+0x40>
 8004d8e:	e019      	b.n	8004dc4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d90:	2300      	movs	r3, #0
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d94:	e013      	b.n	8004dbe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	3348      	adds	r3, #72	; 0x48
 8004d9c:	443b      	add	r3, r7
 8004d9e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d807      	bhi.n	8004db8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3348      	adds	r3, #72	; 0x48
 8004dae:	443b      	add	r3, r7
 8004db0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004db6:	e005      	b.n	8004dc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	3301      	adds	r3, #1
 8004dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d9e8      	bls.n	8004d96 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004dc4:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <RCC_SetFlashLatency+0xf4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 0207 	bic.w	r2, r3, #7
 8004dcc:	4911      	ldr	r1, [pc, #68]	; (8004e14 <RCC_SetFlashLatency+0xf4>)
 8004dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004dd4:	f7fc fc6c 	bl	80016b0 <HAL_GetTick>
 8004dd8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004dda:	e008      	b.n	8004dee <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ddc:	f7fc fc68 	bl	80016b0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e007      	b.n	8004dfe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <RCC_SetFlashLatency+0xf4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d1ef      	bne.n	8004ddc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	374c      	adds	r7, #76	; 0x4c
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd90      	pop	{r4, r7, pc}
 8004e06:	bf00      	nop
 8004e08:	080062dc 	.word	0x080062dc
 8004e0c:	080062ec 	.word	0x080062ec
 8004e10:	080062f8 	.word	0x080062f8
 8004e14:	58004000 	.word	0x58004000

08004e18 <LL_RCC_LSE_IsEnabled>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <LL_RCC_LSE_IsEnabled+0x18>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <LL_RCC_LSE_IsEnabled+0x1a>
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_RCC_LSE_IsReady>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d101      	bne.n	8004e54 <LL_RCC_LSE_IsReady+0x18>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <LL_RCC_LSE_IsReady+0x1a>
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <LL_RCC_MSI_EnablePLLMode>:
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6e:	f043 0304 	orr.w	r3, r3, #4
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <LL_RCC_SetRFWKPClockSource>:
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <LL_RCC_SetSMPSClockSource>:
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f023 0203 	bic.w	r2, r3, #3
 8004ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_SetSMPSPrescaler>:
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_RCC_SetUSARTClockSource>:
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f023 0203 	bic.w	r2, r3, #3
 8004f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <LL_RCC_SetLPUARTClockSource>:
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <LL_RCC_SetI2CClockSource>:
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	401a      	ands	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <LL_RCC_SetLPTIMClockSource>:
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0c1b      	lsrs	r3, r3, #16
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <LL_RCC_SetSAIClockSource>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <LL_RCC_SetRNGClockSource>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <LL_RCC_SetCLK48ClockSource>:
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800502c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <LL_RCC_SetUSBClockSource>:
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ffe3 	bl	8005018 <LL_RCC_SetCLK48ClockSource>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <LL_RCC_SetADCClockSource>:
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800506e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_RCC_SetRTCClockSource>:
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800508e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <LL_RCC_GetRTCClockSource>:
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <LL_RCC_ForceBackupDomainReset>:
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80050d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80050ee:	b480      	push	{r7}
 80050f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80050f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_RCC_PLLSAI1_Enable>:
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_RCC_PLLSAI1_Disable>:
{
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800513c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005140:	6013      	str	r3, [r2, #0]
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <LL_RCC_PLLSAI1_IsReady>:
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800515e:	d101      	bne.n	8005164 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005178:	2300      	movs	r3, #0
 800517a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800517c:	2300      	movs	r3, #0
 800517e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d034      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005194:	d021      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005196:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800519a:	d81b      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800519c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a0:	d01d      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80051a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a6:	d815      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80051ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b0:	d110      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80051c2:	e00d      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 f94d 	bl	8005468 <RCCEx_PLLSAI1_ConfigNP>
 80051ce:	4603      	mov	r3, r0
 80051d0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051d2:	e005      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	77fb      	strb	r3, [r7, #31]
        break;
 80051d8:	e002      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80051da:	bf00      	nop
 80051dc:	e000      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80051de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e0:	7ffb      	ldrb	r3, [r7, #31]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d105      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fee8 	bl	8004fc0 <LL_RCC_SetSAIClockSource>
 80051f0:	e001      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d046      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005202:	f7ff ff56 	bl	80050b2 <LL_RCC_GetRTCClockSource>
 8005206:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	429a      	cmp	r2, r3
 8005210:	d03c      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005212:	f7fe fc59 	bl	8003ac8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff ff30 	bl	8005086 <LL_RCC_SetRTCClockSource>
 8005226:	e02e      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005230:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005232:	f7ff ff4b 	bl	80050cc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005236:	f7ff ff5a 	bl	80050ee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005252:	f7ff fde1 	bl	8004e18 <LL_RCC_LSE_IsEnabled>
 8005256:	4603      	mov	r3, r0
 8005258:	2b01      	cmp	r3, #1
 800525a:	d114      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800525c:	f7fc fa28 	bl	80016b0 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005262:	e00b      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005264:	f7fc fa24 	bl	80016b0 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005272:	4293      	cmp	r3, r2
 8005274:	d902      	bls.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	77fb      	strb	r3, [r7, #31]
              break;
 800527a:	e004      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800527c:	f7ff fdde 	bl	8004e3c <LL_RCC_LSE_IsReady>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d1ee      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005286:	7ffb      	ldrb	r3, [r7, #31]
 8005288:	77bb      	strb	r3, [r7, #30]
 800528a:	e001      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	7ffb      	ldrb	r3, [r7, #31]
 800528e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fe2a 	bl	8004efa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fe35 	bl	8004f26 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fe5d 	bl	8004f8c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fe52 	bl	8004f8c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fe2a 	bl	8004f52 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fe1f 	bl	8004f52 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d022      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fe8d 	bl	8005044 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005332:	d107      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800533e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005342:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800534c:	d10b      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f8e3 	bl	800551e <RCCEx_PLLSAI1_ConfigNQ>
 8005358:	4603      	mov	r3, r0
 800535a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800535c:	7ffb      	ldrb	r3, [r7, #31]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005362:	7ffb      	ldrb	r3, [r7, #31]
 8005364:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536e:	2b00      	cmp	r3, #0
 8005370:	d02b      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d008      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005384:	d003      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fe2a 	bl	8004fec <LL_RCC_SetRNGClockSource>
 8005398:	e00a      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7ff fe21 	bl	8004fec <LL_RCC_SetRNGClockSource>
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff fe34 	bl	8005018 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80053b8:	d107      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80053ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d022      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fe3d 	bl	800505a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e8:	d107      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005402:	d10b      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3304      	adds	r3, #4
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f8e3 	bl	80055d4 <RCCEx_PLLSAI1_ConfigNR>
 800540e:	4603      	mov	r3, r0
 8005410:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005418:	7ffb      	ldrb	r3, [r7, #31]
 800541a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fd26 	bl	8004e7e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fd45 	bl	8004ed2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fd2c 	bl	8004eaa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005452:	7fbb      	ldrb	r3, [r7, #30]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005460:	f7ff fcfe 	bl	8004e60 <LL_RCC_MSI_EnablePLLMode>
}
 8005464:	bf00      	nop
 8005466:	bd80      	pop	{r7, pc}

08005468 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005474:	f7ff fe5b 	bl	800512e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005478:	f7fc f91a 	bl	80016b0 <HAL_GetTick>
 800547c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800547e:	e009      	b.n	8005494 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005480:	f7fc f916 	bl	80016b0 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d902      	bls.n	8005494 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	73fb      	strb	r3, [r7, #15]
      break;
 8005492:	e004      	b.n	800549e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005494:	f7ff fe5a 	bl	800514c <LL_RCC_PLLSAI1_IsReady>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d137      	bne.n	8005514 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b8:	4313      	orrs	r3, r2
 80054ba:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80054bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ce:	4313      	orrs	r3, r2
 80054d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054d2:	f7ff fe1d 	bl	8005110 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d6:	f7fc f8eb 	bl	80016b0 <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054dc:	e009      	b.n	80054f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054de:	f7fc f8e7 	bl	80016b0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d902      	bls.n	80054f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	73fb      	strb	r3, [r7, #15]
        break;
 80054f0:	e004      	b.n	80054fc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054f2:	f7ff fe2b 	bl	800514c <LL_RCC_PLLSAI1_IsReady>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d1f0      	bne.n	80054de <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d108      	bne.n	8005514 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005510:	4313      	orrs	r3, r2
 8005512:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800552a:	f7ff fe00 	bl	800512e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800552e:	f7fc f8bf 	bl	80016b0 <HAL_GetTick>
 8005532:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005534:	e009      	b.n	800554a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005536:	f7fc f8bb 	bl	80016b0 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d902      	bls.n	800554a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e004      	b.n	8005554 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800554a:	f7ff fdff 	bl	800514c <LL_RCC_PLLSAI1_IsReady>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d137      	bne.n	80055ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800555a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800556e:	4313      	orrs	r3, r2
 8005570:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005584:	4313      	orrs	r3, r2
 8005586:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005588:	f7ff fdc2 	bl	8005110 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558c:	f7fc f890 	bl	80016b0 <HAL_GetTick>
 8005590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005592:	e009      	b.n	80055a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005594:	f7fc f88c 	bl	80016b0 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d902      	bls.n	80055a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	73fb      	strb	r3, [r7, #15]
        break;
 80055a6:	e004      	b.n	80055b2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055a8:	f7ff fdd0 	bl	800514c <LL_RCC_PLLSAI1_IsReady>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d1f0      	bne.n	8005594 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d108      	bne.n	80055ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c6:	4313      	orrs	r3, r2
 80055c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055e0:	f7ff fda5 	bl	800512e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055e4:	f7fc f864 	bl	80016b0 <HAL_GetTick>
 80055e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055ea:	e009      	b.n	8005600 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055ec:	f7fc f860 	bl	80016b0 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d902      	bls.n	8005600 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	73fb      	strb	r3, [r7, #15]
      break;
 80055fe:	e004      	b.n	800560a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005600:	f7ff fda4 	bl	800514c <LL_RCC_PLLSAI1_IsReady>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d137      	bne.n	8005680 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005624:	4313      	orrs	r3, r2
 8005626:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800563e:	f7ff fd67 	bl	8005110 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005642:	f7fc f835 	bl	80016b0 <HAL_GetTick>
 8005646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005648:	e009      	b.n	800565e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800564a:	f7fc f831 	bl	80016b0 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d902      	bls.n	800565e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	73fb      	strb	r3, [r7, #15]
        break;
 800565c:	e004      	b.n	8005668 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800565e:	f7ff fd75 	bl	800514c <LL_RCC_PLLSAI1_IsReady>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d1f0      	bne.n	800564a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d108      	bne.n	8005680 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800567c:	4313      	orrs	r3, r2
 800567e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <LL_RCC_GetUSARTClockSource>:
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005696:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4013      	ands	r3, r2
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <LL_RCC_GetLPUARTClockSource>:
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80056b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4013      	ands	r3, r2
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e042      	b.n	8005762 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb fe20 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	; 0x24
 80056f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa51 	bl	8005bbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f826 	bl	800576c <UART_SetConfig>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e01b      	b.n	8005762 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005738:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005748:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f042 0201 	orr.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fad0 	bl	8005d00 <UART_CheckIdleState>
 8005760:	4603      	mov	r3, r0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800576c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005770:	b08c      	sub	sp, #48	; 0x30
 8005772:	af00      	add	r7, sp, #0
 8005774:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	431a      	orrs	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	431a      	orrs	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4313      	orrs	r3, r2
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4baf      	ldr	r3, [pc, #700]	; (8005a58 <UART_SetConfig+0x2ec>)
 800579c:	4013      	ands	r3, r2
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4aa4      	ldr	r2, [pc, #656]	; (8005a5c <UART_SetConfig+0x2f0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d4:	4313      	orrs	r3, r2
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80057e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	f023 010f 	bic.w	r1, r3, #15
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a95      	ldr	r2, [pc, #596]	; (8005a60 <UART_SetConfig+0x2f4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d125      	bne.n	800585c <UART_SetConfig+0xf0>
 8005810:	2003      	movs	r0, #3
 8005812:	f7ff ff3a 	bl	800568a <LL_RCC_GetUSARTClockSource>
 8005816:	4603      	mov	r3, r0
 8005818:	2b03      	cmp	r3, #3
 800581a:	d81b      	bhi.n	8005854 <UART_SetConfig+0xe8>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0xb8>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005835 	.word	0x08005835
 8005828:	08005845 	.word	0x08005845
 800582c:	0800583d 	.word	0x0800583d
 8005830:	0800584d 	.word	0x0800584d
 8005834:	2301      	movs	r3, #1
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583a:	e042      	b.n	80058c2 <UART_SetConfig+0x156>
 800583c:	2302      	movs	r3, #2
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e03e      	b.n	80058c2 <UART_SetConfig+0x156>
 8005844:	2304      	movs	r3, #4
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e03a      	b.n	80058c2 <UART_SetConfig+0x156>
 800584c:	2308      	movs	r3, #8
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e036      	b.n	80058c2 <UART_SetConfig+0x156>
 8005854:	2310      	movs	r3, #16
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e032      	b.n	80058c2 <UART_SetConfig+0x156>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a7e      	ldr	r2, [pc, #504]	; (8005a5c <UART_SetConfig+0x2f0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d12a      	bne.n	80058bc <UART_SetConfig+0x150>
 8005866:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800586a:	f7ff ff1e 	bl	80056aa <LL_RCC_GetLPUARTClockSource>
 800586e:	4603      	mov	r3, r0
 8005870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005874:	d01a      	beq.n	80058ac <UART_SetConfig+0x140>
 8005876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800587a:	d81b      	bhi.n	80058b4 <UART_SetConfig+0x148>
 800587c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005880:	d00c      	beq.n	800589c <UART_SetConfig+0x130>
 8005882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005886:	d815      	bhi.n	80058b4 <UART_SetConfig+0x148>
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <UART_SetConfig+0x128>
 800588c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005890:	d008      	beq.n	80058a4 <UART_SetConfig+0x138>
 8005892:	e00f      	b.n	80058b4 <UART_SetConfig+0x148>
 8005894:	2300      	movs	r3, #0
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e012      	b.n	80058c2 <UART_SetConfig+0x156>
 800589c:	2302      	movs	r3, #2
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e00e      	b.n	80058c2 <UART_SetConfig+0x156>
 80058a4:	2304      	movs	r3, #4
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058aa:	e00a      	b.n	80058c2 <UART_SetConfig+0x156>
 80058ac:	2308      	movs	r3, #8
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b2:	e006      	b.n	80058c2 <UART_SetConfig+0x156>
 80058b4:	2310      	movs	r3, #16
 80058b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ba:	e002      	b.n	80058c2 <UART_SetConfig+0x156>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a65      	ldr	r2, [pc, #404]	; (8005a5c <UART_SetConfig+0x2f0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	f040 8097 	bne.w	80059fc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d823      	bhi.n	800591e <UART_SetConfig+0x1b2>
 80058d6:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <UART_SetConfig+0x170>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	08005901 	.word	0x08005901
 80058e0:	0800591f 	.word	0x0800591f
 80058e4:	08005909 	.word	0x08005909
 80058e8:	0800591f 	.word	0x0800591f
 80058ec:	0800590f 	.word	0x0800590f
 80058f0:	0800591f 	.word	0x0800591f
 80058f4:	0800591f 	.word	0x0800591f
 80058f8:	0800591f 	.word	0x0800591f
 80058fc:	08005917 	.word	0x08005917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005900:	f7ff f9aa 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005906:	e010      	b.n	800592a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005908:	4b56      	ldr	r3, [pc, #344]	; (8005a64 <UART_SetConfig+0x2f8>)
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800590c:	e00d      	b.n	800592a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800590e:	f7ff f923 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005914:	e009      	b.n	800592a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800591c:	e005      	b.n	800592a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005928:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 812b 	beq.w	8005b88 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	4a4c      	ldr	r2, [pc, #304]	; (8005a68 <UART_SetConfig+0x2fc>)
 8005938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800593c:	461a      	mov	r2, r3
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	fbb3 f3f2 	udiv	r3, r3, r2
 8005944:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	429a      	cmp	r2, r3
 8005954:	d305      	bcc.n	8005962 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	429a      	cmp	r2, r3
 8005960:	d903      	bls.n	800596a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005968:	e10e      	b.n	8005b88 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2200      	movs	r2, #0
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	60fa      	str	r2, [r7, #12]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	4a3c      	ldr	r2, [pc, #240]	; (8005a68 <UART_SetConfig+0x2fc>)
 8005978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800597c:	b29b      	uxth	r3, r3
 800597e:	2200      	movs	r2, #0
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005988:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800598c:	f7fa ffc6 	bl	800091c <__aeabi_uldivmod>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4610      	mov	r0, r2
 8005996:	4619      	mov	r1, r3
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	020b      	lsls	r3, r1, #8
 80059a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059a6:	0202      	lsls	r2, r0, #8
 80059a8:	6979      	ldr	r1, [r7, #20]
 80059aa:	6849      	ldr	r1, [r1, #4]
 80059ac:	0849      	lsrs	r1, r1, #1
 80059ae:	2000      	movs	r0, #0
 80059b0:	460c      	mov	r4, r1
 80059b2:	4605      	mov	r5, r0
 80059b4:	eb12 0804 	adds.w	r8, r2, r4
 80059b8:	eb43 0905 	adc.w	r9, r3, r5
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	469a      	mov	sl, r3
 80059c4:	4693      	mov	fp, r2
 80059c6:	4652      	mov	r2, sl
 80059c8:	465b      	mov	r3, fp
 80059ca:	4640      	mov	r0, r8
 80059cc:	4649      	mov	r1, r9
 80059ce:	f7fa ffa5 	bl	800091c <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4613      	mov	r3, r2
 80059d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e0:	d308      	bcc.n	80059f4 <UART_SetConfig+0x288>
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e8:	d204      	bcs.n	80059f4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	60da      	str	r2, [r3, #12]
 80059f2:	e0c9      	b.n	8005b88 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059fa:	e0c5      	b.n	8005b88 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a04:	d16d      	bne.n	8005ae2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005a06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	2b07      	cmp	r3, #7
 8005a0e:	d82d      	bhi.n	8005a6c <UART_SetConfig+0x300>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x2ac>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a39 	.word	0x08005a39
 8005a1c:	08005a41 	.word	0x08005a41
 8005a20:	08005a6d 	.word	0x08005a6d
 8005a24:	08005a47 	.word	0x08005a47
 8005a28:	08005a6d 	.word	0x08005a6d
 8005a2c:	08005a6d 	.word	0x08005a6d
 8005a30:	08005a6d 	.word	0x08005a6d
 8005a34:	08005a4f 	.word	0x08005a4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a38:	f7ff f924 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8005a3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a3e:	e01b      	b.n	8005a78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a40:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <UART_SetConfig+0x2f8>)
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a44:	e018      	b.n	8005a78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a46:	f7ff f887 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8005a4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a4c:	e014      	b.n	8005a78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a54:	e010      	b.n	8005a78 <UART_SetConfig+0x30c>
 8005a56:	bf00      	nop
 8005a58:	cfff69f3 	.word	0xcfff69f3
 8005a5c:	40008000 	.word	0x40008000
 8005a60:	40013800 	.word	0x40013800
 8005a64:	00f42400 	.word	0x00f42400
 8005a68:	080063a8 	.word	0x080063a8
      default:
        pclk = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8084 	beq.w	8005b88 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	4a4b      	ldr	r2, [pc, #300]	; (8005bb4 <UART_SetConfig+0x448>)
 8005a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a92:	005a      	lsls	r2, r3, #1
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	441a      	add	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	2b0f      	cmp	r3, #15
 8005aaa:	d916      	bls.n	8005ada <UART_SetConfig+0x36e>
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab2:	d212      	bcs.n	8005ada <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f023 030f 	bic.w	r3, r3, #15
 8005abc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	8bfb      	ldrh	r3, [r7, #30]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	8bfa      	ldrh	r2, [r7, #30]
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	e056      	b.n	8005b88 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ae0:	e052      	b.n	8005b88 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	2b07      	cmp	r3, #7
 8005aea:	d822      	bhi.n	8005b32 <UART_SetConfig+0x3c6>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0x388>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b23 	.word	0x08005b23
 8005b04:	08005b33 	.word	0x08005b33
 8005b08:	08005b33 	.word	0x08005b33
 8005b0c:	08005b33 	.word	0x08005b33
 8005b10:	08005b2b 	.word	0x08005b2b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7ff f8b6 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8005b18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b1a:	e010      	b.n	8005b3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b1c:	4b26      	ldr	r3, [pc, #152]	; (8005bb8 <UART_SetConfig+0x44c>)
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b20:	e00d      	b.n	8005b3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b22:	f7ff f819 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8005b26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b28:	e009      	b.n	8005b3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b30:	e005      	b.n	8005b3e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d021      	beq.n	8005b88 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <UART_SetConfig+0x448>)
 8005b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	441a      	add	r2, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	2b0f      	cmp	r3, #15
 8005b6c:	d909      	bls.n	8005b82 <UART_SetConfig+0x416>
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d205      	bcs.n	8005b82 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60da      	str	r2, [r3, #12]
 8005b80:	e002      	b.n	8005b88 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ba4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3730      	adds	r7, #48	; 0x30
 8005bac:	46bd      	mov	sp, r7
 8005bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb2:	bf00      	nop
 8005bb4:	080063a8 	.word	0x080063a8
 8005bb8:	00f42400 	.word	0x00f42400

08005bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01a      	beq.n	8005cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cba:	d10a      	bne.n	8005cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b098      	sub	sp, #96	; 0x60
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d10:	f7fb fcce 	bl	80016b0 <HAL_GetTick>
 8005d14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d12f      	bne.n	8005d84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f88e 	bl	8005e54 <UART_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d022      	beq.n	8005d84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d52:	653b      	str	r3, [r7, #80]	; 0x50
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e063      	b.n	8005e4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d149      	bne.n	8005e26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f857 	bl	8005e54 <UART_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d03c      	beq.n	8005e26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30
 8005dcc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e6      	bne.n	8005dac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3308      	adds	r3, #8
 8005de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f023 0301 	bic.w	r3, r3, #1
 8005df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dfe:	61fa      	str	r2, [r7, #28]
 8005e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	69b9      	ldr	r1, [r7, #24]
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e5      	bne.n	8005dde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e012      	b.n	8005e4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3758      	adds	r7, #88	; 0x58
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e64:	e049      	b.n	8005efa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d045      	beq.n	8005efa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6e:	f7fb fc1f 	bl	80016b0 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e048      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d031      	beq.n	8005efa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d110      	bne.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f838 	bl	8005f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e029      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed4:	d111      	bne.n	8005efa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f81e 	bl	8005f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e00f      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4013      	ands	r3, r2
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d0a6      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b095      	sub	sp, #84	; 0x54
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f48:	643b      	str	r3, [r7, #64]	; 0x40
 8005f4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e6      	bne.n	8005f2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e3      	bne.n	8005f5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d118      	bne.n	8005fce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f023 0310 	bic.w	r3, r3, #16
 8005fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fba:	61bb      	str	r3, [r7, #24]
 8005fbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6979      	ldr	r1, [r7, #20]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e6      	bne.n	8005f9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005fe2:	bf00      	nop
 8005fe4:	3754      	adds	r7, #84	; 0x54
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_UARTEx_DisableFifoMode+0x16>
 8006000:	2302      	movs	r3, #2
 8006002:	e027      	b.n	8006054 <HAL_UARTEx_DisableFifoMode+0x66>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2224      	movs	r2, #36	; 0x24
 8006010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006032:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006074:	2302      	movs	r3, #2
 8006076:	e02d      	b.n	80060d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	; 0x24
 8006084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f84f 	bl	8006158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e02d      	b.n	8006150 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2224      	movs	r2, #36	; 0x24
 8006100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f811 	bl	8006158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006164:	2b00      	cmp	r3, #0
 8006166:	d108      	bne.n	800617a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006178:	e031      	b.n	80061de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800617a:	2308      	movs	r3, #8
 800617c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800617e:	2308      	movs	r3, #8
 8006180:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	0e5b      	lsrs	r3, r3, #25
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	0f5b      	lsrs	r3, r3, #29
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	7b3a      	ldrb	r2, [r7, #12]
 80061a6:	4911      	ldr	r1, [pc, #68]	; (80061ec <UARTEx_SetNbDataToProcess+0x94>)
 80061a8:	5c8a      	ldrb	r2, [r1, r2]
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ae:	7b3a      	ldrb	r2, [r7, #12]
 80061b0:	490f      	ldr	r1, [pc, #60]	; (80061f0 <UARTEx_SetNbDataToProcess+0x98>)
 80061b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	7b7a      	ldrb	r2, [r7, #13]
 80061c4:	4909      	ldr	r1, [pc, #36]	; (80061ec <UARTEx_SetNbDataToProcess+0x94>)
 80061c6:	5c8a      	ldrb	r2, [r1, r2]
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061cc:	7b7a      	ldrb	r2, [r7, #13]
 80061ce:	4908      	ldr	r1, [pc, #32]	; (80061f0 <UARTEx_SetNbDataToProcess+0x98>)
 80061d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	080063c0 	.word	0x080063c0
 80061f0:	080063c8 	.word	0x080063c8

080061f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061fc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006200:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	b29b      	uxth	r3, r3
 800620e:	43db      	mvns	r3, r3
 8006210:	b29b      	uxth	r3, r3
 8006212:	4013      	ands	r3, r2
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800622a:	b084      	sub	sp, #16
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	f107 0014 	add.w	r0, r7, #20
 8006238:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	b004      	add	sp, #16
 800626a:	4770      	bx	lr

0800626c <memset>:
 800626c:	4402      	add	r2, r0
 800626e:	4603      	mov	r3, r0
 8006270:	4293      	cmp	r3, r2
 8006272:	d100      	bne.n	8006276 <memset+0xa>
 8006274:	4770      	bx	lr
 8006276:	f803 1b01 	strb.w	r1, [r3], #1
 800627a:	e7f9      	b.n	8006270 <memset+0x4>

0800627c <__libc_init_array>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	4d0d      	ldr	r5, [pc, #52]	; (80062b4 <__libc_init_array+0x38>)
 8006280:	4c0d      	ldr	r4, [pc, #52]	; (80062b8 <__libc_init_array+0x3c>)
 8006282:	1b64      	subs	r4, r4, r5
 8006284:	10a4      	asrs	r4, r4, #2
 8006286:	2600      	movs	r6, #0
 8006288:	42a6      	cmp	r6, r4
 800628a:	d109      	bne.n	80062a0 <__libc_init_array+0x24>
 800628c:	4d0b      	ldr	r5, [pc, #44]	; (80062bc <__libc_init_array+0x40>)
 800628e:	4c0c      	ldr	r4, [pc, #48]	; (80062c0 <__libc_init_array+0x44>)
 8006290:	f000 f818 	bl	80062c4 <_init>
 8006294:	1b64      	subs	r4, r4, r5
 8006296:	10a4      	asrs	r4, r4, #2
 8006298:	2600      	movs	r6, #0
 800629a:	42a6      	cmp	r6, r4
 800629c:	d105      	bne.n	80062aa <__libc_init_array+0x2e>
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a4:	4798      	blx	r3
 80062a6:	3601      	adds	r6, #1
 80062a8:	e7ee      	b.n	8006288 <__libc_init_array+0xc>
 80062aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ae:	4798      	blx	r3
 80062b0:	3601      	adds	r6, #1
 80062b2:	e7f2      	b.n	800629a <__libc_init_array+0x1e>
 80062b4:	080063d8 	.word	0x080063d8
 80062b8:	080063d8 	.word	0x080063d8
 80062bc:	080063d8 	.word	0x080063d8
 80062c0:	080063dc 	.word	0x080063dc

080062c4 <_init>:
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	bf00      	nop
 80062c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ca:	bc08      	pop	{r3}
 80062cc:	469e      	mov	lr, r3
 80062ce:	4770      	bx	lr

080062d0 <_fini>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	bf00      	nop
 80062d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d6:	bc08      	pop	{r3}
 80062d8:	469e      	mov	lr, r3
 80062da:	4770      	bx	lr
