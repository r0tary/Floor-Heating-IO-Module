
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec68  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800eda8  0800eda8  0001eda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f05c  0800f05c  0001f05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f064  0800f064  0001f064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f068  0800f068  0001f068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000008  0800f06c  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020fc  20000070  0800f0d4  00020070  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000216c  0800f0d4  0002216c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000308ff  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005f91  00000000  00000000  000509e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ba0  00000000  00000000  00056978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021b9  00000000  00000000  00059518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028ad2  00000000  00000000  0005b6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002ec41  00000000  00000000  000841a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00101835  00000000  00000000  000b2de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bc64  00000000  00000000  001b461c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001c0280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ed90 	.word	0x0800ed90

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	0800ed90 	.word	0x0800ed90

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b970 	b.w	8000cb4 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	460d      	mov	r5, r1
 80009f4:	4604      	mov	r4, r0
 80009f6:	460f      	mov	r7, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d14a      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4694      	mov	ip, r2
 8000a00:	d965      	bls.n	8000ace <__udivmoddi4+0xe2>
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	b143      	cbz	r3, 8000a1a <__udivmoddi4+0x2e>
 8000a08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a0c:	f1c3 0220 	rsb	r2, r3, #32
 8000a10:	409f      	lsls	r7, r3
 8000a12:	fa20 f202 	lsr.w	r2, r0, r2
 8000a16:	4317      	orrs	r7, r2
 8000a18:	409c      	lsls	r4, r3
 8000a1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1e:	fa1f f58c 	uxth.w	r5, ip
 8000a22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a26:	0c22      	lsrs	r2, r4, #16
 8000a28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a30:	fb01 f005 	mul.w	r0, r1, r5
 8000a34:	4290      	cmp	r0, r2
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x62>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a40:	f080 811c 	bcs.w	8000c7c <__udivmoddi4+0x290>
 8000a44:	4290      	cmp	r0, r2
 8000a46:	f240 8119 	bls.w	8000c7c <__udivmoddi4+0x290>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4462      	add	r2, ip
 8000a4e:	1a12      	subs	r2, r2, r0
 8000a50:	b2a4      	uxth	r4, r4
 8000a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5e:	fb00 f505 	mul.w	r5, r0, r5
 8000a62:	42a5      	cmp	r5, r4
 8000a64:	d90a      	bls.n	8000a7c <__udivmoddi4+0x90>
 8000a66:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6e:	f080 8107 	bcs.w	8000c80 <__udivmoddi4+0x294>
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	f240 8104 	bls.w	8000c80 <__udivmoddi4+0x294>
 8000a78:	4464      	add	r4, ip
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	2100      	movs	r1, #0
 8000a84:	b11e      	cbz	r6, 8000a8e <__udivmoddi4+0xa2>
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0xbc>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ed 	beq.w	8000c76 <__udivmoddi4+0x28a>
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	fab3 f183 	clz	r1, r3
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d149      	bne.n	8000b44 <__udivmoddi4+0x158>
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	d302      	bcc.n	8000aba <__udivmoddi4+0xce>
 8000ab4:	4282      	cmp	r2, r0
 8000ab6:	f200 80f8 	bhi.w	8000caa <__udivmoddi4+0x2be>
 8000aba:	1a84      	subs	r4, r0, r2
 8000abc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d0e2      	beq.n	8000a8e <__udivmoddi4+0xa2>
 8000ac8:	e9c6 4700 	strd	r4, r7, [r6]
 8000acc:	e7df      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000ace:	b902      	cbnz	r2, 8000ad2 <__udivmoddi4+0xe6>
 8000ad0:	deff      	udf	#255	; 0xff
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000aec:	fb07 2015 	mls	r0, r7, r5, r2
 8000af0:	0c22      	lsrs	r2, r4, #16
 8000af2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af6:	fb0e f005 	mul.w	r0, lr, r5
 8000afa:	4290      	cmp	r0, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x124>
 8000afe:	eb1c 0202 	adds.w	r2, ip, r2
 8000b02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x122>
 8000b08:	4290      	cmp	r0, r2
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2b8>
 8000b0e:	4645      	mov	r5, r8
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b18:	fb07 2210 	mls	r2, r7, r0, r2
 8000b1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x14e>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x14c>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2c2>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b42:	e79f      	b.n	8000a84 <__udivmoddi4+0x98>
 8000b44:	f1c1 0720 	rsb	r7, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa05 f401 	lsl.w	r4, r5, r1
 8000b56:	fa20 f307 	lsr.w	r3, r0, r7
 8000b5a:	40fd      	lsrs	r5, r7
 8000b5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b60:	4323      	orrs	r3, r4
 8000b62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6e:	0c1c      	lsrs	r4, r3, #16
 8000b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b74:	fb08 f50e 	mul.w	r5, r8, lr
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b90:	42a5      	cmp	r5, r4
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4464      	add	r4, ip
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	b29d      	uxth	r5, r3
 8000ba0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1da>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2ac>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	4464      	add	r4, ip
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fba3 9502 	umull	r9, r5, r3, r2
 8000bce:	eba4 040e 	sub.w	r4, r4, lr
 8000bd2:	42ac      	cmp	r4, r5
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46ae      	mov	lr, r5
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x29c>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x298>
 8000bdc:	b156      	cbz	r6, 8000bf4 <__udivmoddi4+0x208>
 8000bde:	ebb0 0208 	subs.w	r2, r0, r8
 8000be2:	eb64 040e 	sbc.w	r4, r4, lr
 8000be6:	fa04 f707 	lsl.w	r7, r4, r7
 8000bea:	40ca      	lsrs	r2, r1
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	f1c3 0120 	rsb	r1, r3, #32
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	fa20 f201 	lsr.w	r2, r0, r1
 8000c08:	fa25 f101 	lsr.w	r1, r5, r1
 8000c0c:	409d      	lsls	r5, r3
 8000c0e:	432a      	orrs	r2, r5
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c26:	fb00 f50e 	mul.w	r5, r0, lr
 8000c2a:	428d      	cmp	r5, r1
 8000c2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x258>
 8000c32:	eb1c 0101 	adds.w	r1, ip, r1
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c3c:	428d      	cmp	r5, r1
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1b49      	subs	r1, r1, r5
 8000c46:	b292      	uxth	r2, r2
 8000c48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	fb05 f10e 	mul.w	r1, r5, lr
 8000c58:	4291      	cmp	r1, r2
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x282>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c66:	4291      	cmp	r1, r2
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c6a:	3d02      	subs	r5, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a52      	subs	r2, r2, r1
 8000c70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0xfc>
 8000c76:	4631      	mov	r1, r6
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e708      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e6e6      	b.n	8000a4e <__udivmoddi4+0x62>
 8000c80:	4610      	mov	r0, r2
 8000c82:	e6fb      	b.n	8000a7c <__udivmoddi4+0x90>
 8000c84:	4548      	cmp	r0, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f0>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c90:	3b01      	subs	r3, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f0>
 8000c94:	4645      	mov	r5, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x282>
 8000c98:	462b      	mov	r3, r5
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1da>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x258>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca4:	3d02      	subs	r5, #2
 8000ca6:	4462      	add	r2, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x124>
 8000caa:	4608      	mov	r0, r1
 8000cac:	e70a      	b.n	8000ac4 <__udivmoddi4+0xd8>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x14e>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <PID0_step>:
float rtb_Sum = 0;
float temp_err = 0;

/* Model step function */
void PID0_step(double Temp)
{
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	ed87 0b00 	vstr	d0, [r7]
  real_T Input = 293.15 - (Temp + 273.15);
 8000cc2:	a36c      	add	r3, pc, #432	; (adr r3, 8000e74 <PID0_step+0x1bc>)
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ccc:	f7ff fa5e 	bl	800018c <__adddf3>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	a169      	add	r1, pc, #420	; (adr r1, 8000e7c <PID0_step+0x1c4>)
 8000cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cda:	f7ff fa55 	bl	8000188 <__aeabi_dsub>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  real_T rtb_FilterCoefficient;
  PID0_U.u = Input;
 8000ce6:	4958      	ldr	r1, [pc, #352]	; (8000e48 <PID0_step+0x190>)
 8000ce8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cec:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S27>/Derivative Gain'
   *  Inport: '<Root>/u'
   *  Sum: '<S28>/SumD'
   */
  // Derivative gain 0.0
  rtb_FilterCoefficient = (kD * PID0_U.u - PID0_DW.Filter_DSTATE) * 100.0;
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <PID0_step+0x190>)
 8000cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf6:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <PID0_step+0x194>)
 8000cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfc:	f7ff fbfc 	bl	80004f8 <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <PID0_step+0x198>)
 8000d0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d0e:	f7ff fa3b 	bl	8000188 <__aeabi_dsub>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <PID0_step+0x19c>)
 8000d20:	f7ff fbea 	bl	80004f8 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	e9c7 2302 	strd	r2, r3, [r7, #8]
   *  DiscreteIntegrator: '<S33>/Integrator's
   *  Gain: '<S38>/Proportional Gain'
   *  Inport: '<Root>/u'
   */
  // Proportional gain 0.001
  rtb_Sum = (kP * PID0_U.u + PID0_DW.Integrator_DSTATE) +
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <PID0_step+0x190>)
 8000d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d32:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <PID0_step+0x1a0>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff fbde 	bl	80004f8 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <PID0_step+0x198>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	f7ff fa1f 	bl	800018c <__adddf3>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d5a:	f7ff fa17 	bl	800018c <__adddf3>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff fdd9 	bl	800091c <__aeabi_d2f>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a3b      	ldr	r2, [pc, #236]	; (8000e5c <PID0_step+0x1a4>)
 8000d6e:	6013      	str	r3, [r2, #0]
    rtb_FilterCoefficient;


  /* Saturate: '<S40>/Saturation' */
  if (rtb_Sum > 1.0) {
 8000d70:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <PID0_step+0x1a4>)
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d82:	dd06      	ble.n	8000d92 <PID0_step+0xda>
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = 1.0;
 8000d84:	4936      	ldr	r1, [pc, #216]	; (8000e60 <PID0_step+0x1a8>)
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <PID0_step+0x1ac>)
 8000d8c:	e9c1 2300 	strd	r2, r3, [r1]
 8000d90:	e019      	b.n	8000dc6 <PID0_step+0x10e>
  } else if (rtb_Sum < 0.0) {
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <PID0_step+0x1a4>)
 8000d94:	edd3 7a00 	vldr	s15, [r3]
 8000d98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da0:	d507      	bpl.n	8000db2 <PID0_step+0xfa>
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = 0.0;
 8000da2:	492f      	ldr	r1, [pc, #188]	; (8000e60 <PID0_step+0x1a8>)
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e9c1 2300 	strd	r2, r3, [r1]
 8000db0:	e009      	b.n	8000dc6 <PID0_step+0x10e>
  } else {
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = rtb_Sum;
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <PID0_step+0x1a4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb46 	bl	8000448 <__aeabi_f2d>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4927      	ldr	r1, [pc, #156]	; (8000e60 <PID0_step+0x1a8>)
 8000dc2:	e9c1 2300 	strd	r2, r3, [r1]
   *  Inport: '<Root>/u'
   *  Sum: '<S26>/SumI2'
   *  Sum: '<S26>/SumI4'
   */
  // Integral gain 0.001
  PID0_DW.Integrator_DSTATE += ((Input + temp_err) * kI);
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <PID0_step+0x198>)
 8000dc8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <PID0_step+0x1b0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb39 	bl	8000448 <__aeabi_f2d>
 8000dd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dda:	f7ff f9d7 	bl	800018c <__adddf3>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <PID0_step+0x1b4>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fb84 	bl	80004f8 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4620      	mov	r0, r4
 8000df6:	4629      	mov	r1, r5
 8000df8:	f7ff f9c8 	bl	800018c <__adddf3>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4913      	ldr	r1, [pc, #76]	; (8000e50 <PID0_step+0x198>)
 8000e02:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for DiscreteIntegrator: '<S28>/Filter' */
  PID0_DW.Filter_DSTATE += 50.0 * rtb_FilterCoefficient;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <PID0_step+0x198>)
 8000e08:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <PID0_step+0x1b8>)
 8000e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e16:	f7ff fb6f 	bl	80004f8 <__aeabi_dmul>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4620      	mov	r0, r4
 8000e20:	4629      	mov	r1, r5
 8000e22:	f7ff f9b3 	bl	800018c <__adddf3>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4909      	ldr	r1, [pc, #36]	; (8000e50 <PID0_step+0x198>)
 8000e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]

  temp_err = Input;
 8000e30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e34:	f7ff fd72 	bl	800091c <__aeabi_d2f>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <PID0_step+0x1b0>)
 8000e3c:	6013      	str	r3, [r2, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bdb0      	pop	{r4, r5, r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000a0 	.word	0x200000a0
 8000e4c:	200000b0 	.word	0x200000b0
 8000e50:	20000090 	.word	0x20000090
 8000e54:	40590000 	.word	0x40590000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200000b8 	.word	0x200000b8
 8000e60:	200000a8 	.word	0x200000a8
 8000e64:	3ff00000 	.word	0x3ff00000
 8000e68:	200000bc 	.word	0x200000bc
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	40490000 	.word	0x40490000
 8000e74:	66666666 	.word	0x66666666
 8000e78:	40711266 	.word	0x40711266
 8000e7c:	66666666 	.word	0x66666666
 8000e80:	40725266 	.word	0x40725266

08000e84 <IO_Module_Init>:



//IO Module Configuration function
void IO_Module_Init(modbusHandler_t * modH)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

	bitWrite(modH,TWA1_STATUS,TWA_1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2100      	movs	r1, #0
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f91f 	bl	80010d4 <bitWrite>
	bitWrite(modH,TWA2_STATUS,TWA_2);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2102      	movs	r1, #2
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f91a 	bl	80010d4 <bitWrite>
	bitWrite(modH,TWA3_STATUS,TWA_3);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f915 	bl	80010d4 <bitWrite>
	bitWrite(modH,TWA4_STATUS,TWA_4);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2106      	movs	r1, #6
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f910 	bl	80010d4 <bitWrite>


}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_ADC_ConvCpltCallback>:



// ADC complete conversion callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

	//osEventFlagsSet(tempFlagsHandle,0x01);
	osThreadFlagsSet(TempCalcHandle, 0x01);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f008 fbf0 	bl	80096b0 <osThreadFlagsSet>

}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000c0 	.word	0x200000c0

08000edc <ADC_Temp_Thread_Start>:

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <ADC_Temp_Thread_Start+0x24>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <ADC_Temp_Thread_Start+0x28>)
 8000ee6:	f008 fb51 	bl	800958c <osThreadNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <ADC_Temp_Thread_Start+0x2c>)
 8000eee:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <ADC_Temp_Thread_Start+0x30>)
 8000ef2:	f008 fd87 	bl	8009a04 <osEventFlagsNew>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <ADC_Temp_Thread_Start+0x34>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800ee90 	.word	0x0800ee90
 8000f04:	08000fb9 	.word	0x08000fb9
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	0800eee8 	.word	0x0800eee8
 8000f10:	200000cc 	.word	0x200000cc

08000f14 <Control_Thread_Init>:

// Initializes required components for Control algorithm thread

void Control_Thread_Init(modbusHandler_t *modH)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	ControlHandle = osThreadNew(ControlTask, modH, &Control_attributes);
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <Control_Thread_Init+0x34>)
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <Control_Thread_Init+0x38>)
 8000f22:	f008 fb33 	bl	800958c <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <Control_Thread_Init+0x3c>)
 8000f2a:	6013      	str	r3, [r2, #0]
	controlTimerHandle = osTimerNew(ControlExecTim, osTimerPeriodic, NULL, &controlTimer_attributes);
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <Control_Thread_Init+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2101      	movs	r1, #1
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <Control_Thread_Init+0x44>)
 8000f34:	f008 fcbc 	bl	80098b0 <osTimerNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <Control_Thread_Init+0x48>)
 8000f3c:	6013      	str	r3, [r2, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	0800eeb4 	.word	0x0800eeb4
 8000f4c:	08000f61 	.word	0x08000f61
 8000f50:	200000c4 	.word	0x200000c4
 8000f54:	0800eed8 	.word	0x0800eed8
 8000f58:	08001145 	.word	0x08001145
 8000f5c:	200000c8 	.word	0x200000c8

08000f60 <ControlTask>:


// System Threads


void ControlTask(void *argument){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

	osTimerStart(controlTimerHandle, CONTROLFREQ);
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <ControlTask+0x48>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f008 fd19 	bl	80099a8 <osTimerStart>
	modbusHandler_t *modH = (modbusHandler_t *)argument;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]
	// Add the control algorithm and schedule the task properly to execute every period of time
	// TODO

	uint8_t TWA_Status = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	72fb      	strb	r3, [r7, #11]

		/*TWA_Status = bitRead(modH,1);
		HAL_GPIO_WritePin(TWA2_GPIO_Port, TWA2_Pin,TWA_Status);
		osDelay(5000);*/

		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f82:	2100      	movs	r1, #0
 8000f84:	2001      	movs	r0, #1
 8000f86:	f008 fbe1 	bl	800974c <osThreadFlagsWait>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <ControlTask+0x4c>)
 8000f8e:	f002 ffff 	bl	8003f90 <HAL_GPIO_TogglePin>
		PID0_step(Temperature[0]);
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <ControlTask+0x50>)
 8000f94:	ed93 7b00 	vldr	d7, [r3]
 8000f98:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9c:	eef0 0a67 	vmov.f32	s1, s15
 8000fa0:	f7ff fe8a 	bl	8000cb8 <PID0_step>
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000fa4:	e7eb      	b.n	8000f7e <ControlTask+0x1e>
 8000fa6:	bf00      	nop
 8000fa8:	200000c8 	.word	0x200000c8
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	200000e8 	.word	0x200000e8
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <CalculateTemp_Thread>:
	}
}


void CalculateTemp_Thread(void *argument){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fc0:	217f      	movs	r1, #127	; 0x7f
 8000fc2:	483f      	ldr	r0, [pc, #252]	; (80010c0 <CalculateTemp_Thread+0x108>)
 8000fc4:	f002 f9dc 	bl	8003380 <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,2);
 8000fc8:	2202      	movs	r2, #2
 8000fca:	493e      	ldr	r1, [pc, #248]	; (80010c4 <CalculateTemp_Thread+0x10c>)
 8000fcc:	483c      	ldr	r0, [pc, #240]	; (80010c0 <CalculateTemp_Thread+0x108>)
 8000fce:	f001 fac1 	bl	8002554 <HAL_ADC_Start_DMA>
		//osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f008 fbb7 	bl	800974c <osThreadFlagsWait>
		ADCvoltage[0] = ADCrawReading[0] * 0.00073242;
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <CalculateTemp_Thread+0x10c>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa1d 	bl	8000424 <__aeabi_i2d>
 8000fea:	a32f      	add	r3, pc, #188	; (adr r3, 80010a8 <CalculateTemp_Thread+0xf0>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fa82 	bl	80004f8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4933      	ldr	r1, [pc, #204]	; (80010c8 <CalculateTemp_Thread+0x110>)
 8000ffa:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature[0] = ((ADCvoltage[0] - 0.408)*100) / 2.04;
 8000ffe:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <CalculateTemp_Thread+0x110>)
 8001000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001004:	a32a      	add	r3, pc, #168	; (adr r3, 80010b0 <CalculateTemp_Thread+0xf8>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff f8bd 	bl	8000188 <__aeabi_dsub>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <CalculateTemp_Thread+0x114>)
 800101c:	f7ff fa6c 	bl	80004f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	a323      	add	r3, pc, #140	; (adr r3, 80010b8 <CalculateTemp_Thread+0x100>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fb8d 	bl	800074c <__aeabi_ddiv>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4926      	ldr	r1, [pc, #152]	; (80010d0 <CalculateTemp_Thread+0x118>)
 8001038:	e9c1 2300 	strd	r2, r3, [r1]
		ADCvoltage[1] = ADCrawReading[1] * 0.00073242;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <CalculateTemp_Thread+0x10c>)
 800103e:	885b      	ldrh	r3, [r3, #2]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f9ee 	bl	8000424 <__aeabi_i2d>
 8001048:	a317      	add	r3, pc, #92	; (adr r3, 80010a8 <CalculateTemp_Thread+0xf0>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff fa53 	bl	80004f8 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	491c      	ldr	r1, [pc, #112]	; (80010c8 <CalculateTemp_Thread+0x110>)
 8001058:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Temperature[1] = ((ADCvoltage[1] - 0.408)*100) / 2.04;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <CalculateTemp_Thread+0x110>)
 800105e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001062:	a313      	add	r3, pc, #76	; (adr r3, 80010b0 <CalculateTemp_Thread+0xf8>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff f88e 	bl	8000188 <__aeabi_dsub>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <CalculateTemp_Thread+0x114>)
 800107a:	f7ff fa3d 	bl	80004f8 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	a30c      	add	r3, pc, #48	; (adr r3, 80010b8 <CalculateTemp_Thread+0x100>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fb5e 	bl	800074c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	490e      	ldr	r1, [pc, #56]	; (80010d0 <CalculateTemp_Thread+0x118>)
 8001096:	e9c1 2302 	strd	r2, r3, [r1, #8]
		HAL_ADC_Stop_DMA(&hadc1);
 800109a:	4809      	ldr	r0, [pc, #36]	; (80010c0 <CalculateTemp_Thread+0x108>)
 800109c:	f001 fade 	bl	800265c <HAL_ADC_Stop_DMA>
		osDelay(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f008 fbd4 	bl	800984e <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,2);
 80010a6:	e78f      	b.n	8000fc8 <CalculateTemp_Thread+0x10>
 80010a8:	f9353597 	.word	0xf9353597
 80010ac:	3f47fffb 	.word	0x3f47fffb
 80010b0:	083126e9 	.word	0x083126e9
 80010b4:	3fda1cac 	.word	0x3fda1cac
 80010b8:	851eb852 	.word	0x851eb852
 80010bc:	400051eb 	.word	0x400051eb
 80010c0:	20000104 	.word	0x20000104
 80010c4:	200000d0 	.word	0x200000d0
 80010c8:	200000d8 	.word	0x200000d8
 80010cc:	40590000 	.word	0x40590000
 80010d0:	200000e8 	.word	0x200000e8

080010d4 <bitWrite>:
	}

}
// Temperature = (((ADCrawReading * 0.00073242) - 0.408)*100) / 2.04;
void bitWrite(modbusHandler_t * modH, uint8_t pos, uint8_t val)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
 80010e0:	4613      	mov	r3, r2
 80010e2:	70bb      	strb	r3, [r7, #2]
	uint16_t *temp;
	temp = &modH->u16regsCoilsRO[pos/16];
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]

	if (val == 1) {
 80010f6:	78bb      	ldrb	r3, [r7, #2]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10d      	bne.n	8001118 <bitWrite+0x44>
		*temp |= (1UL << (pos%16));
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	881a      	ldrh	r2, [r3, #0]
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	b29b      	uxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	801a      	strh	r2, [r3, #0]
	}
	else {
		*temp &= ~(1UL << (pos%16));
	}
}
 8001116:	e00e      	b.n	8001136 <bitWrite+0x62>
		*temp &= ~(1UL << (pos%16));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	b29b      	uxth	r3, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	4013      	ands	r3, r2
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	801a      	strh	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <ControlExecTim>:
	return res;
}

/* ControlExecTim function */
void ControlExecTim(void *argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlExecTim */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	osThreadFlagsSet(ControlHandle, 0x01);
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <ControlExecTim+0x1c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f008 faac 	bl	80096b0 <osThreadFlagsSet>
  /* USER CODE END ControlExecTim */
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200000c4 	.word	0x200000c4

08001164 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001174:	f023 0218 	bic.w	r2, r3, #24
 8001178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4313      	orrs	r3, r2
 8001180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800119e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b4:	68fb      	ldr	r3, [r7, #12]
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f8:	f000 fdfe 	bl	8001df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fc:	f000 f872 	bl	80012e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001200:	f000 f8e6 	bl	80013d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 fa60 	bl	80016c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001208:	f000 fa3c 	bl	8001684 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800120c:	f000 f9c6 	bl	800159c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001210:	f000 fa10 	bl	8001634 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8001214:	f000 f90e 	bl	8001434 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001218:	f000 f980 	bl	800151c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  ModbusH.uModbusType = MB_SLAVE;
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <main+0xc8>)
 800121e:	2203      	movs	r2, #3
 8001220:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <main+0xc8>)
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <main+0xcc>)
 8001226:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <main+0xc8>)
 800122a:	2201      	movs	r2, #1
 800122c:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <main+0xc8>)
 8001230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001234:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <main+0xc8>)
 800123a:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <main+0xd0>)
 800123c:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <main+0xc8>)
 8001240:	2208      	movs	r2, #8
 8001242:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <main+0xc8>)
 8001246:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <main+0xd4>)
 8001248:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <main+0xc8>)
 800124e:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <main+0xd8>)
 8001250:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <main+0xc8>)
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <main+0xdc>)
 8001258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <main+0xc8>)
 800125e:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <main+0xe0>)
 8001260:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <main+0xc8>)
 8001266:	220a      	movs	r2, #10
 8001268:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <main+0xc8>)
 800126e:	2214      	movs	r2, #20
 8001270:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <main+0xc8>)
 8001276:	2205      	movs	r2, #5
 8001278:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  //ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
  ModbusH.xTypeHW = USART_HW_DMA;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <main+0xc8>)
 800127e:	2204      	movs	r2, #4
 8001280:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  IO_Module_Init(&ModbusH);
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <main+0xc8>)
 8001286:	f7ff fdfd 	bl	8000e84 <IO_Module_Init>
  Control_Thread_Init(&ModbusH);
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <main+0xc8>)
 800128c:	f7ff fe42 	bl	8000f14 <Control_Thread_Init>

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8001290:	480a      	ldr	r0, [pc, #40]	; (80012bc <main+0xc8>)
 8001292:	f00c f87b 	bl	800d38c <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <main+0xc8>)
 8001298:	f00c f91a 	bl	800d4d0 <ModbusStart>
  //ssd1306_TestAll();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800129c:	f008 f92c 	bl	80094f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <main+0xe4>)
 80012a2:	2100      	movs	r1, #0
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <main+0xe8>)
 80012a6:	f008 f971 	bl	800958c <osThreadNew>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <main+0xec>)
 80012ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 80012b0:	f7ff fe14 	bl	8000edc <ADC_Temp_Thread_Start>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012b4:	f008 f944 	bl	8009540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <main+0xc4>
 80012ba:	bf00      	nop
 80012bc:	20000668 	.word	0x20000668
 80012c0:	2000021c 	.word	0x2000021c
 80012c4:	48000800 	.word	0x48000800
 80012c8:	20000018 	.word	0x20000018
 80012cc:	2000002c 	.word	0x2000002c
 80012d0:	20000054 	.word	0x20000054
 80012d4:	200000f8 	.word	0x200000f8
 80012d8:	0800eef8 	.word	0x0800eef8
 80012dc:	080017a9 	.word	0x080017a9
 80012e0:	20000664 	.word	0x20000664

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b09a      	sub	sp, #104	; 0x68
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2248      	movs	r2, #72	; 0x48
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f00d fd12 	bl	800ed1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001318:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800131a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f023 0303 	bic.w	r3, r3, #3
 8001324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800132e:	f003 f87f 	bl	8004430 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff ff16 	bl	8001164 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <SystemClock_Config+0xe8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <SystemClock_Config+0xe8>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <SystemClock_Config+0xe8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001354:	2327      	movs	r3, #39	; 0x27
 8001356:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800135e:	2301      	movs	r3, #1
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001368:	2301      	movs	r3, #1
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136c:	2340      	movs	r3, #64	; 0x40
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001370:	2300      	movs	r3, #0
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001374:	2360      	movs	r3, #96	; 0x60
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fbf5 	bl	8004b70 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800138c:	f000 fa26 	bl	80017dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001390:	236f      	movs	r3, #111	; 0x6f
 8001392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001394:	2302      	movs	r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2101      	movs	r1, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 ff51 	bl	8005258 <HAL_RCC_ClockConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80013bc:	f000 fa0e 	bl	80017dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013c0:	f004 fd3e 	bl	8005e40 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013c4:	bf00      	nop
 80013c6:	3768      	adds	r7, #104	; 0x68
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	58000400 	.word	0x58000400

080013d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	; 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2250      	movs	r2, #80	; 0x50
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00d fc9d 	bl	800ed1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80013e2:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 80013e6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80013e8:	2318      	movs	r3, #24
 80013ea:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80013ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80013f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80013f8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80013fe:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8001402:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001404:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800140a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001410:	2300      	movs	r3, #0
 8001412:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001414:	2300      	movs	r3, #0
 8001416:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fb9a 	bl	8005b54 <HAL_RCCEx_PeriphCLKConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001426:	f000 f9d9 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800142a:	bf00      	nop
 800142c:	3750      	adds	r7, #80	; 0x50
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <MX_ADC1_Init+0xd8>)
 800144c:	4a30      	ldr	r2, [pc, #192]	; (8001510 <MX_ADC1_Init+0xdc>)
 800144e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001450:	4b2e      	ldr	r3, [pc, #184]	; (800150c <MX_ADC1_Init+0xd8>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <MX_ADC1_Init+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <MX_ADC1_Init+0xd8>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <MX_ADC1_Init+0xd8>)
 8001464:	2201      	movs	r2, #1
 8001466:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <MX_ADC1_Init+0xd8>)
 800146a:	2204      	movs	r2, #4
 800146c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <MX_ADC1_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <MX_ADC1_Init+0xd8>)
 8001476:	2200      	movs	r2, #0
 8001478:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <MX_ADC1_Init+0xd8>)
 800147c:	2202      	movs	r2, #2
 800147e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <MX_ADC1_Init+0xd8>)
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <MX_ADC1_Init+0xd8>)
 800148a:	2200      	movs	r2, #0
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_ADC1_Init+0xd8>)
 8001490:	2200      	movs	r2, #0
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_ADC1_Init+0xd8>)
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_ADC1_Init+0xd8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_ADC1_Init+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014aa:	4818      	ldr	r0, [pc, #96]	; (800150c <MX_ADC1_Init+0xd8>)
 80014ac:	f000 ff06 	bl	80022bc <HAL_ADC_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80014b6:	f000 f991 	bl	80017dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_ADC1_Init+0xe0>)
 80014bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014be:	2306      	movs	r3, #6
 80014c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80014c2:	2302      	movs	r3, #2
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014c6:	237f      	movs	r3, #127	; 0x7f
 80014c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ca:	2304      	movs	r3, #4
 80014cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_ADC1_Init+0xd8>)
 80014d8:	f001 f936 	bl	8002748 <HAL_ADC_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014e2:	f000 f97b 	bl	80017dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_ADC1_Init+0xe4>)
 80014e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014ea:	230c      	movs	r3, #12
 80014ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_ADC1_Init+0xd8>)
 80014f4:	f001 f928 	bl	8002748 <HAL_ADC_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80014fe:	f000 f96d 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000104 	.word	0x20000104
 8001510:	50040000 	.word	0x50040000
 8001514:	2e300800 	.word	0x2e300800
 8001518:	2a000400 	.word	0x2a000400

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_I2C1_Init+0x74>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <MX_I2C1_Init+0x78>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_I2C1_Init+0x74>)
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <MX_I2C1_Init+0x7c>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_I2C1_Init+0x74>)
 8001534:	2201      	movs	r2, #1
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_I2C1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_I2C1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001556:	480e      	ldr	r0, [pc, #56]	; (8001590 <MX_I2C1_Init+0x74>)
 8001558:	f002 fd34 	bl	8003fc4 <HAL_I2C_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001562:	f000 f93b 	bl	80017dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <MX_I2C1_Init+0x74>)
 800156a:	f002 fdc6 	bl	80040fa <HAL_I2CEx_ConfigAnalogFilter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001574:	f000 f932 	bl	80017dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_I2C1_Init+0x74>)
 800157c:	f002 fe08 	bl	8004190 <HAL_I2CEx_ConfigDigitalFilter>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001586:	f000 f929 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001c8 	.word	0x200001c8
 8001594:	40005400 	.word	0x40005400
 8001598:	00300f38 	.word	0x00300f38

0800159c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <MX_USART1_UART_Init+0x94>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015e6:	f004 ffbd 	bl	8006564 <HAL_UART_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015f0:	f000 f8f4 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f4:	2100      	movs	r1, #0
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015f8:	f007 fddf 	bl	80091ba <HAL_UARTEx_SetTxFifoThreshold>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001602:	f000 f8eb 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001606:	2100      	movs	r1, #0
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <MX_USART1_UART_Init+0x90>)
 800160a:	f007 fe14 	bl	8009236 <HAL_UARTEx_SetRxFifoThreshold>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001614:	f000 f8e2 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_USART1_UART_Init+0x90>)
 800161a:	f007 fd95 	bl	8009148 <HAL_UARTEx_DisableFifoMode>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001624:	f000 f8da 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000021c 	.word	0x2000021c
 8001630:	40013800 	.word	0x40013800

08001634 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_USB_PCD_Init+0x48>)
 800163a:	4a11      	ldr	r2, [pc, #68]	; (8001680 <MX_USB_PCD_Init+0x4c>)
 800163c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_USB_PCD_Init+0x48>)
 8001640:	2208      	movs	r2, #8
 8001642:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <MX_USB_PCD_Init+0x48>)
 8001646:	2202      	movs	r2, #2
 8001648:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USB_PCD_Init+0x48>)
 800164c:	2202      	movs	r2, #2
 800164e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_USB_PCD_Init+0x48>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USB_PCD_Init+0x48>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_USB_PCD_Init+0x48>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USB_PCD_Init+0x48>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_USB_PCD_Init+0x48>)
 800166a:	f002 fddd 	bl	8004228 <HAL_PCD_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001674:	f000 f8b2 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000370 	.word	0x20000370
 8001680:	40006800 	.word	0x40006800

08001684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001688:	2004      	movs	r0, #4
 800168a:	f7ff fd81 	bl	8001190 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff fd7e 	bl	8001190 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	200b      	movs	r0, #11
 800169a:	f001 ff8b 	bl	80035b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800169e:	200b      	movs	r0, #11
 80016a0:	f001 ffa2 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2105      	movs	r1, #5
 80016a8:	200c      	movs	r0, #12
 80016aa:	f001 ff83 	bl	80035b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016ae:	200c      	movs	r0, #12
 80016b0:	f001 ff9a 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2105      	movs	r1, #5
 80016b8:	200d      	movs	r0, #13
 80016ba:	f001 ff7b 	bl	80035b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016be:	200d      	movs	r0, #13
 80016c0:	f001 ff92 	bl	80035e8 <HAL_NVIC_EnableIRQ>

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016dc:	2004      	movs	r0, #4
 80016de:	f7ff fd70 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2002      	movs	r0, #2
 80016e4:	f7ff fd6d 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fd6a 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2008      	movs	r0, #8
 80016f0:	f7ff fd67 	bl	80011c2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2108      	movs	r1, #8
 80016f8:	4828      	ldr	r0, [pc, #160]	; (800179c <MX_GPIO_Init+0xd4>)
 80016fa:	f002 fc31 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2102      	movs	r1, #2
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f002 fc2b 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 800170a:	2200      	movs	r2, #0
 800170c:	f24f 0103 	movw	r1, #61443	; 0xf003
 8001710:	4823      	ldr	r0, [pc, #140]	; (80017a0 <MX_GPIO_Init+0xd8>)
 8001712:	f002 fc25 	bl	8003f60 <HAL_GPIO_WritePin>
                          |TWA3_Pin|TWA4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 8001716:	2308      	movs	r3, #8
 8001718:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	481c      	ldr	r0, [pc, #112]	; (800179c <MX_GPIO_Init+0xd4>)
 800172c:	f002 faa8 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001730:	2302      	movs	r3, #2
 8001732:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f002 fa9a 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174c:	2310      	movs	r3, #16
 800174e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	480f      	ldr	r0, [pc, #60]	; (800179c <MX_GPIO_Init+0xd4>)
 800175e:	f002 fa8f 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TWA1_Pin TWA2_Pin
                           TWA3_Pin TWA4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 8001762:	f24f 0303 	movw	r3, #61443	; 0xf003
 8001766:	607b      	str	r3, [r7, #4]
                          |TWA3_Pin|TWA4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <MX_GPIO_Init+0xd8>)
 800177a:	f002 fa81 	bl	8003c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800177e:	2303      	movs	r3, #3
 8001780:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_GPIO_Init+0xdc>)
 8001790:	f002 fa76 	bl	8003c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	48000800 	.word	0x48000800
 80017a0:	48000400 	.word	0x48000400
 80017a4:	48000c00 	.word	0x48000c00

080017a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


for(;;)
  {
    osDelay(1);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f008 f84c 	bl	800984e <osDelay>
 80017b6:	e7fb      	b.n	80017b0 <StartDefaultTask+0x8>

080017b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ca:	f000 fb35 	bl	8001e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40014400 	.word	0x40014400

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>

080017e6 <LL_AHB2_GRP1_EnableClock>:
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4013      	ands	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4313      	orrs	r3, r2
 800182e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001834:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800183c:	68fb      	ldr	r3, [r7, #12]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001856:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4313      	orrs	r3, r2
 8001860:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	210f      	movs	r1, #15
 8001884:	f06f 0001 	mvn.w	r0, #1
 8001888:	f001 fe94 	bl	80035b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a22      	ldr	r2, [pc, #136]	; (8001938 <HAL_ADC_MspInit+0xa8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d13e      	bne.n	8001930 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018b6:	f7ff ff96 	bl	80017e6 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff ff93 	bl	80017e6 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018c0:	2360      	movs	r3, #96	; 0x60
 80018c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c4:	2303      	movs	r3, #3
 80018c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f002 f9d3 	bl	8003c80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_ADC_MspInit+0xac>)
 80018dc:	4a18      	ldr	r2, [pc, #96]	; (8001940 <HAL_ADC_MspInit+0xb0>)
 80018de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_ADC_MspInit+0xac>)
 80018e2:	2205      	movs	r2, #5
 80018e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_ADC_MspInit+0xac>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_ADC_MspInit+0xac>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_ADC_MspInit+0xac>)
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_ADC_MspInit+0xac>)
 80018fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_ADC_MspInit+0xac>)
 8001902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001906:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_ADC_MspInit+0xac>)
 800190a:	2220      	movs	r2, #32
 800190c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_ADC_MspInit+0xac>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <HAL_ADC_MspInit+0xac>)
 8001916:	f001 fe75 	bl	8003604 <HAL_DMA_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001920:	f7ff ff5c 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <HAL_ADC_MspInit+0xac>)
 8001928:	64da      	str	r2, [r3, #76]	; 0x4c
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_ADC_MspInit+0xac>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	50040000 	.word	0x50040000
 800193c:	20000168 	.word	0x20000168
 8001940:	40020030 	.word	0x40020030

08001944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b09c      	sub	sp, #112	; 0x70
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2250      	movs	r2, #80	; 0x50
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f00d f9d9 	bl	800ed1c <memset>
  if(hi2c->Instance==I2C1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_I2C_MspInit+0x88>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d126      	bne.n	80019c2 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001974:	2304      	movs	r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001978:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4618      	mov	r0, r3
 8001984:	f004 f8e6 	bl	8005b54 <HAL_RCCEx_PeriphCLKConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800198e:	f7ff ff25 	bl	80017dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2002      	movs	r0, #2
 8001994:	f7ff ff27 	bl	80017e6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001998:	f44f 7340 	mov.w	r3, #768	; 0x300
 800199c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199e:	2312      	movs	r3, #18
 80019a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019aa:	2304      	movs	r3, #4
 80019ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019b2:	4619      	mov	r1, r3
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <HAL_I2C_MspInit+0x8c>)
 80019b6:	f002 f963 	bl	8003c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80019be:	f7ff ff2b 	bl	8001818 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019c2:	bf00      	nop
 80019c4:	3770      	adds	r7, #112	; 0x70
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40005400 	.word	0x40005400
 80019d0:	48000400 	.word	0x48000400

080019d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b09c      	sub	sp, #112	; 0x70
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2250      	movs	r2, #80	; 0x50
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00d f991 	bl	800ed1c <memset>
  if(huart->Instance==USART1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a43      	ldr	r2, [pc, #268]	; (8001b0c <HAL_UART_MspInit+0x138>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d17f      	bne.n	8001b04 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 f89f 	bl	8005b54 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a1c:	f7ff fede 	bl	80017dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a24:	f7ff ff11 	bl	800184a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f7ff fedc 	bl	80017e6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a2e:	23c0      	movs	r3, #192	; 0xc0
 8001a30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a3e:	2307      	movs	r3, #7
 8001a40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a46:	4619      	mov	r1, r3
 8001a48:	4831      	ldr	r0, [pc, #196]	; (8001b10 <HAL_UART_MspInit+0x13c>)
 8001a4a:	f002 f919 	bl	8003c80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a50:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <HAL_UART_MspInit+0x144>)
 8001a52:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a56:	220e      	movs	r2, #14
 8001a58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a68:	2280      	movs	r2, #128	; 0x80
 8001a6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a72:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a84:	4823      	ldr	r0, [pc, #140]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a86:	f001 fdbd 	bl	8003604 <HAL_DMA_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001a90:	f7ff fea4 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_UART_MspInit+0x140>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_UART_MspInit+0x14c>)
 8001aa6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001aaa:	220f      	movs	r2, #15
 8001aac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ad8:	4810      	ldr	r0, [pc, #64]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001ada:	f001 fd93 	bl	8003604 <HAL_DMA_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001ae4:	f7ff fe7a 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001aec:	67da      	str	r2, [r3, #124]	; 0x7c
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <HAL_UART_MspInit+0x148>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2105      	movs	r1, #5
 8001af8:	2024      	movs	r0, #36	; 0x24
 8001afa:	f001 fd5b 	bl	80035b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001afe:	2024      	movs	r0, #36	; 0x24
 8001b00:	f001 fd72 	bl	80035e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3770      	adds	r7, #112	; 0x70
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	48000400 	.word	0x48000400
 8001b14:	200002b0 	.word	0x200002b0
 8001b18:	40020008 	.word	0x40020008
 8001b1c:	20000310 	.word	0x20000310
 8001b20:	4002001c 	.word	0x4002001c

08001b24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_PCD_MspInit+0x5c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d118      	bne.n	8001b78 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fe4d 	bl	80017e6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b5e:	230a      	movs	r3, #10
 8001b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6c:	f002 f888 	bl	8003c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b70:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001b74:	f7ff fe50 	bl	8001818 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40006800 	.word	0x40006800

08001b84 <LL_APB2_GRP1_EnableClock>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	2019      	movs	r0, #25
 8001bce:	f001 fcf1 	bl	80035b4 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bd2:	2019      	movs	r0, #25
 8001bd4:	f001 fd08 	bl	80035e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001bd8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001bdc:	f7ff ffd2 	bl	8001b84 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be0:	f107 0208 	add.w	r2, r7, #8
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 fd20 	bl	8005630 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bf0:	f003 fd08 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 8001bf4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <HAL_InitTick+0x8c>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9b      	lsrs	r3, r3, #18
 8001c00:	3b01      	subs	r3, #1
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_InitTick+0x90>)
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <HAL_InitTick+0x94>)
 8001c08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_InitTick+0x90>)
 8001c0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c10:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_InitTick+0x90>)
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_InitTick+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_InitTick+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001c24:	4808      	ldr	r0, [pc, #32]	; (8001c48 <HAL_InitTick+0x90>)
 8001c26:	f004 fa22 	bl	800606e <HAL_TIM_Base_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d104      	bne.n	8001c3a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <HAL_InitTick+0x90>)
 8001c32:	f004 fa7d 	bl	8006130 <HAL_TIM_Base_Start_IT>
 8001c36:	4603      	mov	r3, r0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3730      	adds	r7, #48	; 0x30
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	431bde83 	.word	0x431bde83
 8001c48:	200007c0 	.word	0x200007c0
 8001c4c:	40014400 	.word	0x40014400

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <DMA1_Channel1_IRQHandler+0x10>)
 8001c82:	f001 fea0 	bl	80039c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002b0 	.word	0x200002b0

08001c90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <DMA1_Channel2_IRQHandler+0x10>)
 8001c96:	f001 fe96 	bl	80039c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000310 	.word	0x20000310

08001ca4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <DMA1_Channel3_IRQHandler+0x10>)
 8001caa:	f001 fe8c 	bl	80039c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000168 	.word	0x20000168

08001cb8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001cbe:	f004 fa85 	bl	80061cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200007c0 	.word	0x200007c0

08001ccc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <USART1_IRQHandler+0x10>)
 8001cd2:	f004 ff5b 	bl	8006b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000021c 	.word	0x2000021c

08001ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <SystemInit+0x98>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <SystemInit+0x98>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001d0c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <SystemInit+0x9c>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2a:	f023 0305 	bic.w	r3, r3, #5
 8001d2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <SystemInit+0xa0>)
 8001d4c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <SystemInit+0xa0>)
 8001d54:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00
 8001d7c:	faf6fefb 	.word	0xfaf6fefb
 8001d80:	22041000 	.word	0x22041000

08001d84 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001d84:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d86:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d88:	3304      	adds	r3, #4

08001d8a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001d8e:	d3f9      	bcc.n	8001d84 <CopyDataInit>
  bx lr
 8001d90:	4770      	bx	lr

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001d92:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001d94:	3004      	adds	r0, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001d96:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>
  bx lr
 8001d9a:	4770      	bx	lr

08001d9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001da0:	f7ff ff9e 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001da4:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <LoopForever+0x6>)
 8001da6:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <LoopForever+0xa>)
 8001da8:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <LoopForever+0xe>)
 8001daa:	2300      	movs	r3, #0
 8001dac:	f7ff ffed 	bl	8001d8a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001db0:	480b      	ldr	r0, [pc, #44]	; (8001de0 <LoopForever+0x12>)
 8001db2:	490c      	ldr	r1, [pc, #48]	; (8001de4 <LoopForever+0x16>)
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <LoopForever+0x1a>)
 8001db6:	2300      	movs	r3, #0
 8001db8:	f7ff ffe7 	bl	8001d8a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <LoopForever+0x1e>)
 8001dbe:	490c      	ldr	r1, [pc, #48]	; (8001df0 <LoopForever+0x22>)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f7ff ffe8 	bl	8001d96 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dc6:	f00c ffb1 	bl	800ed2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001dca:	f7ff fa13 	bl	80011f4 <main>

08001dce <LoopForever>:

LoopForever:
  b LoopForever
 8001dce:	e7fe      	b.n	8001dce <LoopForever>
  ldr   r0, =_estack
 8001dd0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000070 	.word	0x20000070
 8001ddc:	0800f06c 	.word	0x0800f06c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001de0:	20030000 	.word	0x20030000
 8001de4:	20030000 	.word	0x20030000
 8001de8:	0800f0d4 	.word	0x0800f0d4
  INIT_BSS _sbss, _ebss
 8001dec:	20000070 	.word	0x20000070
 8001df0:	2000216c 	.word	0x2000216c

08001df4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC1_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_Init+0x3c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <HAL_Init+0x3c>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f001 fbc5 	bl	800359e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e14:	200f      	movs	r0, #15
 8001e16:	f7ff fecf 	bl	8001bb8 <HAL_InitTick>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	e001      	b.n	8001e2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e26:	f7ff fd29 	bl	800187c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	58004000 	.word	0x58004000

08001e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000068 	.word	0x20000068
 8001e5c:	2000080c 	.word	0x2000080c

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	2000080c 	.word	0x2000080c

08001e78 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_GetTickPrio+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000064 	.word	0x20000064

08001e90 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3360      	adds	r3, #96	; 0x60
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <LL_ADC_SetOffset+0x44>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f30:	bf00      	nop
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	03fff000 	.word	0x03fff000

08001f40 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3360      	adds	r3, #96	; 0x60
 8001f4e:	461a      	mov	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3360      	adds	r3, #96	; 0x60
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fba:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3330      	adds	r3, #48	; 0x30
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	4413      	add	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	211f      	movs	r1, #31
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	f003 011f 	and.w	r1, r3, #31
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	431a      	orrs	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3314      	adds	r3, #20
 8002030:	461a      	mov	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	0e5b      	lsrs	r3, r3, #25
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	4413      	add	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	0d1b      	lsrs	r3, r3, #20
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2107      	movs	r1, #7
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	401a      	ands	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	0d1b      	lsrs	r3, r3, #20
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	431a      	orrs	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002090:	43db      	mvns	r3, r3
 8002092:	401a      	ands	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0318 	and.w	r3, r3, #24
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800209c:	40d9      	lsrs	r1, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	400b      	ands	r3, r1
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	0007ffff 	.word	0x0007ffff

080020c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6093      	str	r3, [r2, #8]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020f8:	d101      	bne.n	80020fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800211c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002120:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002148:	d101      	bne.n	800214e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800216c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002194:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002198:	f043 0202 	orr.w	r2, r3, #2
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <LL_ADC_IsEnabled+0x18>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <LL_ADC_IsEnabled+0x1a>
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d101      	bne.n	80021ea <LL_ADC_IsDisableOngoing+0x18>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <LL_ADC_IsDisableOngoing+0x1a>
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002208:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002234:	f043 0210 	orr.w	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b04      	cmp	r3, #4
 800225a:	d101      	bne.n	8002260 <LL_ADC_REG_IsConversionOngoing+0x18>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800227e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d101      	bne.n	80022ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e12e      	b.n	8002538 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fad1 	bl	8001890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff feef 	bl	80020e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fed5 	bl	80020c0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff0a 	bl	8002134 <LL_ADC_IsInternalRegulatorEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d115      	bne.n	8002352 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff feee 	bl	800210c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002330:	4b83      	ldr	r3, [pc, #524]	; (8002540 <HAL_ADC_Init+0x284>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	4a83      	ldr	r2, [pc, #524]	; (8002544 <HAL_ADC_Init+0x288>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	3301      	adds	r3, #1
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002344:	e002      	b.n	800234c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	3b01      	subs	r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f9      	bne.n	8002346 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff feec 	bl	8002134 <LL_ADC_IsInternalRegulatorEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f043 0210 	orr.w	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff60 	bl	8002248 <LL_ADC_REG_IsConversionOngoing>
 8002388:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 80c7 	bne.w	8002526 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 80c3 	bne.w	8002526 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023a8:	f043 0202 	orr.w	r2, r3, #2
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fef9 	bl	80021ac <LL_ADC_IsEnabled>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c0:	4861      	ldr	r0, [pc, #388]	; (8002548 <HAL_ADC_Init+0x28c>)
 80023c2:	f7ff fef3 	bl	80021ac <LL_ADC_IsEnabled>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4619      	mov	r1, r3
 80023d2:	485e      	ldr	r0, [pc, #376]	; (800254c <HAL_ADC_Init+0x290>)
 80023d4:	f7ff fd5c 	bl	8001e90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e5b      	ldrb	r3, [r3, #25]
 80023dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80023f8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d106      	bne.n	8002418 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	3b01      	subs	r3, #1
 8002410:	045b      	lsls	r3, r3, #17
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d009      	beq.n	8002434 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b45      	ldr	r3, [pc, #276]	; (8002550 <HAL_ADC_Init+0x294>)
 800243c:	4013      	ands	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	430b      	orrs	r3, r1
 8002446:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fefb 	bl	8002248 <LL_ADC_REG_IsConversionOngoing>
 8002452:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff1c 	bl	8002296 <LL_ADC_INJ_IsConversionOngoing>
 800245e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d13d      	bne.n	80024e2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d13a      	bne.n	80024e2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002470:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002478:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002488:	f023 0302 	bic.w	r3, r3, #2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	69b9      	ldr	r1, [r7, #24]
 8002492:	430b      	orrs	r3, r1
 8002494:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800249c:	2b01      	cmp	r3, #1
 800249e:	d118      	bne.n	80024d2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024aa:	f023 0304 	bic.w	r3, r3, #4
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024c2:	430a      	orrs	r2, r1
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	e007      	b.n	80024e2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10c      	bne.n	8002504 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f023 010f 	bic.w	r1, r3, #15
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
 8002502:	e007      	b.n	8002514 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 020f 	bic.w	r2, r2, #15
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	f023 0303 	bic.w	r3, r3, #3
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
 8002524:	e007      	b.n	8002536 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002536:	7ffb      	ldrb	r3, [r7, #31]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000060 	.word	0x20000060
 8002544:	053e2d63 	.word	0x053e2d63
 8002548:	50040000 	.word	0x50040000
 800254c:	50040300 	.word	0x50040300
 8002550:	fff0c007 	.word	0xfff0c007

08002554 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fe6f 	bl	8002248 <LL_ADC_REG_IsConversionOngoing>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d167      	bne.n	8002640 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ADC_Start_DMA+0x2a>
 800257a:	2302      	movs	r3, #2
 800257c:	e063      	b.n	8002646 <HAL_ADC_Start_DMA+0xf2>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fd60 	bl	800304c <ADC_Enable>
 800258c:	4603      	mov	r3, r0
 800258e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d14f      	bne.n	8002636 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	f023 0206 	bic.w	r2, r3, #6
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58
 80025c2:	e002      	b.n	80025ca <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	4a20      	ldr	r2, [pc, #128]	; (8002650 <HAL_ADC_Start_DMA+0xfc>)
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <HAL_ADC_Start_DMA+0x100>)
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <HAL_ADC_Start_DMA+0x104>)
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	221c      	movs	r2, #28
 80025e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0210 	orr.w	r2, r2, #16
 8002600:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3340      	adds	r3, #64	; 0x40
 800261c:	4619      	mov	r1, r3
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f001 f897 	bl	8003754 <HAL_DMA_Start_IT>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fde2 	bl	80021f8 <LL_ADC_REG_StartConversion>
 8002634:	e006      	b.n	8002644 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800263e:	e001      	b.n	8002644 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	080031ff 	.word	0x080031ff
 8002654:	080032d7 	.word	0x080032d7
 8002658:	080032f3 	.word	0x080032f3

0800265c <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Stop_DMA+0x16>
 800266e:	2302      	movs	r3, #2
 8002670:	e051      	b.n	8002716 <HAL_ADC_Stop_DMA+0xba>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800267a:	2103      	movs	r1, #3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fc29 	bl	8002ed4 <ADC_ConversionStop>
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d13f      	bne.n	800270c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d10f      	bne.n	80026ca <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 f8cb 	bl	800384a <HAL_DMA_Abort>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0210 	bic.w	r2, r2, #16
 80026d8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fd2d 	bl	8003140 <ADC_Disable>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fd27 	bl	8003140 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0b6      	sub	sp, #216	; 0xd8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x22>
 8002766:	2302      	movs	r3, #2
 8002768:	e39f      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x762>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fd66 	bl	8002248 <LL_ADC_REG_IsConversionOngoing>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8384 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	f7ff fc19 	bl	8001fc8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fd54 	bl	8002248 <LL_ADC_REG_IsConversionOngoing>
 80027a0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fd74 	bl	8002296 <LL_ADC_INJ_IsConversionOngoing>
 80027ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 81a6 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 81a1 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f7ff fc24 	bl	8002020 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	08db      	lsrs	r3, r3, #3
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d00a      	beq.n	8002810 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6919      	ldr	r1, [r3, #16]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800280a:	f7ff fb75 	bl	8001ef8 <LL_ADC_SetOffset>
 800280e:	e17b      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fb92 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <HAL_ADC_ConfigChannel+0xf4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb87 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	e01e      	b.n	800287a <HAL_ADC_ConfigChannel+0x132>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fb7c 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800285a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800285e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002862:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e004      	b.n	8002878 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800286e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x14a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	e018      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x17c>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e004      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80028ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fb4b 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fb2f 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x1ba>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fb24 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	e01e      	b.n	8002940 <HAL_ADC_ConfigChannel+0x1f8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fb19 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002920:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e004      	b.n	800293e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x210>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0e9b      	lsrs	r3, r3, #26
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	e018      	b.n	800298a <HAL_ADC_ConfigChannel+0x242>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800296c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e004      	b.n	800298a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	429a      	cmp	r2, r3
 800298c:	d106      	bne.n	800299c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fae8 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff facc 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x280>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2102      	movs	r1, #2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fac1 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	f003 021f 	and.w	r2, r3, #31
 80029c6:	e01e      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x2be>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2102      	movs	r1, #2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fab6 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e004      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x2d6>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	e016      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x304>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e004      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d106      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2102      	movs	r1, #2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fa87 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2103      	movs	r1, #3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fa6b 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x342>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2103      	movs	r1, #3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fa60 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	0e9b      	lsrs	r3, r3, #26
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	e017      	b.n	8002aba <HAL_ADC_ConfigChannel+0x372>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2103      	movs	r1, #3
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fa55 	bl	8001f40 <LL_ADC_GetOffsetChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002aac:	2320      	movs	r3, #32
 8002aae:	e003      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x38a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	e011      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x3ae>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e003      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d106      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	2103      	movs	r1, #3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fa32 	bl	8001f6c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fb4d 	bl	80021ac <LL_ADC_IsEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 81c2 	bne.w	8002e9e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f7ff faa6 	bl	8002078 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a8e      	ldr	r2, [pc, #568]	; (8002d6c <HAL_ADC_ConfigChannel+0x624>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	f040 8130 	bne.w	8002d98 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10b      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x418>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2b09      	cmp	r3, #9
 8002b56:	bf94      	ite	ls
 8002b58:	2301      	movls	r3, #1
 8002b5a:	2300      	movhi	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e019      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x44c>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b70:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e003      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2b09      	cmp	r3, #9
 8002b8c:	bf94      	ite	ls
 8002b8e:	2301      	movls	r3, #1
 8002b90:	2300      	movhi	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d079      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x46c>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	3301      	adds	r3, #1
 8002bac:	069b      	lsls	r3, r3, #26
 8002bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb2:	e015      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x498>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e003      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	069b      	lsls	r3, r3, #26
 8002bdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d109      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x4b8>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	e017      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x4e8>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	ea42 0103 	orr.w	r1, r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x50e>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	3301      	adds	r3, #1
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	051b      	lsls	r3, r3, #20
 8002c54:	e018      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x540>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c6e:	2320      	movs	r3, #32
 8002c70:	e003      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	e080      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x560>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	069b      	lsls	r3, r3, #26
 8002ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca6:	e015      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x58c>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x5ac>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	e017      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x5dc>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	61fb      	str	r3, [r7, #28]
  return result;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	ea42 0103 	orr.w	r1, r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x608>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	3b1e      	subs	r3, #30
 8002d48:	051b      	lsls	r3, r3, #20
 8002d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	e01d      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x644>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	613b      	str	r3, [r7, #16]
  return result;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e005      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x630>
 8002d6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f003 021f 	and.w	r2, r3, #31
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	3b1e      	subs	r3, #30
 8002d86:	051b      	lsls	r3, r3, #20
 8002d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d92:	4619      	mov	r1, r3
 8002d94:	f7ff f944 	bl	8002020 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_ADC_ConfigChannel+0x76c>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d07c      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002da4:	4844      	ldr	r0, [pc, #272]	; (8002eb8 <HAL_ADC_ConfigChannel+0x770>)
 8002da6:	f7ff f899 	bl	8001edc <LL_ADC_GetCommonPathInternalCh>
 8002daa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dae:	4843      	ldr	r0, [pc, #268]	; (8002ebc <HAL_ADC_ConfigChannel+0x774>)
 8002db0:	f7ff f9fc 	bl	80021ac <LL_ADC_IsEnabled>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d15e      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a40      	ldr	r2, [pc, #256]	; (8002ec0 <HAL_ADC_ConfigChannel+0x778>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d127      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x6cc>
 8002dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d121      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a39      	ldr	r2, [pc, #228]	; (8002ebc <HAL_ADC_ConfigChannel+0x774>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d161      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002de2:	4619      	mov	r1, r3
 8002de4:	4834      	ldr	r0, [pc, #208]	; (8002eb8 <HAL_ADC_ConfigChannel+0x770>)
 8002de6:	f7ff f866 	bl	8001eb6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_ADC_ConfigChannel+0x77c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	4a35      	ldr	r2, [pc, #212]	; (8002ec8 <HAL_ADC_ConfigChannel+0x780>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e04:	e002      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f9      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e12:	e044      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <HAL_ADC_ConfigChannel+0x784>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d113      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x6fe>
 8002e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <HAL_ADC_ConfigChannel+0x774>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d134      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	481e      	ldr	r0, [pc, #120]	; (8002eb8 <HAL_ADC_ConfigChannel+0x770>)
 8002e40:	f7ff f839 	bl	8001eb6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e44:	e02b      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <HAL_ADC_ConfigChannel+0x788>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d126      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
 8002e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d120      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_ADC_ConfigChannel+0x774>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d11b      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4811      	ldr	r0, [pc, #68]	; (8002eb8 <HAL_ADC_ConfigChannel+0x770>)
 8002e72:	f7ff f820 	bl	8001eb6 <LL_ADC_SetCommonPathInternalCh>
 8002e76:	e012      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e8a:	e008      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002ea6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	37d8      	adds	r7, #216	; 0xd8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	80080000 	.word	0x80080000
 8002eb8:	50040300 	.word	0x50040300
 8002ebc:	50040000 	.word	0x50040000
 8002ec0:	c7520000 	.word	0xc7520000
 8002ec4:	20000060 	.word	0x20000060
 8002ec8:	053e2d63 	.word	0x053e2d63
 8002ecc:	cb840000 	.word	0xcb840000
 8002ed0:	80000001 	.word	0x80000001

08002ed4 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f9ac 	bl	8002248 <LL_ADC_REG_IsConversionOngoing>
 8002ef0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f9cd 	bl	8002296 <LL_ADC_INJ_IsConversionOngoing>
 8002efc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8098 	beq.w	800303c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02a      	beq.n	8002f70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7e5b      	ldrb	r3, [r3, #25]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d126      	bne.n	8002f70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7e1b      	ldrb	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d122      	bne.n	8002f70 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f2e:	e014      	b.n	8002f5a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	4a45      	ldr	r2, [pc, #276]	; (8003048 <ADC_ConversionStop+0x174>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d90d      	bls.n	8002f54 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f043 0210 	orr.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e074      	b.n	800303e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b40      	cmp	r3, #64	; 0x40
 8002f66:	d1e3      	bne.n	8002f30 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2240      	movs	r2, #64	; 0x40
 8002f6e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d014      	beq.n	8002fa0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f964 	bl	8002248 <LL_ADC_REG_IsConversionOngoing>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f921 	bl	80021d2 <LL_ADC_IsDisableOngoing>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f940 	bl	8002220 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d014      	beq.n	8002fd0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f973 	bl	8002296 <LL_ADC_INJ_IsConversionOngoing>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f909 	bl	80021d2 <LL_ADC_IsDisableOngoing>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d104      	bne.n	8002fd0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f94f 	bl	800226e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d005      	beq.n	8002fe2 <ADC_ConversionStop+0x10e>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d105      	bne.n	8002fe8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fdc:	230c      	movs	r3, #12
 8002fde:	617b      	str	r3, [r7, #20]
        break;
 8002fe0:	e005      	b.n	8002fee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	617b      	str	r3, [r7, #20]
        break;
 8002fe6:	e002      	b.n	8002fee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fe8:	2304      	movs	r3, #4
 8002fea:	617b      	str	r3, [r7, #20]
        break;
 8002fec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002fee:	f7fe ff37 	bl	8001e60 <HAL_GetTick>
 8002ff2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ff4:	e01b      	b.n	800302e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ff6:	f7fe ff33 	bl	8001e60 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b05      	cmp	r3, #5
 8003002:	d914      	bls.n	800302e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f043 0210 	orr.w	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1dc      	bne.n	8002ff6 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	a33fffff 	.word	0xa33fffff

0800304c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003054:	2300      	movs	r3, #0
 8003056:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f8a5 	bl	80021ac <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d15e      	bne.n	8003126 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <ADC_Enable+0xe4>)
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f043 0210 	orr.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e04a      	b.n	8003128 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff f860 	bl	800215c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800309c:	4825      	ldr	r0, [pc, #148]	; (8003134 <ADC_Enable+0xe8>)
 800309e:	f7fe ff1d 	bl	8001edc <LL_ADC_GetCommonPathInternalCh>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00f      	beq.n	80030cc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <ADC_Enable+0xec>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	4a22      	ldr	r2, [pc, #136]	; (800313c <ADC_Enable+0xf0>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030be:	e002      	b.n	80030c6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f9      	bne.n	80030c0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80030cc:	f7fe fec8 	bl	8001e60 <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030d2:	e021      	b.n	8003118 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff f867 	bl	80021ac <LL_ADC_IsEnabled>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f837 	bl	800215c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ee:	f7fe feb7 	bl	8001e60 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d90d      	bls.n	8003118 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d1d6      	bne.n	80030d4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	8000003f 	.word	0x8000003f
 8003134:	50040300 	.word	0x50040300
 8003138:	20000060 	.word	0x20000060
 800313c:	053e2d63 	.word	0x053e2d63

08003140 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f840 	bl	80021d2 <LL_ADC_IsDisableOngoing>
 8003152:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff f827 	bl	80021ac <LL_ADC_IsEnabled>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d047      	beq.n	80031f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d144      	bne.n	80031f4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030d 	and.w	r3, r3, #13
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10c      	bne.n	8003192 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff f801 	bl	8002184 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2203      	movs	r2, #3
 8003188:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800318a:	f7fe fe69 	bl	8001e60 <HAL_GetTick>
 800318e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003190:	e029      	b.n	80031e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f043 0210 	orr.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e023      	b.n	80031f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031ae:	f7fe fe57 	bl	8001e60 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d914      	bls.n	80031e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00d      	beq.n	80031e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f043 0210 	orr.w	r2, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e007      	b.n	80031f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1dc      	bne.n	80031ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003210:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003214:	2b00      	cmp	r3, #0
 8003216:	d14b      	bne.n	80032b0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d021      	beq.n	8003276 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe feb3 	bl	8001fa2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d032      	beq.n	80032a8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d12b      	bne.n	80032a8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11f      	bne.n	80032a8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
 8003274:	e018      	b.n	80032a8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d111      	bne.n	80032a8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7fd fe07 	bl	8000ebc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032ae:	e00e      	b.n	80032ce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff fa38 	bl	8002732 <HAL_ADC_ErrorCallback>
}
 80032c2:	e004      	b.n	80032ce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff fa1a 	bl	800271e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff fa0a 	bl	8002732 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <LL_ADC_StartCalibration>:
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003342:	4313      	orrs	r3, r2
 8003344:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_IsCalibrationOnGoing>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800336c:	d101      	bne.n	8003372 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_ADCEx_Calibration_Start+0x1c>
 8003398:	2302      	movs	r3, #2
 800339a:	e04d      	b.n	8003438 <HAL_ADCEx_Calibration_Start+0xb8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff fecb 	bl	8003140 <ADC_Disable>
 80033aa:	4603      	mov	r3, r0
 80033ac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d136      	bne.n	8003422 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033bc:	f023 0302 	bic.w	r3, r3, #2
 80033c0:	f043 0202 	orr.w	r2, r3, #2
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6839      	ldr	r1, [r7, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ffa9 	bl	8003326 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033d4:	e014      	b.n	8003400 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_ADCEx_Calibration_Start+0xc0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d90d      	bls.n	8003400 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f023 0312 	bic.w	r3, r3, #18
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01b      	b.n	8003438 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ffa7 	bl	8003358 <LL_ADC_IsCalibrationOnGoing>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e2      	bne.n	80033d6 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f023 0303 	bic.w	r3, r3, #3
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	; 0x54
 8003420:	e005      	b.n	800342e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f043 0210 	orr.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	00026aaa 	.word	0x00026aaa

08003444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003460:	4013      	ands	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800346c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003476:	4a04      	ldr	r2, [pc, #16]	; (8003488 <__NVIC_SetPriorityGrouping+0x44>)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	60d3      	str	r3, [r2, #12]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 0307 	and.w	r3, r3, #7
}
 800349a:	4618      	mov	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db0b      	blt.n	80034d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	4907      	ldr	r1, [pc, #28]	; (80034e0 <__NVIC_EnableIRQ+0x38>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e100 	.word	0xe000e100

080034e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	db0a      	blt.n	800350e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	490c      	ldr	r1, [pc, #48]	; (8003530 <__NVIC_SetPriority+0x4c>)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	0112      	lsls	r2, r2, #4
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	440b      	add	r3, r1
 8003508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800350c:	e00a      	b.n	8003524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4908      	ldr	r1, [pc, #32]	; (8003534 <__NVIC_SetPriority+0x50>)
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	3b04      	subs	r3, #4
 800351c:	0112      	lsls	r2, r2, #4
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	440b      	add	r3, r1
 8003522:	761a      	strb	r2, [r3, #24]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000e100 	.word	0xe000e100
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f1c3 0307 	rsb	r3, r3, #7
 8003552:	2b04      	cmp	r3, #4
 8003554:	bf28      	it	cs
 8003556:	2304      	movcs	r3, #4
 8003558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3304      	adds	r3, #4
 800355e:	2b06      	cmp	r3, #6
 8003560:	d902      	bls.n	8003568 <NVIC_EncodePriority+0x30>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3b03      	subs	r3, #3
 8003566:	e000      	b.n	800356a <NVIC_EncodePriority+0x32>
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	f04f 32ff 	mov.w	r2, #4294967295
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43da      	mvns	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	401a      	ands	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003580:	f04f 31ff 	mov.w	r1, #4294967295
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	43d9      	mvns	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	4313      	orrs	r3, r2
         );
}
 8003592:	4618      	mov	r0, r3
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff4c 	bl	8003444 <__NVIC_SetPriorityGrouping>
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035c2:	f7ff ff63 	bl	800348c <__NVIC_GetPriorityGrouping>
 80035c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	6978      	ldr	r0, [r7, #20]
 80035ce:	f7ff ffb3 	bl	8003538 <NVIC_EncodePriority>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff82 	bl	80034e4 <__NVIC_SetPriority>
}
 80035e0:	bf00      	nop
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff56 	bl	80034a8 <__NVIC_EnableIRQ>
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e08e      	b.n	8003734 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_DMA_Init+0x138>)
 800361e:	429a      	cmp	r2, r3
 8003620:	d80f      	bhi.n	8003642 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4b45      	ldr	r3, [pc, #276]	; (8003740 <HAL_DMA_Init+0x13c>)
 800362a:	4413      	add	r3, r2
 800362c:	4a45      	ldr	r2, [pc, #276]	; (8003744 <HAL_DMA_Init+0x140>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	009a      	lsls	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a42      	ldr	r2, [pc, #264]	; (8003748 <HAL_DMA_Init+0x144>)
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
 8003640:	e00e      	b.n	8003660 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	4b40      	ldr	r3, [pc, #256]	; (800374c <HAL_DMA_Init+0x148>)
 800364a:	4413      	add	r3, r2
 800364c:	4a3d      	ldr	r2, [pc, #244]	; (8003744 <HAL_DMA_Init+0x140>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	009a      	lsls	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a3c      	ldr	r2, [pc, #240]	; (8003750 <HAL_DMA_Init+0x14c>)
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fa80 	bl	8003bb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c0:	d102      	bne.n	80036c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80036d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d010      	beq.n	800370a <HAL_DMA_Init+0x106>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d80c      	bhi.n	800370a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fa9f 	bl	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	e008      	b.n	800371c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40020407 	.word	0x40020407
 8003740:	bffdfff8 	.word	0xbffdfff8
 8003744:	cccccccd 	.word	0xcccccccd
 8003748:	40020000 	.word	0x40020000
 800374c:	bffdfbf8 	.word	0xbffdfbf8
 8003750:	40020400 	.word	0x40020400

08003754 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_DMA_Start_IT+0x20>
 8003770:	2302      	movs	r3, #2
 8003772:	e066      	b.n	8003842 <HAL_DMA_Start_IT+0xee>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d155      	bne.n	8003834 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f9c5 	bl	8003b3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 020e 	orr.w	r2, r2, #14
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e00f      	b.n	80037ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0204 	bic.w	r2, r2, #4
 80037da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 020a 	orr.w	r2, r2, #10
 80037ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003820:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e005      	b.n	8003840 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e04f      	b.n	80038fc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d008      	beq.n	800387a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2204      	movs	r2, #4
 800386c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e040      	b.n	80038fc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 020e 	bic.w	r2, r2, #14
 8003888:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003898:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	f003 021c 	and.w	r2, r3, #28
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f202 	lsl.w	r2, r1, r2
 80038bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d005      	beq.n	800392c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2204      	movs	r2, #4
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	e047      	b.n	80039bc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 020e 	bic.w	r2, r2, #14
 800393a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003960:	f003 021c 	and.w	r2, r3, #28
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003978:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00c      	beq.n	800399c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003990:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800399a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
    }
  }
  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f003 031c 	and.w	r3, r3, #28
 80039e6:	2204      	movs	r2, #4
 80039e8:	409a      	lsls	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d026      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x7a>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d021      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0204 	bic.w	r2, r2, #4
 8003a18:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f003 021c 	and.w	r2, r3, #28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2104      	movs	r1, #4
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d071      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a3e:	e06c      	b.n	8003b1a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f003 031c 	and.w	r3, r3, #28
 8003a48:	2202      	movs	r2, #2
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02e      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xec>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d029      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 020a 	bic.w	r2, r2, #10
 8003a7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	f003 021c 	and.w	r2, r3, #28
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	2102      	movs	r1, #2
 8003a92:	fa01 f202 	lsl.w	r2, r1, r2
 8003a96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d038      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ab0:	e033      	b.n	8003b1a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f003 031c 	and.w	r3, r3, #28
 8003aba:	2208      	movs	r2, #8
 8003abc:	409a      	lsls	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02a      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x156>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d025      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020e 	bic.w	r2, r2, #14
 8003ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f003 021c 	and.w	r2, r3, #28
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
}
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f003 021c 	and.w	r2, r3, #28
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d108      	bne.n	8003b9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b9a:	e007      	b.n	8003bac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d80a      	bhi.n	8003be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bd8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6493      	str	r3, [r2, #72]	; 0x48
 8003be0:	e007      	b.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	009a      	lsls	r2, r3, #2
 8003bea:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bec:	4413      	add	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3b08      	subs	r3, #8
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2201      	movs	r2, #1
 8003c12:	409a      	lsls	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40020407 	.word	0x40020407
 8003c28:	4002081c 	.word	0x4002081c
 8003c2c:	cccccccd 	.word	0xcccccccd
 8003c30:	40020880 	.word	0x40020880

08003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003c58:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2201      	movs	r2, #1
 8003c64:	409a      	lsls	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	1000823f 	.word	0x1000823f
 8003c7c:	40020940 	.word	0x40020940

08003c80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8e:	e14c      	b.n	8003f2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 813e 	beq.w	8003f24 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d005      	beq.n	8003cc0 <HAL_GPIO_Init+0x40>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d130      	bne.n	8003d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	2203      	movs	r2, #3
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f003 0201 	and.w	r2, r3, #1
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d017      	beq.n	8003d5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2203      	movs	r2, #3
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d123      	bne.n	8003db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	08da      	lsrs	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3208      	adds	r2, #8
 8003d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	220f      	movs	r2, #15
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	08da      	lsrs	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3208      	adds	r2, #8
 8003dac:	6939      	ldr	r1, [r7, #16]
 8003dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0203 	and.w	r2, r3, #3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8098 	beq.w	8003f24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003df4:	4a54      	ldr	r2, [pc, #336]	; (8003f48 <HAL_GPIO_Init+0x2c8>)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	220f      	movs	r2, #15
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e1e:	d019      	beq.n	8003e54 <HAL_GPIO_Init+0x1d4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a4a      	ldr	r2, [pc, #296]	; (8003f4c <HAL_GPIO_Init+0x2cc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_GPIO_Init+0x1d0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a49      	ldr	r2, [pc, #292]	; (8003f50 <HAL_GPIO_Init+0x2d0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00d      	beq.n	8003e4c <HAL_GPIO_Init+0x1cc>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a48      	ldr	r2, [pc, #288]	; (8003f54 <HAL_GPIO_Init+0x2d4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <HAL_GPIO_Init+0x1c8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a47      	ldr	r2, [pc, #284]	; (8003f58 <HAL_GPIO_Init+0x2d8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_GPIO_Init+0x1c4>
 8003e40:	2304      	movs	r3, #4
 8003e42:	e008      	b.n	8003e56 <HAL_GPIO_Init+0x1d6>
 8003e44:	2307      	movs	r3, #7
 8003e46:	e006      	b.n	8003e56 <HAL_GPIO_Init+0x1d6>
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e004      	b.n	8003e56 <HAL_GPIO_Init+0x1d6>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e002      	b.n	8003e56 <HAL_GPIO_Init+0x1d6>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_GPIO_Init+0x1d6>
 8003e54:	2300      	movs	r3, #0
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	f002 0203 	and.w	r2, r2, #3
 8003e5c:	0092      	lsls	r2, r2, #2
 8003e5e:	4093      	lsls	r3, r2
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e66:	4938      	ldr	r1, [pc, #224]	; (8003f48 <HAL_GPIO_Init+0x2c8>)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e74:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <HAL_GPIO_Init+0x2dc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e98:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <HAL_GPIO_Init+0x2dc>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e9e:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <HAL_GPIO_Init+0x2dc>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ec2:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <HAL_GPIO_Init+0x2dc>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ec8:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_GPIO_Init+0x2dc>)
 8003eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eee:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <HAL_GPIO_Init+0x2dc>)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003ef6:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_GPIO_Init+0x2dc>)
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f1c:	4a0f      	ldr	r2, [pc, #60]	; (8003f5c <HAL_GPIO_Init+0x2dc>)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3301      	adds	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f47f aeab 	bne.w	8003c90 <HAL_GPIO_Init+0x10>
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	48000400 	.word	0x48000400
 8003f50:	48000800 	.word	0x48000800
 8003f54:	48000c00 	.word	0x48000c00
 8003f58:	48001000 	.word	0x48001000
 8003f5c:	58000800 	.word	0x58000800

08003f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f7c:	e002      	b.n	8003f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	041a      	lsls	r2, r3, #16
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	43d9      	mvns	r1, r3
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	619a      	str	r2, [r3, #24]
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e08d      	b.n	80040f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fcaa 	bl	8001944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	e006      	b.n	800404c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800404a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d108      	bne.n	8004066 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	e007      	b.n	8004076 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004074:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69d9      	ldr	r1, [r3, #28]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b20      	cmp	r3, #32
 800410e:	d138      	bne.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800411a:	2302      	movs	r3, #2
 800411c:	e032      	b.n	8004184 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2224      	movs	r2, #36	; 0x24
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800414c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d139      	bne.n	800421a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e033      	b.n	800421c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	; 0x24
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422a:	b08b      	sub	sp, #44	; 0x2c
 800422c:	af06      	add	r7, sp, #24
 800422e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0cb      	b.n	80043d2 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd fc68 	bl	8001b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2203      	movs	r2, #3
 8004258:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f005 f8c9 	bl	80093f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	e040      	b.n	80042ee <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	440b      	add	r3, r1
 800427c:	3301      	adds	r3, #1
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	440b      	add	r3, r1
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3303      	adds	r3, #3
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	440b      	add	r3, r1
 80042ba:	3338      	adds	r3, #56	; 0x38
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	333c      	adds	r3, #60	; 0x3c
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	440b      	add	r3, r1
 80042e2:	3340      	adds	r3, #64	; 0x40
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	3301      	adds	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d3b9      	bcc.n	800426c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e044      	b.n	8004388 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	440b      	add	r3, r1
 800430c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	440b      	add	r3, r1
 8004322:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	440b      	add	r3, r1
 8004338:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	440b      	add	r3, r1
 800434e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	440b      	add	r3, r1
 8004364:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	440b      	add	r3, r1
 800437a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	3301      	adds	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d3b5      	bcc.n	80042fe <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	687e      	ldr	r6, [r7, #4]
 800439a:	466d      	mov	r5, sp
 800439c:	f106 0410 	add.w	r4, r6, #16
 80043a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	602b      	str	r3, [r5, #0]
 80043a8:	1d33      	adds	r3, r6, #4
 80043aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ac:	6838      	ldr	r0, [r7, #0]
 80043ae:	f005 f83e 	bl	800942e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f805 	bl	80043da <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004412:	b29b      	uxth	r3, r3
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	58000400 	.word	0x58000400

08004450 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <HAL_PWREx_GetVoltageRange+0x18>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58000400 	.word	0x58000400

0800446c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447e:	d101      	bne.n	8004484 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_RCC_HSE_Enable>:
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800449e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <LL_RCC_HSE_Disable>:
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
}
 80044c2:	bf00      	nop
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_RCC_HSE_IsReady>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044de:	d101      	bne.n	80044e4 <LL_RCC_HSE_IsReady+0x18>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <LL_RCC_HSE_IsReady+0x1a>
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <LL_RCC_HSI_Enable>:
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80044f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_RCC_HSI_Disable>:
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800451c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_RCC_HSI_IsReady>:
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453e:	d101      	bne.n	8004544 <LL_RCC_HSI_IsReady+0x18>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <LL_RCC_HSI_IsReady+0x1a>
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800456a:	4313      	orrs	r3, r2
 800456c:	604b      	str	r3, [r1, #4]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <LL_RCC_HSI48_Enable>:
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004592:	bf00      	nop
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <LL_RCC_HSI48_Disable>:
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_RCC_HSI48_IsReady>:
{
 80045be:	b480      	push	{r7}
 80045c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80045c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d101      	bne.n	80045d6 <LL_RCC_HSI48_IsReady+0x18>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <LL_RCC_HSI48_IsReady+0x1a>
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <LL_RCC_LSE_Enable>:
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045fa:	bf00      	nop
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_RCC_LSE_Disable>:
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <LL_RCC_LSE_EnableBypass>:
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800463e:	bf00      	nop
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_RCC_LSE_DisableBypass>:
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800466a:	b480      	push	{r7}
 800466c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800466e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b02      	cmp	r3, #2
 800467c:	d101      	bne.n	8004682 <LL_RCC_LSE_IsReady+0x18>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <LL_RCC_LSE_IsReady+0x1a>
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046a6:	bf00      	nop
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80046d2:	b480      	push	{r7}
 80046d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d101      	bne.n	80046ea <LL_RCC_LSI1_IsReady+0x18>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <LL_RCC_LSI1_IsReady+0x1a>
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80046f6:	b480      	push	{r7}
 80046f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80046fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800473a:	b480      	push	{r7}
 800473c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d101      	bne.n	8004752 <LL_RCC_LSI2_IsReady+0x18>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <LL_RCC_LSI2_IsReady+0x1a>
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6013      	str	r3, [r2, #0]
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80047aa:	b480      	push	{r7}
 80047ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80047ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	bf00      	nop
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d101      	bne.n	80047de <LL_RCC_MSI_IsReady+0x16>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <LL_RCC_MSI_IsReady+0x18>
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80047f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004822:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2bb0      	cmp	r3, #176	; 0xb0
 8004828:	d901      	bls.n	800482e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800482a:	23b0      	movs	r3, #176	; 0xb0
 800482c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800482e:	687b      	ldr	r3, [r7, #4]
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 0203 	bic.w	r2, r3, #3
 8004878:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800488e:	b480      	push	{r7}
 8004890:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
}
 800489c:	4618      	mov	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004906:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800490a:	f023 020f 	bic.w	r2, r3, #15
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800493a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4313      	orrs	r3, r2
 800496a:	608b      	str	r3, [r1, #8]
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800497c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004986:	4618      	mov	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004998:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800499c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80049c6:	b480      	push	{r7}
 80049c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80049de:	b480      	push	{r7}
 80049e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a08:	6013      	str	r3, [r2, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a26:	6013      	str	r3, [r2, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a44:	d101      	bne.n	8004a4a <LL_RCC_PLL_IsReady+0x18>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <LL_RCC_PLL_IsReady+0x1a>
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aca:	d101      	bne.n	8004ad0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004af0:	d101      	bne.n	8004af6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d101      	bne.n	8004b1c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b3a:	d101      	bne.n	8004b40 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b5e:	d101      	bne.n	8004b64 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b08d      	sub	sp, #52	; 0x34
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e363      	b.n	800524a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 808d 	beq.w	8004caa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b90:	f7ff fe7d 	bl	800488e <LL_RCC_GetSysClkSource>
 8004b94:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b96:	f7ff ff83 	bl	8004aa0 <LL_RCC_PLL_GetMainSource>
 8004b9a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_RCC_OscConfig+0x3e>
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	d147      	bne.n	8004c38 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d144      	bne.n	8004c38 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e347      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004bbe:	f7ff fe28 	bl	8004812 <LL_RCC_MSI_GetRange>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	d914      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fd61 	bl	8005694 <RCC_SetFlashLatencyFromMSIRange>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e336      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fe02 	bl	80047ea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fe26 	bl	800483c <LL_RCC_MSI_SetCalibTrimming>
 8004bf0:	e013      	b.n	8004c1a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff fdf7 	bl	80047ea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fe1b 	bl	800483c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fd42 	bl	8005694 <RCC_SetFlashLatencyFromMSIRange>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e317      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c1a:	f000 fcc9 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4aa4      	ldr	r2, [pc, #656]	; (8004eb4 <HAL_RCC_OscConfig+0x344>)
 8004c22:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c24:	4ba4      	ldr	r3, [pc, #656]	; (8004eb8 <HAL_RCC_OscConfig+0x348>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fc ffc5 	bl	8001bb8 <HAL_InitTick>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d039      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e308      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01e      	beq.n	8004c7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c40:	f7ff fda4 	bl	800478c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c44:	f7fd f90c 	bl	8001e60 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c4c:	f7fd f908 	bl	8001e60 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e2f5      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c5e:	f7ff fdb3 	bl	80047c8 <LL_RCC_MSI_IsReady>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f1      	beq.n	8004c4c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fdbc 	bl	80047ea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fde0 	bl	800483c <LL_RCC_MSI_SetCalibTrimming>
 8004c7c:	e015      	b.n	8004caa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c7e:	f7ff fd94 	bl	80047aa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c82:	f7fd f8ed 	bl	8001e60 <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c8a:	f7fd f8e9 	bl	8001e60 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e2d6      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c9c:	f7ff fd94 	bl	80047c8 <LL_RCC_MSI_IsReady>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f1      	bne.n	8004c8a <HAL_RCC_OscConfig+0x11a>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ca8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d047      	beq.n	8004d46 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	f7ff fdea 	bl	800488e <LL_RCC_GetSysClkSource>
 8004cba:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cbc:	f7ff fef0 	bl	8004aa0 <LL_RCC_PLL_GetMainSource>
 8004cc0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x164>
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	2b0c      	cmp	r3, #12
 8004ccc:	d108      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d105      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d134      	bne.n	8004d46 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e2b4      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce8:	d102      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x180>
 8004cea:	f7ff fbd1 	bl	8004490 <LL_RCC_HSE_Enable>
 8004cee:	e001      	b.n	8004cf4 <HAL_RCC_OscConfig+0x184>
 8004cf0:	f7ff fbdd 	bl	80044ae <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d012      	beq.n	8004d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fd f8b0 	bl	8001e60 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fd f8ac 	bl	8001e60 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e299      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d16:	f7ff fbd9 	bl	80044cc <LL_RCC_HSE_IsReady>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f1      	beq.n	8004d04 <HAL_RCC_OscConfig+0x194>
 8004d20:	e011      	b.n	8004d46 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fd f89d 	bl	8001e60 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2a:	f7fd f899 	bl	8001e60 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b64      	cmp	r3, #100	; 0x64
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e286      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d3c:	f7ff fbc6 	bl	80044cc <LL_RCC_HSE_IsReady>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f1      	bne.n	8004d2a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04c      	beq.n	8004dec <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d52:	f7ff fd9c 	bl	800488e <LL_RCC_GetSysClkSource>
 8004d56:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d58:	f7ff fea2 	bl	8004aa0 <LL_RCC_PLL_GetMainSource>
 8004d5c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_OscConfig+0x200>
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	d10e      	bne.n	8004d88 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d10b      	bne.n	8004d88 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e266      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fbe5 	bl	8004550 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d86:	e031      	b.n	8004dec <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d019      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d90:	f7ff fbae 	bl	80044f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd f864 	bl	8001e60 <HAL_GetTick>
 8004d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d9c:	f7fd f860 	bl	8001e60 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e24d      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004dae:	f7ff fbbd 	bl	800452c <LL_RCC_HSI_IsReady>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f1      	beq.n	8004d9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fbc7 	bl	8004550 <LL_RCC_HSI_SetCalibTrimming>
 8004dc2:	e013      	b.n	8004dec <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc4:	f7ff fba3 	bl	800450e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fd f84a 	bl	8001e60 <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd0:	f7fd f846 	bl	8001e60 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e233      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004de2:	f7ff fba3 	bl	800452c <LL_RCC_HSI_IsReady>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f1      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80a3 	beq.w	8004f4c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d076      	beq.n	8004efc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d046      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004e1a:	f7ff fc5a 	bl	80046d2 <LL_RCC_LSI1_IsReady>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d113      	bne.n	8004e4c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004e24:	f7ff fc33 	bl	800468e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e28:	f7fd f81a 	bl	8001e60 <HAL_GetTick>
 8004e2c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e30:	f7fd f816 	bl	8001e60 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e203      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e42:	f7ff fc46 	bl	80046d2 <LL_RCC_LSI1_IsReady>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f1      	beq.n	8004e30 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004e4c:	f7ff fc53 	bl	80046f6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fd f806 	bl	8001e60 <HAL_GetTick>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e58:	f7fd f802 	bl	8001e60 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1ef      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e6a:	f7ff fc66 	bl	800473a <LL_RCC_LSI2_IsReady>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f1      	beq.n	8004e58 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fc70 	bl	800475e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004e7e:	f7ff fc17 	bl	80046b0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e82:	f7fc ffed 	bl	8001e60 <HAL_GetTick>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e8a:	f7fc ffe9 	bl	8001e60 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e1d6      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004e9c:	f7ff fc19 	bl	80046d2 <LL_RCC_LSI1_IsReady>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f1      	bne.n	8004e8a <HAL_RCC_OscConfig+0x31a>
 8004ea6:	e051      	b.n	8004f4c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004ea8:	f7ff fbf1 	bl	800468e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fc ffd8 	bl	8001e60 <HAL_GetTick>
 8004eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004eb2:	e00c      	b.n	8004ece <HAL_RCC_OscConfig+0x35e>
 8004eb4:	20000060 	.word	0x20000060
 8004eb8:	20000064 	.word	0x20000064
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ebc:	f7fc ffd0 	bl	8001e60 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e1bd      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ece:	f7ff fc00 	bl	80046d2 <LL_RCC_LSI1_IsReady>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f1      	beq.n	8004ebc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004ed8:	f7ff fc1e 	bl	8004718 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ede:	f7fc ffbf 	bl	8001e60 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e1ac      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ef0:	f7ff fc23 	bl	800473a <LL_RCC_LSI2_IsReady>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f1      	bne.n	8004ede <HAL_RCC_OscConfig+0x36e>
 8004efa:	e027      	b.n	8004f4c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004efc:	f7ff fc0c 	bl	8004718 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fc ffae 	bl	8001e60 <HAL_GetTick>
 8004f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f08:	f7fc ffaa 	bl	8001e60 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e197      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f1a:	f7ff fc0e 	bl	800473a <LL_RCC_LSI2_IsReady>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f1      	bne.n	8004f08 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004f24:	f7ff fbc4 	bl	80046b0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f28:	f7fc ff9a 	bl	8001e60 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f30:	f7fc ff96 	bl	8001e60 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e183      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f42:	f7ff fbc6 	bl	80046d2 <LL_RCC_LSI1_IsReady>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f1      	bne.n	8004f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d05b      	beq.n	8005010 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f58:	4ba7      	ldr	r3, [pc, #668]	; (80051f8 <HAL_RCC_OscConfig+0x688>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d114      	bne.n	8004f8e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f64:	f7ff fa64 	bl	8004430 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f68:	f7fc ff7a 	bl	8001e60 <HAL_GetTick>
 8004f6c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f70:	f7fc ff76 	bl	8001e60 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e163      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f82:	4b9d      	ldr	r3, [pc, #628]	; (80051f8 <HAL_RCC_OscConfig+0x688>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d102      	bne.n	8004f9c <HAL_RCC_OscConfig+0x42c>
 8004f96:	f7ff fb24 	bl	80045e2 <LL_RCC_LSE_Enable>
 8004f9a:	e00c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x446>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d104      	bne.n	8004fae <HAL_RCC_OscConfig+0x43e>
 8004fa4:	f7ff fb3f 	bl	8004626 <LL_RCC_LSE_EnableBypass>
 8004fa8:	f7ff fb1b 	bl	80045e2 <LL_RCC_LSE_Enable>
 8004fac:	e003      	b.n	8004fb6 <HAL_RCC_OscConfig+0x446>
 8004fae:	f7ff fb29 	bl	8004604 <LL_RCC_LSE_Disable>
 8004fb2:	f7ff fb49 	bl	8004648 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d014      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbe:	f7fc ff4f 	bl	8001e60 <HAL_GetTick>
 8004fc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc6:	f7fc ff4b 	bl	8001e60 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e136      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004fdc:	f7ff fb45 	bl	800466a <LL_RCC_LSE_IsReady>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0ef      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x456>
 8004fe6:	e013      	b.n	8005010 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fc ff3a 	bl	8001e60 <HAL_GetTick>
 8004fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004fee:	e00a      	b.n	8005006 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff0:	f7fc ff36 	bl	8001e60 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e121      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005006:	f7ff fb30 	bl	800466a <LL_RCC_LSE_IsReady>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ef      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02c      	beq.n	8005076 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d014      	beq.n	800504e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005024:	f7ff faa9 	bl	800457a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fc ff1a 	bl	8001e60 <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005030:	f7fc ff16 	bl	8001e60 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e103      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005042:	f7ff fabc 	bl	80045be <LL_RCC_HSI48_IsReady>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f1      	beq.n	8005030 <HAL_RCC_OscConfig+0x4c0>
 800504c:	e013      	b.n	8005076 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800504e:	f7ff faa5 	bl	800459c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fc ff05 	bl	8001e60 <HAL_GetTick>
 8005056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800505a:	f7fc ff01 	bl	8001e60 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e0ee      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800506c:	f7ff faa7 	bl	80045be <LL_RCC_HSI48_IsReady>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f1      	bne.n	800505a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80e4 	beq.w	8005248 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005080:	f7ff fc05 	bl	800488e <LL_RCC_GetSysClkSource>
 8005084:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	2b02      	cmp	r3, #2
 8005094:	f040 80b4 	bne.w	8005200 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0203 	and.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d123      	bne.n	80050ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d11c      	bne.n	80050ee <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d114      	bne.n	80050ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d10d      	bne.n	80050ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050dc:	429a      	cmp	r2, r3
 80050de:	d106      	bne.n	80050ee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d05d      	beq.n	80051aa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d058      	beq.n	80051a6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e0a1      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005106:	f7ff fc85 	bl	8004a14 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800510a:	f7fc fea9 	bl	8001e60 <HAL_GetTick>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7fc fea5 	bl	8001e60 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e092      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1ef      	bne.n	8005112 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	4b30      	ldr	r3, [pc, #192]	; (80051fc <HAL_RCC_OscConfig+0x68c>)
 800513a:	4013      	ands	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005144:	4311      	orrs	r1, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800514a:	0212      	lsls	r2, r2, #8
 800514c:	4311      	orrs	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005152:	4311      	orrs	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005158:	4311      	orrs	r1, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800515e:	430a      	orrs	r2, r1
 8005160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005164:	4313      	orrs	r3, r2
 8005166:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005168:	f7ff fc45 	bl	80049f6 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800516c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800517c:	f7fc fe70 	bl	8001e60 <HAL_GetTick>
 8005180:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005184:	f7fc fe6c 	bl	8001e60 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e059      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0ef      	beq.n	8005184 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a4:	e050      	b.n	8005248 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e04f      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d147      	bne.n	8005248 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051b8:	f7ff fc1d 	bl	80049f6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051cc:	f7fc fe48 	bl	8001e60 <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fc fe44 	bl	8001e60 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e031      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ef      	beq.n	80051d4 <HAL_RCC_OscConfig+0x664>
 80051f4:	e028      	b.n	8005248 <HAL_RCC_OscConfig+0x6d8>
 80051f6:	bf00      	nop
 80051f8:	58000400 	.word	0x58000400
 80051fc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d01e      	beq.n	8005244 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005206:	f7ff fc05 	bl	8004a14 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520a:	f7fc fe29 	bl	8001e60 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005212:	f7fc fe25 	bl	8001e60 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e012      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1ef      	bne.n	8005212 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_RCC_OscConfig+0x6e4>)
 800523e:	4013      	ands	r3, r2
 8005240:	60cb      	str	r3, [r1, #12]
 8005242:	e001      	b.n	8005248 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3734      	adds	r7, #52	; 0x34
 800524e:	46bd      	mov	sp, r7
 8005250:	bd90      	pop	{r4, r7, pc}
 8005252:	bf00      	nop
 8005254:	eefefffc 	.word	0xeefefffc

08005258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e12d      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800526c:	4b98      	ldr	r3, [pc, #608]	; (80054d0 <HAL_RCC_ClockConfig+0x278>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d91b      	bls.n	80052b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527a:	4b95      	ldr	r3, [pc, #596]	; (80054d0 <HAL_RCC_ClockConfig+0x278>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 0207 	bic.w	r2, r3, #7
 8005282:	4993      	ldr	r1, [pc, #588]	; (80054d0 <HAL_RCC_ClockConfig+0x278>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528a:	f7fc fde9 	bl	8001e60 <HAL_GetTick>
 800528e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005292:	f7fc fde5 	bl	8001e60 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e111      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a4:	4b8a      	ldr	r3, [pc, #552]	; (80054d0 <HAL_RCC_ClockConfig+0x278>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d1ef      	bne.n	8005292 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff faef 	bl	80048a6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052c8:	f7fc fdca 	bl	8001e60 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052d0:	f7fc fdc6 	bl	8001e60 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e0f2      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052e2:	f7ff fbe9 	bl	8004ab8 <LL_RCC_IsActiveFlag_HPRE>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f1      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d016      	beq.n	8005326 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fae6 	bl	80048ce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005302:	f7fc fdad 	bl	8001e60 <HAL_GetTick>
 8005306:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005308:	e008      	b.n	800531c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800530a:	f7fc fda9 	bl	8001e60 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e0d5      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800531c:	f7ff fbde 	bl	8004adc <LL_RCC_IsActiveFlag_C2HPRE>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f1      	beq.n	800530a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fadf 	bl	80048fa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800533c:	f7fc fd90 	bl	8001e60 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005344:	f7fc fd8c 	bl	8001e60 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0b8      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005356:	f7ff fbd4 	bl	8004b02 <LL_RCC_IsActiveFlag_SHDHPRE>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f1      	beq.n	8005344 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d016      	beq.n	800539a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fad9 	bl	8004928 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005376:	f7fc fd73 	bl	8001e60 <HAL_GetTick>
 800537a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800537c:	e008      	b.n	8005390 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800537e:	f7fc fd6f 	bl	8001e60 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e09b      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005390:	f7ff fbca 	bl	8004b28 <LL_RCC_IsActiveFlag_PPRE1>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f1      	beq.n	800537e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d017      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff facf 	bl	8004950 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053b2:	f7fc fd55 	bl	8001e60 <HAL_GetTick>
 80053b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053ba:	f7fc fd51 	bl	8001e60 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e07d      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053cc:	f7ff fbbe 	bl	8004b4c <LL_RCC_IsActiveFlag_PPRE2>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f1      	beq.n	80053ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d043      	beq.n	800546a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d106      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80053ea:	f7ff f86f 	bl	80044cc <LL_RCC_HSE_IsReady>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11e      	bne.n	8005432 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e067      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d106      	bne.n	800540e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005400:	f7ff fb17 	bl	8004a32 <LL_RCC_PLL_IsReady>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d113      	bne.n	8005432 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e05c      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005416:	f7ff f9d7 	bl	80047c8 <LL_RCC_MSI_IsReady>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d108      	bne.n	8005432 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e051      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005424:	f7ff f882 	bl	800452c <LL_RCC_HSI_IsReady>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e04a      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fa15 	bl	8004866 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543c:	f7fc fd10 	bl	8001e60 <HAL_GetTick>
 8005440:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	e00a      	b.n	800545a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005444:	f7fc fd0c 	bl	8001e60 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e036      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	f7ff fa18 	bl	800488e <LL_RCC_GetSysClkSource>
 800545e:	4602      	mov	r2, r0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	429a      	cmp	r2, r3
 8005468:	d1ec      	bne.n	8005444 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800546a:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <HAL_RCC_ClockConfig+0x278>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d21b      	bcs.n	80054b0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <HAL_RCC_ClockConfig+0x278>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f023 0207 	bic.w	r2, r3, #7
 8005480:	4913      	ldr	r1, [pc, #76]	; (80054d0 <HAL_RCC_ClockConfig+0x278>)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005488:	f7fc fcea 	bl	8001e60 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005490:	f7fc fce6 	bl	8001e60 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e012      	b.n	80054c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_ClockConfig+0x278>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d1ef      	bne.n	8005490 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054b0:	f000 f87e 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4a07      	ldr	r2, [pc, #28]	; (80054d4 <HAL_RCC_ClockConfig+0x27c>)
 80054b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80054ba:	f7fc fcdd 	bl	8001e78 <HAL_GetTickPrio>
 80054be:	4603      	mov	r3, r0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fc fb79 	bl	8001bb8 <HAL_InitTick>
 80054c6:	4603      	mov	r3, r0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	58004000 	.word	0x58004000
 80054d4:	20000060 	.word	0x20000060

080054d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054de:	f7ff f9d6 	bl	800488e <LL_RCC_GetSysClkSource>
 80054e2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80054ea:	f7ff f992 	bl	8004812 <LL_RCC_MSI_GetRange>
 80054ee:	4603      	mov	r3, r0
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	4a2b      	ldr	r2, [pc, #172]	; (80055a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	e04b      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b04      	cmp	r3, #4
 8005504:	d102      	bne.n	800550c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005506:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e045      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b08      	cmp	r3, #8
 8005510:	d10a      	bne.n	8005528 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005512:	f7fe ffab 	bl	800446c <LL_RCC_HSE_IsEnabledDiv2>
 8005516:	4603      	mov	r3, r0
 8005518:	2b01      	cmp	r3, #1
 800551a:	d102      	bne.n	8005522 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800551c:	4b22      	ldr	r3, [pc, #136]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e03a      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005522:	4b22      	ldr	r3, [pc, #136]	; (80055ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	e037      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005528:	f7ff faba 	bl	8004aa0 <LL_RCC_PLL_GetMainSource>
 800552c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d003      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x64>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d003      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0x6a>
 800553a:	e00d      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800553c:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800553e:	60bb      	str	r3, [r7, #8]
        break;
 8005540:	e015      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005542:	f7fe ff93 	bl	800446c <LL_RCC_HSE_IsEnabledDiv2>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d102      	bne.n	8005552 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800554c:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800554e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005550:	e00d      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005552:	4b16      	ldr	r3, [pc, #88]	; (80055ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8005554:	60bb      	str	r3, [r7, #8]
        break;
 8005556:	e00a      	b.n	800556e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005558:	f7ff f95b 	bl	8004812 <LL_RCC_MSI_GetRange>
 800555c:	4603      	mov	r3, r0
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	4a0f      	ldr	r2, [pc, #60]	; (80055a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556a:	60bb      	str	r3, [r7, #8]
        break;
 800556c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800556e:	f7ff fa72 	bl	8004a56 <LL_RCC_PLL_GetN>
 8005572:	4602      	mov	r2, r0
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	fb03 f402 	mul.w	r4, r3, r2
 800557a:	f7ff fa85 	bl	8004a88 <LL_RCC_PLL_GetDivider>
 800557e:	4603      	mov	r3, r0
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	3301      	adds	r3, #1
 8005584:	fbb4 f4f3 	udiv	r4, r4, r3
 8005588:	f7ff fa72 	bl	8004a70 <LL_RCC_PLL_GetR>
 800558c:	4603      	mov	r3, r0
 800558e:	0f5b      	lsrs	r3, r3, #29
 8005590:	3301      	adds	r3, #1
 8005592:	fbb4 f3f3 	udiv	r3, r4, r3
 8005596:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005598:	68fb      	ldr	r3, [r7, #12]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd90      	pop	{r4, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	0800ef7c 	.word	0x0800ef7c
 80055a8:	00f42400 	.word	0x00f42400
 80055ac:	01e84800 	.word	0x01e84800

080055b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b0:	b598      	push	{r3, r4, r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80055b4:	f7ff ff90 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 80055b8:	4604      	mov	r4, r0
 80055ba:	f7ff f9dd 	bl	8004978 <LL_RCC_GetAHBPrescaler>
 80055be:	4603      	mov	r3, r0
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	4a03      	ldr	r2, [pc, #12]	; (80055d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80055c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd98      	pop	{r3, r4, r7, pc}
 80055d4:	0800ef1c 	.word	0x0800ef1c

080055d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d8:	b598      	push	{r3, r4, r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80055dc:	f7ff ffe8 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055e0:	4604      	mov	r4, r0
 80055e2:	f7ff f9f0 	bl	80049c6 <LL_RCC_GetAPB1Prescaler>
 80055e6:	4603      	mov	r3, r0
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	4a04      	ldr	r2, [pc, #16]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd98      	pop	{r3, r4, r7, pc}
 8005600:	0800ef5c 	.word	0x0800ef5c

08005604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005604:	b598      	push	{r3, r4, r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005608:	f7ff ffd2 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 800560c:	4604      	mov	r4, r0
 800560e:	f7ff f9e6 	bl	80049de <LL_RCC_GetAPB2Prescaler>
 8005612:	4603      	mov	r3, r0
 8005614:	0adb      	lsrs	r3, r3, #11
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	4a04      	ldr	r2, [pc, #16]	; (800562c <HAL_RCC_GetPCLK2Freq+0x28>)
 800561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd98      	pop	{r3, r4, r7, pc}
 800562c:	0800ef5c 	.word	0x0800ef5c

08005630 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	226f      	movs	r2, #111	; 0x6f
 800563e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005640:	f7ff f925 	bl	800488e <LL_RCC_GetSysClkSource>
 8005644:	4602      	mov	r2, r0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800564a:	f7ff f995 	bl	8004978 <LL_RCC_GetAHBPrescaler>
 800564e:	4602      	mov	r2, r0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005654:	f7ff f9b7 	bl	80049c6 <LL_RCC_GetAPB1Prescaler>
 8005658:	4602      	mov	r2, r0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800565e:	f7ff f9be 	bl	80049de <LL_RCC_GetAPB2Prescaler>
 8005662:	4602      	mov	r2, r0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005668:	f7ff f992 	bl	8004990 <LL_C2_RCC_GetAHBPrescaler>
 800566c:	4602      	mov	r2, r0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005672:	f7ff f99a 	bl	80049aa <LL_RCC_GetAHB4Prescaler>
 8005676:	4602      	mov	r2, r0
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <HAL_RCC_GetClockConfig+0x60>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0207 	and.w	r2, r3, #7
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	601a      	str	r2, [r3, #0]
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	58004000 	.word	0x58004000

08005694 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2bb0      	cmp	r3, #176	; 0xb0
 80056a0:	d903      	bls.n	80056aa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80056a2:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	e007      	b.n	80056ba <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80056ba:	f7ff f976 	bl	80049aa <LL_RCC_GetAHB4Prescaler>
 80056be:	4603      	mov	r3, r0
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	4a0d      	ldr	r2, [pc, #52]	; (80056fc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80056c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	0c9c      	lsrs	r4, r3, #18
 80056de:	f7fe feb7 	bl	8004450 <HAL_PWREx_GetVoltageRange>
 80056e2:	4603      	mov	r3, r0
 80056e4:	4619      	mov	r1, r3
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 f80c 	bl	8005704 <RCC_SetFlashLatency>
 80056ec:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd90      	pop	{r4, r7, pc}
 80056f6:	bf00      	nop
 80056f8:	0800ef7c 	.word	0x0800ef7c
 80056fc:	0800ef1c 	.word	0x0800ef1c
 8005700:	431bde83 	.word	0x431bde83

08005704 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005704:	b590      	push	{r4, r7, lr}
 8005706:	b093      	sub	sp, #76	; 0x4c
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800570e:	4b37      	ldr	r3, [pc, #220]	; (80057ec <RCC_SetFlashLatency+0xe8>)
 8005710:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800571a:	4a35      	ldr	r2, [pc, #212]	; (80057f0 <RCC_SetFlashLatency+0xec>)
 800571c:	f107 031c 	add.w	r3, r7, #28
 8005720:	ca07      	ldmia	r2, {r0, r1, r2}
 8005722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005726:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <RCC_SetFlashLatency+0xf0>)
 8005728:	f107 040c 	add.w	r4, r7, #12
 800572c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800572e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005732:	2300      	movs	r3, #0
 8005734:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573c:	d11a      	bne.n	8005774 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800573e:	2300      	movs	r3, #0
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
 8005742:	e013      	b.n	800576c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	3348      	adds	r3, #72	; 0x48
 800574a:	443b      	add	r3, r7
 800574c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	429a      	cmp	r2, r3
 8005754:	d807      	bhi.n	8005766 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	3348      	adds	r3, #72	; 0x48
 800575c:	443b      	add	r3, r7
 800575e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005762:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005764:	e020      	b.n	80057a8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005768:	3301      	adds	r3, #1
 800576a:	643b      	str	r3, [r7, #64]	; 0x40
 800576c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576e:	2b03      	cmp	r3, #3
 8005770:	d9e8      	bls.n	8005744 <RCC_SetFlashLatency+0x40>
 8005772:	e019      	b.n	80057a8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005774:	2300      	movs	r3, #0
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005778:	e013      	b.n	80057a2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	3348      	adds	r3, #72	; 0x48
 8005780:	443b      	add	r3, r7
 8005782:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	429a      	cmp	r2, r3
 800578a:	d807      	bhi.n	800579c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	3348      	adds	r3, #72	; 0x48
 8005792:	443b      	add	r3, r7
 8005794:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005798:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800579a:	e005      	b.n	80057a8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800579c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579e:	3301      	adds	r3, #1
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d9e8      	bls.n	800577a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80057a8:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <RCC_SetFlashLatency+0xf4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f023 0207 	bic.w	r2, r3, #7
 80057b0:	4911      	ldr	r1, [pc, #68]	; (80057f8 <RCC_SetFlashLatency+0xf4>)
 80057b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b4:	4313      	orrs	r3, r2
 80057b6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057b8:	f7fc fb52 	bl	8001e60 <HAL_GetTick>
 80057bc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057be:	e008      	b.n	80057d2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057c0:	f7fc fb4e 	bl	8001e60 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e007      	b.n	80057e2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <RCC_SetFlashLatency+0xf4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057dc:	429a      	cmp	r2, r3
 80057de:	d1ef      	bne.n	80057c0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	374c      	adds	r7, #76	; 0x4c
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800edec 	.word	0x0800edec
 80057f0:	0800edfc 	.word	0x0800edfc
 80057f4:	0800ee08 	.word	0x0800ee08
 80057f8:	58004000 	.word	0x58004000

080057fc <LL_RCC_LSE_IsEnabled>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <LL_RCC_LSE_IsEnabled+0x18>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <LL_RCC_LSE_IsEnabled+0x1a>
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_RCC_LSE_IsReady>:
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b02      	cmp	r3, #2
 8005832:	d101      	bne.n	8005838 <LL_RCC_LSE_IsReady+0x18>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <LL_RCC_LSE_IsReady+0x1a>
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <LL_RCC_MSI_EnablePLLMode>:
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005852:	f043 0304 	orr.w	r3, r3, #4
 8005856:	6013      	str	r3, [r2, #0]
}
 8005858:	bf00      	nop
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <LL_RCC_SetRFWKPClockSource>:
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800586a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005872:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <LL_RCC_SetSMPSClockSource>:
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	f023 0203 	bic.w	r2, r3, #3
 80058a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <LL_RCC_SetSMPSPrescaler>:
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80058be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <LL_RCC_SetUSARTClockSource>:
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	f023 0203 	bic.w	r2, r3, #3
 80058f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <LL_RCC_SetLPUARTClockSource>:
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800591e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <LL_RCC_SetI2CClockSource>:
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800593e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005942:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	091b      	lsrs	r3, r3, #4
 800594a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800594e:	43db      	mvns	r3, r3
 8005950:	401a      	ands	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800595a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <LL_RCC_SetLPTIMClockSource>:
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	041b      	lsls	r3, r3, #16
 8005986:	43db      	mvns	r3, r3
 8005988:	401a      	ands	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	041b      	lsls	r3, r3, #16
 800598e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_RCC_SetSAIClockSource>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <LL_RCC_SetRNGClockSource>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80059d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <LL_RCC_SetCLK48ClockSource>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <LL_RCC_SetUSBClockSource>:
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff ffe3 	bl	80059fc <LL_RCC_SetCLK48ClockSource>
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <LL_RCC_SetADCClockSource>:
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <LL_RCC_SetRTCClockSource>:
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <LL_RCC_GetRTCClockSource>:
{
 8005a96:	b480      	push	{r7}
 8005a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <LL_RCC_ForceBackupDomainReset>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ac8:	bf00      	nop
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <LL_RCC_PLLSAI1_Enable>:
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b06:	6013      	str	r3, [r2, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_PLLSAI1_Disable>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b24:	6013      	str	r3, [r2, #0]
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_RCC_PLLSAI1_IsReady>:
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b42:	d101      	bne.n	8005b48 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b60:	2300      	movs	r3, #0
 8005b62:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d034      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b78:	d021      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005b7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b7e:	d81b      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b84:	d01d      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b8a:	d815      	bhi.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b94:	d110      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ba6:	e00d      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f94d 	bl	8005e4c <RCCEx_PLLSAI1_ConfigNP>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bb6:	e005      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	77fb      	strb	r3, [r7, #31]
        break;
 8005bbc:	e002      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc4:	7ffb      	ldrb	r3, [r7, #31]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fee8 	bl	80059a4 <LL_RCC_SetSAIClockSource>
 8005bd4:	e001      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d046      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005be6:	f7ff ff56 	bl	8005a96 <LL_RCC_GetRTCClockSource>
 8005bea:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d03c      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005bf6:	f7fe fc1b 	bl	8004430 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ff30 	bl	8005a6a <LL_RCC_SetRTCClockSource>
 8005c0a:	e02e      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c14:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005c16:	f7ff ff4b 	bl	8005ab0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005c1a:	f7ff ff5a 	bl	8005ad2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c36:	f7ff fde1 	bl	80057fc <LL_RCC_LSE_IsEnabled>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d114      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c40:	f7fc f90e 	bl	8001e60 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c46:	e00b      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fc f90a 	bl	8001e60 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d902      	bls.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	77fb      	strb	r3, [r7, #31]
              break;
 8005c5e:	e004      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c60:	f7ff fdde 	bl	8005820 <LL_RCC_LSE_IsReady>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d1ee      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c6a:	7ffb      	ldrb	r3, [r7, #31]
 8005c6c:	77bb      	strb	r3, [r7, #30]
 8005c6e:	e001      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c70:	7ffb      	ldrb	r3, [r7, #31]
 8005c72:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d004      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fe2a 	bl	80058de <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d004      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fe35 	bl	800590a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fe5d 	bl	8005970 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fe52 	bl	8005970 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fe2a 	bl	8005936 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d004      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fe1f 	bl	8005936 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d022      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fe8d 	bl	8005a28 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d16:	d107      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d26:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d30:	d10b      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f8e3 	bl	8005f02 <RCCEx_PLLSAI1_ConfigNQ>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d40:	7ffb      	ldrb	r3, [r7, #31]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005d46:	7ffb      	ldrb	r3, [r7, #31]
 8005d48:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d02b      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5e:	d008      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d68:	d003      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fe2a 	bl	80059d0 <LL_RCC_SetRNGClockSource>
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	2000      	movs	r0, #0
 8005d8a:	f7ff fe21 	bl	80059d0 <LL_RCC_SetRNGClockSource>
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff fe34 	bl	80059fc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d9c:	d107      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d022      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fe3d 	bl	8005a3e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dcc:	d107      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ddc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de6:	d10b      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f8e3 	bl	8005fb8 <RCCEx_PLLSAI1_ConfigNR>
 8005df2:	4603      	mov	r3, r0
 8005df4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005df6:	7ffb      	ldrb	r3, [r7, #31]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005dfc:	7ffb      	ldrb	r3, [r7, #31]
 8005dfe:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff fd26 	bl	8005862 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd45 	bl	80058b6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fd2c 	bl	800588e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005e36:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005e44:	f7ff fcfe 	bl	8005844 <LL_RCC_MSI_EnablePLLMode>
}
 8005e48:	bf00      	nop
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e58:	f7ff fe5b 	bl	8005b12 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e5c:	f7fc f800 	bl	8001e60 <HAL_GetTick>
 8005e60:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e62:	e009      	b.n	8005e78 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e64:	f7fb fffc 	bl	8001e60 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d902      	bls.n	8005e78 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	73fb      	strb	r3, [r7, #15]
      break;
 8005e76:	e004      	b.n	8005e82 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e78:	f7ff fe5a 	bl	8005b30 <LL_RCC_PLLSAI1_IsReady>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d137      	bne.n	8005ef8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005eb6:	f7ff fe1d 	bl	8005af4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eba:	f7fb ffd1 	bl	8001e60 <HAL_GetTick>
 8005ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ec0:	e009      	b.n	8005ed6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ec2:	f7fb ffcd 	bl	8001e60 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d902      	bls.n	8005ed6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ed4:	e004      	b.n	8005ee0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ed6:	f7ff fe2b 	bl	8005b30 <LL_RCC_PLLSAI1_IsReady>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d1f0      	bne.n	8005ec2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d108      	bne.n	8005ef8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f0e:	f7ff fe00 	bl	8005b12 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f12:	f7fb ffa5 	bl	8001e60 <HAL_GetTick>
 8005f16:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f18:	e009      	b.n	8005f2e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f1a:	f7fb ffa1 	bl	8001e60 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d902      	bls.n	8005f2e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2c:	e004      	b.n	8005f38 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f2e:	f7ff fdff 	bl	8005b30 <LL_RCC_PLLSAI1_IsReady>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f0      	bne.n	8005f1a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d137      	bne.n	8005fae <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f52:	4313      	orrs	r3, r2
 8005f54:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f6c:	f7ff fdc2 	bl	8005af4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f70:	f7fb ff76 	bl	8001e60 <HAL_GetTick>
 8005f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f76:	e009      	b.n	8005f8c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f78:	f7fb ff72 	bl	8001e60 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d902      	bls.n	8005f8c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	73fb      	strb	r3, [r7, #15]
        break;
 8005f8a:	e004      	b.n	8005f96 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f8c:	f7ff fdd0 	bl	8005b30 <LL_RCC_PLLSAI1_IsReady>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d1f0      	bne.n	8005f78 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d108      	bne.n	8005fae <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005faa:	4313      	orrs	r3, r2
 8005fac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005fc4:	f7ff fda5 	bl	8005b12 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fc8:	f7fb ff4a 	bl	8001e60 <HAL_GetTick>
 8005fcc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fce:	e009      	b.n	8005fe4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fd0:	f7fb ff46 	bl	8001e60 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d902      	bls.n	8005fe4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	e004      	b.n	8005fee <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fe4:	f7ff fda4 	bl	8005b30 <LL_RCC_PLLSAI1_IsReady>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d137      	bne.n	8006064 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006008:	4313      	orrs	r3, r2
 800600a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800600c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601e:	4313      	orrs	r3, r2
 8006020:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006022:	f7ff fd67 	bl	8005af4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006026:	f7fb ff1b 	bl	8001e60 <HAL_GetTick>
 800602a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800602c:	e009      	b.n	8006042 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800602e:	f7fb ff17 	bl	8001e60 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d902      	bls.n	8006042 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	73fb      	strb	r3, [r7, #15]
        break;
 8006040:	e004      	b.n	800604c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006042:	f7ff fd75 	bl	8005b30 <LL_RCC_PLLSAI1_IsReady>
 8006046:	4603      	mov	r3, r0
 8006048:	2b01      	cmp	r3, #1
 800604a:	d1f0      	bne.n	800602e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d108      	bne.n	8006064 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006060:	4313      	orrs	r3, r2
 8006062:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e049      	b.n	8006114 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f841 	bl	800611c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f000 f9b7 	bl	8006420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d001      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e036      	b.n	80061b6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a17      	ldr	r2, [pc, #92]	; (80061c4 <HAL_TIM_Base_Start_IT+0x94>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d004      	beq.n	8006174 <HAL_TIM_Base_Start_IT+0x44>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d115      	bne.n	80061a0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <HAL_TIM_Base_Start_IT+0x98>)
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b06      	cmp	r3, #6
 8006184:	d015      	beq.n	80061b2 <HAL_TIM_Base_Start_IT+0x82>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618c:	d011      	beq.n	80061b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619e:	e008      	b.n	80061b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e000      	b.n	80061b4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	00010007 	.word	0x00010007

080061cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d020      	beq.n	8006230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01b      	beq.n	8006230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0202 	mvn.w	r2, #2
 8006200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8e4 	bl	80063e4 <HAL_TIM_IC_CaptureCallback>
 800621c:	e005      	b.n	800622a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f8d6 	bl	80063d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f8e7 	bl	80063f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d020      	beq.n	800627c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0204 	mvn.w	r2, #4
 800624c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f8be 	bl	80063e4 <HAL_TIM_IC_CaptureCallback>
 8006268:	e005      	b.n	8006276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8b0 	bl	80063d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8c1 	bl	80063f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0208 	mvn.w	r2, #8
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2204      	movs	r2, #4
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f898 	bl	80063e4 <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f88a 	bl	80063d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f89b 	bl	80063f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0210 	mvn.w	r2, #16
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2208      	movs	r2, #8
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f872 	bl	80063e4 <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f864 	bl	80063d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f875 	bl	80063f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0201 	mvn.w	r2, #1
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fb fa40 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f8d0 	bl	80064fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f8c8 	bl	8006510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800639c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f834 	bl	800640c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00c      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0220 	mvn.w	r2, #32
 80063c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f890 	bl	80064e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a2a      	ldr	r2, [pc, #168]	; (80064dc <TIM_Base_SetConfig+0xbc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d003      	beq.n	8006440 <TIM_Base_SetConfig+0x20>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643e:	d108      	bne.n	8006452 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a21      	ldr	r2, [pc, #132]	; (80064dc <TIM_Base_SetConfig+0xbc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00b      	beq.n	8006472 <TIM_Base_SetConfig+0x52>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006460:	d007      	beq.n	8006472 <TIM_Base_SetConfig+0x52>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a1e      	ldr	r2, [pc, #120]	; (80064e0 <TIM_Base_SetConfig+0xc0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_Base_SetConfig+0x52>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <TIM_Base_SetConfig+0xc4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d108      	bne.n	8006484 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a0c      	ldr	r2, [pc, #48]	; (80064dc <TIM_Base_SetConfig+0xbc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <TIM_Base_SetConfig+0xa0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a0b      	ldr	r2, [pc, #44]	; (80064e0 <TIM_Base_SetConfig+0xc0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_Base_SetConfig+0xa0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <TIM_Base_SetConfig+0xc4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d103      	bne.n	80064c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	615a      	str	r2, [r3, #20]
}
 80064ce:	bf00      	nop
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800

080064e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <LL_RCC_GetUSARTClockSource>:
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800652c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006530:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4013      	ands	r3, r2
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <LL_RCC_GetLPUARTClockSource>:
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800654c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006550:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4013      	ands	r3, r2
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e042      	b.n	80065fc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7fb fa23 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2224      	movs	r2, #36	; 0x24
 8006592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0201 	bic.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 f914 	bl	80077dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fee9 	bl	800738c <UART_SetConfig>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e01b      	b.n	80065fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f993 	bl	8007920 <UART_CheckIdleState>
 80065fa:	4603      	mov	r3, r0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006604:	b480      	push	{r7}
 8006606:	b091      	sub	sp, #68	; 0x44
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	4613      	mov	r3, r2
 8006610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	2b20      	cmp	r3, #32
 800661a:	d178      	bne.n	800670e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_Transmit_IT+0x24>
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e071      	b.n	8006710 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2221      	movs	r2, #33	; 0x21
 8006654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006660:	d12a      	bne.n	80066b8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666a:	d107      	bne.n	800667c <HAL_UART_Transmit_IT+0x78>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a29      	ldr	r2, [pc, #164]	; (800671c <HAL_UART_Transmit_IT+0x118>)
 8006678:	679a      	str	r2, [r3, #120]	; 0x78
 800667a:	e002      	b.n	8006682 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a28      	ldr	r2, [pc, #160]	; (8006720 <HAL_UART_Transmit_IT+0x11c>)
 8006680:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3308      	adds	r3, #8
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006698:	63bb      	str	r3, [r7, #56]	; 0x38
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066a2:	637a      	str	r2, [r7, #52]	; 0x34
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e5      	bne.n	8006682 <HAL_UART_Transmit_IT+0x7e>
 80066b6:	e028      	b.n	800670a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c0:	d107      	bne.n	80066d2 <HAL_UART_Transmit_IT+0xce>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4a15      	ldr	r2, [pc, #84]	; (8006724 <HAL_UART_Transmit_IT+0x120>)
 80066ce:	679a      	str	r2, [r3, #120]	; 0x78
 80066d0:	e002      	b.n	80066d8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4a14      	ldr	r2, [pc, #80]	; (8006728 <HAL_UART_Transmit_IT+0x124>)
 80066d6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	613b      	str	r3, [r7, #16]
   return(result);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f6:	623b      	str	r3, [r7, #32]
 80066f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	69f9      	ldr	r1, [r7, #28]
 80066fc:	6a3a      	ldr	r2, [r7, #32]
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	61bb      	str	r3, [r7, #24]
   return(result);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e6      	bne.n	80066d8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800670e:	2302      	movs	r3, #2
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3744      	adds	r7, #68	; 0x44
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	08008593 	.word	0x08008593
 8006720:	080084b3 	.word	0x080084b3
 8006724:	080083f1 	.word	0x080083f1
 8006728:	08008339 	.word	0x08008339

0800672c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006740:	2b20      	cmp	r3, #32
 8006742:	d137      	bne.n	80067b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <HAL_UART_Receive_IT+0x24>
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e030      	b.n	80067b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a18      	ldr	r2, [pc, #96]	; (80067c0 <HAL_UART_Receive_IT+0x94>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d01f      	beq.n	80067a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d018      	beq.n	80067a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	613b      	str	r3, [r7, #16]
   return(result);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	623b      	str	r3, [r7, #32]
 8006792:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	69f9      	ldr	r1, [r7, #28]
 8006796:	6a3a      	ldr	r2, [r7, #32]
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	61bb      	str	r3, [r7, #24]
   return(result);
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e6      	bne.n	8006772 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067a4:	88fb      	ldrh	r3, [r7, #6]
 80067a6:	461a      	mov	r2, r3
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f001 f9ca 	bl	8007b44 <UART_Start_Receive_IT>
 80067b0:	4603      	mov	r3, r0
 80067b2:	e000      	b.n	80067b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3728      	adds	r7, #40	; 0x28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40008000 	.word	0x40008000

080067c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d167      	bne.n	80068ac <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <HAL_UART_Transmit_DMA+0x24>
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e060      	b.n	80068ae <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	88fa      	ldrh	r2, [r7, #6]
 80067fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2221      	movs	r2, #33	; 0x21
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d028      	beq.n	800686c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800681e:	4a26      	ldr	r2, [pc, #152]	; (80068b8 <HAL_UART_Transmit_DMA+0xf4>)
 8006820:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006826:	4a25      	ldr	r2, [pc, #148]	; (80068bc <HAL_UART_Transmit_DMA+0xf8>)
 8006828:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800682e:	4a24      	ldr	r2, [pc, #144]	; (80068c0 <HAL_UART_Transmit_DMA+0xfc>)
 8006830:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006836:	2200      	movs	r2, #0
 8006838:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006842:	4619      	mov	r1, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3328      	adds	r3, #40	; 0x28
 800684a:	461a      	mov	r2, r3
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	f7fc ff81 	bl	8003754 <HAL_DMA_Start_IT>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2210      	movs	r2, #16
 800685c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e020      	b.n	80068ae <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2240      	movs	r2, #64	; 0x40
 8006872:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	613b      	str	r3, [r7, #16]
   return(result);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3308      	adds	r3, #8
 8006892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006894:	623a      	str	r2, [r7, #32]
 8006896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	69f9      	ldr	r1, [r7, #28]
 800689a:	6a3a      	ldr	r2, [r7, #32]
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e5      	bne.n	8006874 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e000      	b.n	80068ae <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
  }
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3728      	adds	r7, #40	; 0x28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	08008023 	.word	0x08008023
 80068bc:	080080bd 	.word	0x080080bd
 80068c0:	08008243 	.word	0x08008243

080068c4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b090      	sub	sp, #64	; 0x40
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e6:	2b80      	cmp	r3, #128	; 0x80
 80068e8:	d139      	bne.n	800695e <HAL_UART_DMAStop+0x9a>
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	2b21      	cmp	r3, #33	; 0x21
 80068ee:	d136      	bne.n	800695e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3308      	adds	r3, #8
 80068f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3308      	adds	r3, #8
 800690e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e5      	bne.n	80068f0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d015      	beq.n	8006958 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006930:	4618      	mov	r0, r3
 8006932:	f7fc ff8a 	bl	800384a <HAL_DMA_Abort>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00d      	beq.n	8006958 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006940:	4618      	mov	r0, r3
 8006942:	f7fd f8ef 	bl	8003b24 <HAL_DMA_GetError>
 8006946:	4603      	mov	r3, r0
 8006948:	2b20      	cmp	r3, #32
 800694a:	d105      	bne.n	8006958 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2210      	movs	r2, #16
 8006950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e047      	b.n	80069e8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fabb 	bl	8007ed4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d13c      	bne.n	80069e6 <HAL_UART_DMAStop+0x122>
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	2b22      	cmp	r3, #34	; 0x22
 8006970:	d139      	bne.n	80069e6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	60bb      	str	r3, [r7, #8]
   return(result);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006988:	633b      	str	r3, [r7, #48]	; 0x30
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3308      	adds	r3, #8
 8006990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006992:	61ba      	str	r2, [r7, #24]
 8006994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e5      	bne.n	8006972 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d017      	beq.n	80069e0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fc ff47 	bl	800384a <HAL_DMA_Abort>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00e      	beq.n	80069e0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fd f8ab 	bl	8003b24 <HAL_DMA_GetError>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d105      	bne.n	80069e0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2210      	movs	r2, #16
 80069d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e003      	b.n	80069e8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fab8 	bl	8007f56 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3740      	adds	r7, #64	; 0x40
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b09a      	sub	sp, #104	; 0x68
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a16:	657b      	str	r3, [r7, #84]	; 0x54
 8006a18:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e6      	bne.n	80069f8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	663b      	str	r3, [r7, #96]	; 0x60
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a4e:	643a      	str	r2, [r7, #64]	; 0x40
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e3      	bne.n	8006a2a <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d118      	bne.n	8006a9c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f023 0310 	bic.w	r3, r3, #16
 8006a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e6      	bne.n	8006a6a <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa6:	2b40      	cmp	r3, #64	; 0x40
 8006aa8:	d154      	bne.n	8006b54 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aca:	61ba      	str	r2, [r7, #24]
 8006acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6979      	ldr	r1, [r7, #20]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d017      	beq.n	8006b18 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aee:	4a26      	ldr	r2, [pc, #152]	; (8006b88 <HAL_UART_AbortReceive_IT+0x198>)
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fc ff05 	bl	8003908 <HAL_DMA_Abort_IT>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d03c      	beq.n	8006b7e <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b12:	4610      	mov	r0, r2
 8006b14:	4798      	blx	r3
 8006b16:	e032      	b.n	8006b7e <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	220f      	movs	r2, #15
 8006b2c:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0208 	orr.w	r2, r2, #8
 8006b3c:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fb55 	bl	80071fc <HAL_UART_AbortReceiveCpltCallback>
 8006b52:	e014      	b.n	8006b7e <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	220f      	movs	r2, #15
 8006b68:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fb3f 	bl	80071fc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3768      	adds	r7, #104	; 0x68
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	080082ef 	.word	0x080082ef

08006b8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b0ba      	sub	sp, #232	; 0xe8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bba:	4013      	ands	r3, r2
 8006bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d11b      	bne.n	8006c00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d015      	beq.n	8006c00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d105      	bne.n	8006bec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 82e3 	beq.w	80071bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
      }
      return;
 8006bfe:	e2dd      	b.n	80071bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8123 	beq.w	8006e50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c0e:	4b8d      	ldr	r3, [pc, #564]	; (8006e44 <HAL_UART_IRQHandler+0x2b8>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c1a:	4b8b      	ldr	r3, [pc, #556]	; (8006e48 <HAL_UART_IRQHandler+0x2bc>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 8116 	beq.w	8006e50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d011      	beq.n	8006c54 <HAL_UART_IRQHandler+0xc8>
 8006c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2201      	movs	r2, #1
 8006c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	f043 0201 	orr.w	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d011      	beq.n	8006c84 <HAL_UART_IRQHandler+0xf8>
 8006c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2202      	movs	r2, #2
 8006c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7a:	f043 0204 	orr.w	r2, r3, #4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d011      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x128>
 8006c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006caa:	f043 0202 	orr.w	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d017      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ccc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cd0:	4b5c      	ldr	r3, [pc, #368]	; (8006e44 <HAL_UART_IRQHandler+0x2b8>)
 8006cd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2208      	movs	r2, #8
 8006cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f043 0208 	orr.w	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d012      	beq.n	8006d22 <HAL_UART_IRQHandler+0x196>
 8006cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00c      	beq.n	8006d22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	f043 0220 	orr.w	r2, r3, #32
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8249 	beq.w	80071c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d3e:	f003 0320 	and.w	r3, r3, #32
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d105      	bne.n	8006d52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d005      	beq.n	8006d86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d054      	beq.n	8006e30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f8e5 	bl	8007f56 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d146      	bne.n	8006e28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1d9      	bne.n	8006d9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d017      	beq.n	8006e20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df6:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <HAL_UART_IRQHandler+0x2c0>)
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fc fd81 	bl	8003908 <HAL_DMA_Abort_IT>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d019      	beq.n	8006e40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1e:	e00f      	b.n	8006e40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f007 fe97 	bl	800eb54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e26:	e00b      	b.n	8006e40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f007 fe93 	bl	800eb54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2e:	e007      	b.n	8006e40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f007 fe8f 	bl	800eb54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006e3e:	e1bf      	b.n	80071c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	bf00      	nop
    return;
 8006e42:	e1bd      	b.n	80071c0 <HAL_UART_IRQHandler+0x634>
 8006e44:	10000001 	.word	0x10000001
 8006e48:	04000120 	.word	0x04000120
 8006e4c:	080082c3 	.word	0x080082c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	f040 8153 	bne.w	8007100 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 814c 	beq.w	8007100 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8145 	beq.w	8007100 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2210      	movs	r2, #16
 8006e7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	f040 80bb 	bne.w	8007004 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 818f 	beq.w	80071c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	f080 8187 	bcs.w	80071c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f040 8087 	bne.w	8006fe2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1da      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e1      	bne.n	8006f1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e3      	bne.n	8006f5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb0:	f023 0310 	bic.w	r3, r3, #16
 8006fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e4      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fc fc34 	bl	800384a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f007 fe03 	bl	800ec08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007002:	e0df      	b.n	80071c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007010:	b29b      	uxth	r3, r3
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80d1 	beq.w	80071c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80cc 	beq.w	80071c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007052:	647b      	str	r3, [r7, #68]	; 0x44
 8007054:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e4      	bne.n	8007030 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	623b      	str	r3, [r7, #32]
   return(result);
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800708e:	633a      	str	r2, [r7, #48]	; 0x30
 8007090:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e1      	bne.n	8007066 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0310 	bic.w	r3, r3, #16
 80070ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070d8:	61fb      	str	r3, [r7, #28]
 80070da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69b9      	ldr	r1, [r7, #24]
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	617b      	str	r3, [r7, #20]
   return(result);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e4      	bne.n	80070b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f007 fd85 	bl	800ec08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070fe:	e063      	b.n	80071c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <HAL_UART_IRQHandler+0x59e>
 800710c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fff2 	bl	800910c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007128:	e051      	b.n	80071ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b00      	cmp	r3, #0
 8007134:	d014      	beq.n	8007160 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007152:	2b00      	cmp	r3, #0
 8007154:	d03a      	beq.n	80071cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
    }
    return;
 800715e:	e035      	b.n	80071cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <HAL_UART_IRQHandler+0x5f4>
 800716c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fa7f 	bl	800867c <UART_EndTransmit_IT>
    return;
 800717e:	e026      	b.n	80071ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d009      	beq.n	80071a0 <HAL_UART_IRQHandler+0x614>
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 ffcb 	bl	8009134 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800719e:	e016      	b.n	80071ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d010      	beq.n	80071ce <HAL_UART_IRQHandler+0x642>
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	da0c      	bge.n	80071ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 ffb3 	bl	8009120 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071ba:	e008      	b.n	80071ce <HAL_UART_IRQHandler+0x642>
      return;
 80071bc:	bf00      	nop
 80071be:	e006      	b.n	80071ce <HAL_UART_IRQHandler+0x642>
    return;
 80071c0:	bf00      	nop
 80071c2:	e004      	b.n	80071ce <HAL_UART_IRQHandler+0x642>
      return;
 80071c4:	bf00      	nop
 80071c6:	e002      	b.n	80071ce <HAL_UART_IRQHandler+0x642>
      return;
 80071c8:	bf00      	nop
 80071ca:	e000      	b.n	80071ce <HAL_UART_IRQHandler+0x642>
    return;
 80071cc:	bf00      	nop
  }
}
 80071ce:	37e8      	adds	r7, #232	; 0xe8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8007210:	b480      	push	{r7}
 8007212:	b08f      	sub	sp, #60	; 0x3c
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8007222:	2302      	movs	r3, #2
 8007224:	e042      	b.n	80072ac <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2224      	movs	r2, #36	; 0x24
 8007232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	61fb      	str	r3, [r7, #28]
   return(result);
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f023 030c 	bic.w	r3, r3, #12
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007256:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800725a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e6      	bne.n	8007236 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	60bb      	str	r3, [r7, #8]
   return(result);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f043 0308 	orr.w	r3, r3, #8
 800727c:	633b      	str	r3, [r7, #48]	; 0x30
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6979      	ldr	r1, [r7, #20]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	613b      	str	r3, [r7, #16]
   return(result);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e6      	bne.n	8007268 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	373c      	adds	r7, #60	; 0x3c
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b08f      	sub	sp, #60	; 0x3c
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_HalfDuplex_EnableReceiver+0x16>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e042      	b.n	8007354 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2224      	movs	r2, #36	; 0x24
 80072da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f023 030c 	bic.w	r3, r3, #12
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e6      	bne.n	80072de <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	60bb      	str	r3, [r7, #8]
   return(result);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f043 0304 	orr.w	r3, r3, #4
 8007324:	633b      	str	r3, [r7, #48]	; 0x30
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	61bb      	str	r3, [r7, #24]
 8007330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6979      	ldr	r1, [r7, #20]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	613b      	str	r3, [r7, #16]
   return(result);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e6      	bne.n	8007310 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	373c      	adds	r7, #60	; 0x3c
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007376:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4313      	orrs	r3, r2
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007390:	b08c      	sub	sp, #48	; 0x30
 8007392:	af00      	add	r7, sp, #0
 8007394:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4baf      	ldr	r3, [pc, #700]	; (8007678 <UART_SetConfig+0x2ec>)
 80073bc:	4013      	ands	r3, r2
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073c4:	430b      	orrs	r3, r1
 80073c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4aa4      	ldr	r2, [pc, #656]	; (800767c <UART_SetConfig+0x2f0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d004      	beq.n	80073f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f4:	4313      	orrs	r3, r2
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007402:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800740c:	430b      	orrs	r3, r1
 800740e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	f023 010f 	bic.w	r1, r3, #15
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a95      	ldr	r2, [pc, #596]	; (8007680 <UART_SetConfig+0x2f4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d125      	bne.n	800747c <UART_SetConfig+0xf0>
 8007430:	2003      	movs	r0, #3
 8007432:	f7ff f877 	bl	8006524 <LL_RCC_GetUSARTClockSource>
 8007436:	4603      	mov	r3, r0
 8007438:	2b03      	cmp	r3, #3
 800743a:	d81b      	bhi.n	8007474 <UART_SetConfig+0xe8>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0xb8>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007455 	.word	0x08007455
 8007448:	08007465 	.word	0x08007465
 800744c:	0800745d 	.word	0x0800745d
 8007450:	0800746d 	.word	0x0800746d
 8007454:	2301      	movs	r3, #1
 8007456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745a:	e042      	b.n	80074e2 <UART_SetConfig+0x156>
 800745c:	2302      	movs	r3, #2
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007462:	e03e      	b.n	80074e2 <UART_SetConfig+0x156>
 8007464:	2304      	movs	r3, #4
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746a:	e03a      	b.n	80074e2 <UART_SetConfig+0x156>
 800746c:	2308      	movs	r3, #8
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007472:	e036      	b.n	80074e2 <UART_SetConfig+0x156>
 8007474:	2310      	movs	r3, #16
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800747a:	e032      	b.n	80074e2 <UART_SetConfig+0x156>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a7e      	ldr	r2, [pc, #504]	; (800767c <UART_SetConfig+0x2f0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d12a      	bne.n	80074dc <UART_SetConfig+0x150>
 8007486:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800748a:	f7ff f85b 	bl	8006544 <LL_RCC_GetLPUARTClockSource>
 800748e:	4603      	mov	r3, r0
 8007490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007494:	d01a      	beq.n	80074cc <UART_SetConfig+0x140>
 8007496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800749a:	d81b      	bhi.n	80074d4 <UART_SetConfig+0x148>
 800749c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a0:	d00c      	beq.n	80074bc <UART_SetConfig+0x130>
 80074a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a6:	d815      	bhi.n	80074d4 <UART_SetConfig+0x148>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <UART_SetConfig+0x128>
 80074ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b0:	d008      	beq.n	80074c4 <UART_SetConfig+0x138>
 80074b2:	e00f      	b.n	80074d4 <UART_SetConfig+0x148>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ba:	e012      	b.n	80074e2 <UART_SetConfig+0x156>
 80074bc:	2302      	movs	r3, #2
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c2:	e00e      	b.n	80074e2 <UART_SetConfig+0x156>
 80074c4:	2304      	movs	r3, #4
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ca:	e00a      	b.n	80074e2 <UART_SetConfig+0x156>
 80074cc:	2308      	movs	r3, #8
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d2:	e006      	b.n	80074e2 <UART_SetConfig+0x156>
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074da:	e002      	b.n	80074e2 <UART_SetConfig+0x156>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a65      	ldr	r2, [pc, #404]	; (800767c <UART_SetConfig+0x2f0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	f040 8097 	bne.w	800761c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d823      	bhi.n	800753e <UART_SetConfig+0x1b2>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x170>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007521 	.word	0x08007521
 8007500:	0800753f 	.word	0x0800753f
 8007504:	08007529 	.word	0x08007529
 8007508:	0800753f 	.word	0x0800753f
 800750c:	0800752f 	.word	0x0800752f
 8007510:	0800753f 	.word	0x0800753f
 8007514:	0800753f 	.word	0x0800753f
 8007518:	0800753f 	.word	0x0800753f
 800751c:	08007537 	.word	0x08007537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007520:	f7fe f85a 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8007524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007526:	e010      	b.n	800754a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007528:	4b56      	ldr	r3, [pc, #344]	; (8007684 <UART_SetConfig+0x2f8>)
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800752c:	e00d      	b.n	800754a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752e:	f7fd ffd3 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8007532:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007534:	e009      	b.n	800754a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800753c:	e005      	b.n	800754a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007548:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 812b 	beq.w	80077a8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	4a4c      	ldr	r2, [pc, #304]	; (8007688 <UART_SetConfig+0x2fc>)
 8007558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800755c:	461a      	mov	r2, r3
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	fbb3 f3f2 	udiv	r3, r3, r2
 8007564:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	4413      	add	r3, r2
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	429a      	cmp	r2, r3
 8007574:	d305      	bcc.n	8007582 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	429a      	cmp	r2, r3
 8007580:	d903      	bls.n	800758a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007588:	e10e      	b.n	80077a8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	2200      	movs	r2, #0
 800758e:	60bb      	str	r3, [r7, #8]
 8007590:	60fa      	str	r2, [r7, #12]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	4a3c      	ldr	r2, [pc, #240]	; (8007688 <UART_SetConfig+0x2fc>)
 8007598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800759c:	b29b      	uxth	r3, r3
 800759e:	2200      	movs	r2, #0
 80075a0:	603b      	str	r3, [r7, #0]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075ac:	f7f9 fa06 	bl	80009bc <__aeabi_uldivmod>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4610      	mov	r0, r2
 80075b6:	4619      	mov	r1, r3
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	020b      	lsls	r3, r1, #8
 80075c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075c6:	0202      	lsls	r2, r0, #8
 80075c8:	6979      	ldr	r1, [r7, #20]
 80075ca:	6849      	ldr	r1, [r1, #4]
 80075cc:	0849      	lsrs	r1, r1, #1
 80075ce:	2000      	movs	r0, #0
 80075d0:	460c      	mov	r4, r1
 80075d2:	4605      	mov	r5, r0
 80075d4:	eb12 0804 	adds.w	r8, r2, r4
 80075d8:	eb43 0905 	adc.w	r9, r3, r5
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	469a      	mov	sl, r3
 80075e4:	4693      	mov	fp, r2
 80075e6:	4652      	mov	r2, sl
 80075e8:	465b      	mov	r3, fp
 80075ea:	4640      	mov	r0, r8
 80075ec:	4649      	mov	r1, r9
 80075ee:	f7f9 f9e5 	bl	80009bc <__aeabi_uldivmod>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4613      	mov	r3, r2
 80075f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007600:	d308      	bcc.n	8007614 <UART_SetConfig+0x288>
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007608:	d204      	bcs.n	8007614 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6a3a      	ldr	r2, [r7, #32]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	e0c9      	b.n	80077a8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800761a:	e0c5      	b.n	80077a8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007624:	d16d      	bne.n	8007702 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007626:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800762a:	3b01      	subs	r3, #1
 800762c:	2b07      	cmp	r3, #7
 800762e:	d82d      	bhi.n	800768c <UART_SetConfig+0x300>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <UART_SetConfig+0x2ac>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007659 	.word	0x08007659
 800763c:	08007661 	.word	0x08007661
 8007640:	0800768d 	.word	0x0800768d
 8007644:	08007667 	.word	0x08007667
 8007648:	0800768d 	.word	0x0800768d
 800764c:	0800768d 	.word	0x0800768d
 8007650:	0800768d 	.word	0x0800768d
 8007654:	0800766f 	.word	0x0800766f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007658:	f7fd ffd4 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 800765c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800765e:	e01b      	b.n	8007698 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <UART_SetConfig+0x2f8>)
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007664:	e018      	b.n	8007698 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007666:	f7fd ff37 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 800766a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800766c:	e014      	b.n	8007698 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800766e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007674:	e010      	b.n	8007698 <UART_SetConfig+0x30c>
 8007676:	bf00      	nop
 8007678:	cfff69f3 	.word	0xcfff69f3
 800767c:	40008000 	.word	0x40008000
 8007680:	40013800 	.word	0x40013800
 8007684:	00f42400 	.word	0x00f42400
 8007688:	0800efbc 	.word	0x0800efbc
      default:
        pclk = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8084 	beq.w	80077a8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	4a4b      	ldr	r2, [pc, #300]	; (80077d4 <UART_SetConfig+0x448>)
 80076a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b2:	005a      	lsls	r2, r3, #1
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	441a      	add	r2, r3
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	2b0f      	cmp	r3, #15
 80076ca:	d916      	bls.n	80076fa <UART_SetConfig+0x36e>
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d2:	d212      	bcs.n	80076fa <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f023 030f 	bic.w	r3, r3, #15
 80076dc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	8bfb      	ldrh	r3, [r7, #30]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	8bfa      	ldrh	r2, [r7, #30]
 80076f6:	60da      	str	r2, [r3, #12]
 80076f8:	e056      	b.n	80077a8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007700:	e052      	b.n	80077a8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007706:	3b01      	subs	r3, #1
 8007708:	2b07      	cmp	r3, #7
 800770a:	d822      	bhi.n	8007752 <UART_SetConfig+0x3c6>
 800770c:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <UART_SetConfig+0x388>)
 800770e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007712:	bf00      	nop
 8007714:	08007735 	.word	0x08007735
 8007718:	0800773d 	.word	0x0800773d
 800771c:	08007753 	.word	0x08007753
 8007720:	08007743 	.word	0x08007743
 8007724:	08007753 	.word	0x08007753
 8007728:	08007753 	.word	0x08007753
 800772c:	08007753 	.word	0x08007753
 8007730:	0800774b 	.word	0x0800774b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007734:	f7fd ff66 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 8007738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800773a:	e010      	b.n	800775e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800773c:	4b26      	ldr	r3, [pc, #152]	; (80077d8 <UART_SetConfig+0x44c>)
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007740:	e00d      	b.n	800775e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007742:	f7fd fec9 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 8007746:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007748:	e009      	b.n	800775e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800774a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007750:	e005      	b.n	800775e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800775c:	bf00      	nop
    }

    if (pclk != 0U)
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d021      	beq.n	80077a8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <UART_SetConfig+0x448>)
 800776a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800776e:	461a      	mov	r2, r3
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	fbb3 f2f2 	udiv	r2, r3, r2
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	441a      	add	r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d909      	bls.n	80077a2 <UART_SetConfig+0x416>
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d205      	bcs.n	80077a2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	b29a      	uxth	r2, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60da      	str	r2, [r3, #12]
 80077a0:	e002      	b.n	80077a8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2200      	movs	r2, #0
 80077bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2200      	movs	r2, #0
 80077c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3730      	adds	r7, #48	; 0x30
 80077cc:	46bd      	mov	sp, r7
 80077ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077d2:	bf00      	nop
 80077d4:	0800efbc 	.word	0x0800efbc
 80077d8:	00f42400 	.word	0x00f42400

080077dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00a      	beq.n	8007806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00a      	beq.n	8007828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00a      	beq.n	800788e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01a      	beq.n	80078f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078da:	d10a      	bne.n	80078f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	605a      	str	r2, [r3, #4]
  }
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b098      	sub	sp, #96	; 0x60
 8007924:	af02      	add	r7, sp, #8
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007930:	f7fa fa96 	bl	8001e60 <HAL_GetTick>
 8007934:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b08      	cmp	r3, #8
 8007942:	d12f      	bne.n	80079a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800794c:	2200      	movs	r2, #0
 800794e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f88e 	bl	8007a74 <UART_WaitOnFlagUntilTimeout>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d022      	beq.n	80079a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007972:	653b      	str	r3, [r7, #80]	; 0x50
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797c:	647b      	str	r3, [r7, #68]	; 0x44
 800797e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800798a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e6      	bne.n	800795e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e063      	b.n	8007a6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d149      	bne.n	8007a46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ba:	2200      	movs	r2, #0
 80079bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f857 	bl	8007a74 <UART_WaitOnFlagUntilTimeout>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d03c      	beq.n	8007a46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	623b      	str	r3, [r7, #32]
   return(result);
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30
 80079ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a1e:	61fa      	str	r2, [r7, #28]
 8007a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	69b9      	ldr	r1, [r7, #24]
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e012      	b.n	8007a6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3758      	adds	r7, #88	; 0x58
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	4613      	mov	r3, r2
 8007a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a84:	e049      	b.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8c:	d045      	beq.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8e:	f7fa f9e7 	bl	8001e60 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d302      	bcc.n	8007aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e048      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d031      	beq.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d110      	bne.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2208      	movs	r2, #8
 8007aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fa42 	bl	8007f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2208      	movs	r2, #8
 8007ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e029      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af4:	d111      	bne.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 fa28 	bl	8007f56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e00f      	b.n	8007b3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69da      	ldr	r2, [r3, #28]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4013      	ands	r3, r2
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	bf0c      	ite	eq
 8007b2a:	2301      	moveq	r3, #1
 8007b2c:	2300      	movne	r3, #0
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d0a6      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b0a3      	sub	sp, #140	; 0x8c
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b76:	d10e      	bne.n	8007b96 <UART_Start_Receive_IT+0x52>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d105      	bne.n	8007b8c <UART_Start_Receive_IT+0x48>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b8a:	e02d      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	22ff      	movs	r2, #255	; 0xff
 8007b90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b94:	e028      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10d      	bne.n	8007bba <UART_Start_Receive_IT+0x76>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d104      	bne.n	8007bb0 <UART_Start_Receive_IT+0x6c>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	22ff      	movs	r2, #255	; 0xff
 8007baa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bae:	e01b      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	227f      	movs	r2, #127	; 0x7f
 8007bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bb8:	e016      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bc2:	d10d      	bne.n	8007be0 <UART_Start_Receive_IT+0x9c>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <UART_Start_Receive_IT+0x92>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	227f      	movs	r2, #127	; 0x7f
 8007bd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bd4:	e008      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	223f      	movs	r2, #63	; 0x3f
 8007bda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bde:	e003      	b.n	8007be8 <UART_Start_Receive_IT+0xa4>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2222      	movs	r2, #34	; 0x22
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c02:	e853 3f00 	ldrex	r3, [r3]
 8007c06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c0a:	f043 0301 	orr.w	r3, r3, #1
 8007c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c1c:	673a      	str	r2, [r7, #112]	; 0x70
 8007c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007c22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e3      	bne.n	8007bf8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c38:	d14f      	bne.n	8007cda <UART_Start_Receive_IT+0x196>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c40:	88fa      	ldrh	r2, [r7, #6]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d349      	bcc.n	8007cda <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4e:	d107      	bne.n	8007c60 <UART_Start_Receive_IT+0x11c>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a47      	ldr	r2, [pc, #284]	; (8007d78 <UART_Start_Receive_IT+0x234>)
 8007c5c:	675a      	str	r2, [r3, #116]	; 0x74
 8007c5e:	e002      	b.n	8007c66 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a46      	ldr	r2, [pc, #280]	; (8007d7c <UART_Start_Receive_IT+0x238>)
 8007c64:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01a      	beq.n	8007ca4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c92:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e4      	bne.n	8007c6e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007cc4:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_Start_Receive_IT+0x160>
 8007cd8:	e046      	b.n	8007d68 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce2:	d107      	bne.n	8007cf4 <UART_Start_Receive_IT+0x1b0>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a24      	ldr	r2, [pc, #144]	; (8007d80 <UART_Start_Receive_IT+0x23c>)
 8007cf0:	675a      	str	r2, [r3, #116]	; 0x74
 8007cf2:	e002      	b.n	8007cfa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a23      	ldr	r2, [pc, #140]	; (8007d84 <UART_Start_Receive_IT+0x240>)
 8007cf8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d019      	beq.n	8007d36 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d16:	677b      	str	r3, [r7, #116]	; 0x74
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
 8007d22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e6      	bne.n	8007d02 <UART_Start_Receive_IT+0x1be>
 8007d34:	e018      	b.n	8007d68 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	613b      	str	r3, [r7, #16]
   return(result);
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f043 0320 	orr.w	r3, r3, #32
 8007d4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d54:	623b      	str	r3, [r7, #32]
 8007d56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	69f9      	ldr	r1, [r7, #28]
 8007d5a:	6a3a      	ldr	r2, [r7, #32]
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e6      	bne.n	8007d36 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	378c      	adds	r7, #140	; 0x8c
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	08008da5 	.word	0x08008da5
 8007d7c:	08008a45 	.word	0x08008a45
 8007d80:	0800888d 	.word	0x0800888d
 8007d84:	080086d5 	.word	0x080086d5

08007d88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b096      	sub	sp, #88	; 0x58
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	88fa      	ldrh	r2, [r7, #6]
 8007da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2222      	movs	r2, #34	; 0x22
 8007db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d02d      	beq.n	8007e1a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc4:	4a40      	ldr	r2, [pc, #256]	; (8007ec8 <UART_Start_Receive_DMA+0x140>)
 8007dc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dce:	4a3f      	ldr	r2, [pc, #252]	; (8007ecc <UART_Start_Receive_DMA+0x144>)
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dd8:	4a3d      	ldr	r2, [pc, #244]	; (8007ed0 <UART_Start_Receive_DMA+0x148>)
 8007dda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de2:	2200      	movs	r2, #0
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3324      	adds	r3, #36	; 0x24
 8007df2:	4619      	mov	r1, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df8:	461a      	mov	r2, r3
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	f7fb fcaa 	bl	8003754 <HAL_DMA_Start_IT>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2210      	movs	r2, #16
 8007e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e051      	b.n	8007ebe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d018      	beq.n	8007e54 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e36:	657b      	str	r3, [r7, #84]	; 0x54
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e42:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e6      	bne.n	8007e22 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e74:	637a      	str	r2, [r7, #52]	; 0x34
 8007e76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e7c:	e841 2300 	strex	r3, r2, [r1]
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e5      	bne.n	8007e54 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	613b      	str	r3, [r7, #16]
   return(result);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ea8:	623a      	str	r2, [r7, #32]
 8007eaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	69f9      	ldr	r1, [r7, #28]
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e5      	bne.n	8007e88 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3758      	adds	r7, #88	; 0x58
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	080080d9 	.word	0x080080d9
 8007ecc:	08008205 	.word	0x08008205
 8007ed0:	08008243 	.word	0x08008243

08007ed4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b08f      	sub	sp, #60	; 0x3c
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007efc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e6      	bne.n	8007edc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3308      	adds	r3, #8
 8007f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007f24:	633b      	str	r3, [r7, #48]	; 0x30
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f2e:	61ba      	str	r2, [r7, #24]
 8007f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6979      	ldr	r1, [r7, #20]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e5      	bne.n	8007f0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007f4a:	bf00      	nop
 8007f4c:	373c      	adds	r7, #60	; 0x3c
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b095      	sub	sp, #84	; 0x54
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3308      	adds	r3, #8
 8007f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	f023 0301 	bic.w	r3, r3, #1
 8007faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e3      	bne.n	8007f90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d118      	bne.n	8008002 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f023 0310 	bic.w	r3, r3, #16
 8007fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6979      	ldr	r1, [r7, #20]
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e6      	bne.n	8007fd0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008016:	bf00      	nop
 8008018:	3754      	adds	r7, #84	; 0x54
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b090      	sub	sp, #64	; 0x40
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	d137      	bne.n	80080ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800803e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008040:	2200      	movs	r2, #0
 8008042:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3308      	adds	r3, #8
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	623b      	str	r3, [r7, #32]
   return(result);
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805c:	63bb      	str	r3, [r7, #56]	; 0x38
 800805e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3308      	adds	r3, #8
 8008064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008066:	633a      	str	r2, [r7, #48]	; 0x30
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800806c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	60fb      	str	r3, [r7, #12]
   return(result);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808e:	637b      	str	r3, [r7, #52]	; 0x34
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	461a      	mov	r2, r3
 8008096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	69b9      	ldr	r1, [r7, #24]
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	617b      	str	r3, [r7, #20]
   return(result);
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e6      	bne.n	800807a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080ac:	e002      	b.n	80080b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80080ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80080b0:	f006 fca8 	bl	800ea04 <HAL_UART_TxCpltCallback>
}
 80080b4:	bf00      	nop
 80080b6:	3740      	adds	r7, #64	; 0x40
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff f882 	bl	80071d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b09c      	sub	sp, #112	; 0x70
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d171      	bne.n	80081d8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80080f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800810a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800810c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008110:	66bb      	str	r3, [r7, #104]	; 0x68
 8008112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800811a:	65bb      	str	r3, [r7, #88]	; 0x58
 800811c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e6      	bne.n	80080fc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800812e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008140:	f023 0301 	bic.w	r3, r3, #1
 8008144:	667b      	str	r3, [r7, #100]	; 0x64
 8008146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800814e:	647a      	str	r2, [r7, #68]	; 0x44
 8008150:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800815c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e5      	bne.n	800812e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	623b      	str	r3, [r7, #32]
   return(result);
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008178:	663b      	str	r3, [r7, #96]	; 0x60
 800817a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3308      	adds	r3, #8
 8008180:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008182:	633a      	str	r2, [r7, #48]	; 0x30
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e5      	bne.n	8008162 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800819e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d118      	bne.n	80081d8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0310 	bic.w	r3, r3, #16
 80081ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	69b9      	ldr	r1, [r7, #24]
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	617b      	str	r3, [r7, #20]
   return(result);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e6      	bne.n	80081a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081da:	2200      	movs	r2, #0
 80081dc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d107      	bne.n	80081f6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081ec:	4619      	mov	r1, r3
 80081ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80081f0:	f006 fd0a 	bl	800ec08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081f4:	e002      	b.n	80081fc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80081f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80081f8:	f006 fc42 	bl	800ea80 <HAL_UART_RxCpltCallback>
}
 80081fc:	bf00      	nop
 80081fe:	3770      	adds	r7, #112	; 0x70
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008210:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821c:	2b01      	cmp	r3, #1
 800821e:	d109      	bne.n	8008234 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	b29b      	uxth	r3, r3
 800822a:	4619      	mov	r1, r3
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f006 fceb 	bl	800ec08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008232:	e002      	b.n	800823a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7fe ffd7 	bl	80071e8 <HAL_UART_RxHalfCpltCallback>
}
 800823a:	bf00      	nop
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b086      	sub	sp, #24
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008256:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826a:	2b80      	cmp	r3, #128	; 0x80
 800826c:	d109      	bne.n	8008282 <UART_DMAError+0x40>
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b21      	cmp	r3, #33	; 0x21
 8008272:	d106      	bne.n	8008282 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2200      	movs	r2, #0
 8008278:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800827c:	6978      	ldr	r0, [r7, #20]
 800827e:	f7ff fe29 	bl	8007ed4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828c:	2b40      	cmp	r3, #64	; 0x40
 800828e:	d109      	bne.n	80082a4 <UART_DMAError+0x62>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b22      	cmp	r3, #34	; 0x22
 8008294:	d106      	bne.n	80082a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2200      	movs	r2, #0
 800829a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800829e:	6978      	ldr	r0, [r7, #20]
 80082a0:	f7ff fe59 	bl	8007f56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	f043 0210 	orr.w	r2, r3, #16
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082b4:	6978      	ldr	r0, [r7, #20]
 80082b6:	f006 fc4d 	bl	800eb54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ba:	bf00      	nop
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f006 fc37 	bl	800eb54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	220f      	movs	r2, #15
 800830a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0208 	orr.w	r2, r2, #8
 800831a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2220      	movs	r2, #32
 8008320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f7fe ff66 	bl	80071fc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008330:	bf00      	nop
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b08f      	sub	sp, #60	; 0x3c
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008346:	2b21      	cmp	r3, #33	; 0x21
 8008348:	d14c      	bne.n	80083e4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d132      	bne.n	80083bc <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	61fb      	str	r3, [r7, #28]
   return(result);
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800836a:	637b      	str	r3, [r7, #52]	; 0x34
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008376:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800837a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e6      	bne.n	8008356 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	60bb      	str	r3, [r7, #8]
   return(result);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839c:	633b      	str	r3, [r7, #48]	; 0x30
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	61bb      	str	r3, [r7, #24]
 80083a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6979      	ldr	r1, [r7, #20]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	613b      	str	r3, [r7, #16]
   return(result);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e6      	bne.n	8008388 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80083ba:	e013      	b.n	80083e4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80083e4:	bf00      	nop
 80083e6:	373c      	adds	r7, #60	; 0x3c
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b091      	sub	sp, #68	; 0x44
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fe:	2b21      	cmp	r3, #33	; 0x21
 8008400:	d151      	bne.n	80084a6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008408:	b29b      	uxth	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d132      	bne.n	8008474 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	623b      	str	r3, [r7, #32]
   return(result);
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008422:	63bb      	str	r3, [r7, #56]	; 0x38
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	633b      	str	r3, [r7, #48]	; 0x30
 800842e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e6      	bne.n	800840e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	60fb      	str	r3, [r7, #12]
   return(result);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008454:	637b      	str	r3, [r7, #52]	; 0x34
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	69b9      	ldr	r1, [r7, #24]
 8008464:	69fa      	ldr	r2, [r7, #28]
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	617b      	str	r3, [r7, #20]
   return(result);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e6      	bne.n	8008440 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008472:	e018      	b.n	80084a6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800847a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008488:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848e:	1c9a      	adds	r2, r3, #2
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80084a6:	bf00      	nop
 80084a8:	3744      	adds	r7, #68	; 0x44
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b091      	sub	sp, #68	; 0x44
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c0:	2b21      	cmp	r3, #33	; 0x21
 80084c2:	d160      	bne.n	8008586 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084cc:	e057      	b.n	800857e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d133      	bne.n	8008542 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	623b      	str	r3, [r7, #32]
   return(result);
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80084f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3308      	adds	r3, #8
 80084f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084fa:	633a      	str	r2, [r7, #48]	; 0x30
 80084fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e5      	bne.n	80084da <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	60fb      	str	r3, [r7, #12]
   return(result);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852c:	61fb      	str	r3, [r7, #28]
 800852e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	69b9      	ldr	r1, [r7, #24]
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	617b      	str	r3, [r7, #20]
   return(result);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e6      	bne.n	800850e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008540:	e021      	b.n	8008586 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854c:	2b00      	cmp	r3, #0
 800854e:	d013      	beq.n	8008578 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008578:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800857a:	3b01      	subs	r3, #1
 800857c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800857e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1a4      	bne.n	80084ce <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008584:	e7ff      	b.n	8008586 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008586:	bf00      	nop
 8008588:	3744      	adds	r7, #68	; 0x44
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008592:	b480      	push	{r7}
 8008594:	b091      	sub	sp, #68	; 0x44
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a0:	2b21      	cmp	r3, #33	; 0x21
 80085a2:	d165      	bne.n	8008670 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80085ac:	e05c      	b.n	8008668 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d133      	bne.n	8008622 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3308      	adds	r3, #8
 80085c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085d0:	637b      	str	r3, [r7, #52]	; 0x34
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e5      	bne.n	80085ba <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008602:	633b      	str	r3, [r7, #48]	; 0x30
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	61bb      	str	r3, [r7, #24]
 800860e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	6979      	ldr	r1, [r7, #20]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	613b      	str	r3, [r7, #16]
   return(result);
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e6      	bne.n	80085ee <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008620:	e026      	b.n	8008670 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800862c:	2b00      	cmp	r3, #0
 800862e:	d018      	beq.n	8008662 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008634:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008644:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800864a:	1c9a      	adds	r2, r3, #2
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008656:	b29b      	uxth	r3, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008662:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008664:	3b01      	subs	r3, #1
 8008666:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008668:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800866a:	2b00      	cmp	r3, #0
 800866c:	d19f      	bne.n	80085ae <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800866e:	e7ff      	b.n	8008670 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008670:	bf00      	nop
 8008672:	3744      	adds	r7, #68	; 0x44
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	60bb      	str	r3, [r7, #8]
   return(result);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	61bb      	str	r3, [r7, #24]
 80086a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	6979      	ldr	r1, [r7, #20]
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	613b      	str	r3, [r7, #16]
   return(result);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1e6      	bne.n	8008684 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f006 f99d 	bl	800ea04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ca:	bf00      	nop
 80086cc:	3720      	adds	r7, #32
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b09c      	sub	sp, #112	; 0x70
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ec:	2b22      	cmp	r3, #34	; 0x22
 80086ee:	f040 80be 	bne.w	800886e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008700:	b2d9      	uxtb	r1, r3
 8008702:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008706:	b2da      	uxtb	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870c:	400a      	ands	r2, r1
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	f040 80a1 	bne.w	800887e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800874a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800874c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008750:	66bb      	str	r3, [r7, #104]	; 0x68
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800875a:	65bb      	str	r3, [r7, #88]	; 0x58
 800875c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008760:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e6      	bne.n	800873c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	667b      	str	r3, [r7, #100]	; 0x64
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3308      	adds	r3, #8
 800878c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800878e:	647a      	str	r2, [r7, #68]	; 0x44
 8008790:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800879c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e5      	bne.n	800876e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a33      	ldr	r2, [pc, #204]	; (8008888 <UART_RxISR_8BIT+0x1b4>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d01f      	beq.n	8008800 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d018      	beq.n	8008800 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	623b      	str	r3, [r7, #32]
   return(result);
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087e2:	663b      	str	r3, [r7, #96]	; 0x60
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
 80087ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e6      	bne.n	80087ce <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d12e      	bne.n	8008866 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	60fb      	str	r3, [r7, #12]
   return(result);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0310 	bic.w	r3, r3, #16
 8008822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	69b9      	ldr	r1, [r7, #24]
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	617b      	str	r3, [r7, #20]
   return(result);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e6      	bne.n	800880e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b10      	cmp	r3, #16
 800884c:	d103      	bne.n	8008856 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2210      	movs	r2, #16
 8008854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f006 f9d2 	bl	800ec08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008864:	e00b      	b.n	800887e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f006 f90a 	bl	800ea80 <HAL_UART_RxCpltCallback>
}
 800886c:	e007      	b.n	800887e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0208 	orr.w	r2, r2, #8
 800887c:	619a      	str	r2, [r3, #24]
}
 800887e:	bf00      	nop
 8008880:	3770      	adds	r7, #112	; 0x70
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	40008000 	.word	0x40008000

0800888c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b09c      	sub	sp, #112	; 0x70
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800889a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a4:	2b22      	cmp	r3, #34	; 0x22
 80088a6:	f040 80be 	bne.w	8008a26 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80088ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80088be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80088c2:	4013      	ands	r3, r2
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ce:	1c9a      	adds	r2, r3, #2
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f040 80a1 	bne.w	8008a36 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008908:	667b      	str	r3, [r7, #100]	; 0x64
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008912:	657b      	str	r3, [r7, #84]	; 0x54
 8008914:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e6      	bne.n	80088f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3308      	adds	r3, #8
 800892c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	f023 0301 	bic.w	r3, r3, #1
 800893c:	663b      	str	r3, [r7, #96]	; 0x60
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008946:	643a      	str	r2, [r7, #64]	; 0x40
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800894c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e5      	bne.n	8008926 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2220      	movs	r2, #32
 800895e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a33      	ldr	r2, [pc, #204]	; (8008a40 <UART_RxISR_16BIT+0x1b4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d01f      	beq.n	80089b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d018      	beq.n	80089b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	e853 3f00 	ldrex	r3, [r3]
 8008992:	61fb      	str	r3, [r7, #28]
   return(result);
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800899a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e6      	bne.n	8008986 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d12e      	bne.n	8008a1e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	e853 3f00 	ldrex	r3, [r3]
 80089d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f023 0310 	bic.w	r3, r3, #16
 80089da:	65bb      	str	r3, [r7, #88]	; 0x58
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e8:	6979      	ldr	r1, [r7, #20]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	613b      	str	r3, [r7, #16]
   return(result);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e6      	bne.n	80089c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b10      	cmp	r3, #16
 8008a04:	d103      	bne.n	8008a0e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2210      	movs	r2, #16
 8008a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f006 f8f6 	bl	800ec08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a1c:	e00b      	b.n	8008a36 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f006 f82e 	bl	800ea80 <HAL_UART_RxCpltCallback>
}
 8008a24:	e007      	b.n	8008a36 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	699a      	ldr	r2, [r3, #24]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f042 0208 	orr.w	r2, r2, #8
 8008a34:	619a      	str	r2, [r3, #24]
}
 8008a36:	bf00      	nop
 8008a38:	3770      	adds	r7, #112	; 0x70
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	40008000 	.word	0x40008000

08008a44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b0ac      	sub	sp, #176	; 0xb0
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a52:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a7a:	2b22      	cmp	r3, #34	; 0x22
 8008a7c:	f040 8182 	bne.w	8008d84 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a86:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a8a:	e125      	b.n	8008cd8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a96:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008a9a:	b2d9      	uxtb	r1, r3
 8008a9c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa6:	400a      	ands	r2, r1
 8008aa8:	b2d2      	uxtb	r2, r2
 8008aaa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d053      	beq.n	8008b86 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <UART_RxISR_8BIT_FIFOEN+0xca>
 8008aea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2201      	movs	r2, #1
 8008afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b04:	f043 0201 	orr.w	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d011      	beq.n	8008b3e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b34:	f043 0204 	orr.w	r2, r3, #4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d011      	beq.n	8008b6e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b64:	f043 0202 	orr.w	r2, r3, #2
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d006      	beq.n	8008b86 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f005 ffeb 	bl	800eb54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 80a2 	bne.w	8008cd8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bb8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008bbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e4      	bne.n	8008b94 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008be0:	f023 0301 	bic.w	r3, r3, #1
 8008be4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3308      	adds	r3, #8
 8008bee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bf2:	66ba      	str	r2, [r7, #104]	; 0x68
 8008bf4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008bf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e1      	bne.n	8008bca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a5f      	ldr	r2, [pc, #380]	; (8008d9c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d021      	beq.n	8008c68 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01a      	beq.n	8008c68 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c54:	657b      	str	r3, [r7, #84]	; 0x54
 8008c56:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e4      	bne.n	8008c32 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d130      	bne.n	8008cd2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	f023 0310 	bic.w	r3, r3, #16
 8008c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c98:	643b      	str	r3, [r7, #64]	; 0x40
 8008c9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e4      	bne.n	8008c76 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d103      	bne.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2210      	movs	r2, #16
 8008cc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f005 ff9c 	bl	800ec08 <HAL_UARTEx_RxEventCallback>
 8008cd0:	e002      	b.n	8008cd8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f005 fed4 	bl	800ea80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cd8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d006      	beq.n	8008cee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f47f aecf 	bne.w	8008a8c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cf4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d049      	beq.n	8008d94 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d242      	bcs.n	8008d94 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3308      	adds	r3, #8
 8008d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e3      	bne.n	8008d0e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a15      	ldr	r2, [pc, #84]	; (8008da0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008d4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f043 0320 	orr.w	r3, r3, #32
 8008d60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d6e:	61bb      	str	r3, [r7, #24]
 8008d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6979      	ldr	r1, [r7, #20]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e4      	bne.n	8008d4c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d82:	e007      	b.n	8008d94 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0208 	orr.w	r2, r2, #8
 8008d92:	619a      	str	r2, [r3, #24]
}
 8008d94:	bf00      	nop
 8008d96:	37b0      	adds	r7, #176	; 0xb0
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	40008000 	.word	0x40008000
 8008da0:	080086d5 	.word	0x080086d5

08008da4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b0ae      	sub	sp, #184	; 0xb8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008db2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dda:	2b22      	cmp	r3, #34	; 0x22
 8008ddc:	f040 8186 	bne.w	80090ec <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008de6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dea:	e129      	b.n	8009040 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008dfe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008e02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008e06:	4013      	ands	r3, r2
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e14:	1c9a      	adds	r2, r3, #2
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d053      	beq.n	8008eea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d011      	beq.n	8008e72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00b      	beq.n	8008e72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e68:	f043 0201 	orr.w	r2, r3, #1
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d011      	beq.n	8008ea2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00b      	beq.n	8008ea2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e98:	f043 0204 	orr.w	r2, r3, #4
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d011      	beq.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00b      	beq.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec8:	f043 0202 	orr.w	r2, r3, #2
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d006      	beq.n	8008eea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f005 fe39 	bl	800eb54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f040 80a4 	bne.w	8009040 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f1e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e2      	bne.n	8008ef8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f48:	f023 0301 	bic.w	r3, r3, #1
 8008f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3308      	adds	r3, #8
 8008f56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e1      	bne.n	8008f32 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a5f      	ldr	r2, [pc, #380]	; (8009104 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d021      	beq.n	8008fd0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d01a      	beq.n	8008fd0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008faa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e4      	bne.n	8008f9a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d130      	bne.n	800903a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	f023 0310 	bic.w	r3, r3, #16
 8008ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009000:	647b      	str	r3, [r7, #68]	; 0x44
 8009002:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e4      	bne.n	8008fde <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f003 0310 	and.w	r3, r3, #16
 800901e:	2b10      	cmp	r3, #16
 8009020:	d103      	bne.n	800902a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2210      	movs	r2, #16
 8009028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f005 fde8 	bl	800ec08 <HAL_UARTEx_RxEventCallback>
 8009038:	e002      	b.n	8009040 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f005 fd20 	bl	800ea80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009040:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009044:	2b00      	cmp	r3, #0
 8009046:	d006      	beq.n	8009056 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b00      	cmp	r3, #0
 8009052:	f47f aecb 	bne.w	8008dec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800905c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009060:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009064:	2b00      	cmp	r3, #0
 8009066:	d049      	beq.n	80090fc <UART_RxISR_16BIT_FIFOEN+0x358>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800906e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009072:	429a      	cmp	r2, r3
 8009074:	d242      	bcs.n	80090fc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3308      	adds	r3, #8
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	623b      	str	r3, [r7, #32]
   return(result);
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800908c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3308      	adds	r3, #8
 8009096:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800909a:	633a      	str	r2, [r7, #48]	; 0x30
 800909c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e3      	bne.n	8009076 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a15      	ldr	r2, [pc, #84]	; (8009108 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80090b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f043 0320 	orr.w	r3, r3, #32
 80090c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	461a      	mov	r2, r3
 80090d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090d6:	61fb      	str	r3, [r7, #28]
 80090d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	69b9      	ldr	r1, [r7, #24]
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	617b      	str	r3, [r7, #20]
   return(result);
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e4      	bne.n	80090b4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090ea:	e007      	b.n	80090fc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0208 	orr.w	r2, r2, #8
 80090fa:	619a      	str	r2, [r3, #24]
}
 80090fc:	bf00      	nop
 80090fe:	37b8      	adds	r7, #184	; 0xb8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	40008000 	.word	0x40008000
 8009108:	0800888d 	.word	0x0800888d

0800910c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_UARTEx_DisableFifoMode+0x16>
 800915a:	2302      	movs	r3, #2
 800915c:	e027      	b.n	80091ae <HAL_UARTEx_DisableFifoMode+0x66>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2224      	movs	r2, #36	; 0x24
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800918c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2220      	movs	r2, #32
 80091a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d101      	bne.n	80091d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091ce:	2302      	movs	r3, #2
 80091d0:	e02d      	b.n	800922e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2224      	movs	r2, #36	; 0x24
 80091de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 0201 	bic.w	r2, r2, #1
 80091f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f8a4 	bl	800935c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2220      	movs	r2, #32
 8009220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800924a:	2302      	movs	r3, #2
 800924c:	e02d      	b.n	80092aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2224      	movs	r2, #36	; 0x24
 800925a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 0201 	bic.w	r2, r2, #1
 8009274:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	430a      	orrs	r2, r1
 8009288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f866 	bl	800935c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b08c      	sub	sp, #48	; 0x30
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	4613      	mov	r3, r2
 80092be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092c6:	2b20      	cmp	r3, #32
 80092c8:	d142      	bne.n	8009350 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80092d0:	88fb      	ldrh	r3, [r7, #6]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e03b      	b.n	8009352 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	461a      	mov	r2, r3
 80092ea:	68b9      	ldr	r1, [r7, #8]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7fe fd4b 	bl	8007d88 <UART_Start_Receive_DMA>
 80092f2:	4603      	mov	r3, r0
 80092f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80092f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d124      	bne.n	800934a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009304:	2b01      	cmp	r3, #1
 8009306:	d11d      	bne.n	8009344 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2210      	movs	r2, #16
 800930e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	617b      	str	r3, [r7, #20]
   return(result);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f043 0310 	orr.w	r3, r3, #16
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	627b      	str	r3, [r7, #36]	; 0x24
 8009330:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6a39      	ldr	r1, [r7, #32]
 8009334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	61fb      	str	r3, [r7, #28]
   return(result);
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e6      	bne.n	8009310 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009342:	e002      	b.n	800934a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800934a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800934e:	e000      	b.n	8009352 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009350:	2302      	movs	r3, #2
  }
}
 8009352:	4618      	mov	r0, r3
 8009354:	3730      	adds	r7, #48	; 0x30
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009368:	2b00      	cmp	r3, #0
 800936a:	d108      	bne.n	800937e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800937c:	e031      	b.n	80093e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800937e:	2308      	movs	r3, #8
 8009380:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009382:	2308      	movs	r3, #8
 8009384:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	0e5b      	lsrs	r3, r3, #25
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	0f5b      	lsrs	r3, r3, #29
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	7b3a      	ldrb	r2, [r7, #12]
 80093aa:	4911      	ldr	r1, [pc, #68]	; (80093f0 <UARTEx_SetNbDataToProcess+0x94>)
 80093ac:	5c8a      	ldrb	r2, [r1, r2]
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093b2:	7b3a      	ldrb	r2, [r7, #12]
 80093b4:	490f      	ldr	r1, [pc, #60]	; (80093f4 <UARTEx_SetNbDataToProcess+0x98>)
 80093b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80093bc:	b29a      	uxth	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	7b7a      	ldrb	r2, [r7, #13]
 80093c8:	4909      	ldr	r1, [pc, #36]	; (80093f0 <UARTEx_SetNbDataToProcess+0x94>)
 80093ca:	5c8a      	ldrb	r2, [r1, r2]
 80093cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093d0:	7b7a      	ldrb	r2, [r7, #13]
 80093d2:	4908      	ldr	r1, [pc, #32]	; (80093f4 <UARTEx_SetNbDataToProcess+0x98>)
 80093d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80093da:	b29a      	uxth	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	0800efd4 	.word	0x0800efd4
 80093f4:	0800efdc 	.word	0x0800efdc

080093f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009400:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009404:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800940c:	b29a      	uxth	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	b29b      	uxth	r3, r3
 8009412:	43db      	mvns	r3, r3
 8009414:	b29b      	uxth	r3, r3
 8009416:	4013      	ands	r3, r2
 8009418:	b29a      	uxth	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800942e:	b084      	sub	sp, #16
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	f107 0014 	add.w	r0, r7, #20
 800943c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	b004      	add	sp, #16
 800946e:	4770      	bx	lr

08009470 <__NVIC_SetPriority>:
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	6039      	str	r1, [r7, #0]
 800947a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800947c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009480:	2b00      	cmp	r3, #0
 8009482:	db0a      	blt.n	800949a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	490c      	ldr	r1, [pc, #48]	; (80094bc <__NVIC_SetPriority+0x4c>)
 800948a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800948e:	0112      	lsls	r2, r2, #4
 8009490:	b2d2      	uxtb	r2, r2
 8009492:	440b      	add	r3, r1
 8009494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009498:	e00a      	b.n	80094b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	b2da      	uxtb	r2, r3
 800949e:	4908      	ldr	r1, [pc, #32]	; (80094c0 <__NVIC_SetPriority+0x50>)
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	f003 030f 	and.w	r3, r3, #15
 80094a6:	3b04      	subs	r3, #4
 80094a8:	0112      	lsls	r2, r2, #4
 80094aa:	b2d2      	uxtb	r2, r2
 80094ac:	440b      	add	r3, r1
 80094ae:	761a      	strb	r2, [r3, #24]
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	e000e100 	.word	0xe000e100
 80094c0:	e000ed00 	.word	0xe000ed00

080094c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80094c8:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <SysTick_Handler+0x1c>)
 80094ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80094cc:	f002 fa42 	bl	800b954 <xTaskGetSchedulerState>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d001      	beq.n	80094da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80094d6:	f003 fc17 	bl	800cd08 <xPortSysTickHandler>
  }
}
 80094da:	bf00      	nop
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	e000e010 	.word	0xe000e010

080094e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80094e8:	2100      	movs	r1, #0
 80094ea:	f06f 0004 	mvn.w	r0, #4
 80094ee:	f7ff ffbf 	bl	8009470 <__NVIC_SetPriority>
#endif
}
 80094f2:	bf00      	nop
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094fe:	f3ef 8305 	mrs	r3, IPSR
 8009502:	603b      	str	r3, [r7, #0]
  return(result);
 8009504:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800950a:	f06f 0305 	mvn.w	r3, #5
 800950e:	607b      	str	r3, [r7, #4]
 8009510:	e00c      	b.n	800952c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009512:	4b0a      	ldr	r3, [pc, #40]	; (800953c <osKernelInitialize+0x44>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d105      	bne.n	8009526 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800951a:	4b08      	ldr	r3, [pc, #32]	; (800953c <osKernelInitialize+0x44>)
 800951c:	2201      	movs	r2, #1
 800951e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009520:	2300      	movs	r3, #0
 8009522:	607b      	str	r3, [r7, #4]
 8009524:	e002      	b.n	800952c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009526:	f04f 33ff 	mov.w	r3, #4294967295
 800952a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800952c:	687b      	ldr	r3, [r7, #4]
}
 800952e:	4618      	mov	r0, r3
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000810 	.word	0x20000810

08009540 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009546:	f3ef 8305 	mrs	r3, IPSR
 800954a:	603b      	str	r3, [r7, #0]
  return(result);
 800954c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009552:	f06f 0305 	mvn.w	r3, #5
 8009556:	607b      	str	r3, [r7, #4]
 8009558:	e010      	b.n	800957c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800955a:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <osKernelStart+0x48>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d109      	bne.n	8009576 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009562:	f7ff ffbf 	bl	80094e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009566:	4b08      	ldr	r3, [pc, #32]	; (8009588 <osKernelStart+0x48>)
 8009568:	2202      	movs	r2, #2
 800956a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800956c:	f001 fd98 	bl	800b0a0 <vTaskStartScheduler>
      stat = osOK;
 8009570:	2300      	movs	r3, #0
 8009572:	607b      	str	r3, [r7, #4]
 8009574:	e002      	b.n	800957c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009576:	f04f 33ff 	mov.w	r3, #4294967295
 800957a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800957c:	687b      	ldr	r3, [r7, #4]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000810 	.word	0x20000810

0800958c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800958c:	b580      	push	{r7, lr}
 800958e:	b08e      	sub	sp, #56	; 0x38
 8009590:	af04      	add	r7, sp, #16
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009598:	2300      	movs	r3, #0
 800959a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800959c:	f3ef 8305 	mrs	r3, IPSR
 80095a0:	617b      	str	r3, [r7, #20]
  return(result);
 80095a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d17e      	bne.n	80096a6 <osThreadNew+0x11a>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d07b      	beq.n	80096a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80095ae:	2380      	movs	r3, #128	; 0x80
 80095b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80095b2:	2318      	movs	r3, #24
 80095b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80095b6:	2300      	movs	r3, #0
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295
 80095be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d045      	beq.n	8009652 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <osThreadNew+0x48>
        name = attr->name;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d008      	beq.n	80095fa <osThreadNew+0x6e>
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2b38      	cmp	r3, #56	; 0x38
 80095ec:	d805      	bhi.n	80095fa <osThreadNew+0x6e>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <osThreadNew+0x72>
        return (NULL);
 80095fa:	2300      	movs	r3, #0
 80095fc:	e054      	b.n	80096a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	089b      	lsrs	r3, r3, #2
 800960c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00e      	beq.n	8009634 <osThreadNew+0xa8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	2b5b      	cmp	r3, #91	; 0x5b
 800961c:	d90a      	bls.n	8009634 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009622:	2b00      	cmp	r3, #0
 8009624:	d006      	beq.n	8009634 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <osThreadNew+0xa8>
        mem = 1;
 800962e:	2301      	movs	r3, #1
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	e010      	b.n	8009656 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10c      	bne.n	8009656 <osThreadNew+0xca>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d108      	bne.n	8009656 <osThreadNew+0xca>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d104      	bne.n	8009656 <osThreadNew+0xca>
          mem = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	e001      	b.n	8009656 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d110      	bne.n	800967e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009664:	9202      	str	r2, [sp, #8]
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6a3a      	ldr	r2, [r7, #32]
 8009670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f001 fb3e 	bl	800acf4 <xTaskCreateStatic>
 8009678:	4603      	mov	r3, r0
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	e013      	b.n	80096a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d110      	bne.n	80096a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	b29a      	uxth	r2, r3
 8009688:	f107 0310 	add.w	r3, r7, #16
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f001 fb89 	bl	800adae <xTaskCreate>
 800969c:	4603      	mov	r3, r0
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d001      	beq.n	80096a6 <osThreadNew+0x11a>
            hTask = NULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80096a6:	693b      	ldr	r3, [r7, #16]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3728      	adds	r7, #40	; 0x28
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <osThreadFlagsSet+0x1a>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	da03      	bge.n	80096d2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80096ca:	f06f 0303 	mvn.w	r3, #3
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e035      	b.n	800973e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80096d2:	f04f 33ff 	mov.w	r3, #4294967295
 80096d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096d8:	f3ef 8305 	mrs	r3, IPSR
 80096dc:	613b      	str	r3, [r7, #16]
  return(result);
 80096de:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01f      	beq.n	8009724 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80096e4:	2300      	movs	r3, #0
 80096e6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80096e8:	f107 0308 	add.w	r3, r7, #8
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	2300      	movs	r3, #0
 80096f0:	2201      	movs	r2, #1
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6978      	ldr	r0, [r7, #20]
 80096f6:	f002 fc11 	bl	800bf1c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80096fa:	f107 030c 	add.w	r3, r7, #12
 80096fe:	2200      	movs	r2, #0
 8009700:	9200      	str	r2, [sp, #0]
 8009702:	2200      	movs	r2, #0
 8009704:	2100      	movs	r1, #0
 8009706:	6978      	ldr	r0, [r7, #20]
 8009708:	f002 fc08 	bl	800bf1c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d015      	beq.n	800973e <osThreadFlagsSet+0x8e>
 8009712:	4b0d      	ldr	r3, [pc, #52]	; (8009748 <osThreadFlagsSet+0x98>)
 8009714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	e00c      	b.n	800973e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009724:	2300      	movs	r3, #0
 8009726:	2201      	movs	r2, #1
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6978      	ldr	r0, [r7, #20]
 800972c:	f002 fb3e 	bl	800bdac <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009730:	f107 030c 	add.w	r3, r7, #12
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	6978      	ldr	r0, [r7, #20]
 800973a:	f002 fb37 	bl	800bdac <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800973e:	68fb      	ldr	r3, [r7, #12]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	e000ed04 	.word	0xe000ed04

0800974c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800974c:	b580      	push	{r7, lr}
 800974e:	b08c      	sub	sp, #48	; 0x30
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009758:	f3ef 8305 	mrs	r3, IPSR
 800975c:	617b      	str	r3, [r7, #20]
  return(result);
 800975e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009764:	f06f 0305 	mvn.w	r3, #5
 8009768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800976a:	e06b      	b.n	8009844 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	da03      	bge.n	800977a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009772:	f06f 0303 	mvn.w	r3, #3
 8009776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009778:	e064      	b.n	8009844 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	62bb      	str	r3, [r7, #40]	; 0x28
 8009788:	e001      	b.n	800978e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8009796:	f001 fd95 	bl	800b2c4 <xTaskGetTickCount>
 800979a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800979c:	f107 0210 	add.w	r2, r7, #16
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097a4:	2000      	movs	r0, #0
 80097a6:	f002 faa7 	bl	800bcf8 <xTaskNotifyWait>
 80097aa:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d137      	bne.n	8009822 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80097b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4013      	ands	r3, r2
 80097b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097be:	4313      	orrs	r3, r2
 80097c0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00c      	beq.n	80097e6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	4013      	ands	r3, r2
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d032      	beq.n	800983e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10f      	bne.n	80097fe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80097de:	f06f 0302 	mvn.w	r3, #2
 80097e2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80097e4:	e02e      	b.n	8009844 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	4013      	ands	r3, r2
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d128      	bne.n	8009842 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d103      	bne.n	80097fe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80097f6:	f06f 0302 	mvn.w	r3, #2
 80097fa:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80097fc:	e022      	b.n	8009844 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80097fe:	f001 fd61 	bl	800b2c4 <xTaskGetTickCount>
 8009802:	4602      	mov	r2, r0
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	429a      	cmp	r2, r3
 8009810:	d902      	bls.n	8009818 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
 8009816:	e00e      	b.n	8009836 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	627b      	str	r3, [r7, #36]	; 0x24
 8009820:	e009      	b.n	8009836 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d103      	bne.n	8009830 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009828:	f06f 0302 	mvn.w	r3, #2
 800982c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800982e:	e002      	b.n	8009836 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009830:	f06f 0301 	mvn.w	r3, #1
 8009834:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1af      	bne.n	800979c <osThreadFlagsWait+0x50>
 800983c:	e002      	b.n	8009844 <osThreadFlagsWait+0xf8>
            break;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <osThreadFlagsWait+0xf8>
            break;
 8009842:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009846:	4618      	mov	r0, r3
 8009848:	3730      	adds	r7, #48	; 0x30
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009856:	f3ef 8305 	mrs	r3, IPSR
 800985a:	60bb      	str	r3, [r7, #8]
  return(result);
 800985c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <osDelay+0x1c>
    stat = osErrorISR;
 8009862:	f06f 0305 	mvn.w	r3, #5
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	e007      	b.n	800987a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f001 fbdf 	bl	800b038 <vTaskDelay>
    }
  }

  return (stat);
 800987a:	68fb      	ldr	r3, [r7, #12]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f003 f85d 	bl	800c94c <pvTimerGetTimerID>
 8009892:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d005      	beq.n	80098a6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	6852      	ldr	r2, [r2, #4]
 80098a2:	4610      	mov	r0, r2
 80098a4:	4798      	blx	r3
  }
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08c      	sub	sp, #48	; 0x30
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	607a      	str	r2, [r7, #4]
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	460b      	mov	r3, r1
 80098be:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80098c0:	2300      	movs	r3, #0
 80098c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098c4:	f3ef 8305 	mrs	r3, IPSR
 80098c8:	613b      	str	r3, [r7, #16]
  return(result);
 80098ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d163      	bne.n	8009998 <osTimerNew+0xe8>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d060      	beq.n	8009998 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80098d6:	2008      	movs	r0, #8
 80098d8:	f003 faa6 	bl	800ce28 <pvPortMalloc>
 80098dc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d059      	beq.n	8009998 <osTimerNew+0xe8>
      callb->func = func;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80098f0:	7afb      	ldrb	r3, [r7, #11]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d102      	bne.n	80098fc <osTimerNew+0x4c>
        reload = pdFALSE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	61fb      	str	r3, [r7, #28]
 80098fa:	e001      	b.n	8009900 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80098fc:	2301      	movs	r3, #1
 80098fe:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009906:	2300      	movs	r3, #0
 8009908:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d01c      	beq.n	800994a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <osTimerNew+0x6e>
          name = attr->name;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <osTimerNew+0x84>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	2b2b      	cmp	r3, #43	; 0x2b
 800992c:	d902      	bls.n	8009934 <osTimerNew+0x84>
          mem = 1;
 800992e:	2301      	movs	r3, #1
 8009930:	61bb      	str	r3, [r7, #24]
 8009932:	e00c      	b.n	800994e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <osTimerNew+0x9e>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d104      	bne.n	800994e <osTimerNew+0x9e>
            mem = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e001      	b.n	800994e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d10c      	bne.n	800996e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	4b12      	ldr	r3, [pc, #72]	; (80099a4 <osTimerNew+0xf4>)
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	69fa      	ldr	r2, [r7, #28]
 8009962:	2101      	movs	r1, #1
 8009964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009966:	f002 fc72 	bl	800c24e <xTimerCreateStatic>
 800996a:	6238      	str	r0, [r7, #32]
 800996c:	e00b      	b.n	8009986 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d108      	bne.n	8009986 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009974:	4b0b      	ldr	r3, [pc, #44]	; (80099a4 <osTimerNew+0xf4>)
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	69fa      	ldr	r2, [r7, #28]
 800997c:	2101      	movs	r1, #1
 800997e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009980:	f002 fc44 	bl	800c20c <xTimerCreate>
 8009984:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d105      	bne.n	8009998 <osTimerNew+0xe8>
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <osTimerNew+0xe8>
        vPortFree (callb);
 8009992:	6978      	ldr	r0, [r7, #20]
 8009994:	f003 fb14 	bl	800cfc0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009998:	6a3b      	ldr	r3, [r7, #32]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3728      	adds	r7, #40	; 0x28
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	08009885 	.word	0x08009885

080099a8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af02      	add	r7, sp, #8
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b6:	f3ef 8305 	mrs	r3, IPSR
 80099ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80099bc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d003      	beq.n	80099ca <osTimerStart+0x22>
    stat = osErrorISR;
 80099c2:	f06f 0305 	mvn.w	r3, #5
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	e017      	b.n	80099fa <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <osTimerStart+0x30>
    stat = osErrorParameter;
 80099d0:	f06f 0303 	mvn.w	r3, #3
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	e010      	b.n	80099fa <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80099d8:	2300      	movs	r3, #0
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	2300      	movs	r3, #0
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	2104      	movs	r1, #4
 80099e2:	6938      	ldr	r0, [r7, #16]
 80099e4:	f002 fcac 	bl	800c340 <xTimerGenericCommand>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d102      	bne.n	80099f4 <osTimerStart+0x4c>
      stat = osOK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]
 80099f2:	e002      	b.n	80099fa <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80099f4:	f06f 0302 	mvn.w	r3, #2
 80099f8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80099fa:	697b      	ldr	r3, [r7, #20]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a10:	f3ef 8305 	mrs	r3, IPSR
 8009a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a16:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d12d      	bne.n	8009a78 <osEventFlagsNew+0x74>
    mem = -1;
 8009a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a20:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d015      	beq.n	8009a54 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d006      	beq.n	8009a3e <osEventFlagsNew+0x3a>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	2b1f      	cmp	r3, #31
 8009a36:	d902      	bls.n	8009a3e <osEventFlagsNew+0x3a>
        mem = 1;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	e00c      	b.n	8009a58 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d108      	bne.n	8009a58 <osEventFlagsNew+0x54>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d104      	bne.n	8009a58 <osEventFlagsNew+0x54>
          mem = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	e001      	b.n	8009a58 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d106      	bne.n	8009a6c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f93e 	bl	8009ce4 <xEventGroupCreateStatic>
 8009a68:	6178      	str	r0, [r7, #20]
 8009a6a:	e005      	b.n	8009a78 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d102      	bne.n	8009a78 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009a72:	f000 f96e 	bl	8009d52 <xEventGroupCreate>
 8009a76:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009a78:	697b      	ldr	r3, [r7, #20]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b08a      	sub	sp, #40	; 0x28
 8009a86:	af02      	add	r7, sp, #8
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a92:	f3ef 8305 	mrs	r3, IPSR
 8009a96:	613b      	str	r3, [r7, #16]
  return(result);
 8009a98:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d175      	bne.n	8009b8a <osSemaphoreNew+0x108>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d072      	beq.n	8009b8a <osSemaphoreNew+0x108>
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d86e      	bhi.n	8009b8a <osSemaphoreNew+0x108>
    mem = -1;
 8009aac:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d015      	beq.n	8009ae4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d006      	beq.n	8009ace <osSemaphoreNew+0x4c>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b4f      	cmp	r3, #79	; 0x4f
 8009ac6:	d902      	bls.n	8009ace <osSemaphoreNew+0x4c>
        mem = 1;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	61bb      	str	r3, [r7, #24]
 8009acc:	e00c      	b.n	8009ae8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d108      	bne.n	8009ae8 <osSemaphoreNew+0x66>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d104      	bne.n	8009ae8 <osSemaphoreNew+0x66>
          mem = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	61bb      	str	r3, [r7, #24]
 8009ae2:	e001      	b.n	8009ae8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aee:	d04c      	beq.n	8009b8a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d128      	bne.n	8009b48 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d10a      	bne.n	8009b12 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	2203      	movs	r2, #3
 8009b02:	9200      	str	r2, [sp, #0]
 8009b04:	2200      	movs	r2, #0
 8009b06:	2100      	movs	r1, #0
 8009b08:	2001      	movs	r0, #1
 8009b0a:	f000 fa59 	bl	8009fc0 <xQueueGenericCreateStatic>
 8009b0e:	61f8      	str	r0, [r7, #28]
 8009b10:	e005      	b.n	8009b1e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009b12:	2203      	movs	r2, #3
 8009b14:	2100      	movs	r1, #0
 8009b16:	2001      	movs	r0, #1
 8009b18:	f000 faca 	bl	800a0b0 <xQueueGenericCreate>
 8009b1c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d022      	beq.n	8009b6a <osSemaphoreNew+0xe8>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d01f      	beq.n	8009b6a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2100      	movs	r1, #0
 8009b30:	69f8      	ldr	r0, [r7, #28]
 8009b32:	f000 fb85 	bl	800a240 <xQueueGenericSend>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d016      	beq.n	8009b6a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009b3c:	69f8      	ldr	r0, [r7, #28]
 8009b3e:	f000 ff05 	bl	800a94c <vQueueDelete>
            hSemaphore = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	e010      	b.n	8009b6a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d108      	bne.n	8009b60 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	461a      	mov	r2, r3
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 fb07 	bl	800a16a <xQueueCreateCountingSemaphoreStatic>
 8009b5c:	61f8      	str	r0, [r7, #28]
 8009b5e:	e004      	b.n	8009b6a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 fb38 	bl	800a1d8 <xQueueCreateCountingSemaphore>
 8009b68:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00c      	beq.n	8009b8a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	e001      	b.n	8009b82 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009b82:	6979      	ldr	r1, [r7, #20]
 8009b84:	69f8      	ldr	r0, [r7, #28]
 8009b86:	f001 f82d 	bl	800abe4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009b8a:	69fb      	ldr	r3, [r7, #28]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3720      	adds	r7, #32
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ba4:	f3ef 8305 	mrs	r3, IPSR
 8009ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8009baa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d15f      	bne.n	8009c70 <osMessageQueueNew+0xdc>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d05c      	beq.n	8009c70 <osMessageQueueNew+0xdc>
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d059      	beq.n	8009c70 <osMessageQueueNew+0xdc>
    mem = -1;
 8009bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d029      	beq.n	8009c1c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d012      	beq.n	8009bf6 <osMessageQueueNew+0x62>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	2b4f      	cmp	r3, #79	; 0x4f
 8009bd6:	d90e      	bls.n	8009bf6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695a      	ldr	r2, [r3, #20]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	fb01 f303 	mul.w	r3, r1, r3
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d302      	bcc.n	8009bf6 <osMessageQueueNew+0x62>
        mem = 1;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	61bb      	str	r3, [r7, #24]
 8009bf4:	e014      	b.n	8009c20 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d110      	bne.n	8009c20 <osMessageQueueNew+0x8c>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10c      	bne.n	8009c20 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d108      	bne.n	8009c20 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d104      	bne.n	8009c20 <osMessageQueueNew+0x8c>
          mem = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61bb      	str	r3, [r7, #24]
 8009c1a:	e001      	b.n	8009c20 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d10b      	bne.n	8009c3e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	691a      	ldr	r2, [r3, #16]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	2100      	movs	r1, #0
 8009c30:	9100      	str	r1, [sp, #0]
 8009c32:	68b9      	ldr	r1, [r7, #8]
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 f9c3 	bl	8009fc0 <xQueueGenericCreateStatic>
 8009c3a:	61f8      	str	r0, [r7, #28]
 8009c3c:	e008      	b.n	8009c50 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009c44:	2200      	movs	r2, #0
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 fa31 	bl	800a0b0 <xQueueGenericCreate>
 8009c4e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00c      	beq.n	8009c70 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	617b      	str	r3, [r7, #20]
 8009c62:	e001      	b.n	8009c68 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009c68:	6979      	ldr	r1, [r7, #20]
 8009c6a:	69f8      	ldr	r0, [r7, #28]
 8009c6c:	f000 ffba 	bl	800abe4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009c70:	69fb      	ldr	r3, [r7, #28]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4a07      	ldr	r2, [pc, #28]	; (8009ca8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	4a06      	ldr	r2, [pc, #24]	; (8009cac <vApplicationGetIdleTaskMemory+0x30>)
 8009c92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2280      	movs	r2, #128	; 0x80
 8009c98:	601a      	str	r2, [r3, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	20000814 	.word	0x20000814
 8009cac:	20000870 	.word	0x20000870

08009cb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4a07      	ldr	r2, [pc, #28]	; (8009cdc <vApplicationGetTimerTaskMemory+0x2c>)
 8009cc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	4a06      	ldr	r2, [pc, #24]	; (8009ce0 <vApplicationGetTimerTaskMemory+0x30>)
 8009cc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cce:	601a      	str	r2, [r3, #0]
}
 8009cd0:	bf00      	nop
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	20000a70 	.word	0x20000a70
 8009ce0:	20000acc 	.word	0x20000acc

08009ce4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009d08:	2320      	movs	r3, #32
 8009d0a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	d00a      	beq.n	8009d28 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	60fb      	str	r3, [r7, #12]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 f822 	bl	8009d86 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2201      	movs	r2, #1
 8009d46:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009d48:	697b      	ldr	r3, [r7, #20]
	}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009d58:	2020      	movs	r0, #32
 8009d5a:	f003 f865 	bl	800ce28 <pvPortMalloc>
 8009d5e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 f808 	bl	8009d86 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009d7c:	687b      	ldr	r3, [r7, #4]
	}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f103 0208 	add.w	r2, r3, #8
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f103 0208 	add.w	r2, r3, #8
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f103 0208 	add.w	r2, r3, #8
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009dba:	bf00      	nop
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	601a      	str	r2, [r3, #0]
}
 8009e1c:	bf00      	nop
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d103      	bne.n	8009e48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	e00c      	b.n	8009e62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	e002      	b.n	8009e56 <vListInsert+0x2e>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d2f6      	bcs.n	8009e50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	601a      	str	r2, [r3, #0]
}
 8009e8e:	bf00      	nop
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6892      	ldr	r2, [r2, #8]
 8009eb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6852      	ldr	r2, [r2, #4]
 8009eba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d103      	bne.n	8009ece <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	1e5a      	subs	r2, r3, #1
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
	...

08009ef0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10a      	bne.n	8009f1a <xQueueGenericReset+0x2a>
	__asm volatile
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	60bb      	str	r3, [r7, #8]
}
 8009f16:	bf00      	nop
 8009f18:	e7fe      	b.n	8009f18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f1a:	f002 fe63 	bl	800cbe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	68f9      	ldr	r1, [r7, #12]
 8009f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f2a:	fb01 f303 	mul.w	r3, r1, r3
 8009f2e:	441a      	add	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	68f9      	ldr	r1, [r7, #12]
 8009f4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f50:	fb01 f303 	mul.w	r3, r1, r3
 8009f54:	441a      	add	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	22ff      	movs	r2, #255	; 0xff
 8009f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	22ff      	movs	r2, #255	; 0xff
 8009f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d114      	bne.n	8009f9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d01a      	beq.n	8009fae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3310      	adds	r3, #16
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f001 fb2b 	bl	800b5d8 <xTaskRemoveFromEventList>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d012      	beq.n	8009fae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f88:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <xQueueGenericReset+0xcc>)
 8009f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	e009      	b.n	8009fae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3310      	adds	r3, #16
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff fef1 	bl	8009d86 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3324      	adds	r3, #36	; 0x24
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7ff feec 	bl	8009d86 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fae:	f002 fe49 	bl	800cc44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fb2:	2301      	movs	r3, #1
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08e      	sub	sp, #56	; 0x38
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10a      	bne.n	800a006 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a002:	bf00      	nop
 800a004:	e7fe      	b.n	800a004 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <xQueueGenericCreateStatic+0x52>
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <xQueueGenericCreateStatic+0x56>
 800a012:	2301      	movs	r3, #1
 800a014:	e000      	b.n	800a018 <xQueueGenericCreateStatic+0x58>
 800a016:	2300      	movs	r3, #0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	623b      	str	r3, [r7, #32]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <xQueueGenericCreateStatic+0x7e>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <xQueueGenericCreateStatic+0x82>
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <xQueueGenericCreateStatic+0x84>
 800a042:	2300      	movs	r3, #0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10a      	bne.n	800a05e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	61fb      	str	r3, [r7, #28]
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a05e:	2350      	movs	r3, #80	; 0x50
 800a060:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b50      	cmp	r3, #80	; 0x50
 800a066:	d00a      	beq.n	800a07e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	61bb      	str	r3, [r7, #24]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a07e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00d      	beq.n	800a0a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a092:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	4613      	mov	r3, r2
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f83f 	bl	800a124 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3730      	adds	r7, #48	; 0x30
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08a      	sub	sp, #40	; 0x28
 800a0b4:	af02      	add	r7, sp, #8
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10a      	bne.n	800a0da <xQueueGenericCreate+0x2a>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	613b      	str	r3, [r7, #16]
}
 800a0d6:	bf00      	nop
 800a0d8:	e7fe      	b.n	800a0d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	fb02 f303 	mul.w	r3, r2, r3
 800a0e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	3350      	adds	r3, #80	; 0x50
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f002 fe9d 	bl	800ce28 <pvPortMalloc>
 800a0ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d011      	beq.n	800a11a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	3350      	adds	r3, #80	; 0x50
 800a0fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a108:	79fa      	ldrb	r2, [r7, #7]
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4613      	mov	r3, r2
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 f805 	bl	800a124 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a11a:	69bb      	ldr	r3, [r7, #24]
	}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3720      	adds	r7, #32
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d103      	bne.n	800a140 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e002      	b.n	800a146 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a152:	2101      	movs	r1, #1
 800a154:	69b8      	ldr	r0, [r7, #24]
 800a156:	f7ff fecb 	bl	8009ef0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b08a      	sub	sp, #40	; 0x28
 800a16e:	af02      	add	r7, sp, #8
 800a170:	60f8      	str	r0, [r7, #12]
 800a172:	60b9      	str	r1, [r7, #8]
 800a174:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	61bb      	str	r3, [r7, #24]
}
 800a18e:	bf00      	nop
 800a190:	e7fe      	b.n	800a190 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	429a      	cmp	r2, r3
 800a198:	d90a      	bls.n	800a1b0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	617b      	str	r3, [r7, #20]
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7ff ff00 	bl	8009fc0 <xQueueGenericCreateStatic>
 800a1c0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a1ce:	69fb      	ldr	r3, [r7, #28]
	}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3720      	adds	r7, #32
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10a      	bne.n	800a1fe <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	613b      	str	r3, [r7, #16]
}
 800a1fa:	bf00      	nop
 800a1fc:	e7fe      	b.n	800a1fc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d90a      	bls.n	800a21c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	60fb      	str	r3, [r7, #12]
}
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a21c:	2202      	movs	r2, #2
 800a21e:	2100      	movs	r1, #0
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff ff45 	bl	800a0b0 <xQueueGenericCreate>
 800a226:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a234:	697b      	ldr	r3, [r7, #20]
	}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08e      	sub	sp, #56	; 0x38
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a24e:	2300      	movs	r3, #0
 800a250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <xQueueGenericSend+0x32>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a26e:	bf00      	nop
 800a270:	e7fe      	b.n	800a270 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d103      	bne.n	800a280 <xQueueGenericSend+0x40>
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d101      	bne.n	800a284 <xQueueGenericSend+0x44>
 800a280:	2301      	movs	r3, #1
 800a282:	e000      	b.n	800a286 <xQueueGenericSend+0x46>
 800a284:	2300      	movs	r3, #0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10a      	bne.n	800a2a0 <xQueueGenericSend+0x60>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d103      	bne.n	800a2ae <xQueueGenericSend+0x6e>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <xQueueGenericSend+0x72>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <xQueueGenericSend+0x74>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <xQueueGenericSend+0x8e>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	623b      	str	r3, [r7, #32]
}
 800a2ca:	bf00      	nop
 800a2cc:	e7fe      	b.n	800a2cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2ce:	f001 fb41 	bl	800b954 <xTaskGetSchedulerState>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <xQueueGenericSend+0x9e>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <xQueueGenericSend+0xa2>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <xQueueGenericSend+0xa4>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10a      	bne.n	800a2fe <xQueueGenericSend+0xbe>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	61fb      	str	r3, [r7, #28]
}
 800a2fa:	bf00      	nop
 800a2fc:	e7fe      	b.n	800a2fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2fe:	f002 fc71 	bl	800cbe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d302      	bcc.n	800a314 <xQueueGenericSend+0xd4>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d129      	bne.n	800a368 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	68b9      	ldr	r1, [r7, #8]
 800a318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a31a:	f000 fb52 	bl	800a9c2 <prvCopyDataToQueue>
 800a31e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	2b00      	cmp	r3, #0
 800a326:	d010      	beq.n	800a34a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	3324      	adds	r3, #36	; 0x24
 800a32c:	4618      	mov	r0, r3
 800a32e:	f001 f953 	bl	800b5d8 <xTaskRemoveFromEventList>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d013      	beq.n	800a360 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a338:	4b3f      	ldr	r3, [pc, #252]	; (800a438 <xQueueGenericSend+0x1f8>)
 800a33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	e00a      	b.n	800a360 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d007      	beq.n	800a360 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a350:	4b39      	ldr	r3, [pc, #228]	; (800a438 <xQueueGenericSend+0x1f8>)
 800a352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a360:	f002 fc70 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800a364:	2301      	movs	r3, #1
 800a366:	e063      	b.n	800a430 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d103      	bne.n	800a376 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a36e:	f002 fc69 	bl	800cc44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a372:	2300      	movs	r3, #0
 800a374:	e05c      	b.n	800a430 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d106      	bne.n	800a38a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a37c:	f107 0314 	add.w	r3, r7, #20
 800a380:	4618      	mov	r0, r3
 800a382:	f001 f98d 	bl	800b6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a386:	2301      	movs	r3, #1
 800a388:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a38a:	f002 fc5b 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a38e:	f000 feed 	bl	800b16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a392:	f002 fc27 	bl	800cbe4 <vPortEnterCritical>
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a39c:	b25b      	sxtb	r3, r3
 800a39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a2:	d103      	bne.n	800a3ac <xQueueGenericSend+0x16c>
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3b2:	b25b      	sxtb	r3, r3
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b8:	d103      	bne.n	800a3c2 <xQueueGenericSend+0x182>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3c2:	f002 fc3f 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3c6:	1d3a      	adds	r2, r7, #4
 800a3c8:	f107 0314 	add.w	r3, r7, #20
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 f97c 	bl	800b6cc <xTaskCheckForTimeOut>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d124      	bne.n	800a424 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a3da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3dc:	f000 fbe9 	bl	800abb2 <prvIsQueueFull>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d018      	beq.n	800a418 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	3310      	adds	r3, #16
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f001 f8a2 	bl	800b538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3f6:	f000 fb74 	bl	800aae2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3fa:	f000 fec5 	bl	800b188 <xTaskResumeAll>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	f47f af7c 	bne.w	800a2fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a406:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <xQueueGenericSend+0x1f8>)
 800a408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	e772      	b.n	800a2fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a41a:	f000 fb62 	bl	800aae2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a41e:	f000 feb3 	bl	800b188 <xTaskResumeAll>
 800a422:	e76c      	b.n	800a2fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a426:	f000 fb5c 	bl	800aae2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a42a:	f000 fead 	bl	800b188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a42e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a430:	4618      	mov	r0, r3
 800a432:	3738      	adds	r7, #56	; 0x38
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b090      	sub	sp, #64	; 0x40
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <xQueueGenericSendFromISR+0x3c>
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <xQueueGenericSendFromISR+0x40>
 800a478:	2301      	movs	r3, #1
 800a47a:	e000      	b.n	800a47e <xQueueGenericSendFromISR+0x42>
 800a47c:	2300      	movs	r3, #0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d103      	bne.n	800a4a6 <xQueueGenericSendFromISR+0x6a>
 800a49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d101      	bne.n	800a4aa <xQueueGenericSendFromISR+0x6e>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e000      	b.n	800a4ac <xQueueGenericSendFromISR+0x70>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	623b      	str	r3, [r7, #32]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4c6:	f002 fc6f 	bl	800cda8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	61fa      	str	r2, [r7, #28]
 800a4e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a4e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d302      	bcc.n	800a4f8 <xQueueGenericSendFromISR+0xbc>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d12f      	bne.n	800a558 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a506:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	68b9      	ldr	r1, [r7, #8]
 800a50c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a50e:	f000 fa58 	bl	800a9c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a512:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51a:	d112      	bne.n	800a542 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	2b00      	cmp	r3, #0
 800a522:	d016      	beq.n	800a552 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	3324      	adds	r3, #36	; 0x24
 800a528:	4618      	mov	r0, r3
 800a52a:	f001 f855 	bl	800b5d8 <xTaskRemoveFromEventList>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00e      	beq.n	800a552 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00b      	beq.n	800a552 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	e007      	b.n	800a552 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a546:	3301      	adds	r3, #1
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	b25a      	sxtb	r2, r3
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a552:	2301      	movs	r3, #1
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a556:	e001      	b.n	800a55c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a558:	2300      	movs	r3, #0
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a566:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3740      	adds	r7, #64	; 0x40
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
	...

0800a574 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08c      	sub	sp, #48	; 0x30
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a580:	2300      	movs	r3, #0
 800a582:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10a      	bne.n	800a5a4 <xQueueReceive+0x30>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	623b      	str	r3, [r7, #32]
}
 800a5a0:	bf00      	nop
 800a5a2:	e7fe      	b.n	800a5a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d103      	bne.n	800a5b2 <xQueueReceive+0x3e>
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <xQueueReceive+0x42>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e000      	b.n	800a5b8 <xQueueReceive+0x44>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <xQueueReceive+0x5e>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	61fb      	str	r3, [r7, #28]
}
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5d2:	f001 f9bf 	bl	800b954 <xTaskGetSchedulerState>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d102      	bne.n	800a5e2 <xQueueReceive+0x6e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <xQueueReceive+0x72>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <xQueueReceive+0x74>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <xQueueReceive+0x8e>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	61bb      	str	r3, [r7, #24]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a602:	f002 faef 	bl	800cbe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d01f      	beq.n	800a652 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a612:	68b9      	ldr	r1, [r7, #8]
 800a614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a616:	f000 fa3e 	bl	800aa96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	1e5a      	subs	r2, r3, #1
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00f      	beq.n	800a64a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	3310      	adds	r3, #16
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 ffd2 	bl	800b5d8 <xTaskRemoveFromEventList>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d007      	beq.n	800a64a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a63a:	4b3d      	ldr	r3, [pc, #244]	; (800a730 <xQueueReceive+0x1bc>)
 800a63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a64a:	f002 fafb 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800a64e:	2301      	movs	r3, #1
 800a650:	e069      	b.n	800a726 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d103      	bne.n	800a660 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a658:	f002 faf4 	bl	800cc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a65c:	2300      	movs	r3, #0
 800a65e:	e062      	b.n	800a726 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a666:	f107 0310 	add.w	r3, r7, #16
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 f818 	bl	800b6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a670:	2301      	movs	r3, #1
 800a672:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a674:	f002 fae6 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a678:	f000 fd78 	bl	800b16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a67c:	f002 fab2 	bl	800cbe4 <vPortEnterCritical>
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a686:	b25b      	sxtb	r3, r3
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d103      	bne.n	800a696 <xQueueReceive+0x122>
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a2:	d103      	bne.n	800a6ac <xQueueReceive+0x138>
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ac:	f002 faca 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6b0:	1d3a      	adds	r2, r7, #4
 800a6b2:	f107 0310 	add.w	r3, r7, #16
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f001 f807 	bl	800b6cc <xTaskCheckForTimeOut>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d123      	bne.n	800a70c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c6:	f000 fa5e 	bl	800ab86 <prvIsQueueEmpty>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d017      	beq.n	800a700 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	3324      	adds	r3, #36	; 0x24
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 ff2d 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e0:	f000 f9ff 	bl	800aae2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6e4:	f000 fd50 	bl	800b188 <xTaskResumeAll>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d189      	bne.n	800a602 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a6ee:	4b10      	ldr	r3, [pc, #64]	; (800a730 <xQueueReceive+0x1bc>)
 800a6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	e780      	b.n	800a602 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a702:	f000 f9ee 	bl	800aae2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a706:	f000 fd3f 	bl	800b188 <xTaskResumeAll>
 800a70a:	e77a      	b.n	800a602 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a70c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a70e:	f000 f9e8 	bl	800aae2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a712:	f000 fd39 	bl	800b188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a718:	f000 fa35 	bl	800ab86 <prvIsQueueEmpty>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f43f af6f 	beq.w	800a602 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a726:	4618      	mov	r0, r3
 800a728:	3730      	adds	r7, #48	; 0x30
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	e000ed04 	.word	0xe000ed04

0800a734 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08e      	sub	sp, #56	; 0x38
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a73e:	2300      	movs	r3, #0
 800a740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a746:	2300      	movs	r3, #0
 800a748:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10a      	bne.n	800a766 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	623b      	str	r3, [r7, #32]
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	61fb      	str	r3, [r7, #28]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a784:	f001 f8e6 	bl	800b954 <xTaskGetSchedulerState>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <xQueueSemaphoreTake+0x60>
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <xQueueSemaphoreTake+0x64>
 800a794:	2301      	movs	r3, #1
 800a796:	e000      	b.n	800a79a <xQueueSemaphoreTake+0x66>
 800a798:	2300      	movs	r3, #0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	61bb      	str	r3, [r7, #24]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7b4:	f002 fa16 	bl	800cbe4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d024      	beq.n	800a80e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	1e5a      	subs	r2, r3, #1
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d104      	bne.n	800a7de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7d4:	f001 fa34 	bl	800bc40 <pvTaskIncrementMutexHeldCount>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00f      	beq.n	800a806 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	3310      	adds	r3, #16
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fef4 	bl	800b5d8 <xTaskRemoveFromEventList>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7f6:	4b54      	ldr	r3, [pc, #336]	; (800a948 <xQueueSemaphoreTake+0x214>)
 800a7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a806:	f002 fa1d 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e097      	b.n	800a93e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d111      	bne.n	800a838 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	617b      	str	r3, [r7, #20]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a830:	f002 fa08 	bl	800cc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a834:	2300      	movs	r3, #0
 800a836:	e082      	b.n	800a93e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a83e:	f107 030c 	add.w	r3, r7, #12
 800a842:	4618      	mov	r0, r3
 800a844:	f000 ff2c 	bl	800b6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a848:	2301      	movs	r3, #1
 800a84a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a84c:	f002 f9fa 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a850:	f000 fc8c 	bl	800b16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a854:	f002 f9c6 	bl	800cbe4 <vPortEnterCritical>
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a85e:	b25b      	sxtb	r3, r3
 800a860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a864:	d103      	bne.n	800a86e <xQueueSemaphoreTake+0x13a>
 800a866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a874:	b25b      	sxtb	r3, r3
 800a876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87a:	d103      	bne.n	800a884 <xQueueSemaphoreTake+0x150>
 800a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a884:	f002 f9de 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a888:	463a      	mov	r2, r7
 800a88a:	f107 030c 	add.w	r3, r7, #12
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f000 ff1b 	bl	800b6cc <xTaskCheckForTimeOut>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d132      	bne.n	800a902 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a89e:	f000 f972 	bl	800ab86 <prvIsQueueEmpty>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d026      	beq.n	800a8f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d109      	bne.n	800a8c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a8b0:	f002 f998 	bl	800cbe4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 f869 	bl	800b990 <xTaskPriorityInherit>
 800a8be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a8c0:	f002 f9c0 	bl	800cc44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	3324      	adds	r3, #36	; 0x24
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fe33 	bl	800b538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8d4:	f000 f905 	bl	800aae2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8d8:	f000 fc56 	bl	800b188 <xTaskResumeAll>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f47f af68 	bne.w	800a7b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a8e4:	4b18      	ldr	r3, [pc, #96]	; (800a948 <xQueueSemaphoreTake+0x214>)
 800a8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	e75e      	b.n	800a7b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8f8:	f000 f8f3 	bl	800aae2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8fc:	f000 fc44 	bl	800b188 <xTaskResumeAll>
 800a900:	e758      	b.n	800a7b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a904:	f000 f8ed 	bl	800aae2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a908:	f000 fc3e 	bl	800b188 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a90c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a90e:	f000 f93a 	bl	800ab86 <prvIsQueueEmpty>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	f43f af4d 	beq.w	800a7b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00d      	beq.n	800a93c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a920:	f002 f960 	bl	800cbe4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a926:	f000 f834 	bl	800a992 <prvGetDisinheritPriorityAfterTimeout>
 800a92a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a932:	4618      	mov	r0, r3
 800a934:	f001 f902 	bl	800bb3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a938:	f002 f984 	bl	800cc44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a93c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3738      	adds	r7, #56	; 0x38
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10a      	bne.n	800a974 <vQueueDelete+0x28>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	60bb      	str	r3, [r7, #8]
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 f95f 	bl	800ac38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a980:	2b00      	cmp	r3, #0
 800a982:	d102      	bne.n	800a98a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f002 fb1b 	bl	800cfc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a98a:	bf00      	nop
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d006      	beq.n	800a9b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	e001      	b.n	800a9b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
	}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b086      	sub	sp, #24
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	60f8      	str	r0, [r7, #12]
 800a9ca:	60b9      	str	r1, [r7, #8]
 800a9cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10d      	bne.n	800a9fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d14d      	bne.n	800aa84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f001 f837 	bl	800ba60 <xTaskPriorityDisinherit>
 800a9f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	609a      	str	r2, [r3, #8]
 800a9fa:	e043      	b.n	800aa84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d119      	bne.n	800aa36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6858      	ldr	r0, [r3, #4]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	f004 f9b1 	bl	800ed74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	441a      	add	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d32b      	bcc.n	800aa84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	605a      	str	r2, [r3, #4]
 800aa34:	e026      	b.n	800aa84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	68d8      	ldr	r0, [r3, #12]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	461a      	mov	r2, r3
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	f004 f997 	bl	800ed74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	425b      	negs	r3, r3
 800aa50:	441a      	add	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d207      	bcs.n	800aa72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	689a      	ldr	r2, [r3, #8]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6a:	425b      	negs	r3, r3
 800aa6c:	441a      	add	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d105      	bne.n	800aa84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d002      	beq.n	800aa84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa8c:	697b      	ldr	r3, [r7, #20]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d018      	beq.n	800aada <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab0:	441a      	add	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68da      	ldr	r2, [r3, #12]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d303      	bcc.n	800aaca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68d9      	ldr	r1, [r3, #12]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad2:	461a      	mov	r2, r3
 800aad4:	6838      	ldr	r0, [r7, #0]
 800aad6:	f004 f94d 	bl	800ed74 <memcpy>
	}
}
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aaea:	f002 f87b 	bl	800cbe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaf4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaf6:	e011      	b.n	800ab1c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d012      	beq.n	800ab26 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	3324      	adds	r3, #36	; 0x24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 fd67 	bl	800b5d8 <xTaskRemoveFromEventList>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab10:	f000 fe3e 	bl	800b790 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	dce9      	bgt.n	800aaf8 <prvUnlockQueue+0x16>
 800ab24:	e000      	b.n	800ab28 <prvUnlockQueue+0x46>
					break;
 800ab26:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	22ff      	movs	r2, #255	; 0xff
 800ab2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab30:	f002 f888 	bl	800cc44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab34:	f002 f856 	bl	800cbe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab3e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab40:	e011      	b.n	800ab66 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d012      	beq.n	800ab70 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	3310      	adds	r3, #16
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fd42 	bl	800b5d8 <xTaskRemoveFromEventList>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab5a:	f000 fe19 	bl	800b790 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	dce9      	bgt.n	800ab42 <prvUnlockQueue+0x60>
 800ab6e:	e000      	b.n	800ab72 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab70:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	22ff      	movs	r2, #255	; 0xff
 800ab76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab7a:	f002 f863 	bl	800cc44 <vPortExitCritical>
}
 800ab7e:	bf00      	nop
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab8e:	f002 f829 	bl	800cbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d102      	bne.n	800aba0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	60fb      	str	r3, [r7, #12]
 800ab9e:	e001      	b.n	800aba4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aba4:	f002 f84e 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800aba8:	68fb      	ldr	r3, [r7, #12]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abba:	f002 f813 	bl	800cbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d102      	bne.n	800abd0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abca:	2301      	movs	r3, #1
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	e001      	b.n	800abd4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abd4:	f002 f836 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800abd8:	68fb      	ldr	r3, [r7, #12]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
	...

0800abe4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	e014      	b.n	800ac1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800abf4:	4a0f      	ldr	r2, [pc, #60]	; (800ac34 <vQueueAddToRegistry+0x50>)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10b      	bne.n	800ac18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac00:	490c      	ldr	r1, [pc, #48]	; (800ac34 <vQueueAddToRegistry+0x50>)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac0a:	4a0a      	ldr	r2, [pc, #40]	; (800ac34 <vQueueAddToRegistry+0x50>)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	4413      	add	r3, r2
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac16:	e006      	b.n	800ac26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b07      	cmp	r3, #7
 800ac22:	d9e7      	bls.n	800abf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20000ecc 	.word	0x20000ecc

0800ac38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	e016      	b.n	800ac74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ac46:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <vQueueUnregisterQueue+0x50>)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d10b      	bne.n	800ac6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ac56:	4a0c      	ldr	r2, [pc, #48]	; (800ac88 <vQueueUnregisterQueue+0x50>)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ac60:	4a09      	ldr	r2, [pc, #36]	; (800ac88 <vQueueUnregisterQueue+0x50>)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	00db      	lsls	r3, r3, #3
 800ac66:	4413      	add	r3, r2
 800ac68:	2200      	movs	r2, #0
 800ac6a:	605a      	str	r2, [r3, #4]
				break;
 800ac6c:	e006      	b.n	800ac7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3301      	adds	r3, #1
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2b07      	cmp	r3, #7
 800ac78:	d9e5      	bls.n	800ac46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ac7a:	bf00      	nop
 800ac7c:	bf00      	nop
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	20000ecc 	.word	0x20000ecc

0800ac8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac9c:	f001 ffa2 	bl	800cbe4 <vPortEnterCritical>
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acac:	d103      	bne.n	800acb6 <vQueueWaitForMessageRestricted+0x2a>
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acbc:	b25b      	sxtb	r3, r3
 800acbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc2:	d103      	bne.n	800accc <vQueueWaitForMessageRestricted+0x40>
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800accc:	f001 ffba 	bl	800cc44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d106      	bne.n	800ace6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	3324      	adds	r3, #36	; 0x24
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fc4d 	bl	800b580 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ace6:	6978      	ldr	r0, [r7, #20]
 800ace8:	f7ff fefb 	bl	800aae2 <prvUnlockQueue>
	}
 800acec:	bf00      	nop
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b08e      	sub	sp, #56	; 0x38
 800acf8:	af04      	add	r7, sp, #16
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	623b      	str	r3, [r7, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <xTaskCreateStatic+0x46>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	61fb      	str	r3, [r7, #28]
}
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad3a:	235c      	movs	r3, #92	; 0x5c
 800ad3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2b5c      	cmp	r3, #92	; 0x5c
 800ad42:	d00a      	beq.n	800ad5a <xTaskCreateStatic+0x66>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	61bb      	str	r3, [r7, #24]
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d01e      	beq.n	800ada0 <xTaskCreateStatic+0xac>
 800ad62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01b      	beq.n	800ada0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	2202      	movs	r2, #2
 800ad76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9303      	str	r3, [sp, #12]
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	9302      	str	r3, [sp, #8]
 800ad82:	f107 0314 	add.w	r3, r7, #20
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	68b9      	ldr	r1, [r7, #8]
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f000 f850 	bl	800ae38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad9a:	f000 f8dd 	bl	800af58 <prvAddNewTaskToReadyList>
 800ad9e:	e001      	b.n	800ada4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ada4:	697b      	ldr	r3, [r7, #20]
	}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3728      	adds	r7, #40	; 0x28
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b08c      	sub	sp, #48	; 0x30
 800adb2:	af04      	add	r7, sp, #16
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	603b      	str	r3, [r7, #0]
 800adba:	4613      	mov	r3, r2
 800adbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800adbe:	88fb      	ldrh	r3, [r7, #6]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f002 f830 	bl	800ce28 <pvPortMalloc>
 800adc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00e      	beq.n	800adee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800add0:	205c      	movs	r0, #92	; 0x5c
 800add2:	f002 f829 	bl	800ce28 <pvPortMalloc>
 800add6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	631a      	str	r2, [r3, #48]	; 0x30
 800ade4:	e005      	b.n	800adf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ade6:	6978      	ldr	r0, [r7, #20]
 800ade8:	f002 f8ea 	bl	800cfc0 <vPortFree>
 800adec:	e001      	b.n	800adf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d017      	beq.n	800ae28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae00:	88fa      	ldrh	r2, [r7, #6]
 800ae02:	2300      	movs	r3, #0
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	9302      	str	r3, [sp, #8]
 800ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	68b9      	ldr	r1, [r7, #8]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 f80e 	bl	800ae38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae1c:	69f8      	ldr	r0, [r7, #28]
 800ae1e:	f000 f89b 	bl	800af58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae22:	2301      	movs	r3, #1
 800ae24:	61bb      	str	r3, [r7, #24]
 800ae26:	e002      	b.n	800ae2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae2e:	69bb      	ldr	r3, [r7, #24]
	}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3720      	adds	r7, #32
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b088      	sub	sp, #32
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	607a      	str	r2, [r7, #4]
 800ae44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	461a      	mov	r2, r3
 800ae50:	21a5      	movs	r1, #165	; 0xa5
 800ae52:	f003 ff63 	bl	800ed1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae60:	3b01      	subs	r3, #1
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	f023 0307 	bic.w	r3, r3, #7
 800ae6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	f003 0307 	and.w	r3, r3, #7
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	617b      	str	r3, [r7, #20]
}
 800ae8c:	bf00      	nop
 800ae8e:	e7fe      	b.n	800ae8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01f      	beq.n	800aed6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae96:	2300      	movs	r3, #0
 800ae98:	61fb      	str	r3, [r7, #28]
 800ae9a:	e012      	b.n	800aec2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	4413      	add	r3, r2
 800aea2:	7819      	ldrb	r1, [r3, #0]
 800aea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	4413      	add	r3, r2
 800aeaa:	3334      	adds	r3, #52	; 0x34
 800aeac:	460a      	mov	r2, r1
 800aeae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	3301      	adds	r3, #1
 800aec0:	61fb      	str	r3, [r7, #28]
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	2b0f      	cmp	r3, #15
 800aec6:	d9e9      	bls.n	800ae9c <prvInitialiseNewTask+0x64>
 800aec8:	e000      	b.n	800aecc <prvInitialiseNewTask+0x94>
			{
				break;
 800aeca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aed4:	e003      	b.n	800aede <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	2b37      	cmp	r3, #55	; 0x37
 800aee2:	d901      	bls.n	800aee8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aee4:	2337      	movs	r3, #55	; 0x37
 800aee6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aef2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	2200      	movs	r2, #0
 800aef8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	3304      	adds	r3, #4
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe ff61 	bl	8009dc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	3318      	adds	r3, #24
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe ff5c 	bl	8009dc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	2200      	movs	r2, #0
 800af28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	68f9      	ldr	r1, [r7, #12]
 800af36:	69b8      	ldr	r0, [r7, #24]
 800af38:	f001 fd28 	bl	800c98c <pxPortInitialiseStack>
 800af3c:	4602      	mov	r2, r0
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af4e:	bf00      	nop
 800af50:	3720      	adds	r7, #32
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af60:	f001 fe40 	bl	800cbe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af64:	4b2d      	ldr	r3, [pc, #180]	; (800b01c <prvAddNewTaskToReadyList+0xc4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3301      	adds	r3, #1
 800af6a:	4a2c      	ldr	r2, [pc, #176]	; (800b01c <prvAddNewTaskToReadyList+0xc4>)
 800af6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af6e:	4b2c      	ldr	r3, [pc, #176]	; (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d109      	bne.n	800af8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af76:	4a2a      	ldr	r2, [pc, #168]	; (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af7c:	4b27      	ldr	r3, [pc, #156]	; (800b01c <prvAddNewTaskToReadyList+0xc4>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d110      	bne.n	800afa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af84:	f000 fc28 	bl	800b7d8 <prvInitialiseTaskLists>
 800af88:	e00d      	b.n	800afa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af8a:	4b26      	ldr	r3, [pc, #152]	; (800b024 <prvAddNewTaskToReadyList+0xcc>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d109      	bne.n	800afa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af92:	4b23      	ldr	r3, [pc, #140]	; (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d802      	bhi.n	800afa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afa0:	4a1f      	ldr	r2, [pc, #124]	; (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afa6:	4b20      	ldr	r3, [pc, #128]	; (800b028 <prvAddNewTaskToReadyList+0xd0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3301      	adds	r3, #1
 800afac:	4a1e      	ldr	r2, [pc, #120]	; (800b028 <prvAddNewTaskToReadyList+0xd0>)
 800afae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afb0:	4b1d      	ldr	r3, [pc, #116]	; (800b028 <prvAddNewTaskToReadyList+0xd0>)
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbc:	4b1b      	ldr	r3, [pc, #108]	; (800b02c <prvAddNewTaskToReadyList+0xd4>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d903      	bls.n	800afcc <prvAddNewTaskToReadyList+0x74>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc8:	4a18      	ldr	r2, [pc, #96]	; (800b02c <prvAddNewTaskToReadyList+0xd4>)
 800afca:	6013      	str	r3, [r2, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4a15      	ldr	r2, [pc, #84]	; (800b030 <prvAddNewTaskToReadyList+0xd8>)
 800afda:	441a      	add	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3304      	adds	r3, #4
 800afe0:	4619      	mov	r1, r3
 800afe2:	4610      	mov	r0, r2
 800afe4:	f7fe fefc 	bl	8009de0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afe8:	f001 fe2c 	bl	800cc44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afec:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <prvAddNewTaskToReadyList+0xcc>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00e      	beq.n	800b012 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aff4:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affe:	429a      	cmp	r2, r3
 800b000:	d207      	bcs.n	800b012 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b002:	4b0c      	ldr	r3, [pc, #48]	; (800b034 <prvAddNewTaskToReadyList+0xdc>)
 800b004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b008:	601a      	str	r2, [r3, #0]
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	200013e0 	.word	0x200013e0
 800b020:	20000f0c 	.word	0x20000f0c
 800b024:	200013ec 	.word	0x200013ec
 800b028:	200013fc 	.word	0x200013fc
 800b02c:	200013e8 	.word	0x200013e8
 800b030:	20000f10 	.word	0x20000f10
 800b034:	e000ed04 	.word	0xe000ed04

0800b038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b040:	2300      	movs	r3, #0
 800b042:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d017      	beq.n	800b07a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b04a:	4b13      	ldr	r3, [pc, #76]	; (800b098 <vTaskDelay+0x60>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00a      	beq.n	800b068 <vTaskDelay+0x30>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	60bb      	str	r3, [r7, #8]
}
 800b064:	bf00      	nop
 800b066:	e7fe      	b.n	800b066 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b068:	f000 f880 	bl	800b16c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b06c:	2100      	movs	r1, #0
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 f830 	bl	800c0d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b074:	f000 f888 	bl	800b188 <xTaskResumeAll>
 800b078:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d107      	bne.n	800b090 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b080:	4b06      	ldr	r3, [pc, #24]	; (800b09c <vTaskDelay+0x64>)
 800b082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b086:	601a      	str	r2, [r3, #0]
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b090:	bf00      	nop
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	20001408 	.word	0x20001408
 800b09c:	e000ed04 	.word	0xe000ed04

0800b0a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08a      	sub	sp, #40	; 0x28
 800b0a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0ae:	463a      	mov	r2, r7
 800b0b0:	1d39      	adds	r1, r7, #4
 800b0b2:	f107 0308 	add.w	r3, r7, #8
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe fde0 	bl	8009c7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	9202      	str	r2, [sp, #8]
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	460a      	mov	r2, r1
 800b0ce:	4921      	ldr	r1, [pc, #132]	; (800b154 <vTaskStartScheduler+0xb4>)
 800b0d0:	4821      	ldr	r0, [pc, #132]	; (800b158 <vTaskStartScheduler+0xb8>)
 800b0d2:	f7ff fe0f 	bl	800acf4 <xTaskCreateStatic>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	4a20      	ldr	r2, [pc, #128]	; (800b15c <vTaskStartScheduler+0xbc>)
 800b0da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0dc:	4b1f      	ldr	r3, [pc, #124]	; (800b15c <vTaskStartScheduler+0xbc>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	e001      	b.n	800b0ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d102      	bne.n	800b0fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0f4:	f001 f842 	bl	800c17c <xTimerCreateTimerTask>
 800b0f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d116      	bne.n	800b12e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	613b      	str	r3, [r7, #16]
}
 800b112:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b114:	4b12      	ldr	r3, [pc, #72]	; (800b160 <vTaskStartScheduler+0xc0>)
 800b116:	f04f 32ff 	mov.w	r2, #4294967295
 800b11a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b11c:	4b11      	ldr	r3, [pc, #68]	; (800b164 <vTaskStartScheduler+0xc4>)
 800b11e:	2201      	movs	r2, #1
 800b120:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b122:	4b11      	ldr	r3, [pc, #68]	; (800b168 <vTaskStartScheduler+0xc8>)
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b128:	f001 fcba 	bl	800caa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b12c:	e00e      	b.n	800b14c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b134:	d10a      	bne.n	800b14c <vTaskStartScheduler+0xac>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	60fb      	str	r3, [r7, #12]
}
 800b148:	bf00      	nop
 800b14a:	e7fe      	b.n	800b14a <vTaskStartScheduler+0xaa>
}
 800b14c:	bf00      	nop
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	0800ee18 	.word	0x0800ee18
 800b158:	0800b7a9 	.word	0x0800b7a9
 800b15c:	20001404 	.word	0x20001404
 800b160:	20001400 	.word	0x20001400
 800b164:	200013ec 	.word	0x200013ec
 800b168:	200013e4 	.word	0x200013e4

0800b16c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b16c:	b480      	push	{r7}
 800b16e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b170:	4b04      	ldr	r3, [pc, #16]	; (800b184 <vTaskSuspendAll+0x18>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	4a03      	ldr	r2, [pc, #12]	; (800b184 <vTaskSuspendAll+0x18>)
 800b178:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b17a:	bf00      	nop
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	20001408 	.word	0x20001408

0800b188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b192:	2300      	movs	r3, #0
 800b194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b196:	4b42      	ldr	r3, [pc, #264]	; (800b2a0 <xTaskResumeAll+0x118>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	603b      	str	r3, [r7, #0]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1b4:	f001 fd16 	bl	800cbe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1b8:	4b39      	ldr	r3, [pc, #228]	; (800b2a0 <xTaskResumeAll+0x118>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	4a38      	ldr	r2, [pc, #224]	; (800b2a0 <xTaskResumeAll+0x118>)
 800b1c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c2:	4b37      	ldr	r3, [pc, #220]	; (800b2a0 <xTaskResumeAll+0x118>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d162      	bne.n	800b290 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1ca:	4b36      	ldr	r3, [pc, #216]	; (800b2a4 <xTaskResumeAll+0x11c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d05e      	beq.n	800b290 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1d2:	e02f      	b.n	800b234 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1d4:	4b34      	ldr	r3, [pc, #208]	; (800b2a8 <xTaskResumeAll+0x120>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3318      	adds	r3, #24
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fe fe5a 	bl	8009e9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fe55 	bl	8009e9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f4:	4b2d      	ldr	r3, [pc, #180]	; (800b2ac <xTaskResumeAll+0x124>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d903      	bls.n	800b204 <xTaskResumeAll+0x7c>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b200:	4a2a      	ldr	r2, [pc, #168]	; (800b2ac <xTaskResumeAll+0x124>)
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b208:	4613      	mov	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4a27      	ldr	r2, [pc, #156]	; (800b2b0 <xTaskResumeAll+0x128>)
 800b212:	441a      	add	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3304      	adds	r3, #4
 800b218:	4619      	mov	r1, r3
 800b21a:	4610      	mov	r0, r2
 800b21c:	f7fe fde0 	bl	8009de0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b224:	4b23      	ldr	r3, [pc, #140]	; (800b2b4 <xTaskResumeAll+0x12c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d302      	bcc.n	800b234 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b22e:	4b22      	ldr	r3, [pc, #136]	; (800b2b8 <xTaskResumeAll+0x130>)
 800b230:	2201      	movs	r2, #1
 800b232:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b234:	4b1c      	ldr	r3, [pc, #112]	; (800b2a8 <xTaskResumeAll+0x120>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1cb      	bne.n	800b1d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b242:	f000 fb67 	bl	800b914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b246:	4b1d      	ldr	r3, [pc, #116]	; (800b2bc <xTaskResumeAll+0x134>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d010      	beq.n	800b274 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b252:	f000 f859 	bl	800b308 <xTaskIncrementTick>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b25c:	4b16      	ldr	r3, [pc, #88]	; (800b2b8 <xTaskResumeAll+0x130>)
 800b25e:	2201      	movs	r2, #1
 800b260:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3b01      	subs	r3, #1
 800b266:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1f1      	bne.n	800b252 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b26e:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <xTaskResumeAll+0x134>)
 800b270:	2200      	movs	r2, #0
 800b272:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b274:	4b10      	ldr	r3, [pc, #64]	; (800b2b8 <xTaskResumeAll+0x130>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d009      	beq.n	800b290 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b27c:	2301      	movs	r3, #1
 800b27e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b280:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <xTaskResumeAll+0x138>)
 800b282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b290:	f001 fcd8 	bl	800cc44 <vPortExitCritical>

	return xAlreadyYielded;
 800b294:	68bb      	ldr	r3, [r7, #8]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	20001408 	.word	0x20001408
 800b2a4:	200013e0 	.word	0x200013e0
 800b2a8:	200013a0 	.word	0x200013a0
 800b2ac:	200013e8 	.word	0x200013e8
 800b2b0:	20000f10 	.word	0x20000f10
 800b2b4:	20000f0c 	.word	0x20000f0c
 800b2b8:	200013f4 	.word	0x200013f4
 800b2bc:	200013f0 	.word	0x200013f0
 800b2c0:	e000ed04 	.word	0xe000ed04

0800b2c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2ca:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <xTaskGetTickCount+0x1c>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2d0:	687b      	ldr	r3, [r7, #4]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	200013e4 	.word	0x200013e4

0800b2e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2ea:	f001 fd5d 	bl	800cda8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b2f2:	4b04      	ldr	r3, [pc, #16]	; (800b304 <xTaskGetTickCountFromISR+0x20>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2f8:	683b      	ldr	r3, [r7, #0]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	200013e4 	.word	0x200013e4

0800b308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b312:	4b4f      	ldr	r3, [pc, #316]	; (800b450 <xTaskIncrementTick+0x148>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f040 808f 	bne.w	800b43a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b31c:	4b4d      	ldr	r3, [pc, #308]	; (800b454 <xTaskIncrementTick+0x14c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	3301      	adds	r3, #1
 800b322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b324:	4a4b      	ldr	r2, [pc, #300]	; (800b454 <xTaskIncrementTick+0x14c>)
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d120      	bne.n	800b372 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b330:	4b49      	ldr	r3, [pc, #292]	; (800b458 <xTaskIncrementTick+0x150>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <xTaskIncrementTick+0x48>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	603b      	str	r3, [r7, #0]
}
 800b34c:	bf00      	nop
 800b34e:	e7fe      	b.n	800b34e <xTaskIncrementTick+0x46>
 800b350:	4b41      	ldr	r3, [pc, #260]	; (800b458 <xTaskIncrementTick+0x150>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	4b41      	ldr	r3, [pc, #260]	; (800b45c <xTaskIncrementTick+0x154>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a3f      	ldr	r2, [pc, #252]	; (800b458 <xTaskIncrementTick+0x150>)
 800b35c:	6013      	str	r3, [r2, #0]
 800b35e:	4a3f      	ldr	r2, [pc, #252]	; (800b45c <xTaskIncrementTick+0x154>)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	4b3e      	ldr	r3, [pc, #248]	; (800b460 <xTaskIncrementTick+0x158>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3301      	adds	r3, #1
 800b36a:	4a3d      	ldr	r2, [pc, #244]	; (800b460 <xTaskIncrementTick+0x158>)
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	f000 fad1 	bl	800b914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b372:	4b3c      	ldr	r3, [pc, #240]	; (800b464 <xTaskIncrementTick+0x15c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d349      	bcc.n	800b410 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b37c:	4b36      	ldr	r3, [pc, #216]	; (800b458 <xTaskIncrementTick+0x150>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d104      	bne.n	800b390 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b386:	4b37      	ldr	r3, [pc, #220]	; (800b464 <xTaskIncrementTick+0x15c>)
 800b388:	f04f 32ff 	mov.w	r2, #4294967295
 800b38c:	601a      	str	r2, [r3, #0]
					break;
 800b38e:	e03f      	b.n	800b410 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b390:	4b31      	ldr	r3, [pc, #196]	; (800b458 <xTaskIncrementTick+0x150>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d203      	bcs.n	800b3b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3a8:	4a2e      	ldr	r2, [pc, #184]	; (800b464 <xTaskIncrementTick+0x15c>)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3ae:	e02f      	b.n	800b410 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fe fd70 	bl	8009e9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d004      	beq.n	800b3cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	3318      	adds	r3, #24
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe fd67 	bl	8009e9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d0:	4b25      	ldr	r3, [pc, #148]	; (800b468 <xTaskIncrementTick+0x160>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d903      	bls.n	800b3e0 <xTaskIncrementTick+0xd8>
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3dc:	4a22      	ldr	r2, [pc, #136]	; (800b468 <xTaskIncrementTick+0x160>)
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4a1f      	ldr	r2, [pc, #124]	; (800b46c <xTaskIncrementTick+0x164>)
 800b3ee:	441a      	add	r2, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7fe fcf2 	bl	8009de0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b400:	4b1b      	ldr	r3, [pc, #108]	; (800b470 <xTaskIncrementTick+0x168>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	429a      	cmp	r2, r3
 800b408:	d3b8      	bcc.n	800b37c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b40a:	2301      	movs	r3, #1
 800b40c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b40e:	e7b5      	b.n	800b37c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b410:	4b17      	ldr	r3, [pc, #92]	; (800b470 <xTaskIncrementTick+0x168>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b416:	4915      	ldr	r1, [pc, #84]	; (800b46c <xTaskIncrementTick+0x164>)
 800b418:	4613      	mov	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	440b      	add	r3, r1
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d901      	bls.n	800b42c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b428:	2301      	movs	r3, #1
 800b42a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b42c:	4b11      	ldr	r3, [pc, #68]	; (800b474 <xTaskIncrementTick+0x16c>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d007      	beq.n	800b444 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b434:	2301      	movs	r3, #1
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	e004      	b.n	800b444 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b43a:	4b0f      	ldr	r3, [pc, #60]	; (800b478 <xTaskIncrementTick+0x170>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3301      	adds	r3, #1
 800b440:	4a0d      	ldr	r2, [pc, #52]	; (800b478 <xTaskIncrementTick+0x170>)
 800b442:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b444:	697b      	ldr	r3, [r7, #20]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20001408 	.word	0x20001408
 800b454:	200013e4 	.word	0x200013e4
 800b458:	20001398 	.word	0x20001398
 800b45c:	2000139c 	.word	0x2000139c
 800b460:	200013f8 	.word	0x200013f8
 800b464:	20001400 	.word	0x20001400
 800b468:	200013e8 	.word	0x200013e8
 800b46c:	20000f10 	.word	0x20000f10
 800b470:	20000f0c 	.word	0x20000f0c
 800b474:	200013f4 	.word	0x200013f4
 800b478:	200013f0 	.word	0x200013f0

0800b47c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b482:	4b28      	ldr	r3, [pc, #160]	; (800b524 <vTaskSwitchContext+0xa8>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b48a:	4b27      	ldr	r3, [pc, #156]	; (800b528 <vTaskSwitchContext+0xac>)
 800b48c:	2201      	movs	r2, #1
 800b48e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b490:	e041      	b.n	800b516 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b492:	4b25      	ldr	r3, [pc, #148]	; (800b528 <vTaskSwitchContext+0xac>)
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b498:	4b24      	ldr	r3, [pc, #144]	; (800b52c <vTaskSwitchContext+0xb0>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60fb      	str	r3, [r7, #12]
 800b49e:	e010      	b.n	800b4c2 <vTaskSwitchContext+0x46>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10a      	bne.n	800b4bc <vTaskSwitchContext+0x40>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	607b      	str	r3, [r7, #4]
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <vTaskSwitchContext+0x3e>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	491b      	ldr	r1, [pc, #108]	; (800b530 <vTaskSwitchContext+0xb4>)
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	440b      	add	r3, r1
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0e4      	beq.n	800b4a0 <vTaskSwitchContext+0x24>
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4a13      	ldr	r2, [pc, #76]	; (800b530 <vTaskSwitchContext+0xb4>)
 800b4e2:	4413      	add	r3, r2
 800b4e4:	60bb      	str	r3, [r7, #8]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	605a      	str	r2, [r3, #4]
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d104      	bne.n	800b506 <vTaskSwitchContext+0x8a>
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	605a      	str	r2, [r3, #4]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	4a09      	ldr	r2, [pc, #36]	; (800b534 <vTaskSwitchContext+0xb8>)
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	4a06      	ldr	r2, [pc, #24]	; (800b52c <vTaskSwitchContext+0xb0>)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6013      	str	r3, [r2, #0]
}
 800b516:	bf00      	nop
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	20001408 	.word	0x20001408
 800b528:	200013f4 	.word	0x200013f4
 800b52c:	200013e8 	.word	0x200013e8
 800b530:	20000f10 	.word	0x20000f10
 800b534:	20000f0c 	.word	0x20000f0c

0800b538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10a      	bne.n	800b55e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	60fb      	str	r3, [r7, #12]
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b55e:	4b07      	ldr	r3, [pc, #28]	; (800b57c <vTaskPlaceOnEventList+0x44>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3318      	adds	r3, #24
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7fe fc5e 	bl	8009e28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b56c:	2101      	movs	r1, #1
 800b56e:	6838      	ldr	r0, [r7, #0]
 800b570:	f000 fdb0 	bl	800c0d4 <prvAddCurrentTaskToDelayedList>
}
 800b574:	bf00      	nop
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	20000f0c 	.word	0x20000f0c

0800b580 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	617b      	str	r3, [r7, #20]
}
 800b5a4:	bf00      	nop
 800b5a6:	e7fe      	b.n	800b5a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5a8:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3318      	adds	r3, #24
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f7fe fc15 	bl	8009de0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5c2:	6879      	ldr	r1, [r7, #4]
 800b5c4:	68b8      	ldr	r0, [r7, #8]
 800b5c6:	f000 fd85 	bl	800c0d4 <prvAddCurrentTaskToDelayedList>
	}
 800b5ca:	bf00      	nop
 800b5cc:	3718      	adds	r7, #24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20000f0c 	.word	0x20000f0c

0800b5d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10a      	bne.n	800b604 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	60fb      	str	r3, [r7, #12]
}
 800b600:	bf00      	nop
 800b602:	e7fe      	b.n	800b602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	3318      	adds	r3, #24
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe fc46 	bl	8009e9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b60e:	4b1e      	ldr	r3, [pc, #120]	; (800b688 <xTaskRemoveFromEventList+0xb0>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d11d      	bne.n	800b652 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	3304      	adds	r3, #4
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fc3d 	bl	8009e9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b624:	4b19      	ldr	r3, [pc, #100]	; (800b68c <xTaskRemoveFromEventList+0xb4>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d903      	bls.n	800b634 <xTaskRemoveFromEventList+0x5c>
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	4a16      	ldr	r2, [pc, #88]	; (800b68c <xTaskRemoveFromEventList+0xb4>)
 800b632:	6013      	str	r3, [r2, #0]
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b638:	4613      	mov	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4a13      	ldr	r2, [pc, #76]	; (800b690 <xTaskRemoveFromEventList+0xb8>)
 800b642:	441a      	add	r2, r3
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	3304      	adds	r3, #4
 800b648:	4619      	mov	r1, r3
 800b64a:	4610      	mov	r0, r2
 800b64c:	f7fe fbc8 	bl	8009de0 <vListInsertEnd>
 800b650:	e005      	b.n	800b65e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	3318      	adds	r3, #24
 800b656:	4619      	mov	r1, r3
 800b658:	480e      	ldr	r0, [pc, #56]	; (800b694 <xTaskRemoveFromEventList+0xbc>)
 800b65a:	f7fe fbc1 	bl	8009de0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b662:	4b0d      	ldr	r3, [pc, #52]	; (800b698 <xTaskRemoveFromEventList+0xc0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	429a      	cmp	r2, r3
 800b66a:	d905      	bls.n	800b678 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b66c:	2301      	movs	r3, #1
 800b66e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b670:	4b0a      	ldr	r3, [pc, #40]	; (800b69c <xTaskRemoveFromEventList+0xc4>)
 800b672:	2201      	movs	r2, #1
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	e001      	b.n	800b67c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b678:	2300      	movs	r3, #0
 800b67a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b67c:	697b      	ldr	r3, [r7, #20]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3718      	adds	r7, #24
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	20001408 	.word	0x20001408
 800b68c:	200013e8 	.word	0x200013e8
 800b690:	20000f10 	.word	0x20000f10
 800b694:	200013a0 	.word	0x200013a0
 800b698:	20000f0c 	.word	0x20000f0c
 800b69c:	200013f4 	.word	0x200013f4

0800b6a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6a8:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <vTaskInternalSetTimeOutState+0x24>)
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6b0:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <vTaskInternalSetTimeOutState+0x28>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	605a      	str	r2, [r3, #4]
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	200013f8 	.word	0x200013f8
 800b6c8:	200013e4 	.word	0x200013e4

0800b6cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b088      	sub	sp, #32
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10a      	bne.n	800b6f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	613b      	str	r3, [r7, #16]
}
 800b6ee:	bf00      	nop
 800b6f0:	e7fe      	b.n	800b6f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10a      	bne.n	800b70e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	60fb      	str	r3, [r7, #12]
}
 800b70a:	bf00      	nop
 800b70c:	e7fe      	b.n	800b70c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b70e:	f001 fa69 	bl	800cbe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b712:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <xTaskCheckForTimeOut+0xbc>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	69ba      	ldr	r2, [r7, #24]
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72a:	d102      	bne.n	800b732 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b72c:	2300      	movs	r3, #0
 800b72e:	61fb      	str	r3, [r7, #28]
 800b730:	e023      	b.n	800b77a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	4b15      	ldr	r3, [pc, #84]	; (800b78c <xTaskCheckForTimeOut+0xc0>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d007      	beq.n	800b74e <xTaskCheckForTimeOut+0x82>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	429a      	cmp	r2, r3
 800b746:	d302      	bcc.n	800b74e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	61fb      	str	r3, [r7, #28]
 800b74c:	e015      	b.n	800b77a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	429a      	cmp	r2, r3
 800b756:	d20b      	bcs.n	800b770 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	1ad2      	subs	r2, r2, r3
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff ff9b 	bl	800b6a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b76a:	2300      	movs	r3, #0
 800b76c:	61fb      	str	r3, [r7, #28]
 800b76e:	e004      	b.n	800b77a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b776:	2301      	movs	r3, #1
 800b778:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b77a:	f001 fa63 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800b77e:	69fb      	ldr	r3, [r7, #28]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3720      	adds	r7, #32
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	200013e4 	.word	0x200013e4
 800b78c:	200013f8 	.word	0x200013f8

0800b790 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b790:	b480      	push	{r7}
 800b792:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b794:	4b03      	ldr	r3, [pc, #12]	; (800b7a4 <vTaskMissedYield+0x14>)
 800b796:	2201      	movs	r2, #1
 800b798:	601a      	str	r2, [r3, #0]
}
 800b79a:	bf00      	nop
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	200013f4 	.word	0x200013f4

0800b7a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7b0:	f000 f852 	bl	800b858 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7b4:	4b06      	ldr	r3, [pc, #24]	; (800b7d0 <prvIdleTask+0x28>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d9f9      	bls.n	800b7b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7bc:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <prvIdleTask+0x2c>)
 800b7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7cc:	e7f0      	b.n	800b7b0 <prvIdleTask+0x8>
 800b7ce:	bf00      	nop
 800b7d0:	20000f10 	.word	0x20000f10
 800b7d4:	e000ed04 	.word	0xe000ed04

0800b7d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7de:	2300      	movs	r3, #0
 800b7e0:	607b      	str	r3, [r7, #4]
 800b7e2:	e00c      	b.n	800b7fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4a12      	ldr	r2, [pc, #72]	; (800b838 <prvInitialiseTaskLists+0x60>)
 800b7f0:	4413      	add	r3, r2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fac7 	bl	8009d86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	607b      	str	r3, [r7, #4]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b37      	cmp	r3, #55	; 0x37
 800b802:	d9ef      	bls.n	800b7e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b804:	480d      	ldr	r0, [pc, #52]	; (800b83c <prvInitialiseTaskLists+0x64>)
 800b806:	f7fe fabe 	bl	8009d86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b80a:	480d      	ldr	r0, [pc, #52]	; (800b840 <prvInitialiseTaskLists+0x68>)
 800b80c:	f7fe fabb 	bl	8009d86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b810:	480c      	ldr	r0, [pc, #48]	; (800b844 <prvInitialiseTaskLists+0x6c>)
 800b812:	f7fe fab8 	bl	8009d86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b816:	480c      	ldr	r0, [pc, #48]	; (800b848 <prvInitialiseTaskLists+0x70>)
 800b818:	f7fe fab5 	bl	8009d86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b81c:	480b      	ldr	r0, [pc, #44]	; (800b84c <prvInitialiseTaskLists+0x74>)
 800b81e:	f7fe fab2 	bl	8009d86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b822:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <prvInitialiseTaskLists+0x78>)
 800b824:	4a05      	ldr	r2, [pc, #20]	; (800b83c <prvInitialiseTaskLists+0x64>)
 800b826:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b828:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <prvInitialiseTaskLists+0x7c>)
 800b82a:	4a05      	ldr	r2, [pc, #20]	; (800b840 <prvInitialiseTaskLists+0x68>)
 800b82c:	601a      	str	r2, [r3, #0]
}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	20000f10 	.word	0x20000f10
 800b83c:	20001370 	.word	0x20001370
 800b840:	20001384 	.word	0x20001384
 800b844:	200013a0 	.word	0x200013a0
 800b848:	200013b4 	.word	0x200013b4
 800b84c:	200013cc 	.word	0x200013cc
 800b850:	20001398 	.word	0x20001398
 800b854:	2000139c 	.word	0x2000139c

0800b858 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b85e:	e019      	b.n	800b894 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b860:	f001 f9c0 	bl	800cbe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b864:	4b10      	ldr	r3, [pc, #64]	; (800b8a8 <prvCheckTasksWaitingTermination+0x50>)
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3304      	adds	r3, #4
 800b870:	4618      	mov	r0, r3
 800b872:	f7fe fb12 	bl	8009e9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b876:	4b0d      	ldr	r3, [pc, #52]	; (800b8ac <prvCheckTasksWaitingTermination+0x54>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	4a0b      	ldr	r2, [pc, #44]	; (800b8ac <prvCheckTasksWaitingTermination+0x54>)
 800b87e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b880:	4b0b      	ldr	r3, [pc, #44]	; (800b8b0 <prvCheckTasksWaitingTermination+0x58>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3b01      	subs	r3, #1
 800b886:	4a0a      	ldr	r2, [pc, #40]	; (800b8b0 <prvCheckTasksWaitingTermination+0x58>)
 800b888:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b88a:	f001 f9db 	bl	800cc44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f810 	bl	800b8b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b894:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <prvCheckTasksWaitingTermination+0x58>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e1      	bne.n	800b860 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b89c:	bf00      	nop
 800b89e:	bf00      	nop
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200013b4 	.word	0x200013b4
 800b8ac:	200013e0 	.word	0x200013e0
 800b8b0:	200013c8 	.word	0x200013c8

0800b8b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d108      	bne.n	800b8d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f001 fb78 	bl	800cfc0 <vPortFree>
				vPortFree( pxTCB );
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f001 fb75 	bl	800cfc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8d6:	e018      	b.n	800b90a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d103      	bne.n	800b8ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f001 fb6c 	bl	800cfc0 <vPortFree>
	}
 800b8e8:	e00f      	b.n	800b90a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d00a      	beq.n	800b90a <prvDeleteTCB+0x56>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	60fb      	str	r3, [r7, #12]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <prvDeleteTCB+0x54>
	}
 800b90a:	bf00      	nop
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b91a:	4b0c      	ldr	r3, [pc, #48]	; (800b94c <prvResetNextTaskUnblockTime+0x38>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d104      	bne.n	800b92e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b924:	4b0a      	ldr	r3, [pc, #40]	; (800b950 <prvResetNextTaskUnblockTime+0x3c>)
 800b926:	f04f 32ff 	mov.w	r2, #4294967295
 800b92a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b92c:	e008      	b.n	800b940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b92e:	4b07      	ldr	r3, [pc, #28]	; (800b94c <prvResetNextTaskUnblockTime+0x38>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	4a04      	ldr	r2, [pc, #16]	; (800b950 <prvResetNextTaskUnblockTime+0x3c>)
 800b93e:	6013      	str	r3, [r2, #0]
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	20001398 	.word	0x20001398
 800b950:	20001400 	.word	0x20001400

0800b954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b95a:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <xTaskGetSchedulerState+0x34>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d102      	bne.n	800b968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b962:	2301      	movs	r3, #1
 800b964:	607b      	str	r3, [r7, #4]
 800b966:	e008      	b.n	800b97a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b968:	4b08      	ldr	r3, [pc, #32]	; (800b98c <xTaskGetSchedulerState+0x38>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d102      	bne.n	800b976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b970:	2302      	movs	r3, #2
 800b972:	607b      	str	r3, [r7, #4]
 800b974:	e001      	b.n	800b97a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b976:	2300      	movs	r3, #0
 800b978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b97a:	687b      	ldr	r3, [r7, #4]
	}
 800b97c:	4618      	mov	r0, r3
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	200013ec 	.word	0x200013ec
 800b98c:	20001408 	.word	0x20001408

0800b990 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b99c:	2300      	movs	r3, #0
 800b99e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d051      	beq.n	800ba4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9aa:	4b2a      	ldr	r3, [pc, #168]	; (800ba54 <xTaskPriorityInherit+0xc4>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d241      	bcs.n	800ba38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	db06      	blt.n	800b9ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9bc:	4b25      	ldr	r3, [pc, #148]	; (800ba54 <xTaskPriorityInherit+0xc4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	6959      	ldr	r1, [r3, #20]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4a1f      	ldr	r2, [pc, #124]	; (800ba58 <xTaskPriorityInherit+0xc8>)
 800b9dc:	4413      	add	r3, r2
 800b9de:	4299      	cmp	r1, r3
 800b9e0:	d122      	bne.n	800ba28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe fa57 	bl	8009e9a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9ec:	4b19      	ldr	r3, [pc, #100]	; (800ba54 <xTaskPriorityInherit+0xc4>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fa:	4b18      	ldr	r3, [pc, #96]	; (800ba5c <xTaskPriorityInherit+0xcc>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d903      	bls.n	800ba0a <xTaskPriorityInherit+0x7a>
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	4a15      	ldr	r2, [pc, #84]	; (800ba5c <xTaskPriorityInherit+0xcc>)
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0e:	4613      	mov	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4a10      	ldr	r2, [pc, #64]	; (800ba58 <xTaskPriorityInherit+0xc8>)
 800ba18:	441a      	add	r2, r3
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4610      	mov	r0, r2
 800ba22:	f7fe f9dd 	bl	8009de0 <vListInsertEnd>
 800ba26:	e004      	b.n	800ba32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba28:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <xTaskPriorityInherit+0xc4>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ba32:	2301      	movs	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	e008      	b.n	800ba4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <xTaskPriorityInherit+0xc4>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d201      	bcs.n	800ba4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba46:	2301      	movs	r3, #1
 800ba48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	20000f0c 	.word	0x20000f0c
 800ba58:	20000f10 	.word	0x20000f10
 800ba5c:	200013e8 	.word	0x200013e8

0800ba60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d056      	beq.n	800bb24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba76:	4b2e      	ldr	r3, [pc, #184]	; (800bb30 <xTaskPriorityDisinherit+0xd0>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d00a      	beq.n	800ba96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	60fb      	str	r3, [r7, #12]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10a      	bne.n	800bab4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	60bb      	str	r3, [r7, #8]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab8:	1e5a      	subs	r2, r3, #1
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d02c      	beq.n	800bb24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d128      	bne.n	800bb24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	3304      	adds	r3, #4
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe f9df 	bl	8009e9a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf4:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <xTaskPriorityDisinherit+0xd4>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d903      	bls.n	800bb04 <xTaskPriorityDisinherit+0xa4>
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb00:	4a0c      	ldr	r2, [pc, #48]	; (800bb34 <xTaskPriorityDisinherit+0xd4>)
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb08:	4613      	mov	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4a09      	ldr	r2, [pc, #36]	; (800bb38 <xTaskPriorityDisinherit+0xd8>)
 800bb12:	441a      	add	r2, r3
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	f7fe f960 	bl	8009de0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb20:	2301      	movs	r3, #1
 800bb22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb24:	697b      	ldr	r3, [r7, #20]
	}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3718      	adds	r7, #24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	20000f0c 	.word	0x20000f0c
 800bb34:	200013e8 	.word	0x200013e8
 800bb38:	20000f10 	.word	0x20000f10

0800bb3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d06a      	beq.n	800bc2a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60fb      	str	r3, [r7, #12]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb76:	683a      	ldr	r2, [r7, #0]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d902      	bls.n	800bb82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	61fb      	str	r3, [r7, #28]
 800bb80:	e002      	b.n	800bb88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8c:	69fa      	ldr	r2, [r7, #28]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d04b      	beq.n	800bc2a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d146      	bne.n	800bc2a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb9c:	4b25      	ldr	r3, [pc, #148]	; (800bc34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d10a      	bne.n	800bbbc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	60bb      	str	r3, [r7, #8]
}
 800bbb8:	bf00      	nop
 800bbba:	e7fe      	b.n	800bbba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	69fa      	ldr	r2, [r7, #28]
 800bbc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	db04      	blt.n	800bbda <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	6959      	ldr	r1, [r3, #20]
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4a13      	ldr	r2, [pc, #76]	; (800bc38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bbea:	4413      	add	r3, r2
 800bbec:	4299      	cmp	r1, r3
 800bbee:	d11c      	bne.n	800bc2a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fe f950 	bl	8009e9a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfe:	4b0f      	ldr	r3, [pc, #60]	; (800bc3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d903      	bls.n	800bc0e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	4a0c      	ldr	r2, [pc, #48]	; (800bc3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4a07      	ldr	r2, [pc, #28]	; (800bc38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc1c:	441a      	add	r2, r3
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	3304      	adds	r3, #4
 800bc22:	4619      	mov	r1, r3
 800bc24:	4610      	mov	r0, r2
 800bc26:	f7fe f8db 	bl	8009de0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc2a:	bf00      	nop
 800bc2c:	3720      	adds	r7, #32
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	20000f0c 	.word	0x20000f0c
 800bc38:	20000f10 	.word	0x20000f10
 800bc3c:	200013e8 	.word	0x200013e8

0800bc40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc40:	b480      	push	{r7}
 800bc42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc44:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d004      	beq.n	800bc56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc4c:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc52:	3201      	adds	r2, #1
 800bc54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bc56:	4b03      	ldr	r3, [pc, #12]	; (800bc64 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc58:	681b      	ldr	r3, [r3, #0]
	}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	20000f0c 	.word	0x20000f0c

0800bc68 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bc72:	f000 ffb7 	bl	800cbe4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bc76:	4b1e      	ldr	r3, [pc, #120]	; (800bcf0 <ulTaskNotifyTake+0x88>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d113      	bne.n	800bca8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bc80:	4b1b      	ldr	r3, [pc, #108]	; (800bcf0 <ulTaskNotifyTake+0x88>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc90:	2101      	movs	r1, #1
 800bc92:	6838      	ldr	r0, [r7, #0]
 800bc94:	f000 fa1e 	bl	800c0d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bc98:	4b16      	ldr	r3, [pc, #88]	; (800bcf4 <ulTaskNotifyTake+0x8c>)
 800bc9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bca8:	f000 ffcc 	bl	800cc44 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bcac:	f000 ff9a 	bl	800cbe4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bcb0:	4b0f      	ldr	r3, [pc, #60]	; (800bcf0 <ulTaskNotifyTake+0x88>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00c      	beq.n	800bcd8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <ulTaskNotifyTake+0x88>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	655a      	str	r2, [r3, #84]	; 0x54
 800bccc:	e004      	b.n	800bcd8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bcce:	4b08      	ldr	r3, [pc, #32]	; (800bcf0 <ulTaskNotifyTake+0x88>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	3a01      	subs	r2, #1
 800bcd6:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bcd8:	4b05      	ldr	r3, [pc, #20]	; (800bcf0 <ulTaskNotifyTake+0x88>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bce2:	f000 ffaf 	bl	800cc44 <vPortExitCritical>

		return ulReturn;
 800bce6:	68fb      	ldr	r3, [r7, #12]
	}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20000f0c 	.word	0x20000f0c
 800bcf4:	e000ed04 	.word	0xe000ed04

0800bcf8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800bd06:	f000 ff6d 	bl	800cbe4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bd0a:	4b26      	ldr	r3, [pc, #152]	; (800bda4 <xTaskNotifyWait+0xac>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d01a      	beq.n	800bd4e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bd18:	4b22      	ldr	r3, [pc, #136]	; (800bda4 <xTaskNotifyWait+0xac>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	43d2      	mvns	r2, r2
 800bd22:	400a      	ands	r2, r1
 800bd24:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bd26:	4b1f      	ldr	r3, [pc, #124]	; (800bda4 <xTaskNotifyWait+0xac>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00b      	beq.n	800bd4e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd36:	2101      	movs	r1, #1
 800bd38:	6838      	ldr	r0, [r7, #0]
 800bd3a:	f000 f9cb 	bl	800c0d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bd3e:	4b1a      	ldr	r3, [pc, #104]	; (800bda8 <xTaskNotifyWait+0xb0>)
 800bd40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bd4e:	f000 ff79 	bl	800cc44 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bd52:	f000 ff47 	bl	800cbe4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bd5c:	4b11      	ldr	r3, [pc, #68]	; (800bda4 <xTaskNotifyWait+0xac>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bd66:	4b0f      	ldr	r3, [pc, #60]	; (800bda4 <xTaskNotifyWait+0xac>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d002      	beq.n	800bd7a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bd74:	2300      	movs	r3, #0
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	e008      	b.n	800bd8c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bd7a:	4b0a      	ldr	r3, [pc, #40]	; (800bda4 <xTaskNotifyWait+0xac>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	43d2      	mvns	r2, r2
 800bd84:	400a      	ands	r2, r1
 800bd86:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd8c:	4b05      	ldr	r3, [pc, #20]	; (800bda4 <xTaskNotifyWait+0xac>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bd96:	f000 ff55 	bl	800cc44 <vPortExitCritical>

		return xReturn;
 800bd9a:	697b      	ldr	r3, [r7, #20]
	}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	20000f0c 	.word	0x20000f0c
 800bda8:	e000ed04 	.word	0xe000ed04

0800bdac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b08a      	sub	sp, #40	; 0x28
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	603b      	str	r3, [r7, #0]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10a      	bne.n	800bddc <xTaskGenericNotify+0x30>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	61bb      	str	r3, [r7, #24]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bde0:	f000 ff00 	bl	800cbe4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bdf8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	2202      	movs	r2, #2
 800bdfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	2b04      	cmp	r3, #4
 800be06:	d828      	bhi.n	800be5a <xTaskGenericNotify+0xae>
 800be08:	a201      	add	r2, pc, #4	; (adr r2, 800be10 <xTaskGenericNotify+0x64>)
 800be0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0e:	bf00      	nop
 800be10:	0800be7b 	.word	0x0800be7b
 800be14:	0800be25 	.word	0x0800be25
 800be18:	0800be33 	.word	0x0800be33
 800be1c:	0800be3f 	.word	0x0800be3f
 800be20:	0800be47 	.word	0x0800be47
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	431a      	orrs	r2, r3
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800be30:	e026      	b.n	800be80 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800be32:	6a3b      	ldr	r3, [r7, #32]
 800be34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	6a3b      	ldr	r3, [r7, #32]
 800be3a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800be3c:	e020      	b.n	800be80 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800be3e:	6a3b      	ldr	r3, [r7, #32]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800be44:	e01c      	b.n	800be80 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800be46:	7ffb      	ldrb	r3, [r7, #31]
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d003      	beq.n	800be54 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800be4c:	6a3b      	ldr	r3, [r7, #32]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800be52:	e015      	b.n	800be80 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800be54:	2300      	movs	r3, #0
 800be56:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800be58:	e012      	b.n	800be80 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be62:	d00c      	beq.n	800be7e <xTaskGenericNotify+0xd2>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	617b      	str	r3, [r7, #20]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <xTaskGenericNotify+0xcc>
					break;
 800be7a:	bf00      	nop
 800be7c:	e000      	b.n	800be80 <xTaskGenericNotify+0xd4>

					break;
 800be7e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800be80:	7ffb      	ldrb	r3, [r7, #31]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d13a      	bne.n	800befc <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be86:	6a3b      	ldr	r3, [r7, #32]
 800be88:	3304      	adds	r3, #4
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fe f805 	bl	8009e9a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be94:	4b1d      	ldr	r3, [pc, #116]	; (800bf0c <xTaskGenericNotify+0x160>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d903      	bls.n	800bea4 <xTaskGenericNotify+0xf8>
 800be9c:	6a3b      	ldr	r3, [r7, #32]
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	4a1a      	ldr	r2, [pc, #104]	; (800bf0c <xTaskGenericNotify+0x160>)
 800bea2:	6013      	str	r3, [r2, #0]
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	4613      	mov	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4a17      	ldr	r2, [pc, #92]	; (800bf10 <xTaskGenericNotify+0x164>)
 800beb2:	441a      	add	r2, r3
 800beb4:	6a3b      	ldr	r3, [r7, #32]
 800beb6:	3304      	adds	r3, #4
 800beb8:	4619      	mov	r1, r3
 800beba:	4610      	mov	r0, r2
 800bebc:	f7fd ff90 	bl	8009de0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00a      	beq.n	800bede <xTaskGenericNotify+0x132>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	613b      	str	r3, [r7, #16]
}
 800beda:	bf00      	nop
 800bedc:	e7fe      	b.n	800bedc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee2:	4b0c      	ldr	r3, [pc, #48]	; (800bf14 <xTaskGenericNotify+0x168>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee8:	429a      	cmp	r2, r3
 800beea:	d907      	bls.n	800befc <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800beec:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <xTaskGenericNotify+0x16c>)
 800beee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800befc:	f000 fea2 	bl	800cc44 <vPortExitCritical>

		return xReturn;
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3728      	adds	r7, #40	; 0x28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	200013e8 	.word	0x200013e8
 800bf10:	20000f10 	.word	0x20000f10
 800bf14:	20000f0c 	.word	0x20000f0c
 800bf18:	e000ed04 	.word	0xe000ed04

0800bf1c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08e      	sub	sp, #56	; 0x38
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	603b      	str	r3, [r7, #0]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10a      	bne.n	800bf4c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3a:	f383 8811 	msr	BASEPRI, r3
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf48:	bf00      	nop
 800bf4a:	e7fe      	b.n	800bf4a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf4c:	f000 ff2c 	bl	800cda8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bf54:	f3ef 8211 	mrs	r2, BASEPRI
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	623a      	str	r2, [r7, #32]
 800bf6a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bf6c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bf84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	2b04      	cmp	r3, #4
 800bf94:	d828      	bhi.n	800bfe8 <xTaskGenericNotifyFromISR+0xcc>
 800bf96:	a201      	add	r2, pc, #4	; (adr r2, 800bf9c <xTaskGenericNotifyFromISR+0x80>)
 800bf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9c:	0800c009 	.word	0x0800c009
 800bfa0:	0800bfb1 	.word	0x0800bfb1
 800bfa4:	0800bfbf 	.word	0x0800bfbf
 800bfa8:	0800bfcb 	.word	0x0800bfcb
 800bfac:	0800bfd3 	.word	0x0800bfd3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	431a      	orrs	r2, r3
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bfbc:	e027      	b.n	800c00e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bfc8:	e021      	b.n	800c00e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bfd0:	e01d      	b.n	800c00e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bfd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d003      	beq.n	800bfe2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bfe0:	e015      	b.n	800c00e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800bfe6:	e012      	b.n	800c00e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff0:	d00c      	beq.n	800c00c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	61bb      	str	r3, [r7, #24]
}
 800c004:	bf00      	nop
 800c006:	e7fe      	b.n	800c006 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c008:	bf00      	nop
 800c00a:	e000      	b.n	800c00e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c00c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c00e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c012:	2b01      	cmp	r3, #1
 800c014:	d146      	bne.n	800c0a4 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	617b      	str	r3, [r7, #20]
}
 800c030:	bf00      	nop
 800c032:	e7fe      	b.n	800c032 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c034:	4b21      	ldr	r3, [pc, #132]	; (800c0bc <xTaskGenericNotifyFromISR+0x1a0>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d11d      	bne.n	800c078 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	3304      	adds	r3, #4
 800c040:	4618      	mov	r0, r3
 800c042:	f7fd ff2a 	bl	8009e9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04a:	4b1d      	ldr	r3, [pc, #116]	; (800c0c0 <xTaskGenericNotifyFromISR+0x1a4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d903      	bls.n	800c05a <xTaskGenericNotifyFromISR+0x13e>
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c056:	4a1a      	ldr	r2, [pc, #104]	; (800c0c0 <xTaskGenericNotifyFromISR+0x1a4>)
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05e:	4613      	mov	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4a17      	ldr	r2, [pc, #92]	; (800c0c4 <xTaskGenericNotifyFromISR+0x1a8>)
 800c068:	441a      	add	r2, r3
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	3304      	adds	r3, #4
 800c06e:	4619      	mov	r1, r3
 800c070:	4610      	mov	r0, r2
 800c072:	f7fd feb5 	bl	8009de0 <vListInsertEnd>
 800c076:	e005      	b.n	800c084 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	3318      	adds	r3, #24
 800c07c:	4619      	mov	r1, r3
 800c07e:	4812      	ldr	r0, [pc, #72]	; (800c0c8 <xTaskGenericNotifyFromISR+0x1ac>)
 800c080:	f7fd feae 	bl	8009de0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c088:	4b10      	ldr	r3, [pc, #64]	; (800c0cc <xTaskGenericNotifyFromISR+0x1b0>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08e:	429a      	cmp	r2, r3
 800c090:	d908      	bls.n	800c0a4 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c09a:	2201      	movs	r2, #1
 800c09c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c09e:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <xTaskGenericNotifyFromISR+0x1b4>)
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	f383 8811 	msr	BASEPRI, r3
}
 800c0ae:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3738      	adds	r7, #56	; 0x38
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20001408 	.word	0x20001408
 800c0c0:	200013e8 	.word	0x200013e8
 800c0c4:	20000f10 	.word	0x20000f10
 800c0c8:	200013a0 	.word	0x200013a0
 800c0cc:	20000f0c 	.word	0x20000f0c
 800c0d0:	200013f4 	.word	0x200013f4

0800c0d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0de:	4b21      	ldr	r3, [pc, #132]	; (800c164 <prvAddCurrentTaskToDelayedList+0x90>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0e4:	4b20      	ldr	r3, [pc, #128]	; (800c168 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fd fed5 	bl	8009e9a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f6:	d10a      	bne.n	800c10e <prvAddCurrentTaskToDelayedList+0x3a>
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d007      	beq.n	800c10e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0fe:	4b1a      	ldr	r3, [pc, #104]	; (800c168 <prvAddCurrentTaskToDelayedList+0x94>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3304      	adds	r3, #4
 800c104:	4619      	mov	r1, r3
 800c106:	4819      	ldr	r0, [pc, #100]	; (800c16c <prvAddCurrentTaskToDelayedList+0x98>)
 800c108:	f7fd fe6a 	bl	8009de0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c10c:	e026      	b.n	800c15c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4413      	add	r3, r2
 800c114:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c116:	4b14      	ldr	r3, [pc, #80]	; (800c168 <prvAddCurrentTaskToDelayedList+0x94>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	429a      	cmp	r2, r3
 800c124:	d209      	bcs.n	800c13a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c126:	4b12      	ldr	r3, [pc, #72]	; (800c170 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	4b0f      	ldr	r3, [pc, #60]	; (800c168 <prvAddCurrentTaskToDelayedList+0x94>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3304      	adds	r3, #4
 800c130:	4619      	mov	r1, r3
 800c132:	4610      	mov	r0, r2
 800c134:	f7fd fe78 	bl	8009e28 <vListInsert>
}
 800c138:	e010      	b.n	800c15c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c13a:	4b0e      	ldr	r3, [pc, #56]	; (800c174 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <prvAddCurrentTaskToDelayedList+0x94>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	3304      	adds	r3, #4
 800c144:	4619      	mov	r1, r3
 800c146:	4610      	mov	r0, r2
 800c148:	f7fd fe6e 	bl	8009e28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	429a      	cmp	r2, r3
 800c154:	d202      	bcs.n	800c15c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c156:	4a08      	ldr	r2, [pc, #32]	; (800c178 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	6013      	str	r3, [r2, #0]
}
 800c15c:	bf00      	nop
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	200013e4 	.word	0x200013e4
 800c168:	20000f0c 	.word	0x20000f0c
 800c16c:	200013cc 	.word	0x200013cc
 800c170:	2000139c 	.word	0x2000139c
 800c174:	20001398 	.word	0x20001398
 800c178:	20001400 	.word	0x20001400

0800c17c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08a      	sub	sp, #40	; 0x28
 800c180:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c182:	2300      	movs	r3, #0
 800c184:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c186:	f000 fba1 	bl	800c8cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c18a:	4b1c      	ldr	r3, [pc, #112]	; (800c1fc <xTimerCreateTimerTask+0x80>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d021      	beq.n	800c1d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c192:	2300      	movs	r3, #0
 800c194:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c196:	2300      	movs	r3, #0
 800c198:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c19a:	1d3a      	adds	r2, r7, #4
 800c19c:	f107 0108 	add.w	r1, r7, #8
 800c1a0:	f107 030c 	add.w	r3, r7, #12
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fd fd83 	bl	8009cb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	9202      	str	r2, [sp, #8]
 800c1b2:	9301      	str	r3, [sp, #4]
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	460a      	mov	r2, r1
 800c1bc:	4910      	ldr	r1, [pc, #64]	; (800c200 <xTimerCreateTimerTask+0x84>)
 800c1be:	4811      	ldr	r0, [pc, #68]	; (800c204 <xTimerCreateTimerTask+0x88>)
 800c1c0:	f7fe fd98 	bl	800acf4 <xTaskCreateStatic>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	4a10      	ldr	r2, [pc, #64]	; (800c208 <xTimerCreateTimerTask+0x8c>)
 800c1c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c1ca:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <xTimerCreateTimerTask+0x8c>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d001      	beq.n	800c1d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10a      	bne.n	800c1f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	613b      	str	r3, [r7, #16]
}
 800c1ee:	bf00      	nop
 800c1f0:	e7fe      	b.n	800c1f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c1f2:	697b      	ldr	r3, [r7, #20]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	2000143c 	.word	0x2000143c
 800c200:	0800ee20 	.word	0x0800ee20
 800c204:	0800c475 	.word	0x0800c475
 800c208:	20001440 	.word	0x20001440

0800c20c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af02      	add	r7, sp, #8
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c21a:	202c      	movs	r0, #44	; 0x2c
 800c21c:	f000 fe04 	bl	800ce28 <pvPortMalloc>
 800c220:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00d      	beq.n	800c244 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f000 f843 	bl	800c2ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c244:	697b      	ldr	r3, [r7, #20]
	}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b08a      	sub	sp, #40	; 0x28
 800c252:	af02      	add	r7, sp, #8
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	60b9      	str	r1, [r7, #8]
 800c258:	607a      	str	r2, [r7, #4]
 800c25a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c25c:	232c      	movs	r3, #44	; 0x2c
 800c25e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	2b2c      	cmp	r3, #44	; 0x2c
 800c264:	d00a      	beq.n	800c27c <xTimerCreateStatic+0x2e>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	61bb      	str	r3, [r7, #24]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c27c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10a      	bne.n	800c29a <xTimerCreateStatic+0x4c>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	617b      	str	r3, [r7, #20]
}
 800c296:	bf00      	nop
 800c298:	e7fe      	b.n	800c298 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00d      	beq.n	800c2c0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	68b9      	ldr	r1, [r7, #8]
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 f805 	bl	800c2ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
	}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3720      	adds	r7, #32
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b086      	sub	sp, #24
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
 800c2d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10a      	bne.n	800c2f4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	617b      	str	r3, [r7, #20]
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d01e      	beq.n	800c338 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c2fa:	f000 fae7 	bl	800c8cc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	6a3a      	ldr	r2, [r7, #32]
 800c314:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c318:	3304      	adds	r3, #4
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fd fd53 	bl	8009dc6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d008      	beq.n	800c338 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c32c:	f043 0304 	orr.w	r3, r3, #4
 800c330:	b2da      	uxtb	r2, r3
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c338:	bf00      	nop
 800c33a:	3718      	adds	r7, #24
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b08a      	sub	sp, #40	; 0x28
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c34e:	2300      	movs	r3, #0
 800c350:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	623b      	str	r3, [r7, #32]
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c36e:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <xTimerGenericCommand+0x98>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d02a      	beq.n	800c3cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b05      	cmp	r3, #5
 800c386:	dc18      	bgt.n	800c3ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c388:	f7ff fae4 	bl	800b954 <xTaskGetSchedulerState>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d109      	bne.n	800c3a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c392:	4b11      	ldr	r3, [pc, #68]	; (800c3d8 <xTimerGenericCommand+0x98>)
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	f107 0110 	add.w	r1, r7, #16
 800c39a:	2300      	movs	r3, #0
 800c39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c39e:	f7fd ff4f 	bl	800a240 <xQueueGenericSend>
 800c3a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c3a4:	e012      	b.n	800c3cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3a6:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <xTimerGenericCommand+0x98>)
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	f107 0110 	add.w	r1, r7, #16
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f7fd ff45 	bl	800a240 <xQueueGenericSend>
 800c3b6:	6278      	str	r0, [r7, #36]	; 0x24
 800c3b8:	e008      	b.n	800c3cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3ba:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <xTimerGenericCommand+0x98>)
 800c3bc:	6818      	ldr	r0, [r3, #0]
 800c3be:	f107 0110 	add.w	r1, r7, #16
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	f7fe f839 	bl	800a43c <xQueueGenericSendFromISR>
 800c3ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3728      	adds	r7, #40	; 0x28
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	2000143c 	.word	0x2000143c

0800c3dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af02      	add	r7, sp, #8
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e6:	4b22      	ldr	r3, [pc, #136]	; (800c470 <prvProcessExpiredTimer+0x94>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fd fd50 	bl	8009e9a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d022      	beq.n	800c44e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	699a      	ldr	r2, [r3, #24]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	18d1      	adds	r1, r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	6978      	ldr	r0, [r7, #20]
 800c416:	f000 f8d1 	bl	800c5bc <prvInsertTimerInActiveList>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d01f      	beq.n	800c460 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c420:	2300      	movs	r3, #0
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	2300      	movs	r3, #0
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	2100      	movs	r1, #0
 800c42a:	6978      	ldr	r0, [r7, #20]
 800c42c:	f7ff ff88 	bl	800c340 <xTimerGenericCommand>
 800c430:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d113      	bne.n	800c460 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	60fb      	str	r3, [r7, #12]
}
 800c44a:	bf00      	nop
 800c44c:	e7fe      	b.n	800c44c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c454:	f023 0301 	bic.w	r3, r3, #1
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	6a1b      	ldr	r3, [r3, #32]
 800c464:	6978      	ldr	r0, [r7, #20]
 800c466:	4798      	blx	r3
}
 800c468:	bf00      	nop
 800c46a:	3718      	adds	r7, #24
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	20001434 	.word	0x20001434

0800c474 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c47c:	f107 0308 	add.w	r3, r7, #8
 800c480:	4618      	mov	r0, r3
 800c482:	f000 f857 	bl	800c534 <prvGetNextExpireTime>
 800c486:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	4619      	mov	r1, r3
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 f803 	bl	800c498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c492:	f000 f8d5 	bl	800c640 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c496:	e7f1      	b.n	800c47c <prvTimerTask+0x8>

0800c498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4a2:	f7fe fe63 	bl	800b16c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4a6:	f107 0308 	add.w	r3, r7, #8
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 f866 	bl	800c57c <prvSampleTimeNow>
 800c4b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d130      	bne.n	800c51a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10a      	bne.n	800c4d4 <prvProcessTimerOrBlockTask+0x3c>
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d806      	bhi.n	800c4d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c4c6:	f7fe fe5f 	bl	800b188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4ca:	68f9      	ldr	r1, [r7, #12]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff ff85 	bl	800c3dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4d2:	e024      	b.n	800c51e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d008      	beq.n	800c4ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4da:	4b13      	ldr	r3, [pc, #76]	; (800c528 <prvProcessTimerOrBlockTask+0x90>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <prvProcessTimerOrBlockTask+0x50>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e000      	b.n	800c4ea <prvProcessTimerOrBlockTask+0x52>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4ec:	4b0f      	ldr	r3, [pc, #60]	; (800c52c <prvProcessTimerOrBlockTask+0x94>)
 800c4ee:	6818      	ldr	r0, [r3, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	683a      	ldr	r2, [r7, #0]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	f7fe fbc7 	bl	800ac8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4fe:	f7fe fe43 	bl	800b188 <xTaskResumeAll>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10a      	bne.n	800c51e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c508:	4b09      	ldr	r3, [pc, #36]	; (800c530 <prvProcessTimerOrBlockTask+0x98>)
 800c50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	f3bf 8f6f 	isb	sy
}
 800c518:	e001      	b.n	800c51e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c51a:	f7fe fe35 	bl	800b188 <xTaskResumeAll>
}
 800c51e:	bf00      	nop
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20001438 	.word	0x20001438
 800c52c:	2000143c 	.word	0x2000143c
 800c530:	e000ed04 	.word	0xe000ed04

0800c534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c53c:	4b0e      	ldr	r3, [pc, #56]	; (800c578 <prvGetNextExpireTime+0x44>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <prvGetNextExpireTime+0x16>
 800c546:	2201      	movs	r2, #1
 800c548:	e000      	b.n	800c54c <prvGetNextExpireTime+0x18>
 800c54a:	2200      	movs	r2, #0
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d105      	bne.n	800c564 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c558:	4b07      	ldr	r3, [pc, #28]	; (800c578 <prvGetNextExpireTime+0x44>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	e001      	b.n	800c568 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c564:	2300      	movs	r3, #0
 800c566:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c568:	68fb      	ldr	r3, [r7, #12]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	20001434 	.word	0x20001434

0800c57c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c584:	f7fe fe9e 	bl	800b2c4 <xTaskGetTickCount>
 800c588:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c58a:	4b0b      	ldr	r3, [pc, #44]	; (800c5b8 <prvSampleTimeNow+0x3c>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	429a      	cmp	r2, r3
 800c592:	d205      	bcs.n	800c5a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c594:	f000 f936 	bl	800c804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	601a      	str	r2, [r3, #0]
 800c59e:	e002      	b.n	800c5a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5a6:	4a04      	ldr	r2, [pc, #16]	; (800c5b8 <prvSampleTimeNow+0x3c>)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20001444 	.word	0x20001444

0800c5bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
 800c5c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d812      	bhi.n	800c608 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	1ad2      	subs	r2, r2, r3
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d302      	bcc.n	800c5f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	617b      	str	r3, [r7, #20]
 800c5f4:	e01b      	b.n	800c62e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5f6:	4b10      	ldr	r3, [pc, #64]	; (800c638 <prvInsertTimerInActiveList+0x7c>)
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	4619      	mov	r1, r3
 800c600:	4610      	mov	r0, r2
 800c602:	f7fd fc11 	bl	8009e28 <vListInsert>
 800c606:	e012      	b.n	800c62e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d206      	bcs.n	800c61e <prvInsertTimerInActiveList+0x62>
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	429a      	cmp	r2, r3
 800c616:	d302      	bcc.n	800c61e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c618:	2301      	movs	r3, #1
 800c61a:	617b      	str	r3, [r7, #20]
 800c61c:	e007      	b.n	800c62e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c61e:	4b07      	ldr	r3, [pc, #28]	; (800c63c <prvInsertTimerInActiveList+0x80>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	3304      	adds	r3, #4
 800c626:	4619      	mov	r1, r3
 800c628:	4610      	mov	r0, r2
 800c62a:	f7fd fbfd 	bl	8009e28 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c62e:	697b      	ldr	r3, [r7, #20]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	20001438 	.word	0x20001438
 800c63c:	20001434 	.word	0x20001434

0800c640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08e      	sub	sp, #56	; 0x38
 800c644:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c646:	e0ca      	b.n	800c7de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	da18      	bge.n	800c680 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c64e:	1d3b      	adds	r3, r7, #4
 800c650:	3304      	adds	r3, #4
 800c652:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10a      	bne.n	800c670 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	61fb      	str	r3, [r7, #28]
}
 800c66c:	bf00      	nop
 800c66e:	e7fe      	b.n	800c66e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c676:	6850      	ldr	r0, [r2, #4]
 800c678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c67a:	6892      	ldr	r2, [r2, #8]
 800c67c:	4611      	mov	r1, r2
 800c67e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	f2c0 80ab 	blt.w	800c7de <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	695b      	ldr	r3, [r3, #20]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d004      	beq.n	800c69e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	3304      	adds	r3, #4
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fd fbfe 	bl	8009e9a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c69e:	463b      	mov	r3, r7
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7ff ff6b 	bl	800c57c <prvSampleTimeNow>
 800c6a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b09      	cmp	r3, #9
 800c6ac:	f200 8096 	bhi.w	800c7dc <prvProcessReceivedCommands+0x19c>
 800c6b0:	a201      	add	r2, pc, #4	; (adr r2, 800c6b8 <prvProcessReceivedCommands+0x78>)
 800c6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b6:	bf00      	nop
 800c6b8:	0800c6e1 	.word	0x0800c6e1
 800c6bc:	0800c6e1 	.word	0x0800c6e1
 800c6c0:	0800c6e1 	.word	0x0800c6e1
 800c6c4:	0800c755 	.word	0x0800c755
 800c6c8:	0800c769 	.word	0x0800c769
 800c6cc:	0800c7b3 	.word	0x0800c7b3
 800c6d0:	0800c6e1 	.word	0x0800c6e1
 800c6d4:	0800c6e1 	.word	0x0800c6e1
 800c6d8:	0800c755 	.word	0x0800c755
 800c6dc:	0800c769 	.word	0x0800c769
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6e6:	f043 0301 	orr.w	r3, r3, #1
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	18d1      	adds	r1, r2, r3
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c700:	f7ff ff5c 	bl	800c5bc <prvInsertTimerInActiveList>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d069      	beq.n	800c7de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c710:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d05e      	beq.n	800c7de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	441a      	add	r2, r3
 800c728:	2300      	movs	r3, #0
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	2300      	movs	r3, #0
 800c72e:	2100      	movs	r1, #0
 800c730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c732:	f7ff fe05 	bl	800c340 <xTimerGenericCommand>
 800c736:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d14f      	bne.n	800c7de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	61bb      	str	r3, [r7, #24]
}
 800c750:	bf00      	nop
 800c752:	e7fe      	b.n	800c752 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c75a:	f023 0301 	bic.w	r3, r3, #1
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c766:	e03a      	b.n	800c7de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c76e:	f043 0301 	orr.w	r3, r3, #1
 800c772:	b2da      	uxtb	r2, r3
 800c774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10a      	bne.n	800c79e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78c:	f383 8811 	msr	BASEPRI, r3
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	f3bf 8f4f 	dsb	sy
 800c798:	617b      	str	r3, [r7, #20]
}
 800c79a:	bf00      	nop
 800c79c:	e7fe      	b.n	800c79c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	699a      	ldr	r2, [r3, #24]
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	18d1      	adds	r1, r2, r3
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ac:	f7ff ff06 	bl	800c5bc <prvInsertTimerInActiveList>
					break;
 800c7b0:	e015      	b.n	800c7de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b8:	f003 0302 	and.w	r3, r3, #2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d103      	bne.n	800c7c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c7c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7c2:	f000 fbfd 	bl	800cfc0 <vPortFree>
 800c7c6:	e00a      	b.n	800c7de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7ce:	f023 0301 	bic.w	r3, r3, #1
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7da:	e000      	b.n	800c7de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c7dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7de:	4b08      	ldr	r3, [pc, #32]	; (800c800 <prvProcessReceivedCommands+0x1c0>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	1d39      	adds	r1, r7, #4
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fd fec4 	bl	800a574 <xQueueReceive>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f47f af2a 	bne.w	800c648 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	3730      	adds	r7, #48	; 0x30
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	2000143c 	.word	0x2000143c

0800c804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c80a:	e048      	b.n	800c89e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c80c:	4b2d      	ldr	r3, [pc, #180]	; (800c8c4 <prvSwitchTimerLists+0xc0>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c816:	4b2b      	ldr	r3, [pc, #172]	; (800c8c4 <prvSwitchTimerLists+0xc0>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	3304      	adds	r3, #4
 800c824:	4618      	mov	r0, r3
 800c826:	f7fd fb38 	bl	8009e9a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d02e      	beq.n	800c89e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	4413      	add	r3, r2
 800c848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d90e      	bls.n	800c870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c85e:	4b19      	ldr	r3, [pc, #100]	; (800c8c4 <prvSwitchTimerLists+0xc0>)
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3304      	adds	r3, #4
 800c866:	4619      	mov	r1, r3
 800c868:	4610      	mov	r0, r2
 800c86a:	f7fd fadd 	bl	8009e28 <vListInsert>
 800c86e:	e016      	b.n	800c89e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c870:	2300      	movs	r3, #0
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	2300      	movs	r3, #0
 800c876:	693a      	ldr	r2, [r7, #16]
 800c878:	2100      	movs	r1, #0
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f7ff fd60 	bl	800c340 <xTimerGenericCommand>
 800c880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	603b      	str	r3, [r7, #0]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c89e:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <prvSwitchTimerLists+0xc0>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1b1      	bne.n	800c80c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8a8:	4b06      	ldr	r3, [pc, #24]	; (800c8c4 <prvSwitchTimerLists+0xc0>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8ae:	4b06      	ldr	r3, [pc, #24]	; (800c8c8 <prvSwitchTimerLists+0xc4>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a04      	ldr	r2, [pc, #16]	; (800c8c4 <prvSwitchTimerLists+0xc0>)
 800c8b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8b6:	4a04      	ldr	r2, [pc, #16]	; (800c8c8 <prvSwitchTimerLists+0xc4>)
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	6013      	str	r3, [r2, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	20001434 	.word	0x20001434
 800c8c8:	20001438 	.word	0x20001438

0800c8cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8d2:	f000 f987 	bl	800cbe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8d6:	4b15      	ldr	r3, [pc, #84]	; (800c92c <prvCheckForValidListAndQueue+0x60>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d120      	bne.n	800c920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8de:	4814      	ldr	r0, [pc, #80]	; (800c930 <prvCheckForValidListAndQueue+0x64>)
 800c8e0:	f7fd fa51 	bl	8009d86 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8e4:	4813      	ldr	r0, [pc, #76]	; (800c934 <prvCheckForValidListAndQueue+0x68>)
 800c8e6:	f7fd fa4e 	bl	8009d86 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8ea:	4b13      	ldr	r3, [pc, #76]	; (800c938 <prvCheckForValidListAndQueue+0x6c>)
 800c8ec:	4a10      	ldr	r2, [pc, #64]	; (800c930 <prvCheckForValidListAndQueue+0x64>)
 800c8ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8f0:	4b12      	ldr	r3, [pc, #72]	; (800c93c <prvCheckForValidListAndQueue+0x70>)
 800c8f2:	4a10      	ldr	r2, [pc, #64]	; (800c934 <prvCheckForValidListAndQueue+0x68>)
 800c8f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	4b11      	ldr	r3, [pc, #68]	; (800c940 <prvCheckForValidListAndQueue+0x74>)
 800c8fc:	4a11      	ldr	r2, [pc, #68]	; (800c944 <prvCheckForValidListAndQueue+0x78>)
 800c8fe:	2110      	movs	r1, #16
 800c900:	200a      	movs	r0, #10
 800c902:	f7fd fb5d 	bl	8009fc0 <xQueueGenericCreateStatic>
 800c906:	4603      	mov	r3, r0
 800c908:	4a08      	ldr	r2, [pc, #32]	; (800c92c <prvCheckForValidListAndQueue+0x60>)
 800c90a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c90c:	4b07      	ldr	r3, [pc, #28]	; (800c92c <prvCheckForValidListAndQueue+0x60>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d005      	beq.n	800c920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c914:	4b05      	ldr	r3, [pc, #20]	; (800c92c <prvCheckForValidListAndQueue+0x60>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	490b      	ldr	r1, [pc, #44]	; (800c948 <prvCheckForValidListAndQueue+0x7c>)
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe f962 	bl	800abe4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c920:	f000 f990 	bl	800cc44 <vPortExitCritical>
}
 800c924:	bf00      	nop
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	2000143c 	.word	0x2000143c
 800c930:	2000140c 	.word	0x2000140c
 800c934:	20001420 	.word	0x20001420
 800c938:	20001434 	.word	0x20001434
 800c93c:	20001438 	.word	0x20001438
 800c940:	200014e8 	.word	0x200014e8
 800c944:	20001448 	.word	0x20001448
 800c948:	0800ee28 	.word	0x0800ee28

0800c94c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10a      	bne.n	800c974 <pvTimerGetTimerID+0x28>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60fb      	str	r3, [r7, #12]
}
 800c970:	bf00      	nop
 800c972:	e7fe      	b.n	800c972 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c974:	f000 f936 	bl	800cbe4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	69db      	ldr	r3, [r3, #28]
 800c97c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c97e:	f000 f961 	bl	800cc44 <vPortExitCritical>

	return pvReturn;
 800c982:	693b      	ldr	r3, [r7, #16]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3b04      	subs	r3, #4
 800c99c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3b04      	subs	r3, #4
 800c9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	f023 0201 	bic.w	r2, r3, #1
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3b04      	subs	r3, #4
 800c9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9bc:	4a0c      	ldr	r2, [pc, #48]	; (800c9f0 <pxPortInitialiseStack+0x64>)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3b14      	subs	r3, #20
 800c9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3b04      	subs	r3, #4
 800c9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f06f 0202 	mvn.w	r2, #2
 800c9da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3b20      	subs	r3, #32
 800c9e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	0800c9f5 	.word	0x0800c9f5

0800c9f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9fe:	4b12      	ldr	r3, [pc, #72]	; (800ca48 <prvTaskExitError+0x54>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca06:	d00a      	beq.n	800ca1e <prvTaskExitError+0x2a>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	60fb      	str	r3, [r7, #12]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <prvTaskExitError+0x28>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60bb      	str	r3, [r7, #8]
}
 800ca30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca32:	bf00      	nop
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0fc      	beq.n	800ca34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca3a:	bf00      	nop
 800ca3c:	bf00      	nop
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	2000006c 	.word	0x2000006c
 800ca4c:	00000000 	.word	0x00000000

0800ca50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <pxCurrentTCBConst2>)
 800ca52:	6819      	ldr	r1, [r3, #0]
 800ca54:	6808      	ldr	r0, [r1, #0]
 800ca56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5a:	f380 8809 	msr	PSP, r0
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f04f 0000 	mov.w	r0, #0
 800ca66:	f380 8811 	msr	BASEPRI, r0
 800ca6a:	4770      	bx	lr
 800ca6c:	f3af 8000 	nop.w

0800ca70 <pxCurrentTCBConst2>:
 800ca70:	20000f0c 	.word	0x20000f0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop

0800ca78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca78:	4808      	ldr	r0, [pc, #32]	; (800ca9c <prvPortStartFirstTask+0x24>)
 800ca7a:	6800      	ldr	r0, [r0, #0]
 800ca7c:	6800      	ldr	r0, [r0, #0]
 800ca7e:	f380 8808 	msr	MSP, r0
 800ca82:	f04f 0000 	mov.w	r0, #0
 800ca86:	f380 8814 	msr	CONTROL, r0
 800ca8a:	b662      	cpsie	i
 800ca8c:	b661      	cpsie	f
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	df00      	svc	0
 800ca98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca9a:	bf00      	nop
 800ca9c:	e000ed08 	.word	0xe000ed08

0800caa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800caa6:	4b46      	ldr	r3, [pc, #280]	; (800cbc0 <xPortStartScheduler+0x120>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a46      	ldr	r2, [pc, #280]	; (800cbc4 <xPortStartScheduler+0x124>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d10a      	bne.n	800cac6 <xPortStartScheduler+0x26>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	613b      	str	r3, [r7, #16]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cac6:	4b3e      	ldr	r3, [pc, #248]	; (800cbc0 <xPortStartScheduler+0x120>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a3f      	ldr	r2, [pc, #252]	; (800cbc8 <xPortStartScheduler+0x128>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d10a      	bne.n	800cae6 <xPortStartScheduler+0x46>
	__asm volatile
 800cad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad4:	f383 8811 	msr	BASEPRI, r3
 800cad8:	f3bf 8f6f 	isb	sy
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	60fb      	str	r3, [r7, #12]
}
 800cae2:	bf00      	nop
 800cae4:	e7fe      	b.n	800cae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cae6:	4b39      	ldr	r3, [pc, #228]	; (800cbcc <xPortStartScheduler+0x12c>)
 800cae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	22ff      	movs	r2, #255	; 0xff
 800caf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	4b31      	ldr	r3, [pc, #196]	; (800cbd0 <xPortStartScheduler+0x130>)
 800cb0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb0e:	4b31      	ldr	r3, [pc, #196]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb10:	2207      	movs	r2, #7
 800cb12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb14:	e009      	b.n	800cb2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb16:	4b2f      	ldr	r3, [pc, #188]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	4a2d      	ldr	r2, [pc, #180]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb32:	2b80      	cmp	r3, #128	; 0x80
 800cb34:	d0ef      	beq.n	800cb16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb36:	4b27      	ldr	r3, [pc, #156]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f1c3 0307 	rsb	r3, r3, #7
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	d00a      	beq.n	800cb58 <xPortStartScheduler+0xb8>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	60bb      	str	r3, [r7, #8]
}
 800cb54:	bf00      	nop
 800cb56:	e7fe      	b.n	800cb56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb58:	4b1e      	ldr	r3, [pc, #120]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	4a1d      	ldr	r2, [pc, #116]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb62:	4b1c      	ldr	r3, [pc, #112]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb6a:	4a1a      	ldr	r2, [pc, #104]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb76:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a17      	ldr	r2, [pc, #92]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb82:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a14      	ldr	r2, [pc, #80]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb8e:	f000 f8dd 	bl	800cd4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb92:	4b12      	ldr	r3, [pc, #72]	; (800cbdc <xPortStartScheduler+0x13c>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb98:	f000 f8fc 	bl	800cd94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb9c:	4b10      	ldr	r3, [pc, #64]	; (800cbe0 <xPortStartScheduler+0x140>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a0f      	ldr	r2, [pc, #60]	; (800cbe0 <xPortStartScheduler+0x140>)
 800cba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cba8:	f7ff ff66 	bl	800ca78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbac:	f7fe fc66 	bl	800b47c <vTaskSwitchContext>
	prvTaskExitError();
 800cbb0:	f7ff ff20 	bl	800c9f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	e000ed00 	.word	0xe000ed00
 800cbc4:	410fc271 	.word	0x410fc271
 800cbc8:	410fc270 	.word	0x410fc270
 800cbcc:	e000e400 	.word	0xe000e400
 800cbd0:	20001538 	.word	0x20001538
 800cbd4:	2000153c 	.word	0x2000153c
 800cbd8:	e000ed20 	.word	0xe000ed20
 800cbdc:	2000006c 	.word	0x2000006c
 800cbe0:	e000ef34 	.word	0xe000ef34

0800cbe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	607b      	str	r3, [r7, #4]
}
 800cbfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a0d      	ldr	r2, [pc, #52]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc08:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d10f      	bne.n	800cc30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc10:	4b0b      	ldr	r3, [pc, #44]	; (800cc40 <vPortEnterCritical+0x5c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00a      	beq.n	800cc30 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	603b      	str	r3, [r7, #0]
}
 800cc2c:	bf00      	nop
 800cc2e:	e7fe      	b.n	800cc2e <vPortEnterCritical+0x4a>
	}
}
 800cc30:	bf00      	nop
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	2000006c 	.word	0x2000006c
 800cc40:	e000ed04 	.word	0xe000ed04

0800cc44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc4a:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <vPortExitCritical+0x50>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10a      	bne.n	800cc68 <vPortExitCritical+0x24>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	607b      	str	r3, [r7, #4]
}
 800cc64:	bf00      	nop
 800cc66:	e7fe      	b.n	800cc66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <vPortExitCritical+0x50>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	4a09      	ldr	r2, [pc, #36]	; (800cc94 <vPortExitCritical+0x50>)
 800cc70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc72:	4b08      	ldr	r3, [pc, #32]	; (800cc94 <vPortExitCritical+0x50>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d105      	bne.n	800cc86 <vPortExitCritical+0x42>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	f383 8811 	msr	BASEPRI, r3
}
 800cc84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	2000006c 	.word	0x2000006c
	...

0800cca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cca0:	f3ef 8009 	mrs	r0, PSP
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	4b15      	ldr	r3, [pc, #84]	; (800cd00 <pxCurrentTCBConst>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	f01e 0f10 	tst.w	lr, #16
 800ccb0:	bf08      	it	eq
 800ccb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ccb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccba:	6010      	str	r0, [r2, #0]
 800ccbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ccc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ccc4:	f380 8811 	msr	BASEPRI, r0
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f7fe fbd4 	bl	800b47c <vTaskSwitchContext>
 800ccd4:	f04f 0000 	mov.w	r0, #0
 800ccd8:	f380 8811 	msr	BASEPRI, r0
 800ccdc:	bc09      	pop	{r0, r3}
 800ccde:	6819      	ldr	r1, [r3, #0]
 800cce0:	6808      	ldr	r0, [r1, #0]
 800cce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce6:	f01e 0f10 	tst.w	lr, #16
 800ccea:	bf08      	it	eq
 800ccec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ccf0:	f380 8809 	msr	PSP, r0
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop
 800ccfc:	f3af 8000 	nop.w

0800cd00 <pxCurrentTCBConst>:
 800cd00:	20000f0c 	.word	0x20000f0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop

0800cd08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	607b      	str	r3, [r7, #4]
}
 800cd20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd22:	f7fe faf1 	bl	800b308 <xTaskIncrementTick>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d003      	beq.n	800cd34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd2c:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <xPortSysTickHandler+0x40>)
 800cd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	2300      	movs	r3, #0
 800cd36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	f383 8811 	msr	BASEPRI, r3
}
 800cd3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd40:	bf00      	nop
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	e000ed04 	.word	0xe000ed04

0800cd4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd50:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <vPortSetupTimerInterrupt+0x34>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd56:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <vPortSetupTimerInterrupt+0x38>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd5c:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <vPortSetupTimerInterrupt+0x3c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a0a      	ldr	r2, [pc, #40]	; (800cd8c <vPortSetupTimerInterrupt+0x40>)
 800cd62:	fba2 2303 	umull	r2, r3, r2, r3
 800cd66:	099b      	lsrs	r3, r3, #6
 800cd68:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <vPortSetupTimerInterrupt+0x44>)
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd6e:	4b04      	ldr	r3, [pc, #16]	; (800cd80 <vPortSetupTimerInterrupt+0x34>)
 800cd70:	2207      	movs	r2, #7
 800cd72:	601a      	str	r2, [r3, #0]
}
 800cd74:	bf00      	nop
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	e000e010 	.word	0xe000e010
 800cd84:	e000e018 	.word	0xe000e018
 800cd88:	20000060 	.word	0x20000060
 800cd8c:	10624dd3 	.word	0x10624dd3
 800cd90:	e000e014 	.word	0xe000e014

0800cd94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cda4 <vPortEnableVFP+0x10>
 800cd98:	6801      	ldr	r1, [r0, #0]
 800cd9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd9e:	6001      	str	r1, [r0, #0]
 800cda0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cda2:	bf00      	nop
 800cda4:	e000ed88 	.word	0xe000ed88

0800cda8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdae:	f3ef 8305 	mrs	r3, IPSR
 800cdb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b0f      	cmp	r3, #15
 800cdb8:	d914      	bls.n	800cde4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdba:	4a17      	ldr	r2, [pc, #92]	; (800ce18 <vPortValidateInterruptPriority+0x70>)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdc4:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <vPortValidateInterruptPriority+0x74>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	7afa      	ldrb	r2, [r7, #11]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d20a      	bcs.n	800cde4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	607b      	str	r3, [r7, #4]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cde4:	4b0e      	ldr	r3, [pc, #56]	; (800ce20 <vPortValidateInterruptPriority+0x78>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdec:	4b0d      	ldr	r3, [pc, #52]	; (800ce24 <vPortValidateInterruptPriority+0x7c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d90a      	bls.n	800ce0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	603b      	str	r3, [r7, #0]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <vPortValidateInterruptPriority+0x60>
	}
 800ce0a:	bf00      	nop
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	e000e3f0 	.word	0xe000e3f0
 800ce1c:	20001538 	.word	0x20001538
 800ce20:	e000ed0c 	.word	0xe000ed0c
 800ce24:	2000153c 	.word	0x2000153c

0800ce28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08a      	sub	sp, #40	; 0x28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce30:	2300      	movs	r3, #0
 800ce32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce34:	f7fe f99a 	bl	800b16c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce38:	4b5b      	ldr	r3, [pc, #364]	; (800cfa8 <pvPortMalloc+0x180>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce40:	f000 f920 	bl	800d084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce44:	4b59      	ldr	r3, [pc, #356]	; (800cfac <pvPortMalloc+0x184>)
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f040 8093 	bne.w	800cf78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d01d      	beq.n	800ce94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce58:	2208      	movs	r2, #8
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f003 0307 	and.w	r3, r3, #7
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d014      	beq.n	800ce94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f023 0307 	bic.w	r3, r3, #7
 800ce70:	3308      	adds	r3, #8
 800ce72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f003 0307 	and.w	r3, r3, #7
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00a      	beq.n	800ce94 <pvPortMalloc+0x6c>
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	617b      	str	r3, [r7, #20]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d06e      	beq.n	800cf78 <pvPortMalloc+0x150>
 800ce9a:	4b45      	ldr	r3, [pc, #276]	; (800cfb0 <pvPortMalloc+0x188>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d869      	bhi.n	800cf78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cea4:	4b43      	ldr	r3, [pc, #268]	; (800cfb4 <pvPortMalloc+0x18c>)
 800cea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cea8:	4b42      	ldr	r3, [pc, #264]	; (800cfb4 <pvPortMalloc+0x18c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceae:	e004      	b.n	800ceba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d903      	bls.n	800cecc <pvPortMalloc+0xa4>
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1f1      	bne.n	800ceb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cecc:	4b36      	ldr	r3, [pc, #216]	; (800cfa8 <pvPortMalloc+0x180>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d050      	beq.n	800cf78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ced6:	6a3b      	ldr	r3, [r7, #32]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2208      	movs	r2, #8
 800cedc:	4413      	add	r3, r2
 800cede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	1ad2      	subs	r2, r2, r3
 800cef0:	2308      	movs	r3, #8
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d91f      	bls.n	800cf38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	f003 0307 	and.w	r3, r3, #7
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <pvPortMalloc+0xf8>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	613b      	str	r3, [r7, #16]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	1ad2      	subs	r2, r2, r3
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf32:	69b8      	ldr	r0, [r7, #24]
 800cf34:	f000 f908 	bl	800d148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf38:	4b1d      	ldr	r3, [pc, #116]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	4a1b      	ldr	r2, [pc, #108]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf46:	4b1a      	ldr	r3, [pc, #104]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	4b1b      	ldr	r3, [pc, #108]	; (800cfb8 <pvPortMalloc+0x190>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d203      	bcs.n	800cf5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf52:	4b17      	ldr	r3, [pc, #92]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a18      	ldr	r2, [pc, #96]	; (800cfb8 <pvPortMalloc+0x190>)
 800cf58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	4b13      	ldr	r3, [pc, #76]	; (800cfac <pvPortMalloc+0x184>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	431a      	orrs	r2, r3
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <pvPortMalloc+0x194>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3301      	adds	r3, #1
 800cf74:	4a11      	ldr	r2, [pc, #68]	; (800cfbc <pvPortMalloc+0x194>)
 800cf76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf78:	f7fe f906 	bl	800b188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	f003 0307 	and.w	r3, r3, #7
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00a      	beq.n	800cf9c <pvPortMalloc+0x174>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	60fb      	str	r3, [r7, #12]
}
 800cf98:	bf00      	nop
 800cf9a:	e7fe      	b.n	800cf9a <pvPortMalloc+0x172>
	return pvReturn;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3728      	adds	r7, #40	; 0x28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	20002148 	.word	0x20002148
 800cfac:	2000215c 	.word	0x2000215c
 800cfb0:	2000214c 	.word	0x2000214c
 800cfb4:	20002140 	.word	0x20002140
 800cfb8:	20002150 	.word	0x20002150
 800cfbc:	20002154 	.word	0x20002154

0800cfc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d04d      	beq.n	800d06e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfd2:	2308      	movs	r3, #8
 800cfd4:	425b      	negs	r3, r3
 800cfd6:	697a      	ldr	r2, [r7, #20]
 800cfd8:	4413      	add	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	685a      	ldr	r2, [r3, #4]
 800cfe4:	4b24      	ldr	r3, [pc, #144]	; (800d078 <vPortFree+0xb8>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4013      	ands	r3, r2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10a      	bne.n	800d004 <vPortFree+0x44>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	60fb      	str	r3, [r7, #12]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00a      	beq.n	800d022 <vPortFree+0x62>
	__asm volatile
 800d00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d010:	f383 8811 	msr	BASEPRI, r3
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	60bb      	str	r3, [r7, #8]
}
 800d01e:	bf00      	nop
 800d020:	e7fe      	b.n	800d020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	4b14      	ldr	r3, [pc, #80]	; (800d078 <vPortFree+0xb8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4013      	ands	r3, r2
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d01e      	beq.n	800d06e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d11a      	bne.n	800d06e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	4b0e      	ldr	r3, [pc, #56]	; (800d078 <vPortFree+0xb8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	43db      	mvns	r3, r3
 800d042:	401a      	ands	r2, r3
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d048:	f7fe f890 	bl	800b16c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	4b0a      	ldr	r3, [pc, #40]	; (800d07c <vPortFree+0xbc>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4413      	add	r3, r2
 800d056:	4a09      	ldr	r2, [pc, #36]	; (800d07c <vPortFree+0xbc>)
 800d058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d05a:	6938      	ldr	r0, [r7, #16]
 800d05c:	f000 f874 	bl	800d148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <vPortFree+0xc0>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3301      	adds	r3, #1
 800d066:	4a06      	ldr	r2, [pc, #24]	; (800d080 <vPortFree+0xc0>)
 800d068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d06a:	f7fe f88d 	bl	800b188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d06e:	bf00      	nop
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	2000215c 	.word	0x2000215c
 800d07c:	2000214c 	.word	0x2000214c
 800d080:	20002158 	.word	0x20002158

0800d084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d08a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d090:	4b27      	ldr	r3, [pc, #156]	; (800d130 <prvHeapInit+0xac>)
 800d092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00c      	beq.n	800d0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3307      	adds	r3, #7
 800d0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 0307 	bic.w	r3, r3, #7
 800d0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	4a1f      	ldr	r2, [pc, #124]	; (800d130 <prvHeapInit+0xac>)
 800d0b4:	4413      	add	r3, r2
 800d0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0bc:	4a1d      	ldr	r2, [pc, #116]	; (800d134 <prvHeapInit+0xb0>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0c2:	4b1c      	ldr	r3, [pc, #112]	; (800d134 <prvHeapInit+0xb0>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0d0:	2208      	movs	r2, #8
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	1a9b      	subs	r3, r3, r2
 800d0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f023 0307 	bic.w	r3, r3, #7
 800d0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	4a15      	ldr	r2, [pc, #84]	; (800d138 <prvHeapInit+0xb4>)
 800d0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0e6:	4b14      	ldr	r3, [pc, #80]	; (800d138 <prvHeapInit+0xb4>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0ee:	4b12      	ldr	r3, [pc, #72]	; (800d138 <prvHeapInit+0xb4>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	1ad2      	subs	r2, r2, r3
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d104:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <prvHeapInit+0xb4>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <prvHeapInit+0xb8>)
 800d112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	4a09      	ldr	r2, [pc, #36]	; (800d140 <prvHeapInit+0xbc>)
 800d11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <prvHeapInit+0xc0>)
 800d11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d122:	601a      	str	r2, [r3, #0]
}
 800d124:	bf00      	nop
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	20001540 	.word	0x20001540
 800d134:	20002140 	.word	0x20002140
 800d138:	20002148 	.word	0x20002148
 800d13c:	20002150 	.word	0x20002150
 800d140:	2000214c 	.word	0x2000214c
 800d144:	2000215c 	.word	0x2000215c

0800d148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d150:	4b28      	ldr	r3, [pc, #160]	; (800d1f4 <prvInsertBlockIntoFreeList+0xac>)
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	e002      	b.n	800d15c <prvInsertBlockIntoFreeList+0x14>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	429a      	cmp	r2, r3
 800d164:	d8f7      	bhi.n	800d156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	4413      	add	r3, r2
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	429a      	cmp	r2, r3
 800d176:	d108      	bne.n	800d18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	441a      	add	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	441a      	add	r2, r3
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d118      	bne.n	800d1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	4b15      	ldr	r3, [pc, #84]	; (800d1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d00d      	beq.n	800d1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	441a      	add	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e008      	b.n	800d1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1c6:	4b0c      	ldr	r3, [pc, #48]	; (800d1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	e003      	b.n	800d1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d002      	beq.n	800d1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1e6:	bf00      	nop
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	20002140 	.word	0x20002140
 800d1f8:	20002148 	.word	0x20002148

0800d1fc <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	460b      	mov	r3, r1
 800d206:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d20e:	4619      	mov	r1, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d21c:	3301      	adds	r3, #1
 800d21e:	425a      	negs	r2, r3
 800d220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d228:	bf58      	it	pl
 800d22a:	4253      	negpl	r3, r2
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d23a:	2b80      	cmp	r3, #128	; 0x80
 800d23c:	d113      	bne.n	800d266 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d24c:	3301      	adds	r3, #1
 800d24e:	425a      	negs	r2, r3
 800d250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d254:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d258:	bf58      	it	pl
 800d25a:	4253      	negpl	r3, r2
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800d264:	e00b      	b.n	800d27e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d274:	3301      	adds	r3, #1
 800d276:	b2da      	uxtb	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d27e:	bf00      	nop
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b082      	sub	sp, #8
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d29a:	461a      	mov	r2, r3
 800d29c:	6839      	ldr	r1, [r7, #0]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 f805 	bl	800d2ae <RingGetNBytes>
 800d2a4:	4603      	mov	r3, r0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b086      	sub	sp, #24
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d002      	beq.n	800d2cc <RingGetNBytes+0x1e>
 800d2c6:	79fb      	ldrb	r3, [r7, #7]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <RingGetNBytes+0x22>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	e03e      	b.n	800d34e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d2d0:	79fb      	ldrb	r3, [r7, #7]
 800d2d2:	2b80      	cmp	r3, #128	; 0x80
 800d2d4:	d901      	bls.n	800d2da <RingGetNBytes+0x2c>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	e039      	b.n	800d34e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d2da:	2300      	movs	r3, #0
 800d2dc:	75fb      	strb	r3, [r7, #23]
 800d2de:	e01b      	b.n	800d318 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	5c52      	ldrb	r2, [r2, r1]
 800d2f2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	425a      	negs	r2, r3
 800d2fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d302:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d306:	bf58      	it	pl
 800d308:	4253      	negpl	r3, r2
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	3301      	adds	r3, #1
 800d316:	75fb      	strb	r3, [r7, #23]
 800d318:	7dfa      	ldrb	r2, [r7, #23]
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d205      	bcs.n	800d32c <RingGetNBytes+0x7e>
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d326:	7dfa      	ldrb	r2, [r7, #23]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d3d9      	bcc.n	800d2e0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	b2da      	uxtb	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2200      	movs	r2, #0
 800d342:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f000 f805 	bl	800d356 <RingClear>

	return uCounter;
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800d356:	b480      	push	{r7}
 800d358:	b083      	sub	sp, #12
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d37e:	bf00      	nop
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
	...

0800d38c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af02      	add	r7, sp, #8
 800d392:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d394:	4b42      	ldr	r3, [pc, #264]	; (800d4a0 <ModbusInit+0x114>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d87d      	bhi.n	800d498 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	33d0      	adds	r3, #208	; 0xd0
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7ff ffd8 	bl	800d356 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b03      	cmp	r3, #3
 800d3ac:	d109      	bne.n	800d3c2 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d3ae:	4a3d      	ldr	r2, [pc, #244]	; (800d4a4 <ModbusInit+0x118>)
 800d3b0:	6879      	ldr	r1, [r7, #4]
 800d3b2:	483d      	ldr	r0, [pc, #244]	; (800d4a8 <ModbusInit+0x11c>)
 800d3b4:	f7fc f8ea 	bl	800958c <osThreadNew>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d3c0:	e033      	b.n	800d42a <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	d12e      	bne.n	800d428 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d3ca:	4a38      	ldr	r2, [pc, #224]	; (800d4ac <ModbusInit+0x120>)
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	4838      	ldr	r0, [pc, #224]	; (800d4b0 <ModbusInit+0x124>)
 800d3d0:	f7fc f8dc 	bl	800958c <osThreadNew>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d3e2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d3ea:	4a32      	ldr	r2, [pc, #200]	; (800d4b4 <ModbusInit+0x128>)
 800d3ec:	9200      	str	r2, [sp, #0]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	4831      	ldr	r0, [pc, #196]	; (800d4b8 <ModbusInit+0x12c>)
 800d3f2:	f7fe ff0b 	bl	800c20c <xTimerCreate>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d404:	2b00      	cmp	r3, #0
 800d406:	d100      	bne.n	800d40a <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d408:	e7fe      	b.n	800d408 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800d40a:	4a2c      	ldr	r2, [pc, #176]	; (800d4bc <ModbusInit+0x130>)
 800d40c:	2110      	movs	r1, #16
 800d40e:	2002      	movs	r0, #2
 800d410:	f7fc fbc0 	bl	8009b94 <osMessageQueueNew>
 800d414:	4602      	mov	r2, r0
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d426:	e7fe      	b.n	800d426 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800d428:	e7fe      	b.n	800d428 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d100      	bne.n	800d436 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d434:	e7fe      	b.n	800d434 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d43c:	4a20      	ldr	r2, [pc, #128]	; (800d4c0 <ModbusInit+0x134>)
 800d43e:	9200      	str	r2, [sp, #0]
 800d440:	2200      	movs	r2, #0
 800d442:	2105      	movs	r1, #5
 800d444:	481f      	ldr	r0, [pc, #124]	; (800d4c4 <ModbusInit+0x138>)
 800d446:	f7fe fee1 	bl	800c20c <xTimerCreate>
 800d44a:	4602      	mov	r2, r0
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d100      	bne.n	800d45e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d45c:	e7fe      	b.n	800d45c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800d45e:	4a1a      	ldr	r2, [pc, #104]	; (800d4c8 <ModbusInit+0x13c>)
 800d460:	2101      	movs	r1, #1
 800d462:	2001      	movs	r0, #1
 800d464:	f7fc fb0d 	bl	8009a82 <osSemaphoreNew>
 800d468:	4602      	mov	r2, r0
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d476:	2b00      	cmp	r3, #0
 800d478:	d100      	bne.n	800d47c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d47a:	e7fe      	b.n	800d47a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d47c:	4b08      	ldr	r3, [pc, #32]	; (800d4a0 <ModbusInit+0x114>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	4619      	mov	r1, r3
 800d482:	4a12      	ldr	r2, [pc, #72]	; (800d4cc <ModbusInit+0x140>)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d48a:	4b05      	ldr	r3, [pc, #20]	; (800d4a0 <ModbusInit+0x114>)
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	3301      	adds	r3, #1
 800d490:	b2da      	uxtb	r2, r3
 800d492:	4b03      	ldr	r3, [pc, #12]	; (800d4a0 <ModbusInit+0x114>)
 800d494:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800d496:	e000      	b.n	800d49a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d498:	e7fe      	b.n	800d498 <ModbusInit+0x10c>
}
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	20002168 	.word	0x20002168
 800d4a4:	0800effc 	.word	0x0800effc
 800d4a8:	0800d6d9 	.word	0x0800d6d9
 800d4ac:	0800f020 	.word	0x0800f020
 800d4b0:	0800dbb5 	.word	0x0800dbb5
 800d4b4:	0800d67d 	.word	0x0800d67d
 800d4b8:	0800ee74 	.word	0x0800ee74
 800d4bc:	0800efe4 	.word	0x0800efe4
 800d4c0:	0800d5f9 	.word	0x0800d5f9
 800d4c4:	0800ee84 	.word	0x0800ee84
 800d4c8:	0800f044 	.word	0x0800f044
 800d4cc:	20002160 	.word	0x20002160

0800d4d0 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d005      	beq.n	800d4ee <ModbusStart+0x1e>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d4e8:	2b04      	cmp	r3, #4
 800d4ea:	d000      	beq.n	800d4ee <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d4ec:	e7fe      	b.n	800d4ec <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d004      	beq.n	800d502 <ModbusStart+0x32>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d4fe:	2b04      	cmp	r3, #4
 800d500:	d15c      	bne.n	800d5bc <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d007      	beq.n	800d51a <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	68d8      	ldr	r0, [r3, #12]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	8a1b      	ldrh	r3, [r3, #16]
 800d512:	2200      	movs	r2, #0
 800d514:	4619      	mov	r1, r3
 800d516:	f7f6 fd23 	bl	8003f60 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b03      	cmp	r3, #3
 800d520:	d105      	bne.n	800d52e <ModbusStart+0x5e>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d100      	bne.n	800d52e <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d52c:	e7fe      	b.n	800d52c <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800d52e:	bf00      	nop
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	f7f9 ff13 	bl	8007360 <HAL_UART_GetState>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b20      	cmp	r3, #32
 800d53e:	d1f7      	bne.n	800d530 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d546:	2b04      	cmp	r3, #4
 800d548:	d11a      	bne.n	800d580 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6858      	ldr	r0, [r3, #4]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	33d0      	adds	r3, #208	; 0xd0
 800d552:	2280      	movs	r2, #128	; 0x80
 800d554:	4619      	mov	r1, r3
 800d556:	f7fb feac 	bl	80092b2 <HAL_UARTEx_ReceiveToIdle_DMA>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d000      	beq.n	800d562 <ModbusStart+0x92>
        	   {
        	         while(1)
 800d560:	e7fe      	b.n	800d560 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f022 0204 	bic.w	r2, r2, #4
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	e00b      	b.n	800d598 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6858      	ldr	r0, [r3, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	33b8      	adds	r3, #184	; 0xb8
 800d588:	2201      	movs	r2, #1
 800d58a:	4619      	mov	r1, r3
 800d58c:	f7f9 f8ce 	bl	800672c <HAL_UART_Receive_IT>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d000      	beq.n	800d598 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800d596:	e7fe      	b.n	800d596 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	7a1b      	ldrb	r3, [r3, #8]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d004      	beq.n	800d5aa <ModbusStart+0xda>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	2b04      	cmp	r3, #4
 800d5a6:	d100      	bne.n	800d5aa <ModbusStart+0xda>
          {
        	  while(1)
 800d5a8:	e7fe      	b.n	800d5a8 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	7a1b      	ldrb	r3, [r3, #8]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d104      	bne.n	800d5bc <ModbusStart+0xec>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	2b03      	cmp	r3, #3
 800d5b8:	d100      	bne.n	800d5bc <ModbusStart+0xec>
          {
             	  while(1)
 800d5ba:	e7fe      	b.n	800d5ba <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af02      	add	r7, sp, #8
 800d5fe:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d600:	2300      	movs	r3, #0
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	e02a      	b.n	800d65c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d606:	4a1b      	ldr	r2, [pc, #108]	; (800d674 <vTimerCallbackT35+0x7c>)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d60e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	429a      	cmp	r2, r3
 800d616:	d11e      	bne.n	800d656 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d618:	4a16      	ldr	r2, [pc, #88]	; (800d674 <vTimerCallbackT35+0x7c>)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	2b04      	cmp	r3, #4
 800d624:	d10c      	bne.n	800d640 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d626:	4a13      	ldr	r2, [pc, #76]	; (800d674 <vTimerCallbackT35+0x7c>)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d62e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800d632:	2300      	movs	r3, #0
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	2300      	movs	r3, #0
 800d638:	2200      	movs	r2, #0
 800d63a:	2103      	movs	r1, #3
 800d63c:	f7fe fe80 	bl	800c340 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800d640:	4a0c      	ldr	r2, [pc, #48]	; (800d674 <vTimerCallbackT35+0x7c>)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d648:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d64c:	2300      	movs	r3, #0
 800d64e:	2203      	movs	r2, #3
 800d650:	2100      	movs	r1, #0
 800d652:	f7fe fbab 	bl	800bdac <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3301      	adds	r3, #1
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	4b06      	ldr	r3, [pc, #24]	; (800d678 <vTimerCallbackT35+0x80>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	4293      	cmp	r3, r2
 800d666:	dbce      	blt.n	800d606 <vTimerCallbackT35+0xe>
		}

	}
}
 800d668:	bf00      	nop
 800d66a:	bf00      	nop
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20002160 	.word	0x20002160
 800d678:	20002168 	.word	0x20002168

0800d67c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]
 800d688:	e017      	b.n	800d6ba <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800d68a:	4a11      	ldr	r2, [pc, #68]	; (800d6d0 <vTimerCallbackTimeout+0x54>)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d692:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d10b      	bne.n	800d6b4 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800d69c:	4a0c      	ldr	r2, [pc, #48]	; (800d6d0 <vTimerCallbackTimeout+0x54>)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2203      	movs	r2, #3
 800d6ac:	f06f 0107 	mvn.w	r1, #7
 800d6b0:	f7fe fb7c 	bl	800bdac <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	60fb      	str	r3, [r7, #12]
 800d6ba:	4b06      	ldr	r3, [pc, #24]	; (800d6d4 <vTimerCallbackTimeout+0x58>)
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	dbe1      	blt.n	800d68a <vTimerCallbackTimeout+0xe>
		}

	}

}
 800d6c6:	bf00      	nop
 800d6c8:	bf00      	nop
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20002160 	.word	0x20002160
 800d6d4:	20002168 	.word	0x20002168

0800d6d8 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d004      	beq.n	800d6fe <StartTaskModbusSlave+0x26>
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d6fa:	2b04      	cmp	r3, #4
 800d6fc:	d117      	bne.n	800d72e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800d6fe:	f04f 31ff 	mov.w	r1, #4294967295
 800d702:	2001      	movs	r0, #1
 800d704:	f7fe fab0 	bl	800bc68 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f000 fc21 	bl	800df50 <getRxBuffer>
 800d70e:	4603      	mov	r3, r0
 800d710:	f113 0f03 	cmn.w	r3, #3
 800d714:	d10b      	bne.n	800d72e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	22fd      	movs	r2, #253	; 0xfd
 800d71a:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d722:	3301      	adds	r3, #1
 800d724:	b29a      	uxth	r2, r3
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800d72c:	e0b7      	b.n	800d89e <StartTaskModbusSlave+0x1c6>
	  }
   }

   if (modH->u8BufferSize < 7)
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d734:	2b06      	cmp	r3, #6
 800d736:	d80b      	bhi.n	800d750 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	22fa      	movs	r2, #250	; 0xfa
 800d73c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d744:	3301      	adds	r3, #1
 800d746:	b29a      	uxth	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800d74e:	e0a6      	b.n	800d89e <StartTaskModbusSlave+0x1c6>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	7cda      	ldrb	r2, [r3, #19]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	7a1b      	ldrb	r3, [r3, #8]
 800d758:	429a      	cmp	r2, r3
 800d75a:	f040 809f 	bne.w	800d89c <StartTaskModbusSlave+0x1c4>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 fc40 	bl	800dfe4 <validateRequest>
 800d764:	4603      	mov	r3, r0
 800d766:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800d768:	7afb      	ldrb	r3, [r7, #11]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00c      	beq.n	800d788 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800d76e:	7afb      	ldrb	r3, [r7, #11]
 800d770:	68f9      	ldr	r1, [r7, #12]
 800d772:	4618      	mov	r0, r3
 800d774:	f000 fdda 	bl	800e32c <buildException>
			sendTxBuffer(modH);
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f000 fdf6 	bl	800e36a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800d77e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800d786:	e08a      	b.n	800d89e <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d794:	f04f 31ff 	mov.w	r1, #4294967295
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fc ffcb 	bl	800a734 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	7d1b      	ldrb	r3, [r3, #20]
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	2b0f      	cmp	r3, #15
 800d7a6:	d86f      	bhi.n	800d888 <StartTaskModbusSlave+0x1b0>
 800d7a8:	a201      	add	r2, pc, #4	; (adr r2, 800d7b0 <StartTaskModbusSlave+0xd8>)
 800d7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ae:	bf00      	nop
 800d7b0:	0800d7f1 	.word	0x0800d7f1
 800d7b4:	0800d805 	.word	0x0800d805
 800d7b8:	0800d819 	.word	0x0800d819
 800d7bc:	0800d82d 	.word	0x0800d82d
 800d7c0:	0800d841 	.word	0x0800d841
 800d7c4:	0800d853 	.word	0x0800d853
 800d7c8:	0800d889 	.word	0x0800d889
 800d7cc:	0800d889 	.word	0x0800d889
 800d7d0:	0800d889 	.word	0x0800d889
 800d7d4:	0800d889 	.word	0x0800d889
 800d7d8:	0800d889 	.word	0x0800d889
 800d7dc:	0800d889 	.word	0x0800d889
 800d7e0:	0800d889 	.word	0x0800d889
 800d7e4:	0800d889 	.word	0x0800d889
 800d7e8:	0800d865 	.word	0x0800d865
 800d7ec:	0800d877 	.word	0x0800d877
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f000 fe5b 	bl	800e4ae <process_FC1>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d802:	e042      	b.n	800d88a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800d804:	2102      	movs	r1, #2
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 fe51 	bl	800e4ae <process_FC1>
 800d80c:	4603      	mov	r3, r0
 800d80e:	461a      	mov	r2, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d816:	e038      	b.n	800d88a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800d818:	2103      	movs	r1, #3
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f000 ff0b 	bl	800e636 <process_FC3>
 800d820:	4603      	mov	r3, r0
 800d822:	461a      	mov	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d82a:	e02e      	b.n	800d88a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800d82c:	2104      	movs	r1, #4
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f000 ff01 	bl	800e636 <process_FC3>
 800d834:	4603      	mov	r3, r0
 800d836:	461a      	mov	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d83e:	e024      	b.n	800d88a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f000 ff70 	bl	800e726 <process_FC5>
 800d846:	4603      	mov	r3, r0
 800d848:	461a      	mov	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d850:	e01b      	b.n	800d88a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f000 ffc0 	bl	800e7d8 <process_FC6>
 800d858:	4603      	mov	r3, r0
 800d85a:	461a      	mov	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d862:	e012      	b.n	800d88a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f000 ffe9 	bl	800e83c <process_FC15>
 800d86a:	4603      	mov	r3, r0
 800d86c:	461a      	mov	r2, r3
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d874:	e009      	b.n	800d88a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f001 f86e 	bl	800e958 <process_FC16>
 800d87c:	4603      	mov	r3, r0
 800d87e:	461a      	mov	r2, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d886:	e000      	b.n	800d88a <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800d888:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800d890:	2300      	movs	r3, #0
 800d892:	2200      	movs	r2, #0
 800d894:	2100      	movs	r1, #0
 800d896:	f7fc fcd3 	bl	800a240 <xQueueGenericSend>

	 continue;
 800d89a:	e000      	b.n	800d89e <StartTaskModbusSlave+0x1c6>
    	continue;
 800d89c:	bf00      	nop
  {
 800d89e:	e721      	b.n	800d6e4 <StartTaskModbusSlave+0xc>

0800d8a0 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800d8a0:	b084      	sub	sp, #16
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b084      	sub	sp, #16
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	f107 001c 	add.w	r0, r7, #28
 800d8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d8bc:	f04f 31ff 	mov.w	r1, #4294967295
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fc ff37 	bl	800a734 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	7a1b      	ldrb	r3, [r3, #8]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <SendQuery+0x32>
 800d8ce:	23ff      	movs	r3, #255	; 0xff
 800d8d0:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <SendQuery+0x40>
 800d8dc:	23fe      	movs	r3, #254	; 0xfe
 800d8de:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800d8e0:	7f3b      	ldrb	r3, [r7, #28]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <SendQuery+0x4c>
 800d8e6:	7f3b      	ldrb	r3, [r7, #28]
 800d8e8:	2bf7      	cmp	r3, #247	; 0xf7
 800d8ea:	d901      	bls.n	800d8f0 <SendQuery+0x50>
 800d8ec:	23f7      	movs	r3, #247	; 0xf7
 800d8ee:	73bb      	strb	r3, [r7, #14]


	if(error)
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00e      	beq.n	800d914 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800d8f6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800d904:	2300      	movs	r3, #0
 800d906:	2200      	movs	r2, #0
 800d908:	2100      	movs	r1, #0
 800d90a:	f7fc fc99 	bl	800a240 <xQueueGenericSend>
		 return error;
 800d90e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d912:	e147      	b.n	800dba4 <SendQuery+0x304>
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800d914:	7f7b      	ldrb	r3, [r7, #29]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d008      	beq.n	800d92c <SendQuery+0x8c>
 800d91a:	7f7b      	ldrb	r3, [r7, #29]
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	d005      	beq.n	800d92c <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800d920:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800d922:	2b05      	cmp	r3, #5
 800d924:	d002      	beq.n	800d92c <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800d926:	7f7b      	ldrb	r3, [r7, #29]
 800d928:	2b0f      	cmp	r3, #15
 800d92a:	d104      	bne.n	800d936 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800d92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800d934:	e00f      	b.n	800d956 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800d936:	7f7b      	ldrb	r3, [r7, #29]
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d008      	beq.n	800d94e <SendQuery+0xae>
 800d93c:	7f7b      	ldrb	r3, [r7, #29]
 800d93e:	2b04      	cmp	r3, #4
 800d940:	d005      	beq.n	800d94e <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800d942:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800d944:	2b06      	cmp	r3, #6
 800d946:	d002      	beq.n	800d94e <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800d948:	7f7b      	ldrb	r3, [r7, #29]
 800d94a:	2b10      	cmp	r3, #16
 800d94c:	d103      	bne.n	800d956 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800d94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800d956:	7f3a      	ldrb	r2, [r7, #28]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800d95c:	7f7a      	ldrb	r2, [r7, #29]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800d962:	8bfb      	ldrh	r3, [r7, #30]
 800d964:	0a1b      	lsrs	r3, r3, #8
 800d966:	b29b      	uxth	r3, r3
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800d96e:	8bfb      	ldrh	r3, [r7, #30]
 800d970:	b2da      	uxtb	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800d976:	7f7b      	ldrb	r3, [r7, #29]
 800d978:	3b01      	subs	r3, #1
 800d97a:	2b0f      	cmp	r3, #15
 800d97c:	f200 80ff 	bhi.w	800db7e <SendQuery+0x2de>
 800d980:	a201      	add	r2, pc, #4	; (adr r2, 800d988 <SendQuery+0xe8>)
 800d982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d986:	bf00      	nop
 800d988:	0800d9c9 	.word	0x0800d9c9
 800d98c:	0800d9c9 	.word	0x0800d9c9
 800d990:	0800d9c9 	.word	0x0800d9c9
 800d994:	0800d9c9 	.word	0x0800d9c9
 800d998:	0800d9e7 	.word	0x0800d9e7
 800d99c:	0800da09 	.word	0x0800da09
 800d9a0:	0800db7f 	.word	0x0800db7f
 800d9a4:	0800db7f 	.word	0x0800db7f
 800d9a8:	0800db7f 	.word	0x0800db7f
 800d9ac:	0800db7f 	.word	0x0800db7f
 800d9b0:	0800db7f 	.word	0x0800db7f
 800d9b4:	0800db7f 	.word	0x0800db7f
 800d9b8:	0800db7f 	.word	0x0800db7f
 800d9bc:	0800db7f 	.word	0x0800db7f
 800d9c0:	0800da2b 	.word	0x0800da2b
 800d9c4:	0800dae9 	.word	0x0800dae9
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d9c8:	8c3b      	ldrh	r3, [r7, #32]
 800d9ca:	0a1b      	lsrs	r3, r3, #8
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d9d4:	8c3b      	ldrh	r3, [r7, #32]
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2206      	movs	r2, #6
 800d9e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d9e4:	e0cb      	b.n	800db7e <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <SendQuery+0x152>
 800d9ee:	22ff      	movs	r2, #255	; 0xff
 800d9f0:	e000      	b.n	800d9f4 <SendQuery+0x154>
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2206      	movs	r2, #6
 800da02:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800da06:	e0ba      	b.n	800db7e <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	0a1b      	lsrs	r3, r3, #8
 800da0e:	b29b      	uxth	r3, r3
 800da10:	b2da      	uxtb	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800da16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da18:	881b      	ldrh	r3, [r3, #0]
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2206      	movs	r2, #6
 800da24:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800da28:	e0a9      	b.n	800db7e <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800da2a:	8c3b      	ldrh	r3, [r7, #32]
 800da2c:	091b      	lsrs	r3, r3, #4
 800da2e:	b29b      	uxth	r3, r3
 800da30:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800da32:	7a7b      	ldrb	r3, [r7, #9]
 800da34:	005b      	lsls	r3, r3, #1
 800da36:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800da38:	8c3b      	ldrh	r3, [r7, #32]
 800da3a:	f003 030f 	and.w	r3, r3, #15
 800da3e:	b29b      	uxth	r3, r3
 800da40:	2b00      	cmp	r3, #0
 800da42:	d005      	beq.n	800da50 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	3301      	adds	r3, #1
 800da48:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800da4a:	7a7b      	ldrb	r3, [r7, #9]
 800da4c:	3301      	adds	r3, #1
 800da4e:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800da50:	8c3b      	ldrh	r3, [r7, #32]
 800da52:	0a1b      	lsrs	r3, r3, #8
 800da54:	b29b      	uxth	r3, r3
 800da56:	b2da      	uxtb	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800da5c:	8c3b      	ldrh	r3, [r7, #32]
 800da5e:	b2da      	uxtb	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	7bfa      	ldrb	r2, [r7, #15]
 800da68:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2207      	movs	r2, #7
 800da6e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800da72:	2300      	movs	r3, #0
 800da74:	81bb      	strh	r3, [r7, #12]
 800da76:	e031      	b.n	800dadc <SendQuery+0x23c>
	    {
	        if(i%2)
 800da78:	89bb      	ldrh	r3, [r7, #12]
 800da7a:	f003 0301 	and.w	r3, r3, #1
 800da7e:	b29b      	uxth	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00f      	beq.n	800daa4 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800da84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da86:	89bb      	ldrh	r3, [r7, #12]
 800da88:	085b      	lsrs	r3, r3, #1
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	005b      	lsls	r3, r3, #1
 800da8e:	4413      	add	r3, r2
 800da90:	881a      	ldrh	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800da98:	4619      	mov	r1, r3
 800da9a:	b2d2      	uxtb	r2, r2
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	440b      	add	r3, r1
 800daa0:	74da      	strb	r2, [r3, #19]
 800daa2:	e010      	b.n	800dac6 <SendQuery+0x226>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800daa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daa6:	89bb      	ldrh	r3, [r7, #12]
 800daa8:	085b      	lsrs	r3, r3, #1
 800daaa:	b29b      	uxth	r3, r3
 800daac:	005b      	lsls	r3, r3, #1
 800daae:	4413      	add	r3, r2
 800dab0:	881b      	ldrh	r3, [r3, #0]
 800dab2:	0a1b      	lsrs	r3, r3, #8
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dabc:	4619      	mov	r1, r3
 800dabe:	b2d2      	uxtb	r2, r2
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	440b      	add	r3, r1
 800dac4:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dacc:	3301      	adds	r3, #1
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800dad6:	89bb      	ldrh	r3, [r7, #12]
 800dad8:	3301      	adds	r3, #1
 800dada:	81bb      	strh	r3, [r7, #12]
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	89ba      	ldrh	r2, [r7, #12]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d3c8      	bcc.n	800da78 <SendQuery+0x1d8>
	    }
	    break;
 800dae6:	e04a      	b.n	800db7e <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800dae8:	8c3b      	ldrh	r3, [r7, #32]
 800daea:	0a1b      	lsrs	r3, r3, #8
 800daec:	b29b      	uxth	r3, r3
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800daf4:	8c3b      	ldrh	r3, [r7, #32]
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800dafc:	8c3b      	ldrh	r3, [r7, #32]
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	005b      	lsls	r3, r3, #1
 800db02:	b2da      	uxtb	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2207      	movs	r2, #7
 800db0c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800db10:	2300      	movs	r3, #0
 800db12:	817b      	strh	r3, [r7, #10]
 800db14:	e02e      	b.n	800db74 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800db16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db18:	897b      	ldrh	r3, [r7, #10]
 800db1a:	005b      	lsls	r3, r3, #1
 800db1c:	4413      	add	r3, r2
 800db1e:	881b      	ldrh	r3, [r3, #0]
 800db20:	0a1b      	lsrs	r3, r3, #8
 800db22:	b29a      	uxth	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db2a:	4619      	mov	r1, r3
 800db2c:	b2d2      	uxtb	r2, r2
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	440b      	add	r3, r1
 800db32:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db3a:	3301      	adds	r3, #1
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800db44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db46:	897b      	ldrh	r3, [r7, #10]
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	4413      	add	r3, r2
 800db4c:	881a      	ldrh	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db54:	4619      	mov	r1, r3
 800db56:	b2d2      	uxtb	r2, r2
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	440b      	add	r3, r1
 800db5c:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db64:	3301      	adds	r3, #1
 800db66:	b2da      	uxtb	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800db6e:	897b      	ldrh	r3, [r7, #10]
 800db70:	3301      	adds	r3, #1
 800db72:	817b      	strh	r3, [r7, #10]
 800db74:	8c3b      	ldrh	r3, [r7, #32]
 800db76:	897a      	ldrh	r2, [r7, #10]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d3cc      	bcc.n	800db16 <SendQuery+0x276>
	    }
	    break;
 800db7c:	bf00      	nop
	}


	sendTxBuffer(modH);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 fbf3 	bl	800e36a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800db8a:	2300      	movs	r3, #0
 800db8c:	2200      	movs	r2, #0
 800db8e:	2100      	movs	r1, #0
 800db90:	f7fc fb56 	bl	800a240 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2201      	movs	r2, #1
 800db98:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2200      	movs	r2, #0
 800dba0:	749a      	strb	r2, [r3, #18]
	return 0;
 800dba2:	2300      	movs	r3, #0


}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbae:	b004      	add	sp, #16
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop

0800dbb4 <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08c      	sub	sp, #48	; 0x30
 800dbb8:	af02      	add	r7, sp, #8
 800dbba:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dbc6:	f107 010c 	add.w	r1, r7, #12
 800dbca:	f04f 32ff 	mov.w	r2, #4294967295
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fc fcd0 	bl	800a574 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	f107 030c 	add.w	r3, r7, #12
 800dbdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbe0:	f7ff fe5e 	bl	800d8a0 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800dbe4:	f04f 31ff 	mov.w	r1, #4294967295
 800dbe8:	2001      	movs	r0, #1
 800dbea:	f7fe f83d 	bl	800bc68 <ulTaskNotifyTake>
 800dbee:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d018      	beq.n	800dc2e <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800dc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc06:	22f8      	movs	r2, #248	; 0xf8
 800dc08:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dc10:	3301      	adds	r3, #1
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc16:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dc1a:	69b8      	ldr	r0, [r7, #24]
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dc22:	4619      	mov	r1, r3
 800dc24:	2300      	movs	r3, #0
 800dc26:	2203      	movs	r2, #3
 800dc28:	f7fe f8c0 	bl	800bdac <xTaskGenericNotify>
    	  continue;
 800dc2c:	e09a      	b.n	800dd64 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800dc2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc30:	f000 f98e 	bl	800df50 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc3a:	2b05      	cmp	r3, #5
 800dc3c:	d818      	bhi.n	800dc70 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	22fa      	movs	r2, #250	; 0xfa
 800dc4a:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dc52:	3301      	adds	r3, #1
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dc5c:	69b8      	ldr	r0, [r7, #24]
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dc64:	4619      	mov	r1, r3
 800dc66:	2300      	movs	r3, #0
 800dc68:	2203      	movs	r2, #3
 800dc6a:	f7fe f89f 	bl	800bdac <xTaskGenericNotify>
		  continue;
 800dc6e:	e079      	b.n	800dd64 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800dc76:	2300      	movs	r3, #0
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	2103      	movs	r1, #3
 800dc80:	f7fe fb5e 	bl	800c340 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800dc84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc86:	f000 f8f5 	bl	800de74 <validateAnswer>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800dc8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d010      	beq.n	800dcb8 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	7ffa      	ldrb	r2, [r7, #31]
 800dca2:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dca4:	69b8      	ldr	r0, [r7, #24]
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dcac:	4619      	mov	r1, r3
 800dcae:	2300      	movs	r3, #0
 800dcb0:	2203      	movs	r2, #3
 800dcb2:	f7fe f87b 	bl	800bdac <xTaskGenericNotify>
	     continue;
 800dcb6:	e055      	b.n	800dd64 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcba:	7ffa      	ldrb	r2, [r7, #31]
 800dcbc:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dcc4:	f04f 31ff 	mov.w	r1, #4294967295
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fc fd33 	bl	800a734 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd0:	7d1b      	ldrb	r3, [r3, #20]
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	2b0f      	cmp	r3, #15
 800dcd6:	d82b      	bhi.n	800dd30 <StartTaskModbusMaster+0x17c>
 800dcd8:	a201      	add	r2, pc, #4	; (adr r2, 800dce0 <StartTaskModbusMaster+0x12c>)
 800dcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcde:	bf00      	nop
 800dce0:	0800dd21 	.word	0x0800dd21
 800dce4:	0800dd21 	.word	0x0800dd21
 800dce8:	0800dd29 	.word	0x0800dd29
 800dcec:	0800dd29 	.word	0x0800dd29
 800dcf0:	0800dd31 	.word	0x0800dd31
 800dcf4:	0800dd31 	.word	0x0800dd31
 800dcf8:	0800dd31 	.word	0x0800dd31
 800dcfc:	0800dd31 	.word	0x0800dd31
 800dd00:	0800dd31 	.word	0x0800dd31
 800dd04:	0800dd31 	.word	0x0800dd31
 800dd08:	0800dd31 	.word	0x0800dd31
 800dd0c:	0800dd31 	.word	0x0800dd31
 800dd10:	0800dd31 	.word	0x0800dd31
 800dd14:	0800dd31 	.word	0x0800dd31
 800dd18:	0800dd31 	.word	0x0800dd31
 800dd1c:	0800dd31 	.word	0x0800dd31
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800dd20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd22:	f000 f821 	bl	800dd68 <get_FC1>
	      break;
 800dd26:	e004      	b.n	800dd32 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800dd28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd2a:	f000 f874 	bl	800de16 <get_FC3>
	      break;
 800dd2e:	e000      	b.n	800dd32 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800dd30:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd34:	2200      	movs	r2, #0
 800dd36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10e      	bne.n	800dd62 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	2100      	movs	r1, #0
 800dd50:	f7fc fa76 	bl	800a240 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800dd54:	69b8      	ldr	r0, [r7, #24]
 800dd56:	2300      	movs	r3, #0
 800dd58:	2203      	movs	r2, #3
 800dd5a:	f06f 010a 	mvn.w	r1, #10
 800dd5e:	f7fe f825 	bl	800bdac <xTaskGenericNotify>
	  }


	  continue;
 800dd62:	bf00      	nop
  {
 800dd64:	e72c      	b.n	800dbc0 <StartTaskModbusMaster+0xc>
 800dd66:	bf00      	nop

0800dd68 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800dd68:	b590      	push	{r4, r7, lr}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800dd70:	2303      	movs	r3, #3
 800dd72:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
 800dd78:	e043      	b.n	800de02 <get_FC1+0x9a>

        if(i%2)
 800dd7a:	7bfb      	ldrb	r3, [r7, #15]
 800dd7c:	f003 0301 	and.w	r3, r3, #1
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d01c      	beq.n	800ddc0 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800dd86:	7bfa      	ldrb	r2, [r7, #15]
 800dd88:	7bbb      	ldrb	r3, [r7, #14]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	4413      	add	r3, r2
 800dd90:	7cd8      	ldrb	r0, [r3, #19]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	085b      	lsrs	r3, r3, #1
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	4413      	add	r3, r2
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	b2d9      	uxtb	r1, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ddac:	7bfb      	ldrb	r3, [r7, #15]
 800ddae:	085b      	lsrs	r3, r3, #1
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	005b      	lsls	r3, r3, #1
 800ddb4:	18d4      	adds	r4, r2, r3
 800ddb6:	f000 fa5f 	bl	800e278 <word>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	8023      	strh	r3, [r4, #0]
 800ddbe:	e01d      	b.n	800ddfc <get_FC1+0x94>
        }
        else
        {

        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ddc6:	7bfb      	ldrb	r3, [r7, #15]
 800ddc8:	085b      	lsrs	r3, r3, #1
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	4413      	add	r3, r2
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	0a1b      	lsrs	r3, r3, #8
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	b2d8      	uxtb	r0, r3
 800ddd8:	7bfa      	ldrb	r2, [r7, #15]
 800ddda:	7bbb      	ldrb	r3, [r7, #14]
 800dddc:	4413      	add	r3, r2
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	4413      	add	r3, r2
 800dde2:	7cd9      	ldrb	r1, [r3, #19]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ddea:	7bfb      	ldrb	r3, [r7, #15]
 800ddec:	085b      	lsrs	r3, r3, #1
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	18d4      	adds	r4, r2, r3
 800ddf4:	f000 fa40 	bl	800e278 <word>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	3301      	adds	r3, #1
 800de00:	73fb      	strb	r3, [r7, #15]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	7d5b      	ldrb	r3, [r3, #21]
 800de06:	7bfa      	ldrb	r2, [r7, #15]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d3b6      	bcc.n	800dd7a <get_FC1+0x12>
        }

     }
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	3714      	adds	r7, #20
 800de12:	46bd      	mov	sp, r7
 800de14:	bd90      	pop	{r4, r7, pc}

0800de16 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800de16:	b590      	push	{r4, r7, lr}
 800de18:	b085      	sub	sp, #20
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800de1e:	2303      	movs	r3, #3
 800de20:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800de22:	2300      	movs	r3, #0
 800de24:	73bb      	strb	r3, [r7, #14]
 800de26:	e018      	b.n	800de5a <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800de28:	7bfb      	ldrb	r3, [r7, #15]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	4413      	add	r3, r2
 800de2e:	7cd8      	ldrb	r0, [r3, #19]
 800de30:	7bfb      	ldrb	r3, [r7, #15]
 800de32:	3301      	adds	r3, #1
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	4413      	add	r3, r2
 800de38:	7cd9      	ldrb	r1, [r3, #19]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800de40:	7bbb      	ldrb	r3, [r7, #14]
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	18d4      	adds	r4, r2, r3
 800de46:	f000 fa17 	bl	800e278 <word>
 800de4a:	4603      	mov	r3, r0
 800de4c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
 800de50:	3302      	adds	r3, #2
 800de52:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800de54:	7bbb      	ldrb	r3, [r7, #14]
 800de56:	3301      	adds	r3, #1
 800de58:	73bb      	strb	r3, [r7, #14]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	7d5b      	ldrb	r3, [r3, #21]
 800de5e:	085b      	lsrs	r3, r3, #1
 800de60:	b2db      	uxtb	r3, r3
 800de62:	7bba      	ldrb	r2, [r7, #14]
 800de64:	429a      	cmp	r2, r3
 800de66:	d3df      	bcc.n	800de28 <get_FC3+0x12>
    }
}
 800de68:	bf00      	nop
 800de6a:	bf00      	nop
 800de6c:	3714      	adds	r7, #20
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd90      	pop	{r4, r7, pc}
	...

0800de74 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800de82:	3b02      	subs	r3, #2
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	4413      	add	r3, r2
 800de88:	7cdb      	ldrb	r3, [r3, #19]
 800de8a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800de8c:	b21a      	sxth	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800de94:	3b01      	subs	r3, #1
 800de96:	6879      	ldr	r1, [r7, #4]
 800de98:	440b      	add	r3, r1
 800de9a:	7cdb      	ldrb	r3, [r3, #19]
 800de9c:	b21b      	sxth	r3, r3
 800de9e:	4313      	orrs	r3, r2
 800dea0:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800dea2:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f103 0213 	add.w	r2, r3, #19
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800deb0:	3b02      	subs	r3, #2
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	4619      	mov	r1, r3
 800deb6:	4610      	mov	r0, r2
 800deb8:	f000 f9f1 	bl	800e29e <calcCRC>
 800debc:	4603      	mov	r3, r0
 800debe:	461a      	mov	r2, r3
 800dec0:	89bb      	ldrh	r3, [r7, #12]
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d009      	beq.n	800deda <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800decc:	3301      	adds	r3, #1
 800dece:	b29a      	uxth	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800ded6:	23fc      	movs	r3, #252	; 0xfc
 800ded8:	e034      	b.n	800df44 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	7d1b      	ldrb	r3, [r3, #20]
 800dede:	b25b      	sxtb	r3, r3
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	da09      	bge.n	800def8 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800deea:	3301      	adds	r3, #1
 800deec:	b29a      	uxth	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800def4:	23fb      	movs	r3, #251	; 0xfb
 800def6:	e025      	b.n	800df44 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800defc:	2300      	movs	r3, #0
 800defe:	73bb      	strb	r3, [r7, #14]
 800df00:	e00c      	b.n	800df1c <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800df02:	7bbb      	ldrb	r3, [r7, #14]
 800df04:	4a11      	ldr	r2, [pc, #68]	; (800df4c <validateAnswer+0xd8>)
 800df06:	5cd2      	ldrb	r2, [r2, r3]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	7d1b      	ldrb	r3, [r3, #20]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d102      	bne.n	800df16 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800df10:	2301      	movs	r3, #1
 800df12:	73fb      	strb	r3, [r7, #15]
            break;
 800df14:	e005      	b.n	800df22 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800df16:	7bbb      	ldrb	r3, [r7, #14]
 800df18:	3301      	adds	r3, #1
 800df1a:	73bb      	strb	r3, [r7, #14]
 800df1c:	7bbb      	ldrb	r3, [r7, #14]
 800df1e:	2b07      	cmp	r3, #7
 800df20:	d9ef      	bls.n	800df02 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800df22:	7bfb      	ldrb	r3, [r7, #15]
 800df24:	f083 0301 	eor.w	r3, r3, #1
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d009      	beq.n	800df42 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800df34:	3301      	adds	r3, #1
 800df36:	b29a      	uxth	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800df3e:	2301      	movs	r3, #1
 800df40:	e000      	b.n	800df44 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	0800f054 	.word	0x0800f054

0800df50 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d104      	bne.n	800df6c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	4618      	mov	r0, r3
 800df68:	f7f8 fd42 	bl	80069f0 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800df72:	2b00      	cmp	r3, #0
 800df74:	d008      	beq.n	800df88 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	33d0      	adds	r3, #208	; 0xd0
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7ff f9eb 	bl	800d356 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800df80:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800df84:	81fb      	strh	r3, [r7, #14]
 800df86:	e019      	b.n	800dfbc <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	3313      	adds	r3, #19
 800df92:	4619      	mov	r1, r3
 800df94:	4610      	mov	r0, r2
 800df96:	f7ff f978 	bl	800d28a <RingGetAllBytes>
 800df9a:	4603      	mov	r3, r0
 800df9c:	461a      	mov	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800dfaa:	3301      	adds	r3, #1
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dfba:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d107      	bne.n	800dfd6 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6858      	ldr	r0, [r3, #4]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	33b8      	adds	r3, #184	; 0xb8
 800dfce:	2201      	movs	r2, #1
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	f7f8 fbab 	bl	800672c <HAL_UART_Receive_IT>
	}

    return i16result;
 800dfd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dff2:	3b02      	subs	r3, #2
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	4413      	add	r3, r2
 800dff8:	7cdb      	ldrb	r3, [r3, #19]
 800dffa:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800dffc:	b21a      	sxth	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e004:	3b01      	subs	r3, #1
 800e006:	6879      	ldr	r1, [r7, #4]
 800e008:	440b      	add	r3, r1
 800e00a:	7cdb      	ldrb	r3, [r3, #19]
 800e00c:	b21b      	sxth	r3, r3
 800e00e:	4313      	orrs	r3, r2
 800e010:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e012:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f103 0213 	add.w	r2, r3, #19
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e020:	3b02      	subs	r3, #2
 800e022:	b2db      	uxtb	r3, r3
 800e024:	4619      	mov	r1, r3
 800e026:	4610      	mov	r0, r2
 800e028:	f000 f939 	bl	800e29e <calcCRC>
 800e02c:	4603      	mov	r3, r0
 800e02e:	461a      	mov	r2, r3
 800e030:	893b      	ldrh	r3, [r7, #8]
 800e032:	4293      	cmp	r3, r2
 800e034:	d009      	beq.n	800e04a <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e03c:	3301      	adds	r3, #1
 800e03e:	b29a      	uxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e046:	23fc      	movs	r3, #252	; 0xfc
 800e048:	e10f      	b.n	800e26a <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800e04a:	2300      	movs	r3, #0
 800e04c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e04e:	2300      	movs	r3, #0
 800e050:	73bb      	strb	r3, [r7, #14]
 800e052:	e00c      	b.n	800e06e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e054:	7bbb      	ldrb	r3, [r7, #14]
 800e056:	4a87      	ldr	r2, [pc, #540]	; (800e274 <validateRequest+0x290>)
 800e058:	5cd2      	ldrb	r2, [r2, r3]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	7d1b      	ldrb	r3, [r3, #20]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d102      	bne.n	800e068 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e062:	2301      	movs	r3, #1
 800e064:	73fb      	strb	r3, [r7, #15]
	            break;
 800e066:	e005      	b.n	800e074 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e068:	7bbb      	ldrb	r3, [r7, #14]
 800e06a:	3301      	adds	r3, #1
 800e06c:	73bb      	strb	r3, [r7, #14]
 800e06e:	7bbb      	ldrb	r3, [r7, #14]
 800e070:	2b07      	cmp	r3, #7
 800e072:	d9ef      	bls.n	800e054 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e074:	7bfb      	ldrb	r3, [r7, #15]
 800e076:	f083 0301 	eor.w	r3, r3, #1
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d009      	beq.n	800e094 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e086:	3301      	adds	r3, #1
 800e088:	b29a      	uxth	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e090:	2301      	movs	r3, #1
 800e092:	e0ea      	b.n	800e26a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	7d1b      	ldrb	r3, [r3, #20]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	2b0f      	cmp	r3, #15
 800e0a4:	f200 80e0 	bhi.w	800e268 <validateRequest+0x284>
 800e0a8:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <validateRequest+0xcc>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e0f1 	.word	0x0800e0f1
 800e0b4:	0800e0f1 	.word	0x0800e0f1
 800e0b8:	0800e209 	.word	0x0800e209
 800e0bc:	0800e209 	.word	0x0800e209
 800e0c0:	0800e19d 	.word	0x0800e19d
 800e0c4:	0800e1e5 	.word	0x0800e1e5
 800e0c8:	0800e269 	.word	0x0800e269
 800e0cc:	0800e269 	.word	0x0800e269
 800e0d0:	0800e269 	.word	0x0800e269
 800e0d4:	0800e269 	.word	0x0800e269
 800e0d8:	0800e269 	.word	0x0800e269
 800e0dc:	0800e269 	.word	0x0800e269
 800e0e0:	0800e269 	.word	0x0800e269
 800e0e4:	0800e269 	.word	0x0800e269
 800e0e8:	0800e0f1 	.word	0x0800e0f1
 800e0ec:	0800e209 	.word	0x0800e209
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7d5a      	ldrb	r2, [r3, #21]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	7d9b      	ldrb	r3, [r3, #22]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	f000 f8bc 	bl	800e278 <word>
 800e100:	4603      	mov	r3, r0
 800e102:	091b      	lsrs	r3, r3, #4
 800e104:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	7dda      	ldrb	r2, [r3, #23]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	7e1b      	ldrb	r3, [r3, #24]
 800e10e:	4619      	mov	r1, r3
 800e110:	4610      	mov	r0, r2
 800e112:	f000 f8b1 	bl	800e278 <word>
 800e116:	4603      	mov	r3, r0
 800e118:	091b      	lsrs	r3, r3, #4
 800e11a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	7dda      	ldrb	r2, [r3, #23]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	7e1b      	ldrb	r3, [r3, #24]
 800e124:	4619      	mov	r1, r3
 800e126:	4610      	mov	r0, r2
 800e128:	f000 f8a6 	bl	800e278 <word>
 800e12c:	4603      	mov	r3, r0
 800e12e:	f003 030f 	and.w	r3, r3, #15
 800e132:	b29b      	uxth	r3, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <validateRequest+0x15a>
 800e138:	897b      	ldrh	r3, [r7, #10]
 800e13a:	3301      	adds	r3, #1
 800e13c:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e13e:	89ba      	ldrh	r2, [r7, #12]
 800e140:	897b      	ldrh	r3, [r7, #10]
 800e142:	4413      	add	r3, r2
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e14a:	4293      	cmp	r3, r2
 800e14c:	dd01      	ble.n	800e152 <validateRequest+0x16e>
 800e14e:	2302      	movs	r3, #2
 800e150:	e08b      	b.n	800e26a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	7dda      	ldrb	r2, [r3, #23]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	7e1b      	ldrb	r3, [r3, #24]
 800e15a:	4619      	mov	r1, r3
 800e15c:	4610      	mov	r0, r2
 800e15e:	f000 f88b 	bl	800e278 <word>
 800e162:	4603      	mov	r3, r0
 800e164:	08db      	lsrs	r3, r3, #3
 800e166:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7dda      	ldrb	r2, [r3, #23]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	7e1b      	ldrb	r3, [r3, #24]
 800e170:	4619      	mov	r1, r3
 800e172:	4610      	mov	r0, r2
 800e174:	f000 f880 	bl	800e278 <word>
 800e178:	4603      	mov	r3, r0
 800e17a:	f003 0307 	and.w	r3, r3, #7
 800e17e:	b29b      	uxth	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <validateRequest+0x1a6>
 800e184:	897b      	ldrh	r3, [r7, #10]
 800e186:	3301      	adds	r3, #1
 800e188:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800e18a:	897b      	ldrh	r3, [r7, #10]
 800e18c:	3305      	adds	r3, #5
 800e18e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800e190:	897b      	ldrh	r3, [r7, #10]
 800e192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e196:	d960      	bls.n	800e25a <validateRequest+0x276>
 800e198:	2303      	movs	r3, #3
 800e19a:	e066      	b.n	800e26a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7d5a      	ldrb	r2, [r3, #21]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	7d9b      	ldrb	r3, [r3, #22]
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	f000 f866 	bl	800e278 <word>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	091b      	lsrs	r3, r3, #4
 800e1b0:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	7d5a      	ldrb	r2, [r3, #21]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	7d9b      	ldrb	r3, [r3, #22]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	4610      	mov	r0, r2
 800e1be:	f000 f85b 	bl	800e278 <word>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	f003 030f 	and.w	r3, r3, #15
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <validateRequest+0x1f0>
 800e1ce:	89bb      	ldrh	r3, [r7, #12]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800e1da:	89ba      	ldrh	r2, [r7, #12]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d93e      	bls.n	800e25e <validateRequest+0x27a>
 800e1e0:	2302      	movs	r3, #2
 800e1e2:	e042      	b.n	800e26a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	7d5a      	ldrb	r2, [r3, #21]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	7d9b      	ldrb	r3, [r3, #22]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	f000 f842 	bl	800e278 <word>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e1fe:	89ba      	ldrh	r2, [r7, #12]
 800e200:	429a      	cmp	r2, r3
 800e202:	d92e      	bls.n	800e262 <validateRequest+0x27e>
 800e204:	2302      	movs	r3, #2
 800e206:	e030      	b.n	800e26a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	7d5a      	ldrb	r2, [r3, #21]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	7d9b      	ldrb	r3, [r3, #22]
 800e210:	4619      	mov	r1, r3
 800e212:	4610      	mov	r0, r2
 800e214:	f000 f830 	bl	800e278 <word>
 800e218:	4603      	mov	r3, r0
 800e21a:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	7dda      	ldrb	r2, [r3, #23]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7e1b      	ldrb	r3, [r3, #24]
 800e224:	4619      	mov	r1, r3
 800e226:	4610      	mov	r0, r2
 800e228:	f000 f826 	bl	800e278 <word>
 800e22c:	4603      	mov	r3, r0
 800e22e:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800e230:	89ba      	ldrh	r2, [r7, #12]
 800e232:	897b      	ldrh	r3, [r7, #10]
 800e234:	4413      	add	r3, r2
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800e23c:	4293      	cmp	r3, r2
 800e23e:	dd01      	ble.n	800e244 <validateRequest+0x260>
 800e240:	2302      	movs	r3, #2
 800e242:	e012      	b.n	800e26a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800e244:	897b      	ldrh	r3, [r7, #10]
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	b29b      	uxth	r3, r3
 800e24a:	3305      	adds	r3, #5
 800e24c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800e24e:	897b      	ldrh	r3, [r7, #10]
 800e250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e254:	d907      	bls.n	800e266 <validateRequest+0x282>
 800e256:	2303      	movs	r3, #3
 800e258:	e007      	b.n	800e26a <validateRequest+0x286>
	        break;
 800e25a:	bf00      	nop
 800e25c:	e004      	b.n	800e268 <validateRequest+0x284>
	        break;
 800e25e:	bf00      	nop
 800e260:	e002      	b.n	800e268 <validateRequest+0x284>
	        break;
 800e262:	bf00      	nop
 800e264:	e000      	b.n	800e268 <validateRequest+0x284>
	        break;
 800e266:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800e268:	2300      	movs	r3, #0

}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	0800f054 	.word	0x0800f054

0800e278 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	4603      	mov	r3, r0
 800e280:	460a      	mov	r2, r1
 800e282:	71fb      	strb	r3, [r7, #7]
 800e284:	4613      	mov	r3, r2
 800e286:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e288:	79bb      	ldrb	r3, [r7, #6]
 800e28a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e28c:	79fb      	ldrb	r3, [r7, #7]
 800e28e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e290:	89bb      	ldrh	r3, [r7, #12]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3714      	adds	r7, #20
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800e29e:	b480      	push	{r7}
 800e2a0:	b087      	sub	sp, #28
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e2aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2ae:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	74fb      	strb	r3, [r7, #19]
 800e2b4:	e023      	b.n	800e2fe <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e2b6:	7cfb      	ldrb	r3, [r7, #19]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	4053      	eors	r3, r2
 800e2c4:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	74bb      	strb	r3, [r7, #18]
 800e2ca:	e012      	b.n	800e2f2 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	f003 0301 	and.w	r3, r3, #1
 800e2d2:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	085b      	lsrs	r3, r3, #1
 800e2d8:	617b      	str	r3, [r7, #20]
            if (flag)
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d005      	beq.n	800e2ec <calcCRC+0x4e>
                temp ^= 0xA001;
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e2e6:	f083 0301 	eor.w	r3, r3, #1
 800e2ea:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e2ec:	7cbb      	ldrb	r3, [r7, #18]
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	74bb      	strb	r3, [r7, #18]
 800e2f2:	7cbb      	ldrb	r3, [r7, #18]
 800e2f4:	2b08      	cmp	r3, #8
 800e2f6:	d9e9      	bls.n	800e2cc <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e2f8:	7cfb      	ldrb	r3, [r7, #19]
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	74fb      	strb	r3, [r7, #19]
 800e2fe:	7cfa      	ldrb	r2, [r7, #19]
 800e300:	78fb      	ldrb	r3, [r7, #3]
 800e302:	429a      	cmp	r2, r3
 800e304:	d3d7      	bcc.n	800e2b6 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	0a1b      	lsrs	r3, r3, #8
 800e30a:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	021b      	lsls	r3, r3, #8
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	4313      	orrs	r3, r2
 800e314:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	b29b      	uxth	r3, r3
 800e31a:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	b29b      	uxth	r3, r3

}
 800e320:	4618      	mov	r0, r3
 800e322:	371c      	adds	r7, #28
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	4603      	mov	r3, r0
 800e334:	6039      	str	r1, [r7, #0]
 800e336:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	7d1b      	ldrb	r3, [r3, #20]
 800e33c:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	7a1a      	ldrb	r2, [r3, #8]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	3b80      	subs	r3, #128	; 0x80
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	79fa      	ldrb	r2, [r7, #7]
 800e354:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	2203      	movs	r2, #3
 800e35a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e35e:	bf00      	nop
 800e360:	3714      	adds	r7, #20
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr

0800e36a <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800e36a:	b590      	push	{r4, r7, lr}
 800e36c:	b087      	sub	sp, #28
 800e36e:	af02      	add	r7, sp, #8
 800e370:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f103 0213 	add.w	r2, r3, #19
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e37e:	4619      	mov	r1, r3
 800e380:	4610      	mov	r0, r2
 800e382:	f7ff ff8c 	bl	800e29e <calcCRC>
 800e386:	4603      	mov	r3, r0
 800e388:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e38a:	89fb      	ldrh	r3, [r7, #14]
 800e38c:	0a1b      	lsrs	r3, r3, #8
 800e38e:	b29a      	uxth	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e396:	4619      	mov	r1, r3
 800e398:	b2d2      	uxtb	r2, r2
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	440b      	add	r3, r1
 800e39e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	89fb      	ldrh	r3, [r7, #14]
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	440b      	add	r3, r1
 800e3c0:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00c      	beq.n	800e3f4 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7f8 ff16 	bl	8007210 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	68d8      	ldr	r0, [r3, #12]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	8a1b      	ldrh	r3, [r3, #16]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	f7f5 fdb6 	bl	8003f60 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d10c      	bne.n	800e418 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6858      	ldr	r0, [r3, #4]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f103 0113 	add.w	r1, r3, #19
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e40e:	b29b      	uxth	r3, r3
 800e410:	461a      	mov	r2, r3
 800e412:	f7f8 f8f7 	bl	8006604 <HAL_UART_Transmit_IT>
 800e416:	e00b      	b.n	800e430 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6858      	ldr	r0, [r3, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f103 0113 	add.w	r1, r3, #19
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e428:	b29b      	uxth	r3, r3
 800e42a:	461a      	mov	r2, r3
 800e42c:	f7f8 f9ca 	bl	80067c4 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800e430:	21fa      	movs	r1, #250	; 0xfa
 800e432:	2001      	movs	r0, #1
 800e434:	f7fd fc18 	bl	800bc68 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800e438:	bf00      	nop
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	69db      	ldr	r3, [r3, #28]
 800e442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e446:	2b00      	cmp	r3, #0
 800e448:	d0f7      	beq.n	800e43a <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00c      	beq.n	800e46c <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	68d8      	ldr	r0, [r3, #12]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	8a1b      	ldrh	r3, [r3, #16]
 800e45a:	2200      	movs	r2, #0
 800e45c:	4619      	mov	r1, r3
 800e45e:	f7f5 fd7f 	bl	8003f60 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	4618      	mov	r0, r3
 800e468:	f7f8 ff26 	bl	80072b8 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	2b04      	cmp	r3, #4
 800e472:	d10c      	bne.n	800e48e <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800e47a:	f7fc ff23 	bl	800b2c4 <xTaskGetTickCount>
 800e47e:	4602      	mov	r2, r0
 800e480:	2300      	movs	r3, #0
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	2300      	movs	r3, #0
 800e486:	2102      	movs	r1, #2
 800e488:	4620      	mov	r0, r4
 800e48a:	f7fd ff59 	bl	800c340 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e49c:	3301      	adds	r3, #1
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800e4a6:	bf00      	nop
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd90      	pop	{r4, r7, pc}

0800e4ae <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b088      	sub	sp, #32
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	70fb      	strb	r3, [r7, #3]
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	7d5a      	ldrb	r2, [r3, #21]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	7d9b      	ldrb	r3, [r3, #22]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	f7ff fed7 	bl	800e278 <word>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	7dda      	ldrb	r2, [r3, #23]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	7e1b      	ldrb	r3, [r3, #24]
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4610      	mov	r0, r2
 800e4da:	f7ff fecd 	bl	800e278 <word>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e4e2:	8abb      	ldrh	r3, [r7, #20]
 800e4e4:	08db      	lsrs	r3, r3, #3
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e4ea:	8abb      	ldrh	r3, [r7, #20]
 800e4ec:	f003 0307 	and.w	r3, r3, #7
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d002      	beq.n	800e4fc <process_FC1+0x4e>
 800e4f6:	7ffb      	ldrb	r3, [r7, #31]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	7ffa      	ldrb	r2, [r7, #31]
 800e500:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2203      	movs	r2, #3
 800e506:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e510:	461a      	mov	r2, r3
 800e512:	7ffb      	ldrb	r3, [r7, #31]
 800e514:	4413      	add	r3, r2
 800e516:	3b01      	subs	r3, #1
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	4413      	add	r3, r2
 800e51c:	2200      	movs	r2, #0
 800e51e:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800e524:	78fb      	ldrb	r3, [r7, #3]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d104      	bne.n	800e534 <process_FC1+0x86>
    	u16regs = modH->u16regsCoils;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e530:	61bb      	str	r3, [r7, #24]
 800e532:	e006      	b.n	800e542 <process_FC1+0x94>
    }
    else if (Database == 2){
 800e534:	78fb      	ldrb	r3, [r7, #3]
 800e536:	2b02      	cmp	r3, #2
 800e538:	d103      	bne.n	800e542 <process_FC1+0x94>
    	u16regs = modH->u16regsCoilsRO;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e540:	61bb      	str	r3, [r7, #24]
    }

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e542:	2300      	movs	r3, #0
 800e544:	83bb      	strh	r3, [r7, #28]
 800e546:	e056      	b.n	800e5f6 <process_FC1+0x148>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e548:	8afa      	ldrh	r2, [r7, #22]
 800e54a:	8bbb      	ldrh	r3, [r7, #28]
 800e54c:	4413      	add	r3, r2
 800e54e:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800e550:	8a3b      	ldrh	r3, [r7, #16]
 800e552:	091b      	lsrs	r3, r3, #4
 800e554:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e556:	8a3b      	ldrh	r3, [r7, #16]
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	f003 030f 	and.w	r3, r3, #15
 800e55e:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800e560:	89fb      	ldrh	r3, [r7, #14]
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	69ba      	ldr	r2, [r7, #24]
 800e566:	4413      	add	r3, r2
 800e568:	881b      	ldrh	r3, [r3, #0]
 800e56a:	461a      	mov	r2, r3
 800e56c:	7b7b      	ldrb	r3, [r7, #13]
 800e56e:	fa42 f303 	asr.w	r3, r2, r3
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d014      	beq.n	800e5a4 <process_FC1+0xf6>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e580:	461a      	mov	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4413      	add	r3, r2
 800e586:	7cda      	ldrb	r2, [r3, #19]
 800e588:	7fbb      	ldrb	r3, [r7, #30]
 800e58a:	2101      	movs	r1, #1
 800e58c:	fa01 f303 	lsl.w	r3, r1, r3
 800e590:	b2db      	uxtb	r3, r3
 800e592:	6879      	ldr	r1, [r7, #4]
 800e594:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e598:	4313      	orrs	r3, r2
 800e59a:	b2da      	uxtb	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	440b      	add	r3, r1
 800e5a0:	74da      	strb	r2, [r3, #19]
 800e5a2:	e015      	b.n	800e5d0 <process_FC1+0x122>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	7cda      	ldrb	r2, [r3, #19]
 800e5b2:	7fbb      	ldrb	r3, [r7, #30]
 800e5b4:	2101      	movs	r1, #1
 800e5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ba:	b2db      	uxtb	r3, r3
 800e5bc:	43db      	mvns	r3, r3
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	6879      	ldr	r1, [r7, #4]
 800e5c2:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e5c6:	4013      	ands	r3, r2
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	440b      	add	r3, r1
 800e5ce:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800e5d0:	7fbb      	ldrb	r3, [r7, #30]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800e5d6:	7fbb      	ldrb	r3, [r7, #30]
 800e5d8:	2b07      	cmp	r3, #7
 800e5da:	d909      	bls.n	800e5f0 <process_FC1+0x142>
        {
            u8bitsno = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e5f0:	8bbb      	ldrh	r3, [r7, #28]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	83bb      	strh	r3, [r7, #28]
 800e5f6:	8bba      	ldrh	r2, [r7, #28]
 800e5f8:	8abb      	ldrh	r3, [r7, #20]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d3a4      	bcc.n	800e548 <process_FC1+0x9a>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800e5fe:	8abb      	ldrh	r3, [r7, #20]
 800e600:	f003 0307 	and.w	r3, r3, #7
 800e604:	b29b      	uxth	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d007      	beq.n	800e61a <process_FC1+0x16c>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e610:	3301      	adds	r3, #1
 800e612:	b2da      	uxtb	r2, r3
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e620:	3302      	adds	r3, #2
 800e622:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7ff fea0 	bl	800e36a <sendTxBuffer>
    return u8CopyBufferSize;
 800e62a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3720      	adds	r7, #32
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b086      	sub	sp, #24
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	7d5a      	ldrb	r2, [r3, #21]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	7d9b      	ldrb	r3, [r3, #22]
 800e64a:	4619      	mov	r1, r3
 800e64c:	4610      	mov	r0, r2
 800e64e:	f7ff fe13 	bl	800e278 <word>
 800e652:	4603      	mov	r3, r0
 800e654:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	7dda      	ldrb	r2, [r3, #23]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	7e1b      	ldrb	r3, [r3, #24]
 800e65e:	4619      	mov	r1, r3
 800e660:	4610      	mov	r0, r2
 800e662:	f7ff fe09 	bl	800e278 <word>
 800e666:	4603      	mov	r3, r0
 800e668:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800e66a:	7b7b      	ldrb	r3, [r7, #13]
 800e66c:	005b      	lsls	r3, r3, #1
 800e66e:	b2da      	uxtb	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2203      	movs	r2, #3
 800e678:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800e67c:	78fb      	ldrb	r3, [r7, #3]
 800e67e:	2b03      	cmp	r3, #3
 800e680:	d104      	bne.n	800e68c <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e688:	613b      	str	r3, [r7, #16]
 800e68a:	e006      	b.n	800e69a <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800e68c:	78fb      	ldrb	r3, [r7, #3]
 800e68e:	2b04      	cmp	r3, #4
 800e690:	d103      	bne.n	800e69a <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e698:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e69a:	89fb      	ldrh	r3, [r7, #14]
 800e69c:	82fb      	strh	r3, [r7, #22]
 800e69e:	e02e      	b.n	800e6fe <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800e6a0:	8afb      	ldrh	r3, [r7, #22]
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	693a      	ldr	r2, [r7, #16]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	0a1b      	lsrs	r3, r3, #8
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	b2d2      	uxtb	r2, r2
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	440b      	add	r3, r1
 800e6bc:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800e6ce:	8afb      	ldrh	r3, [r7, #22]
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	693a      	ldr	r2, [r7, #16]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	881a      	ldrh	r2, [r3, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6de:	4619      	mov	r1, r3
 800e6e0:	b2d2      	uxtb	r2, r2
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	440b      	add	r3, r1
 800e6e6:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e6f8:	8afb      	ldrh	r3, [r7, #22]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	82fb      	strh	r3, [r7, #22]
 800e6fe:	8afa      	ldrh	r2, [r7, #22]
 800e700:	89f9      	ldrh	r1, [r7, #14]
 800e702:	7b7b      	ldrb	r3, [r7, #13]
 800e704:	440b      	add	r3, r1
 800e706:	429a      	cmp	r2, r3
 800e708:	dbca      	blt.n	800e6a0 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e710:	3302      	adds	r3, #2
 800e712:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f7ff fe28 	bl	800e36a <sendTxBuffer>

    return u8CopyBufferSize;
 800e71a:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3718      	adds	r7, #24
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}

0800e726 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800e726:	b580      	push	{r7, lr}
 800e728:	b084      	sub	sp, #16
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	7d5a      	ldrb	r2, [r3, #21]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	7d9b      	ldrb	r3, [r3, #22]
 800e736:	4619      	mov	r1, r3
 800e738:	4610      	mov	r0, r2
 800e73a:	f7ff fd9d 	bl	800e278 <word>
 800e73e:	4603      	mov	r3, r0
 800e740:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800e742:	89fb      	ldrh	r3, [r7, #14]
 800e744:	091b      	lsrs	r3, r3, #4
 800e746:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800e748:	89fb      	ldrh	r3, [r7, #14]
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	f003 030f 	and.w	r3, r3, #15
 800e750:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	7ddb      	ldrb	r3, [r3, #23]
 800e756:	2bff      	cmp	r3, #255	; 0xff
 800e758:	d115      	bne.n	800e786 <process_FC5+0x60>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e760:	89bb      	ldrh	r3, [r7, #12]
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	4413      	add	r3, r2
 800e766:	8819      	ldrh	r1, [r3, #0]
 800e768:	7afb      	ldrb	r3, [r7, #11]
 800e76a:	2201      	movs	r2, #1
 800e76c:	fa02 f303 	lsl.w	r3, r2, r3
 800e770:	b29a      	uxth	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e778:	89bb      	ldrh	r3, [r7, #12]
 800e77a:	005b      	lsls	r3, r3, #1
 800e77c:	4403      	add	r3, r0
 800e77e:	430a      	orrs	r2, r1
 800e780:	b292      	uxth	r2, r2
 800e782:	801a      	strh	r2, [r3, #0]
 800e784:	e016      	b.n	800e7b4 <process_FC5+0x8e>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e78c:	89bb      	ldrh	r3, [r7, #12]
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	4413      	add	r3, r2
 800e792:	8819      	ldrh	r1, [r3, #0]
 800e794:	7afb      	ldrb	r3, [r7, #11]
 800e796:	2201      	movs	r2, #1
 800e798:	fa02 f303 	lsl.w	r3, r2, r3
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	43db      	mvns	r3, r3
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e7a8:	89bb      	ldrh	r3, [r7, #12]
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	4403      	add	r3, r0
 800e7ae:	400a      	ands	r2, r1
 800e7b0:	b292      	uxth	r2, r2
 800e7b2:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2206      	movs	r2, #6
 800e7b8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7c2:	3302      	adds	r3, #2
 800e7c4:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7ff fdcf 	bl	800e36a <sendTxBuffer>

    return u8CopyBufferSize;
 800e7cc:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	7d5a      	ldrb	r2, [r3, #21]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7d9b      	ldrb	r3, [r3, #22]
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	f7ff fd44 	bl	800e278 <word>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	7dda      	ldrb	r2, [r3, #23]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	7e1b      	ldrb	r3, [r3, #24]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	4610      	mov	r0, r2
 800e800:	f7ff fd3a 	bl	800e278 <word>
 800e804:	4603      	mov	r3, r0
 800e806:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e80e:	89fb      	ldrh	r3, [r7, #14]
 800e810:	005b      	lsls	r3, r3, #1
 800e812:	4413      	add	r3, r2
 800e814:	89ba      	ldrh	r2, [r7, #12]
 800e816:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2206      	movs	r2, #6
 800e81c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e826:	3302      	adds	r3, #2
 800e828:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff fd9d 	bl	800e36a <sendTxBuffer>

    return u8CopyBufferSize;
 800e830:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	7d5a      	ldrb	r2, [r3, #21]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	7d9b      	ldrb	r3, [r3, #22]
 800e84c:	4619      	mov	r1, r3
 800e84e:	4610      	mov	r0, r2
 800e850:	f7ff fd12 	bl	800e278 <word>
 800e854:	4603      	mov	r3, r0
 800e856:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	7dda      	ldrb	r2, [r3, #23]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	7e1b      	ldrb	r3, [r3, #24]
 800e860:	4619      	mov	r1, r3
 800e862:	4610      	mov	r0, r2
 800e864:	f7ff fd08 	bl	800e278 <word>
 800e868:	4603      	mov	r3, r0
 800e86a:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800e870:	2307      	movs	r3, #7
 800e872:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e874:	2300      	movs	r3, #0
 800e876:	82bb      	strh	r3, [r7, #20]
 800e878:	e058      	b.n	800e92c <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800e87a:	8a7a      	ldrh	r2, [r7, #18]
 800e87c:	8abb      	ldrh	r3, [r7, #20]
 800e87e:	4413      	add	r3, r2
 800e880:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800e882:	89bb      	ldrh	r3, [r7, #12]
 800e884:	091b      	lsrs	r3, r3, #4
 800e886:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e888:	89bb      	ldrh	r3, [r7, #12]
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	f003 030f 	and.w	r3, r3, #15
 800e890:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800e892:	7dfb      	ldrb	r3, [r7, #23]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	4413      	add	r3, r2
 800e898:	7cdb      	ldrb	r3, [r3, #19]
 800e89a:	461a      	mov	r2, r3
 800e89c:	7dbb      	ldrb	r3, [r7, #22]
 800e89e:	fa42 f303 	asr.w	r3, r2, r3
 800e8a2:	f003 0301 	and.w	r3, r3, #1
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	bf14      	ite	ne
 800e8aa:	2301      	movne	r3, #1
 800e8ac:	2300      	moveq	r3, #0
 800e8ae:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800e8b0:	7a3b      	ldrb	r3, [r7, #8]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d015      	beq.n	800e8e2 <process_FC15+0xa6>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e8bc:	897b      	ldrh	r3, [r7, #10]
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	4413      	add	r3, r2
 800e8c2:	8819      	ldrh	r1, [r3, #0]
 800e8c4:	7a7b      	ldrb	r3, [r7, #9]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e8d4:	897b      	ldrh	r3, [r7, #10]
 800e8d6:	005b      	lsls	r3, r3, #1
 800e8d8:	4403      	add	r3, r0
 800e8da:	430a      	orrs	r2, r1
 800e8dc:	b292      	uxth	r2, r2
 800e8de:	801a      	strh	r2, [r3, #0]
 800e8e0:	e016      	b.n	800e910 <process_FC15+0xd4>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e8e8:	897b      	ldrh	r3, [r7, #10]
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	4413      	add	r3, r2
 800e8ee:	8819      	ldrh	r1, [r3, #0]
 800e8f0:	7a7b      	ldrb	r3, [r7, #9]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	43db      	mvns	r3, r3
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e904:	897b      	ldrh	r3, [r7, #10]
 800e906:	005b      	lsls	r3, r3, #1
 800e908:	4403      	add	r3, r0
 800e90a:	400a      	ands	r2, r1
 800e90c:	b292      	uxth	r2, r2
 800e90e:	801a      	strh	r2, [r3, #0]
            modH->u16regsCoils[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800e910:	7dbb      	ldrb	r3, [r7, #22]
 800e912:	3301      	adds	r3, #1
 800e914:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800e916:	7dbb      	ldrb	r3, [r7, #22]
 800e918:	2b07      	cmp	r3, #7
 800e91a:	d904      	bls.n	800e926 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800e920:	7dfb      	ldrb	r3, [r7, #23]
 800e922:	3301      	adds	r3, #1
 800e924:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e926:	8abb      	ldrh	r3, [r7, #20]
 800e928:	3301      	adds	r3, #1
 800e92a:	82bb      	strh	r3, [r7, #20]
 800e92c:	8aba      	ldrh	r2, [r7, #20]
 800e92e:	8a3b      	ldrh	r3, [r7, #16]
 800e930:	429a      	cmp	r2, r3
 800e932:	d3a2      	bcc.n	800e87a <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2206      	movs	r2, #6
 800e938:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e942:	3302      	adds	r3, #2
 800e944:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7ff fd0f 	bl	800e36a <sendTxBuffer>
    return u8CopyBufferSize;
 800e94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3718      	adds	r7, #24
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	7d5b      	ldrb	r3, [r3, #21]
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	b21a      	sxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	7d9b      	ldrb	r3, [r3, #22]
 800e96c:	b21b      	sxth	r3, r3
 800e96e:	4313      	orrs	r3, r2
 800e970:	b21b      	sxth	r3, r3
 800e972:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	7ddb      	ldrb	r3, [r3, #23]
 800e978:	021b      	lsls	r3, r3, #8
 800e97a:	b21a      	sxth	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	7e1b      	ldrb	r3, [r3, #24]
 800e980:	b21b      	sxth	r3, r3
 800e982:	4313      	orrs	r3, r2
 800e984:	b21b      	sxth	r3, r3
 800e986:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800e98e:	8a7b      	ldrh	r3, [r7, #18]
 800e990:	b2da      	uxtb	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2206      	movs	r2, #6
 800e99a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800e99e:	2300      	movs	r3, #0
 800e9a0:	82fb      	strh	r3, [r7, #22]
 800e9a2:	e01d      	b.n	800e9e0 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800e9a4:	8afb      	ldrh	r3, [r7, #22]
 800e9a6:	005b      	lsls	r3, r3, #1
 800e9a8:	3307      	adds	r3, #7
        temp = word(
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800e9b0:	8afb      	ldrh	r3, [r7, #22]
 800e9b2:	3304      	adds	r3, #4
 800e9b4:	005b      	lsls	r3, r3, #1
        temp = word(
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	7cdb      	ldrb	r3, [r3, #19]
 800e9bc:	4619      	mov	r1, r3
 800e9be:	f7ff fc5b 	bl	800e278 <word>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e9cc:	8ab9      	ldrh	r1, [r7, #20]
 800e9ce:	8afb      	ldrh	r3, [r7, #22]
 800e9d0:	440b      	add	r3, r1
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	4413      	add	r3, r2
 800e9d6:	89fa      	ldrh	r2, [r7, #14]
 800e9d8:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800e9da:	8afb      	ldrh	r3, [r7, #22]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	82fb      	strh	r3, [r7, #22]
 800e9e0:	8afa      	ldrh	r2, [r7, #22]
 800e9e2:	8a7b      	ldrh	r3, [r7, #18]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d3dd      	bcc.n	800e9a4 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e9ee:	3302      	adds	r3, #2
 800e9f0:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f7ff fcb9 	bl	800e36a <sendTxBuffer>

    return u8CopyBufferSize;
 800e9f8:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3718      	adds	r7, #24
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af02      	add	r7, sp, #8
 800ea0a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800ea10:	2300      	movs	r3, #0
 800ea12:	60fb      	str	r3, [r7, #12]
 800ea14:	e019      	b.n	800ea4a <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800ea16:	4a17      	ldr	r2, [pc, #92]	; (800ea74 <HAL_UART_TxCpltCallback+0x70>)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d10e      	bne.n	800ea44 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800ea26:	4a13      	ldr	r2, [pc, #76]	; (800ea74 <HAL_UART_TxCpltCallback+0x70>)
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea2e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ea32:	f107 0308 	add.w	r3, r7, #8
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	2300      	movs	r3, #0
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	f7fd fa6d 	bl	800bf1c <xTaskGenericNotifyFromISR>
	   		break;
 800ea42:	e008      	b.n	800ea56 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	3301      	adds	r3, #1
 800ea48:	60fb      	str	r3, [r7, #12]
 800ea4a:	4b0b      	ldr	r3, [pc, #44]	; (800ea78 <HAL_UART_TxCpltCallback+0x74>)
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	4293      	cmp	r3, r2
 800ea54:	dbdf      	blt.n	800ea16 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d007      	beq.n	800ea6c <HAL_UART_TxCpltCallback+0x68>
 800ea5c:	4b07      	ldr	r3, [pc, #28]	; (800ea7c <HAL_UART_TxCpltCallback+0x78>)
 800ea5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800ea6c:	bf00      	nop
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	20002160 	.word	0x20002160
 800ea78:	20002168 	.word	0x20002168
 800ea7c:	e000ed04 	.word	0xe000ed04

0800ea80 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800ea80:	b590      	push	{r4, r7, lr}
 800ea82:	b087      	sub	sp, #28
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	60fb      	str	r3, [r7, #12]
 800ea90:	e042      	b.n	800eb18 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800ea92:	4a2d      	ldr	r2, [pc, #180]	; (800eb48 <HAL_UART_RxCpltCallback+0xc8>)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d137      	bne.n	800eb12 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800eaa2:	4a29      	ldr	r2, [pc, #164]	; (800eb48 <HAL_UART_RxCpltCallback+0xc8>)
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaaa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d139      	bne.n	800eb26 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800eab2:	4a25      	ldr	r2, [pc, #148]	; (800eb48 <HAL_UART_RxCpltCallback+0xc8>)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaba:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800eabe:	4922      	ldr	r1, [pc, #136]	; (800eb48 <HAL_UART_RxCpltCallback+0xc8>)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eac6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800eaca:	4619      	mov	r1, r3
 800eacc:	4610      	mov	r0, r2
 800eace:	f7fe fb95 	bl	800d1fc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800ead2:	4a1d      	ldr	r2, [pc, #116]	; (800eb48 <HAL_UART_RxCpltCallback+0xc8>)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eada:	6858      	ldr	r0, [r3, #4]
 800eadc:	4a1a      	ldr	r2, [pc, #104]	; (800eb48 <HAL_UART_RxCpltCallback+0xc8>)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eae4:	33b8      	adds	r3, #184	; 0xb8
 800eae6:	2201      	movs	r2, #1
 800eae8:	4619      	mov	r1, r3
 800eaea:	f7f7 fe1f 	bl	800672c <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800eaee:	4a16      	ldr	r2, [pc, #88]	; (800eb48 <HAL_UART_RxCpltCallback+0xc8>)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaf6:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800eafa:	f7fc fbf3 	bl	800b2e4 <xTaskGetTickCountFromISR>
 800eafe:	4602      	mov	r2, r0
 800eb00:	f107 0308 	add.w	r3, r7, #8
 800eb04:	2100      	movs	r1, #0
 800eb06:	9100      	str	r1, [sp, #0]
 800eb08:	2107      	movs	r1, #7
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f7fd fc18 	bl	800c340 <xTimerGenericCommand>
    		}
    		break;
 800eb10:	e009      	b.n	800eb26 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	3301      	adds	r3, #1
 800eb16:	60fb      	str	r3, [r7, #12]
 800eb18:	4b0c      	ldr	r3, [pc, #48]	; (800eb4c <HAL_UART_RxCpltCallback+0xcc>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	4293      	cmp	r3, r2
 800eb22:	dbb6      	blt.n	800ea92 <HAL_UART_RxCpltCallback+0x12>
 800eb24:	e000      	b.n	800eb28 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800eb26:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d007      	beq.n	800eb3e <HAL_UART_RxCpltCallback+0xbe>
 800eb2e:	4b08      	ldr	r3, [pc, #32]	; (800eb50 <HAL_UART_RxCpltCallback+0xd0>)
 800eb30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb34:	601a      	str	r2, [r3, #0]
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800eb3e:	bf00      	nop
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd90      	pop	{r4, r7, pc}
 800eb46:	bf00      	nop
 800eb48:	20002160 	.word	0x20002160
 800eb4c:	20002168 	.word	0x20002168
 800eb50:	e000ed04 	.word	0xe000ed04

0800eb54 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	60fb      	str	r3, [r7, #12]
 800eb60:	e041      	b.n	800ebe6 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800eb62:	4a27      	ldr	r2, [pc, #156]	; (800ec00 <HAL_UART_ErrorCallback+0xac>)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d136      	bne.n	800ebe0 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800eb72:	4a23      	ldr	r2, [pc, #140]	; (800ec00 <HAL_UART_ErrorCallback+0xac>)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb7a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800eb7e:	2b04      	cmp	r3, #4
 800eb80:	d138      	bne.n	800ebf4 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800eb82:	e007      	b.n	800eb94 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800eb84:	4a1e      	ldr	r2, [pc, #120]	; (800ec00 <HAL_UART_ErrorCallback+0xac>)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7f7 fe98 	bl	80068c4 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800eb94:	4a1a      	ldr	r2, [pc, #104]	; (800ec00 <HAL_UART_ErrorCallback+0xac>)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb9c:	6858      	ldr	r0, [r3, #4]
 800eb9e:	4a18      	ldr	r2, [pc, #96]	; (800ec00 <HAL_UART_ErrorCallback+0xac>)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eba6:	33d0      	adds	r3, #208	; 0xd0
 800eba8:	2280      	movs	r2, #128	; 0x80
 800ebaa:	4619      	mov	r1, r3
 800ebac:	f7fa fb81 	bl	80092b2 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1e6      	bne.n	800eb84 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ebb6:	4a12      	ldr	r2, [pc, #72]	; (800ec00 <HAL_UART_ErrorCallback+0xac>)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	490d      	ldr	r1, [pc, #52]	; (800ec00 <HAL_UART_ErrorCallback+0xac>)
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f022 0204 	bic.w	r2, r2, #4
 800ebdc:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800ebde:	e009      	b.n	800ebf4 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	60fb      	str	r3, [r7, #12]
 800ebe6:	4b07      	ldr	r3, [pc, #28]	; (800ec04 <HAL_UART_ErrorCallback+0xb0>)
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	dbb7      	blt.n	800eb62 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800ebf2:	e000      	b.n	800ebf6 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800ebf4:	bf00      	nop
}
 800ebf6:	bf00      	nop
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20002160 	.word	0x20002160
 800ec04:	20002168 	.word	0x20002168

0800ec08 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b086      	sub	sp, #24
 800ec0c:	af02      	add	r7, sp, #8
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ec14:	2300      	movs	r3, #0
 800ec16:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800ec18:	2300      	movs	r3, #0
 800ec1a:	60fb      	str	r3, [r7, #12]
 800ec1c:	e061      	b.n	800ece2 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800ec1e:	4a3c      	ldr	r2, [pc, #240]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d156      	bne.n	800ecdc <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800ec2e:	4a38      	ldr	r2, [pc, #224]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec36:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ec3a:	2b04      	cmp	r3, #4
 800ec3c:	d158      	bne.n	800ecf0 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800ec3e:	887b      	ldrh	r3, [r7, #2]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d055      	beq.n	800ecf0 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800ec44:	4a32      	ldr	r2, [pc, #200]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec4c:	887a      	ldrh	r2, [r7, #2]
 800ec4e:	b2d2      	uxtb	r2, r2
 800ec50:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800ec54:	4a2e      	ldr	r2, [pc, #184]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ec62:	e007      	b.n	800ec74 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ec64:	4a2a      	ldr	r2, [pc, #168]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7f7 fe28 	bl	80068c4 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ec74:	4a26      	ldr	r2, [pc, #152]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec7c:	6858      	ldr	r0, [r3, #4]
 800ec7e:	4a24      	ldr	r2, [pc, #144]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec86:	33d0      	adds	r3, #208	; 0xd0
 800ec88:	2280      	movs	r2, #128	; 0x80
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	f7fa fb11 	bl	80092b2 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d1e6      	bne.n	800ec64 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ec96:	4a1e      	ldr	r2, [pc, #120]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	4919      	ldr	r1, [pc, #100]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f022 0204 	bic.w	r2, r2, #4
 800ecbc:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800ecbe:	4a14      	ldr	r2, [pc, #80]	; (800ed10 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecc6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ecca:	f107 0308 	add.w	r3, r7, #8
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	2203      	movs	r2, #3
 800ecd4:	2100      	movs	r1, #0
 800ecd6:	f7fd f921 	bl	800bf1c <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800ecda:	e009      	b.n	800ecf0 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	3301      	adds	r3, #1
 800ece0:	60fb      	str	r3, [r7, #12]
 800ece2:	4b0c      	ldr	r3, [pc, #48]	; (800ed14 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	461a      	mov	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	4293      	cmp	r3, r2
 800ecec:	db97      	blt.n	800ec1e <HAL_UARTEx_RxEventCallback+0x16>
 800ecee:	e000      	b.n	800ecf2 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800ecf0:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d007      	beq.n	800ed08 <HAL_UARTEx_RxEventCallback+0x100>
 800ecf8:	4b07      	ldr	r3, [pc, #28]	; (800ed18 <HAL_UARTEx_RxEventCallback+0x110>)
 800ecfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecfe:	601a      	str	r2, [r3, #0]
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	f3bf 8f6f 	isb	sy
}
 800ed08:	bf00      	nop
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	20002160 	.word	0x20002160
 800ed14:	20002168 	.word	0x20002168
 800ed18:	e000ed04 	.word	0xe000ed04

0800ed1c <memset>:
 800ed1c:	4402      	add	r2, r0
 800ed1e:	4603      	mov	r3, r0
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d100      	bne.n	800ed26 <memset+0xa>
 800ed24:	4770      	bx	lr
 800ed26:	f803 1b01 	strb.w	r1, [r3], #1
 800ed2a:	e7f9      	b.n	800ed20 <memset+0x4>

0800ed2c <__libc_init_array>:
 800ed2c:	b570      	push	{r4, r5, r6, lr}
 800ed2e:	4d0d      	ldr	r5, [pc, #52]	; (800ed64 <__libc_init_array+0x38>)
 800ed30:	4c0d      	ldr	r4, [pc, #52]	; (800ed68 <__libc_init_array+0x3c>)
 800ed32:	1b64      	subs	r4, r4, r5
 800ed34:	10a4      	asrs	r4, r4, #2
 800ed36:	2600      	movs	r6, #0
 800ed38:	42a6      	cmp	r6, r4
 800ed3a:	d109      	bne.n	800ed50 <__libc_init_array+0x24>
 800ed3c:	4d0b      	ldr	r5, [pc, #44]	; (800ed6c <__libc_init_array+0x40>)
 800ed3e:	4c0c      	ldr	r4, [pc, #48]	; (800ed70 <__libc_init_array+0x44>)
 800ed40:	f000 f826 	bl	800ed90 <_init>
 800ed44:	1b64      	subs	r4, r4, r5
 800ed46:	10a4      	asrs	r4, r4, #2
 800ed48:	2600      	movs	r6, #0
 800ed4a:	42a6      	cmp	r6, r4
 800ed4c:	d105      	bne.n	800ed5a <__libc_init_array+0x2e>
 800ed4e:	bd70      	pop	{r4, r5, r6, pc}
 800ed50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed54:	4798      	blx	r3
 800ed56:	3601      	adds	r6, #1
 800ed58:	e7ee      	b.n	800ed38 <__libc_init_array+0xc>
 800ed5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed5e:	4798      	blx	r3
 800ed60:	3601      	adds	r6, #1
 800ed62:	e7f2      	b.n	800ed4a <__libc_init_array+0x1e>
 800ed64:	0800f064 	.word	0x0800f064
 800ed68:	0800f064 	.word	0x0800f064
 800ed6c:	0800f064 	.word	0x0800f064
 800ed70:	0800f068 	.word	0x0800f068

0800ed74 <memcpy>:
 800ed74:	440a      	add	r2, r1
 800ed76:	4291      	cmp	r1, r2
 800ed78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed7c:	d100      	bne.n	800ed80 <memcpy+0xc>
 800ed7e:	4770      	bx	lr
 800ed80:	b510      	push	{r4, lr}
 800ed82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed8a:	4291      	cmp	r1, r2
 800ed8c:	d1f9      	bne.n	800ed82 <memcpy+0xe>
 800ed8e:	bd10      	pop	{r4, pc}

0800ed90 <_init>:
 800ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed92:	bf00      	nop
 800ed94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed96:	bc08      	pop	{r3}
 800ed98:	469e      	mov	lr, r3
 800ed9a:	4770      	bx	lr

0800ed9c <_fini>:
 800ed9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9e:	bf00      	nop
 800eda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eda2:	bc08      	pop	{r3}
 800eda4:	469e      	mov	lr, r3
 800eda6:	4770      	bx	lr
