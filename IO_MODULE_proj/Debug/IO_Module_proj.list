
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f038  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800f178  0800f178  0001f178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f42c  0800f42c  0001f42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f434  0800f434  0001f434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f438  0800f438  0001f438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000008  0800f43c  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020ec  20000070  0800f4a4  00020070  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000215c  0800f4a4  0002215c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030d0a  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005fa2  00000000  00000000  00050ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ba8  00000000  00000000  00056d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021bf  00000000  00000000  00059938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028ad2  00000000  00000000  0005baf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002ebfe  00000000  00000000  000845c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00101845  00000000  00000000  000b31c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bc80  00000000  00000000  001b4a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001c068c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f160 	.word	0x0800f160

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	0800f160 	.word	0x0800f160

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b970 	b.w	8000cb4 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	460d      	mov	r5, r1
 80009f4:	4604      	mov	r4, r0
 80009f6:	460f      	mov	r7, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d14a      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4694      	mov	ip, r2
 8000a00:	d965      	bls.n	8000ace <__udivmoddi4+0xe2>
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	b143      	cbz	r3, 8000a1a <__udivmoddi4+0x2e>
 8000a08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a0c:	f1c3 0220 	rsb	r2, r3, #32
 8000a10:	409f      	lsls	r7, r3
 8000a12:	fa20 f202 	lsr.w	r2, r0, r2
 8000a16:	4317      	orrs	r7, r2
 8000a18:	409c      	lsls	r4, r3
 8000a1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1e:	fa1f f58c 	uxth.w	r5, ip
 8000a22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a26:	0c22      	lsrs	r2, r4, #16
 8000a28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a30:	fb01 f005 	mul.w	r0, r1, r5
 8000a34:	4290      	cmp	r0, r2
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x62>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a40:	f080 811c 	bcs.w	8000c7c <__udivmoddi4+0x290>
 8000a44:	4290      	cmp	r0, r2
 8000a46:	f240 8119 	bls.w	8000c7c <__udivmoddi4+0x290>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4462      	add	r2, ip
 8000a4e:	1a12      	subs	r2, r2, r0
 8000a50:	b2a4      	uxth	r4, r4
 8000a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5e:	fb00 f505 	mul.w	r5, r0, r5
 8000a62:	42a5      	cmp	r5, r4
 8000a64:	d90a      	bls.n	8000a7c <__udivmoddi4+0x90>
 8000a66:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6e:	f080 8107 	bcs.w	8000c80 <__udivmoddi4+0x294>
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	f240 8104 	bls.w	8000c80 <__udivmoddi4+0x294>
 8000a78:	4464      	add	r4, ip
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	2100      	movs	r1, #0
 8000a84:	b11e      	cbz	r6, 8000a8e <__udivmoddi4+0xa2>
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0xbc>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ed 	beq.w	8000c76 <__udivmoddi4+0x28a>
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	fab3 f183 	clz	r1, r3
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d149      	bne.n	8000b44 <__udivmoddi4+0x158>
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	d302      	bcc.n	8000aba <__udivmoddi4+0xce>
 8000ab4:	4282      	cmp	r2, r0
 8000ab6:	f200 80f8 	bhi.w	8000caa <__udivmoddi4+0x2be>
 8000aba:	1a84      	subs	r4, r0, r2
 8000abc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d0e2      	beq.n	8000a8e <__udivmoddi4+0xa2>
 8000ac8:	e9c6 4700 	strd	r4, r7, [r6]
 8000acc:	e7df      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000ace:	b902      	cbnz	r2, 8000ad2 <__udivmoddi4+0xe6>
 8000ad0:	deff      	udf	#255	; 0xff
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000aec:	fb07 2015 	mls	r0, r7, r5, r2
 8000af0:	0c22      	lsrs	r2, r4, #16
 8000af2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af6:	fb0e f005 	mul.w	r0, lr, r5
 8000afa:	4290      	cmp	r0, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x124>
 8000afe:	eb1c 0202 	adds.w	r2, ip, r2
 8000b02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x122>
 8000b08:	4290      	cmp	r0, r2
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2b8>
 8000b0e:	4645      	mov	r5, r8
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b18:	fb07 2210 	mls	r2, r7, r0, r2
 8000b1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x14e>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x14c>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2c2>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b42:	e79f      	b.n	8000a84 <__udivmoddi4+0x98>
 8000b44:	f1c1 0720 	rsb	r7, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa05 f401 	lsl.w	r4, r5, r1
 8000b56:	fa20 f307 	lsr.w	r3, r0, r7
 8000b5a:	40fd      	lsrs	r5, r7
 8000b5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b60:	4323      	orrs	r3, r4
 8000b62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6e:	0c1c      	lsrs	r4, r3, #16
 8000b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b74:	fb08 f50e 	mul.w	r5, r8, lr
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b90:	42a5      	cmp	r5, r4
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4464      	add	r4, ip
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	b29d      	uxth	r5, r3
 8000ba0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1da>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2ac>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	4464      	add	r4, ip
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fba3 9502 	umull	r9, r5, r3, r2
 8000bce:	eba4 040e 	sub.w	r4, r4, lr
 8000bd2:	42ac      	cmp	r4, r5
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46ae      	mov	lr, r5
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x29c>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x298>
 8000bdc:	b156      	cbz	r6, 8000bf4 <__udivmoddi4+0x208>
 8000bde:	ebb0 0208 	subs.w	r2, r0, r8
 8000be2:	eb64 040e 	sbc.w	r4, r4, lr
 8000be6:	fa04 f707 	lsl.w	r7, r4, r7
 8000bea:	40ca      	lsrs	r2, r1
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	f1c3 0120 	rsb	r1, r3, #32
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	fa20 f201 	lsr.w	r2, r0, r1
 8000c08:	fa25 f101 	lsr.w	r1, r5, r1
 8000c0c:	409d      	lsls	r5, r3
 8000c0e:	432a      	orrs	r2, r5
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c26:	fb00 f50e 	mul.w	r5, r0, lr
 8000c2a:	428d      	cmp	r5, r1
 8000c2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x258>
 8000c32:	eb1c 0101 	adds.w	r1, ip, r1
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c3c:	428d      	cmp	r5, r1
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1b49      	subs	r1, r1, r5
 8000c46:	b292      	uxth	r2, r2
 8000c48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	fb05 f10e 	mul.w	r1, r5, lr
 8000c58:	4291      	cmp	r1, r2
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x282>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c66:	4291      	cmp	r1, r2
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c6a:	3d02      	subs	r5, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a52      	subs	r2, r2, r1
 8000c70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0xfc>
 8000c76:	4631      	mov	r1, r6
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e708      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e6e6      	b.n	8000a4e <__udivmoddi4+0x62>
 8000c80:	4610      	mov	r0, r2
 8000c82:	e6fb      	b.n	8000a7c <__udivmoddi4+0x90>
 8000c84:	4548      	cmp	r0, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f0>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c90:	3b01      	subs	r3, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f0>
 8000c94:	4645      	mov	r5, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x282>
 8000c98:	462b      	mov	r3, r5
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1da>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x258>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca4:	3d02      	subs	r5, #2
 8000ca6:	4462      	add	r2, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x124>
 8000caa:	4608      	mov	r0, r1
 8000cac:	e70a      	b.n	8000ac4 <__udivmoddi4+0xd8>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x14e>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <PID0_step>:
float rtb_Sum = 0;
float temp_err = 0;

/* Model step function */
void PID0_step(double Temp)
{
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	ed87 0b00 	vstr	d0, [r7]
  real_T Input = 293.15 - (Temp + 273.15);
 8000cc2:	a36c      	add	r3, pc, #432	; (adr r3, 8000e74 <PID0_step+0x1bc>)
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ccc:	f7ff fa5e 	bl	800018c <__adddf3>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	a169      	add	r1, pc, #420	; (adr r1, 8000e7c <PID0_step+0x1c4>)
 8000cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cda:	f7ff fa55 	bl	8000188 <__aeabi_dsub>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  real_T rtb_FilterCoefficient;
  PID0_U.u = Input;
 8000ce6:	4958      	ldr	r1, [pc, #352]	; (8000e48 <PID0_step+0x190>)
 8000ce8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cec:	e9c1 2300 	strd	r2, r3, [r1]
   *  Gain: '<S27>/Derivative Gain'
   *  Inport: '<Root>/u'
   *  Sum: '<S28>/SumD'
   */
  // Derivative gain 0.0
  rtb_FilterCoefficient = (kD * PID0_U.u - PID0_DW.Filter_DSTATE) * 100.0;
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <PID0_step+0x190>)
 8000cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf6:	4b55      	ldr	r3, [pc, #340]	; (8000e4c <PID0_step+0x194>)
 8000cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfc:	f7ff fbfc 	bl	80004f8 <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <PID0_step+0x198>)
 8000d0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d0e:	f7ff fa3b 	bl	8000188 <__aeabi_dsub>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <PID0_step+0x19c>)
 8000d20:	f7ff fbea 	bl	80004f8 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	e9c7 2302 	strd	r2, r3, [r7, #8]
   *  DiscreteIntegrator: '<S33>/Integrator's
   *  Gain: '<S38>/Proportional Gain'
   *  Inport: '<Root>/u'
   */
  // Proportional gain 0.001
  rtb_Sum = (kP * PID0_U.u + PID0_DW.Integrator_DSTATE) +
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <PID0_step+0x190>)
 8000d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d32:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <PID0_step+0x1a0>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff fbde 	bl	80004f8 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <PID0_step+0x198>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4a:	f7ff fa1f 	bl	800018c <__adddf3>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d5a:	f7ff fa17 	bl	800018c <__adddf3>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff fdd9 	bl	800091c <__aeabi_d2f>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a3b      	ldr	r2, [pc, #236]	; (8000e5c <PID0_step+0x1a4>)
 8000d6e:	6013      	str	r3, [r2, #0]
    rtb_FilterCoefficient;


  /* Saturate: '<S40>/Saturation' */
  if (rtb_Sum > 1.0) {
 8000d70:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <PID0_step+0x1a4>)
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d82:	dd06      	ble.n	8000d92 <PID0_step+0xda>
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = 1.0;
 8000d84:	4936      	ldr	r1, [pc, #216]	; (8000e60 <PID0_step+0x1a8>)
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <PID0_step+0x1ac>)
 8000d8c:	e9c1 2300 	strd	r2, r3, [r1]
 8000d90:	e019      	b.n	8000dc6 <PID0_step+0x10e>
  } else if (rtb_Sum < 0.0) {
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <PID0_step+0x1a4>)
 8000d94:	edd3 7a00 	vldr	s15, [r3]
 8000d98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da0:	d507      	bpl.n	8000db2 <PID0_step+0xfa>
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = 0.0;
 8000da2:	492f      	ldr	r1, [pc, #188]	; (8000e60 <PID0_step+0x1a8>)
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e9c1 2300 	strd	r2, r3, [r1]
 8000db0:	e009      	b.n	8000dc6 <PID0_step+0x10e>
  } else {
    /* Saturate: '<S40>/Saturation' */
    PID0_Y.y = rtb_Sum;
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <PID0_step+0x1a4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb46 	bl	8000448 <__aeabi_f2d>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4927      	ldr	r1, [pc, #156]	; (8000e60 <PID0_step+0x1a8>)
 8000dc2:	e9c1 2300 	strd	r2, r3, [r1]
   *  Inport: '<Root>/u'
   *  Sum: '<S26>/SumI2'
   *  Sum: '<S26>/SumI4'
   */
  // Integral gain 0.001
  PID0_DW.Integrator_DSTATE += ((Input + temp_err) * kI);
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <PID0_step+0x198>)
 8000dc8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <PID0_step+0x1b0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb39 	bl	8000448 <__aeabi_f2d>
 8000dd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dda:	f7ff f9d7 	bl	800018c <__adddf3>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <PID0_step+0x1b4>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fb84 	bl	80004f8 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4620      	mov	r0, r4
 8000df6:	4629      	mov	r1, r5
 8000df8:	f7ff f9c8 	bl	800018c <__adddf3>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4913      	ldr	r1, [pc, #76]	; (8000e50 <PID0_step+0x198>)
 8000e02:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for DiscreteIntegrator: '<S28>/Filter' */
  PID0_DW.Filter_DSTATE += 50.0 * rtb_FilterCoefficient;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <PID0_step+0x198>)
 8000e08:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <PID0_step+0x1b8>)
 8000e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e16:	f7ff fb6f 	bl	80004f8 <__aeabi_dmul>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4620      	mov	r0, r4
 8000e20:	4629      	mov	r1, r5
 8000e22:	f7ff f9b3 	bl	800018c <__adddf3>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4909      	ldr	r1, [pc, #36]	; (8000e50 <PID0_step+0x198>)
 8000e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]

  temp_err = Input;
 8000e30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e34:	f7ff fd72 	bl	800091c <__aeabi_d2f>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <PID0_step+0x1b0>)
 8000e3c:	6013      	str	r3, [r2, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bdb0      	pop	{r4, r5, r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000a0 	.word	0x200000a0
 8000e4c:	200000b0 	.word	0x200000b0
 8000e50:	20000090 	.word	0x20000090
 8000e54:	40590000 	.word	0x40590000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200000b8 	.word	0x200000b8
 8000e60:	200000a8 	.word	0x200000a8
 8000e64:	3ff00000 	.word	0x3ff00000
 8000e68:	200000bc 	.word	0x200000bc
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	40490000 	.word	0x40490000
 8000e74:	66666666 	.word	0x66666666
 8000e78:	40711266 	.word	0x40711266
 8000e7c:	66666666 	.word	0x66666666
 8000e80:	40725266 	.word	0x40725266

08000e84 <IO_Module_Init>:



//IO Module Configuration function
void IO_Module_Init(modbusHandler_t * modH)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

	bitWrite(modH,TWA1_STATUS,TWA_1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2100      	movs	r1, #0
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f8f3 	bl	800107c <bitWrite>
	bitWrite(modH,TWA2_STATUS,TWA_2);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2102      	movs	r1, #2
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f8ee 	bl	800107c <bitWrite>
	bitWrite(modH,TWA3_STATUS,TWA_3);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f8e9 	bl	800107c <bitWrite>
	bitWrite(modH,TWA4_STATUS,TWA_4);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2106      	movs	r1, #6
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f8e4 	bl	800107c <bitWrite>


}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_ADC_ConvCpltCallback>:



// ADC complete conversion callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

	//osEventFlagsSet(tempFlagsHandle,0x01);
	osThreadFlagsSet(TempCalcHandle, 0x01);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f008 fdd8 	bl	8009a80 <osThreadFlagsSet>

}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000c0 	.word	0x200000c0

08000edc <ADC_Temp_Thread_Start>:

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <ADC_Temp_Thread_Start+0x24>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <ADC_Temp_Thread_Start+0x28>)
 8000ee6:	f008 fd39 	bl	800995c <osThreadNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <ADC_Temp_Thread_Start+0x2c>)
 8000eee:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <ADC_Temp_Thread_Start+0x30>)
 8000ef2:	f008 ff6f 	bl	8009dd4 <osEventFlagsNew>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <ADC_Temp_Thread_Start+0x34>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800f260 	.word	0x0800f260
 8000f04:	08000fb9 	.word	0x08000fb9
 8000f08:	200000c0 	.word	0x200000c0
 8000f0c:	0800f2b8 	.word	0x0800f2b8
 8000f10:	200000cc 	.word	0x200000cc

08000f14 <Control_Thread_Init>:

// Initializes required components for Control algorithm thread

void Control_Thread_Init(modbusHandler_t *modH)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	ControlHandle = osThreadNew(ControlTask, modH, &Control_attributes);
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <Control_Thread_Init+0x34>)
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <Control_Thread_Init+0x38>)
 8000f22:	f008 fd1b 	bl	800995c <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <Control_Thread_Init+0x3c>)
 8000f2a:	6013      	str	r3, [r2, #0]
	controlTimerHandle = osTimerNew(ControlExecTim, osTimerPeriodic, NULL, &controlTimer_attributes);
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <Control_Thread_Init+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2101      	movs	r1, #1
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <Control_Thread_Init+0x44>)
 8000f34:	f008 fea4 	bl	8009c80 <osTimerNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <Control_Thread_Init+0x48>)
 8000f3c:	6013      	str	r3, [r2, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	0800f284 	.word	0x0800f284
 8000f4c:	08000f61 	.word	0x08000f61
 8000f50:	200000c4 	.word	0x200000c4
 8000f54:	0800f2a8 	.word	0x0800f2a8
 8000f58:	080010ed 	.word	0x080010ed
 8000f5c:	200000c8 	.word	0x200000c8

08000f60 <ControlTask>:


// System Threads


void ControlTask(void *argument){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

	osTimerStart(controlTimerHandle, CONTROLFREQ);
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <ControlTask+0x48>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f008 ff01 	bl	8009d78 <osTimerStart>
	modbusHandler_t *modH = (modbusHandler_t *)argument;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]
	// Add the control algorithm and schedule the task properly to execute every period of time
	// TODO

	uint8_t TWA_Status = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	72fb      	strb	r3, [r7, #11]

		/*TWA_Status = bitRead(modH,1);
		HAL_GPIO_WritePin(TWA2_GPIO_Port, TWA2_Pin,TWA_Status);
		osDelay(5000);*/

		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f82:	2100      	movs	r1, #0
 8000f84:	2001      	movs	r0, #1
 8000f86:	f008 fdc9 	bl	8009b1c <osThreadFlagsWait>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <ControlTask+0x4c>)
 8000f8e:	f003 f9e7 	bl	8004360 <HAL_GPIO_TogglePin>
		PID0_step(Temperature);
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <ControlTask+0x50>)
 8000f94:	ed93 7b00 	vldr	d7, [r3]
 8000f98:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9c:	eef0 0a67 	vmov.f32	s1, s15
 8000fa0:	f7ff fe8a 	bl	8000cb8 <PID0_step>
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000fa4:	e7eb      	b.n	8000f7e <ControlTask+0x1e>
 8000fa6:	bf00      	nop
 8000fa8:	200000c8 	.word	0x200000c8
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	200000e0 	.word	0x200000e0
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <CalculateTemp_Thread>:
	}
}


void CalculateTemp_Thread(void *argument){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fc0:	217f      	movs	r1, #127	; 0x7f
 8000fc2:	4829      	ldr	r0, [pc, #164]	; (8001068 <CalculateTemp_Thread+0xb0>)
 8000fc4:	f002 fb92 	bl	80036ec <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4928      	ldr	r1, [pc, #160]	; (800106c <CalculateTemp_Thread+0xb4>)
 8000fcc:	4826      	ldr	r0, [pc, #152]	; (8001068 <CalculateTemp_Thread+0xb0>)
 8000fce:	f001 fab7 	bl	8002540 <HAL_ADC_Start_DMA>
		//osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f008 fd9f 	bl	8009b1c <osThreadFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <CalculateTemp_Thread+0xb4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa1d 	bl	8000424 <__aeabi_i2d>
 8000fea:	a319      	add	r3, pc, #100	; (adr r3, 8001050 <CalculateTemp_Thread+0x98>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fa82 	bl	80004f8 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	491d      	ldr	r1, [pc, #116]	; (8001070 <CalculateTemp_Thread+0xb8>)
 8000ffa:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <CalculateTemp_Thread+0xb8>)
 8001000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001004:	a314      	add	r3, pc, #80	; (adr r3, 8001058 <CalculateTemp_Thread+0xa0>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff f8bd 	bl	8000188 <__aeabi_dsub>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <CalculateTemp_Thread+0xbc>)
 800101c:	f7ff fa6c 	bl	80004f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	a30d      	add	r3, pc, #52	; (adr r3, 8001060 <CalculateTemp_Thread+0xa8>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fb8d 	bl	800074c <__aeabi_ddiv>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4910      	ldr	r1, [pc, #64]	; (8001078 <CalculateTemp_Thread+0xc0>)
 8001038:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <CalculateTemp_Thread+0xb0>)
 800103e:	f001 fb03 	bl	8002648 <HAL_ADC_Stop_DMA>
		osDelay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f008 fdeb 	bl	8009c1e <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8001048:	e7be      	b.n	8000fc8 <CalculateTemp_Thread+0x10>
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	f9353597 	.word	0xf9353597
 8001054:	3f47fffb 	.word	0x3f47fffb
 8001058:	083126e9 	.word	0x083126e9
 800105c:	3fda1cac 	.word	0x3fda1cac
 8001060:	851eb852 	.word	0x851eb852
 8001064:	400051eb 	.word	0x400051eb
 8001068:	200000f4 	.word	0x200000f4
 800106c:	200000d0 	.word	0x200000d0
 8001070:	200000d8 	.word	0x200000d8
 8001074:	40590000 	.word	0x40590000
 8001078:	200000e0 	.word	0x200000e0

0800107c <bitWrite>:
	}

}
// Temperature = (((ADCrawReading * 0.00073242) - 0.408)*100) / 2.04;
void bitWrite(modbusHandler_t * modH, uint8_t pos, uint8_t val)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
 8001088:	4613      	mov	r3, r2
 800108a:	70bb      	strb	r3, [r7, #2]
	uint16_t *temp;
	temp = &modH->u16regsCoilsRO[pos/16];
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	b2db      	uxtb	r3, r3
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]

	if (val == 1) {
 800109e:	78bb      	ldrb	r3, [r7, #2]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10d      	bne.n	80010c0 <bitWrite+0x44>
		*temp |= (1UL << (pos%16));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	801a      	strh	r2, [r3, #0]
	}
	else {
		*temp &= ~(1UL << (pos%16));
	}
}
 80010be:	e00e      	b.n	80010de <bitWrite+0x62>
		*temp &= ~(1UL << (pos%16));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	2101      	movs	r1, #1
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4013      	ands	r3, r2
 80010d8:	b29a      	uxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	801a      	strh	r2, [r3, #0]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <ControlExecTim>:
	return res;
}

/* ControlExecTim function */
void ControlExecTim(void *argument)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlExecTim */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	osThreadFlagsSet(ControlHandle, 0x01);
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <ControlExecTim+0x1c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f008 fcc0 	bl	8009a80 <osThreadFlagsSet>
  /* USER CODE END ControlExecTim */
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200000c4 	.word	0x200000c4

0800110c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800111c:	f023 0218 	bic.w	r2, r3, #24
 8001120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4313      	orrs	r3, r2
 8001128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800115c:	68fb      	ldr	r3, [r7, #12]
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800116a:	b480      	push	{r7}
 800116c:	b085      	sub	sp, #20
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4313      	orrs	r3, r2
 8001180:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4013      	ands	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 fe00 	bl	8001da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f872 	bl	800128c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011a8:	f000 f8e6 	bl	8001378 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ac:	f000 fa50 	bl	8001650 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b0:	f000 fa2c 	bl	800160c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011b4:	f000 f9b6 	bl	8001524 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80011b8:	f000 fa00 	bl	80015bc <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80011bc:	f000 f90e 	bl	80013dc <MX_ADC1_Init>
  MX_I2C1_Init();
 80011c0:	f000 f970 	bl	80014a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  ModbusH.uModbusType = MB_SLAVE;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <main+0xc8>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <main+0xc8>)
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <main+0xcc>)
 80011ce:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <main+0xc8>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <main+0xc8>)
 80011d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011dc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <main+0xc8>)
 80011e2:	4a22      	ldr	r2, [pc, #136]	; (800126c <main+0xd0>)
 80011e4:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <main+0xc8>)
 80011e8:	2208      	movs	r2, #8
 80011ea:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <main+0xc8>)
 80011ee:	4a20      	ldr	r2, [pc, #128]	; (8001270 <main+0xd4>)
 80011f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <main+0xc8>)
 80011f6:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <main+0xd8>)
 80011f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <main+0xc8>)
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <main+0xdc>)
 8001200:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <main+0xc8>)
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <main+0xe0>)
 8001208:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <main+0xc8>)
 800120e:	220a      	movs	r2, #10
 8001210:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <main+0xc8>)
 8001216:	2214      	movs	r2, #20
 8001218:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <main+0xc8>)
 800121e:	2205      	movs	r2, #5
 8001220:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  //ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
  ModbusH.xTypeHW = USART_HW_DMA;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <main+0xc8>)
 8001226:	2204      	movs	r2, #4
 8001228:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  IO_Module_Init(&ModbusH);
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <main+0xc8>)
 800122e:	f7ff fe29 	bl	8000e84 <IO_Module_Init>
  Control_Thread_Init(&ModbusH);
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <main+0xc8>)
 8001234:	f7ff fe6e 	bl	8000f14 <Control_Thread_Init>

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <main+0xc8>)
 800123a:	f00c fa8f 	bl	800d75c <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 800123e:	4809      	ldr	r0, [pc, #36]	; (8001264 <main+0xc8>)
 8001240:	f00c fb2e 	bl	800d8a0 <ModbusStart>
  //ssd1306_TestAll();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001244:	f008 fb40 	bl	80098c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <main+0xe4>)
 800124a:	2100      	movs	r1, #0
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <main+0xe8>)
 800124e:	f008 fb85 	bl	800995c <osThreadNew>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <main+0xec>)
 8001256:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 8001258:	f7ff fe40 	bl	8000edc <ADC_Temp_Thread_Start>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800125c:	f008 fb58 	bl	8009910 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001260:	e7fe      	b.n	8001260 <main+0xc4>
 8001262:	bf00      	nop
 8001264:	20000658 	.word	0x20000658
 8001268:	2000020c 	.word	0x2000020c
 800126c:	48000800 	.word	0x48000800
 8001270:	20000018 	.word	0x20000018
 8001274:	2000002c 	.word	0x2000002c
 8001278:	20000054 	.word	0x20000054
 800127c:	200000e8 	.word	0x200000e8
 8001280:	0800f2c8 	.word	0x0800f2c8
 8001284:	08001731 	.word	0x08001731
 8001288:	20000654 	.word	0x20000654

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b09a      	sub	sp, #104	; 0x68
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	2248      	movs	r2, #72	; 0x48
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f00d ff26 	bl	800f0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012c0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80012c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f023 0303 	bic.w	r3, r3, #3
 80012cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012d6:	f003 fa93 	bl	8004800 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ff16 	bl	800110c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <SystemClock_Config+0xe8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e8:	4a22      	ldr	r2, [pc, #136]	; (8001374 <SystemClock_Config+0xe8>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <SystemClock_Config+0xe8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80012fc:	2327      	movs	r3, #39	; 0x27
 80012fe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001318:	2300      	movs	r3, #0
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800131c:	2360      	movs	r3, #96	; 0x60
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fe09 	bl	8004f40 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001334:	f000 fa16 	bl	8001764 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001338:	236f      	movs	r3, #111	; 0x6f
 800133a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800133c:	2302      	movs	r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2101      	movs	r1, #1
 8001358:	4618      	mov	r0, r3
 800135a:	f004 f965 	bl	8005628 <HAL_RCC_ClockConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001364:	f000 f9fe 	bl	8001764 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001368:	f004 ff52 	bl	8006210 <HAL_RCCEx_EnableMSIPLLMode>
}
 800136c:	bf00      	nop
 800136e:	3768      	adds	r7, #104	; 0x68
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	58000400 	.word	0x58000400

08001378 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137e:	463b      	mov	r3, r7
 8001380:	2250      	movs	r2, #80	; 0x50
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f00d feb1 	bl	800f0ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800138a:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 800138e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001390:	2318      	movs	r3, #24
 8001392:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800139a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80013a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80013a6:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80013aa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80013b8:	2300      	movs	r3, #0
 80013ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80013bc:	2300      	movs	r3, #0
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 fdae 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80013ce:	f000 f9c9 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80013d2:	bf00      	nop
 80013d4:	3750      	adds	r7, #80	; 0x50
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e2:	463b      	mov	r3, r7
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013f2:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_ADC1_Init+0xbc>)
 80013f4:	4a29      	ldr	r2, [pc, #164]	; (800149c <MX_ADC1_Init+0xc0>)
 80013f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <MX_ADC1_Init+0xbc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <MX_ADC1_Init+0xbc>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001412:	2204      	movs	r2, #4
 8001414:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001418:	2200      	movs	r2, #0
 800141a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_ADC1_Init+0xbc>)
 800141e:	2200      	movs	r2, #0
 8001420:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001424:	2201      	movs	r2, #1
 8001426:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_ADC1_Init+0xbc>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001432:	2200      	movs	r2, #0
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_ADC1_Init+0xbc>)
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001446:	2200      	movs	r2, #0
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <MX_ADC1_Init+0xbc>)
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001454:	f000 ff28 	bl	80022a8 <HAL_ADC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800145e:	f000 f981 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_ADC1_Init+0xc4>)
 8001464:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001466:	2306      	movs	r3, #6
 8001468:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800146a:	2302      	movs	r3, #2
 800146c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800146e:	237f      	movs	r3, #127	; 0x7f
 8001470:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001472:	2304      	movs	r3, #4
 8001474:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_ADC1_Init+0xbc>)
 8001480:	f001 fb18 	bl	8002ab4 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800148a:	f000 f96b 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000f4 	.word	0x200000f4
 800149c:	50040000 	.word	0x50040000
 80014a0:	14f00020 	.word	0x14f00020

080014a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_I2C1_Init+0x74>)
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <MX_I2C1_Init+0x78>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_I2C1_Init+0x74>)
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <MX_I2C1_Init+0x7c>)
 80014b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_I2C1_Init+0x74>)
 80014bc:	2201      	movs	r2, #1
 80014be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_I2C1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_I2C1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <MX_I2C1_Init+0x74>)
 80014e0:	f002 ff58 	bl	8004394 <HAL_I2C_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ea:	f000 f93b 	bl	8001764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ee:	2100      	movs	r1, #0
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <MX_I2C1_Init+0x74>)
 80014f2:	f002 ffea 	bl	80044ca <HAL_I2CEx_ConfigAnalogFilter>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014fc:	f000 f932 	bl	8001764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001500:	2100      	movs	r1, #0
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_I2C1_Init+0x74>)
 8001504:	f003 f82c 	bl	8004560 <HAL_I2CEx_ConfigDigitalFilter>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800150e:	f000 f929 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200001b8 	.word	0x200001b8
 800151c:	40005400 	.word	0x40005400
 8001520:	00300f38 	.word	0x00300f38

08001524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <MX_USART1_UART_Init+0x94>)
 800152c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 800156e:	f005 f9e1 	bl	8006934 <HAL_UART_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001578:	f000 f8f4 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157c:	2100      	movs	r1, #0
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001580:	f008 f803 	bl	800958a <HAL_UARTEx_SetTxFifoThreshold>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800158a:	f000 f8eb 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 8001592:	f008 f838 	bl	8009606 <HAL_UARTEx_SetRxFifoThreshold>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800159c:	f000 f8e2 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_USART1_UART_Init+0x90>)
 80015a2:	f007 ffb9 	bl	8009518 <HAL_UARTEx_DisableFifoMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015ac:	f000 f8da 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000020c 	.word	0x2000020c
 80015b8:	40013800 	.word	0x40013800

080015bc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <MX_USB_PCD_Init+0x4c>)
 80015c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015c8:	2208      	movs	r2, #8
 80015ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015d4:	2202      	movs	r2, #2
 80015d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_USB_PCD_Init+0x48>)
 80015f2:	f003 f801 	bl	80045f8 <HAL_PCD_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80015fc:	f000 f8b2 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000360 	.word	0x20000360
 8001608:	40006800 	.word	0x40006800

0800160c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001610:	2004      	movs	r0, #4
 8001612:	f7ff fd91 	bl	8001138 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff fd8e 	bl	8001138 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2105      	movs	r1, #5
 8001620:	200b      	movs	r0, #11
 8001622:	f002 f9af 	bl	8003984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001626:	200b      	movs	r0, #11
 8001628:	f002 f9c6 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2105      	movs	r1, #5
 8001630:	200c      	movs	r0, #12
 8001632:	f002 f9a7 	bl	8003984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001636:	200c      	movs	r0, #12
 8001638:	f002 f9be 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2105      	movs	r1, #5
 8001640:	200d      	movs	r0, #13
 8001642:	f002 f99f 	bl	8003984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001646:	200d      	movs	r0, #13
 8001648:	f002 f9b6 	bl	80039b8 <HAL_NVIC_EnableIRQ>

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001664:	2004      	movs	r0, #4
 8001666:	f7ff fd80 	bl	800116a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2002      	movs	r0, #2
 800166c:	f7ff fd7d 	bl	800116a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fd7a 	bl	800116a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	2008      	movs	r0, #8
 8001678:	f7ff fd77 	bl	800116a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2108      	movs	r1, #8
 8001680:	4828      	ldr	r0, [pc, #160]	; (8001724 <MX_GPIO_Init+0xd4>)
 8001682:	f002 fe55 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2102      	movs	r1, #2
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f002 fe4f 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 8001692:	2200      	movs	r2, #0
 8001694:	f24f 0103 	movw	r1, #61443	; 0xf003
 8001698:	4823      	ldr	r0, [pc, #140]	; (8001728 <MX_GPIO_Init+0xd8>)
 800169a:	f002 fe49 	bl	8004330 <HAL_GPIO_WritePin>
                          |TWA3_Pin|TWA4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 800169e:	2308      	movs	r3, #8
 80016a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_GPIO_Init+0xd4>)
 80016b4:	f002 fccc 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016b8:	2302      	movs	r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d0:	f002 fcbe 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d4:	2310      	movs	r3, #16
 80016d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	480f      	ldr	r0, [pc, #60]	; (8001724 <MX_GPIO_Init+0xd4>)
 80016e6:	f002 fcb3 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TWA1_Pin TWA2_Pin
                           TWA3_Pin TWA4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 80016ea:	f24f 0303 	movw	r3, #61443	; 0xf003
 80016ee:	607b      	str	r3, [r7, #4]
                          |TWA3_Pin|TWA4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4809      	ldr	r0, [pc, #36]	; (8001728 <MX_GPIO_Init+0xd8>)
 8001702:	f002 fca5 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001706:	2303      	movs	r3, #3
 8001708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_GPIO_Init+0xdc>)
 8001718:	f002 fc9a 	bl	8004050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	48000800 	.word	0x48000800
 8001728:	48000400 	.word	0x48000400
 800172c:	48000c00 	.word	0x48000c00

08001730 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


for(;;)
  {
    osDelay(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f008 fa70 	bl	8009c1e <osDelay>
 800173e:	e7fb      	b.n	8001738 <StartDefaultTask+0x8>

08001740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001752:	f000 fb47 	bl	8001de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40014400 	.word	0x40014400

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>

0800176e <LL_AHB2_GRP1_EnableClock>:
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800177c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4013      	ands	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4013      	ands	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	210f      	movs	r1, #15
 800180c:	f06f 0001 	mvn.w	r0, #1
 8001810:	f002 f8b8 	bl	8003984 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <HAL_ADC_MspInit+0xb8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d146      	bne.n	80018c8 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800183a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800183e:	f7ff ff96 	bl	800176e <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff ff93 	bl	800176e <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001848:	2301      	movs	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184c:	2303      	movs	r3, #3
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185e:	f002 fbf7 	bl	8004050 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 8001864:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <HAL_ADC_MspInit+0xc0>)
 8001866:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 800186a:	2205      	movs	r2, #5
 800186c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 8001882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001886:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 800188a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 8001892:	2220      	movs	r2, #32
 8001894:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 800189e:	f002 f899 	bl	80039d4 <HAL_DMA_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80018a8:	f7ff ff5c 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 80018b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_ADC_MspInit+0xbc>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2105      	movs	r1, #5
 80018bc:	2012      	movs	r0, #18
 80018be:	f002 f861 	bl	8003984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80018c2:	2012      	movs	r0, #18
 80018c4:	f002 f878 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	50040000 	.word	0x50040000
 80018d4:	20000158 	.word	0x20000158
 80018d8:	40020030 	.word	0x40020030

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b09c      	sub	sp, #112	; 0x70
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2250      	movs	r2, #80	; 0x50
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00d fbf5 	bl	800f0ec <memset>
  if(hi2c->Instance==I2C1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d126      	bne.n	800195a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800190c:	2304      	movs	r3, #4
 800190e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001910:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4618      	mov	r0, r3
 800191c:	f004 fb02 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001926:	f7ff ff1d 	bl	8001764 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2002      	movs	r0, #2
 800192c:	f7ff ff1f 	bl	800176e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001934:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001942:	2304      	movs	r3, #4
 8001944:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800194a:	4619      	mov	r1, r3
 800194c:	4806      	ldr	r0, [pc, #24]	; (8001968 <HAL_I2C_MspInit+0x8c>)
 800194e:	f002 fb7f 	bl	8004050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001952:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001956:	f7ff ff23 	bl	80017a0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3770      	adds	r7, #112	; 0x70
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40005400 	.word	0x40005400
 8001968:	48000400 	.word	0x48000400

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b09c      	sub	sp, #112	; 0x70
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2250      	movs	r2, #80	; 0x50
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00d fbad 	bl	800f0ec <memset>
  if(huart->Instance==USART1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <HAL_UART_MspInit+0x138>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d17f      	bne.n	8001a9c <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800199c:	2301      	movs	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fabb 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b4:	f7ff fed6 	bl	8001764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019bc:	f7ff ff09 	bl	80017d2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7ff fed4 	bl	800176e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d6:	2307      	movs	r3, #7
 80019d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019de:	4619      	mov	r1, r3
 80019e0:	4831      	ldr	r0, [pc, #196]	; (8001aa8 <HAL_UART_MspInit+0x13c>)
 80019e2:	f002 fb35 	bl	8004050 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_UART_MspInit+0x140>)
 80019e8:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <HAL_UART_MspInit+0x144>)
 80019ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <HAL_UART_MspInit+0x140>)
 80019ee:	220e      	movs	r2, #14
 80019f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_UART_MspInit+0x140>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f8:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <HAL_UART_MspInit+0x140>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_UART_MspInit+0x140>)
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <HAL_UART_MspInit+0x140>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_UART_MspInit+0x140>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_UART_MspInit+0x140>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_UART_MspInit+0x140>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a1c:	4823      	ldr	r0, [pc, #140]	; (8001aac <HAL_UART_MspInit+0x140>)
 8001a1e:	f001 ffd9 	bl	80039d4 <HAL_DMA_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001a28:	f7ff fe9c 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_UART_MspInit+0x140>)
 8001a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001a34:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <HAL_UART_MspInit+0x140>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_UART_MspInit+0x14c>)
 8001a3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a42:	220f      	movs	r2, #15
 8001a44:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a48:	2210      	movs	r2, #16
 8001a4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a70:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a72:	f001 ffaf 	bl	80039d4 <HAL_DMA_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001a7c:	f7ff fe72 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a84:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <HAL_UART_MspInit+0x148>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2105      	movs	r1, #5
 8001a90:	2024      	movs	r0, #36	; 0x24
 8001a92:	f001 ff77 	bl	8003984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a96:	2024      	movs	r0, #36	; 0x24
 8001a98:	f001 ff8e 	bl	80039b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3770      	adds	r7, #112	; 0x70
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	200002a0 	.word	0x200002a0
 8001ab0:	40020008 	.word	0x40020008
 8001ab4:	20000300 	.word	0x20000300
 8001ab8:	4002001c 	.word	0x4002001c

08001abc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_PCD_MspInit+0x5c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d118      	bne.n	8001b10 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff fe45 	bl	800176e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ae4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ae8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001af6:	230a      	movs	r3, #10
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f002 faa4 	bl	8004050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b08:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001b0c:	f7ff fe48 	bl	80017a0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40006800 	.word	0x40006800

08001b1c <LL_APB2_GRP1_EnableClock>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b40:	68fb      	ldr	r3, [r7, #12]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	2019      	movs	r0, #25
 8001b66:	f001 ff0d 	bl	8003984 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b6a:	2019      	movs	r0, #25
 8001b6c:	f001 ff24 	bl	80039b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001b70:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b74:	f7ff ffd2 	bl	8001b1c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b78:	f107 0208 	add.w	r2, r7, #8
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 ff3c 	bl	8005a00 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b88:	f003 ff24 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 8001b8c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_InitTick+0x8c>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9b      	lsrs	r3, r3, #18
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_InitTick+0x90>)
 8001b9e:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_InitTick+0x94>)
 8001ba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_InitTick+0x90>)
 8001ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ba8:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001baa:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_InitTick+0x90>)
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_InitTick+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_InitTick+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001bbc:	4808      	ldr	r0, [pc, #32]	; (8001be0 <HAL_InitTick+0x90>)
 8001bbe:	f004 fc3e 	bl	800643e <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d104      	bne.n	8001bd2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_InitTick+0x90>)
 8001bca:	f004 fc99 	bl	8006500 <HAL_TIM_Base_Start_IT>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3730      	adds	r7, #48	; 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	200007b0 	.word	0x200007b0
 8001be4:	40014400 	.word	0x40014400

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <DMA1_Channel1_IRQHandler+0x10>)
 8001c1a:	f002 f8bc 	bl	8003d96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002a0 	.word	0x200002a0

08001c28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <DMA1_Channel2_IRQHandler+0x10>)
 8001c2e:	f002 f8b2 	bl	8003d96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000300 	.word	0x20000300

08001c3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <DMA1_Channel3_IRQHandler+0x10>)
 8001c42:	f002 f8a8 	bl	8003d96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000158 	.word	0x20000158

08001c50 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <ADC1_IRQHandler+0x10>)
 8001c56:	f000 fd58 	bl	800270a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200000f4 	.word	0x200000f4

08001c64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c6a:	f004 fc97 	bl	800659c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200007b0 	.word	0x200007b0

08001c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <USART1_IRQHandler+0x10>)
 8001c7e:	f005 f96d 	bl	8006f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000020c 	.word	0x2000020c

08001c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <SystemInit+0x98>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <SystemInit+0x98>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001cb8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <SystemInit+0x9c>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd6:	f023 0305 	bic.w	r3, r3, #5
 8001cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf6:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <SystemInit+0xa0>)
 8001cf8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <SystemInit+0xa0>)
 8001d00:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00
 8001d28:	faf6fefb 	.word	0xfaf6fefb
 8001d2c:	22041000 	.word	0x22041000

08001d30 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001d30:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d32:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d34:	3304      	adds	r3, #4

08001d36 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d36:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d38:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001d3a:	d3f9      	bcc.n	8001d30 <CopyDataInit>
  bx lr
 8001d3c:	4770      	bx	lr

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001d3e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001d40:	3004      	adds	r0, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001d42:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>
  bx lr
 8001d46:	4770      	bx	lr

08001d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d4c:	f7ff ff9e 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <LoopForever+0x6>)
 8001d52:	490c      	ldr	r1, [pc, #48]	; (8001d84 <LoopForever+0xa>)
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <LoopForever+0xe>)
 8001d56:	2300      	movs	r3, #0
 8001d58:	f7ff ffed 	bl	8001d36 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d5c:	480b      	ldr	r0, [pc, #44]	; (8001d8c <LoopForever+0x12>)
 8001d5e:	490c      	ldr	r1, [pc, #48]	; (8001d90 <LoopForever+0x16>)
 8001d60:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <LoopForever+0x1a>)
 8001d62:	2300      	movs	r3, #0
 8001d64:	f7ff ffe7 	bl	8001d36 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <LoopForever+0x1e>)
 8001d6a:	490c      	ldr	r1, [pc, #48]	; (8001d9c <LoopForever+0x22>)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f7ff ffe8 	bl	8001d42 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d72:	f00d f9c3 	bl	800f0fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d76:	f7ff fa11 	bl	800119c <main>

08001d7a <LoopForever>:

LoopForever:
  b LoopForever
 8001d7a:	e7fe      	b.n	8001d7a <LoopForever>
  ldr   r0, =_estack
 8001d7c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001d80:	20000008 	.word	0x20000008
 8001d84:	20000070 	.word	0x20000070
 8001d88:	0800f43c 	.word	0x0800f43c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d8c:	20030000 	.word	0x20030000
 8001d90:	20030000 	.word	0x20030000
 8001d94:	0800f4a4 	.word	0x0800f4a4
  INIT_BSS _sbss, _ebss
 8001d98:	20000070 	.word	0x20000070
 8001d9c:	2000215c 	.word	0x2000215c

08001da0 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <AES1_IRQHandler>
	...

08001da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_Init+0x3c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_Init+0x3c>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f001 fdd7 	bl	800396e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc0:	200f      	movs	r0, #15
 8001dc2:	f7ff fec5 	bl	8001b50 <HAL_InitTick>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	e001      	b.n	8001dd6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dd2:	f7ff fd17 	bl	8001804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	58004000 	.word	0x58004000

08001de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000068 	.word	0x20000068
 8001e08:	200007fc 	.word	0x200007fc

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	200007fc 	.word	0x200007fc

08001e24 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTickPrio+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000064 	.word	0x20000064

08001e3c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3360      	adds	r3, #96	; 0x60
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <LL_ADC_SetOffset+0x44>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	03fff000 	.word	0x03fff000

08001eec <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3360      	adds	r3, #96	; 0x60
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3360      	adds	r3, #96	; 0x60
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f66:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3330      	adds	r3, #48	; 0x30
 8001f84:	461a      	mov	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	4413      	add	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	211f      	movs	r1, #31
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0e9b      	lsrs	r3, r3, #26
 8001fac:	f003 011f 	and.w	r1, r3, #31
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800200e:	b480      	push	{r7}
 8002010:	b087      	sub	sp, #28
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3314      	adds	r3, #20
 800201e:	461a      	mov	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	0e5b      	lsrs	r3, r3, #25
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	0d1b      	lsrs	r3, r3, #20
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2107      	movs	r1, #7
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	0d1b      	lsrs	r3, r3, #20
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	431a      	orrs	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0318 	and.w	r3, r3, #24
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002088:	40d9      	lsrs	r1, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	400b      	ands	r3, r1
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	0007ffff 	.word	0x0007ffff

080020ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6093      	str	r3, [r2, #8]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002134:	d101      	bne.n	800213a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	f043 0202 	orr.w	r2, r3, #2
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <LL_ADC_IsEnabled+0x18>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_ADC_IsEnabled+0x1a>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_IsDisableOngoing+0x18>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_IsDisableOngoing+0x1a>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f8:	f043 0204 	orr.w	r2, r3, #4
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002220:	f043 0210 	orr.w	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d101      	bne.n	800224c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800226a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b08      	cmp	r3, #8
 8002294:	d101      	bne.n	800229a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e12e      	b.n	8002524 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fa9f 	bl	8001818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff feef 	bl	80020d0 <LL_ADC_IsDeepPowerDownEnabled>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fed5 	bl	80020ac <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff0a 	bl	8002120 <LL_ADC_IsInternalRegulatorEnabled>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d115      	bne.n	800233e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff feee 	bl	80020f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800231c:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_ADC_Init+0x284>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	4a83      	ldr	r2, [pc, #524]	; (8002530 <HAL_ADC_Init+0x288>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	3301      	adds	r3, #1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002330:	e002      	b.n	8002338 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3b01      	subs	r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f9      	bne.n	8002332 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff feec 	bl	8002120 <LL_ADC_IsInternalRegulatorEnabled>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10d      	bne.n	800236a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 0210 	orr.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff60 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002374:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 80c7 	bne.w	8002512 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 80c3 	bne.w	8002512 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002394:	f043 0202 	orr.w	r2, r3, #2
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fef9 	bl	8002198 <LL_ADC_IsEnabled>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023ac:	4861      	ldr	r0, [pc, #388]	; (8002534 <HAL_ADC_Init+0x28c>)
 80023ae:	f7ff fef3 	bl	8002198 <LL_ADC_IsEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4619      	mov	r1, r3
 80023be:	485e      	ldr	r0, [pc, #376]	; (8002538 <HAL_ADC_Init+0x290>)
 80023c0:	f7ff fd3c 	bl	8001e3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7e5b      	ldrb	r3, [r3, #25]
 80023c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80023e4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d106      	bne.n	8002404 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	3b01      	subs	r3, #1
 80023fc:	045b      	lsls	r3, r3, #17
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b45      	ldr	r3, [pc, #276]	; (800253c <HAL_ADC_Init+0x294>)
 8002428:	4013      	ands	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	430b      	orrs	r3, r1
 8002432:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fefb 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 800243e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff1c 	bl	8002282 <LL_ADC_INJ_IsConversionOngoing>
 800244a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d13d      	bne.n	80024ce <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d13a      	bne.n	80024ce <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800245c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002464:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002474:	f023 0302 	bic.w	r3, r3, #2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	69b9      	ldr	r1, [r7, #24]
 800247e:	430b      	orrs	r3, r1
 8002480:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002488:	2b01      	cmp	r3, #1
 800248a:	d118      	bne.n	80024be <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024ae:	430a      	orrs	r2, r1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	611a      	str	r2, [r3, #16]
 80024bc:	e007      	b.n	80024ce <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10c      	bne.n	80024f0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f023 010f 	bic.w	r1, r3, #15
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
 80024ee:	e007      	b.n	8002500 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 020f 	bic.w	r2, r2, #15
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	f023 0303 	bic.w	r3, r3, #3
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
 8002510:	e007      	b.n	8002522 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002522:	7ffb      	ldrb	r3, [r7, #31]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000060 	.word	0x20000060
 8002530:	053e2d63 	.word	0x053e2d63
 8002534:	50040000 	.word	0x50040000
 8002538:	50040300 	.word	0x50040300
 800253c:	fff0c007 	.word	0xfff0c007

08002540 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fe6f 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d167      	bne.n	800262c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ADC_Start_DMA+0x2a>
 8002566:	2302      	movs	r3, #2
 8002568:	e063      	b.n	8002632 <HAL_ADC_Start_DMA+0xf2>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 ff20 	bl	80033b8 <ADC_Enable>
 8002578:	4603      	mov	r3, r0
 800257a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d14f      	bne.n	8002622 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f023 0206 	bic.w	r2, r3, #6
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	659a      	str	r2, [r3, #88]	; 0x58
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4a20      	ldr	r2, [pc, #128]	; (800263c <HAL_ADC_Start_DMA+0xfc>)
 80025bc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_ADC_Start_DMA+0x100>)
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_ADC_Start_DMA+0x104>)
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	221c      	movs	r2, #28
 80025d4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0210 	orr.w	r2, r2, #16
 80025ec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3340      	adds	r3, #64	; 0x40
 8002608:	4619      	mov	r1, r3
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f001 fa89 	bl	8003b24 <HAL_DMA_Start_IT>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fde2 	bl	80021e4 <LL_ADC_REG_StartConversion>
 8002620:	e006      	b.n	8002630 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800262a:	e001      	b.n	8002630 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800262c:	2302      	movs	r3, #2
 800262e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002630:	7dfb      	ldrb	r3, [r7, #23]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	0800356b 	.word	0x0800356b
 8002640:	08003643 	.word	0x08003643
 8002644:	0800365f 	.word	0x0800365f

08002648 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Stop_DMA+0x16>
 800265a:	2302      	movs	r3, #2
 800265c:	e051      	b.n	8002702 <HAL_ADC_Stop_DMA+0xba>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002666:	2103      	movs	r1, #3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fde9 	bl	8003240 <ADC_ConversionStop>
 800266e:	4603      	mov	r3, r0
 8002670:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d13f      	bne.n	80026f8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d10f      	bne.n	80026b6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fabd 	bl	8003c1a <HAL_DMA_Abort>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0210 	bic.w	r2, r2, #16
 80026c4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 feed 	bl	80034ac <ADC_Disable>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e002      	b.n	80026de <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fee7 	bl	80034ac <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b088      	sub	sp, #32
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d017      	beq.n	8002760 <HAL_ADC_IRQHandler+0x56>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d012      	beq.n	8002760 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f001 f854 	bl	8003800 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2202      	movs	r2, #2
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d004      	beq.n	8002774 <HAL_ADC_IRQHandler+0x6a>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800277a:	2b00      	cmp	r3, #0
 800277c:	d05d      	beq.n	800283a <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d058      	beq.n	800283a <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fbd2 	bl	8001f4e <LL_ADC_REG_IsTriggerSourceSWStart>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03d      	beq.n	800282c <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027be:	d035      	beq.n	800282c <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d12e      	bne.n	800282c <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fd2e 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11a      	bne.n	8002814 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 020c 	bic.w	r2, r2, #12
 80027ec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d112      	bne.n	800282c <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
 8002812:	e00b      	b.n	800282c <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f043 0210 	orr.w	r2, r3, #16
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7fe fb45 	bl	8000ebc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	220c      	movs	r2, #12
 8002838:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_ADC_IRQHandler+0x144>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002854:	2b00      	cmp	r3, #0
 8002856:	d074      	beq.n	8002942 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d06f      	beq.n	8002942 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fbb2 	bl	8001fe8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002884:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fb5f 	bl	8001f4e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002890:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d049      	beq.n	8002934 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_ADC_IRQHandler+0x1b0>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d041      	beq.n	8002934 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d13c      	bne.n	8002934 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d135      	bne.n	8002934 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d12e      	bne.n	8002934 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fcd1 	bl	8002282 <LL_ADC_INJ_IsConversionOngoing>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11a      	bne.n	800291c <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d112      	bne.n	8002934 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
 800291a:	e00b      	b.n	8002934 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f043 0210 	orr.w	r2, r3, #16
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 ff3b 	bl	80037b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2260      	movs	r2, #96	; 0x60
 8002940:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b00      	cmp	r3, #0
 800294a:	d011      	beq.n	8002970 <HAL_ADC_IRQHandler+0x266>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00c      	beq.n	8002970 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f891 	bl	8002a8a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d012      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x296>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 ff21 	bl	80037d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <HAL_ADC_IRQHandler+0x2c6>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00d      	beq.n	80029d0 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 ff13 	bl	80037ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d02b      	beq.n	8002a32 <HAL_ADC_IRQHandler+0x328>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d026      	beq.n	8002a32 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d102      	bne.n	80029f2 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	e009      	b.n	8002a06 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fae8 	bl	8001fcc <LL_ADC_REG_GetDMATransfer>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10e      	bne.n	8002a2a <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	f043 0202 	orr.w	r2, r3, #2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f83a 	bl	8002a9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_ADC_IRQHandler+0x364>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	f043 0208 	orr.w	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a66:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 feab 	bl	80037c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002a6e:	bf00      	nop
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0b6      	sub	sp, #216	; 0xd8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x22>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e39f      	b.n	8003216 <HAL_ADC_ConfigChannel+0x762>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fba6 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8384 	bne.w	80031f8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f7ff fa39 	bl	8001f74 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fb94 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 8002b0c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fbb4 	bl	8002282 <LL_ADC_INJ_IsConversionOngoing>
 8002b1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 81a6 	bne.w	8002e74 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 81a1 	bne.w	8002e74 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f7ff fa65 	bl	800200e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	08db      	lsrs	r3, r3, #3
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00a      	beq.n	8002b7c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6919      	ldr	r1, [r3, #16]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b76:	f7ff f995 	bl	8001ea4 <LL_ADC_SetOffset>
 8002b7a:	e17b      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f9b2 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0xf4>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f9a7 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	f003 021f 	and.w	r2, r3, #31
 8002ba6:	e01e      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x132>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f99c 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	e004      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x14a>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0e9b      	lsrs	r3, r3, #26
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	e018      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x17c>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002c22:	2320      	movs	r3, #32
 8002c24:	e004      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d106      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f96b 	bl	8001f18 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f94f 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x1ba>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f944 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002c64:	4603      	mov	r3, r0
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	e01e      	b.n	8002cac <HAL_ADC_ConfigChannel+0x1f8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2101      	movs	r1, #1
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff f939 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e004      	b.n	8002caa <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x210>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	e018      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x242>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	e004      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d106      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2101      	movs	r1, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff f908 	bl	8001f18 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f8ec 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x280>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2102      	movs	r1, #2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f8e1 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	f003 021f 	and.w	r2, r3, #31
 8002d32:	e01e      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x2be>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2102      	movs	r1, #2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff f8d6 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e004      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d105      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x2d6>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	0e9b      	lsrs	r3, r3, #26
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	e016      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x304>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002daa:	2320      	movs	r3, #32
 8002dac:	e004      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d106      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff f8a7 	bl	8001f18 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2103      	movs	r1, #3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f88b 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x342>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2103      	movs	r1, #3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff f880 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	0e9b      	lsrs	r3, r3, #26
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	e017      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x372>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2103      	movs	r1, #3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff f875 	bl	8001eec <LL_ADC_GetOffsetChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e10:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	e003      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d105      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x38a>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	e011      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x3ae>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e003      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d106      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2103      	movs	r1, #3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff f852 	bl	8001f18 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f98d 	bl	8002198 <LL_ADC_IsEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 81c2 	bne.w	800320a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7ff f8e6 	bl	8002064 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4a8e      	ldr	r2, [pc, #568]	; (80030d8 <HAL_ADC_ConfigChannel+0x624>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	f040 8130 	bne.w	8003104 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x418>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	bf94      	ite	ls
 8002ec4:	2301      	movls	r3, #1
 8002ec6:	2300      	movhi	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e019      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x44c>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002edc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e003      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2b09      	cmp	r3, #9
 8002ef8:	bf94      	ite	ls
 8002efa:	2301      	movls	r3, #1
 8002efc:	2300      	movhi	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d079      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x46c>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	3301      	adds	r3, #1
 8002f18:	069b      	lsls	r3, r3, #26
 8002f1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f1e:	e015      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x498>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f30:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e003      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x4b8>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	e017      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x4e8>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002f84:	2320      	movs	r3, #32
 8002f86:	e003      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	ea42 0103 	orr.w	r1, r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x50e>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f003 021f 	and.w	r2, r3, #31
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	051b      	lsls	r3, r3, #20
 8002fc0:	e018      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x540>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e003      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	e080      	b.n	80030fa <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x560>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	069b      	lsls	r3, r3, #26
 800300e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003012:	e015      	b.n	8003040 <HAL_ADC_ConfigChannel+0x58c>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e003      	b.n	8003038 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	069b      	lsls	r3, r3, #26
 800303c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x5ac>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	e017      	b.n	8003090 <HAL_ADC_ConfigChannel+0x5dc>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	61fb      	str	r3, [r7, #28]
  return result;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x608>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	3b1e      	subs	r3, #30
 80030b4:	051b      	lsls	r3, r3, #20
 80030b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ba:	e01d      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x644>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	613b      	str	r3, [r7, #16]
  return result;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80030d4:	2320      	movs	r3, #32
 80030d6:	e005      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x630>
 80030d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f003 021f 	and.w	r2, r3, #31
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	3b1e      	subs	r3, #30
 80030f2:	051b      	lsls	r3, r3, #20
 80030f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f8:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fe ff85 	bl	800200e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b45      	ldr	r3, [pc, #276]	; (8003220 <HAL_ADC_ConfigChannel+0x76c>)
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d07c      	beq.n	800320a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003110:	4844      	ldr	r0, [pc, #272]	; (8003224 <HAL_ADC_ConfigChannel+0x770>)
 8003112:	f7fe feb9 	bl	8001e88 <LL_ADC_GetCommonPathInternalCh>
 8003116:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800311a:	4843      	ldr	r0, [pc, #268]	; (8003228 <HAL_ADC_ConfigChannel+0x774>)
 800311c:	f7ff f83c 	bl	8002198 <LL_ADC_IsEnabled>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d15e      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a40      	ldr	r2, [pc, #256]	; (800322c <HAL_ADC_ConfigChannel+0x778>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d127      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x6cc>
 8003130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d121      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a39      	ldr	r2, [pc, #228]	; (8003228 <HAL_ADC_ConfigChannel+0x774>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d161      	bne.n	800320a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800314a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800314e:	4619      	mov	r1, r3
 8003150:	4834      	ldr	r0, [pc, #208]	; (8003224 <HAL_ADC_ConfigChannel+0x770>)
 8003152:	f7fe fe86 	bl	8001e62 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_ADC_ConfigChannel+0x77c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	4a35      	ldr	r2, [pc, #212]	; (8003234 <HAL_ADC_ConfigChannel+0x780>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	099b      	lsrs	r3, r3, #6
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003170:	e002      	b.n	8003178 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b01      	subs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f9      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800317e:	e044      	b.n	800320a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <HAL_ADC_ConfigChannel+0x784>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d113      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x6fe>
 800318a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800318e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10d      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a23      	ldr	r2, [pc, #140]	; (8003228 <HAL_ADC_ConfigChannel+0x774>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d134      	bne.n	800320a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80031a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a8:	4619      	mov	r1, r3
 80031aa:	481e      	ldr	r0, [pc, #120]	; (8003224 <HAL_ADC_ConfigChannel+0x770>)
 80031ac:	f7fe fe59 	bl	8001e62 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031b0:	e02b      	b.n	800320a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a21      	ldr	r2, [pc, #132]	; (800323c <HAL_ADC_ConfigChannel+0x788>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d126      	bne.n	800320a <HAL_ADC_ConfigChannel+0x756>
 80031bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d120      	bne.n	800320a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_ADC_ConfigChannel+0x774>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d11b      	bne.n	800320a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80031d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031da:	4619      	mov	r1, r3
 80031dc:	4811      	ldr	r0, [pc, #68]	; (8003224 <HAL_ADC_ConfigChannel+0x770>)
 80031de:	f7fe fe40 	bl	8001e62 <LL_ADC_SetCommonPathInternalCh>
 80031e2:	e012      	b.n	800320a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031f6:	e008      	b.n	800320a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003212:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003216:	4618      	mov	r0, r3
 8003218:	37d8      	adds	r7, #216	; 0xd8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	80080000 	.word	0x80080000
 8003224:	50040300 	.word	0x50040300
 8003228:	50040000 	.word	0x50040000
 800322c:	c7520000 	.word	0xc7520000
 8003230:	20000060 	.word	0x20000060
 8003234:	053e2d63 	.word	0x053e2d63
 8003238:	cb840000 	.word	0xcb840000
 800323c:	80000001 	.word	0x80000001

08003240 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ffec 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 800325c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f80d 	bl	8002282 <LL_ADC_INJ_IsConversionOngoing>
 8003268:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d103      	bne.n	8003278 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8098 	beq.w	80033a8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02a      	beq.n	80032dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7e5b      	ldrb	r3, [r3, #25]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d126      	bne.n	80032dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7e1b      	ldrb	r3, [r3, #24]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d122      	bne.n	80032dc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003296:	2301      	movs	r3, #1
 8003298:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800329a:	e014      	b.n	80032c6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4a45      	ldr	r2, [pc, #276]	; (80033b4 <ADC_ConversionStop+0x174>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d90d      	bls.n	80032c0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0210 	orr.w	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e074      	b.n	80033aa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	3301      	adds	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d1e3      	bne.n	800329c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d014      	beq.n	800330c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe ffa4 	bl	8002234 <LL_ADC_REG_IsConversionOngoing>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00c      	beq.n	800330c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe ff61 	bl	80021be <LL_ADC_IsDisableOngoing>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe ff80 	bl	800220c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d014      	beq.n	800333c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe ffb3 	bl	8002282 <LL_ADC_INJ_IsConversionOngoing>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe ff49 	bl	80021be <LL_ADC_IsDisableOngoing>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe ff8f 	bl	800225a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d005      	beq.n	800334e <ADC_ConversionStop+0x10e>
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d105      	bne.n	8003354 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003348:	230c      	movs	r3, #12
 800334a:	617b      	str	r3, [r7, #20]
        break;
 800334c:	e005      	b.n	800335a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800334e:	2308      	movs	r3, #8
 8003350:	617b      	str	r3, [r7, #20]
        break;
 8003352:	e002      	b.n	800335a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003354:	2304      	movs	r3, #4
 8003356:	617b      	str	r3, [r7, #20]
        break;
 8003358:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800335a:	f7fe fd57 	bl	8001e0c <HAL_GetTick>
 800335e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003360:	e01b      	b.n	800339a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003362:	f7fe fd53 	bl	8001e0c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b05      	cmp	r3, #5
 800336e:	d914      	bls.n	800339a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f043 0210 	orr.w	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e007      	b.n	80033aa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1dc      	bne.n	8003362 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	a33fffff 	.word	0xa33fffff

080033b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fee5 	bl	8002198 <LL_ADC_IsEnabled>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d15e      	bne.n	8003492 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <ADC_Enable+0xe4>)
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e04a      	b.n	8003494 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fea0 	bl	8002148 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003408:	4825      	ldr	r0, [pc, #148]	; (80034a0 <ADC_Enable+0xe8>)
 800340a:	f7fe fd3d 	bl	8001e88 <LL_ADC_GetCommonPathInternalCh>
 800340e:	4603      	mov	r3, r0
 8003410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <ADC_Enable+0xec>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <ADC_Enable+0xf0>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	3301      	adds	r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800342a:	e002      	b.n	8003432 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3b01      	subs	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003438:	f7fe fce8 	bl	8001e0c <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800343e:	e021      	b.n	8003484 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fea7 	bl	8002198 <LL_ADC_IsEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fe77 	bl	8002148 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800345a:	f7fe fcd7 	bl	8001e0c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d90d      	bls.n	8003484 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f043 0210 	orr.w	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e007      	b.n	8003494 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b01      	cmp	r3, #1
 8003490:	d1d6      	bne.n	8003440 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	8000003f 	.word	0x8000003f
 80034a0:	50040300 	.word	0x50040300
 80034a4:	20000060 	.word	0x20000060
 80034a8:	053e2d63 	.word	0x053e2d63

080034ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe fe80 	bl	80021be <LL_ADC_IsDisableOngoing>
 80034be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fe67 	bl	8002198 <LL_ADC_IsEnabled>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d047      	beq.n	8003560 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d144      	bne.n	8003560 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030d 	and.w	r3, r3, #13
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10c      	bne.n	80034fe <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fe41 	bl	8002170 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2203      	movs	r2, #3
 80034f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034f6:	f7fe fc89 	bl	8001e0c <HAL_GetTick>
 80034fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034fc:	e029      	b.n	8003552 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f043 0210 	orr.w	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e023      	b.n	8003562 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800351a:	f7fe fc77 	bl	8001e0c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d914      	bls.n	8003552 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	f043 0210 	orr.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e007      	b.n	8003562 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1dc      	bne.n	800351a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003580:	2b00      	cmp	r3, #0
 8003582:	d14b      	bne.n	800361c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d021      	beq.n	80035e2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fcd3 	bl	8001f4e <LL_ADC_REG_IsTriggerSourceSWStart>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d032      	beq.n	8003614 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d12b      	bne.n	8003614 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11f      	bne.n	8003614 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
 80035e0:	e018      	b.n	8003614 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d111      	bne.n	8003614 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7fd fc51 	bl	8000ebc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800361a:	e00e      	b.n	800363a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff fa38 	bl	8002a9e <HAL_ADC_ErrorCallback>
}
 800362e:	e004      	b.n	800363a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fa10 	bl	8002a76 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fa0a 	bl	8002a9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <LL_ADC_StartCalibration>:
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80036a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036d8:	d101      	bne.n	80036de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_ADCEx_Calibration_Start+0x1c>
 8003704:	2302      	movs	r3, #2
 8003706:	e04d      	b.n	80037a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fecb 	bl	80034ac <ADC_Disable>
 8003716:	4603      	mov	r3, r0
 8003718:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d136      	bne.n	800378e <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003728:	f023 0302 	bic.w	r3, r3, #2
 800372c:	f043 0202 	orr.w	r2, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ffa9 	bl	8003692 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003740:	e014      	b.n	800376c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_ADCEx_Calibration_Start+0xc0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d90d      	bls.n	800376c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f023 0312 	bic.w	r3, r3, #18
 8003758:	f043 0210 	orr.w	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e01b      	b.n	80037a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ffa7 	bl	80036c4 <LL_ADC_IsCalibrationOnGoing>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e2      	bne.n	8003742 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f023 0303 	bic.w	r3, r3, #3
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
 800378c:	e005      	b.n	800379a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f043 0210 	orr.w	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	00026aaa 	.word	0x00026aaa

080037b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800383c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	; (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <__NVIC_GetPriorityGrouping+0x18>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 0307 	and.w	r3, r3, #7
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db0b      	blt.n	80038a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4907      	ldr	r1, [pc, #28]	; (80038b0 <__NVIC_EnableIRQ+0x38>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	; (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf28      	it	cs
 8003926:	2304      	movcs	r3, #4
 8003928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3304      	adds	r3, #4
 800392e:	2b06      	cmp	r3, #6
 8003930:	d902      	bls.n	8003938 <NVIC_EncodePriority+0x30>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3b03      	subs	r3, #3
 8003936:	e000      	b.n	800393a <NVIC_EncodePriority+0x32>
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003950:	f04f 31ff 	mov.w	r1, #4294967295
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43d9      	mvns	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	4313      	orrs	r3, r2
         );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff4c 	bl	8003814 <__NVIC_SetPriorityGrouping>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003992:	f7ff ff63 	bl	800385c <__NVIC_GetPriorityGrouping>
 8003996:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f7ff ffb3 	bl	8003908 <NVIC_EncodePriority>
 80039a2:	4602      	mov	r2, r0
 80039a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff82 	bl	80038b4 <__NVIC_SetPriority>
}
 80039b0:	bf00      	nop
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff56 	bl	8003878 <__NVIC_EnableIRQ>
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e08e      	b.n	8003b04 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <HAL_DMA_Init+0x138>)
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d80f      	bhi.n	8003a12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <HAL_DMA_Init+0x13c>)
 80039fa:	4413      	add	r3, r2
 80039fc:	4a45      	ldr	r2, [pc, #276]	; (8003b14 <HAL_DMA_Init+0x140>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	009a      	lsls	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	; (8003b18 <HAL_DMA_Init+0x144>)
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a10:	e00e      	b.n	8003a30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <HAL_DMA_Init+0x148>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	4a3d      	ldr	r2, [pc, #244]	; (8003b14 <HAL_DMA_Init+0x140>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <HAL_DMA_Init+0x14c>)
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fa80 	bl	8003f88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a90:	d102      	bne.n	8003a98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003aae:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d010      	beq.n	8003ada <HAL_DMA_Init+0x106>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d80c      	bhi.n	8003ada <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fa9f 	bl	8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	e008      	b.n	8003aec <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40020407 	.word	0x40020407
 8003b10:	bffdfff8 	.word	0xbffdfff8
 8003b14:	cccccccd 	.word	0xcccccccd
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	bffdfbf8 	.word	0xbffdfbf8
 8003b20:	40020400 	.word	0x40020400

08003b24 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_DMA_Start_IT+0x20>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e066      	b.n	8003c12 <HAL_DMA_Start_IT+0xee>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d155      	bne.n	8003c04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f9c5 	bl	8003f0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 020e 	orr.w	r2, r2, #14
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e00f      	b.n	8003bbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0204 	bic.w	r2, r2, #4
 8003baa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 020a 	orr.w	r2, r2, #10
 8003bba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e005      	b.n	8003c10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e04f      	b.n	8003ccc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d008      	beq.n	8003c4a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e040      	b.n	8003ccc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 020e 	bic.w	r2, r2, #14
 8003c58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f003 021c 	and.w	r2, r3, #28
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2101      	movs	r1, #1
 8003c88:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c96:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00c      	beq.n	8003cba <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cb8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d005      	beq.n	8003cfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e047      	b.n	8003d8c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 020e 	bic.w	r2, r2, #14
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	f003 021c 	and.w	r2, r3, #28
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2101      	movs	r1, #1
 8003d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
    }
  }
  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f003 031c 	and.w	r3, r3, #28
 8003db6:	2204      	movs	r2, #4
 8003db8:	409a      	lsls	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d026      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x7a>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d021      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d107      	bne.n	8003dea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0204 	bic.w	r2, r2, #4
 8003de8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f003 021c 	and.w	r2, r3, #28
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2104      	movs	r1, #4
 8003df8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d071      	beq.n	8003eea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e0e:	e06c      	b.n	8003eea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	f003 031c 	and.w	r3, r3, #28
 8003e18:	2202      	movs	r2, #2
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02e      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xec>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d029      	beq.n	8003e82 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 020a 	bic.w	r2, r2, #10
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f003 021c 	and.w	r2, r3, #28
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	2102      	movs	r1, #2
 8003e62:	fa01 f202 	lsl.w	r2, r1, r2
 8003e66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d038      	beq.n	8003eea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e80:	e033      	b.n	8003eea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f003 031c 	and.w	r3, r3, #28
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02a      	beq.n	8003eec <HAL_DMA_IRQHandler+0x156>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d025      	beq.n	8003eec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 020e 	bic.w	r2, r2, #14
 8003eae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f003 021c 	and.w	r2, r3, #28
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
}
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d004      	beq.n	8003f36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	f003 021c 	and.w	r2, r3, #28
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f202 	lsl.w	r2, r1, r2
 8003f48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d108      	bne.n	8003f6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f6a:	e007      	b.n	8003f7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d80a      	bhi.n	8003fb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fa8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6493      	str	r3, [r2, #72]	; 0x48
 8003fb0:	e007      	b.n	8003fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	009a      	lsls	r2, r3, #2
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	3b08      	subs	r3, #8
 8003fca:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fd8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40020407 	.word	0x40020407
 8003ff8:	4002081c 	.word	0x4002081c
 8003ffc:	cccccccd 	.word	0xcccccccd
 8004000:	40020880 	.word	0x40020880

08004004 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004014:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	461a      	mov	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a09      	ldr	r2, [pc, #36]	; (800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004028:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3b01      	subs	r3, #1
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2201      	movs	r2, #1
 8004034:	409a      	lsls	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	1000823f 	.word	0x1000823f
 800404c:	40020940 	.word	0x40020940

08004050 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800405e:	e14c      	b.n	80042fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2101      	movs	r1, #1
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 813e 	beq.w	80042f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d005      	beq.n	8004090 <HAL_GPIO_Init+0x40>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d130      	bne.n	80040f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040c6:	2201      	movs	r2, #1
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0201 	and.w	r2, r3, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d017      	beq.n	800412e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	2203      	movs	r2, #3
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d123      	bne.n	8004182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	08da      	lsrs	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3208      	adds	r2, #8
 8004142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4013      	ands	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	08da      	lsrs	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3208      	adds	r2, #8
 800417c:	6939      	ldr	r1, [r7, #16]
 800417e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2203      	movs	r2, #3
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4013      	ands	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0203 	and.w	r2, r3, #3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8098 	beq.w	80042f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80041c4:	4a54      	ldr	r2, [pc, #336]	; (8004318 <HAL_GPIO_Init+0x2c8>)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	3302      	adds	r3, #2
 80041cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	220f      	movs	r2, #15
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041ee:	d019      	beq.n	8004224 <HAL_GPIO_Init+0x1d4>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a4a      	ldr	r2, [pc, #296]	; (800431c <HAL_GPIO_Init+0x2cc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <HAL_GPIO_Init+0x1d0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a49      	ldr	r2, [pc, #292]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00d      	beq.n	800421c <HAL_GPIO_Init+0x1cc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a48      	ldr	r2, [pc, #288]	; (8004324 <HAL_GPIO_Init+0x2d4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <HAL_GPIO_Init+0x1c8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a47      	ldr	r2, [pc, #284]	; (8004328 <HAL_GPIO_Init+0x2d8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <HAL_GPIO_Init+0x1c4>
 8004210:	2304      	movs	r3, #4
 8004212:	e008      	b.n	8004226 <HAL_GPIO_Init+0x1d6>
 8004214:	2307      	movs	r3, #7
 8004216:	e006      	b.n	8004226 <HAL_GPIO_Init+0x1d6>
 8004218:	2303      	movs	r3, #3
 800421a:	e004      	b.n	8004226 <HAL_GPIO_Init+0x1d6>
 800421c:	2302      	movs	r3, #2
 800421e:	e002      	b.n	8004226 <HAL_GPIO_Init+0x1d6>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_GPIO_Init+0x1d6>
 8004224:	2300      	movs	r3, #0
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	f002 0203 	and.w	r2, r2, #3
 800422c:	0092      	lsls	r2, r2, #2
 800422e:	4093      	lsls	r3, r2
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004236:	4938      	ldr	r1, [pc, #224]	; (8004318 <HAL_GPIO_Init+0x2c8>)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	3302      	adds	r3, #2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004244:	4b39      	ldr	r3, [pc, #228]	; (800432c <HAL_GPIO_Init+0x2dc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	43db      	mvns	r3, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004268:	4a30      	ldr	r2, [pc, #192]	; (800432c <HAL_GPIO_Init+0x2dc>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800426e:	4b2f      	ldr	r3, [pc, #188]	; (800432c <HAL_GPIO_Init+0x2dc>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004292:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_GPIO_Init+0x2dc>)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_GPIO_Init+0x2dc>)
 800429a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042be:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_GPIO_Init+0x2dc>)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_GPIO_Init+0x2dc>)
 80042c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4013      	ands	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042ec:	4a0f      	ldr	r2, [pc, #60]	; (800432c <HAL_GPIO_Init+0x2dc>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3301      	adds	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f aeab 	bne.w	8004060 <HAL_GPIO_Init+0x10>
  }
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40010000 	.word	0x40010000
 800431c:	48000400 	.word	0x48000400
 8004320:	48000800 	.word	0x48000800
 8004324:	48000c00 	.word	0x48000c00
 8004328:	48001000 	.word	0x48001000
 800432c:	58000800 	.word	0x58000800

08004330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
 800433c:	4613      	mov	r3, r2
 800433e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004340:	787b      	ldrb	r3, [r7, #1]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800434c:	e002      	b.n	8004354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4013      	ands	r3, r2
 8004378:	041a      	lsls	r2, r3, #16
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	43d9      	mvns	r1, r3
 800437e:	887b      	ldrh	r3, [r7, #2]
 8004380:	400b      	ands	r3, r1
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	619a      	str	r2, [r3, #24]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e08d      	b.n	80044c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd fa8e 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2224      	movs	r2, #36	; 0x24
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	e006      	b.n	800441c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800441a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d108      	bne.n	8004436 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	e007      	b.n	8004446 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004458:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004468:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69d9      	ldr	r1, [r3, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d138      	bne.n	8004552 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e032      	b.n	8004554 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2224      	movs	r2, #36	; 0x24
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800451c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b20      	cmp	r3, #32
 8004574:	d139      	bne.n	80045ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004580:	2302      	movs	r3, #2
 8004582:	e033      	b.n	80045ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2224      	movs	r2, #36	; 0x24
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fa:	b08b      	sub	sp, #44	; 0x2c
 80045fc:	af06      	add	r7, sp, #24
 80045fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0cb      	b.n	80047a2 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fd fa4c 	bl	8001abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2203      	movs	r2, #3
 8004628:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f005 f8c9 	bl	80097c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
 800463a:	e040      	b.n	80046be <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	440b      	add	r3, r1
 800464c:	3301      	adds	r3, #1
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	440b      	add	r3, r1
 8004662:	7bfa      	ldrb	r2, [r7, #15]
 8004664:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	440b      	add	r3, r1
 8004676:	3303      	adds	r3, #3
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	440b      	add	r3, r1
 800468a:	3338      	adds	r3, #56	; 0x38
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	333c      	adds	r3, #60	; 0x3c
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	440b      	add	r3, r1
 80046b2:	3340      	adds	r3, #64	; 0x40
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	3301      	adds	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d3b9      	bcc.n	800463c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]
 80046cc:	e044      	b.n	8004758 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	440b      	add	r3, r1
 80046dc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046f6:	7bfa      	ldrb	r2, [r7, #15]
 80046f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	440b      	add	r3, r1
 800471e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	440b      	add	r3, r1
 8004734:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	440b      	add	r3, r1
 800474a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	3301      	adds	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	429a      	cmp	r2, r3
 8004760:	d3b5      	bcc.n	80046ce <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	687e      	ldr	r6, [r7, #4]
 800476a:	466d      	mov	r5, sp
 800476c:	f106 0410 	add.w	r4, r6, #16
 8004770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	1d33      	adds	r3, r6, #4
 800477a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800477c:	6838      	ldr	r0, [r7, #0]
 800477e:	f005 f83e 	bl	80097fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f805 	bl	80047aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f043 0302 	orr.w	r3, r3, #2
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a04      	ldr	r2, [pc, #16]	; (800481c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800480a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480e:	6013      	str	r3, [r2, #0]
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	58000400 	.word	0x58000400

08004820 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <HAL_PWREx_GetVoltageRange+0x18>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	58000400 	.word	0x58000400

0800483c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800484a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484e:	d101      	bne.n	8004854 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_RCC_HSE_Enable>:
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800486e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004872:	6013      	str	r3, [r2, #0]
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <LL_RCC_HSE_Disable>:
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800488c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004890:	6013      	str	r3, [r2, #0]
}
 8004892:	bf00      	nop
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <LL_RCC_HSE_IsReady>:
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80048a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ae:	d101      	bne.n	80048b4 <LL_RCC_HSE_IsReady+0x18>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <LL_RCC_HSE_IsReady+0x1a>
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_RCC_HSI_Enable>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80048c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d2:	6013      	str	r3, [r2, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_HSI_Disable>:
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f0:	6013      	str	r3, [r2, #0]
}
 80048f2:	bf00      	nop
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <LL_RCC_HSI_IsReady>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490e:	d101      	bne.n	8004914 <LL_RCC_HSI_IsReady+0x18>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <LL_RCC_HSI_IsReady+0x1a>
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_RCC_HSI48_Enable>:
{
 800494a:	b480      	push	{r7}
 800494c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800494e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_RCC_HSI48_Disable>:
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <LL_RCC_HSI48_IsReady>:
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d101      	bne.n	80049a6 <LL_RCC_HSI48_IsReady+0x18>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <LL_RCC_HSI48_IsReady+0x1a>
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <LL_RCC_LSE_Enable>:
{
 80049b2:	b480      	push	{r7}
 80049b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049ca:	bf00      	nop
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_LSE_Disable>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_LSE_EnableBypass>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a06:	f043 0304 	orr.w	r3, r3, #4
 8004a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_RCC_LSE_DisableBypass>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a28:	f023 0304 	bic.w	r3, r3, #4
 8004a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d101      	bne.n	8004a52 <LL_RCC_LSE_IsReady+0x18>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <LL_RCC_LSE_IsReady+0x1a>
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a76:	bf00      	nop
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a98:	bf00      	nop
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d101      	bne.n	8004aba <LL_RCC_LSI1_IsReady+0x18>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <LL_RCC_LSI1_IsReady+0x1a>
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ade:	bf00      	nop
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af8:	f023 0304 	bic.w	r3, r3, #4
 8004afc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d101      	bne.n	8004b22 <LL_RCC_LSI2_IsReady+0x18>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <LL_RCC_LSI2_IsReady+0x1a>
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	6013      	str	r3, [r2, #0]
}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	6013      	str	r3, [r2, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d101      	bne.n	8004bae <LL_RCC_MSI_IsReady+0x16>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <LL_RCC_MSI_IsReady+0x18>
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2bb0      	cmp	r3, #176	; 0xb0
 8004bf8:	d901      	bls.n	8004bfe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004bfa:	23b0      	movs	r3, #176	; 0xb0
 8004bfc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004bfe:	687b      	ldr	r3, [r7, #4]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 0203 	bic.w	r2, r3, #3
 8004c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004caa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cda:	f023 020f 	bic.w	r2, r3, #15
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	608b      	str	r3, [r1, #8]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	608b      	str	r3, [r1, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd8:	6013      	str	r3, [r2, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df6:	6013      	str	r3, [r2, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e14:	d101      	bne.n	8004e1a <LL_RCC_PLL_IsReady+0x18>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <LL_RCC_PLL_IsReady+0x1a>
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004e26:	b480      	push	{r7}
 8004e28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d101      	bne.n	8004ea0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec0:	d101      	bne.n	8004ec6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d101      	bne.n	8004eec <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f0a:	d101      	bne.n	8004f10 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f2e:	d101      	bne.n	8004f34 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b08d      	sub	sp, #52	; 0x34
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e363      	b.n	800561a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 808d 	beq.w	800507a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f60:	f7ff fe7d 	bl	8004c5e <LL_RCC_GetSysClkSource>
 8004f64:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f66:	f7ff ff83 	bl	8004e70 <LL_RCC_PLL_GetMainSource>
 8004f6a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_RCC_OscConfig+0x3e>
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2b0c      	cmp	r3, #12
 8004f76:	d147      	bne.n	8005008 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d144      	bne.n	8005008 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e347      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004f8e:	f7ff fe28 	bl	8004be2 <LL_RCC_MSI_GetRange>
 8004f92:	4603      	mov	r3, r0
 8004f94:	429c      	cmp	r4, r3
 8004f96:	d914      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fd61 	bl	8005a64 <RCC_SetFlashLatencyFromMSIRange>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e336      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fe02 	bl	8004bba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fe26 	bl	8004c0c <LL_RCC_MSI_SetCalibTrimming>
 8004fc0:	e013      	b.n	8004fea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fdf7 	bl	8004bba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fe1b 	bl	8004c0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fd42 	bl	8005a64 <RCC_SetFlashLatencyFromMSIRange>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e317      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004fea:	f000 fcc9 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4aa4      	ldr	r2, [pc, #656]	; (8005284 <HAL_RCC_OscConfig+0x344>)
 8004ff2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ff4:	4ba4      	ldr	r3, [pc, #656]	; (8005288 <HAL_RCC_OscConfig+0x348>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fc fda9 	bl	8001b50 <HAL_InitTick>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d039      	beq.n	8005078 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e308      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01e      	beq.n	800504e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005010:	f7ff fda4 	bl	8004b5c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005014:	f7fc fefa 	bl	8001e0c <HAL_GetTick>
 8005018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800501c:	f7fc fef6 	bl	8001e0c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e2f5      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800502e:	f7ff fdb3 	bl	8004b98 <LL_RCC_MSI_IsReady>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f1      	beq.n	800501c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fdbc 	bl	8004bba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fde0 	bl	8004c0c <LL_RCC_MSI_SetCalibTrimming>
 800504c:	e015      	b.n	800507a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800504e:	f7ff fd94 	bl	8004b7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005052:	f7fc fedb 	bl	8001e0c <HAL_GetTick>
 8005056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800505a:	f7fc fed7 	bl	8001e0c <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e2d6      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800506c:	f7ff fd94 	bl	8004b98 <LL_RCC_MSI_IsReady>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f1      	bne.n	800505a <HAL_RCC_OscConfig+0x11a>
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005078:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d047      	beq.n	8005116 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005086:	f7ff fdea 	bl	8004c5e <LL_RCC_GetSysClkSource>
 800508a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800508c:	f7ff fef0 	bl	8004e70 <LL_RCC_PLL_GetMainSource>
 8005090:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_OscConfig+0x164>
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d108      	bne.n	80050b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d105      	bne.n	80050b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d134      	bne.n	8005116 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e2b4      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d102      	bne.n	80050c0 <HAL_RCC_OscConfig+0x180>
 80050ba:	f7ff fbd1 	bl	8004860 <LL_RCC_HSE_Enable>
 80050be:	e001      	b.n	80050c4 <HAL_RCC_OscConfig+0x184>
 80050c0:	f7ff fbdd 	bl	800487e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d012      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc fe9e 	bl	8001e0c <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d4:	f7fc fe9a 	bl	8001e0c <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	; 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e299      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80050e6:	f7ff fbd9 	bl	800489c <LL_RCC_HSE_IsReady>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f1      	beq.n	80050d4 <HAL_RCC_OscConfig+0x194>
 80050f0:	e011      	b.n	8005116 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f2:	f7fc fe8b 	bl	8001e0c <HAL_GetTick>
 80050f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050fa:	f7fc fe87 	bl	8001e0c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b64      	cmp	r3, #100	; 0x64
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e286      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800510c:	f7ff fbc6 	bl	800489c <LL_RCC_HSE_IsReady>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f1      	bne.n	80050fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04c      	beq.n	80051bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005122:	f7ff fd9c 	bl	8004c5e <LL_RCC_GetSysClkSource>
 8005126:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005128:	f7ff fea2 	bl	8004e70 <LL_RCC_PLL_GetMainSource>
 800512c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b04      	cmp	r3, #4
 8005132:	d005      	beq.n	8005140 <HAL_RCC_OscConfig+0x200>
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d10e      	bne.n	8005158 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d10b      	bne.n	8005158 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e266      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fbe5 	bl	8004920 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005156:	e031      	b.n	80051bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d019      	beq.n	8005194 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005160:	f7ff fbae 	bl	80048c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fc fe52 	bl	8001e0c <HAL_GetTick>
 8005168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516c:	f7fc fe4e 	bl	8001e0c <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e24d      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800517e:	f7ff fbbd 	bl	80048fc <LL_RCC_HSI_IsReady>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f1      	beq.n	800516c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fbc7 	bl	8004920 <LL_RCC_HSI_SetCalibTrimming>
 8005192:	e013      	b.n	80051bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005194:	f7ff fba3 	bl	80048de <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fc fe38 	bl	8001e0c <HAL_GetTick>
 800519c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a0:	f7fc fe34 	bl	8001e0c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e233      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80051b2:	f7ff fba3 	bl	80048fc <LL_RCC_HSI_IsReady>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f1      	bne.n	80051a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80a3 	beq.w	800531c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d076      	beq.n	80052cc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d046      	beq.n	8005278 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80051ea:	f7ff fc5a 	bl	8004aa2 <LL_RCC_LSI1_IsReady>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d113      	bne.n	800521c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80051f4:	f7ff fc33 	bl	8004a5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051f8:	f7fc fe08 	bl	8001e0c <HAL_GetTick>
 80051fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005200:	f7fc fe04 	bl	8001e0c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e203      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005212:	f7ff fc46 	bl	8004aa2 <LL_RCC_LSI1_IsReady>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f1      	beq.n	8005200 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800521c:	f7ff fc53 	bl	8004ac6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fc fdf4 	bl	8001e0c <HAL_GetTick>
 8005224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005228:	f7fc fdf0 	bl	8001e0c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b03      	cmp	r3, #3
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e1ef      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800523a:	f7ff fc66 	bl	8004b0a <LL_RCC_LSI2_IsReady>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f1      	beq.n	8005228 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fc70 	bl	8004b2e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800524e:	f7ff fc17 	bl	8004a80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7fc fddb 	bl	8001e0c <HAL_GetTick>
 8005256:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800525a:	f7fc fdd7 	bl	8001e0c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e1d6      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800526c:	f7ff fc19 	bl	8004aa2 <LL_RCC_LSI1_IsReady>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f1      	bne.n	800525a <HAL_RCC_OscConfig+0x31a>
 8005276:	e051      	b.n	800531c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005278:	f7ff fbf1 	bl	8004a5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fc fdc6 	bl	8001e0c <HAL_GetTick>
 8005280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005282:	e00c      	b.n	800529e <HAL_RCC_OscConfig+0x35e>
 8005284:	20000060 	.word	0x20000060
 8005288:	20000064 	.word	0x20000064
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800528c:	f7fc fdbe 	bl	8001e0c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e1bd      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800529e:	f7ff fc00 	bl	8004aa2 <LL_RCC_LSI1_IsReady>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0f1      	beq.n	800528c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80052a8:	f7ff fc1e 	bl	8004ae8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80052ae:	f7fc fdad 	bl	8001e0c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e1ac      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80052c0:	f7ff fc23 	bl	8004b0a <LL_RCC_LSI2_IsReady>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f1      	bne.n	80052ae <HAL_RCC_OscConfig+0x36e>
 80052ca:	e027      	b.n	800531c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80052cc:	f7ff fc0c 	bl	8004ae8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fc fd9c 	bl	8001e0c <HAL_GetTick>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80052d8:	f7fc fd98 	bl	8001e0c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e197      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80052ea:	f7ff fc0e 	bl	8004b0a <LL_RCC_LSI2_IsReady>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f1      	bne.n	80052d8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80052f4:	f7ff fbc4 	bl	8004a80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f8:	f7fc fd88 	bl	8001e0c <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005300:	f7fc fd84 	bl	8001e0c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e183      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005312:	f7ff fbc6 	bl	8004aa2 <LL_RCC_LSI1_IsReady>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f1      	bne.n	8005300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d05b      	beq.n	80053e0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005328:	4ba7      	ldr	r3, [pc, #668]	; (80055c8 <HAL_RCC_OscConfig+0x688>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d114      	bne.n	800535e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005334:	f7ff fa64 	bl	8004800 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005338:	f7fc fd68 	bl	8001e0c <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005340:	f7fc fd64 	bl	8001e0c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e163      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005352:	4b9d      	ldr	r3, [pc, #628]	; (80055c8 <HAL_RCC_OscConfig+0x688>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d102      	bne.n	800536c <HAL_RCC_OscConfig+0x42c>
 8005366:	f7ff fb24 	bl	80049b2 <LL_RCC_LSE_Enable>
 800536a:	e00c      	b.n	8005386 <HAL_RCC_OscConfig+0x446>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b05      	cmp	r3, #5
 8005372:	d104      	bne.n	800537e <HAL_RCC_OscConfig+0x43e>
 8005374:	f7ff fb3f 	bl	80049f6 <LL_RCC_LSE_EnableBypass>
 8005378:	f7ff fb1b 	bl	80049b2 <LL_RCC_LSE_Enable>
 800537c:	e003      	b.n	8005386 <HAL_RCC_OscConfig+0x446>
 800537e:	f7ff fb29 	bl	80049d4 <LL_RCC_LSE_Disable>
 8005382:	f7ff fb49 	bl	8004a18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d014      	beq.n	80053b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538e:	f7fc fd3d 	bl	8001e0c <HAL_GetTick>
 8005392:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005394:	e00a      	b.n	80053ac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005396:	f7fc fd39 	bl	8001e0c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e136      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80053ac:	f7ff fb45 	bl	8004a3a <LL_RCC_LSE_IsReady>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0ef      	beq.n	8005396 <HAL_RCC_OscConfig+0x456>
 80053b6:	e013      	b.n	80053e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fc fd28 	bl	8001e0c <HAL_GetTick>
 80053bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c0:	f7fc fd24 	bl	8001e0c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e121      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80053d6:	f7ff fb30 	bl	8004a3a <LL_RCC_LSE_IsReady>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ef      	bne.n	80053c0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d02c      	beq.n	8005446 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d014      	beq.n	800541e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053f4:	f7ff faa9 	bl	800494a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fc fd08 	bl	8001e0c <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005400:	f7fc fd04 	bl	8001e0c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e103      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005412:	f7ff fabc 	bl	800498e <LL_RCC_HSI48_IsReady>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f1      	beq.n	8005400 <HAL_RCC_OscConfig+0x4c0>
 800541c:	e013      	b.n	8005446 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800541e:	f7ff faa5 	bl	800496c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005422:	f7fc fcf3 	bl	8001e0c <HAL_GetTick>
 8005426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800542a:	f7fc fcef 	bl	8001e0c <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e0ee      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800543c:	f7ff faa7 	bl	800498e <LL_RCC_HSI48_IsReady>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f1      	bne.n	800542a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80e4 	beq.w	8005618 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005450:	f7ff fc05 	bl	8004c5e <LL_RCC_GetSysClkSource>
 8005454:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	2b02      	cmp	r3, #2
 8005464:	f040 80b4 	bne.w	80055d0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0203 	and.w	r2, r3, #3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	429a      	cmp	r2, r3
 8005474:	d123      	bne.n	80054be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d11c      	bne.n	80054be <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005490:	429a      	cmp	r2, r3
 8005492:	d114      	bne.n	80054be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d10d      	bne.n	80054be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d106      	bne.n	80054be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d05d      	beq.n	800557a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b0c      	cmp	r3, #12
 80054c2:	d058      	beq.n	8005576 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e0a1      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054d6:	f7ff fc85 	bl	8004de4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054da:	f7fc fc97 	bl	8001e0c <HAL_GetTick>
 80054de:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fc fc93 	bl	8001e0c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e092      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ef      	bne.n	80054e2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	4b30      	ldr	r3, [pc, #192]	; (80055cc <HAL_RCC_OscConfig+0x68c>)
 800550a:	4013      	ands	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005514:	4311      	orrs	r1, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800551a:	0212      	lsls	r2, r2, #8
 800551c:	4311      	orrs	r1, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005522:	4311      	orrs	r1, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005528:	4311      	orrs	r1, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800552e:	430a      	orrs	r2, r1
 8005530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005534:	4313      	orrs	r3, r2
 8005536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005538:	f7ff fc45 	bl	8004dc6 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800554c:	f7fc fc5e 	bl	8001e0c <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005554:	f7fc fc5a 	bl	8001e0c <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e059      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ef      	beq.n	8005554 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005574:	e050      	b.n	8005618 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e04f      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d147      	bne.n	8005618 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005588:	f7ff fc1d 	bl	8004dc6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800559c:	f7fc fc36 	bl	8001e0c <HAL_GetTick>
 80055a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a4:	f7fc fc32 	bl	8001e0c <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e031      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ef      	beq.n	80055a4 <HAL_RCC_OscConfig+0x664>
 80055c4:	e028      	b.n	8005618 <HAL_RCC_OscConfig+0x6d8>
 80055c6:	bf00      	nop
 80055c8:	58000400 	.word	0x58000400
 80055cc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b0c      	cmp	r3, #12
 80055d4:	d01e      	beq.n	8005614 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d6:	f7ff fc05 	bl	8004de4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fc fc17 	bl	8001e0c <HAL_GetTick>
 80055de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fc fc13 	bl	8001e0c <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e012      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1ef      	bne.n	80055e2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <HAL_RCC_OscConfig+0x6e4>)
 800560e:	4013      	ands	r3, r2
 8005610:	60cb      	str	r3, [r1, #12]
 8005612:	e001      	b.n	8005618 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3734      	adds	r7, #52	; 0x34
 800561e:	46bd      	mov	sp, r7
 8005620:	bd90      	pop	{r4, r7, pc}
 8005622:	bf00      	nop
 8005624:	eefefffc 	.word	0xeefefffc

08005628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e12d      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800563c:	4b98      	ldr	r3, [pc, #608]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d91b      	bls.n	8005682 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b95      	ldr	r3, [pc, #596]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 0207 	bic.w	r2, r3, #7
 8005652:	4993      	ldr	r1, [pc, #588]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565a:	f7fc fbd7 	bl	8001e0c <HAL_GetTick>
 800565e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005660:	e008      	b.n	8005674 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005662:	f7fc fbd3 	bl	8001e0c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e111      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005674:	4b8a      	ldr	r3, [pc, #552]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d1ef      	bne.n	8005662 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff faef 	bl	8004c76 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005698:	f7fc fbb8 	bl	8001e0c <HAL_GetTick>
 800569c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056a0:	f7fc fbb4 	bl	8001e0c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e0f2      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80056b2:	f7ff fbe9 	bl	8004e88 <LL_RCC_IsActiveFlag_HPRE>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f1      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d016      	beq.n	80056f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fae6 	bl	8004c9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056d2:	f7fc fb9b 	bl	8001e0c <HAL_GetTick>
 80056d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056da:	f7fc fb97 	bl	8001e0c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e0d5      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80056ec:	f7ff fbde 	bl	8004eac <LL_RCC_IsActiveFlag_C2HPRE>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f1      	beq.n	80056da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fadf 	bl	8004cca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800570c:	f7fc fb7e 	bl	8001e0c <HAL_GetTick>
 8005710:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005712:	e008      	b.n	8005726 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005714:	f7fc fb7a 	bl	8001e0c <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e0b8      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005726:	f7ff fbd4 	bl	8004ed2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f1      	beq.n	8005714 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d016      	beq.n	800576a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fad9 	bl	8004cf8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005746:	f7fc fb61 	bl	8001e0c <HAL_GetTick>
 800574a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800574c:	e008      	b.n	8005760 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800574e:	f7fc fb5d 	bl	8001e0c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e09b      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005760:	f7ff fbca 	bl	8004ef8 <LL_RCC_IsActiveFlag_PPRE1>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f1      	beq.n	800574e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d017      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff facf 	bl	8004d20 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005782:	f7fc fb43 	bl	8001e0c <HAL_GetTick>
 8005786:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005788:	e008      	b.n	800579c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800578a:	f7fc fb3f 	bl	8001e0c <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e07d      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800579c:	f7ff fbbe 	bl	8004f1c <LL_RCC_IsActiveFlag_PPRE2>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f1      	beq.n	800578a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d043      	beq.n	800583a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d106      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80057ba:	f7ff f86f 	bl	800489c <LL_RCC_HSE_IsReady>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11e      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e067      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d106      	bne.n	80057de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80057d0:	f7ff fb17 	bl	8004e02 <LL_RCC_PLL_IsReady>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d113      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e05c      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80057e6:	f7ff f9d7 	bl	8004b98 <LL_RCC_MSI_IsReady>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d108      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e051      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80057f4:	f7ff f882 	bl	80048fc <LL_RCC_HSI_IsReady>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e04a      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fa15 	bl	8004c36 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580c:	f7fc fafe 	bl	8001e0c <HAL_GetTick>
 8005810:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005812:	e00a      	b.n	800582a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005814:	f7fc fafa 	bl	8001e0c <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e036      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582a:	f7ff fa18 	bl	8004c5e <LL_RCC_GetSysClkSource>
 800582e:	4602      	mov	r2, r0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	429a      	cmp	r2, r3
 8005838:	d1ec      	bne.n	8005814 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800583a:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d21b      	bcs.n	8005880 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f023 0207 	bic.w	r2, r3, #7
 8005850:	4913      	ldr	r1, [pc, #76]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	4313      	orrs	r3, r2
 8005856:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005858:	f7fc fad8 	bl	8001e0c <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	e008      	b.n	8005872 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005860:	f7fc fad4 	bl	8001e0c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e012      	b.n	8005898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_ClockConfig+0x278>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d1ef      	bne.n	8005860 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005880:	f000 f87e 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 8005884:	4603      	mov	r3, r0
 8005886:	4a07      	ldr	r2, [pc, #28]	; (80058a4 <HAL_RCC_ClockConfig+0x27c>)
 8005888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800588a:	f7fc facb 	bl	8001e24 <HAL_GetTickPrio>
 800588e:	4603      	mov	r3, r0
 8005890:	4618      	mov	r0, r3
 8005892:	f7fc f95d 	bl	8001b50 <HAL_InitTick>
 8005896:	4603      	mov	r3, r0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	58004000 	.word	0x58004000
 80058a4:	20000060 	.word	0x20000060

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ae:	f7ff f9d6 	bl	8004c5e <LL_RCC_GetSysClkSource>
 80058b2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80058ba:	f7ff f992 	bl	8004be2 <LL_RCC_MSI_GetRange>
 80058be:	4603      	mov	r3, r0
 80058c0:	091b      	lsrs	r3, r3, #4
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	e04b      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d102      	bne.n	80058dc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058d6:	4b28      	ldr	r3, [pc, #160]	; (8005978 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e045      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d10a      	bne.n	80058f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058e2:	f7fe ffab 	bl	800483c <LL_RCC_HSE_IsEnabledDiv2>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d102      	bne.n	80058f2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80058ec:	4b22      	ldr	r3, [pc, #136]	; (8005978 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e03a      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80058f2:	4b22      	ldr	r3, [pc, #136]	; (800597c <HAL_RCC_GetSysClockFreq+0xd4>)
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e037      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80058f8:	f7ff faba 	bl	8004e70 <LL_RCC_PLL_GetMainSource>
 80058fc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d003      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0x64>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d003      	beq.n	8005912 <HAL_RCC_GetSysClockFreq+0x6a>
 800590a:	e00d      	b.n	8005928 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <HAL_RCC_GetSysClockFreq+0xd0>)
 800590e:	60bb      	str	r3, [r7, #8]
        break;
 8005910:	e015      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005912:	f7fe ff93 	bl	800483c <LL_RCC_HSE_IsEnabledDiv2>
 8005916:	4603      	mov	r3, r0
 8005918:	2b01      	cmp	r3, #1
 800591a:	d102      	bne.n	8005922 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800591c:	4b16      	ldr	r3, [pc, #88]	; (8005978 <HAL_RCC_GetSysClockFreq+0xd0>)
 800591e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005920:	e00d      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005924:	60bb      	str	r3, [r7, #8]
        break;
 8005926:	e00a      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005928:	f7ff f95b 	bl	8004be2 <LL_RCC_MSI_GetRange>
 800592c:	4603      	mov	r3, r0
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	4a0f      	ldr	r2, [pc, #60]	; (8005974 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593a:	60bb      	str	r3, [r7, #8]
        break;
 800593c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800593e:	f7ff fa72 	bl	8004e26 <LL_RCC_PLL_GetN>
 8005942:	4602      	mov	r2, r0
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	fb03 f402 	mul.w	r4, r3, r2
 800594a:	f7ff fa85 	bl	8004e58 <LL_RCC_PLL_GetDivider>
 800594e:	4603      	mov	r3, r0
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	3301      	adds	r3, #1
 8005954:	fbb4 f4f3 	udiv	r4, r4, r3
 8005958:	f7ff fa72 	bl	8004e40 <LL_RCC_PLL_GetR>
 800595c:	4603      	mov	r3, r0
 800595e:	0f5b      	lsrs	r3, r3, #29
 8005960:	3301      	adds	r3, #1
 8005962:	fbb4 f3f3 	udiv	r3, r4, r3
 8005966:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005968:	68fb      	ldr	r3, [r7, #12]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	bd90      	pop	{r4, r7, pc}
 8005972:	bf00      	nop
 8005974:	0800f34c 	.word	0x0800f34c
 8005978:	00f42400 	.word	0x00f42400
 800597c:	01e84800 	.word	0x01e84800

08005980 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005980:	b598      	push	{r3, r4, r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005984:	f7ff ff90 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005988:	4604      	mov	r4, r0
 800598a:	f7ff f9dd 	bl	8004d48 <LL_RCC_GetAHBPrescaler>
 800598e:	4603      	mov	r3, r0
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	4a03      	ldr	r2, [pc, #12]	; (80059a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800599c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	bd98      	pop	{r3, r4, r7, pc}
 80059a4:	0800f2ec 	.word	0x0800f2ec

080059a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a8:	b598      	push	{r3, r4, r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80059ac:	f7ff ffe8 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059b0:	4604      	mov	r4, r0
 80059b2:	f7ff f9f0 	bl	8004d96 <LL_RCC_GetAPB1Prescaler>
 80059b6:	4603      	mov	r3, r0
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd98      	pop	{r3, r4, r7, pc}
 80059d0:	0800f32c 	.word	0x0800f32c

080059d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d4:	b598      	push	{r3, r4, r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80059d8:	f7ff ffd2 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059dc:	4604      	mov	r4, r0
 80059de:	f7ff f9e6 	bl	8004dae <LL_RCC_GetAPB2Prescaler>
 80059e2:	4603      	mov	r3, r0
 80059e4:	0adb      	lsrs	r3, r3, #11
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	4a04      	ldr	r2, [pc, #16]	; (80059fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	bd98      	pop	{r3, r4, r7, pc}
 80059fc:	0800f32c 	.word	0x0800f32c

08005a00 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	226f      	movs	r2, #111	; 0x6f
 8005a0e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005a10:	f7ff f925 	bl	8004c5e <LL_RCC_GetSysClkSource>
 8005a14:	4602      	mov	r2, r0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005a1a:	f7ff f995 	bl	8004d48 <LL_RCC_GetAHBPrescaler>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005a24:	f7ff f9b7 	bl	8004d96 <LL_RCC_GetAPB1Prescaler>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005a2e:	f7ff f9be 	bl	8004dae <LL_RCC_GetAPB2Prescaler>
 8005a32:	4602      	mov	r2, r0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005a38:	f7ff f992 	bl	8004d60 <LL_C2_RCC_GetAHBPrescaler>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005a42:	f7ff f99a 	bl	8004d7a <LL_RCC_GetAHB4Prescaler>
 8005a46:	4602      	mov	r2, r0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <HAL_RCC_GetClockConfig+0x60>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0207 	and.w	r2, r3, #7
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	601a      	str	r2, [r3, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	58004000 	.word	0x58004000

08005a64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2bb0      	cmp	r3, #176	; 0xb0
 8005a70:	d903      	bls.n	8005a7a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e007      	b.n	8005a8a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005a8a:	f7ff f976 	bl	8004d7a <LL_RCC_GetAHB4Prescaler>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	091b      	lsrs	r3, r3, #4
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	0c9c      	lsrs	r4, r3, #18
 8005aae:	f7fe feb7 	bl	8004820 <HAL_PWREx_GetVoltageRange>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 f80c 	bl	8005ad4 <RCC_SetFlashLatency>
 8005abc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd90      	pop	{r4, r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	0800f34c 	.word	0x0800f34c
 8005acc:	0800f2ec 	.word	0x0800f2ec
 8005ad0:	431bde83 	.word	0x431bde83

08005ad4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b093      	sub	sp, #76	; 0x4c
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005ade:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <RCC_SetFlashLatency+0xe8>)
 8005ae0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005ae4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ae6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005aea:	4a35      	ldr	r2, [pc, #212]	; (8005bc0 <RCC_SetFlashLatency+0xec>)
 8005aec:	f107 031c 	add.w	r3, r7, #28
 8005af0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005af2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005af6:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <RCC_SetFlashLatency+0xf0>)
 8005af8:	f107 040c 	add.w	r4, r7, #12
 8005afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b02:	2300      	movs	r3, #0
 8005b04:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0c:	d11a      	bne.n	8005b44 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	643b      	str	r3, [r7, #64]	; 0x40
 8005b12:	e013      	b.n	8005b3c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	3348      	adds	r3, #72	; 0x48
 8005b1a:	443b      	add	r3, r7
 8005b1c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d807      	bhi.n	8005b36 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	3348      	adds	r3, #72	; 0x48
 8005b2c:	443b      	add	r3, r7
 8005b2e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b34:	e020      	b.n	8005b78 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b38:	3301      	adds	r3, #1
 8005b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d9e8      	bls.n	8005b14 <RCC_SetFlashLatency+0x40>
 8005b42:	e019      	b.n	8005b78 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b44:	2300      	movs	r3, #0
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b48:	e013      	b.n	8005b72 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	3348      	adds	r3, #72	; 0x48
 8005b50:	443b      	add	r3, r7
 8005b52:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d807      	bhi.n	8005b6c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	3348      	adds	r3, #72	; 0x48
 8005b62:	443b      	add	r3, r7
 8005b64:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b6a:	e005      	b.n	8005b78 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6e:	3301      	adds	r3, #1
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d9e8      	bls.n	8005b4a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005b78:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <RCC_SetFlashLatency+0xf4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f023 0207 	bic.w	r2, r3, #7
 8005b80:	4911      	ldr	r1, [pc, #68]	; (8005bc8 <RCC_SetFlashLatency+0xf4>)
 8005b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b88:	f7fc f940 	bl	8001e0c <HAL_GetTick>
 8005b8c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b8e:	e008      	b.n	8005ba2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b90:	f7fc f93c 	bl	8001e0c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e007      	b.n	8005bb2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <RCC_SetFlashLatency+0xf4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d1ef      	bne.n	8005b90 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	374c      	adds	r7, #76	; 0x4c
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd90      	pop	{r4, r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	0800f1bc 	.word	0x0800f1bc
 8005bc0:	0800f1cc 	.word	0x0800f1cc
 8005bc4:	0800f1d8 	.word	0x0800f1d8
 8005bc8:	58004000 	.word	0x58004000

08005bcc <LL_RCC_LSE_IsEnabled>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <LL_RCC_LSE_IsEnabled+0x18>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <LL_RCC_LSE_IsEnabled+0x1a>
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <LL_RCC_LSE_IsReady>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d101      	bne.n	8005c08 <LL_RCC_LSE_IsReady+0x18>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <LL_RCC_LSE_IsReady+0x1a>
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <LL_RCC_MSI_EnablePLLMode>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c22:	f043 0304 	orr.w	r3, r3, #4
 8005c26:	6013      	str	r3, [r2, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LL_RCC_SetRFWKPClockSource>:
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <LL_RCC_SetSMPSClockSource>:
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	f023 0203 	bic.w	r2, r3, #3
 8005c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <LL_RCC_SetSMPSPrescaler>:
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <LL_RCC_SetUSARTClockSource>:
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	f023 0203 	bic.w	r2, r3, #3
 8005cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <LL_RCC_SetLPUARTClockSource>:
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <LL_RCC_SetI2CClockSource>:
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	401a      	ands	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <LL_RCC_SetLPTIMClockSource>:
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	0c1b      	lsrs	r3, r3, #16
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	43db      	mvns	r3, r3
 8005d58:	401a      	ands	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <LL_RCC_SetSAIClockSource>:
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <LL_RCC_SetRNGClockSource>:
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <LL_RCC_SetCLK48ClockSource>:
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <LL_RCC_SetUSBClockSource>:
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ffe3 	bl	8005dcc <LL_RCC_SetCLK48ClockSource>
}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <LL_RCC_SetADCClockSource>:
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <LL_RCC_SetRTCClockSource>:
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <LL_RCC_GetRTCClockSource>:
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <LL_RCC_ForceBackupDomainReset>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e98:	bf00      	nop
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005eba:	bf00      	nop
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <LL_RCC_PLLSAI1_Enable>:
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ed6:	6013      	str	r3, [r2, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <LL_RCC_PLLSAI1_Disable>:
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ef0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ef4:	6013      	str	r3, [r2, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <LL_RCC_PLLSAI1_IsReady>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f12:	d101      	bne.n	8005f18 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005f30:	2300      	movs	r3, #0
 8005f32:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d034      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f48:	d021      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005f4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f4e:	d81b      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f54:	d01d      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f5a:	d815      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f64:	d110      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f74:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f76:	e00d      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f94d 	bl	800621c <RCCEx_PLLSAI1_ConfigNP>
 8005f82:	4603      	mov	r3, r0
 8005f84:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f86:	e005      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	77fb      	strb	r3, [r7, #31]
        break;
 8005f8c:	e002      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f94:	7ffb      	ldrb	r3, [r7, #31]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d105      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fee8 	bl	8005d74 <LL_RCC_SetSAIClockSource>
 8005fa4:	e001      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa6:	7ffb      	ldrb	r3, [r7, #31]
 8005fa8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d046      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005fb6:	f7ff ff56 	bl	8005e66 <LL_RCC_GetRTCClockSource>
 8005fba:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d03c      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005fc6:	f7fe fc1b 	bl	8004800 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d105      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff ff30 	bl	8005e3a <LL_RCC_SetRTCClockSource>
 8005fda:	e02e      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005fe6:	f7ff ff4b 	bl	8005e80 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005fea:	f7ff ff5a 	bl	8005ea2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006006:	f7ff fde1 	bl	8005bcc <LL_RCC_LSE_IsEnabled>
 800600a:	4603      	mov	r3, r0
 800600c:	2b01      	cmp	r3, #1
 800600e:	d114      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006010:	f7fb fefc 	bl	8001e0c <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006016:	e00b      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006018:	f7fb fef8 	bl	8001e0c <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f241 3288 	movw	r2, #5000	; 0x1388
 8006026:	4293      	cmp	r3, r2
 8006028:	d902      	bls.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	77fb      	strb	r3, [r7, #31]
              break;
 800602e:	e004      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006030:	f7ff fdde 	bl	8005bf0 <LL_RCC_LSE_IsReady>
 8006034:	4603      	mov	r3, r0
 8006036:	2b01      	cmp	r3, #1
 8006038:	d1ee      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800603a:	7ffb      	ldrb	r3, [r7, #31]
 800603c:	77bb      	strb	r3, [r7, #30]
 800603e:	e001      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	7ffb      	ldrb	r3, [r7, #31]
 8006042:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fe2a 	bl	8005cae <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fe35 	bl	8005cda <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fe5d 	bl	8005d40 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fe52 	bl	8005d40 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff fe2a 	bl	8005d06 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fe1f 	bl	8005d06 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d022      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fe8d 	bl	8005df8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e6:	d107      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006100:	d10b      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3304      	adds	r3, #4
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f8e3 	bl	80062d2 <RCCEx_PLLSAI1_ConfigNQ>
 800610c:	4603      	mov	r3, r0
 800610e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006110:	7ffb      	ldrb	r3, [r7, #31]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006116:	7ffb      	ldrb	r3, [r7, #31]
 8006118:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006122:	2b00      	cmp	r3, #0
 8006124:	d02b      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612e:	d008      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006138:	d003      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	2b00      	cmp	r3, #0
 8006140:	d105      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff fe2a 	bl	8005da0 <LL_RCC_SetRNGClockSource>
 800614c:	e00a      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	2000      	movs	r0, #0
 800615a:	f7ff fe21 	bl	8005da0 <LL_RCC_SetRNGClockSource>
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff fe34 	bl	8005dcc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800616c:	d107      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800617c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006186:	2b00      	cmp	r3, #0
 8006188:	d022      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fe3d 	bl	8005e0e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d107      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800619e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ac:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061b6:	d10b      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 f8e3 	bl	8006388 <RCCEx_PLLSAI1_ConfigNR>
 80061c2:	4603      	mov	r3, r0
 80061c4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80061c6:	7ffb      	ldrb	r3, [r7, #31]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80061cc:	7ffb      	ldrb	r3, [r7, #31]
 80061ce:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fd26 	bl	8005c32 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff fd45 	bl	8005c86 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fd2c 	bl	8005c5e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006206:	7fbb      	ldrb	r3, [r7, #30]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3720      	adds	r7, #32
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006214:	f7ff fcfe 	bl	8005c14 <LL_RCC_MSI_EnablePLLMode>
}
 8006218:	bf00      	nop
 800621a:	bd80      	pop	{r7, pc}

0800621c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006228:	f7ff fe5b 	bl	8005ee2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800622c:	f7fb fdee 	bl	8001e0c <HAL_GetTick>
 8006230:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006232:	e009      	b.n	8006248 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006234:	f7fb fdea 	bl	8001e0c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d902      	bls.n	8006248 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	73fb      	strb	r3, [r7, #15]
      break;
 8006246:	e004      	b.n	8006252 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006248:	f7ff fe5a 	bl	8005f00 <LL_RCC_PLLSAI1_IsReady>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d137      	bne.n	80062c8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626c:	4313      	orrs	r3, r2
 800626e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006282:	4313      	orrs	r3, r2
 8006284:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006286:	f7ff fe1d 	bl	8005ec4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800628a:	f7fb fdbf 	bl	8001e0c <HAL_GetTick>
 800628e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006290:	e009      	b.n	80062a6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006292:	f7fb fdbb 	bl	8001e0c <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d902      	bls.n	80062a6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	73fb      	strb	r3, [r7, #15]
        break;
 80062a4:	e004      	b.n	80062b0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062a6:	f7ff fe2b 	bl	8005f00 <LL_RCC_PLLSAI1_IsReady>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d1f0      	bne.n	8006292 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d108      	bne.n	80062c8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c4:	4313      	orrs	r3, r2
 80062c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80062de:	f7ff fe00 	bl	8005ee2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062e2:	f7fb fd93 	bl	8001e0c <HAL_GetTick>
 80062e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062e8:	e009      	b.n	80062fe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062ea:	f7fb fd8f 	bl	8001e0c <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d902      	bls.n	80062fe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	73fb      	strb	r3, [r7, #15]
      break;
 80062fc:	e004      	b.n	8006308 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062fe:	f7ff fdff 	bl	8005f00 <LL_RCC_PLLSAI1_IsReady>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f0      	bne.n	80062ea <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d137      	bne.n	800637e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800630e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006322:	4313      	orrs	r3, r2
 8006324:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006338:	4313      	orrs	r3, r2
 800633a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800633c:	f7ff fdc2 	bl	8005ec4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006340:	f7fb fd64 	bl	8001e0c <HAL_GetTick>
 8006344:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006346:	e009      	b.n	800635c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006348:	f7fb fd60 	bl	8001e0c <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d902      	bls.n	800635c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	73fb      	strb	r3, [r7, #15]
        break;
 800635a:	e004      	b.n	8006366 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800635c:	f7ff fdd0 	bl	8005f00 <LL_RCC_PLLSAI1_IsReady>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d1f0      	bne.n	8006348 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d108      	bne.n	800637e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800636c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800637a:	4313      	orrs	r3, r2
 800637c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006394:	f7ff fda5 	bl	8005ee2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006398:	f7fb fd38 	bl	8001e0c <HAL_GetTick>
 800639c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800639e:	e009      	b.n	80063b4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063a0:	f7fb fd34 	bl	8001e0c <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d902      	bls.n	80063b4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	73fb      	strb	r3, [r7, #15]
      break;
 80063b2:	e004      	b.n	80063be <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80063b4:	f7ff fda4 	bl	8005f00 <LL_RCC_PLLSAI1_IsReady>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f0      	bne.n	80063a0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d137      	bne.n	8006434 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80063c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d8:	4313      	orrs	r3, r2
 80063da:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80063dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ee:	4313      	orrs	r3, r2
 80063f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063f2:	f7ff fd67 	bl	8005ec4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f6:	f7fb fd09 	bl	8001e0c <HAL_GetTick>
 80063fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063fc:	e009      	b.n	8006412 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063fe:	f7fb fd05 	bl	8001e0c <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d902      	bls.n	8006412 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	73fb      	strb	r3, [r7, #15]
        break;
 8006410:	e004      	b.n	800641c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006412:	f7ff fd75 	bl	8005f00 <LL_RCC_PLLSAI1_IsReady>
 8006416:	4603      	mov	r3, r0
 8006418:	2b01      	cmp	r3, #1
 800641a:	d1f0      	bne.n	80063fe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d108      	bne.n	8006434 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006430:	4313      	orrs	r3, r2
 8006432:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e049      	b.n	80064e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f841 	bl	80064ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3304      	adds	r3, #4
 800647a:	4619      	mov	r1, r3
 800647c:	4610      	mov	r0, r2
 800647e:	f000 f9b7 	bl	80067f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d001      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e036      	b.n	8006586 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a17      	ldr	r2, [pc, #92]	; (8006594 <HAL_TIM_Base_Start_IT+0x94>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_TIM_Base_Start_IT+0x44>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006542:	d115      	bne.n	8006570 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	4b13      	ldr	r3, [pc, #76]	; (8006598 <HAL_TIM_Base_Start_IT+0x98>)
 800654c:	4013      	ands	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b06      	cmp	r3, #6
 8006554:	d015      	beq.n	8006582 <HAL_TIM_Base_Start_IT+0x82>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655c:	d011      	beq.n	8006582 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656e:	e008      	b.n	8006582 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e000      	b.n	8006584 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	00010007 	.word	0x00010007

0800659c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d020      	beq.n	8006600 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01b      	beq.n	8006600 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0202 	mvn.w	r2, #2
 80065d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f8e4 	bl	80067b4 <HAL_TIM_IC_CaptureCallback>
 80065ec:	e005      	b.n	80065fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f8d6 	bl	80067a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f8e7 	bl	80067c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d020      	beq.n	800664c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01b      	beq.n	800664c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0204 	mvn.w	r2, #4
 800661c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f8be 	bl	80067b4 <HAL_TIM_IC_CaptureCallback>
 8006638:	e005      	b.n	8006646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f8b0 	bl	80067a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f8c1 	bl	80067c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d020      	beq.n	8006698 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01b      	beq.n	8006698 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0208 	mvn.w	r2, #8
 8006668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2204      	movs	r2, #4
 800666e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f898 	bl	80067b4 <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f88a 	bl	80067a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f89b 	bl	80067c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d020      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01b      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0210 	mvn.w	r2, #16
 80066b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2208      	movs	r2, #8
 80066ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f872 	bl	80067b4 <HAL_TIM_IC_CaptureCallback>
 80066d0:	e005      	b.n	80066de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f864 	bl	80067a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f875 	bl	80067c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0201 	mvn.w	r2, #1
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7fb f81c 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f8d0 	bl	80068cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8c8 	bl	80068e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00c      	beq.n	8006774 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800676c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f834 	bl	80067dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0220 	mvn.w	r2, #32
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f890 	bl	80068b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a2a      	ldr	r2, [pc, #168]	; (80068ac <TIM_Base_SetConfig+0xbc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_Base_SetConfig+0x20>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680e:	d108      	bne.n	8006822 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a21      	ldr	r2, [pc, #132]	; (80068ac <TIM_Base_SetConfig+0xbc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00b      	beq.n	8006842 <TIM_Base_SetConfig+0x52>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006830:	d007      	beq.n	8006842 <TIM_Base_SetConfig+0x52>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <TIM_Base_SetConfig+0xc0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d003      	beq.n	8006842 <TIM_Base_SetConfig+0x52>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <TIM_Base_SetConfig+0xc4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d108      	bne.n	8006854 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a0c      	ldr	r2, [pc, #48]	; (80068ac <TIM_Base_SetConfig+0xbc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_Base_SetConfig+0xa0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a0b      	ldr	r2, [pc, #44]	; (80068b0 <TIM_Base_SetConfig+0xc0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0xa0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <TIM_Base_SetConfig+0xc4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d103      	bne.n	8006898 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	615a      	str	r2, [r3, #20]
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <LL_RCC_GetUSARTClockSource>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80068fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006900:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4013      	ands	r3, r2
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <LL_RCC_GetLPUARTClockSource>:
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800691c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006920:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4013      	ands	r3, r2
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e042      	b.n	80069cc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fb f807 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2224      	movs	r2, #36	; 0x24
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 f914 	bl	8007bac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fee9 	bl	800775c <UART_SetConfig>
 800698a:	4603      	mov	r3, r0
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e01b      	b.n	80069cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 f993 	bl	8007cf0 <UART_CheckIdleState>
 80069ca:	4603      	mov	r3, r0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b091      	sub	sp, #68	; 0x44
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d178      	bne.n	8006ade <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_UART_Transmit_IT+0x24>
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e071      	b.n	8006ae0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	88fa      	ldrh	r2, [r7, #6]
 8006a06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	88fa      	ldrh	r2, [r7, #6]
 8006a0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2221      	movs	r2, #33	; 0x21
 8006a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a30:	d12a      	bne.n	8006a88 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3a:	d107      	bne.n	8006a4c <HAL_UART_Transmit_IT+0x78>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d103      	bne.n	8006a4c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a29      	ldr	r2, [pc, #164]	; (8006aec <HAL_UART_Transmit_IT+0x118>)
 8006a48:	679a      	str	r2, [r3, #120]	; 0x78
 8006a4a:	e002      	b.n	8006a52 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a28      	ldr	r2, [pc, #160]	; (8006af0 <HAL_UART_Transmit_IT+0x11c>)
 8006a50:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a72:	637a      	str	r2, [r7, #52]	; 0x34
 8006a74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <HAL_UART_Transmit_IT+0x7e>
 8006a86:	e028      	b.n	8006ada <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a90:	d107      	bne.n	8006aa2 <HAL_UART_Transmit_IT+0xce>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <HAL_UART_Transmit_IT+0x120>)
 8006a9e:	679a      	str	r2, [r3, #120]	; 0x78
 8006aa0:	e002      	b.n	8006aa8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <HAL_UART_Transmit_IT+0x124>)
 8006aa6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac6:	623b      	str	r3, [r7, #32]
 8006ac8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	69f9      	ldr	r1, [r7, #28]
 8006acc:	6a3a      	ldr	r2, [r7, #32]
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e6      	bne.n	8006aa8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	e000      	b.n	8006ae0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
  }
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3744      	adds	r7, #68	; 0x44
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	08008963 	.word	0x08008963
 8006af0:	08008883 	.word	0x08008883
 8006af4:	080087c1 	.word	0x080087c1
 8006af8:	08008709 	.word	0x08008709

08006afc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	; 0x28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d137      	bne.n	8006b84 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_UART_Receive_IT+0x24>
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e030      	b.n	8006b86 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a18      	ldr	r2, [pc, #96]	; (8006b90 <HAL_UART_Receive_IT+0x94>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d01f      	beq.n	8006b74 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d018      	beq.n	8006b74 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	623b      	str	r3, [r7, #32]
 8006b62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	69f9      	ldr	r1, [r7, #28]
 8006b66:	6a3a      	ldr	r2, [r7, #32]
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	461a      	mov	r2, r3
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f001 f9ca 	bl	8007f14 <UART_Start_Receive_IT>
 8006b80:	4603      	mov	r3, r0
 8006b82:	e000      	b.n	8006b86 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b84:	2302      	movs	r3, #2
  }
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3728      	adds	r7, #40	; 0x28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40008000 	.word	0x40008000

08006b94 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08a      	sub	sp, #40	; 0x28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d167      	bne.n	8006c7c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_UART_Transmit_DMA+0x24>
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e060      	b.n	8006c7e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	88fa      	ldrh	r2, [r7, #6]
 8006bc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	88fa      	ldrh	r2, [r7, #6]
 8006bce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2221      	movs	r2, #33	; 0x21
 8006bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d028      	beq.n	8006c3c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bee:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <HAL_UART_Transmit_DMA+0xf4>)
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bf6:	4a25      	ldr	r2, [pc, #148]	; (8006c8c <HAL_UART_Transmit_DMA+0xf8>)
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bfe:	4a24      	ldr	r2, [pc, #144]	; (8006c90 <HAL_UART_Transmit_DMA+0xfc>)
 8006c00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c06:	2200      	movs	r2, #0
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c12:	4619      	mov	r1, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3328      	adds	r3, #40	; 0x28
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	f7fc ff81 	bl	8003b24 <HAL_DMA_Start_IT>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d009      	beq.n	8006c3c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2210      	movs	r2, #16
 8006c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e020      	b.n	8006c7e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2240      	movs	r2, #64	; 0x40
 8006c42:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	613b      	str	r3, [r7, #16]
   return(result);
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c64:	623a      	str	r2, [r7, #32]
 8006c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	69f9      	ldr	r1, [r7, #28]
 8006c6a:	6a3a      	ldr	r2, [r7, #32]
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e5      	bne.n	8006c44 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e000      	b.n	8006c7e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006c7c:	2302      	movs	r3, #2
  }
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	080083f3 	.word	0x080083f3
 8006c8c:	0800848d 	.word	0x0800848d
 8006c90:	08008613 	.word	0x08008613

08006c94 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b090      	sub	sp, #64	; 0x40
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d139      	bne.n	8006d2e <HAL_UART_DMAStop+0x9a>
 8006cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbc:	2b21      	cmp	r3, #33	; 0x21
 8006cbe:	d136      	bne.n	8006d2e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e5      	bne.n	8006cc0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d015      	beq.n	8006d28 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fc ff8a 	bl	8003c1a <HAL_DMA_Abort>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00d      	beq.n	8006d28 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fd f8ef 	bl	8003ef4 <HAL_DMA_GetError>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d105      	bne.n	8006d28 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e047      	b.n	8006db8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fabb 	bl	80082a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d13c      	bne.n	8006db6 <HAL_UART_DMAStop+0x122>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	2b22      	cmp	r3, #34	; 0x22
 8006d40:	d139      	bne.n	8006db6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d58:	633b      	str	r3, [r7, #48]	; 0x30
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d62:	61ba      	str	r2, [r7, #24]
 8006d64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6979      	ldr	r1, [r7, #20]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d017      	beq.n	8006db0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fc ff47 	bl	8003c1a <HAL_DMA_Abort>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00e      	beq.n	8006db0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fd f8ab 	bl	8003ef4 <HAL_DMA_GetError>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d105      	bne.n	8006db0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2210      	movs	r2, #16
 8006da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e003      	b.n	8006db8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fab8 	bl	8008326 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3740      	adds	r7, #64	; 0x40
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b09a      	sub	sp, #104	; 0x68
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de6:	657b      	str	r3, [r7, #84]	; 0x54
 8006de8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e6      	bne.n	8006dc8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	663b      	str	r3, [r7, #96]	; 0x60
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e1e:	643a      	str	r2, [r7, #64]	; 0x40
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e3      	bne.n	8006dfa <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d118      	bne.n	8006e6c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	f023 0310 	bic.w	r3, r3, #16
 8006e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e6      	bne.n	8006e3a <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	d154      	bne.n	8006f24 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e9a:	61ba      	str	r2, [r7, #24]
 8006e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6979      	ldr	r1, [r7, #20]
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e5      	bne.n	8006e7a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d017      	beq.n	8006ee8 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ebe:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <HAL_UART_AbortReceive_IT+0x198>)
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fc ff05 	bl	8003cd8 <HAL_DMA_Abort_IT>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03c      	beq.n	8006f4e <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4798      	blx	r3
 8006ee6:	e032      	b.n	8006f4e <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	220f      	movs	r2, #15
 8006efc:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f042 0208 	orr.w	r2, r2, #8
 8006f0c:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fb55 	bl	80075cc <HAL_UART_AbortReceiveCpltCallback>
 8006f22:	e014      	b.n	8006f4e <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	220f      	movs	r2, #15
 8006f38:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fb3f 	bl	80075cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3768      	adds	r7, #104	; 0x68
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	080086bf 	.word	0x080086bf

08006f5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b0ba      	sub	sp, #232	; 0xe8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f86:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11b      	bne.n	8006fd0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d015      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d009      	beq.n	8006fd0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 82e3 	beq.w	800758c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
      }
      return;
 8006fce:	e2dd      	b.n	800758c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8123 	beq.w	8007220 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006fde:	4b8d      	ldr	r3, [pc, #564]	; (8007214 <HAL_UART_IRQHandler+0x2b8>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006fea:	4b8b      	ldr	r3, [pc, #556]	; (8007218 <HAL_UART_IRQHandler+0x2bc>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8116 	beq.w	8007220 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d011      	beq.n	8007024 <HAL_UART_IRQHandler+0xc8>
 8007000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2201      	movs	r2, #1
 8007012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701a:	f043 0201 	orr.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d011      	beq.n	8007054 <HAL_UART_IRQHandler+0xf8>
 8007030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2202      	movs	r2, #2
 8007042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704a:	f043 0204 	orr.w	r2, r3, #4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d011      	beq.n	8007084 <HAL_UART_IRQHandler+0x128>
 8007060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00b      	beq.n	8007084 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2204      	movs	r2, #4
 8007072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707a:	f043 0202 	orr.w	r2, r3, #2
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d017      	beq.n	80070c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800709c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80070a0:	4b5c      	ldr	r3, [pc, #368]	; (8007214 <HAL_UART_IRQHandler+0x2b8>)
 80070a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2208      	movs	r2, #8
 80070ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b6:	f043 0208 	orr.w	r2, r3, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <HAL_UART_IRQHandler+0x196>
 80070cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e8:	f043 0220 	orr.w	r2, r3, #32
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8249 	beq.w	8007590 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007102:	f003 0320 	and.w	r3, r3, #32
 8007106:	2b00      	cmp	r3, #0
 8007108:	d013      	beq.n	8007132 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800710a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d105      	bne.n	8007122 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800711a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007138:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b40      	cmp	r3, #64	; 0x40
 8007148:	d005      	beq.n	8007156 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800714a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800714e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007152:	2b00      	cmp	r3, #0
 8007154:	d054      	beq.n	8007200 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 f8e5 	bl	8008326 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d146      	bne.n	80071f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3308      	adds	r3, #8
 8007192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007196:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800719a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1d9      	bne.n	800716a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d017      	beq.n	80071f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c6:	4a15      	ldr	r2, [pc, #84]	; (800721c <HAL_UART_IRQHandler+0x2c0>)
 80071c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fc fd81 	bl	8003cd8 <HAL_DMA_Abort_IT>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d019      	beq.n	8007210 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80071ea:	4610      	mov	r0, r2
 80071ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ee:	e00f      	b.n	8007210 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f007 fe97 	bl	800ef24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f6:	e00b      	b.n	8007210 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f007 fe93 	bl	800ef24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fe:	e007      	b.n	8007210 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f007 fe8f 	bl	800ef24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800720e:	e1bf      	b.n	8007590 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	bf00      	nop
    return;
 8007212:	e1bd      	b.n	8007590 <HAL_UART_IRQHandler+0x634>
 8007214:	10000001 	.word	0x10000001
 8007218:	04000120 	.word	0x04000120
 800721c:	08008693 	.word	0x08008693

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007224:	2b01      	cmp	r3, #1
 8007226:	f040 8153 	bne.w	80074d0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 814c 	beq.w	80074d0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 8145 	beq.w	80074d0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2210      	movs	r2, #16
 800724c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	f040 80bb 	bne.w	80073d4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800726c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 818f 	beq.w	8007594 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800727c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007280:	429a      	cmp	r2, r3
 8007282:	f080 8187 	bcs.w	8007594 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800728c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f040 8087 	bne.w	80073b2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1da      	bne.n	80072a4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007300:	f023 0301 	bic.w	r3, r3, #1
 8007304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3308      	adds	r3, #8
 800730e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007312:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007316:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800731a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e1      	bne.n	80072ee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800733a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800733c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800734e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007350:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007354:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800735c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e3      	bne.n	800732a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800737e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007380:	f023 0310 	bic.w	r3, r3, #16
 8007384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007392:	65bb      	str	r3, [r7, #88]	; 0x58
 8007394:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e4      	bne.n	8007370 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fc fc34 	bl	8003c1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f007 fe03 	bl	800efd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073d2:	e0df      	b.n	8007594 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 80d1 	beq.w	8007598 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80073f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80cc 	beq.w	8007598 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007414:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007422:	647b      	str	r3, [r7, #68]	; 0x44
 8007424:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e4      	bne.n	8007400 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	623b      	str	r3, [r7, #32]
   return(result);
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3308      	adds	r3, #8
 800745a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800745e:	633a      	str	r2, [r7, #48]	; 0x30
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e1      	bne.n	8007436 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	60fb      	str	r3, [r7, #12]
   return(result);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0310 	bic.w	r3, r3, #16
 800749a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	69b9      	ldr	r1, [r7, #24]
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	617b      	str	r3, [r7, #20]
   return(result);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e4      	bne.n	8007486 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f007 fd85 	bl	800efd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074ce:	e063      	b.n	8007598 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00e      	beq.n	80074fa <HAL_UART_IRQHandler+0x59e>
 80074dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fff2 	bl	80094dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074f8:	e051      	b.n	800759e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007502:	2b00      	cmp	r3, #0
 8007504:	d014      	beq.n	8007530 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d008      	beq.n	8007530 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007522:	2b00      	cmp	r3, #0
 8007524:	d03a      	beq.n	800759c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
    }
    return;
 800752e:	e035      	b.n	800759c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <HAL_UART_IRQHandler+0x5f4>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 fa7f 	bl	8008a4c <UART_EndTransmit_IT>
    return;
 800754e:	e026      	b.n	800759e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <HAL_UART_IRQHandler+0x614>
 800755c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007560:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 ffcb 	bl	8009504 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800756e:	e016      	b.n	800759e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d010      	beq.n	800759e <HAL_UART_IRQHandler+0x642>
 800757c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007580:	2b00      	cmp	r3, #0
 8007582:	da0c      	bge.n	800759e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 ffb3 	bl	80094f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800758a:	e008      	b.n	800759e <HAL_UART_IRQHandler+0x642>
      return;
 800758c:	bf00      	nop
 800758e:	e006      	b.n	800759e <HAL_UART_IRQHandler+0x642>
    return;
 8007590:	bf00      	nop
 8007592:	e004      	b.n	800759e <HAL_UART_IRQHandler+0x642>
      return;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <HAL_UART_IRQHandler+0x642>
      return;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_UART_IRQHandler+0x642>
    return;
 800759c:	bf00      	nop
  }
}
 800759e:	37e8      	adds	r7, #232	; 0xe8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b08f      	sub	sp, #60	; 0x3c
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e042      	b.n	800767c <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2224      	movs	r2, #36	; 0x24
 8007602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	61fb      	str	r3, [r7, #28]
   return(result);
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f023 030c 	bic.w	r3, r3, #12
 800761a:	637b      	str	r3, [r7, #52]	; 0x34
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007626:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800762a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e6      	bne.n	8007606 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	60bb      	str	r3, [r7, #8]
   return(result);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f043 0308 	orr.w	r3, r3, #8
 800764c:	633b      	str	r3, [r7, #48]	; 0x30
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	461a      	mov	r2, r3
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	61bb      	str	r3, [r7, #24]
 8007658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6979      	ldr	r1, [r7, #20]
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	613b      	str	r3, [r7, #16]
   return(result);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e6      	bne.n	8007638 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	373c      	adds	r7, #60	; 0x3c
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b08f      	sub	sp, #60	; 0x3c
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_HalfDuplex_EnableReceiver+0x16>
 800769a:	2302      	movs	r3, #2
 800769c:	e042      	b.n	8007724 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2224      	movs	r2, #36	; 0x24
 80076aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f023 030c 	bic.w	r3, r3, #12
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e6      	bne.n	80076ae <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f043 0304 	orr.w	r3, r3, #4
 80076f4:	633b      	str	r3, [r7, #48]	; 0x30
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	61bb      	str	r3, [r7, #24]
 8007700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	6979      	ldr	r1, [r7, #20]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	613b      	str	r3, [r7, #16]
   return(result);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e6      	bne.n	80076e0 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	373c      	adds	r7, #60	; 0x3c
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4313      	orrs	r3, r2
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
	...

0800775c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800775c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007760:	b08c      	sub	sp, #48	; 0x30
 8007762:	af00      	add	r7, sp, #0
 8007764:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	431a      	orrs	r2, r3
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	431a      	orrs	r2, r3
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	4313      	orrs	r3, r2
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4baf      	ldr	r3, [pc, #700]	; (8007a48 <UART_SetConfig+0x2ec>)
 800778c:	4013      	ands	r3, r2
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	6812      	ldr	r2, [r2, #0]
 8007792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007794:	430b      	orrs	r3, r1
 8007796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4aa4      	ldr	r2, [pc, #656]	; (8007a4c <UART_SetConfig+0x2f0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d004      	beq.n	80077c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c4:	4313      	orrs	r3, r2
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80077d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077dc:	430b      	orrs	r3, r1
 80077de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	f023 010f 	bic.w	r1, r3, #15
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a95      	ldr	r2, [pc, #596]	; (8007a50 <UART_SetConfig+0x2f4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d125      	bne.n	800784c <UART_SetConfig+0xf0>
 8007800:	2003      	movs	r0, #3
 8007802:	f7ff f877 	bl	80068f4 <LL_RCC_GetUSARTClockSource>
 8007806:	4603      	mov	r3, r0
 8007808:	2b03      	cmp	r3, #3
 800780a:	d81b      	bhi.n	8007844 <UART_SetConfig+0xe8>
 800780c:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <UART_SetConfig+0xb8>)
 800780e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007812:	bf00      	nop
 8007814:	08007825 	.word	0x08007825
 8007818:	08007835 	.word	0x08007835
 800781c:	0800782d 	.word	0x0800782d
 8007820:	0800783d 	.word	0x0800783d
 8007824:	2301      	movs	r3, #1
 8007826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800782a:	e042      	b.n	80078b2 <UART_SetConfig+0x156>
 800782c:	2302      	movs	r3, #2
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007832:	e03e      	b.n	80078b2 <UART_SetConfig+0x156>
 8007834:	2304      	movs	r3, #4
 8007836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783a:	e03a      	b.n	80078b2 <UART_SetConfig+0x156>
 800783c:	2308      	movs	r3, #8
 800783e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007842:	e036      	b.n	80078b2 <UART_SetConfig+0x156>
 8007844:	2310      	movs	r3, #16
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784a:	e032      	b.n	80078b2 <UART_SetConfig+0x156>
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a7e      	ldr	r2, [pc, #504]	; (8007a4c <UART_SetConfig+0x2f0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d12a      	bne.n	80078ac <UART_SetConfig+0x150>
 8007856:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800785a:	f7ff f85b 	bl	8006914 <LL_RCC_GetLPUARTClockSource>
 800785e:	4603      	mov	r3, r0
 8007860:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007864:	d01a      	beq.n	800789c <UART_SetConfig+0x140>
 8007866:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800786a:	d81b      	bhi.n	80078a4 <UART_SetConfig+0x148>
 800786c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007870:	d00c      	beq.n	800788c <UART_SetConfig+0x130>
 8007872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007876:	d815      	bhi.n	80078a4 <UART_SetConfig+0x148>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <UART_SetConfig+0x128>
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007880:	d008      	beq.n	8007894 <UART_SetConfig+0x138>
 8007882:	e00f      	b.n	80078a4 <UART_SetConfig+0x148>
 8007884:	2300      	movs	r3, #0
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800788a:	e012      	b.n	80078b2 <UART_SetConfig+0x156>
 800788c:	2302      	movs	r3, #2
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007892:	e00e      	b.n	80078b2 <UART_SetConfig+0x156>
 8007894:	2304      	movs	r3, #4
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800789a:	e00a      	b.n	80078b2 <UART_SetConfig+0x156>
 800789c:	2308      	movs	r3, #8
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078a2:	e006      	b.n	80078b2 <UART_SetConfig+0x156>
 80078a4:	2310      	movs	r3, #16
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078aa:	e002      	b.n	80078b2 <UART_SetConfig+0x156>
 80078ac:	2310      	movs	r3, #16
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a65      	ldr	r2, [pc, #404]	; (8007a4c <UART_SetConfig+0x2f0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	f040 8097 	bne.w	80079ec <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d823      	bhi.n	800790e <UART_SetConfig+0x1b2>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x170>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	0800790f 	.word	0x0800790f
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	0800790f 	.word	0x0800790f
 80078dc:	080078ff 	.word	0x080078ff
 80078e0:	0800790f 	.word	0x0800790f
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	0800790f 	.word	0x0800790f
 80078ec:	08007907 	.word	0x08007907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f0:	f7fe f85a 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 80078f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078f6:	e010      	b.n	800791a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f8:	4b56      	ldr	r3, [pc, #344]	; (8007a54 <UART_SetConfig+0x2f8>)
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078fc:	e00d      	b.n	800791a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fe:	f7fd ffd3 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8007902:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007904:	e009      	b.n	800791a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800790c:	e005      	b.n	800791a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 812b 	beq.w	8007b78 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	4a4c      	ldr	r2, [pc, #304]	; (8007a58 <UART_SetConfig+0x2fc>)
 8007928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800792c:	461a      	mov	r2, r3
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	fbb3 f3f2 	udiv	r3, r3, r2
 8007934:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	429a      	cmp	r2, r3
 8007944:	d305      	bcc.n	8007952 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	429a      	cmp	r2, r3
 8007950:	d903      	bls.n	800795a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007958:	e10e      	b.n	8007b78 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	2200      	movs	r2, #0
 800795e:	60bb      	str	r3, [r7, #8]
 8007960:	60fa      	str	r2, [r7, #12]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	4a3c      	ldr	r2, [pc, #240]	; (8007a58 <UART_SetConfig+0x2fc>)
 8007968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800796c:	b29b      	uxth	r3, r3
 800796e:	2200      	movs	r2, #0
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007978:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800797c:	f7f9 f81e 	bl	80009bc <__aeabi_uldivmod>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4610      	mov	r0, r2
 8007986:	4619      	mov	r1, r3
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	f04f 0300 	mov.w	r3, #0
 8007990:	020b      	lsls	r3, r1, #8
 8007992:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007996:	0202      	lsls	r2, r0, #8
 8007998:	6979      	ldr	r1, [r7, #20]
 800799a:	6849      	ldr	r1, [r1, #4]
 800799c:	0849      	lsrs	r1, r1, #1
 800799e:	2000      	movs	r0, #0
 80079a0:	460c      	mov	r4, r1
 80079a2:	4605      	mov	r5, r0
 80079a4:	eb12 0804 	adds.w	r8, r2, r4
 80079a8:	eb43 0905 	adc.w	r9, r3, r5
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	469a      	mov	sl, r3
 80079b4:	4693      	mov	fp, r2
 80079b6:	4652      	mov	r2, sl
 80079b8:	465b      	mov	r3, fp
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f8 fffd 	bl	80009bc <__aeabi_uldivmod>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4613      	mov	r3, r2
 80079c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d0:	d308      	bcc.n	80079e4 <UART_SetConfig+0x288>
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d8:	d204      	bcs.n	80079e4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6a3a      	ldr	r2, [r7, #32]
 80079e0:	60da      	str	r2, [r3, #12]
 80079e2:	e0c9      	b.n	8007b78 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079ea:	e0c5      	b.n	8007b78 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f4:	d16d      	bne.n	8007ad2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80079f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079fa:	3b01      	subs	r3, #1
 80079fc:	2b07      	cmp	r3, #7
 80079fe:	d82d      	bhi.n	8007a5c <UART_SetConfig+0x300>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <UART_SetConfig+0x2ac>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a29 	.word	0x08007a29
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a5d 	.word	0x08007a5d
 8007a14:	08007a37 	.word	0x08007a37
 8007a18:	08007a5d 	.word	0x08007a5d
 8007a1c:	08007a5d 	.word	0x08007a5d
 8007a20:	08007a5d 	.word	0x08007a5d
 8007a24:	08007a3f 	.word	0x08007a3f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a28:	f7fd ffd4 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 8007a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a2e:	e01b      	b.n	8007a68 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a30:	4b08      	ldr	r3, [pc, #32]	; (8007a54 <UART_SetConfig+0x2f8>)
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a34:	e018      	b.n	8007a68 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a36:	f7fd ff37 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8007a3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a3c:	e014      	b.n	8007a68 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a44:	e010      	b.n	8007a68 <UART_SetConfig+0x30c>
 8007a46:	bf00      	nop
 8007a48:	cfff69f3 	.word	0xcfff69f3
 8007a4c:	40008000 	.word	0x40008000
 8007a50:	40013800 	.word	0x40013800
 8007a54:	00f42400 	.word	0x00f42400
 8007a58:	0800f38c 	.word	0x0800f38c
      default:
        pclk = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 8084 	beq.w	8007b78 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	4a4b      	ldr	r2, [pc, #300]	; (8007ba4 <UART_SetConfig+0x448>)
 8007a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a82:	005a      	lsls	r2, r3, #1
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	085b      	lsrs	r3, r3, #1
 8007a8a:	441a      	add	r2, r3
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a94:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	2b0f      	cmp	r3, #15
 8007a9a:	d916      	bls.n	8007aca <UART_SetConfig+0x36e>
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa2:	d212      	bcs.n	8007aca <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f023 030f 	bic.w	r3, r3, #15
 8007aac:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	8bfb      	ldrh	r3, [r7, #30]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	8bfa      	ldrh	r2, [r7, #30]
 8007ac6:	60da      	str	r2, [r3, #12]
 8007ac8:	e056      	b.n	8007b78 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ad0:	e052      	b.n	8007b78 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	2b07      	cmp	r3, #7
 8007ada:	d822      	bhi.n	8007b22 <UART_SetConfig+0x3c6>
 8007adc:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <UART_SetConfig+0x388>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b05 	.word	0x08007b05
 8007ae8:	08007b0d 	.word	0x08007b0d
 8007aec:	08007b23 	.word	0x08007b23
 8007af0:	08007b13 	.word	0x08007b13
 8007af4:	08007b23 	.word	0x08007b23
 8007af8:	08007b23 	.word	0x08007b23
 8007afc:	08007b23 	.word	0x08007b23
 8007b00:	08007b1b 	.word	0x08007b1b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b04:	f7fd ff66 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 8007b08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b0a:	e010      	b.n	8007b2e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b0c:	4b26      	ldr	r3, [pc, #152]	; (8007ba8 <UART_SetConfig+0x44c>)
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b10:	e00d      	b.n	8007b2e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b12:	f7fd fec9 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8007b16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b18:	e009      	b.n	8007b2e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b20:	e005      	b.n	8007b2e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b2c:	bf00      	nop
    }

    if (pclk != 0U)
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d021      	beq.n	8007b78 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	4a1a      	ldr	r2, [pc, #104]	; (8007ba4 <UART_SetConfig+0x448>)
 8007b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	441a      	add	r2, r3
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	2b0f      	cmp	r3, #15
 8007b5c:	d909      	bls.n	8007b72 <UART_SetConfig+0x416>
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b64:	d205      	bcs.n	8007b72 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60da      	str	r2, [r3, #12]
 8007b70:	e002      	b.n	8007b78 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007b94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3730      	adds	r7, #48	; 0x30
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ba2:	bf00      	nop
 8007ba4:	0800f38c 	.word	0x0800f38c
 8007ba8:	00f42400 	.word	0x00f42400

08007bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1e:	f003 0304 	and.w	r3, r3, #4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01a      	beq.n	8007cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007caa:	d10a      	bne.n	8007cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	605a      	str	r2, [r3, #4]
  }
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b098      	sub	sp, #96	; 0x60
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d00:	f7fa f884 	bl	8001e0c <HAL_GetTick>
 8007d04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d12f      	bne.n	8007d74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f88e 	bl	8007e44 <UART_WaitOnFlagUntilTimeout>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d022      	beq.n	8007d74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d42:	653b      	str	r3, [r7, #80]	; 0x50
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e6      	bne.n	8007d2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e063      	b.n	8007e3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0304 	and.w	r3, r3, #4
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d149      	bne.n	8007e16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f857 	bl	8007e44 <UART_WaitOnFlagUntilTimeout>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d03c      	beq.n	8007e16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	623b      	str	r3, [r7, #32]
   return(result);
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dba:	633b      	str	r3, [r7, #48]	; 0x30
 8007dbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e6      	bne.n	8007d9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0301 	bic.w	r3, r3, #1
 8007de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dee:	61fa      	str	r2, [r7, #28]
 8007df0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	69b9      	ldr	r1, [r7, #24]
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e5      	bne.n	8007dce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e012      	b.n	8007e3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3758      	adds	r7, #88	; 0x58
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	4613      	mov	r3, r2
 8007e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e54:	e049      	b.n	8007eea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5c:	d045      	beq.n	8007eea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5e:	f7f9 ffd5 	bl	8001e0c <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d302      	bcc.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e048      	b.n	8007f0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0304 	and.w	r3, r3, #4
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d031      	beq.n	8007eea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d110      	bne.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2208      	movs	r2, #8
 8007e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fa42 	bl	8008326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e029      	b.n	8007f0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec4:	d111      	bne.n	8007eea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fa28 	bl	8008326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e00f      	b.n	8007f0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	bf0c      	ite	eq
 8007efa:	2301      	moveq	r3, #1
 8007efc:	2300      	movne	r3, #0
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d0a6      	beq.n	8007e56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b0a3      	sub	sp, #140	; 0x8c
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	88fa      	ldrh	r2, [r7, #6]
 8007f34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f46:	d10e      	bne.n	8007f66 <UART_Start_Receive_IT+0x52>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d105      	bne.n	8007f5c <UART_Start_Receive_IT+0x48>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f5a:	e02d      	b.n	8007fb8 <UART_Start_Receive_IT+0xa4>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	22ff      	movs	r2, #255	; 0xff
 8007f60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f64:	e028      	b.n	8007fb8 <UART_Start_Receive_IT+0xa4>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10d      	bne.n	8007f8a <UART_Start_Receive_IT+0x76>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <UART_Start_Receive_IT+0x6c>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	22ff      	movs	r2, #255	; 0xff
 8007f7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f7e:	e01b      	b.n	8007fb8 <UART_Start_Receive_IT+0xa4>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	227f      	movs	r2, #127	; 0x7f
 8007f84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f88:	e016      	b.n	8007fb8 <UART_Start_Receive_IT+0xa4>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f92:	d10d      	bne.n	8007fb0 <UART_Start_Receive_IT+0x9c>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d104      	bne.n	8007fa6 <UART_Start_Receive_IT+0x92>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	227f      	movs	r2, #127	; 0x7f
 8007fa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fa4:	e008      	b.n	8007fb8 <UART_Start_Receive_IT+0xa4>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	223f      	movs	r2, #63	; 0x3f
 8007faa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fae:	e003      	b.n	8007fb8 <UART_Start_Receive_IT+0xa4>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2222      	movs	r2, #34	; 0x22
 8007fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3308      	adds	r3, #8
 8007fce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007fec:	673a      	str	r2, [r7, #112]	; 0x70
 8007fee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ff2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e3      	bne.n	8007fc8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008008:	d14f      	bne.n	80080aa <UART_Start_Receive_IT+0x196>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008010:	88fa      	ldrh	r2, [r7, #6]
 8008012:	429a      	cmp	r2, r3
 8008014:	d349      	bcc.n	80080aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800801e:	d107      	bne.n	8008030 <UART_Start_Receive_IT+0x11c>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d103      	bne.n	8008030 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4a47      	ldr	r2, [pc, #284]	; (8008148 <UART_Start_Receive_IT+0x234>)
 800802c:	675a      	str	r2, [r3, #116]	; 0x74
 800802e:	e002      	b.n	8008036 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4a46      	ldr	r2, [pc, #280]	; (800814c <UART_Start_Receive_IT+0x238>)
 8008034:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01a      	beq.n	8008074 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800804c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800804e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008062:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008066:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800806e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e4      	bne.n	800803e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3308      	adds	r3, #8
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800808a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008094:	64ba      	str	r2, [r7, #72]	; 0x48
 8008096:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800809a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e5      	bne.n	8008074 <UART_Start_Receive_IT+0x160>
 80080a8:	e046      	b.n	8008138 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b2:	d107      	bne.n	80080c4 <UART_Start_Receive_IT+0x1b0>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4a24      	ldr	r2, [pc, #144]	; (8008150 <UART_Start_Receive_IT+0x23c>)
 80080c0:	675a      	str	r2, [r3, #116]	; 0x74
 80080c2:	e002      	b.n	80080ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a23      	ldr	r2, [pc, #140]	; (8008154 <UART_Start_Receive_IT+0x240>)
 80080c8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d019      	beq.n	8008106 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80080e6:	677b      	str	r3, [r7, #116]	; 0x74
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
 80080f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e6      	bne.n	80080d2 <UART_Start_Receive_IT+0x1be>
 8008104:	e018      	b.n	8008138 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	613b      	str	r3, [r7, #16]
   return(result);
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f043 0320 	orr.w	r3, r3, #32
 800811a:	67bb      	str	r3, [r7, #120]	; 0x78
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008124:	623b      	str	r3, [r7, #32]
 8008126:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	69f9      	ldr	r1, [r7, #28]
 800812a:	6a3a      	ldr	r2, [r7, #32]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	61bb      	str	r3, [r7, #24]
   return(result);
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	378c      	adds	r7, #140	; 0x8c
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	08009175 	.word	0x08009175
 800814c:	08008e15 	.word	0x08008e15
 8008150:	08008c5d 	.word	0x08008c5d
 8008154:	08008aa5 	.word	0x08008aa5

08008158 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b096      	sub	sp, #88	; 0x58
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4613      	mov	r3, r2
 8008164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	88fa      	ldrh	r2, [r7, #6]
 8008170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2222      	movs	r2, #34	; 0x22
 8008180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800818a:	2b00      	cmp	r3, #0
 800818c:	d02d      	beq.n	80081ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008194:	4a40      	ldr	r2, [pc, #256]	; (8008298 <UART_Start_Receive_DMA+0x140>)
 8008196:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800819e:	4a3f      	ldr	r2, [pc, #252]	; (800829c <UART_Start_Receive_DMA+0x144>)
 80081a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a8:	4a3d      	ldr	r2, [pc, #244]	; (80082a0 <UART_Start_Receive_DMA+0x148>)
 80081aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b2:	2200      	movs	r2, #0
 80081b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3324      	adds	r3, #36	; 0x24
 80081c2:	4619      	mov	r1, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c8:	461a      	mov	r2, r3
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	f7fb fcaa 	bl	8003b24 <HAL_DMA_Start_IT>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2210      	movs	r2, #16
 80081da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e051      	b.n	800828e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d018      	beq.n	8008224 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008206:	657b      	str	r3, [r7, #84]	; 0x54
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008210:	64bb      	str	r3, [r7, #72]	; 0x48
 8008212:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800821e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e6      	bne.n	80081f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3308      	adds	r3, #8
 800822a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	f043 0301 	orr.w	r3, r3, #1
 800823a:	653b      	str	r3, [r7, #80]	; 0x50
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3308      	adds	r3, #8
 8008242:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008244:	637a      	str	r2, [r7, #52]	; 0x34
 8008246:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800824a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e5      	bne.n	8008224 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3308      	adds	r3, #8
 800825e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	613b      	str	r3, [r7, #16]
   return(result);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3308      	adds	r3, #8
 8008276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008278:	623a      	str	r2, [r7, #32]
 800827a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	69f9      	ldr	r1, [r7, #28]
 800827e:	6a3a      	ldr	r2, [r7, #32]
 8008280:	e841 2300 	strex	r3, r2, [r1]
 8008284:	61bb      	str	r3, [r7, #24]
   return(result);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e5      	bne.n	8008258 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3758      	adds	r7, #88	; 0x58
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	080084a9 	.word	0x080084a9
 800829c:	080085d5 	.word	0x080085d5
 80082a0:	08008613 	.word	0x08008613

080082a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b08f      	sub	sp, #60	; 0x3c
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80082c0:	637b      	str	r3, [r7, #52]	; 0x34
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e6      	bne.n	80082ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80082f4:	633b      	str	r3, [r7, #48]	; 0x30
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3308      	adds	r3, #8
 80082fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fe:	61ba      	str	r2, [r7, #24]
 8008300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6979      	ldr	r1, [r7, #20]
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	613b      	str	r3, [r7, #16]
   return(result);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e5      	bne.n	80082de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800831a:	bf00      	nop
 800831c:	373c      	adds	r7, #60	; 0x3c
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008326:	b480      	push	{r7}
 8008328:	b095      	sub	sp, #84	; 0x54
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834c:	643b      	str	r3, [r7, #64]	; 0x40
 800834e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e6      	bne.n	800832e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3308      	adds	r3, #8
 8008366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	e853 3f00 	ldrex	r3, [r3]
 800836e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008376:	f023 0301 	bic.w	r3, r3, #1
 800837a:	64bb      	str	r3, [r7, #72]	; 0x48
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800838a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e3      	bne.n	8008360 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d118      	bne.n	80083d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f023 0310 	bic.w	r3, r3, #16
 80083b4:	647b      	str	r3, [r7, #68]	; 0x44
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083be:	61bb      	str	r3, [r7, #24]
 80083c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6979      	ldr	r1, [r7, #20]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	613b      	str	r3, [r7, #16]
   return(result);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e6      	bne.n	80083a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80083e6:	bf00      	nop
 80083e8:	3754      	adds	r7, #84	; 0x54
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b090      	sub	sp, #64	; 0x40
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d137      	bne.n	800847e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800840e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008410:	2200      	movs	r2, #0
 8008412:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	623b      	str	r3, [r7, #32]
   return(result);
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800842c:	63bb      	str	r3, [r7, #56]	; 0x38
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008436:	633a      	str	r2, [r7, #48]	; 0x30
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800843c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e5      	bne.n	8008416 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800844a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	e853 3f00 	ldrex	r3, [r3]
 8008456:	60fb      	str	r3, [r7, #12]
   return(result);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
 8008460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	69b9      	ldr	r1, [r7, #24]
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	617b      	str	r3, [r7, #20]
   return(result);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e6      	bne.n	800844a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800847c:	e002      	b.n	8008484 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800847e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008480:	f006 fca8 	bl	800edd4 <HAL_UART_TxCpltCallback>
}
 8008484:	bf00      	nop
 8008486:	3740      	adds	r7, #64	; 0x40
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff f882 	bl	80075a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b09c      	sub	sp, #112	; 0x70
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d171      	bne.n	80085a8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80084c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80084e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80084ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e6      	bne.n	80084cc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	f023 0301 	bic.w	r3, r3, #1
 8008514:	667b      	str	r3, [r7, #100]	; 0x64
 8008516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800851e:	647a      	str	r2, [r7, #68]	; 0x44
 8008520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e5      	bne.n	80084fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3308      	adds	r3, #8
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	623b      	str	r3, [r7, #32]
   return(result);
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008548:	663b      	str	r3, [r7, #96]	; 0x60
 800854a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008552:	633a      	str	r2, [r7, #48]	; 0x30
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e5      	bne.n	8008532 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008572:	2b01      	cmp	r3, #1
 8008574:	d118      	bne.n	80085a8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	60fb      	str	r3, [r7, #12]
   return(result);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0310 	bic.w	r3, r3, #16
 800858a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800858c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	69b9      	ldr	r1, [r7, #24]
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	617b      	str	r3, [r7, #20]
   return(result);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e6      	bne.n	8008576 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085aa:	2200      	movs	r2, #0
 80085ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d107      	bne.n	80085c6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085bc:	4619      	mov	r1, r3
 80085be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80085c0:	f006 fd0a 	bl	800efd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085c4:	e002      	b.n	80085cc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80085c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80085c8:	f006 fc42 	bl	800ee50 <HAL_UART_RxCpltCallback>
}
 80085cc:	bf00      	nop
 80085ce:	3770      	adds	r7, #112	; 0x70
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2201      	movs	r2, #1
 80085e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d109      	bne.n	8008604 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085f6:	085b      	lsrs	r3, r3, #1
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4619      	mov	r1, r3
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f006 fceb 	bl	800efd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008602:	e002      	b.n	800860a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7fe ffd7 	bl	80075b8 <HAL_UART_RxHalfCpltCallback>
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008626:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800862e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d109      	bne.n	8008652 <UART_DMAError+0x40>
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	2b21      	cmp	r3, #33	; 0x21
 8008642:	d106      	bne.n	8008652 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2200      	movs	r2, #0
 8008648:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800864c:	6978      	ldr	r0, [r7, #20]
 800864e:	f7ff fe29 	bl	80082a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b40      	cmp	r3, #64	; 0x40
 800865e:	d109      	bne.n	8008674 <UART_DMAError+0x62>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b22      	cmp	r3, #34	; 0x22
 8008664:	d106      	bne.n	8008674 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2200      	movs	r2, #0
 800866a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800866e:	6978      	ldr	r0, [r7, #20]
 8008670:	f7ff fe59 	bl	8008326 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867a:	f043 0210 	orr.w	r2, r3, #16
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008684:	6978      	ldr	r0, [r7, #20]
 8008686:	f006 fc4d 	bl	800ef24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800868a:	bf00      	nop
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f006 fc37 	bl	800ef24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	220f      	movs	r2, #15
 80086da:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0208 	orr.w	r2, r2, #8
 80086ea:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f7fe ff66 	bl	80075cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008700:	bf00      	nop
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b08f      	sub	sp, #60	; 0x3c
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008716:	2b21      	cmp	r3, #33	; 0x21
 8008718:	d14c      	bne.n	80087b4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008720:	b29b      	uxth	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d132      	bne.n	800878c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	61fb      	str	r3, [r7, #28]
   return(result);
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800873a:	637b      	str	r3, [r7, #52]	; 0x34
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008746:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800874a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e6      	bne.n	8008726 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	60bb      	str	r3, [r7, #8]
   return(result);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876c:	633b      	str	r3, [r7, #48]	; 0x30
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	61bb      	str	r3, [r7, #24]
 8008778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6979      	ldr	r1, [r7, #20]
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	613b      	str	r3, [r7, #16]
   return(result);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e6      	bne.n	8008758 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800878a:	e013      	b.n	80087b4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80087b4:	bf00      	nop
 80087b6:	373c      	adds	r7, #60	; 0x3c
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b091      	sub	sp, #68	; 0x44
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ce:	2b21      	cmp	r3, #33	; 0x21
 80087d0:	d151      	bne.n	8008876 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d132      	bne.n	8008844 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	623b      	str	r3, [r7, #32]
   return(result);
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	633b      	str	r3, [r7, #48]	; 0x30
 80087fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e6      	bne.n	80087de <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	60fb      	str	r3, [r7, #12]
   return(result);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	61fb      	str	r3, [r7, #28]
 8008830:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	69b9      	ldr	r1, [r7, #24]
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	617b      	str	r3, [r7, #20]
   return(result);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e6      	bne.n	8008810 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008842:	e018      	b.n	8008876 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800884a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008858:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885e:	1c9a      	adds	r2, r3, #2
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008876:	bf00      	nop
 8008878:	3744      	adds	r7, #68	; 0x44
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008882:	b480      	push	{r7}
 8008884:	b091      	sub	sp, #68	; 0x44
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008890:	2b21      	cmp	r3, #33	; 0x21
 8008892:	d160      	bne.n	8008956 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800889a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800889c:	e057      	b.n	800894e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d133      	bne.n	8008912 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3308      	adds	r3, #8
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	e853 3f00 	ldrex	r3, [r3]
 80088b8:	623b      	str	r3, [r7, #32]
   return(result);
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80088c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ca:	633a      	str	r2, [r7, #48]	; 0x30
 80088cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e5      	bne.n	80088aa <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	e853 3f00 	ldrex	r3, [r3]
 80088ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	61fb      	str	r3, [r7, #28]
 80088fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	69b9      	ldr	r1, [r7, #24]
 8008902:	69fa      	ldr	r2, [r7, #28]
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	617b      	str	r3, [r7, #20]
   return(result);
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e6      	bne.n	80088de <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008910:	e021      	b.n	8008956 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891c:	2b00      	cmp	r3, #0
 800891e:	d013      	beq.n	8008948 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008948:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800894a:	3b01      	subs	r3, #1
 800894c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800894e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1a4      	bne.n	800889e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008954:	e7ff      	b.n	8008956 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008956:	bf00      	nop
 8008958:	3744      	adds	r7, #68	; 0x44
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008962:	b480      	push	{r7}
 8008964:	b091      	sub	sp, #68	; 0x44
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008970:	2b21      	cmp	r3, #33	; 0x21
 8008972:	d165      	bne.n	8008a40 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800897a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800897c:	e05c      	b.n	8008a38 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d133      	bne.n	80089f2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	61fb      	str	r3, [r7, #28]
   return(result);
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089a0:	637b      	str	r3, [r7, #52]	; 0x34
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e5      	bne.n	800898a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d2:	633b      	str	r3, [r7, #48]	; 0x30
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	61bb      	str	r3, [r7, #24]
 80089de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80089f0:	e026      	b.n	8008a40 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d018      	beq.n	8008a32 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a04:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a14:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a1a:	1c9a      	adds	r2, r3, #2
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008a32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008a34:	3b01      	subs	r3, #1
 8008a36:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008a38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d19f      	bne.n	800897e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008a3e:	e7ff      	b.n	8008a40 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008a40:	bf00      	nop
 8008a42:	3744      	adds	r7, #68	; 0x44
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a68:	61fb      	str	r3, [r7, #28]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	61bb      	str	r3, [r7, #24]
 8008a74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	6979      	ldr	r1, [r7, #20]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e6      	bne.n	8008a54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f006 f99d 	bl	800edd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a9a:	bf00      	nop
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b09c      	sub	sp, #112	; 0x70
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ab2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008abc:	2b22      	cmp	r3, #34	; 0x22
 8008abe:	f040 80be 	bne.w	8008c3e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008acc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008ad0:	b2d9      	uxtb	r1, r3
 8008ad2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008adc:	400a      	ands	r2, r1
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae6:	1c5a      	adds	r2, r3, #1
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	3b01      	subs	r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f040 80a1 	bne.w	8008c4e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e6      	bne.n	8008b0c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b50:	f023 0301 	bic.w	r3, r3, #1
 8008b54:	667b      	str	r3, [r7, #100]	; 0x64
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b5e:	647a      	str	r2, [r7, #68]	; 0x44
 8008b60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e5      	bne.n	8008b3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a33      	ldr	r2, [pc, #204]	; (8008c58 <UART_RxISR_8BIT+0x1b4>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d01f      	beq.n	8008bd0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d018      	beq.n	8008bd0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	623b      	str	r3, [r7, #32]
   return(result);
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8008bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e6      	bne.n	8008b9e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d12e      	bne.n	8008c36 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	e853 3f00 	ldrex	r3, [r3]
 8008bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0310 	bic.w	r3, r3, #16
 8008bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bfc:	61fb      	str	r3, [r7, #28]
 8008bfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	69b9      	ldr	r1, [r7, #24]
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	e841 2300 	strex	r3, r2, [r1]
 8008c08:	617b      	str	r3, [r7, #20]
   return(result);
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e6      	bne.n	8008bde <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f003 0310 	and.w	r3, r3, #16
 8008c1a:	2b10      	cmp	r3, #16
 8008c1c:	d103      	bne.n	8008c26 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2210      	movs	r2, #16
 8008c24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f006 f9d2 	bl	800efd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c34:	e00b      	b.n	8008c4e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f006 f90a 	bl	800ee50 <HAL_UART_RxCpltCallback>
}
 8008c3c:	e007      	b.n	8008c4e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	699a      	ldr	r2, [r3, #24]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0208 	orr.w	r2, r2, #8
 8008c4c:	619a      	str	r2, [r3, #24]
}
 8008c4e:	bf00      	nop
 8008c50:	3770      	adds	r7, #112	; 0x70
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	40008000 	.word	0x40008000

08008c5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b09c      	sub	sp, #112	; 0x70
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c6a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c74:	2b22      	cmp	r3, #34	; 0x22
 8008c76:	f040 80be 	bne.w	8008df6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c88:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008c8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008c92:	4013      	ands	r3, r2
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9e:	1c9a      	adds	r2, r3, #2
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	3b01      	subs	r3, #1
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f040 80a1 	bne.w	8008e06 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cd8:	667b      	str	r3, [r7, #100]	; 0x64
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ce4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e6      	bne.n	8008cc4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	f023 0301 	bic.w	r3, r3, #1
 8008d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3308      	adds	r3, #8
 8008d14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d16:	643a      	str	r2, [r7, #64]	; 0x40
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e5      	bne.n	8008cf6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a33      	ldr	r2, [pc, #204]	; (8008e10 <UART_RxISR_16BIT+0x1b4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d01f      	beq.n	8008d88 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d018      	beq.n	8008d88 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d76:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e6      	bne.n	8008d56 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d12e      	bne.n	8008dee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f023 0310 	bic.w	r3, r3, #16
 8008daa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008db4:	61bb      	str	r3, [r7, #24]
 8008db6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db8:	6979      	ldr	r1, [r7, #20]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	e841 2300 	strex	r3, r2, [r1]
 8008dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e6      	bne.n	8008d96 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f003 0310 	and.w	r3, r3, #16
 8008dd2:	2b10      	cmp	r3, #16
 8008dd4:	d103      	bne.n	8008dde <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2210      	movs	r2, #16
 8008ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f006 f8f6 	bl	800efd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dec:	e00b      	b.n	8008e06 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f006 f82e 	bl	800ee50 <HAL_UART_RxCpltCallback>
}
 8008df4:	e007      	b.n	8008e06 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0208 	orr.w	r2, r2, #8
 8008e04:	619a      	str	r2, [r3, #24]
}
 8008e06:	bf00      	nop
 8008e08:	3770      	adds	r7, #112	; 0x70
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	40008000 	.word	0x40008000

08008e14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b0ac      	sub	sp, #176	; 0xb0
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4a:	2b22      	cmp	r3, #34	; 0x22
 8008e4c:	f040 8182 	bne.w	8009154 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e56:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e5a:	e125      	b.n	80090a8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008e6a:	b2d9      	uxtb	r1, r3
 8008e6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e76:	400a      	ands	r2, r1
 8008e78:	b2d2      	uxtb	r2, r2
 8008e7a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d053      	beq.n	8008f56 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d011      	beq.n	8008ede <UART_RxISR_8BIT_FIFOEN+0xca>
 8008eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed4:	f043 0201 	orr.w	r2, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d011      	beq.n	8008f0e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00b      	beq.n	8008f0e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2202      	movs	r2, #2
 8008efc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f04:	f043 0204 	orr.w	r2, r3, #4
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f12:	f003 0304 	and.w	r3, r3, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d011      	beq.n	8008f3e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00b      	beq.n	8008f3e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f34:	f043 0202 	orr.w	r2, r3, #2
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d006      	beq.n	8008f56 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f005 ffeb 	bl	800ef24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f040 80a2 	bne.w	80090a8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f88:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008f8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e4      	bne.n	8008f64 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fb0:	f023 0301 	bic.w	r3, r3, #1
 8008fb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008fc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8008fc4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008fc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e1      	bne.n	8008f9a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a5f      	ldr	r2, [pc, #380]	; (800916c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d021      	beq.n	8009038 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d01a      	beq.n	8009038 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009012:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009024:	657b      	str	r3, [r7, #84]	; 0x54
 8009026:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800902a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e4      	bne.n	8009002 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800903c:	2b01      	cmp	r3, #1
 800903e:	d130      	bne.n	80090a2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904e:	e853 3f00 	ldrex	r3, [r3]
 8009052:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	f023 0310 	bic.w	r3, r3, #16
 800905a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009068:	643b      	str	r3, [r7, #64]	; 0x40
 800906a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800906e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e4      	bne.n	8009046 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f003 0310 	and.w	r3, r3, #16
 8009086:	2b10      	cmp	r3, #16
 8009088:	d103      	bne.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2210      	movs	r2, #16
 8009090:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f005 ff9c 	bl	800efd8 <HAL_UARTEx_RxEventCallback>
 80090a0:	e002      	b.n	80090a8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f005 fed4 	bl	800ee50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090a8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80090b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f47f aecf 	bne.w	8008e5c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090c4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d049      	beq.n	8009164 <UART_RxISR_8BIT_FIFOEN+0x350>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090d6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80090da:	429a      	cmp	r2, r3
 80090dc:	d242      	bcs.n	8009164 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e3      	bne.n	80090de <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a15      	ldr	r2, [pc, #84]	; (8009170 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800911a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	60bb      	str	r3, [r7, #8]
   return(result);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f043 0320 	orr.w	r3, r3, #32
 8009130:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	461a      	mov	r2, r3
 800913a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800913e:	61bb      	str	r3, [r7, #24]
 8009140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6979      	ldr	r1, [r7, #20]
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	613b      	str	r3, [r7, #16]
   return(result);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e4      	bne.n	800911c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009152:	e007      	b.n	8009164 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0208 	orr.w	r2, r2, #8
 8009162:	619a      	str	r2, [r3, #24]
}
 8009164:	bf00      	nop
 8009166:	37b0      	adds	r7, #176	; 0xb0
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	40008000 	.word	0x40008000
 8009170:	08008aa5 	.word	0x08008aa5

08009174 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b0ae      	sub	sp, #184	; 0xb8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009182:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091aa:	2b22      	cmp	r3, #34	; 0x22
 80091ac:	f040 8186 	bne.w	80094bc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ba:	e129      	b.n	8009410 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80091ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80091d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80091d6:	4013      	ands	r3, r2
 80091d8:	b29a      	uxth	r2, r3
 80091da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e4:	1c9a      	adds	r2, r3, #2
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	2b00      	cmp	r3, #0
 8009210:	d053      	beq.n	80092ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009212:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d011      	beq.n	8009242 <UART_RxISR_16BIT_FIFOEN+0xce>
 800921e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00b      	beq.n	8009242 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2201      	movs	r2, #1
 8009230:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009238:	f043 0201 	orr.w	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d011      	beq.n	8009272 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800924e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00b      	beq.n	8009272 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2202      	movs	r2, #2
 8009260:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009268:	f043 0204 	orr.w	r2, r3, #4
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009276:	f003 0304 	and.w	r3, r3, #4
 800927a:	2b00      	cmp	r3, #0
 800927c:	d011      	beq.n	80092a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800927e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2204      	movs	r2, #4
 8009290:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009298:	f043 0202 	orr.w	r2, r3, #2
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d006      	beq.n	80092ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f005 fe39 	bl	800ef24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f040 80a4 	bne.w	8009410 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092ee:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e2      	bne.n	80092c8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3308      	adds	r3, #8
 8009326:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800932a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800932c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e1      	bne.n	8009302 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a5f      	ldr	r2, [pc, #380]	; (80094d4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d021      	beq.n	80093a0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d01a      	beq.n	80093a0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009372:	e853 3f00 	ldrex	r3, [r3]
 8009376:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800937a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800937e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800938c:	65bb      	str	r3, [r7, #88]	; 0x58
 800938e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800939a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e4      	bne.n	800936a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d130      	bne.n	800940a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093be:	f023 0310 	bic.w	r3, r3, #16
 80093c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093d0:	647b      	str	r3, [r7, #68]	; 0x44
 80093d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e4      	bne.n	80093ae <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b10      	cmp	r3, #16
 80093f0:	d103      	bne.n	80093fa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2210      	movs	r2, #16
 80093f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f005 fde8 	bl	800efd8 <HAL_UARTEx_RxEventCallback>
 8009408:	e002      	b.n	8009410 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f005 fd20 	bl	800ee50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009410:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009414:	2b00      	cmp	r3, #0
 8009416:	d006      	beq.n	8009426 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009418:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	f47f aecb 	bne.w	80091bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800942c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009430:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009434:	2b00      	cmp	r3, #0
 8009436:	d049      	beq.n	80094cc <UART_RxISR_16BIT_FIFOEN+0x358>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800943e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009442:	429a      	cmp	r2, r3
 8009444:	d242      	bcs.n	80094cc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	623b      	str	r3, [r7, #32]
   return(result);
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800945c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3308      	adds	r3, #8
 8009466:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800946a:	633a      	str	r2, [r7, #48]	; 0x30
 800946c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e3      	bne.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a15      	ldr	r2, [pc, #84]	; (80094d8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009482:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	60fb      	str	r3, [r7, #12]
   return(result);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f043 0320 	orr.w	r3, r3, #32
 8009498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	69b9      	ldr	r1, [r7, #24]
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	617b      	str	r3, [r7, #20]
   return(result);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e4      	bne.n	8009484 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094ba:	e007      	b.n	80094cc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699a      	ldr	r2, [r3, #24]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0208 	orr.w	r2, r2, #8
 80094ca:	619a      	str	r2, [r3, #24]
}
 80094cc:	bf00      	nop
 80094ce:	37b8      	adds	r7, #184	; 0xb8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	40008000 	.word	0x40008000
 80094d8:	08008c5d 	.word	0x08008c5d

080094dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_UARTEx_DisableFifoMode+0x16>
 800952a:	2302      	movs	r3, #2
 800952c:	e027      	b.n	800957e <HAL_UARTEx_DisableFifoMode+0x66>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2224      	movs	r2, #36	; 0x24
 800953a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0201 	bic.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800955c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800959e:	2302      	movs	r3, #2
 80095a0:	e02d      	b.n	80095fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2224      	movs	r2, #36	; 0x24
 80095ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f8a4 	bl	800972c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800961a:	2302      	movs	r3, #2
 800961c:	e02d      	b.n	800967a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2224      	movs	r2, #36	; 0x24
 800962a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0201 	bic.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f866 	bl	800972c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b08c      	sub	sp, #48	; 0x30
 8009686:	af00      	add	r7, sp, #0
 8009688:	60f8      	str	r0, [r7, #12]
 800968a:	60b9      	str	r1, [r7, #8]
 800968c:	4613      	mov	r3, r2
 800968e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009696:	2b20      	cmp	r3, #32
 8009698:	d142      	bne.n	8009720 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80096a0:	88fb      	ldrh	r3, [r7, #6]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e03b      	b.n	8009722 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80096b6:	88fb      	ldrh	r3, [r7, #6]
 80096b8:	461a      	mov	r2, r3
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f7fe fd4b 	bl	8008158 <UART_Start_Receive_DMA>
 80096c2:	4603      	mov	r3, r0
 80096c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80096c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d124      	bne.n	800971a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d11d      	bne.n	8009714 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2210      	movs	r2, #16
 80096de:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	617b      	str	r3, [r7, #20]
   return(result);
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f043 0310 	orr.w	r3, r3, #16
 80096f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009700:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6a39      	ldr	r1, [r7, #32]
 8009704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	61fb      	str	r3, [r7, #28]
   return(result);
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e6      	bne.n	80096e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009712:	e002      	b.n	800971a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800971a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800971e:	e000      	b.n	8009722 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009720:	2302      	movs	r3, #2
  }
}
 8009722:	4618      	mov	r0, r3
 8009724:	3730      	adds	r7, #48	; 0x30
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800974c:	e031      	b.n	80097b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800974e:	2308      	movs	r3, #8
 8009750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009752:	2308      	movs	r3, #8
 8009754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	0e5b      	lsrs	r3, r3, #25
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	0f5b      	lsrs	r3, r3, #29
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	7b3a      	ldrb	r2, [r7, #12]
 800977a:	4911      	ldr	r1, [pc, #68]	; (80097c0 <UARTEx_SetNbDataToProcess+0x94>)
 800977c:	5c8a      	ldrb	r2, [r1, r2]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009782:	7b3a      	ldrb	r2, [r7, #12]
 8009784:	490f      	ldr	r1, [pc, #60]	; (80097c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009788:	fb93 f3f2 	sdiv	r3, r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009794:	7bfb      	ldrb	r3, [r7, #15]
 8009796:	7b7a      	ldrb	r2, [r7, #13]
 8009798:	4909      	ldr	r1, [pc, #36]	; (80097c0 <UARTEx_SetNbDataToProcess+0x94>)
 800979a:	5c8a      	ldrb	r2, [r1, r2]
 800979c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097a0:	7b7a      	ldrb	r2, [r7, #13]
 80097a2:	4908      	ldr	r1, [pc, #32]	; (80097c4 <UARTEx_SetNbDataToProcess+0x98>)
 80097a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097b2:	bf00      	nop
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	0800f3a4 	.word	0x0800f3a4
 80097c4:	0800f3ac 	.word	0x0800f3ac

080097c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80097d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	43db      	mvns	r3, r3
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	4013      	ands	r3, r2
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80097fe:	b084      	sub	sp, #16
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	f107 0014 	add.w	r0, r7, #20
 800980c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	b004      	add	sp, #16
 800983e:	4770      	bx	lr

08009840 <__NVIC_SetPriority>:
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	4603      	mov	r3, r0
 8009848:	6039      	str	r1, [r7, #0]
 800984a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800984c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009850:	2b00      	cmp	r3, #0
 8009852:	db0a      	blt.n	800986a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	b2da      	uxtb	r2, r3
 8009858:	490c      	ldr	r1, [pc, #48]	; (800988c <__NVIC_SetPriority+0x4c>)
 800985a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800985e:	0112      	lsls	r2, r2, #4
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	440b      	add	r3, r1
 8009864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009868:	e00a      	b.n	8009880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	b2da      	uxtb	r2, r3
 800986e:	4908      	ldr	r1, [pc, #32]	; (8009890 <__NVIC_SetPriority+0x50>)
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	3b04      	subs	r3, #4
 8009878:	0112      	lsls	r2, r2, #4
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	440b      	add	r3, r1
 800987e:	761a      	strb	r2, [r3, #24]
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	e000e100 	.word	0xe000e100
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <SysTick_Handler+0x1c>)
 800989a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800989c:	f002 fa42 	bl	800bd24 <xTaskGetSchedulerState>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d001      	beq.n	80098aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098a6:	f003 fc17 	bl	800d0d8 <xPortSysTickHandler>
  }
}
 80098aa:	bf00      	nop
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	e000e010 	.word	0xe000e010

080098b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098b8:	2100      	movs	r1, #0
 80098ba:	f06f 0004 	mvn.w	r0, #4
 80098be:	f7ff ffbf 	bl	8009840 <__NVIC_SetPriority>
#endif
}
 80098c2:	bf00      	nop
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098ce:	f3ef 8305 	mrs	r3, IPSR
 80098d2:	603b      	str	r3, [r7, #0]
  return(result);
 80098d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098da:	f06f 0305 	mvn.w	r3, #5
 80098de:	607b      	str	r3, [r7, #4]
 80098e0:	e00c      	b.n	80098fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80098e2:	4b0a      	ldr	r3, [pc, #40]	; (800990c <osKernelInitialize+0x44>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80098ea:	4b08      	ldr	r3, [pc, #32]	; (800990c <osKernelInitialize+0x44>)
 80098ec:	2201      	movs	r2, #1
 80098ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	607b      	str	r3, [r7, #4]
 80098f4:	e002      	b.n	80098fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295
 80098fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098fc:	687b      	ldr	r3, [r7, #4]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20000800 	.word	0x20000800

08009910 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009916:	f3ef 8305 	mrs	r3, IPSR
 800991a:	603b      	str	r3, [r7, #0]
  return(result);
 800991c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009922:	f06f 0305 	mvn.w	r3, #5
 8009926:	607b      	str	r3, [r7, #4]
 8009928:	e010      	b.n	800994c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800992a:	4b0b      	ldr	r3, [pc, #44]	; (8009958 <osKernelStart+0x48>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d109      	bne.n	8009946 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009932:	f7ff ffbf 	bl	80098b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009936:	4b08      	ldr	r3, [pc, #32]	; (8009958 <osKernelStart+0x48>)
 8009938:	2202      	movs	r2, #2
 800993a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800993c:	f001 fd98 	bl	800b470 <vTaskStartScheduler>
      stat = osOK;
 8009940:	2300      	movs	r3, #0
 8009942:	607b      	str	r3, [r7, #4]
 8009944:	e002      	b.n	800994c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009946:	f04f 33ff 	mov.w	r3, #4294967295
 800994a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800994c:	687b      	ldr	r3, [r7, #4]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20000800 	.word	0x20000800

0800995c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800995c:	b580      	push	{r7, lr}
 800995e:	b08e      	sub	sp, #56	; 0x38
 8009960:	af04      	add	r7, sp, #16
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009968:	2300      	movs	r3, #0
 800996a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800996c:	f3ef 8305 	mrs	r3, IPSR
 8009970:	617b      	str	r3, [r7, #20]
  return(result);
 8009972:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009974:	2b00      	cmp	r3, #0
 8009976:	d17e      	bne.n	8009a76 <osThreadNew+0x11a>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d07b      	beq.n	8009a76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800997e:	2380      	movs	r3, #128	; 0x80
 8009980:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009982:	2318      	movs	r3, #24
 8009984:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800998a:	f04f 33ff 	mov.w	r3, #4294967295
 800998e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d045      	beq.n	8009a22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <osThreadNew+0x48>
        name = attr->name;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d002      	beq.n	80099b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d008      	beq.n	80099ca <osThreadNew+0x6e>
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	2b38      	cmp	r3, #56	; 0x38
 80099bc:	d805      	bhi.n	80099ca <osThreadNew+0x6e>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <osThreadNew+0x72>
        return (NULL);
 80099ca:	2300      	movs	r3, #0
 80099cc:	e054      	b.n	8009a78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	089b      	lsrs	r3, r3, #2
 80099dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00e      	beq.n	8009a04 <osThreadNew+0xa8>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	2b5b      	cmp	r3, #91	; 0x5b
 80099ec:	d90a      	bls.n	8009a04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d006      	beq.n	8009a04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <osThreadNew+0xa8>
        mem = 1;
 80099fe:	2301      	movs	r3, #1
 8009a00:	61bb      	str	r3, [r7, #24]
 8009a02:	e010      	b.n	8009a26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10c      	bne.n	8009a26 <osThreadNew+0xca>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d108      	bne.n	8009a26 <osThreadNew+0xca>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <osThreadNew+0xca>
          mem = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	61bb      	str	r3, [r7, #24]
 8009a20:	e001      	b.n	8009a26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d110      	bne.n	8009a4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a34:	9202      	str	r2, [sp, #8]
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	6a3a      	ldr	r2, [r7, #32]
 8009a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f001 fb3e 	bl	800b0c4 <xTaskCreateStatic>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	613b      	str	r3, [r7, #16]
 8009a4c:	e013      	b.n	8009a76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d110      	bne.n	8009a76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	f107 0310 	add.w	r3, r7, #16
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f001 fb89 	bl	800b17e <xTaskCreate>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d001      	beq.n	8009a76 <osThreadNew+0x11a>
            hTask = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a76:	693b      	ldr	r3, [r7, #16]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3728      	adds	r7, #40	; 0x28
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <osThreadFlagsSet+0x1a>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da03      	bge.n	8009aa2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009a9a:	f06f 0303 	mvn.w	r3, #3
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	e035      	b.n	8009b0e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa8:	f3ef 8305 	mrs	r3, IPSR
 8009aac:	613b      	str	r3, [r7, #16]
  return(result);
 8009aae:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01f      	beq.n	8009af4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009ab8:	f107 0308 	add.w	r3, r7, #8
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6978      	ldr	r0, [r7, #20]
 8009ac6:	f002 fc11 	bl	800c2ec <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009aca:	f107 030c 	add.w	r3, r7, #12
 8009ace:	2200      	movs	r2, #0
 8009ad0:	9200      	str	r2, [sp, #0]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	6978      	ldr	r0, [r7, #20]
 8009ad8:	f002 fc08 	bl	800c2ec <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d015      	beq.n	8009b0e <osThreadFlagsSet+0x8e>
 8009ae2:	4b0d      	ldr	r3, [pc, #52]	; (8009b18 <osThreadFlagsSet+0x98>)
 8009ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	e00c      	b.n	8009b0e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009af4:	2300      	movs	r3, #0
 8009af6:	2201      	movs	r2, #1
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6978      	ldr	r0, [r7, #20]
 8009afc:	f002 fb3e 	bl	800c17c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009b00:	f107 030c 	add.w	r3, r7, #12
 8009b04:	2200      	movs	r2, #0
 8009b06:	2100      	movs	r1, #0
 8009b08:	6978      	ldr	r0, [r7, #20]
 8009b0a:	f002 fb37 	bl	800c17c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08c      	sub	sp, #48	; 0x30
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b28:	f3ef 8305 	mrs	r3, IPSR
 8009b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8009b2e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009b34:	f06f 0305 	mvn.w	r3, #5
 8009b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b3a:	e06b      	b.n	8009c14 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	da03      	bge.n	8009b4a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009b42:	f06f 0303 	mvn.w	r3, #3
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b48:	e064      	b.n	8009c14 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b58:	e001      	b.n	8009b5e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8009b66:	f001 fd95 	bl	800b694 <xTaskGetTickCount>
 8009b6a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009b6c:	f107 0210 	add.w	r2, r7, #16
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b74:	2000      	movs	r0, #0
 8009b76:	f002 faa7 	bl	800c0c8 <xTaskNotifyWait>
 8009b7a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d137      	bne.n	8009bf2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	4013      	ands	r3, r2
 8009b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00c      	beq.n	8009bb6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d032      	beq.n	8009c0e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10f      	bne.n	8009bce <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009bae:	f06f 0302 	mvn.w	r3, #2
 8009bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009bb4:	e02e      	b.n	8009c14 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bba:	4013      	ands	r3, r2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d128      	bne.n	8009c12 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d103      	bne.n	8009bce <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009bc6:	f06f 0302 	mvn.w	r3, #2
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009bcc:	e022      	b.n	8009c14 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009bce:	f001 fd61 	bl	800b694 <xTaskGetTickCount>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d902      	bls.n	8009be8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	627b      	str	r3, [r7, #36]	; 0x24
 8009be6:	e00e      	b.n	8009c06 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf0:	e009      	b.n	8009c06 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009bf8:	f06f 0302 	mvn.w	r3, #2
 8009bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfe:	e002      	b.n	8009c06 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009c00:	f06f 0301 	mvn.w	r3, #1
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1af      	bne.n	8009b6c <osThreadFlagsWait+0x50>
 8009c0c:	e002      	b.n	8009c14 <osThreadFlagsWait+0xf8>
            break;
 8009c0e:	bf00      	nop
 8009c10:	e000      	b.n	8009c14 <osThreadFlagsWait+0xf8>
            break;
 8009c12:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3730      	adds	r7, #48	; 0x30
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c26:	f3ef 8305 	mrs	r3, IPSR
 8009c2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <osDelay+0x1c>
    stat = osErrorISR;
 8009c32:	f06f 0305 	mvn.w	r3, #5
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	e007      	b.n	8009c4a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 fbdf 	bl	800b408 <vTaskDelay>
    }
  }

  return (stat);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f003 f85d 	bl	800cd1c <pvTimerGetTimerID>
 8009c62:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d005      	beq.n	8009c76 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	6852      	ldr	r2, [r2, #4]
 8009c72:	4610      	mov	r0, r2
 8009c74:	4798      	blx	r3
  }
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08c      	sub	sp, #48	; 0x30
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c94:	f3ef 8305 	mrs	r3, IPSR
 8009c98:	613b      	str	r3, [r7, #16]
  return(result);
 8009c9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d163      	bne.n	8009d68 <osTimerNew+0xe8>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d060      	beq.n	8009d68 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009ca6:	2008      	movs	r0, #8
 8009ca8:	f003 faa6 	bl	800d1f8 <pvPortMalloc>
 8009cac:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d059      	beq.n	8009d68 <osTimerNew+0xe8>
      callb->func = func;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d102      	bne.n	8009ccc <osTimerNew+0x4c>
        reload = pdFALSE;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	e001      	b.n	8009cd0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01c      	beq.n	8009d1a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <osTimerNew+0x6e>
          name = attr->name;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d006      	beq.n	8009d04 <osTimerNew+0x84>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	2b2b      	cmp	r3, #43	; 0x2b
 8009cfc:	d902      	bls.n	8009d04 <osTimerNew+0x84>
          mem = 1;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	61bb      	str	r3, [r7, #24]
 8009d02:	e00c      	b.n	8009d1e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d108      	bne.n	8009d1e <osTimerNew+0x9e>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d104      	bne.n	8009d1e <osTimerNew+0x9e>
            mem = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	61bb      	str	r3, [r7, #24]
 8009d18:	e001      	b.n	8009d1e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d10c      	bne.n	8009d3e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <osTimerNew+0xf4>)
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	69fa      	ldr	r2, [r7, #28]
 8009d32:	2101      	movs	r1, #1
 8009d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d36:	f002 fc72 	bl	800c61e <xTimerCreateStatic>
 8009d3a:	6238      	str	r0, [r7, #32]
 8009d3c:	e00b      	b.n	8009d56 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d108      	bne.n	8009d56 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009d44:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <osTimerNew+0xf4>)
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d50:	f002 fc44 	bl	800c5dc <xTimerCreate>
 8009d54:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d105      	bne.n	8009d68 <osTimerNew+0xe8>
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <osTimerNew+0xe8>
        vPortFree (callb);
 8009d62:	6978      	ldr	r0, [r7, #20]
 8009d64:	f003 fb14 	bl	800d390 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009d68:	6a3b      	ldr	r3, [r7, #32]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3728      	adds	r7, #40	; 0x28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	08009c55 	.word	0x08009c55

08009d78 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d86:	f3ef 8305 	mrs	r3, IPSR
 8009d8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <osTimerStart+0x22>
    stat = osErrorISR;
 8009d92:	f06f 0305 	mvn.w	r3, #5
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	e017      	b.n	8009dca <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d103      	bne.n	8009da8 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009da0:	f06f 0303 	mvn.w	r3, #3
 8009da4:	617b      	str	r3, [r7, #20]
 8009da6:	e010      	b.n	8009dca <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009da8:	2300      	movs	r3, #0
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2300      	movs	r3, #0
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	2104      	movs	r1, #4
 8009db2:	6938      	ldr	r0, [r7, #16]
 8009db4:	f002 fcac 	bl	800c710 <xTimerGenericCommand>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d102      	bne.n	8009dc4 <osTimerStart+0x4c>
      stat = osOK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	617b      	str	r3, [r7, #20]
 8009dc2:	e002      	b.n	8009dca <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009dc4:	f06f 0302 	mvn.w	r3, #2
 8009dc8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009dca:	697b      	ldr	r3, [r7, #20]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de0:	f3ef 8305 	mrs	r3, IPSR
 8009de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009de6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d12d      	bne.n	8009e48 <osEventFlagsNew+0x74>
    mem = -1;
 8009dec:	f04f 33ff 	mov.w	r3, #4294967295
 8009df0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d015      	beq.n	8009e24 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d006      	beq.n	8009e0e <osEventFlagsNew+0x3a>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	2b1f      	cmp	r3, #31
 8009e06:	d902      	bls.n	8009e0e <osEventFlagsNew+0x3a>
        mem = 1;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	613b      	str	r3, [r7, #16]
 8009e0c:	e00c      	b.n	8009e28 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d108      	bne.n	8009e28 <osEventFlagsNew+0x54>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <osEventFlagsNew+0x54>
          mem = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	613b      	str	r3, [r7, #16]
 8009e22:	e001      	b.n	8009e28 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d106      	bne.n	8009e3c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 f93e 	bl	800a0b4 <xEventGroupCreateStatic>
 8009e38:	6178      	str	r0, [r7, #20]
 8009e3a:	e005      	b.n	8009e48 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d102      	bne.n	8009e48 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009e42:	f000 f96e 	bl	800a122 <xEventGroupCreate>
 8009e46:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009e48:	697b      	ldr	r3, [r7, #20]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b08a      	sub	sp, #40	; 0x28
 8009e56:	af02      	add	r7, sp, #8
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e62:	f3ef 8305 	mrs	r3, IPSR
 8009e66:	613b      	str	r3, [r7, #16]
  return(result);
 8009e68:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d175      	bne.n	8009f5a <osSemaphoreNew+0x108>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d072      	beq.n	8009f5a <osSemaphoreNew+0x108>
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d86e      	bhi.n	8009f5a <osSemaphoreNew+0x108>
    mem = -1;
 8009e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d015      	beq.n	8009eb4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <osSemaphoreNew+0x4c>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	2b4f      	cmp	r3, #79	; 0x4f
 8009e96:	d902      	bls.n	8009e9e <osSemaphoreNew+0x4c>
        mem = 1;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	61bb      	str	r3, [r7, #24]
 8009e9c:	e00c      	b.n	8009eb8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d108      	bne.n	8009eb8 <osSemaphoreNew+0x66>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d104      	bne.n	8009eb8 <osSemaphoreNew+0x66>
          mem = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61bb      	str	r3, [r7, #24]
 8009eb2:	e001      	b.n	8009eb8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebe:	d04c      	beq.n	8009f5a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d128      	bne.n	8009f18 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d10a      	bne.n	8009ee2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	9200      	str	r2, [sp, #0]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	2001      	movs	r0, #1
 8009eda:	f000 fa59 	bl	800a390 <xQueueGenericCreateStatic>
 8009ede:	61f8      	str	r0, [r7, #28]
 8009ee0:	e005      	b.n	8009eee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	f000 faca 	bl	800a480 <xQueueGenericCreate>
 8009eec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d022      	beq.n	8009f3a <osSemaphoreNew+0xe8>
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01f      	beq.n	8009f3a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009efa:	2300      	movs	r3, #0
 8009efc:	2200      	movs	r2, #0
 8009efe:	2100      	movs	r1, #0
 8009f00:	69f8      	ldr	r0, [r7, #28]
 8009f02:	f000 fb85 	bl	800a610 <xQueueGenericSend>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d016      	beq.n	8009f3a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009f0c:	69f8      	ldr	r0, [r7, #28]
 8009f0e:	f000 ff05 	bl	800ad1c <vQueueDelete>
            hSemaphore = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
 8009f16:	e010      	b.n	8009f3a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d108      	bne.n	8009f30 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	461a      	mov	r2, r3
 8009f24:	68b9      	ldr	r1, [r7, #8]
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 fb07 	bl	800a53a <xQueueCreateCountingSemaphoreStatic>
 8009f2c:	61f8      	str	r0, [r7, #28]
 8009f2e:	e004      	b.n	8009f3a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fb38 	bl	800a5a8 <xQueueCreateCountingSemaphore>
 8009f38:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00c      	beq.n	8009f5a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	617b      	str	r3, [r7, #20]
 8009f4c:	e001      	b.n	8009f52 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009f52:	6979      	ldr	r1, [r7, #20]
 8009f54:	69f8      	ldr	r0, [r7, #28]
 8009f56:	f001 f82d 	bl	800afb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009f5a:	69fb      	ldr	r3, [r7, #28]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3720      	adds	r7, #32
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08a      	sub	sp, #40	; 0x28
 8009f68:	af02      	add	r7, sp, #8
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009f70:	2300      	movs	r3, #0
 8009f72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f74:	f3ef 8305 	mrs	r3, IPSR
 8009f78:	613b      	str	r3, [r7, #16]
  return(result);
 8009f7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d15f      	bne.n	800a040 <osMessageQueueNew+0xdc>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d05c      	beq.n	800a040 <osMessageQueueNew+0xdc>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d059      	beq.n	800a040 <osMessageQueueNew+0xdc>
    mem = -1;
 8009f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d029      	beq.n	8009fec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d012      	beq.n	8009fc6 <osMessageQueueNew+0x62>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	2b4f      	cmp	r3, #79	; 0x4f
 8009fa6:	d90e      	bls.n	8009fc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	695a      	ldr	r2, [r3, #20]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d302      	bcc.n	8009fc6 <osMessageQueueNew+0x62>
        mem = 1;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	61bb      	str	r3, [r7, #24]
 8009fc4:	e014      	b.n	8009ff0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d110      	bne.n	8009ff0 <osMessageQueueNew+0x8c>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10c      	bne.n	8009ff0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d108      	bne.n	8009ff0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d104      	bne.n	8009ff0 <osMessageQueueNew+0x8c>
          mem = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	61bb      	str	r3, [r7, #24]
 8009fea:	e001      	b.n	8009ff0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d10b      	bne.n	800a00e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2100      	movs	r1, #0
 800a000:	9100      	str	r1, [sp, #0]
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 f9c3 	bl	800a390 <xQueueGenericCreateStatic>
 800a00a:	61f8      	str	r0, [r7, #28]
 800a00c:	e008      	b.n	800a020 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d105      	bne.n	800a020 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a014:	2200      	movs	r2, #0
 800a016:	68b9      	ldr	r1, [r7, #8]
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 fa31 	bl	800a480 <xQueueGenericCreate>
 800a01e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00c      	beq.n	800a040 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	617b      	str	r3, [r7, #20]
 800a032:	e001      	b.n	800a038 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a038:	6979      	ldr	r1, [r7, #20]
 800a03a:	69f8      	ldr	r0, [r7, #28]
 800a03c:	f000 ffba 	bl	800afb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a040:	69fb      	ldr	r3, [r7, #28]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3720      	adds	r7, #32
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4a07      	ldr	r2, [pc, #28]	; (800a078 <vApplicationGetIdleTaskMemory+0x2c>)
 800a05c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4a06      	ldr	r2, [pc, #24]	; (800a07c <vApplicationGetIdleTaskMemory+0x30>)
 800a062:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2280      	movs	r2, #128	; 0x80
 800a068:	601a      	str	r2, [r3, #0]
}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20000804 	.word	0x20000804
 800a07c:	20000860 	.word	0x20000860

0800a080 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4a07      	ldr	r2, [pc, #28]	; (800a0ac <vApplicationGetTimerTaskMemory+0x2c>)
 800a090:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	4a06      	ldr	r2, [pc, #24]	; (800a0b0 <vApplicationGetTimerTaskMemory+0x30>)
 800a096:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a09e:	601a      	str	r2, [r3, #0]
}
 800a0a0:	bf00      	nop
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	20000a60 	.word	0x20000a60
 800a0b0:	20000abc 	.word	0x20000abc

0800a0b4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800a0d8:	2320      	movs	r3, #32
 800a0da:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d00a      	beq.n	800a0f8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	60fb      	str	r3, [r7, #12]
}
 800a0f4:	bf00      	nop
 800a0f6:	e7fe      	b.n	800a0f6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 f822 	bl	800a156 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2201      	movs	r2, #1
 800a116:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800a118:	697b      	ldr	r3, [r7, #20]
	}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a128:	2020      	movs	r0, #32
 800a12a:	f003 f865 	bl	800d1f8 <pvPortMalloc>
 800a12e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00a      	beq.n	800a14c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	4618      	mov	r0, r3
 800a142:	f000 f808 	bl	800a156 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a14c:	687b      	ldr	r3, [r7, #4]
	}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a156:	b480      	push	{r7}
 800a158:	b083      	sub	sp, #12
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f103 0208 	add.w	r2, r3, #8
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f04f 32ff 	mov.w	r2, #4294967295
 800a16e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f103 0208 	add.w	r2, r3, #8
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f103 0208 	add.w	r2, r3, #8
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a196:	b480      	push	{r7}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	601a      	str	r2, [r3, #0]
}
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20e:	d103      	bne.n	800a218 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	e00c      	b.n	800a232 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3308      	adds	r3, #8
 800a21c:	60fb      	str	r3, [r7, #12]
 800a21e:	e002      	b.n	800a226 <vListInsert+0x2e>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d2f6      	bcs.n	800a220 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	601a      	str	r2, [r3, #0]
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a26a:	b480      	push	{r7}
 800a26c:	b085      	sub	sp, #20
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	6892      	ldr	r2, [r2, #8]
 800a280:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	6852      	ldr	r2, [r2, #4]
 800a28a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	429a      	cmp	r2, r3
 800a294:	d103      	bne.n	800a29e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	1e5a      	subs	r2, r3, #1
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
	...

0800a2c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10a      	bne.n	800a2ea <xQueueGenericReset+0x2a>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60bb      	str	r3, [r7, #8]
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2ea:	f002 fe63 	bl	800cfb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f6:	68f9      	ldr	r1, [r7, #12]
 800a2f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2fa:	fb01 f303 	mul.w	r3, r1, r3
 800a2fe:	441a      	add	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31a:	3b01      	subs	r3, #1
 800a31c:	68f9      	ldr	r1, [r7, #12]
 800a31e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a320:	fb01 f303 	mul.w	r3, r1, r3
 800a324:	441a      	add	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	22ff      	movs	r2, #255	; 0xff
 800a32e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	22ff      	movs	r2, #255	; 0xff
 800a336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d114      	bne.n	800a36a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01a      	beq.n	800a37e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3310      	adds	r3, #16
 800a34c:	4618      	mov	r0, r3
 800a34e:	f001 fb2b 	bl	800b9a8 <xTaskRemoveFromEventList>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d012      	beq.n	800a37e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <xQueueGenericReset+0xcc>)
 800a35a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	e009      	b.n	800a37e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3310      	adds	r3, #16
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fef1 	bl	800a156 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3324      	adds	r3, #36	; 0x24
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff feec 	bl	800a156 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a37e:	f002 fe49 	bl	800d014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a382:	2301      	movs	r3, #1
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	e000ed04 	.word	0xe000ed04

0800a390 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08e      	sub	sp, #56	; 0x38
 800a394:	af02      	add	r7, sp, #8
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10a      	bne.n	800a3ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <xQueueGenericCreateStatic+0x52>
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <xQueueGenericCreateStatic+0x56>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e000      	b.n	800a3e8 <xQueueGenericCreateStatic+0x58>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	623b      	str	r3, [r7, #32]
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d102      	bne.n	800a40e <xQueueGenericCreateStatic+0x7e>
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <xQueueGenericCreateStatic+0x82>
 800a40e:	2301      	movs	r3, #1
 800a410:	e000      	b.n	800a414 <xQueueGenericCreateStatic+0x84>
 800a412:	2300      	movs	r3, #0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	61fb      	str	r3, [r7, #28]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a42e:	2350      	movs	r3, #80	; 0x50
 800a430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b50      	cmp	r3, #80	; 0x50
 800a436:	d00a      	beq.n	800a44e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	61bb      	str	r3, [r7, #24]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a44e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00d      	beq.n	800a476 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a462:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	4613      	mov	r3, r2
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68b9      	ldr	r1, [r7, #8]
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 f83f 	bl	800a4f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a478:	4618      	mov	r0, r3
 800a47a:	3730      	adds	r7, #48	; 0x30
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a480:	b580      	push	{r7, lr}
 800a482:	b08a      	sub	sp, #40	; 0x28
 800a484:	af02      	add	r7, sp, #8
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	4613      	mov	r3, r2
 800a48c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xQueueGenericCreate+0x2a>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	613b      	str	r3, [r7, #16]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	fb02 f303 	mul.w	r3, r2, r3
 800a4b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	3350      	adds	r3, #80	; 0x50
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f002 fe9d 	bl	800d1f8 <pvPortMalloc>
 800a4be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d011      	beq.n	800a4ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	3350      	adds	r3, #80	; 0x50
 800a4ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4d8:	79fa      	ldrb	r2, [r7, #7]
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f805 	bl	800a4f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ea:	69bb      	ldr	r3, [r7, #24]
	}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3720      	adds	r7, #32
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d103      	bne.n	800a510 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	e002      	b.n	800a516 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a522:	2101      	movs	r1, #1
 800a524:	69b8      	ldr	r0, [r7, #24]
 800a526:	f7ff fecb 	bl	800a2c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	78fa      	ldrb	r2, [r7, #3]
 800a52e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a532:	bf00      	nop
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b08a      	sub	sp, #40	; 0x28
 800a53e:	af02      	add	r7, sp, #8
 800a540:	60f8      	str	r0, [r7, #12]
 800a542:	60b9      	str	r1, [r7, #8]
 800a544:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10a      	bne.n	800a562 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	61bb      	str	r3, [r7, #24]
}
 800a55e:	bf00      	nop
 800a560:	e7fe      	b.n	800a560 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	429a      	cmp	r2, r3
 800a568:	d90a      	bls.n	800a580 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	617b      	str	r3, [r7, #20]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a580:	2302      	movs	r3, #2
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	2100      	movs	r1, #0
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f7ff ff00 	bl	800a390 <xQueueGenericCreateStatic>
 800a590:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a59e:	69fb      	ldr	r3, [r7, #28]
	}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3720      	adds	r7, #32
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	613b      	str	r3, [r7, #16]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d90a      	bls.n	800a5ec <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	60fb      	str	r3, [r7, #12]
}
 800a5e8:	bf00      	nop
 800a5ea:	e7fe      	b.n	800a5ea <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff ff45 	bl	800a480 <xQueueGenericCreate>
 800a5f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a604:	697b      	ldr	r3, [r7, #20]
	}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08e      	sub	sp, #56	; 0x38
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a61e:	2300      	movs	r3, #0
 800a620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10a      	bne.n	800a642 <xQueueGenericSend+0x32>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d103      	bne.n	800a650 <xQueueGenericSend+0x40>
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <xQueueGenericSend+0x44>
 800a650:	2301      	movs	r3, #1
 800a652:	e000      	b.n	800a656 <xQueueGenericSend+0x46>
 800a654:	2300      	movs	r3, #0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10a      	bne.n	800a670 <xQueueGenericSend+0x60>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2b02      	cmp	r3, #2
 800a674:	d103      	bne.n	800a67e <xQueueGenericSend+0x6e>
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d101      	bne.n	800a682 <xQueueGenericSend+0x72>
 800a67e:	2301      	movs	r3, #1
 800a680:	e000      	b.n	800a684 <xQueueGenericSend+0x74>
 800a682:	2300      	movs	r3, #0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <xQueueGenericSend+0x8e>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	623b      	str	r3, [r7, #32]
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a69e:	f001 fb41 	bl	800bd24 <xTaskGetSchedulerState>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d102      	bne.n	800a6ae <xQueueGenericSend+0x9e>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <xQueueGenericSend+0xa2>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e000      	b.n	800a6b4 <xQueueGenericSend+0xa4>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10a      	bne.n	800a6ce <xQueueGenericSend+0xbe>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	61fb      	str	r3, [r7, #28]
}
 800a6ca:	bf00      	nop
 800a6cc:	e7fe      	b.n	800a6cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ce:	f002 fc71 	bl	800cfb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d302      	bcc.n	800a6e4 <xQueueGenericSend+0xd4>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d129      	bne.n	800a738 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	68b9      	ldr	r1, [r7, #8]
 800a6e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ea:	f000 fb52 	bl	800ad92 <prvCopyDataToQueue>
 800a6ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d010      	beq.n	800a71a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fa:	3324      	adds	r3, #36	; 0x24
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 f953 	bl	800b9a8 <xTaskRemoveFromEventList>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d013      	beq.n	800a730 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a708:	4b3f      	ldr	r3, [pc, #252]	; (800a808 <xQueueGenericSend+0x1f8>)
 800a70a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	e00a      	b.n	800a730 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d007      	beq.n	800a730 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a720:	4b39      	ldr	r3, [pc, #228]	; (800a808 <xQueueGenericSend+0x1f8>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a730:	f002 fc70 	bl	800d014 <vPortExitCritical>
				return pdPASS;
 800a734:	2301      	movs	r3, #1
 800a736:	e063      	b.n	800a800 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d103      	bne.n	800a746 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a73e:	f002 fc69 	bl	800d014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a742:	2300      	movs	r3, #0
 800a744:	e05c      	b.n	800a800 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d106      	bne.n	800a75a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a74c:	f107 0314 	add.w	r3, r7, #20
 800a750:	4618      	mov	r0, r3
 800a752:	f001 f98d 	bl	800ba70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a756:	2301      	movs	r3, #1
 800a758:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a75a:	f002 fc5b 	bl	800d014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a75e:	f000 feed 	bl	800b53c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a762:	f002 fc27 	bl	800cfb4 <vPortEnterCritical>
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a76c:	b25b      	sxtb	r3, r3
 800a76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a772:	d103      	bne.n	800a77c <xQueueGenericSend+0x16c>
 800a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a782:	b25b      	sxtb	r3, r3
 800a784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a788:	d103      	bne.n	800a792 <xQueueGenericSend+0x182>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a792:	f002 fc3f 	bl	800d014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a796:	1d3a      	adds	r2, r7, #4
 800a798:	f107 0314 	add.w	r3, r7, #20
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 f97c 	bl	800ba9c <xTaskCheckForTimeOut>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d124      	bne.n	800a7f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7ac:	f000 fbe9 	bl	800af82 <prvIsQueueFull>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d018      	beq.n	800a7e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	3310      	adds	r3, #16
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f001 f8a2 	bl	800b908 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c6:	f000 fb74 	bl	800aeb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7ca:	f000 fec5 	bl	800b558 <xTaskResumeAll>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f47f af7c 	bne.w	800a6ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a7d6:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <xQueueGenericSend+0x1f8>)
 800a7d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	e772      	b.n	800a6ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7ea:	f000 fb62 	bl	800aeb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7ee:	f000 feb3 	bl	800b558 <xTaskResumeAll>
 800a7f2:	e76c      	b.n	800a6ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7f6:	f000 fb5c 	bl	800aeb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7fa:	f000 fead 	bl	800b558 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a800:	4618      	mov	r0, r3
 800a802:	3738      	adds	r7, #56	; 0x38
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	e000ed04 	.word	0xe000ed04

0800a80c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b090      	sub	sp, #64	; 0x40
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10a      	bne.n	800a83a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a836:	bf00      	nop
 800a838:	e7fe      	b.n	800a838 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d103      	bne.n	800a848 <xQueueGenericSendFromISR+0x3c>
 800a840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a844:	2b00      	cmp	r3, #0
 800a846:	d101      	bne.n	800a84c <xQueueGenericSendFromISR+0x40>
 800a848:	2301      	movs	r3, #1
 800a84a:	e000      	b.n	800a84e <xQueueGenericSendFromISR+0x42>
 800a84c:	2300      	movs	r3, #0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10a      	bne.n	800a868 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a864:	bf00      	nop
 800a866:	e7fe      	b.n	800a866 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d103      	bne.n	800a876 <xQueueGenericSendFromISR+0x6a>
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <xQueueGenericSendFromISR+0x6e>
 800a876:	2301      	movs	r3, #1
 800a878:	e000      	b.n	800a87c <xQueueGenericSendFromISR+0x70>
 800a87a:	2300      	movs	r3, #0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10a      	bne.n	800a896 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	623b      	str	r3, [r7, #32]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a896:	f002 fc6f 	bl	800d178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a89a:	f3ef 8211 	mrs	r2, BASEPRI
 800a89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	61fa      	str	r2, [r7, #28]
 800a8b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d302      	bcc.n	800a8c8 <xQueueGenericSendFromISR+0xbc>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d12f      	bne.n	800a928 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8de:	f000 fa58 	bl	800ad92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ea:	d112      	bne.n	800a912 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d016      	beq.n	800a922 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	3324      	adds	r3, #36	; 0x24
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f001 f855 	bl	800b9a8 <xTaskRemoveFromEventList>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00e      	beq.n	800a922 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00b      	beq.n	800a922 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	e007      	b.n	800a922 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a916:	3301      	adds	r3, #1
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	b25a      	sxtb	r2, r3
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a922:	2301      	movs	r3, #1
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a926:	e001      	b.n	800a92c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a928:	2300      	movs	r3, #0
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a936:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3740      	adds	r7, #64	; 0x40
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b08c      	sub	sp, #48	; 0x30
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a950:	2300      	movs	r3, #0
 800a952:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10a      	bne.n	800a974 <xQueueReceive+0x30>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	623b      	str	r3, [r7, #32]
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d103      	bne.n	800a982 <xQueueReceive+0x3e>
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <xQueueReceive+0x42>
 800a982:	2301      	movs	r3, #1
 800a984:	e000      	b.n	800a988 <xQueueReceive+0x44>
 800a986:	2300      	movs	r3, #0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10a      	bne.n	800a9a2 <xQueueReceive+0x5e>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	61fb      	str	r3, [r7, #28]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9a2:	f001 f9bf 	bl	800bd24 <xTaskGetSchedulerState>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d102      	bne.n	800a9b2 <xQueueReceive+0x6e>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <xQueueReceive+0x72>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e000      	b.n	800a9b8 <xQueueReceive+0x74>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xQueueReceive+0x8e>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61bb      	str	r3, [r7, #24]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9d2:	f002 faef 	bl	800cfb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d01f      	beq.n	800aa22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e6:	f000 fa3e 	bl	800ae66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	1e5a      	subs	r2, r3, #1
 800a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00f      	beq.n	800aa1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	3310      	adds	r3, #16
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 ffd2 	bl	800b9a8 <xTaskRemoveFromEventList>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d007      	beq.n	800aa1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa0a:	4b3d      	ldr	r3, [pc, #244]	; (800ab00 <xQueueReceive+0x1bc>)
 800aa0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa10:	601a      	str	r2, [r3, #0]
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa1a:	f002 fafb 	bl	800d014 <vPortExitCritical>
				return pdPASS;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e069      	b.n	800aaf6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d103      	bne.n	800aa30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa28:	f002 faf4 	bl	800d014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e062      	b.n	800aaf6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa36:	f107 0310 	add.w	r3, r7, #16
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f001 f818 	bl	800ba70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa40:	2301      	movs	r3, #1
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa44:	f002 fae6 	bl	800d014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa48:	f000 fd78 	bl	800b53c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa4c:	f002 fab2 	bl	800cfb4 <vPortEnterCritical>
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa56:	b25b      	sxtb	r3, r3
 800aa58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5c:	d103      	bne.n	800aa66 <xQueueReceive+0x122>
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa6c:	b25b      	sxtb	r3, r3
 800aa6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa72:	d103      	bne.n	800aa7c <xQueueReceive+0x138>
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa7c:	f002 faca 	bl	800d014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa80:	1d3a      	adds	r2, r7, #4
 800aa82:	f107 0310 	add.w	r3, r7, #16
 800aa86:	4611      	mov	r1, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 f807 	bl	800ba9c <xTaskCheckForTimeOut>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d123      	bne.n	800aadc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa96:	f000 fa5e 	bl	800af56 <prvIsQueueEmpty>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d017      	beq.n	800aad0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	3324      	adds	r3, #36	; 0x24
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	4611      	mov	r1, r2
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 ff2d 	bl	800b908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab0:	f000 f9ff 	bl	800aeb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aab4:	f000 fd50 	bl	800b558 <xTaskResumeAll>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d189      	bne.n	800a9d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aabe:	4b10      	ldr	r3, [pc, #64]	; (800ab00 <xQueueReceive+0x1bc>)
 800aac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	e780      	b.n	800a9d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad2:	f000 f9ee 	bl	800aeb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aad6:	f000 fd3f 	bl	800b558 <xTaskResumeAll>
 800aada:	e77a      	b.n	800a9d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aade:	f000 f9e8 	bl	800aeb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aae2:	f000 fd39 	bl	800b558 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae8:	f000 fa35 	bl	800af56 <prvIsQueueEmpty>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f43f af6f 	beq.w	800a9d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aaf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3730      	adds	r7, #48	; 0x30
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b08e      	sub	sp, #56	; 0x38
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab16:	2300      	movs	r3, #0
 800ab18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	623b      	str	r3, [r7, #32]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00a      	beq.n	800ab54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	61fb      	str	r3, [r7, #28]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab54:	f001 f8e6 	bl	800bd24 <xTaskGetSchedulerState>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d102      	bne.n	800ab64 <xQueueSemaphoreTake+0x60>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <xQueueSemaphoreTake+0x64>
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <xQueueSemaphoreTake+0x66>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10a      	bne.n	800ab84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	61bb      	str	r3, [r7, #24]
}
 800ab80:	bf00      	nop
 800ab82:	e7fe      	b.n	800ab82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab84:	f002 fa16 	bl	800cfb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ab8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d024      	beq.n	800abde <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	1e5a      	subs	r2, r3, #1
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d104      	bne.n	800abae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aba4:	f001 fa34 	bl	800c010 <pvTaskIncrementMutexHeldCount>
 800aba8:	4602      	mov	r2, r0
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00f      	beq.n	800abd6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	3310      	adds	r3, #16
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fef4 	bl	800b9a8 <xTaskRemoveFromEventList>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abc6:	4b54      	ldr	r3, [pc, #336]	; (800ad18 <xQueueSemaphoreTake+0x214>)
 800abc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800abd6:	f002 fa1d 	bl	800d014 <vPortExitCritical>
				return pdPASS;
 800abda:	2301      	movs	r3, #1
 800abdc:	e097      	b.n	800ad0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d111      	bne.n	800ac08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	617b      	str	r3, [r7, #20]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac00:	f002 fa08 	bl	800d014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac04:	2300      	movs	r3, #0
 800ac06:	e082      	b.n	800ad0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d106      	bne.n	800ac1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac0e:	f107 030c 	add.w	r3, r7, #12
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 ff2c 	bl	800ba70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac1c:	f002 f9fa 	bl	800d014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac20:	f000 fc8c 	bl	800b53c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac24:	f002 f9c6 	bl	800cfb4 <vPortEnterCritical>
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac2e:	b25b      	sxtb	r3, r3
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d103      	bne.n	800ac3e <xQueueSemaphoreTake+0x13a>
 800ac36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac44:	b25b      	sxtb	r3, r3
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4a:	d103      	bne.n	800ac54 <xQueueSemaphoreTake+0x150>
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac54:	f002 f9de 	bl	800d014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac58:	463a      	mov	r2, r7
 800ac5a:	f107 030c 	add.w	r3, r7, #12
 800ac5e:	4611      	mov	r1, r2
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 ff1b 	bl	800ba9c <xTaskCheckForTimeOut>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d132      	bne.n	800acd2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac6e:	f000 f972 	bl	800af56 <prvIsQueueEmpty>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d026      	beq.n	800acc6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d109      	bne.n	800ac94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ac80:	f002 f998 	bl	800cfb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f001 f869 	bl	800bd60 <xTaskPriorityInherit>
 800ac8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ac90:	f002 f9c0 	bl	800d014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac96:	3324      	adds	r3, #36	; 0x24
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 fe33 	bl	800b908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aca4:	f000 f905 	bl	800aeb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aca8:	f000 fc56 	bl	800b558 <xTaskResumeAll>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f47f af68 	bne.w	800ab84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800acb4:	4b18      	ldr	r3, [pc, #96]	; (800ad18 <xQueueSemaphoreTake+0x214>)
 800acb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	e75e      	b.n	800ab84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800acc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acc8:	f000 f8f3 	bl	800aeb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800accc:	f000 fc44 	bl	800b558 <xTaskResumeAll>
 800acd0:	e758      	b.n	800ab84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800acd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acd4:	f000 f8ed 	bl	800aeb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acd8:	f000 fc3e 	bl	800b558 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acde:	f000 f93a 	bl	800af56 <prvIsQueueEmpty>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f43f af4d 	beq.w	800ab84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00d      	beq.n	800ad0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800acf0:	f002 f960 	bl	800cfb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800acf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acf6:	f000 f834 	bl	800ad62 <prvGetDisinheritPriorityAfterTimeout>
 800acfa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad02:	4618      	mov	r0, r3
 800ad04:	f001 f902 	bl	800bf0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad08:	f002 f984 	bl	800d014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3738      	adds	r7, #56	; 0x38
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	e000ed04 	.word	0xe000ed04

0800ad1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <vQueueDelete+0x28>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60bb      	str	r3, [r7, #8]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 f95f 	bl	800b008 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d102      	bne.n	800ad5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f002 fb1b 	bl	800d390 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d006      	beq.n	800ad80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	e001      	b.n	800ad84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ad80:	2300      	movs	r3, #0
 800ad82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad84:	68fb      	ldr	r3, [r7, #12]
	}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b086      	sub	sp, #24
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	60f8      	str	r0, [r7, #12]
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10d      	bne.n	800adcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d14d      	bne.n	800ae54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f001 f837 	bl	800be30 <xTaskPriorityDisinherit>
 800adc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	609a      	str	r2, [r3, #8]
 800adca:	e043      	b.n	800ae54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d119      	bne.n	800ae06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6858      	ldr	r0, [r3, #4]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adda:	461a      	mov	r2, r3
 800addc:	68b9      	ldr	r1, [r7, #8]
 800adde:	f004 f9b1 	bl	800f144 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adea:	441a      	add	r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d32b      	bcc.n	800ae54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	605a      	str	r2, [r3, #4]
 800ae04:	e026      	b.n	800ae54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68d8      	ldr	r0, [r3, #12]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0e:	461a      	mov	r2, r3
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	f004 f997 	bl	800f144 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1e:	425b      	negs	r3, r3
 800ae20:	441a      	add	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	68da      	ldr	r2, [r3, #12]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d207      	bcs.n	800ae42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	689a      	ldr	r2, [r3, #8]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	425b      	negs	r3, r3
 800ae3c:	441a      	add	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d105      	bne.n	800ae54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d002      	beq.n	800ae54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae5c:	697b      	ldr	r3, [r7, #20]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d018      	beq.n	800aeaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae80:	441a      	add	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d303      	bcc.n	800ae9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68d9      	ldr	r1, [r3, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	461a      	mov	r2, r3
 800aea4:	6838      	ldr	r0, [r7, #0]
 800aea6:	f004 f94d 	bl	800f144 <memcpy>
	}
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aeba:	f002 f87b 	bl	800cfb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aec4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aec6:	e011      	b.n	800aeec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d012      	beq.n	800aef6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3324      	adds	r3, #36	; 0x24
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 fd67 	bl	800b9a8 <xTaskRemoveFromEventList>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aee0:	f000 fe3e 	bl	800bb60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	3b01      	subs	r3, #1
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	dce9      	bgt.n	800aec8 <prvUnlockQueue+0x16>
 800aef4:	e000      	b.n	800aef8 <prvUnlockQueue+0x46>
					break;
 800aef6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	22ff      	movs	r2, #255	; 0xff
 800aefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af00:	f002 f888 	bl	800d014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af04:	f002 f856 	bl	800cfb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af10:	e011      	b.n	800af36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d012      	beq.n	800af40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3310      	adds	r3, #16
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 fd42 	bl	800b9a8 <xTaskRemoveFromEventList>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af2a:	f000 fe19 	bl	800bb60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	3b01      	subs	r3, #1
 800af32:	b2db      	uxtb	r3, r3
 800af34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	dce9      	bgt.n	800af12 <prvUnlockQueue+0x60>
 800af3e:	e000      	b.n	800af42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	22ff      	movs	r2, #255	; 0xff
 800af46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af4a:	f002 f863 	bl	800d014 <vPortExitCritical>
}
 800af4e:	bf00      	nop
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af5e:	f002 f829 	bl	800cfb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af66:	2b00      	cmp	r3, #0
 800af68:	d102      	bne.n	800af70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af6a:	2301      	movs	r3, #1
 800af6c:	60fb      	str	r3, [r7, #12]
 800af6e:	e001      	b.n	800af74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af70:	2300      	movs	r3, #0
 800af72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af74:	f002 f84e 	bl	800d014 <vPortExitCritical>

	return xReturn;
 800af78:	68fb      	ldr	r3, [r7, #12]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af8a:	f002 f813 	bl	800cfb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af96:	429a      	cmp	r2, r3
 800af98:	d102      	bne.n	800afa0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af9a:	2301      	movs	r3, #1
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	e001      	b.n	800afa4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afa4:	f002 f836 	bl	800d014 <vPortExitCritical>

	return xReturn;
 800afa8:	68fb      	ldr	r3, [r7, #12]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	e014      	b.n	800afee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afc4:	4a0f      	ldr	r2, [pc, #60]	; (800b004 <vQueueAddToRegistry+0x50>)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10b      	bne.n	800afe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afd0:	490c      	ldr	r1, [pc, #48]	; (800b004 <vQueueAddToRegistry+0x50>)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afda:	4a0a      	ldr	r2, [pc, #40]	; (800b004 <vQueueAddToRegistry+0x50>)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	4413      	add	r3, r2
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800afe6:	e006      	b.n	800aff6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3301      	adds	r3, #1
 800afec:	60fb      	str	r3, [r7, #12]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2b07      	cmp	r3, #7
 800aff2:	d9e7      	bls.n	800afc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aff4:	bf00      	nop
 800aff6:	bf00      	nop
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	20000ebc 	.word	0x20000ebc

0800b008 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b010:	2300      	movs	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	e016      	b.n	800b044 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b016:	4a10      	ldr	r2, [pc, #64]	; (800b058 <vQueueUnregisterQueue+0x50>)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	4413      	add	r3, r2
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	429a      	cmp	r2, r3
 800b024:	d10b      	bne.n	800b03e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b026:	4a0c      	ldr	r2, [pc, #48]	; (800b058 <vQueueUnregisterQueue+0x50>)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2100      	movs	r1, #0
 800b02c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b030:	4a09      	ldr	r2, [pc, #36]	; (800b058 <vQueueUnregisterQueue+0x50>)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	4413      	add	r3, r2
 800b038:	2200      	movs	r2, #0
 800b03a:	605a      	str	r2, [r3, #4]
				break;
 800b03c:	e006      	b.n	800b04c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3301      	adds	r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2b07      	cmp	r3, #7
 800b048:	d9e5      	bls.n	800b016 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b04a:	bf00      	nop
 800b04c:	bf00      	nop
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	20000ebc 	.word	0x20000ebc

0800b05c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b06c:	f001 ffa2 	bl	800cfb4 <vPortEnterCritical>
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b076:	b25b      	sxtb	r3, r3
 800b078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07c:	d103      	bne.n	800b086 <vQueueWaitForMessageRestricted+0x2a>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b08c:	b25b      	sxtb	r3, r3
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b092:	d103      	bne.n	800b09c <vQueueWaitForMessageRestricted+0x40>
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b09c:	f001 ffba 	bl	800d014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d106      	bne.n	800b0b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	3324      	adds	r3, #36	; 0x24
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	68b9      	ldr	r1, [r7, #8]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fc4d 	bl	800b950 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0b6:	6978      	ldr	r0, [r7, #20]
 800b0b8:	f7ff fefb 	bl	800aeb2 <prvUnlockQueue>
	}
 800b0bc:	bf00      	nop
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08e      	sub	sp, #56	; 0x38
 800b0c8:	af04      	add	r7, sp, #16
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10a      	bne.n	800b0ee <xTaskCreateStatic+0x2a>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	623b      	str	r3, [r7, #32]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <xTaskCreateStatic+0x46>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	61fb      	str	r3, [r7, #28]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b10a:	235c      	movs	r3, #92	; 0x5c
 800b10c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	2b5c      	cmp	r3, #92	; 0x5c
 800b112:	d00a      	beq.n	800b12a <xTaskCreateStatic+0x66>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	61bb      	str	r3, [r7, #24]
}
 800b126:	bf00      	nop
 800b128:	e7fe      	b.n	800b128 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b12a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d01e      	beq.n	800b170 <xTaskCreateStatic+0xac>
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	2b00      	cmp	r3, #0
 800b136:	d01b      	beq.n	800b170 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b140:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	2202      	movs	r2, #2
 800b146:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b14a:	2300      	movs	r3, #0
 800b14c:	9303      	str	r3, [sp, #12]
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	9302      	str	r3, [sp, #8]
 800b152:	f107 0314 	add.w	r3, r7, #20
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	68b9      	ldr	r1, [r7, #8]
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 f850 	bl	800b208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b16a:	f000 f8dd 	bl	800b328 <prvAddNewTaskToReadyList>
 800b16e:	e001      	b.n	800b174 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b174:	697b      	ldr	r3, [r7, #20]
	}
 800b176:	4618      	mov	r0, r3
 800b178:	3728      	adds	r7, #40	; 0x28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b08c      	sub	sp, #48	; 0x30
 800b182:	af04      	add	r7, sp, #16
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	603b      	str	r3, [r7, #0]
 800b18a:	4613      	mov	r3, r2
 800b18c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b18e:	88fb      	ldrh	r3, [r7, #6]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4618      	mov	r0, r3
 800b194:	f002 f830 	bl	800d1f8 <pvPortMalloc>
 800b198:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00e      	beq.n	800b1be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1a0:	205c      	movs	r0, #92	; 0x5c
 800b1a2:	f002 f829 	bl	800d1f8 <pvPortMalloc>
 800b1a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	631a      	str	r2, [r3, #48]	; 0x30
 800b1b4:	e005      	b.n	800b1c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1b6:	6978      	ldr	r0, [r7, #20]
 800b1b8:	f002 f8ea 	bl	800d390 <vPortFree>
 800b1bc:	e001      	b.n	800b1c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d017      	beq.n	800b1f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1d0:	88fa      	ldrh	r2, [r7, #6]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9303      	str	r3, [sp, #12]
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	9302      	str	r3, [sp, #8]
 800b1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68b9      	ldr	r1, [r7, #8]
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f000 f80e 	bl	800b208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1ec:	69f8      	ldr	r0, [r7, #28]
 800b1ee:	f000 f89b 	bl	800b328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	61bb      	str	r3, [r7, #24]
 800b1f6:	e002      	b.n	800b1fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1fe:	69bb      	ldr	r3, [r7, #24]
	}
 800b200:	4618      	mov	r0, r3
 800b202:	3720      	adds	r7, #32
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b088      	sub	sp, #32
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	461a      	mov	r2, r3
 800b220:	21a5      	movs	r1, #165	; 0xa5
 800b222:	f003 ff63 	bl	800f0ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b230:	3b01      	subs	r3, #1
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	f023 0307 	bic.w	r3, r3, #7
 800b23e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	f003 0307 	and.w	r3, r3, #7
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	617b      	str	r3, [r7, #20]
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d01f      	beq.n	800b2a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b266:	2300      	movs	r3, #0
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	e012      	b.n	800b292 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	4413      	add	r3, r2
 800b272:	7819      	ldrb	r1, [r3, #0]
 800b274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	4413      	add	r3, r2
 800b27a:	3334      	adds	r3, #52	; 0x34
 800b27c:	460a      	mov	r2, r1
 800b27e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	4413      	add	r3, r2
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d006      	beq.n	800b29a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	3301      	adds	r3, #1
 800b290:	61fb      	str	r3, [r7, #28]
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	2b0f      	cmp	r3, #15
 800b296:	d9e9      	bls.n	800b26c <prvInitialiseNewTask+0x64>
 800b298:	e000      	b.n	800b29c <prvInitialiseNewTask+0x94>
			{
				break;
 800b29a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2a4:	e003      	b.n	800b2ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	2b37      	cmp	r3, #55	; 0x37
 800b2b2:	d901      	bls.n	800b2b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2b4:	2337      	movs	r3, #55	; 0x37
 800b2b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fe ff61 	bl	800a196 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	3318      	adds	r3, #24
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe ff5c 	bl	800a196 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	68f9      	ldr	r1, [r7, #12]
 800b306:	69b8      	ldr	r0, [r7, #24]
 800b308:	f001 fd28 	bl	800cd5c <pxPortInitialiseStack>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b310:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b31c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b31e:	bf00      	nop
 800b320:	3720      	adds	r7, #32
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
	...

0800b328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b330:	f001 fe40 	bl	800cfb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b334:	4b2d      	ldr	r3, [pc, #180]	; (800b3ec <prvAddNewTaskToReadyList+0xc4>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3301      	adds	r3, #1
 800b33a:	4a2c      	ldr	r2, [pc, #176]	; (800b3ec <prvAddNewTaskToReadyList+0xc4>)
 800b33c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b33e:	4b2c      	ldr	r3, [pc, #176]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d109      	bne.n	800b35a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b346:	4a2a      	ldr	r2, [pc, #168]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b34c:	4b27      	ldr	r3, [pc, #156]	; (800b3ec <prvAddNewTaskToReadyList+0xc4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d110      	bne.n	800b376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b354:	f000 fc28 	bl	800bba8 <prvInitialiseTaskLists>
 800b358:	e00d      	b.n	800b376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b35a:	4b26      	ldr	r3, [pc, #152]	; (800b3f4 <prvAddNewTaskToReadyList+0xcc>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d109      	bne.n	800b376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b362:	4b23      	ldr	r3, [pc, #140]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d802      	bhi.n	800b376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b370:	4a1f      	ldr	r2, [pc, #124]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b376:	4b20      	ldr	r3, [pc, #128]	; (800b3f8 <prvAddNewTaskToReadyList+0xd0>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3301      	adds	r3, #1
 800b37c:	4a1e      	ldr	r2, [pc, #120]	; (800b3f8 <prvAddNewTaskToReadyList+0xd0>)
 800b37e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b380:	4b1d      	ldr	r3, [pc, #116]	; (800b3f8 <prvAddNewTaskToReadyList+0xd0>)
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4b1b      	ldr	r3, [pc, #108]	; (800b3fc <prvAddNewTaskToReadyList+0xd4>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	429a      	cmp	r2, r3
 800b392:	d903      	bls.n	800b39c <prvAddNewTaskToReadyList+0x74>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	4a18      	ldr	r2, [pc, #96]	; (800b3fc <prvAddNewTaskToReadyList+0xd4>)
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4a15      	ldr	r2, [pc, #84]	; (800b400 <prvAddNewTaskToReadyList+0xd8>)
 800b3aa:	441a      	add	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	f7fe fefc 	bl	800a1b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3b8:	f001 fe2c 	bl	800d014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3bc:	4b0d      	ldr	r3, [pc, #52]	; (800b3f4 <prvAddNewTaskToReadyList+0xcc>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00e      	beq.n	800b3e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3c4:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <prvAddNewTaskToReadyList+0xc8>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d207      	bcs.n	800b3e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b3d2:	4b0c      	ldr	r3, [pc, #48]	; (800b404 <prvAddNewTaskToReadyList+0xdc>)
 800b3d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	200013d0 	.word	0x200013d0
 800b3f0:	20000efc 	.word	0x20000efc
 800b3f4:	200013dc 	.word	0x200013dc
 800b3f8:	200013ec 	.word	0x200013ec
 800b3fc:	200013d8 	.word	0x200013d8
 800b400:	20000f00 	.word	0x20000f00
 800b404:	e000ed04 	.word	0xe000ed04

0800b408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d017      	beq.n	800b44a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b41a:	4b13      	ldr	r3, [pc, #76]	; (800b468 <vTaskDelay+0x60>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <vTaskDelay+0x30>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	60bb      	str	r3, [r7, #8]
}
 800b434:	bf00      	nop
 800b436:	e7fe      	b.n	800b436 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b438:	f000 f880 	bl	800b53c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b43c:	2100      	movs	r1, #0
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f001 f830 	bl	800c4a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b444:	f000 f888 	bl	800b558 <xTaskResumeAll>
 800b448:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d107      	bne.n	800b460 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b450:	4b06      	ldr	r3, [pc, #24]	; (800b46c <vTaskDelay+0x64>)
 800b452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b460:	bf00      	nop
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	200013f8 	.word	0x200013f8
 800b46c:	e000ed04 	.word	0xe000ed04

0800b470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08a      	sub	sp, #40	; 0x28
 800b474:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b476:	2300      	movs	r3, #0
 800b478:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b47e:	463a      	mov	r2, r7
 800b480:	1d39      	adds	r1, r7, #4
 800b482:	f107 0308 	add.w	r3, r7, #8
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe fde0 	bl	800a04c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	9202      	str	r2, [sp, #8]
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	2300      	movs	r3, #0
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	2300      	movs	r3, #0
 800b49c:	460a      	mov	r2, r1
 800b49e:	4921      	ldr	r1, [pc, #132]	; (800b524 <vTaskStartScheduler+0xb4>)
 800b4a0:	4821      	ldr	r0, [pc, #132]	; (800b528 <vTaskStartScheduler+0xb8>)
 800b4a2:	f7ff fe0f 	bl	800b0c4 <xTaskCreateStatic>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	4a20      	ldr	r2, [pc, #128]	; (800b52c <vTaskStartScheduler+0xbc>)
 800b4aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4ac:	4b1f      	ldr	r3, [pc, #124]	; (800b52c <vTaskStartScheduler+0xbc>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d002      	beq.n	800b4ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	e001      	b.n	800b4be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d102      	bne.n	800b4ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4c4:	f001 f842 	bl	800c54c <xTimerCreateTimerTask>
 800b4c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d116      	bne.n	800b4fe <vTaskStartScheduler+0x8e>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	613b      	str	r3, [r7, #16]
}
 800b4e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4e4:	4b12      	ldr	r3, [pc, #72]	; (800b530 <vTaskStartScheduler+0xc0>)
 800b4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4ec:	4b11      	ldr	r3, [pc, #68]	; (800b534 <vTaskStartScheduler+0xc4>)
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4f2:	4b11      	ldr	r3, [pc, #68]	; (800b538 <vTaskStartScheduler+0xc8>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4f8:	f001 fcba 	bl	800ce70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4fc:	e00e      	b.n	800b51c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b504:	d10a      	bne.n	800b51c <vTaskStartScheduler+0xac>
	__asm volatile
 800b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50a:	f383 8811 	msr	BASEPRI, r3
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	f3bf 8f4f 	dsb	sy
 800b516:	60fb      	str	r3, [r7, #12]
}
 800b518:	bf00      	nop
 800b51a:	e7fe      	b.n	800b51a <vTaskStartScheduler+0xaa>
}
 800b51c:	bf00      	nop
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	0800f1e8 	.word	0x0800f1e8
 800b528:	0800bb79 	.word	0x0800bb79
 800b52c:	200013f4 	.word	0x200013f4
 800b530:	200013f0 	.word	0x200013f0
 800b534:	200013dc 	.word	0x200013dc
 800b538:	200013d4 	.word	0x200013d4

0800b53c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b53c:	b480      	push	{r7}
 800b53e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b540:	4b04      	ldr	r3, [pc, #16]	; (800b554 <vTaskSuspendAll+0x18>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3301      	adds	r3, #1
 800b546:	4a03      	ldr	r2, [pc, #12]	; (800b554 <vTaskSuspendAll+0x18>)
 800b548:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b54a:	bf00      	nop
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	200013f8 	.word	0x200013f8

0800b558 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b562:	2300      	movs	r3, #0
 800b564:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b566:	4b42      	ldr	r3, [pc, #264]	; (800b670 <xTaskResumeAll+0x118>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10a      	bne.n	800b584 <xTaskResumeAll+0x2c>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	603b      	str	r3, [r7, #0]
}
 800b580:	bf00      	nop
 800b582:	e7fe      	b.n	800b582 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b584:	f001 fd16 	bl	800cfb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b588:	4b39      	ldr	r3, [pc, #228]	; (800b670 <xTaskResumeAll+0x118>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	4a38      	ldr	r2, [pc, #224]	; (800b670 <xTaskResumeAll+0x118>)
 800b590:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b592:	4b37      	ldr	r3, [pc, #220]	; (800b670 <xTaskResumeAll+0x118>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d162      	bne.n	800b660 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b59a:	4b36      	ldr	r3, [pc, #216]	; (800b674 <xTaskResumeAll+0x11c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d05e      	beq.n	800b660 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5a2:	e02f      	b.n	800b604 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5a4:	4b34      	ldr	r3, [pc, #208]	; (800b678 <xTaskResumeAll+0x120>)
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	3318      	adds	r3, #24
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fe fe5a 	bl	800a26a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fe55 	bl	800a26a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c4:	4b2d      	ldr	r3, [pc, #180]	; (800b67c <xTaskResumeAll+0x124>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d903      	bls.n	800b5d4 <xTaskResumeAll+0x7c>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	4a2a      	ldr	r2, [pc, #168]	; (800b67c <xTaskResumeAll+0x124>)
 800b5d2:	6013      	str	r3, [r2, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d8:	4613      	mov	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4a27      	ldr	r2, [pc, #156]	; (800b680 <xTaskResumeAll+0x128>)
 800b5e2:	441a      	add	r2, r3
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	f7fe fde0 	bl	800a1b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	4b23      	ldr	r3, [pc, #140]	; (800b684 <xTaskResumeAll+0x12c>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d302      	bcc.n	800b604 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b5fe:	4b22      	ldr	r3, [pc, #136]	; (800b688 <xTaskResumeAll+0x130>)
 800b600:	2201      	movs	r2, #1
 800b602:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b604:	4b1c      	ldr	r3, [pc, #112]	; (800b678 <xTaskResumeAll+0x120>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1cb      	bne.n	800b5a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b612:	f000 fb67 	bl	800bce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b616:	4b1d      	ldr	r3, [pc, #116]	; (800b68c <xTaskResumeAll+0x134>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d010      	beq.n	800b644 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b622:	f000 f859 	bl	800b6d8 <xTaskIncrementTick>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b62c:	4b16      	ldr	r3, [pc, #88]	; (800b688 <xTaskResumeAll+0x130>)
 800b62e:	2201      	movs	r2, #1
 800b630:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3b01      	subs	r3, #1
 800b636:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1f1      	bne.n	800b622 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b63e:	4b13      	ldr	r3, [pc, #76]	; (800b68c <xTaskResumeAll+0x134>)
 800b640:	2200      	movs	r2, #0
 800b642:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b644:	4b10      	ldr	r3, [pc, #64]	; (800b688 <xTaskResumeAll+0x130>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d009      	beq.n	800b660 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b64c:	2301      	movs	r3, #1
 800b64e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b650:	4b0f      	ldr	r3, [pc, #60]	; (800b690 <xTaskResumeAll+0x138>)
 800b652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b660:	f001 fcd8 	bl	800d014 <vPortExitCritical>

	return xAlreadyYielded;
 800b664:	68bb      	ldr	r3, [r7, #8]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	200013f8 	.word	0x200013f8
 800b674:	200013d0 	.word	0x200013d0
 800b678:	20001390 	.word	0x20001390
 800b67c:	200013d8 	.word	0x200013d8
 800b680:	20000f00 	.word	0x20000f00
 800b684:	20000efc 	.word	0x20000efc
 800b688:	200013e4 	.word	0x200013e4
 800b68c:	200013e0 	.word	0x200013e0
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b69a:	4b05      	ldr	r3, [pc, #20]	; (800b6b0 <xTaskGetTickCount+0x1c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6a0:	687b      	ldr	r3, [r7, #4]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	200013d4 	.word	0x200013d4

0800b6b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6ba:	f001 fd5d 	bl	800d178 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b6be:	2300      	movs	r3, #0
 800b6c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b6c2:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <xTaskGetTickCountFromISR+0x20>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6c8:	683b      	ldr	r3, [r7, #0]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	200013d4 	.word	0x200013d4

0800b6d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6e2:	4b4f      	ldr	r3, [pc, #316]	; (800b820 <xTaskIncrementTick+0x148>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f040 808f 	bne.w	800b80a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6ec:	4b4d      	ldr	r3, [pc, #308]	; (800b824 <xTaskIncrementTick+0x14c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b6f4:	4a4b      	ldr	r2, [pc, #300]	; (800b824 <xTaskIncrementTick+0x14c>)
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d120      	bne.n	800b742 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b700:	4b49      	ldr	r3, [pc, #292]	; (800b828 <xTaskIncrementTick+0x150>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <xTaskIncrementTick+0x48>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	603b      	str	r3, [r7, #0]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <xTaskIncrementTick+0x46>
 800b720:	4b41      	ldr	r3, [pc, #260]	; (800b828 <xTaskIncrementTick+0x150>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	60fb      	str	r3, [r7, #12]
 800b726:	4b41      	ldr	r3, [pc, #260]	; (800b82c <xTaskIncrementTick+0x154>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a3f      	ldr	r2, [pc, #252]	; (800b828 <xTaskIncrementTick+0x150>)
 800b72c:	6013      	str	r3, [r2, #0]
 800b72e:	4a3f      	ldr	r2, [pc, #252]	; (800b82c <xTaskIncrementTick+0x154>)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	4b3e      	ldr	r3, [pc, #248]	; (800b830 <xTaskIncrementTick+0x158>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3301      	adds	r3, #1
 800b73a:	4a3d      	ldr	r2, [pc, #244]	; (800b830 <xTaskIncrementTick+0x158>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	f000 fad1 	bl	800bce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b742:	4b3c      	ldr	r3, [pc, #240]	; (800b834 <xTaskIncrementTick+0x15c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	693a      	ldr	r2, [r7, #16]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d349      	bcc.n	800b7e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b74c:	4b36      	ldr	r3, [pc, #216]	; (800b828 <xTaskIncrementTick+0x150>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d104      	bne.n	800b760 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b756:	4b37      	ldr	r3, [pc, #220]	; (800b834 <xTaskIncrementTick+0x15c>)
 800b758:	f04f 32ff 	mov.w	r2, #4294967295
 800b75c:	601a      	str	r2, [r3, #0]
					break;
 800b75e:	e03f      	b.n	800b7e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b760:	4b31      	ldr	r3, [pc, #196]	; (800b828 <xTaskIncrementTick+0x150>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d203      	bcs.n	800b780 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b778:	4a2e      	ldr	r2, [pc, #184]	; (800b834 <xTaskIncrementTick+0x15c>)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b77e:	e02f      	b.n	800b7e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	3304      	adds	r3, #4
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe fd70 	bl	800a26a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d004      	beq.n	800b79c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	3318      	adds	r3, #24
 800b796:	4618      	mov	r0, r3
 800b798:	f7fe fd67 	bl	800a26a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a0:	4b25      	ldr	r3, [pc, #148]	; (800b838 <xTaskIncrementTick+0x160>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d903      	bls.n	800b7b0 <xTaskIncrementTick+0xd8>
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	4a22      	ldr	r2, [pc, #136]	; (800b838 <xTaskIncrementTick+0x160>)
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4a1f      	ldr	r2, [pc, #124]	; (800b83c <xTaskIncrementTick+0x164>)
 800b7be:	441a      	add	r2, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	f7fe fcf2 	bl	800a1b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d0:	4b1b      	ldr	r3, [pc, #108]	; (800b840 <xTaskIncrementTick+0x168>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d3b8      	bcc.n	800b74c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7de:	e7b5      	b.n	800b74c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7e0:	4b17      	ldr	r3, [pc, #92]	; (800b840 <xTaskIncrementTick+0x168>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e6:	4915      	ldr	r1, [pc, #84]	; (800b83c <xTaskIncrementTick+0x164>)
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	440b      	add	r3, r1
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d901      	bls.n	800b7fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b7fc:	4b11      	ldr	r3, [pc, #68]	; (800b844 <xTaskIncrementTick+0x16c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d007      	beq.n	800b814 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b804:	2301      	movs	r3, #1
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	e004      	b.n	800b814 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b80a:	4b0f      	ldr	r3, [pc, #60]	; (800b848 <xTaskIncrementTick+0x170>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3301      	adds	r3, #1
 800b810:	4a0d      	ldr	r2, [pc, #52]	; (800b848 <xTaskIncrementTick+0x170>)
 800b812:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b814:	697b      	ldr	r3, [r7, #20]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3718      	adds	r7, #24
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	200013f8 	.word	0x200013f8
 800b824:	200013d4 	.word	0x200013d4
 800b828:	20001388 	.word	0x20001388
 800b82c:	2000138c 	.word	0x2000138c
 800b830:	200013e8 	.word	0x200013e8
 800b834:	200013f0 	.word	0x200013f0
 800b838:	200013d8 	.word	0x200013d8
 800b83c:	20000f00 	.word	0x20000f00
 800b840:	20000efc 	.word	0x20000efc
 800b844:	200013e4 	.word	0x200013e4
 800b848:	200013e0 	.word	0x200013e0

0800b84c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b852:	4b28      	ldr	r3, [pc, #160]	; (800b8f4 <vTaskSwitchContext+0xa8>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d003      	beq.n	800b862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b85a:	4b27      	ldr	r3, [pc, #156]	; (800b8f8 <vTaskSwitchContext+0xac>)
 800b85c:	2201      	movs	r2, #1
 800b85e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b860:	e041      	b.n	800b8e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b862:	4b25      	ldr	r3, [pc, #148]	; (800b8f8 <vTaskSwitchContext+0xac>)
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b868:	4b24      	ldr	r3, [pc, #144]	; (800b8fc <vTaskSwitchContext+0xb0>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	e010      	b.n	800b892 <vTaskSwitchContext+0x46>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10a      	bne.n	800b88c <vTaskSwitchContext+0x40>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	607b      	str	r3, [r7, #4]
}
 800b888:	bf00      	nop
 800b88a:	e7fe      	b.n	800b88a <vTaskSwitchContext+0x3e>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3b01      	subs	r3, #1
 800b890:	60fb      	str	r3, [r7, #12]
 800b892:	491b      	ldr	r1, [pc, #108]	; (800b900 <vTaskSwitchContext+0xb4>)
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	4613      	mov	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	440b      	add	r3, r1
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0e4      	beq.n	800b870 <vTaskSwitchContext+0x24>
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4a13      	ldr	r2, [pc, #76]	; (800b900 <vTaskSwitchContext+0xb4>)
 800b8b2:	4413      	add	r3, r2
 800b8b4:	60bb      	str	r3, [r7, #8]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	605a      	str	r2, [r3, #4]
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	685a      	ldr	r2, [r3, #4]
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d104      	bne.n	800b8d6 <vTaskSwitchContext+0x8a>
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	605a      	str	r2, [r3, #4]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	4a09      	ldr	r2, [pc, #36]	; (800b904 <vTaskSwitchContext+0xb8>)
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	4a06      	ldr	r2, [pc, #24]	; (800b8fc <vTaskSwitchContext+0xb0>)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6013      	str	r3, [r2, #0]
}
 800b8e6:	bf00      	nop
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	200013f8 	.word	0x200013f8
 800b8f8:	200013e4 	.word	0x200013e4
 800b8fc:	200013d8 	.word	0x200013d8
 800b900:	20000f00 	.word	0x20000f00
 800b904:	20000efc 	.word	0x20000efc

0800b908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10a      	bne.n	800b92e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	60fb      	str	r3, [r7, #12]
}
 800b92a:	bf00      	nop
 800b92c:	e7fe      	b.n	800b92c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b92e:	4b07      	ldr	r3, [pc, #28]	; (800b94c <vTaskPlaceOnEventList+0x44>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3318      	adds	r3, #24
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7fe fc5e 	bl	800a1f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b93c:	2101      	movs	r1, #1
 800b93e:	6838      	ldr	r0, [r7, #0]
 800b940:	f000 fdb0 	bl	800c4a4 <prvAddCurrentTaskToDelayedList>
}
 800b944:	bf00      	nop
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20000efc 	.word	0x20000efc

0800b950 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	617b      	str	r3, [r7, #20]
}
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b978:	4b0a      	ldr	r3, [pc, #40]	; (800b9a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3318      	adds	r3, #24
 800b97e:	4619      	mov	r1, r3
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7fe fc15 	bl	800a1b0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b98c:	f04f 33ff 	mov.w	r3, #4294967295
 800b990:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b992:	6879      	ldr	r1, [r7, #4]
 800b994:	68b8      	ldr	r0, [r7, #8]
 800b996:	f000 fd85 	bl	800c4a4 <prvAddCurrentTaskToDelayedList>
	}
 800b99a:	bf00      	nop
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20000efc 	.word	0x20000efc

0800b9a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	60fb      	str	r3, [r7, #12]
}
 800b9d0:	bf00      	nop
 800b9d2:	e7fe      	b.n	800b9d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	3318      	adds	r3, #24
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fe fc46 	bl	800a26a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9de:	4b1e      	ldr	r3, [pc, #120]	; (800ba58 <xTaskRemoveFromEventList+0xb0>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d11d      	bne.n	800ba22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fe fc3d 	bl	800a26a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f4:	4b19      	ldr	r3, [pc, #100]	; (800ba5c <xTaskRemoveFromEventList+0xb4>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d903      	bls.n	800ba04 <xTaskRemoveFromEventList+0x5c>
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba00:	4a16      	ldr	r2, [pc, #88]	; (800ba5c <xTaskRemoveFromEventList+0xb4>)
 800ba02:	6013      	str	r3, [r2, #0]
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba08:	4613      	mov	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4a13      	ldr	r2, [pc, #76]	; (800ba60 <xTaskRemoveFromEventList+0xb8>)
 800ba12:	441a      	add	r2, r3
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	3304      	adds	r3, #4
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	f7fe fbc8 	bl	800a1b0 <vListInsertEnd>
 800ba20:	e005      	b.n	800ba2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	3318      	adds	r3, #24
 800ba26:	4619      	mov	r1, r3
 800ba28:	480e      	ldr	r0, [pc, #56]	; (800ba64 <xTaskRemoveFromEventList+0xbc>)
 800ba2a:	f7fe fbc1 	bl	800a1b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba32:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <xTaskRemoveFromEventList+0xc0>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d905      	bls.n	800ba48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba40:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <xTaskRemoveFromEventList+0xc4>)
 800ba42:	2201      	movs	r2, #1
 800ba44:	601a      	str	r2, [r3, #0]
 800ba46:	e001      	b.n	800ba4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba4c:	697b      	ldr	r3, [r7, #20]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	200013f8 	.word	0x200013f8
 800ba5c:	200013d8 	.word	0x200013d8
 800ba60:	20000f00 	.word	0x20000f00
 800ba64:	20001390 	.word	0x20001390
 800ba68:	20000efc 	.word	0x20000efc
 800ba6c:	200013e4 	.word	0x200013e4

0800ba70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba78:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <vTaskInternalSetTimeOutState+0x24>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba80:	4b05      	ldr	r3, [pc, #20]	; (800ba98 <vTaskInternalSetTimeOutState+0x28>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	605a      	str	r2, [r3, #4]
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	200013e8 	.word	0x200013e8
 800ba98:	200013d4 	.word	0x200013d4

0800ba9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b088      	sub	sp, #32
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	613b      	str	r3, [r7, #16]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60fb      	str	r3, [r7, #12]
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bade:	f001 fa69 	bl	800cfb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bae2:	4b1d      	ldr	r3, [pc, #116]	; (800bb58 <xTaskCheckForTimeOut+0xbc>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	69ba      	ldr	r2, [r7, #24]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafa:	d102      	bne.n	800bb02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bafc:	2300      	movs	r3, #0
 800bafe:	61fb      	str	r3, [r7, #28]
 800bb00:	e023      	b.n	800bb4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	4b15      	ldr	r3, [pc, #84]	; (800bb5c <xTaskCheckForTimeOut+0xc0>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d007      	beq.n	800bb1e <xTaskCheckForTimeOut+0x82>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	69ba      	ldr	r2, [r7, #24]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d302      	bcc.n	800bb1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	61fb      	str	r3, [r7, #28]
 800bb1c:	e015      	b.n	800bb4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d20b      	bcs.n	800bb40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	1ad2      	subs	r2, r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff ff9b 	bl	800ba70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	61fb      	str	r3, [r7, #28]
 800bb3e:	e004      	b.n	800bb4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb46:	2301      	movs	r3, #1
 800bb48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb4a:	f001 fa63 	bl	800d014 <vPortExitCritical>

	return xReturn;
 800bb4e:	69fb      	ldr	r3, [r7, #28]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3720      	adds	r7, #32
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	200013d4 	.word	0x200013d4
 800bb5c:	200013e8 	.word	0x200013e8

0800bb60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb60:	b480      	push	{r7}
 800bb62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb64:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <vTaskMissedYield+0x14>)
 800bb66:	2201      	movs	r2, #1
 800bb68:	601a      	str	r2, [r3, #0]
}
 800bb6a:	bf00      	nop
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	200013e4 	.word	0x200013e4

0800bb78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb80:	f000 f852 	bl	800bc28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb84:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <prvIdleTask+0x28>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d9f9      	bls.n	800bb80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb8c:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <prvIdleTask+0x2c>)
 800bb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	f3bf 8f4f 	dsb	sy
 800bb98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb9c:	e7f0      	b.n	800bb80 <prvIdleTask+0x8>
 800bb9e:	bf00      	nop
 800bba0:	20000f00 	.word	0x20000f00
 800bba4:	e000ed04 	.word	0xe000ed04

0800bba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbae:	2300      	movs	r3, #0
 800bbb0:	607b      	str	r3, [r7, #4]
 800bbb2:	e00c      	b.n	800bbce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4a12      	ldr	r2, [pc, #72]	; (800bc08 <prvInitialiseTaskLists+0x60>)
 800bbc0:	4413      	add	r3, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fe fac7 	bl	800a156 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2b37      	cmp	r3, #55	; 0x37
 800bbd2:	d9ef      	bls.n	800bbb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbd4:	480d      	ldr	r0, [pc, #52]	; (800bc0c <prvInitialiseTaskLists+0x64>)
 800bbd6:	f7fe fabe 	bl	800a156 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbda:	480d      	ldr	r0, [pc, #52]	; (800bc10 <prvInitialiseTaskLists+0x68>)
 800bbdc:	f7fe fabb 	bl	800a156 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbe0:	480c      	ldr	r0, [pc, #48]	; (800bc14 <prvInitialiseTaskLists+0x6c>)
 800bbe2:	f7fe fab8 	bl	800a156 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbe6:	480c      	ldr	r0, [pc, #48]	; (800bc18 <prvInitialiseTaskLists+0x70>)
 800bbe8:	f7fe fab5 	bl	800a156 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbec:	480b      	ldr	r0, [pc, #44]	; (800bc1c <prvInitialiseTaskLists+0x74>)
 800bbee:	f7fe fab2 	bl	800a156 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbf2:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <prvInitialiseTaskLists+0x78>)
 800bbf4:	4a05      	ldr	r2, [pc, #20]	; (800bc0c <prvInitialiseTaskLists+0x64>)
 800bbf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbf8:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <prvInitialiseTaskLists+0x7c>)
 800bbfa:	4a05      	ldr	r2, [pc, #20]	; (800bc10 <prvInitialiseTaskLists+0x68>)
 800bbfc:	601a      	str	r2, [r3, #0]
}
 800bbfe:	bf00      	nop
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20000f00 	.word	0x20000f00
 800bc0c:	20001360 	.word	0x20001360
 800bc10:	20001374 	.word	0x20001374
 800bc14:	20001390 	.word	0x20001390
 800bc18:	200013a4 	.word	0x200013a4
 800bc1c:	200013bc 	.word	0x200013bc
 800bc20:	20001388 	.word	0x20001388
 800bc24:	2000138c 	.word	0x2000138c

0800bc28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc2e:	e019      	b.n	800bc64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc30:	f001 f9c0 	bl	800cfb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc34:	4b10      	ldr	r3, [pc, #64]	; (800bc78 <prvCheckTasksWaitingTermination+0x50>)
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe fb12 	bl	800a26a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc46:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <prvCheckTasksWaitingTermination+0x54>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	4a0b      	ldr	r2, [pc, #44]	; (800bc7c <prvCheckTasksWaitingTermination+0x54>)
 800bc4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc50:	4b0b      	ldr	r3, [pc, #44]	; (800bc80 <prvCheckTasksWaitingTermination+0x58>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3b01      	subs	r3, #1
 800bc56:	4a0a      	ldr	r2, [pc, #40]	; (800bc80 <prvCheckTasksWaitingTermination+0x58>)
 800bc58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc5a:	f001 f9db 	bl	800d014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f810 	bl	800bc84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc64:	4b06      	ldr	r3, [pc, #24]	; (800bc80 <prvCheckTasksWaitingTermination+0x58>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1e1      	bne.n	800bc30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc6c:	bf00      	nop
 800bc6e:	bf00      	nop
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	200013a4 	.word	0x200013a4
 800bc7c:	200013d0 	.word	0x200013d0
 800bc80:	200013b8 	.word	0x200013b8

0800bc84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d108      	bne.n	800bca8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 fb78 	bl	800d390 <vPortFree>
				vPortFree( pxTCB );
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f001 fb75 	bl	800d390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bca6:	e018      	b.n	800bcda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d103      	bne.n	800bcba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f001 fb6c 	bl	800d390 <vPortFree>
	}
 800bcb8:	e00f      	b.n	800bcda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d00a      	beq.n	800bcda <prvDeleteTCB+0x56>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	60fb      	str	r3, [r7, #12]
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <prvDeleteTCB+0x54>
	}
 800bcda:	bf00      	nop
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
	...

0800bce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcea:	4b0c      	ldr	r3, [pc, #48]	; (800bd1c <prvResetNextTaskUnblockTime+0x38>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d104      	bne.n	800bcfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcf4:	4b0a      	ldr	r3, [pc, #40]	; (800bd20 <prvResetNextTaskUnblockTime+0x3c>)
 800bcf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcfc:	e008      	b.n	800bd10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcfe:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <prvResetNextTaskUnblockTime+0x38>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	4a04      	ldr	r2, [pc, #16]	; (800bd20 <prvResetNextTaskUnblockTime+0x3c>)
 800bd0e:	6013      	str	r3, [r2, #0]
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	20001388 	.word	0x20001388
 800bd20:	200013f0 	.word	0x200013f0

0800bd24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <xTaskGetSchedulerState+0x34>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd32:	2301      	movs	r3, #1
 800bd34:	607b      	str	r3, [r7, #4]
 800bd36:	e008      	b.n	800bd4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd38:	4b08      	ldr	r3, [pc, #32]	; (800bd5c <xTaskGetSchedulerState+0x38>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd40:	2302      	movs	r3, #2
 800bd42:	607b      	str	r3, [r7, #4]
 800bd44:	e001      	b.n	800bd4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd46:	2300      	movs	r3, #0
 800bd48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd4a:	687b      	ldr	r3, [r7, #4]
	}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	200013dc 	.word	0x200013dc
 800bd5c:	200013f8 	.word	0x200013f8

0800bd60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d051      	beq.n	800be1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7a:	4b2a      	ldr	r3, [pc, #168]	; (800be24 <xTaskPriorityInherit+0xc4>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d241      	bcs.n	800be08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	db06      	blt.n	800bd9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd8c:	4b25      	ldr	r3, [pc, #148]	; (800be24 <xTaskPriorityInherit+0xc4>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	6959      	ldr	r1, [r3, #20]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda2:	4613      	mov	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4a1f      	ldr	r2, [pc, #124]	; (800be28 <xTaskPriorityInherit+0xc8>)
 800bdac:	4413      	add	r3, r2
 800bdae:	4299      	cmp	r1, r3
 800bdb0:	d122      	bne.n	800bdf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe fa57 	bl	800a26a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdbc:	4b19      	ldr	r3, [pc, #100]	; (800be24 <xTaskPriorityInherit+0xc4>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdca:	4b18      	ldr	r3, [pc, #96]	; (800be2c <xTaskPriorityInherit+0xcc>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d903      	bls.n	800bdda <xTaskPriorityInherit+0x7a>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd6:	4a15      	ldr	r2, [pc, #84]	; (800be2c <xTaskPriorityInherit+0xcc>)
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdde:	4613      	mov	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4a10      	ldr	r2, [pc, #64]	; (800be28 <xTaskPriorityInherit+0xc8>)
 800bde8:	441a      	add	r2, r3
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	3304      	adds	r3, #4
 800bdee:	4619      	mov	r1, r3
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	f7fe f9dd 	bl	800a1b0 <vListInsertEnd>
 800bdf6:	e004      	b.n	800be02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <xTaskPriorityInherit+0xc4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be02:	2301      	movs	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	e008      	b.n	800be1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <xTaskPriorityInherit+0xc4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be12:	429a      	cmp	r2, r3
 800be14:	d201      	bcs.n	800be1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be16:	2301      	movs	r3, #1
 800be18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be1a:	68fb      	ldr	r3, [r7, #12]
	}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	20000efc 	.word	0x20000efc
 800be28:	20000f00 	.word	0x20000f00
 800be2c:	200013d8 	.word	0x200013d8

0800be30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be3c:	2300      	movs	r3, #0
 800be3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d056      	beq.n	800bef4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be46:	4b2e      	ldr	r3, [pc, #184]	; (800bf00 <xTaskPriorityDisinherit+0xd0>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	693a      	ldr	r2, [r7, #16]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d00a      	beq.n	800be66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	60fb      	str	r3, [r7, #12]
}
 800be62:	bf00      	nop
 800be64:	e7fe      	b.n	800be64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10a      	bne.n	800be84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	60bb      	str	r3, [r7, #8]
}
 800be80:	bf00      	nop
 800be82:	e7fe      	b.n	800be82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be88:	1e5a      	subs	r2, r3, #1
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be96:	429a      	cmp	r2, r3
 800be98:	d02c      	beq.n	800bef4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d128      	bne.n	800bef4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe f9df 	bl	800a26a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec4:	4b0f      	ldr	r3, [pc, #60]	; (800bf04 <xTaskPriorityDisinherit+0xd4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d903      	bls.n	800bed4 <xTaskPriorityDisinherit+0xa4>
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed0:	4a0c      	ldr	r2, [pc, #48]	; (800bf04 <xTaskPriorityDisinherit+0xd4>)
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed8:	4613      	mov	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4a09      	ldr	r2, [pc, #36]	; (800bf08 <xTaskPriorityDisinherit+0xd8>)
 800bee2:	441a      	add	r2, r3
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	3304      	adds	r3, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	4610      	mov	r0, r2
 800beec:	f7fe f960 	bl	800a1b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bef0:	2301      	movs	r3, #1
 800bef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bef4:	697b      	ldr	r3, [r7, #20]
	}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20000efc 	.word	0x20000efc
 800bf04:	200013d8 	.word	0x200013d8
 800bf08:	20000f00 	.word	0x20000f00

0800bf0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d06a      	beq.n	800bffa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10a      	bne.n	800bf42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	60fb      	str	r3, [r7, #12]
}
 800bf3e:	bf00      	nop
 800bf40:	e7fe      	b.n	800bf40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d902      	bls.n	800bf52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	61fb      	str	r3, [r7, #28]
 800bf50:	e002      	b.n	800bf58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5c:	69fa      	ldr	r2, [r7, #28]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d04b      	beq.n	800bffa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d146      	bne.n	800bffa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf6c:	4b25      	ldr	r3, [pc, #148]	; (800c004 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d10a      	bne.n	800bf8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	60bb      	str	r3, [r7, #8]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	69fa      	ldr	r2, [r7, #28]
 800bf96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	db04      	blt.n	800bfaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	6959      	ldr	r1, [r3, #20]
 800bfae:	693a      	ldr	r2, [r7, #16]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4413      	add	r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4a13      	ldr	r2, [pc, #76]	; (800c008 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bfba:	4413      	add	r3, r2
 800bfbc:	4299      	cmp	r1, r3
 800bfbe:	d11c      	bne.n	800bffa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe f950 	bl	800a26a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfce:	4b0f      	ldr	r3, [pc, #60]	; (800c00c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d903      	bls.n	800bfde <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	4a0c      	ldr	r2, [pc, #48]	; (800c00c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bfdc:	6013      	str	r3, [r2, #0]
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4a07      	ldr	r2, [pc, #28]	; (800c008 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bfec:	441a      	add	r2, r3
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	3304      	adds	r3, #4
 800bff2:	4619      	mov	r1, r3
 800bff4:	4610      	mov	r0, r2
 800bff6:	f7fe f8db 	bl	800a1b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bffa:	bf00      	nop
 800bffc:	3720      	adds	r7, #32
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	20000efc 	.word	0x20000efc
 800c008:	20000f00 	.word	0x20000f00
 800c00c:	200013d8 	.word	0x200013d8

0800c010 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c010:	b480      	push	{r7}
 800c012:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c014:	4b07      	ldr	r3, [pc, #28]	; (800c034 <pvTaskIncrementMutexHeldCount+0x24>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d004      	beq.n	800c026 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c01c:	4b05      	ldr	r3, [pc, #20]	; (800c034 <pvTaskIncrementMutexHeldCount+0x24>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c022:	3201      	adds	r2, #1
 800c024:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <pvTaskIncrementMutexHeldCount+0x24>)
 800c028:	681b      	ldr	r3, [r3, #0]
	}
 800c02a:	4618      	mov	r0, r3
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr
 800c034:	20000efc 	.word	0x20000efc

0800c038 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c042:	f000 ffb7 	bl	800cfb4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c046:	4b1e      	ldr	r3, [pc, #120]	; (800c0c0 <ulTaskNotifyTake+0x88>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d113      	bne.n	800c078 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c050:	4b1b      	ldr	r3, [pc, #108]	; (800c0c0 <ulTaskNotifyTake+0x88>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00b      	beq.n	800c078 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c060:	2101      	movs	r1, #1
 800c062:	6838      	ldr	r0, [r7, #0]
 800c064:	f000 fa1e 	bl	800c4a4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c068:	4b16      	ldr	r3, [pc, #88]	; (800c0c4 <ulTaskNotifyTake+0x8c>)
 800c06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06e:	601a      	str	r2, [r3, #0]
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c078:	f000 ffcc 	bl	800d014 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c07c:	f000 ff9a 	bl	800cfb4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c080:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <ulTaskNotifyTake+0x88>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c086:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00c      	beq.n	800c0a8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <ulTaskNotifyTake+0x88>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2200      	movs	r2, #0
 800c09a:	655a      	str	r2, [r3, #84]	; 0x54
 800c09c:	e004      	b.n	800c0a8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c09e:	4b08      	ldr	r3, [pc, #32]	; (800c0c0 <ulTaskNotifyTake+0x88>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	3a01      	subs	r2, #1
 800c0a6:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <ulTaskNotifyTake+0x88>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c0b2:	f000 ffaf 	bl	800d014 <vPortExitCritical>

		return ulReturn;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
	}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	20000efc 	.word	0x20000efc
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b086      	sub	sp, #24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c0d6:	f000 ff6d 	bl	800cfb4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c0da:	4b26      	ldr	r3, [pc, #152]	; (800c174 <xTaskNotifyWait+0xac>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d01a      	beq.n	800c11e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c0e8:	4b22      	ldr	r3, [pc, #136]	; (800c174 <xTaskNotifyWait+0xac>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	43d2      	mvns	r2, r2
 800c0f2:	400a      	ands	r2, r1
 800c0f4:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c0f6:	4b1f      	ldr	r3, [pc, #124]	; (800c174 <xTaskNotifyWait+0xac>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00b      	beq.n	800c11e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c106:	2101      	movs	r1, #1
 800c108:	6838      	ldr	r0, [r7, #0]
 800c10a:	f000 f9cb 	bl	800c4a4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c10e:	4b1a      	ldr	r3, [pc, #104]	; (800c178 <xTaskNotifyWait+0xb0>)
 800c110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c11e:	f000 ff79 	bl	800d014 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c122:	f000 ff47 	bl	800cfb4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d004      	beq.n	800c136 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c12c:	4b11      	ldr	r3, [pc, #68]	; (800c174 <xTaskNotifyWait+0xac>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c136:	4b0f      	ldr	r3, [pc, #60]	; (800c174 <xTaskNotifyWait+0xac>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b02      	cmp	r3, #2
 800c142:	d002      	beq.n	800c14a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c144:	2300      	movs	r3, #0
 800c146:	617b      	str	r3, [r7, #20]
 800c148:	e008      	b.n	800c15c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c14a:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <xTaskNotifyWait+0xac>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	43d2      	mvns	r2, r2
 800c154:	400a      	ands	r2, r1
 800c156:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800c158:	2301      	movs	r3, #1
 800c15a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c15c:	4b05      	ldr	r3, [pc, #20]	; (800c174 <xTaskNotifyWait+0xac>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c166:	f000 ff55 	bl	800d014 <vPortExitCritical>

		return xReturn;
 800c16a:	697b      	ldr	r3, [r7, #20]
	}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	20000efc 	.word	0x20000efc
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08a      	sub	sp, #40	; 0x28
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	603b      	str	r3, [r7, #0]
 800c188:	4613      	mov	r3, r2
 800c18a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c18c:	2301      	movs	r3, #1
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10a      	bne.n	800c1ac <xTaskGenericNotify+0x30>
	__asm volatile
 800c196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	61bb      	str	r3, [r7, #24]
}
 800c1a8:	bf00      	nop
 800c1aa:	e7fe      	b.n	800c1aa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c1b0:	f000 ff00 	bl	800cfb4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c1c2:	6a3b      	ldr	r3, [r7, #32]
 800c1c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c1c8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c1ca:	6a3b      	ldr	r3, [r7, #32]
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	2b04      	cmp	r3, #4
 800c1d6:	d828      	bhi.n	800c22a <xTaskGenericNotify+0xae>
 800c1d8:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <xTaskGenericNotify+0x64>)
 800c1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1de:	bf00      	nop
 800c1e0:	0800c24b 	.word	0x0800c24b
 800c1e4:	0800c1f5 	.word	0x0800c1f5
 800c1e8:	0800c203 	.word	0x0800c203
 800c1ec:	0800c20f 	.word	0x0800c20f
 800c1f0:	0800c217 	.word	0x0800c217
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	6a3b      	ldr	r3, [r7, #32]
 800c1fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c200:	e026      	b.n	800c250 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c202:	6a3b      	ldr	r3, [r7, #32]
 800c204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c20c:	e020      	b.n	800c250 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c214:	e01c      	b.n	800c250 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c216:	7ffb      	ldrb	r3, [r7, #31]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d003      	beq.n	800c224 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c222:	e015      	b.n	800c250 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c224:	2300      	movs	r3, #0
 800c226:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c228:	e012      	b.n	800c250 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c232:	d00c      	beq.n	800c24e <xTaskGenericNotify+0xd2>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	617b      	str	r3, [r7, #20]
}
 800c246:	bf00      	nop
 800c248:	e7fe      	b.n	800c248 <xTaskGenericNotify+0xcc>
					break;
 800c24a:	bf00      	nop
 800c24c:	e000      	b.n	800c250 <xTaskGenericNotify+0xd4>

					break;
 800c24e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c250:	7ffb      	ldrb	r3, [r7, #31]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d13a      	bne.n	800c2cc <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	3304      	adds	r3, #4
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe f805 	bl	800a26a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c264:	4b1d      	ldr	r3, [pc, #116]	; (800c2dc <xTaskGenericNotify+0x160>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d903      	bls.n	800c274 <xTaskGenericNotify+0xf8>
 800c26c:	6a3b      	ldr	r3, [r7, #32]
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	4a1a      	ldr	r2, [pc, #104]	; (800c2dc <xTaskGenericNotify+0x160>)
 800c272:	6013      	str	r3, [r2, #0]
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c278:	4613      	mov	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4a17      	ldr	r2, [pc, #92]	; (800c2e0 <xTaskGenericNotify+0x164>)
 800c282:	441a      	add	r2, r3
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	3304      	adds	r3, #4
 800c288:	4619      	mov	r1, r3
 800c28a:	4610      	mov	r0, r2
 800c28c:	f7fd ff90 	bl	800a1b0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c290:	6a3b      	ldr	r3, [r7, #32]
 800c292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00a      	beq.n	800c2ae <xTaskGenericNotify+0x132>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	613b      	str	r3, [r7, #16]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b2:	4b0c      	ldr	r3, [pc, #48]	; (800c2e4 <xTaskGenericNotify+0x168>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d907      	bls.n	800c2cc <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <xTaskGenericNotify+0x16c>)
 800c2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c2cc:	f000 fea2 	bl	800d014 <vPortExitCritical>

		return xReturn;
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3728      	adds	r7, #40	; 0x28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	200013d8 	.word	0x200013d8
 800c2e0:	20000f00 	.word	0x20000f00
 800c2e4:	20000efc 	.word	0x20000efc
 800c2e8:	e000ed04 	.word	0xe000ed04

0800c2ec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08e      	sub	sp, #56	; 0x38
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	603b      	str	r3, [r7, #0]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d10a      	bne.n	800c31c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c318:	bf00      	nop
 800c31a:	e7fe      	b.n	800c31a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c31c:	f000 ff2c 	bl	800d178 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c324:	f3ef 8211 	mrs	r2, BASEPRI
 800c328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	623a      	str	r2, [r7, #32]
 800c33a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c33c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c33e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35a:	2202      	movs	r2, #2
 800c35c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	2b04      	cmp	r3, #4
 800c364:	d828      	bhi.n	800c3b8 <xTaskGenericNotifyFromISR+0xcc>
 800c366:	a201      	add	r2, pc, #4	; (adr r2, 800c36c <xTaskGenericNotifyFromISR+0x80>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c3d9 	.word	0x0800c3d9
 800c370:	0800c381 	.word	0x0800c381
 800c374:	0800c38f 	.word	0x0800c38f
 800c378:	0800c39b 	.word	0x0800c39b
 800c37c:	0800c3a3 	.word	0x0800c3a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	431a      	orrs	r2, r3
 800c388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c38c:	e027      	b.n	800c3de <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c398:	e021      	b.n	800c3de <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c3a0:	e01d      	b.n	800c3de <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c3a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d003      	beq.n	800c3b2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c3b0:	e015      	b.n	800c3de <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c3b6:	e012      	b.n	800c3de <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c0:	d00c      	beq.n	800c3dc <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	61bb      	str	r3, [r7, #24]
}
 800c3d4:	bf00      	nop
 800c3d6:	e7fe      	b.n	800c3d6 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c3d8:	bf00      	nop
 800c3da:	e000      	b.n	800c3de <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c3dc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c3de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d146      	bne.n	800c474 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00a      	beq.n	800c404 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	617b      	str	r3, [r7, #20]
}
 800c400:	bf00      	nop
 800c402:	e7fe      	b.n	800c402 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c404:	4b21      	ldr	r3, [pc, #132]	; (800c48c <xTaskGenericNotifyFromISR+0x1a0>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d11d      	bne.n	800c448 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40e:	3304      	adds	r3, #4
 800c410:	4618      	mov	r0, r3
 800c412:	f7fd ff2a 	bl	800a26a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c41a:	4b1d      	ldr	r3, [pc, #116]	; (800c490 <xTaskGenericNotifyFromISR+0x1a4>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d903      	bls.n	800c42a <xTaskGenericNotifyFromISR+0x13e>
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c426:	4a1a      	ldr	r2, [pc, #104]	; (800c490 <xTaskGenericNotifyFromISR+0x1a4>)
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42e:	4613      	mov	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4a17      	ldr	r2, [pc, #92]	; (800c494 <xTaskGenericNotifyFromISR+0x1a8>)
 800c438:	441a      	add	r2, r3
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	3304      	adds	r3, #4
 800c43e:	4619      	mov	r1, r3
 800c440:	4610      	mov	r0, r2
 800c442:	f7fd feb5 	bl	800a1b0 <vListInsertEnd>
 800c446:	e005      	b.n	800c454 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	3318      	adds	r3, #24
 800c44c:	4619      	mov	r1, r3
 800c44e:	4812      	ldr	r0, [pc, #72]	; (800c498 <xTaskGenericNotifyFromISR+0x1ac>)
 800c450:	f7fd feae 	bl	800a1b0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c458:	4b10      	ldr	r3, [pc, #64]	; (800c49c <xTaskGenericNotifyFromISR+0x1b0>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45e:	429a      	cmp	r2, r3
 800c460:	d908      	bls.n	800c474 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c46a:	2201      	movs	r2, #1
 800c46c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c46e:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <xTaskGenericNotifyFromISR+0x1b4>)
 800c470:	2201      	movs	r2, #1
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	f383 8811 	msr	BASEPRI, r3
}
 800c47e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c482:	4618      	mov	r0, r3
 800c484:	3738      	adds	r7, #56	; 0x38
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	200013f8 	.word	0x200013f8
 800c490:	200013d8 	.word	0x200013d8
 800c494:	20000f00 	.word	0x20000f00
 800c498:	20001390 	.word	0x20001390
 800c49c:	20000efc 	.word	0x20000efc
 800c4a0:	200013e4 	.word	0x200013e4

0800c4a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4ae:	4b21      	ldr	r3, [pc, #132]	; (800c534 <prvAddCurrentTaskToDelayedList+0x90>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4b4:	4b20      	ldr	r3, [pc, #128]	; (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fd fed5 	bl	800a26a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c6:	d10a      	bne.n	800c4de <prvAddCurrentTaskToDelayedList+0x3a>
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d007      	beq.n	800c4de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ce:	4b1a      	ldr	r3, [pc, #104]	; (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4819      	ldr	r0, [pc, #100]	; (800c53c <prvAddCurrentTaskToDelayedList+0x98>)
 800c4d8:	f7fd fe6a 	bl	800a1b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4dc:	e026      	b.n	800c52c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4e6:	4b14      	ldr	r3, [pc, #80]	; (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d209      	bcs.n	800c50a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4f6:	4b12      	ldr	r3, [pc, #72]	; (800c540 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	4b0f      	ldr	r3, [pc, #60]	; (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	3304      	adds	r3, #4
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f7fd fe78 	bl	800a1f8 <vListInsert>
}
 800c508:	e010      	b.n	800c52c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c50a:	4b0e      	ldr	r3, [pc, #56]	; (800c544 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	4b0a      	ldr	r3, [pc, #40]	; (800c538 <prvAddCurrentTaskToDelayedList+0x94>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3304      	adds	r3, #4
 800c514:	4619      	mov	r1, r3
 800c516:	4610      	mov	r0, r2
 800c518:	f7fd fe6e 	bl	800a1f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c51c:	4b0a      	ldr	r3, [pc, #40]	; (800c548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	429a      	cmp	r2, r3
 800c524:	d202      	bcs.n	800c52c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c526:	4a08      	ldr	r2, [pc, #32]	; (800c548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	6013      	str	r3, [r2, #0]
}
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	200013d4 	.word	0x200013d4
 800c538:	20000efc 	.word	0x20000efc
 800c53c:	200013bc 	.word	0x200013bc
 800c540:	2000138c 	.word	0x2000138c
 800c544:	20001388 	.word	0x20001388
 800c548:	200013f0 	.word	0x200013f0

0800c54c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	; 0x28
 800c550:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c552:	2300      	movs	r3, #0
 800c554:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c556:	f000 fba1 	bl	800cc9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c55a:	4b1c      	ldr	r3, [pc, #112]	; (800c5cc <xTimerCreateTimerTask+0x80>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d021      	beq.n	800c5a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c562:	2300      	movs	r3, #0
 800c564:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c566:	2300      	movs	r3, #0
 800c568:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c56a:	1d3a      	adds	r2, r7, #4
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	f107 030c 	add.w	r3, r7, #12
 800c574:	4618      	mov	r0, r3
 800c576:	f7fd fd83 	bl	800a080 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	9202      	str	r2, [sp, #8]
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	2302      	movs	r3, #2
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	2300      	movs	r3, #0
 800c58a:	460a      	mov	r2, r1
 800c58c:	4910      	ldr	r1, [pc, #64]	; (800c5d0 <xTimerCreateTimerTask+0x84>)
 800c58e:	4811      	ldr	r0, [pc, #68]	; (800c5d4 <xTimerCreateTimerTask+0x88>)
 800c590:	f7fe fd98 	bl	800b0c4 <xTaskCreateStatic>
 800c594:	4603      	mov	r3, r0
 800c596:	4a10      	ldr	r2, [pc, #64]	; (800c5d8 <xTimerCreateTimerTask+0x8c>)
 800c598:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c59a:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <xTimerCreateTimerTask+0x8c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10a      	bne.n	800c5c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	613b      	str	r3, [r7, #16]
}
 800c5be:	bf00      	nop
 800c5c0:	e7fe      	b.n	800c5c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c5c2:	697b      	ldr	r3, [r7, #20]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	2000142c 	.word	0x2000142c
 800c5d0:	0800f1f0 	.word	0x0800f1f0
 800c5d4:	0800c845 	.word	0x0800c845
 800c5d8:	20001430 	.word	0x20001430

0800c5dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af02      	add	r7, sp, #8
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
 800c5e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c5ea:	202c      	movs	r0, #44	; 0x2c
 800c5ec:	f000 fe04 	bl	800d1f8 <pvPortMalloc>
 800c5f0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00d      	beq.n	800c614 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	68b9      	ldr	r1, [r7, #8]
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f000 f843 	bl	800c69a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c614:	697b      	ldr	r3, [r7, #20]
	}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b08a      	sub	sp, #40	; 0x28
 800c622:	af02      	add	r7, sp, #8
 800c624:	60f8      	str	r0, [r7, #12]
 800c626:	60b9      	str	r1, [r7, #8]
 800c628:	607a      	str	r2, [r7, #4]
 800c62a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c62c:	232c      	movs	r3, #44	; 0x2c
 800c62e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	2b2c      	cmp	r3, #44	; 0x2c
 800c634:	d00a      	beq.n	800c64c <xTimerCreateStatic+0x2e>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	61bb      	str	r3, [r7, #24]
}
 800c648:	bf00      	nop
 800c64a:	e7fe      	b.n	800c64a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c64c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10a      	bne.n	800c66a <xTimerCreateStatic+0x4c>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	617b      	str	r3, [r7, #20]
}
 800c666:	bf00      	nop
 800c668:	e7fe      	b.n	800c668 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00d      	beq.n	800c690 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	2202      	movs	r2, #2
 800c678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	68b9      	ldr	r1, [r7, #8]
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f000 f805 	bl	800c69a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c690:	69fb      	ldr	r3, [r7, #28]
	}
 800c692:	4618      	mov	r0, r3
 800c694:	3720      	adds	r7, #32
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b086      	sub	sp, #24
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	607a      	str	r2, [r7, #4]
 800c6a6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10a      	bne.n	800c6c4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	617b      	str	r3, [r7, #20]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d01e      	beq.n	800c708 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c6ca:	f000 fae7 	bl	800cc9c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	6a3a      	ldr	r2, [r7, #32]
 800c6e4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fd fd53 	bl	800a196 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d008      	beq.n	800c708 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6fc:	f043 0304 	orr.w	r3, r3, #4
 800c700:	b2da      	uxtb	r2, r3
 800c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c708:	bf00      	nop
 800c70a:	3718      	adds	r7, #24
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b08a      	sub	sp, #40	; 0x28
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c71e:	2300      	movs	r3, #0
 800c720:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10a      	bne.n	800c73e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	623b      	str	r3, [r7, #32]
}
 800c73a:	bf00      	nop
 800c73c:	e7fe      	b.n	800c73c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c73e:	4b1a      	ldr	r3, [pc, #104]	; (800c7a8 <xTimerGenericCommand+0x98>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d02a      	beq.n	800c79c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	2b05      	cmp	r3, #5
 800c756:	dc18      	bgt.n	800c78a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c758:	f7ff fae4 	bl	800bd24 <xTaskGetSchedulerState>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d109      	bne.n	800c776 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c762:	4b11      	ldr	r3, [pc, #68]	; (800c7a8 <xTimerGenericCommand+0x98>)
 800c764:	6818      	ldr	r0, [r3, #0]
 800c766:	f107 0110 	add.w	r1, r7, #16
 800c76a:	2300      	movs	r3, #0
 800c76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c76e:	f7fd ff4f 	bl	800a610 <xQueueGenericSend>
 800c772:	6278      	str	r0, [r7, #36]	; 0x24
 800c774:	e012      	b.n	800c79c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c776:	4b0c      	ldr	r3, [pc, #48]	; (800c7a8 <xTimerGenericCommand+0x98>)
 800c778:	6818      	ldr	r0, [r3, #0]
 800c77a:	f107 0110 	add.w	r1, r7, #16
 800c77e:	2300      	movs	r3, #0
 800c780:	2200      	movs	r2, #0
 800c782:	f7fd ff45 	bl	800a610 <xQueueGenericSend>
 800c786:	6278      	str	r0, [r7, #36]	; 0x24
 800c788:	e008      	b.n	800c79c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c78a:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <xTimerGenericCommand+0x98>)
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	f107 0110 	add.w	r1, r7, #16
 800c792:	2300      	movs	r3, #0
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	f7fe f839 	bl	800a80c <xQueueGenericSendFromISR>
 800c79a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3728      	adds	r7, #40	; 0x28
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	2000142c 	.word	0x2000142c

0800c7ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b088      	sub	sp, #32
 800c7b0:	af02      	add	r7, sp, #8
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b6:	4b22      	ldr	r3, [pc, #136]	; (800c840 <prvProcessExpiredTimer+0x94>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fd fd50 	bl	800a26a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7d0:	f003 0304 	and.w	r3, r3, #4
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d022      	beq.n	800c81e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	699a      	ldr	r2, [r3, #24]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	18d1      	adds	r1, r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	6978      	ldr	r0, [r7, #20]
 800c7e6:	f000 f8d1 	bl	800c98c <prvInsertTimerInActiveList>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d01f      	beq.n	800c830 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	6978      	ldr	r0, [r7, #20]
 800c7fc:	f7ff ff88 	bl	800c710 <xTimerGenericCommand>
 800c800:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d113      	bne.n	800c830 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	60fb      	str	r3, [r7, #12]
}
 800c81a:	bf00      	nop
 800c81c:	e7fe      	b.n	800c81c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c824:	f023 0301 	bic.w	r3, r3, #1
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	6978      	ldr	r0, [r7, #20]
 800c836:	4798      	blx	r3
}
 800c838:	bf00      	nop
 800c83a:	3718      	adds	r7, #24
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	20001424 	.word	0x20001424

0800c844 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c84c:	f107 0308 	add.w	r3, r7, #8
 800c850:	4618      	mov	r0, r3
 800c852:	f000 f857 	bl	800c904 <prvGetNextExpireTime>
 800c856:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	4619      	mov	r1, r3
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f000 f803 	bl	800c868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c862:	f000 f8d5 	bl	800ca10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c866:	e7f1      	b.n	800c84c <prvTimerTask+0x8>

0800c868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c872:	f7fe fe63 	bl	800b53c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c876:	f107 0308 	add.w	r3, r7, #8
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 f866 	bl	800c94c <prvSampleTimeNow>
 800c880:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d130      	bne.n	800c8ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10a      	bne.n	800c8a4 <prvProcessTimerOrBlockTask+0x3c>
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	429a      	cmp	r2, r3
 800c894:	d806      	bhi.n	800c8a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c896:	f7fe fe5f 	bl	800b558 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c89a:	68f9      	ldr	r1, [r7, #12]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7ff ff85 	bl	800c7ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c8a2:	e024      	b.n	800c8ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d008      	beq.n	800c8bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8aa:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <prvProcessTimerOrBlockTask+0x90>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <prvProcessTimerOrBlockTask+0x50>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e000      	b.n	800c8ba <prvProcessTimerOrBlockTask+0x52>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8bc:	4b0f      	ldr	r3, [pc, #60]	; (800c8fc <prvProcessTimerOrBlockTask+0x94>)
 800c8be:	6818      	ldr	r0, [r3, #0]
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	f7fe fbc7 	bl	800b05c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8ce:	f7fe fe43 	bl	800b558 <xTaskResumeAll>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10a      	bne.n	800c8ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8d8:	4b09      	ldr	r3, [pc, #36]	; (800c900 <prvProcessTimerOrBlockTask+0x98>)
 800c8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	f3bf 8f6f 	isb	sy
}
 800c8e8:	e001      	b.n	800c8ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8ea:	f7fe fe35 	bl	800b558 <xTaskResumeAll>
}
 800c8ee:	bf00      	nop
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20001428 	.word	0x20001428
 800c8fc:	2000142c 	.word	0x2000142c
 800c900:	e000ed04 	.word	0xe000ed04

0800c904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c90c:	4b0e      	ldr	r3, [pc, #56]	; (800c948 <prvGetNextExpireTime+0x44>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d101      	bne.n	800c91a <prvGetNextExpireTime+0x16>
 800c916:	2201      	movs	r2, #1
 800c918:	e000      	b.n	800c91c <prvGetNextExpireTime+0x18>
 800c91a:	2200      	movs	r2, #0
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d105      	bne.n	800c934 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c928:	4b07      	ldr	r3, [pc, #28]	; (800c948 <prvGetNextExpireTime+0x44>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	e001      	b.n	800c938 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c934:	2300      	movs	r3, #0
 800c936:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c938:	68fb      	ldr	r3, [r7, #12]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	20001424 	.word	0x20001424

0800c94c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c954:	f7fe fe9e 	bl	800b694 <xTaskGetTickCount>
 800c958:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c95a:	4b0b      	ldr	r3, [pc, #44]	; (800c988 <prvSampleTimeNow+0x3c>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	429a      	cmp	r2, r3
 800c962:	d205      	bcs.n	800c970 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c964:	f000 f936 	bl	800cbd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	601a      	str	r2, [r3, #0]
 800c96e:	e002      	b.n	800c976 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c976:	4a04      	ldr	r2, [pc, #16]	; (800c988 <prvSampleTimeNow+0x3c>)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c97c:	68fb      	ldr	r3, [r7, #12]
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	20001434 	.word	0x20001434

0800c98c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c99a:	2300      	movs	r3, #0
 800c99c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d812      	bhi.n	800c9d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	1ad2      	subs	r2, r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	699b      	ldr	r3, [r3, #24]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d302      	bcc.n	800c9c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	617b      	str	r3, [r7, #20]
 800c9c4:	e01b      	b.n	800c9fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9c6:	4b10      	ldr	r3, [pc, #64]	; (800ca08 <prvInsertTimerInActiveList+0x7c>)
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f7fd fc11 	bl	800a1f8 <vListInsert>
 800c9d6:	e012      	b.n	800c9fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d206      	bcs.n	800c9ee <prvInsertTimerInActiveList+0x62>
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d302      	bcc.n	800c9ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	617b      	str	r3, [r7, #20]
 800c9ec:	e007      	b.n	800c9fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9ee:	4b07      	ldr	r3, [pc, #28]	; (800ca0c <prvInsertTimerInActiveList+0x80>)
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	f7fd fbfd 	bl	800a1f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9fe:	697b      	ldr	r3, [r7, #20]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3718      	adds	r7, #24
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20001428 	.word	0x20001428
 800ca0c:	20001424 	.word	0x20001424

0800ca10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08e      	sub	sp, #56	; 0x38
 800ca14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca16:	e0ca      	b.n	800cbae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	da18      	bge.n	800ca50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca1e:	1d3b      	adds	r3, r7, #4
 800ca20:	3304      	adds	r3, #4
 800ca22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10a      	bne.n	800ca40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	61fb      	str	r3, [r7, #28]
}
 800ca3c:	bf00      	nop
 800ca3e:	e7fe      	b.n	800ca3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca46:	6850      	ldr	r0, [r2, #4]
 800ca48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca4a:	6892      	ldr	r2, [r2, #8]
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f2c0 80ab 	blt.w	800cbae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5e:	695b      	ldr	r3, [r3, #20]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d004      	beq.n	800ca6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca66:	3304      	adds	r3, #4
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fd fbfe 	bl	800a26a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca6e:	463b      	mov	r3, r7
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7ff ff6b 	bl	800c94c <prvSampleTimeNow>
 800ca76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b09      	cmp	r3, #9
 800ca7c:	f200 8096 	bhi.w	800cbac <prvProcessReceivedCommands+0x19c>
 800ca80:	a201      	add	r2, pc, #4	; (adr r2, 800ca88 <prvProcessReceivedCommands+0x78>)
 800ca82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca86:	bf00      	nop
 800ca88:	0800cab1 	.word	0x0800cab1
 800ca8c:	0800cab1 	.word	0x0800cab1
 800ca90:	0800cab1 	.word	0x0800cab1
 800ca94:	0800cb25 	.word	0x0800cb25
 800ca98:	0800cb39 	.word	0x0800cb39
 800ca9c:	0800cb83 	.word	0x0800cb83
 800caa0:	0800cab1 	.word	0x0800cab1
 800caa4:	0800cab1 	.word	0x0800cab1
 800caa8:	0800cb25 	.word	0x0800cb25
 800caac:	0800cb39 	.word	0x0800cb39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cab6:	f043 0301 	orr.w	r3, r3, #1
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	18d1      	adds	r1, r2, r3
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad0:	f7ff ff5c 	bl	800c98c <prvInsertTimerInActiveList>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d069      	beq.n	800cbae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cae0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae8:	f003 0304 	and.w	r3, r3, #4
 800caec:	2b00      	cmp	r3, #0
 800caee:	d05e      	beq.n	800cbae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	441a      	add	r2, r3
 800caf8:	2300      	movs	r3, #0
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	2300      	movs	r3, #0
 800cafe:	2100      	movs	r1, #0
 800cb00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb02:	f7ff fe05 	bl	800c710 <xTimerGenericCommand>
 800cb06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d14f      	bne.n	800cbae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	61bb      	str	r3, [r7, #24]
}
 800cb20:	bf00      	nop
 800cb22:	e7fe      	b.n	800cb22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb2a:	f023 0301 	bic.w	r3, r3, #1
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cb36:	e03a      	b.n	800cbae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb3e:	f043 0301 	orr.w	r3, r3, #1
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10a      	bne.n	800cb6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5c:	f383 8811 	msr	BASEPRI, r3
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	617b      	str	r3, [r7, #20]
}
 800cb6a:	bf00      	nop
 800cb6c:	e7fe      	b.n	800cb6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	699a      	ldr	r2, [r3, #24]
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	18d1      	adds	r1, r2, r3
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb7c:	f7ff ff06 	bl	800c98c <prvInsertTimerInActiveList>
					break;
 800cb80:	e015      	b.n	800cbae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb88:	f003 0302 	and.w	r3, r3, #2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d103      	bne.n	800cb98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cb90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb92:	f000 fbfd 	bl	800d390 <vPortFree>
 800cb96:	e00a      	b.n	800cbae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb9e:	f023 0301 	bic.w	r3, r3, #1
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cbaa:	e000      	b.n	800cbae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cbac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbae:	4b08      	ldr	r3, [pc, #32]	; (800cbd0 <prvProcessReceivedCommands+0x1c0>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	1d39      	adds	r1, r7, #4
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fd fec4 	bl	800a944 <xQueueReceive>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f47f af2a 	bne.w	800ca18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cbc4:	bf00      	nop
 800cbc6:	bf00      	nop
 800cbc8:	3730      	adds	r7, #48	; 0x30
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	2000142c 	.word	0x2000142c

0800cbd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbda:	e048      	b.n	800cc6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cbdc:	4b2d      	ldr	r3, [pc, #180]	; (800cc94 <prvSwitchTimerLists+0xc0>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe6:	4b2b      	ldr	r3, [pc, #172]	; (800cc94 <prvSwitchTimerLists+0xc0>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fd fb38 	bl	800a26a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc08:	f003 0304 	and.w	r3, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d02e      	beq.n	800cc6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	699b      	ldr	r3, [r3, #24]
 800cc14:	693a      	ldr	r2, [r7, #16]
 800cc16:	4413      	add	r3, r2
 800cc18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc1a:	68ba      	ldr	r2, [r7, #8]
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d90e      	bls.n	800cc40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc2e:	4b19      	ldr	r3, [pc, #100]	; (800cc94 <prvSwitchTimerLists+0xc0>)
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3304      	adds	r3, #4
 800cc36:	4619      	mov	r1, r3
 800cc38:	4610      	mov	r0, r2
 800cc3a:	f7fd fadd 	bl	800a1f8 <vListInsert>
 800cc3e:	e016      	b.n	800cc6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc40:	2300      	movs	r3, #0
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	2300      	movs	r3, #0
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	2100      	movs	r1, #0
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7ff fd60 	bl	800c710 <xTimerGenericCommand>
 800cc50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10a      	bne.n	800cc6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	603b      	str	r3, [r7, #0]
}
 800cc6a:	bf00      	nop
 800cc6c:	e7fe      	b.n	800cc6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc6e:	4b09      	ldr	r3, [pc, #36]	; (800cc94 <prvSwitchTimerLists+0xc0>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1b1      	bne.n	800cbdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc78:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <prvSwitchTimerLists+0xc0>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc7e:	4b06      	ldr	r3, [pc, #24]	; (800cc98 <prvSwitchTimerLists+0xc4>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a04      	ldr	r2, [pc, #16]	; (800cc94 <prvSwitchTimerLists+0xc0>)
 800cc84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc86:	4a04      	ldr	r2, [pc, #16]	; (800cc98 <prvSwitchTimerLists+0xc4>)
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	6013      	str	r3, [r2, #0]
}
 800cc8c:	bf00      	nop
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	20001424 	.word	0x20001424
 800cc98:	20001428 	.word	0x20001428

0800cc9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cca2:	f000 f987 	bl	800cfb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cca6:	4b15      	ldr	r3, [pc, #84]	; (800ccfc <prvCheckForValidListAndQueue+0x60>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d120      	bne.n	800ccf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ccae:	4814      	ldr	r0, [pc, #80]	; (800cd00 <prvCheckForValidListAndQueue+0x64>)
 800ccb0:	f7fd fa51 	bl	800a156 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ccb4:	4813      	ldr	r0, [pc, #76]	; (800cd04 <prvCheckForValidListAndQueue+0x68>)
 800ccb6:	f7fd fa4e 	bl	800a156 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ccba:	4b13      	ldr	r3, [pc, #76]	; (800cd08 <prvCheckForValidListAndQueue+0x6c>)
 800ccbc:	4a10      	ldr	r2, [pc, #64]	; (800cd00 <prvCheckForValidListAndQueue+0x64>)
 800ccbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ccc0:	4b12      	ldr	r3, [pc, #72]	; (800cd0c <prvCheckForValidListAndQueue+0x70>)
 800ccc2:	4a10      	ldr	r2, [pc, #64]	; (800cd04 <prvCheckForValidListAndQueue+0x68>)
 800ccc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	4b11      	ldr	r3, [pc, #68]	; (800cd10 <prvCheckForValidListAndQueue+0x74>)
 800cccc:	4a11      	ldr	r2, [pc, #68]	; (800cd14 <prvCheckForValidListAndQueue+0x78>)
 800ccce:	2110      	movs	r1, #16
 800ccd0:	200a      	movs	r0, #10
 800ccd2:	f7fd fb5d 	bl	800a390 <xQueueGenericCreateStatic>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	4a08      	ldr	r2, [pc, #32]	; (800ccfc <prvCheckForValidListAndQueue+0x60>)
 800ccda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ccdc:	4b07      	ldr	r3, [pc, #28]	; (800ccfc <prvCheckForValidListAndQueue+0x60>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d005      	beq.n	800ccf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cce4:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <prvCheckForValidListAndQueue+0x60>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	490b      	ldr	r1, [pc, #44]	; (800cd18 <prvCheckForValidListAndQueue+0x7c>)
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe f962 	bl	800afb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccf0:	f000 f990 	bl	800d014 <vPortExitCritical>
}
 800ccf4:	bf00      	nop
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	2000142c 	.word	0x2000142c
 800cd00:	200013fc 	.word	0x200013fc
 800cd04:	20001410 	.word	0x20001410
 800cd08:	20001424 	.word	0x20001424
 800cd0c:	20001428 	.word	0x20001428
 800cd10:	200014d8 	.word	0x200014d8
 800cd14:	20001438 	.word	0x20001438
 800cd18:	0800f1f8 	.word	0x0800f1f8

0800cd1c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10a      	bne.n	800cd44 <pvTimerGetTimerID+0x28>
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	60fb      	str	r3, [r7, #12]
}
 800cd40:	bf00      	nop
 800cd42:	e7fe      	b.n	800cd42 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cd44:	f000 f936 	bl	800cfb4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	69db      	ldr	r3, [r3, #28]
 800cd4c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cd4e:	f000 f961 	bl	800d014 <vPortExitCritical>

	return pvReturn;
 800cd52:	693b      	ldr	r3, [r7, #16]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3b04      	subs	r3, #4
 800cd6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	3b04      	subs	r3, #4
 800cd7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	f023 0201 	bic.w	r2, r3, #1
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	3b04      	subs	r3, #4
 800cd8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd8c:	4a0c      	ldr	r2, [pc, #48]	; (800cdc0 <pxPortInitialiseStack+0x64>)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3b14      	subs	r3, #20
 800cd96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	3b04      	subs	r3, #4
 800cda2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f06f 0202 	mvn.w	r2, #2
 800cdaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	3b20      	subs	r3, #32
 800cdb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr
 800cdc0:	0800cdc5 	.word	0x0800cdc5

0800cdc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cdce:	4b12      	ldr	r3, [pc, #72]	; (800ce18 <prvTaskExitError+0x54>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd6:	d00a      	beq.n	800cdee <prvTaskExitError+0x2a>
	__asm volatile
 800cdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cddc:	f383 8811 	msr	BASEPRI, r3
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	60fb      	str	r3, [r7, #12]
}
 800cdea:	bf00      	nop
 800cdec:	e7fe      	b.n	800cdec <prvTaskExitError+0x28>
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	60bb      	str	r3, [r7, #8]
}
 800ce00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ce02:	bf00      	nop
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d0fc      	beq.n	800ce04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ce0a:	bf00      	nop
 800ce0c:	bf00      	nop
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	2000006c 	.word	0x2000006c
 800ce1c:	00000000 	.word	0x00000000

0800ce20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce20:	4b07      	ldr	r3, [pc, #28]	; (800ce40 <pxCurrentTCBConst2>)
 800ce22:	6819      	ldr	r1, [r3, #0]
 800ce24:	6808      	ldr	r0, [r1, #0]
 800ce26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2a:	f380 8809 	msr	PSP, r0
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f04f 0000 	mov.w	r0, #0
 800ce36:	f380 8811 	msr	BASEPRI, r0
 800ce3a:	4770      	bx	lr
 800ce3c:	f3af 8000 	nop.w

0800ce40 <pxCurrentTCBConst2>:
 800ce40:	20000efc 	.word	0x20000efc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop

0800ce48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce48:	4808      	ldr	r0, [pc, #32]	; (800ce6c <prvPortStartFirstTask+0x24>)
 800ce4a:	6800      	ldr	r0, [r0, #0]
 800ce4c:	6800      	ldr	r0, [r0, #0]
 800ce4e:	f380 8808 	msr	MSP, r0
 800ce52:	f04f 0000 	mov.w	r0, #0
 800ce56:	f380 8814 	msr	CONTROL, r0
 800ce5a:	b662      	cpsie	i
 800ce5c:	b661      	cpsie	f
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	df00      	svc	0
 800ce68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce6a:	bf00      	nop
 800ce6c:	e000ed08 	.word	0xe000ed08

0800ce70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce76:	4b46      	ldr	r3, [pc, #280]	; (800cf90 <xPortStartScheduler+0x120>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a46      	ldr	r2, [pc, #280]	; (800cf94 <xPortStartScheduler+0x124>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d10a      	bne.n	800ce96 <xPortStartScheduler+0x26>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	f383 8811 	msr	BASEPRI, r3
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	613b      	str	r3, [r7, #16]
}
 800ce92:	bf00      	nop
 800ce94:	e7fe      	b.n	800ce94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce96:	4b3e      	ldr	r3, [pc, #248]	; (800cf90 <xPortStartScheduler+0x120>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a3f      	ldr	r2, [pc, #252]	; (800cf98 <xPortStartScheduler+0x128>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d10a      	bne.n	800ceb6 <xPortStartScheduler+0x46>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	60fb      	str	r3, [r7, #12]
}
 800ceb2:	bf00      	nop
 800ceb4:	e7fe      	b.n	800ceb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ceb6:	4b39      	ldr	r3, [pc, #228]	; (800cf9c <xPortStartScheduler+0x12c>)
 800ceb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	22ff      	movs	r2, #255	; 0xff
 800cec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	4b31      	ldr	r3, [pc, #196]	; (800cfa0 <xPortStartScheduler+0x130>)
 800cedc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cede:	4b31      	ldr	r3, [pc, #196]	; (800cfa4 <xPortStartScheduler+0x134>)
 800cee0:	2207      	movs	r2, #7
 800cee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cee4:	e009      	b.n	800cefa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cee6:	4b2f      	ldr	r3, [pc, #188]	; (800cfa4 <xPortStartScheduler+0x134>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	4a2d      	ldr	r2, [pc, #180]	; (800cfa4 <xPortStartScheduler+0x134>)
 800ceee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cefa:	78fb      	ldrb	r3, [r7, #3]
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf02:	2b80      	cmp	r3, #128	; 0x80
 800cf04:	d0ef      	beq.n	800cee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf06:	4b27      	ldr	r3, [pc, #156]	; (800cfa4 <xPortStartScheduler+0x134>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f1c3 0307 	rsb	r3, r3, #7
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	d00a      	beq.n	800cf28 <xPortStartScheduler+0xb8>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	60bb      	str	r3, [r7, #8]
}
 800cf24:	bf00      	nop
 800cf26:	e7fe      	b.n	800cf26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf28:	4b1e      	ldr	r3, [pc, #120]	; (800cfa4 <xPortStartScheduler+0x134>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	021b      	lsls	r3, r3, #8
 800cf2e:	4a1d      	ldr	r2, [pc, #116]	; (800cfa4 <xPortStartScheduler+0x134>)
 800cf30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf32:	4b1c      	ldr	r3, [pc, #112]	; (800cfa4 <xPortStartScheduler+0x134>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf3a:	4a1a      	ldr	r2, [pc, #104]	; (800cfa4 <xPortStartScheduler+0x134>)
 800cf3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf46:	4b18      	ldr	r3, [pc, #96]	; (800cfa8 <xPortStartScheduler+0x138>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a17      	ldr	r2, [pc, #92]	; (800cfa8 <xPortStartScheduler+0x138>)
 800cf4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf52:	4b15      	ldr	r3, [pc, #84]	; (800cfa8 <xPortStartScheduler+0x138>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a14      	ldr	r2, [pc, #80]	; (800cfa8 <xPortStartScheduler+0x138>)
 800cf58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf5e:	f000 f8dd 	bl	800d11c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf62:	4b12      	ldr	r3, [pc, #72]	; (800cfac <xPortStartScheduler+0x13c>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf68:	f000 f8fc 	bl	800d164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf6c:	4b10      	ldr	r3, [pc, #64]	; (800cfb0 <xPortStartScheduler+0x140>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a0f      	ldr	r2, [pc, #60]	; (800cfb0 <xPortStartScheduler+0x140>)
 800cf72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf78:	f7ff ff66 	bl	800ce48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf7c:	f7fe fc66 	bl	800b84c <vTaskSwitchContext>
	prvTaskExitError();
 800cf80:	f7ff ff20 	bl	800cdc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3718      	adds	r7, #24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	e000ed00 	.word	0xe000ed00
 800cf94:	410fc271 	.word	0x410fc271
 800cf98:	410fc270 	.word	0x410fc270
 800cf9c:	e000e400 	.word	0xe000e400
 800cfa0:	20001528 	.word	0x20001528
 800cfa4:	2000152c 	.word	0x2000152c
 800cfa8:	e000ed20 	.word	0xe000ed20
 800cfac:	2000006c 	.word	0x2000006c
 800cfb0:	e000ef34 	.word	0xe000ef34

0800cfb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
	__asm volatile
 800cfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	607b      	str	r3, [r7, #4]
}
 800cfcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cfce:	4b0f      	ldr	r3, [pc, #60]	; (800d00c <vPortEnterCritical+0x58>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	4a0d      	ldr	r2, [pc, #52]	; (800d00c <vPortEnterCritical+0x58>)
 800cfd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cfd8:	4b0c      	ldr	r3, [pc, #48]	; (800d00c <vPortEnterCritical+0x58>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d10f      	bne.n	800d000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfe0:	4b0b      	ldr	r3, [pc, #44]	; (800d010 <vPortEnterCritical+0x5c>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00a      	beq.n	800d000 <vPortEnterCritical+0x4c>
	__asm volatile
 800cfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfee:	f383 8811 	msr	BASEPRI, r3
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	603b      	str	r3, [r7, #0]
}
 800cffc:	bf00      	nop
 800cffe:	e7fe      	b.n	800cffe <vPortEnterCritical+0x4a>
	}
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	2000006c 	.word	0x2000006c
 800d010:	e000ed04 	.word	0xe000ed04

0800d014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d01a:	4b12      	ldr	r3, [pc, #72]	; (800d064 <vPortExitCritical+0x50>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d10a      	bne.n	800d038 <vPortExitCritical+0x24>
	__asm volatile
 800d022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	607b      	str	r3, [r7, #4]
}
 800d034:	bf00      	nop
 800d036:	e7fe      	b.n	800d036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d038:	4b0a      	ldr	r3, [pc, #40]	; (800d064 <vPortExitCritical+0x50>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	4a09      	ldr	r2, [pc, #36]	; (800d064 <vPortExitCritical+0x50>)
 800d040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d042:	4b08      	ldr	r3, [pc, #32]	; (800d064 <vPortExitCritical+0x50>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d105      	bne.n	800d056 <vPortExitCritical+0x42>
 800d04a:	2300      	movs	r3, #0
 800d04c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	f383 8811 	msr	BASEPRI, r3
}
 800d054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	2000006c 	.word	0x2000006c
	...

0800d070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d070:	f3ef 8009 	mrs	r0, PSP
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	4b15      	ldr	r3, [pc, #84]	; (800d0d0 <pxCurrentTCBConst>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	f01e 0f10 	tst.w	lr, #16
 800d080:	bf08      	it	eq
 800d082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08a:	6010      	str	r0, [r2, #0]
 800d08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d090:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d094:	f380 8811 	msr	BASEPRI, r0
 800d098:	f3bf 8f4f 	dsb	sy
 800d09c:	f3bf 8f6f 	isb	sy
 800d0a0:	f7fe fbd4 	bl	800b84c <vTaskSwitchContext>
 800d0a4:	f04f 0000 	mov.w	r0, #0
 800d0a8:	f380 8811 	msr	BASEPRI, r0
 800d0ac:	bc09      	pop	{r0, r3}
 800d0ae:	6819      	ldr	r1, [r3, #0]
 800d0b0:	6808      	ldr	r0, [r1, #0]
 800d0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b6:	f01e 0f10 	tst.w	lr, #16
 800d0ba:	bf08      	it	eq
 800d0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d0c0:	f380 8809 	msr	PSP, r0
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	f3af 8000 	nop.w

0800d0d0 <pxCurrentTCBConst>:
 800d0d0:	20000efc 	.word	0x20000efc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d0d4:	bf00      	nop
 800d0d6:	bf00      	nop

0800d0d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	607b      	str	r3, [r7, #4]
}
 800d0f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0f2:	f7fe faf1 	bl	800b6d8 <xTaskIncrementTick>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0fc:	4b06      	ldr	r3, [pc, #24]	; (800d118 <xPortSysTickHandler+0x40>)
 800d0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	2300      	movs	r3, #0
 800d106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	f383 8811 	msr	BASEPRI, r3
}
 800d10e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d110:	bf00      	nop
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	e000ed04 	.word	0xe000ed04

0800d11c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d11c:	b480      	push	{r7}
 800d11e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d120:	4b0b      	ldr	r3, [pc, #44]	; (800d150 <vPortSetupTimerInterrupt+0x34>)
 800d122:	2200      	movs	r2, #0
 800d124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d126:	4b0b      	ldr	r3, [pc, #44]	; (800d154 <vPortSetupTimerInterrupt+0x38>)
 800d128:	2200      	movs	r2, #0
 800d12a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d12c:	4b0a      	ldr	r3, [pc, #40]	; (800d158 <vPortSetupTimerInterrupt+0x3c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a0a      	ldr	r2, [pc, #40]	; (800d15c <vPortSetupTimerInterrupt+0x40>)
 800d132:	fba2 2303 	umull	r2, r3, r2, r3
 800d136:	099b      	lsrs	r3, r3, #6
 800d138:	4a09      	ldr	r2, [pc, #36]	; (800d160 <vPortSetupTimerInterrupt+0x44>)
 800d13a:	3b01      	subs	r3, #1
 800d13c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d13e:	4b04      	ldr	r3, [pc, #16]	; (800d150 <vPortSetupTimerInterrupt+0x34>)
 800d140:	2207      	movs	r2, #7
 800d142:	601a      	str	r2, [r3, #0]
}
 800d144:	bf00      	nop
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	e000e010 	.word	0xe000e010
 800d154:	e000e018 	.word	0xe000e018
 800d158:	20000060 	.word	0x20000060
 800d15c:	10624dd3 	.word	0x10624dd3
 800d160:	e000e014 	.word	0xe000e014

0800d164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d174 <vPortEnableVFP+0x10>
 800d168:	6801      	ldr	r1, [r0, #0]
 800d16a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d16e:	6001      	str	r1, [r0, #0]
 800d170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d172:	bf00      	nop
 800d174:	e000ed88 	.word	0xe000ed88

0800d178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d17e:	f3ef 8305 	mrs	r3, IPSR
 800d182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b0f      	cmp	r3, #15
 800d188:	d914      	bls.n	800d1b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d18a:	4a17      	ldr	r2, [pc, #92]	; (800d1e8 <vPortValidateInterruptPriority+0x70>)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	4413      	add	r3, r2
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d194:	4b15      	ldr	r3, [pc, #84]	; (800d1ec <vPortValidateInterruptPriority+0x74>)
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	7afa      	ldrb	r2, [r7, #11]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d20a      	bcs.n	800d1b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	607b      	str	r3, [r7, #4]
}
 800d1b0:	bf00      	nop
 800d1b2:	e7fe      	b.n	800d1b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d1b4:	4b0e      	ldr	r3, [pc, #56]	; (800d1f0 <vPortValidateInterruptPriority+0x78>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d1bc:	4b0d      	ldr	r3, [pc, #52]	; (800d1f4 <vPortValidateInterruptPriority+0x7c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d90a      	bls.n	800d1da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c8:	f383 8811 	msr	BASEPRI, r3
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	603b      	str	r3, [r7, #0]
}
 800d1d6:	bf00      	nop
 800d1d8:	e7fe      	b.n	800d1d8 <vPortValidateInterruptPriority+0x60>
	}
 800d1da:	bf00      	nop
 800d1dc:	3714      	adds	r7, #20
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	e000e3f0 	.word	0xe000e3f0
 800d1ec:	20001528 	.word	0x20001528
 800d1f0:	e000ed0c 	.word	0xe000ed0c
 800d1f4:	2000152c 	.word	0x2000152c

0800d1f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08a      	sub	sp, #40	; 0x28
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d200:	2300      	movs	r3, #0
 800d202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d204:	f7fe f99a 	bl	800b53c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d208:	4b5b      	ldr	r3, [pc, #364]	; (800d378 <pvPortMalloc+0x180>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d210:	f000 f920 	bl	800d454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d214:	4b59      	ldr	r3, [pc, #356]	; (800d37c <pvPortMalloc+0x184>)
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4013      	ands	r3, r2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f040 8093 	bne.w	800d348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d01d      	beq.n	800d264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d228:	2208      	movs	r2, #8
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4413      	add	r3, r2
 800d22e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f003 0307 	and.w	r3, r3, #7
 800d236:	2b00      	cmp	r3, #0
 800d238:	d014      	beq.n	800d264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f023 0307 	bic.w	r3, r3, #7
 800d240:	3308      	adds	r3, #8
 800d242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00a      	beq.n	800d264 <pvPortMalloc+0x6c>
	__asm volatile
 800d24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d252:	f383 8811 	msr	BASEPRI, r3
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	617b      	str	r3, [r7, #20]
}
 800d260:	bf00      	nop
 800d262:	e7fe      	b.n	800d262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d06e      	beq.n	800d348 <pvPortMalloc+0x150>
 800d26a:	4b45      	ldr	r3, [pc, #276]	; (800d380 <pvPortMalloc+0x188>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d869      	bhi.n	800d348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d274:	4b43      	ldr	r3, [pc, #268]	; (800d384 <pvPortMalloc+0x18c>)
 800d276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d278:	4b42      	ldr	r3, [pc, #264]	; (800d384 <pvPortMalloc+0x18c>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d27e:	e004      	b.n	800d28a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	429a      	cmp	r2, r3
 800d292:	d903      	bls.n	800d29c <pvPortMalloc+0xa4>
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1f1      	bne.n	800d280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d29c:	4b36      	ldr	r3, [pc, #216]	; (800d378 <pvPortMalloc+0x180>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d050      	beq.n	800d348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2208      	movs	r2, #8
 800d2ac:	4413      	add	r3, r2
 800d2ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	6a3b      	ldr	r3, [r7, #32]
 800d2b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	1ad2      	subs	r2, r2, r3
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d91f      	bls.n	800d308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	f003 0307 	and.w	r3, r3, #7
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00a      	beq.n	800d2f0 <pvPortMalloc+0xf8>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	613b      	str	r3, [r7, #16]
}
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	685a      	ldr	r2, [r3, #4]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	1ad2      	subs	r2, r2, r3
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d302:	69b8      	ldr	r0, [r7, #24]
 800d304:	f000 f908 	bl	800d518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d308:	4b1d      	ldr	r3, [pc, #116]	; (800d380 <pvPortMalloc+0x188>)
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	4a1b      	ldr	r2, [pc, #108]	; (800d380 <pvPortMalloc+0x188>)
 800d314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d316:	4b1a      	ldr	r3, [pc, #104]	; (800d380 <pvPortMalloc+0x188>)
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	4b1b      	ldr	r3, [pc, #108]	; (800d388 <pvPortMalloc+0x190>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d203      	bcs.n	800d32a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d322:	4b17      	ldr	r3, [pc, #92]	; (800d380 <pvPortMalloc+0x188>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a18      	ldr	r2, [pc, #96]	; (800d388 <pvPortMalloc+0x190>)
 800d328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	685a      	ldr	r2, [r3, #4]
 800d32e:	4b13      	ldr	r3, [pc, #76]	; (800d37c <pvPortMalloc+0x184>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	431a      	orrs	r2, r3
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	2200      	movs	r2, #0
 800d33c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d33e:	4b13      	ldr	r3, [pc, #76]	; (800d38c <pvPortMalloc+0x194>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3301      	adds	r3, #1
 800d344:	4a11      	ldr	r2, [pc, #68]	; (800d38c <pvPortMalloc+0x194>)
 800d346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d348:	f7fe f906 	bl	800b558 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	f003 0307 	and.w	r3, r3, #7
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00a      	beq.n	800d36c <pvPortMalloc+0x174>
	__asm volatile
 800d356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35a:	f383 8811 	msr	BASEPRI, r3
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	60fb      	str	r3, [r7, #12]
}
 800d368:	bf00      	nop
 800d36a:	e7fe      	b.n	800d36a <pvPortMalloc+0x172>
	return pvReturn;
 800d36c:	69fb      	ldr	r3, [r7, #28]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3728      	adds	r7, #40	; 0x28
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	20002138 	.word	0x20002138
 800d37c:	2000214c 	.word	0x2000214c
 800d380:	2000213c 	.word	0x2000213c
 800d384:	20002130 	.word	0x20002130
 800d388:	20002140 	.word	0x20002140
 800d38c:	20002144 	.word	0x20002144

0800d390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d04d      	beq.n	800d43e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d3a2:	2308      	movs	r3, #8
 800d3a4:	425b      	negs	r3, r3
 800d3a6:	697a      	ldr	r2, [r7, #20]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	685a      	ldr	r2, [r3, #4]
 800d3b4:	4b24      	ldr	r3, [pc, #144]	; (800d448 <vPortFree+0xb8>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10a      	bne.n	800d3d4 <vPortFree+0x44>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	60fb      	str	r3, [r7, #12]
}
 800d3d0:	bf00      	nop
 800d3d2:	e7fe      	b.n	800d3d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00a      	beq.n	800d3f2 <vPortFree+0x62>
	__asm volatile
 800d3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e0:	f383 8811 	msr	BASEPRI, r3
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	60bb      	str	r3, [r7, #8]
}
 800d3ee:	bf00      	nop
 800d3f0:	e7fe      	b.n	800d3f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	4b14      	ldr	r3, [pc, #80]	; (800d448 <vPortFree+0xb8>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d01e      	beq.n	800d43e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d11a      	bne.n	800d43e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	685a      	ldr	r2, [r3, #4]
 800d40c:	4b0e      	ldr	r3, [pc, #56]	; (800d448 <vPortFree+0xb8>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	43db      	mvns	r3, r3
 800d412:	401a      	ands	r2, r3
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d418:	f7fe f890 	bl	800b53c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	685a      	ldr	r2, [r3, #4]
 800d420:	4b0a      	ldr	r3, [pc, #40]	; (800d44c <vPortFree+0xbc>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4413      	add	r3, r2
 800d426:	4a09      	ldr	r2, [pc, #36]	; (800d44c <vPortFree+0xbc>)
 800d428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d42a:	6938      	ldr	r0, [r7, #16]
 800d42c:	f000 f874 	bl	800d518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d430:	4b07      	ldr	r3, [pc, #28]	; (800d450 <vPortFree+0xc0>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3301      	adds	r3, #1
 800d436:	4a06      	ldr	r2, [pc, #24]	; (800d450 <vPortFree+0xc0>)
 800d438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d43a:	f7fe f88d 	bl	800b558 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d43e:	bf00      	nop
 800d440:	3718      	adds	r7, #24
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	2000214c 	.word	0x2000214c
 800d44c:	2000213c 	.word	0x2000213c
 800d450:	20002148 	.word	0x20002148

0800d454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d45a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d45e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d460:	4b27      	ldr	r3, [pc, #156]	; (800d500 <prvHeapInit+0xac>)
 800d462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00c      	beq.n	800d488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	3307      	adds	r3, #7
 800d472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f023 0307 	bic.w	r3, r3, #7
 800d47a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	4a1f      	ldr	r2, [pc, #124]	; (800d500 <prvHeapInit+0xac>)
 800d484:	4413      	add	r3, r2
 800d486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d48c:	4a1d      	ldr	r2, [pc, #116]	; (800d504 <prvHeapInit+0xb0>)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d492:	4b1c      	ldr	r3, [pc, #112]	; (800d504 <prvHeapInit+0xb0>)
 800d494:	2200      	movs	r2, #0
 800d496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	4413      	add	r3, r2
 800d49e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d4a0:	2208      	movs	r2, #8
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	1a9b      	subs	r3, r3, r2
 800d4a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f023 0307 	bic.w	r3, r3, #7
 800d4ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	4a15      	ldr	r2, [pc, #84]	; (800d508 <prvHeapInit+0xb4>)
 800d4b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d4b6:	4b14      	ldr	r3, [pc, #80]	; (800d508 <prvHeapInit+0xb4>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d4be:	4b12      	ldr	r3, [pc, #72]	; (800d508 <prvHeapInit+0xb4>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	1ad2      	subs	r2, r2, r3
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4d4:	4b0c      	ldr	r3, [pc, #48]	; (800d508 <prvHeapInit+0xb4>)
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	4a0a      	ldr	r2, [pc, #40]	; (800d50c <prvHeapInit+0xb8>)
 800d4e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	4a09      	ldr	r2, [pc, #36]	; (800d510 <prvHeapInit+0xbc>)
 800d4ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4ec:	4b09      	ldr	r3, [pc, #36]	; (800d514 <prvHeapInit+0xc0>)
 800d4ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4f2:	601a      	str	r2, [r3, #0]
}
 800d4f4:	bf00      	nop
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	20001530 	.word	0x20001530
 800d504:	20002130 	.word	0x20002130
 800d508:	20002138 	.word	0x20002138
 800d50c:	20002140 	.word	0x20002140
 800d510:	2000213c 	.word	0x2000213c
 800d514:	2000214c 	.word	0x2000214c

0800d518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d520:	4b28      	ldr	r3, [pc, #160]	; (800d5c4 <prvInsertBlockIntoFreeList+0xac>)
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	e002      	b.n	800d52c <prvInsertBlockIntoFreeList+0x14>
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	429a      	cmp	r2, r3
 800d534:	d8f7      	bhi.n	800d526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	4413      	add	r3, r2
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	429a      	cmp	r2, r3
 800d546:	d108      	bne.n	800d55a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	441a      	add	r2, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	441a      	add	r2, r3
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d118      	bne.n	800d5a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	4b15      	ldr	r3, [pc, #84]	; (800d5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	429a      	cmp	r2, r3
 800d578:	d00d      	beq.n	800d596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	685a      	ldr	r2, [r3, #4]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	441a      	add	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	e008      	b.n	800d5a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d596:	4b0c      	ldr	r3, [pc, #48]	; (800d5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	601a      	str	r2, [r3, #0]
 800d59e:	e003      	b.n	800d5a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d002      	beq.n	800d5b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5b6:	bf00      	nop
 800d5b8:	3714      	adds	r7, #20
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	20002130 	.word	0x20002130
 800d5c8:	20002138 	.word	0x20002138

0800d5cc <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d5de:	4619      	mov	r1, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	78fa      	ldrb	r2, [r7, #3]
 800d5e4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	425a      	negs	r2, r3
 800d5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d5f8:	bf58      	it	pl
 800d5fa:	4253      	negpl	r3, r2
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d60a:	2b80      	cmp	r3, #128	; 0x80
 800d60c:	d113      	bne.n	800d636 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d61c:	3301      	adds	r3, #1
 800d61e:	425a      	negs	r2, r3
 800d620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d628:	bf58      	it	pl
 800d62a:	4253      	negpl	r3, r2
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800d634:	e00b      	b.n	800d64e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d644:	3301      	adds	r3, #1
 800d646:	b2da      	uxtb	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d64e:	bf00      	nop
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr

0800d65a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b082      	sub	sp, #8
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d66a:	461a      	mov	r2, r3
 800d66c:	6839      	ldr	r1, [r7, #0]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f805 	bl	800d67e <RingGetNBytes>
 800d674:	4603      	mov	r3, r0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b086      	sub	sp, #24
 800d682:	af00      	add	r7, sp, #0
 800d684:	60f8      	str	r0, [r7, #12]
 800d686:	60b9      	str	r1, [r7, #8]
 800d688:	4613      	mov	r3, r2
 800d68a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <RingGetNBytes+0x1e>
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <RingGetNBytes+0x22>
 800d69c:	2300      	movs	r3, #0
 800d69e:	e03e      	b.n	800d71e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d6a0:	79fb      	ldrb	r3, [r7, #7]
 800d6a2:	2b80      	cmp	r3, #128	; 0x80
 800d6a4:	d901      	bls.n	800d6aa <RingGetNBytes+0x2c>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e039      	b.n	800d71e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75fb      	strb	r3, [r7, #23]
 800d6ae:	e01b      	b.n	800d6e8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	4413      	add	r3, r2
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	5c52      	ldrb	r2, [r2, r1]
 800d6c2:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	425a      	negs	r2, r3
 800d6ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d6d6:	bf58      	it	pl
 800d6d8:	4253      	negpl	r3, r2
 800d6da:	b2da      	uxtb	r2, r3
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	75fb      	strb	r3, [r7, #23]
 800d6e8:	7dfa      	ldrb	r2, [r7, #23]
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d205      	bcs.n	800d6fc <RingGetNBytes+0x7e>
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d6f6:	7dfa      	ldrb	r2, [r7, #23]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d3d9      	bcc.n	800d6b0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	1ad3      	subs	r3, r2, r3
 800d706:	b2da      	uxtb	r2, r3
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f000 f805 	bl	800d726 <RingClear>

	return uCounter;
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3718      	adds	r7, #24
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800d726:	b480      	push	{r7}
 800d728:	b083      	sub	sp, #12
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d74e:	bf00      	nop
 800d750:	370c      	adds	r7, #12
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
	...

0800d75c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af02      	add	r7, sp, #8
 800d762:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d764:	4b42      	ldr	r3, [pc, #264]	; (800d870 <ModbusInit+0x114>)
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d87d      	bhi.n	800d868 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	33d0      	adds	r3, #208	; 0xd0
 800d770:	4618      	mov	r0, r3
 800d772:	f7ff ffd8 	bl	800d726 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d109      	bne.n	800d792 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d77e:	4a3d      	ldr	r2, [pc, #244]	; (800d874 <ModbusInit+0x118>)
 800d780:	6879      	ldr	r1, [r7, #4]
 800d782:	483d      	ldr	r0, [pc, #244]	; (800d878 <ModbusInit+0x11c>)
 800d784:	f7fc f8ea 	bl	800995c <osThreadNew>
 800d788:	4602      	mov	r2, r0
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d790:	e033      	b.n	800d7fa <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	2b04      	cmp	r3, #4
 800d798:	d12e      	bne.n	800d7f8 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d79a:	4a38      	ldr	r2, [pc, #224]	; (800d87c <ModbusInit+0x120>)
 800d79c:	6879      	ldr	r1, [r7, #4]
 800d79e:	4838      	ldr	r0, [pc, #224]	; (800d880 <ModbusInit+0x124>)
 800d7a0:	f7fc f8dc 	bl	800995c <osThreadNew>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d7b2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d7ba:	4a32      	ldr	r2, [pc, #200]	; (800d884 <ModbusInit+0x128>)
 800d7bc:	9200      	str	r2, [sp, #0]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	4831      	ldr	r0, [pc, #196]	; (800d888 <ModbusInit+0x12c>)
 800d7c2:	f7fe ff0b 	bl	800c5dc <xTimerCreate>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d100      	bne.n	800d7da <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d7d8:	e7fe      	b.n	800d7d8 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800d7da:	4a2c      	ldr	r2, [pc, #176]	; (800d88c <ModbusInit+0x130>)
 800d7dc:	2110      	movs	r1, #16
 800d7de:	2002      	movs	r0, #2
 800d7e0:	f7fc fbc0 	bl	8009f64 <osMessageQueueNew>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d101      	bne.n	800d7fa <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d7f6:	e7fe      	b.n	800d7f6 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800d7f8:	e7fe      	b.n	800d7f8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d100      	bne.n	800d806 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d804:	e7fe      	b.n	800d804 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d80c:	4a20      	ldr	r2, [pc, #128]	; (800d890 <ModbusInit+0x134>)
 800d80e:	9200      	str	r2, [sp, #0]
 800d810:	2200      	movs	r2, #0
 800d812:	2105      	movs	r1, #5
 800d814:	481f      	ldr	r0, [pc, #124]	; (800d894 <ModbusInit+0x138>)
 800d816:	f7fe fee1 	bl	800c5dc <xTimerCreate>
 800d81a:	4602      	mov	r2, r0
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d100      	bne.n	800d82e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d82c:	e7fe      	b.n	800d82c <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800d82e:	4a1a      	ldr	r2, [pc, #104]	; (800d898 <ModbusInit+0x13c>)
 800d830:	2101      	movs	r1, #1
 800d832:	2001      	movs	r0, #1
 800d834:	f7fc fb0d 	bl	8009e52 <osSemaphoreNew>
 800d838:	4602      	mov	r2, r0
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d846:	2b00      	cmp	r3, #0
 800d848:	d100      	bne.n	800d84c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d84a:	e7fe      	b.n	800d84a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d84c:	4b08      	ldr	r3, [pc, #32]	; (800d870 <ModbusInit+0x114>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	4619      	mov	r1, r3
 800d852:	4a12      	ldr	r2, [pc, #72]	; (800d89c <ModbusInit+0x140>)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d85a:	4b05      	ldr	r3, [pc, #20]	; (800d870 <ModbusInit+0x114>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	3301      	adds	r3, #1
 800d860:	b2da      	uxtb	r2, r3
 800d862:	4b03      	ldr	r3, [pc, #12]	; (800d870 <ModbusInit+0x114>)
 800d864:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800d866:	e000      	b.n	800d86a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d868:	e7fe      	b.n	800d868 <ModbusInit+0x10c>
}
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20002158 	.word	0x20002158
 800d874:	0800f3cc 	.word	0x0800f3cc
 800d878:	0800daa9 	.word	0x0800daa9
 800d87c:	0800f3f0 	.word	0x0800f3f0
 800d880:	0800df85 	.word	0x0800df85
 800d884:	0800da4d 	.word	0x0800da4d
 800d888:	0800f244 	.word	0x0800f244
 800d88c:	0800f3b4 	.word	0x0800f3b4
 800d890:	0800d9c9 	.word	0x0800d9c9
 800d894:	0800f254 	.word	0x0800f254
 800d898:	0800f414 	.word	0x0800f414
 800d89c:	20002150 	.word	0x20002150

0800d8a0 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d005      	beq.n	800d8be <ModbusStart+0x1e>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d8b8:	2b04      	cmp	r3, #4
 800d8ba:	d000      	beq.n	800d8be <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d8bc:	e7fe      	b.n	800d8bc <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d004      	beq.n	800d8d2 <ModbusStart+0x32>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d15c      	bne.n	800d98c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d007      	beq.n	800d8ea <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	68d8      	ldr	r0, [r3, #12]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	8a1b      	ldrh	r3, [r3, #16]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	f7f6 fd23 	bl	8004330 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	d105      	bne.n	800d8fe <ModbusStart+0x5e>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d100      	bne.n	800d8fe <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d8fc:	e7fe      	b.n	800d8fc <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800d8fe:	bf00      	nop
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	4618      	mov	r0, r3
 800d906:	f7f9 ff13 	bl	8007730 <HAL_UART_GetState>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b20      	cmp	r3, #32
 800d90e:	d1f7      	bne.n	800d900 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d916:	2b04      	cmp	r3, #4
 800d918:	d11a      	bne.n	800d950 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6858      	ldr	r0, [r3, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	33d0      	adds	r3, #208	; 0xd0
 800d922:	2280      	movs	r2, #128	; 0x80
 800d924:	4619      	mov	r1, r3
 800d926:	f7fb feac 	bl	8009682 <HAL_UARTEx_ReceiveToIdle_DMA>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d000      	beq.n	800d932 <ModbusStart+0x92>
        	   {
        	         while(1)
 800d930:	e7fe      	b.n	800d930 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f022 0204 	bic.w	r2, r2, #4
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	e00b      	b.n	800d968 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6858      	ldr	r0, [r3, #4]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	33b8      	adds	r3, #184	; 0xb8
 800d958:	2201      	movs	r2, #1
 800d95a:	4619      	mov	r1, r3
 800d95c:	f7f9 f8ce 	bl	8006afc <HAL_UART_Receive_IT>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d000      	beq.n	800d968 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800d966:	e7fe      	b.n	800d966 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	7a1b      	ldrb	r3, [r3, #8]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d004      	beq.n	800d97a <ModbusStart+0xda>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b04      	cmp	r3, #4
 800d976:	d100      	bne.n	800d97a <ModbusStart+0xda>
          {
        	  while(1)
 800d978:	e7fe      	b.n	800d978 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	7a1b      	ldrb	r3, [r3, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d104      	bne.n	800d98c <ModbusStart+0xec>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b03      	cmp	r3, #3
 800d988:	d100      	bne.n	800d98c <ModbusStart+0xec>
          {
             	  while(1)
 800d98a:	e7fe      	b.n	800d98a <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b086      	sub	sp, #24
 800d9cc:	af02      	add	r7, sp, #8
 800d9ce:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	e02a      	b.n	800da2c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d9d6:	4a1b      	ldr	r2, [pc, #108]	; (800da44 <vTimerCallbackT35+0x7c>)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d11e      	bne.n	800da26 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d9e8:	4a16      	ldr	r2, [pc, #88]	; (800da44 <vTimerCallbackT35+0x7c>)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b04      	cmp	r3, #4
 800d9f4:	d10c      	bne.n	800da10 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d9f6:	4a13      	ldr	r2, [pc, #76]	; (800da44 <vTimerCallbackT35+0x7c>)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9fe:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800da02:	2300      	movs	r3, #0
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	2300      	movs	r3, #0
 800da08:	2200      	movs	r2, #0
 800da0a:	2103      	movs	r1, #3
 800da0c:	f7fe fe80 	bl	800c710 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800da10:	4a0c      	ldr	r2, [pc, #48]	; (800da44 <vTimerCallbackT35+0x7c>)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da18:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800da1c:	2300      	movs	r3, #0
 800da1e:	2203      	movs	r2, #3
 800da20:	2100      	movs	r1, #0
 800da22:	f7fe fbab 	bl	800c17c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	3301      	adds	r3, #1
 800da2a:	60fb      	str	r3, [r7, #12]
 800da2c:	4b06      	ldr	r3, [pc, #24]	; (800da48 <vTimerCallbackT35+0x80>)
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4293      	cmp	r3, r2
 800da36:	dbce      	blt.n	800d9d6 <vTimerCallbackT35+0xe>
		}

	}
}
 800da38:	bf00      	nop
 800da3a:	bf00      	nop
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20002150 	.word	0x20002150
 800da48:	20002158 	.word	0x20002158

0800da4c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800da54:	2300      	movs	r3, #0
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	e017      	b.n	800da8a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800da5a:	4a11      	ldr	r2, [pc, #68]	; (800daa0 <vTimerCallbackTimeout+0x54>)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d10b      	bne.n	800da84 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800da6c:	4a0c      	ldr	r2, [pc, #48]	; (800daa0 <vTimerCallbackTimeout+0x54>)
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da74:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800da78:	2300      	movs	r3, #0
 800da7a:	2203      	movs	r2, #3
 800da7c:	f06f 0107 	mvn.w	r1, #7
 800da80:	f7fe fb7c 	bl	800c17c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	3301      	adds	r3, #1
 800da88:	60fb      	str	r3, [r7, #12]
 800da8a:	4b06      	ldr	r3, [pc, #24]	; (800daa4 <vTimerCallbackTimeout+0x58>)
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	461a      	mov	r2, r3
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	4293      	cmp	r3, r2
 800da94:	dbe1      	blt.n	800da5a <vTimerCallbackTimeout+0xe>
		}

	}

}
 800da96:	bf00      	nop
 800da98:	bf00      	nop
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20002150 	.word	0x20002150
 800daa4:	20002158 	.word	0x20002158

0800daa8 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d004      	beq.n	800dace <StartTaskModbusSlave+0x26>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800daca:	2b04      	cmp	r3, #4
 800dacc:	d117      	bne.n	800dafe <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800dace:	f04f 31ff 	mov.w	r1, #4294967295
 800dad2:	2001      	movs	r0, #1
 800dad4:	f7fe fab0 	bl	800c038 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f000 fc21 	bl	800e320 <getRxBuffer>
 800dade:	4603      	mov	r3, r0
 800dae0:	f113 0f03 	cmn.w	r3, #3
 800dae4:	d10b      	bne.n	800dafe <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	22fd      	movs	r2, #253	; 0xfd
 800daea:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800daf2:	3301      	adds	r3, #1
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800dafc:	e0b7      	b.n	800dc6e <StartTaskModbusSlave+0x1c6>
	  }
   }

   if (modH->u8BufferSize < 7)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db04:	2b06      	cmp	r3, #6
 800db06:	d80b      	bhi.n	800db20 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	22fa      	movs	r2, #250	; 0xfa
 800db0c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800db14:	3301      	adds	r3, #1
 800db16:	b29a      	uxth	r2, r3
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800db1e:	e0a6      	b.n	800dc6e <StartTaskModbusSlave+0x1c6>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	7cda      	ldrb	r2, [r3, #19]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	7a1b      	ldrb	r3, [r3, #8]
 800db28:	429a      	cmp	r2, r3
 800db2a:	f040 809f 	bne.w	800dc6c <StartTaskModbusSlave+0x1c4>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f000 fc40 	bl	800e3b4 <validateRequest>
 800db34:	4603      	mov	r3, r0
 800db36:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800db38:	7afb      	ldrb	r3, [r7, #11]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00c      	beq.n	800db58 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800db3e:	7afb      	ldrb	r3, [r7, #11]
 800db40:	68f9      	ldr	r1, [r7, #12]
 800db42:	4618      	mov	r0, r3
 800db44:	f000 fdda 	bl	800e6fc <buildException>
			sendTxBuffer(modH);
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f000 fdf6 	bl	800e73a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800db4e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800db56:	e08a      	b.n	800dc6e <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2200      	movs	r2, #0
 800db5c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db64:	f04f 31ff 	mov.w	r1, #4294967295
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fc ffcb 	bl	800ab04 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	7d1b      	ldrb	r3, [r3, #20]
 800db72:	3b01      	subs	r3, #1
 800db74:	2b0f      	cmp	r3, #15
 800db76:	d86f      	bhi.n	800dc58 <StartTaskModbusSlave+0x1b0>
 800db78:	a201      	add	r2, pc, #4	; (adr r2, 800db80 <StartTaskModbusSlave+0xd8>)
 800db7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7e:	bf00      	nop
 800db80:	0800dbc1 	.word	0x0800dbc1
 800db84:	0800dbd5 	.word	0x0800dbd5
 800db88:	0800dbe9 	.word	0x0800dbe9
 800db8c:	0800dbfd 	.word	0x0800dbfd
 800db90:	0800dc11 	.word	0x0800dc11
 800db94:	0800dc23 	.word	0x0800dc23
 800db98:	0800dc59 	.word	0x0800dc59
 800db9c:	0800dc59 	.word	0x0800dc59
 800dba0:	0800dc59 	.word	0x0800dc59
 800dba4:	0800dc59 	.word	0x0800dc59
 800dba8:	0800dc59 	.word	0x0800dc59
 800dbac:	0800dc59 	.word	0x0800dc59
 800dbb0:	0800dc59 	.word	0x0800dc59
 800dbb4:	0800dc59 	.word	0x0800dc59
 800dbb8:	0800dc35 	.word	0x0800dc35
 800dbbc:	0800dc47 	.word	0x0800dc47
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800dbc0:	2101      	movs	r1, #1
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	f000 fe5b 	bl	800e87e <process_FC1>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	461a      	mov	r2, r3
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dbd2:	e042      	b.n	800dc5a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800dbd4:	2102      	movs	r1, #2
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f000 fe51 	bl	800e87e <process_FC1>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	461a      	mov	r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dbe6:	e038      	b.n	800dc5a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800dbe8:	2103      	movs	r1, #3
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f000 ff0b 	bl	800ea06 <process_FC3>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dbfa:	e02e      	b.n	800dc5a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800dbfc:	2104      	movs	r1, #4
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f000 ff01 	bl	800ea06 <process_FC3>
 800dc04:	4603      	mov	r3, r0
 800dc06:	461a      	mov	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dc0e:	e024      	b.n	800dc5a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f000 ff70 	bl	800eaf6 <process_FC5>
 800dc16:	4603      	mov	r3, r0
 800dc18:	461a      	mov	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dc20:	e01b      	b.n	800dc5a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f000 ffc0 	bl	800eba8 <process_FC6>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dc32:	e012      	b.n	800dc5a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f000 ffe9 	bl	800ec0c <process_FC15>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dc44:	e009      	b.n	800dc5a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f001 f86e 	bl	800ed28 <process_FC16>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	461a      	mov	r2, r3
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dc56:	e000      	b.n	800dc5a <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800dc58:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800dc60:	2300      	movs	r3, #0
 800dc62:	2200      	movs	r2, #0
 800dc64:	2100      	movs	r1, #0
 800dc66:	f7fc fcd3 	bl	800a610 <xQueueGenericSend>

	 continue;
 800dc6a:	e000      	b.n	800dc6e <StartTaskModbusSlave+0x1c6>
    	continue;
 800dc6c:	bf00      	nop
  {
 800dc6e:	e721      	b.n	800dab4 <StartTaskModbusSlave+0xc>

0800dc70 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800dc70:	b084      	sub	sp, #16
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b084      	sub	sp, #16
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	f107 001c 	add.w	r0, r7, #28
 800dc7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dc8c:	f04f 31ff 	mov.w	r1, #4294967295
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fc ff37 	bl	800ab04 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	7a1b      	ldrb	r3, [r3, #8]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d001      	beq.n	800dca2 <SendQuery+0x32>
 800dc9e:	23ff      	movs	r3, #255	; 0xff
 800dca0:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <SendQuery+0x40>
 800dcac:	23fe      	movs	r3, #254	; 0xfe
 800dcae:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800dcb0:	7f3b      	ldrb	r3, [r7, #28]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <SendQuery+0x4c>
 800dcb6:	7f3b      	ldrb	r3, [r7, #28]
 800dcb8:	2bf7      	cmp	r3, #247	; 0xf7
 800dcba:	d901      	bls.n	800dcc0 <SendQuery+0x50>
 800dcbc:	23f7      	movs	r3, #247	; 0xf7
 800dcbe:	73bb      	strb	r3, [r7, #14]


	if(error)
 800dcc0:	7bbb      	ldrb	r3, [r7, #14]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00e      	beq.n	800dce4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800dcc6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	2100      	movs	r1, #0
 800dcda:	f7fc fc99 	bl	800a610 <xQueueGenericSend>
		 return error;
 800dcde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dce2:	e147      	b.n	800df74 <SendQuery+0x304>
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800dce4:	7f7b      	ldrb	r3, [r7, #29]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d008      	beq.n	800dcfc <SendQuery+0x8c>
 800dcea:	7f7b      	ldrb	r3, [r7, #29]
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d005      	beq.n	800dcfc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800dcf0:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800dcf2:	2b05      	cmp	r3, #5
 800dcf4:	d002      	beq.n	800dcfc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800dcf6:	7f7b      	ldrb	r3, [r7, #29]
 800dcf8:	2b0f      	cmp	r3, #15
 800dcfa:	d104      	bne.n	800dd06 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800dcfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800dd04:	e00f      	b.n	800dd26 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800dd06:	7f7b      	ldrb	r3, [r7, #29]
 800dd08:	2b03      	cmp	r3, #3
 800dd0a:	d008      	beq.n	800dd1e <SendQuery+0xae>
 800dd0c:	7f7b      	ldrb	r3, [r7, #29]
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d005      	beq.n	800dd1e <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800dd12:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800dd14:	2b06      	cmp	r3, #6
 800dd16:	d002      	beq.n	800dd1e <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800dd18:	7f7b      	ldrb	r3, [r7, #29]
 800dd1a:	2b10      	cmp	r3, #16
 800dd1c:	d103      	bne.n	800dd26 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800dd1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800dd26:	7f3a      	ldrb	r2, [r7, #28]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800dd2c:	7f7a      	ldrb	r2, [r7, #29]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800dd32:	8bfb      	ldrh	r3, [r7, #30]
 800dd34:	0a1b      	lsrs	r3, r3, #8
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800dd3e:	8bfb      	ldrh	r3, [r7, #30]
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800dd46:	7f7b      	ldrb	r3, [r7, #29]
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	2b0f      	cmp	r3, #15
 800dd4c:	f200 80ff 	bhi.w	800df4e <SendQuery+0x2de>
 800dd50:	a201      	add	r2, pc, #4	; (adr r2, 800dd58 <SendQuery+0xe8>)
 800dd52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd56:	bf00      	nop
 800dd58:	0800dd99 	.word	0x0800dd99
 800dd5c:	0800dd99 	.word	0x0800dd99
 800dd60:	0800dd99 	.word	0x0800dd99
 800dd64:	0800dd99 	.word	0x0800dd99
 800dd68:	0800ddb7 	.word	0x0800ddb7
 800dd6c:	0800ddd9 	.word	0x0800ddd9
 800dd70:	0800df4f 	.word	0x0800df4f
 800dd74:	0800df4f 	.word	0x0800df4f
 800dd78:	0800df4f 	.word	0x0800df4f
 800dd7c:	0800df4f 	.word	0x0800df4f
 800dd80:	0800df4f 	.word	0x0800df4f
 800dd84:	0800df4f 	.word	0x0800df4f
 800dd88:	0800df4f 	.word	0x0800df4f
 800dd8c:	0800df4f 	.word	0x0800df4f
 800dd90:	0800ddfb 	.word	0x0800ddfb
 800dd94:	0800deb9 	.word	0x0800deb9
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800dd98:	8c3b      	ldrh	r3, [r7, #32]
 800dd9a:	0a1b      	lsrs	r3, r3, #8
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dda4:	8c3b      	ldrh	r3, [r7, #32]
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2206      	movs	r2, #6
 800ddb0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800ddb4:	e0cb      	b.n	800df4e <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800ddb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb8:	881b      	ldrh	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <SendQuery+0x152>
 800ddbe:	22ff      	movs	r2, #255	; 0xff
 800ddc0:	e000      	b.n	800ddc4 <SendQuery+0x154>
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2206      	movs	r2, #6
 800ddd2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800ddd6:	e0ba      	b.n	800df4e <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	881b      	ldrh	r3, [r3, #0]
 800dddc:	0a1b      	lsrs	r3, r3, #8
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	b2da      	uxtb	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2206      	movs	r2, #6
 800ddf4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800ddf8:	e0a9      	b.n	800df4e <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800ddfa:	8c3b      	ldrh	r3, [r7, #32]
 800ddfc:	091b      	lsrs	r3, r3, #4
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800de02:	7a7b      	ldrb	r3, [r7, #9]
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800de08:	8c3b      	ldrh	r3, [r7, #32]
 800de0a:	f003 030f 	and.w	r3, r3, #15
 800de0e:	b29b      	uxth	r3, r3
 800de10:	2b00      	cmp	r3, #0
 800de12:	d005      	beq.n	800de20 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
 800de16:	3301      	adds	r3, #1
 800de18:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800de1a:	7a7b      	ldrb	r3, [r7, #9]
 800de1c:	3301      	adds	r3, #1
 800de1e:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800de20:	8c3b      	ldrh	r3, [r7, #32]
 800de22:	0a1b      	lsrs	r3, r3, #8
 800de24:	b29b      	uxth	r3, r3
 800de26:	b2da      	uxtb	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800de2c:	8c3b      	ldrh	r3, [r7, #32]
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7bfa      	ldrb	r2, [r7, #15]
 800de38:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2207      	movs	r2, #7
 800de3e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800de42:	2300      	movs	r3, #0
 800de44:	81bb      	strh	r3, [r7, #12]
 800de46:	e031      	b.n	800deac <SendQuery+0x23c>
	    {
	        if(i%2)
 800de48:	89bb      	ldrh	r3, [r7, #12]
 800de4a:	f003 0301 	and.w	r3, r3, #1
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00f      	beq.n	800de74 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800de54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de56:	89bb      	ldrh	r3, [r7, #12]
 800de58:	085b      	lsrs	r3, r3, #1
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	005b      	lsls	r3, r3, #1
 800de5e:	4413      	add	r3, r2
 800de60:	881a      	ldrh	r2, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800de68:	4619      	mov	r1, r3
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	440b      	add	r3, r1
 800de70:	74da      	strb	r2, [r3, #19]
 800de72:	e010      	b.n	800de96 <SendQuery+0x226>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800de74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de76:	89bb      	ldrh	r3, [r7, #12]
 800de78:	085b      	lsrs	r3, r3, #1
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	4413      	add	r3, r2
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	0a1b      	lsrs	r3, r3, #8
 800de84:	b29a      	uxth	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800de8c:	4619      	mov	r1, r3
 800de8e:	b2d2      	uxtb	r2, r2
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	440b      	add	r3, r1
 800de94:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800de9c:	3301      	adds	r3, #1
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800dea6:	89bb      	ldrh	r3, [r7, #12]
 800dea8:	3301      	adds	r3, #1
 800deaa:	81bb      	strh	r3, [r7, #12]
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	89ba      	ldrh	r2, [r7, #12]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d3c8      	bcc.n	800de48 <SendQuery+0x1d8>
	    }
	    break;
 800deb6:	e04a      	b.n	800df4e <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800deb8:	8c3b      	ldrh	r3, [r7, #32]
 800deba:	0a1b      	lsrs	r3, r3, #8
 800debc:	b29b      	uxth	r3, r3
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dec4:	8c3b      	ldrh	r3, [r7, #32]
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800decc:	8c3b      	ldrh	r3, [r7, #32]
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2207      	movs	r2, #7
 800dedc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dee0:	2300      	movs	r3, #0
 800dee2:	817b      	strh	r3, [r7, #10]
 800dee4:	e02e      	b.n	800df44 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800dee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dee8:	897b      	ldrh	r3, [r7, #10]
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	4413      	add	r3, r2
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	0a1b      	lsrs	r3, r3, #8
 800def2:	b29a      	uxth	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800defa:	4619      	mov	r1, r3
 800defc:	b2d2      	uxtb	r2, r2
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	440b      	add	r3, r1
 800df02:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df0a:	3301      	adds	r3, #1
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800df14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df16:	897b      	ldrh	r3, [r7, #10]
 800df18:	005b      	lsls	r3, r3, #1
 800df1a:	4413      	add	r3, r2
 800df1c:	881a      	ldrh	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df24:	4619      	mov	r1, r3
 800df26:	b2d2      	uxtb	r2, r2
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	440b      	add	r3, r1
 800df2c:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df34:	3301      	adds	r3, #1
 800df36:	b2da      	uxtb	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800df3e:	897b      	ldrh	r3, [r7, #10]
 800df40:	3301      	adds	r3, #1
 800df42:	817b      	strh	r3, [r7, #10]
 800df44:	8c3b      	ldrh	r3, [r7, #32]
 800df46:	897a      	ldrh	r2, [r7, #10]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d3cc      	bcc.n	800dee6 <SendQuery+0x276>
	    }
	    break;
 800df4c:	bf00      	nop
	}


	sendTxBuffer(modH);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fbf3 	bl	800e73a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800df5a:	2300      	movs	r3, #0
 800df5c:	2200      	movs	r2, #0
 800df5e:	2100      	movs	r1, #0
 800df60:	f7fc fb56 	bl	800a610 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	749a      	strb	r2, [r3, #18]
	return 0;
 800df72:	2300      	movs	r3, #0


}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df7e:	b004      	add	sp, #16
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop

0800df84 <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b08c      	sub	sp, #48	; 0x30
 800df88:	af02      	add	r7, sp, #8
 800df8a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800df96:	f107 010c 	add.w	r1, r7, #12
 800df9a:	f04f 32ff 	mov.w	r2, #4294967295
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fc fcd0 	bl	800a944 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800dfa4:	69bb      	ldr	r3, [r7, #24]
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	f107 030c 	add.w	r3, r7, #12
 800dfac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfb0:	f7ff fe5e 	bl	800dc70 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800dfb4:	f04f 31ff 	mov.w	r1, #4294967295
 800dfb8:	2001      	movs	r0, #1
 800dfba:	f7fe f83d 	bl	800c038 <ulTaskNotifyTake>
 800dfbe:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d018      	beq.n	800dffe <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd6:	22f8      	movs	r2, #248	; 0xf8
 800dfd8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dfea:	69b8      	ldr	r0, [r7, #24]
 800dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfee:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dff2:	4619      	mov	r1, r3
 800dff4:	2300      	movs	r3, #0
 800dff6:	2203      	movs	r2, #3
 800dff8:	f7fe f8c0 	bl	800c17c <xTaskGenericNotify>
    	  continue;
 800dffc:	e09a      	b.n	800e134 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800dffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e000:	f000 f98e 	bl	800e320 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e00a:	2b05      	cmp	r3, #5
 800e00c:	d818      	bhi.n	800e040 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800e00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e010:	2200      	movs	r2, #0
 800e012:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	22fa      	movs	r2, #250	; 0xfa
 800e01a:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800e01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e022:	3301      	adds	r3, #1
 800e024:	b29a      	uxth	r2, r3
 800e026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e028:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e02c:	69b8      	ldr	r0, [r7, #24]
 800e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e030:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e034:	4619      	mov	r1, r3
 800e036:	2300      	movs	r3, #0
 800e038:	2203      	movs	r2, #3
 800e03a:	f7fe f89f 	bl	800c17c <xTaskGenericNotify>
		  continue;
 800e03e:	e079      	b.n	800e134 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800e046:	2300      	movs	r3, #0
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	2300      	movs	r3, #0
 800e04c:	2200      	movs	r2, #0
 800e04e:	2103      	movs	r1, #3
 800e050:	f7fe fb5e 	bl	800c710 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800e054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e056:	f000 f8f5 	bl	800e244 <validateAnswer>
 800e05a:	4603      	mov	r3, r0
 800e05c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800e05e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d010      	beq.n	800e088 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	7ffa      	ldrb	r2, [r7, #31]
 800e072:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e074:	69b8      	ldr	r0, [r7, #24]
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e07c:	4619      	mov	r1, r3
 800e07e:	2300      	movs	r3, #0
 800e080:	2203      	movs	r2, #3
 800e082:	f7fe f87b 	bl	800c17c <xTaskGenericNotify>
	     continue;
 800e086:	e055      	b.n	800e134 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	7ffa      	ldrb	r2, [r7, #31]
 800e08c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e094:	f04f 31ff 	mov.w	r1, #4294967295
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fc fd33 	bl	800ab04 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800e09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a0:	7d1b      	ldrb	r3, [r3, #20]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	2b0f      	cmp	r3, #15
 800e0a6:	d82b      	bhi.n	800e100 <StartTaskModbusMaster+0x17c>
 800e0a8:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <StartTaskModbusMaster+0x12c>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e0f1 	.word	0x0800e0f1
 800e0b4:	0800e0f1 	.word	0x0800e0f1
 800e0b8:	0800e0f9 	.word	0x0800e0f9
 800e0bc:	0800e0f9 	.word	0x0800e0f9
 800e0c0:	0800e101 	.word	0x0800e101
 800e0c4:	0800e101 	.word	0x0800e101
 800e0c8:	0800e101 	.word	0x0800e101
 800e0cc:	0800e101 	.word	0x0800e101
 800e0d0:	0800e101 	.word	0x0800e101
 800e0d4:	0800e101 	.word	0x0800e101
 800e0d8:	0800e101 	.word	0x0800e101
 800e0dc:	0800e101 	.word	0x0800e101
 800e0e0:	0800e101 	.word	0x0800e101
 800e0e4:	0800e101 	.word	0x0800e101
 800e0e8:	0800e101 	.word	0x0800e101
 800e0ec:	0800e101 	.word	0x0800e101
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800e0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f2:	f000 f821 	bl	800e138 <get_FC1>
	      break;
 800e0f6:	e004      	b.n	800e102 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800e0f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0fa:	f000 f874 	bl	800e1e6 <get_FC3>
	      break;
 800e0fe:	e000      	b.n	800e102 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800e100:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800e102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e104:	2200      	movs	r2, #0
 800e106:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10e      	bne.n	800e132 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e116:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e11a:	2300      	movs	r3, #0
 800e11c:	2200      	movs	r2, #0
 800e11e:	2100      	movs	r1, #0
 800e120:	f7fc fa76 	bl	800a610 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800e124:	69b8      	ldr	r0, [r7, #24]
 800e126:	2300      	movs	r3, #0
 800e128:	2203      	movs	r2, #3
 800e12a:	f06f 010a 	mvn.w	r1, #10
 800e12e:	f7fe f825 	bl	800c17c <xTaskGenericNotify>
	  }


	  continue;
 800e132:	bf00      	nop
  {
 800e134:	e72c      	b.n	800df90 <StartTaskModbusMaster+0xc>
 800e136:	bf00      	nop

0800e138 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e140:	2303      	movs	r3, #3
 800e142:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e144:	2300      	movs	r3, #0
 800e146:	73fb      	strb	r3, [r7, #15]
 800e148:	e043      	b.n	800e1d2 <get_FC1+0x9a>

        if(i%2)
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
 800e14c:	f003 0301 	and.w	r3, r3, #1
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d01c      	beq.n	800e190 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800e156:	7bfa      	ldrb	r2, [r7, #15]
 800e158:	7bbb      	ldrb	r3, [r7, #14]
 800e15a:	4413      	add	r3, r2
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	4413      	add	r3, r2
 800e160:	7cd8      	ldrb	r0, [r3, #19]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e168:	7bfb      	ldrb	r3, [r7, #15]
 800e16a:	085b      	lsrs	r3, r3, #1
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	005b      	lsls	r3, r3, #1
 800e170:	4413      	add	r3, r2
 800e172:	881b      	ldrh	r3, [r3, #0]
 800e174:	b2d9      	uxtb	r1, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e17c:	7bfb      	ldrb	r3, [r7, #15]
 800e17e:	085b      	lsrs	r3, r3, #1
 800e180:	b2db      	uxtb	r3, r3
 800e182:	005b      	lsls	r3, r3, #1
 800e184:	18d4      	adds	r4, r2, r3
 800e186:	f000 fa5f 	bl	800e648 <word>
 800e18a:	4603      	mov	r3, r0
 800e18c:	8023      	strh	r3, [r4, #0]
 800e18e:	e01d      	b.n	800e1cc <get_FC1+0x94>
        }
        else
        {

        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e196:	7bfb      	ldrb	r3, [r7, #15]
 800e198:	085b      	lsrs	r3, r3, #1
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	005b      	lsls	r3, r3, #1
 800e19e:	4413      	add	r3, r2
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	0a1b      	lsrs	r3, r3, #8
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	b2d8      	uxtb	r0, r3
 800e1a8:	7bfa      	ldrb	r2, [r7, #15]
 800e1aa:	7bbb      	ldrb	r3, [r7, #14]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	7cd9      	ldrb	r1, [r3, #19]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e1ba:	7bfb      	ldrb	r3, [r7, #15]
 800e1bc:	085b      	lsrs	r3, r3, #1
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	005b      	lsls	r3, r3, #1
 800e1c2:	18d4      	adds	r4, r2, r3
 800e1c4:	f000 fa40 	bl	800e648 <word>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e1cc:	7bfb      	ldrb	r3, [r7, #15]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	73fb      	strb	r3, [r7, #15]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	7d5b      	ldrb	r3, [r3, #21]
 800e1d6:	7bfa      	ldrb	r2, [r7, #15]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d3b6      	bcc.n	800e14a <get_FC1+0x12>
        }

     }
}
 800e1dc:	bf00      	nop
 800e1de:	bf00      	nop
 800e1e0:	3714      	adds	r7, #20
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd90      	pop	{r4, r7, pc}

0800e1e6 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800e1e6:	b590      	push	{r4, r7, lr}
 800e1e8:	b085      	sub	sp, #20
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e1ee:	2303      	movs	r3, #3
 800e1f0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73bb      	strb	r3, [r7, #14]
 800e1f6:	e018      	b.n	800e22a <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	7cd8      	ldrb	r0, [r3, #19]
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	3301      	adds	r3, #1
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	4413      	add	r3, r2
 800e208:	7cd9      	ldrb	r1, [r3, #19]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e210:	7bbb      	ldrb	r3, [r7, #14]
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	18d4      	adds	r4, r2, r3
 800e216:	f000 fa17 	bl	800e648 <word>
 800e21a:	4603      	mov	r3, r0
 800e21c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
 800e220:	3302      	adds	r3, #2
 800e222:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e224:	7bbb      	ldrb	r3, [r7, #14]
 800e226:	3301      	adds	r3, #1
 800e228:	73bb      	strb	r3, [r7, #14]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	7d5b      	ldrb	r3, [r3, #21]
 800e22e:	085b      	lsrs	r3, r3, #1
 800e230:	b2db      	uxtb	r3, r3
 800e232:	7bba      	ldrb	r2, [r7, #14]
 800e234:	429a      	cmp	r2, r3
 800e236:	d3df      	bcc.n	800e1f8 <get_FC3+0x12>
    }
}
 800e238:	bf00      	nop
 800e23a:	bf00      	nop
 800e23c:	3714      	adds	r7, #20
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd90      	pop	{r4, r7, pc}
	...

0800e244 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e252:	3b02      	subs	r3, #2
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	4413      	add	r3, r2
 800e258:	7cdb      	ldrb	r3, [r3, #19]
 800e25a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e25c:	b21a      	sxth	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e264:	3b01      	subs	r3, #1
 800e266:	6879      	ldr	r1, [r7, #4]
 800e268:	440b      	add	r3, r1
 800e26a:	7cdb      	ldrb	r3, [r3, #19]
 800e26c:	b21b      	sxth	r3, r3
 800e26e:	4313      	orrs	r3, r2
 800e270:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800e272:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f103 0213 	add.w	r2, r3, #19
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e280:	3b02      	subs	r3, #2
 800e282:	b2db      	uxtb	r3, r3
 800e284:	4619      	mov	r1, r3
 800e286:	4610      	mov	r0, r2
 800e288:	f000 f9f1 	bl	800e66e <calcCRC>
 800e28c:	4603      	mov	r3, r0
 800e28e:	461a      	mov	r2, r3
 800e290:	89bb      	ldrh	r3, [r7, #12]
 800e292:	4293      	cmp	r3, r2
 800e294:	d009      	beq.n	800e2aa <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e29c:	3301      	adds	r3, #1
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800e2a6:	23fc      	movs	r3, #252	; 0xfc
 800e2a8:	e034      	b.n	800e314 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	7d1b      	ldrb	r3, [r3, #20]
 800e2ae:	b25b      	sxtb	r3, r3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	da09      	bge.n	800e2c8 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800e2c4:	23fb      	movs	r3, #251	; 0xfb
 800e2c6:	e025      	b.n	800e314 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	73bb      	strb	r3, [r7, #14]
 800e2d0:	e00c      	b.n	800e2ec <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e2d2:	7bbb      	ldrb	r3, [r7, #14]
 800e2d4:	4a11      	ldr	r2, [pc, #68]	; (800e31c <validateAnswer+0xd8>)
 800e2d6:	5cd2      	ldrb	r2, [r2, r3]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	7d1b      	ldrb	r3, [r3, #20]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d102      	bne.n	800e2e6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	73fb      	strb	r3, [r7, #15]
            break;
 800e2e4:	e005      	b.n	800e2f2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	73bb      	strb	r3, [r7, #14]
 800e2ec:	7bbb      	ldrb	r3, [r7, #14]
 800e2ee:	2b07      	cmp	r3, #7
 800e2f0:	d9ef      	bls.n	800e2d2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800e2f2:	7bfb      	ldrb	r3, [r7, #15]
 800e2f4:	f083 0301 	eor.w	r3, r3, #1
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d009      	beq.n	800e312 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e304:	3301      	adds	r3, #1
 800e306:	b29a      	uxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800e30e:	2301      	movs	r3, #1
 800e310:	e000      	b.n	800e314 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800e312:	2300      	movs	r3, #0
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	0800f424 	.word	0x0800f424

0800e320 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d104      	bne.n	800e33c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	4618      	mov	r0, r3
 800e338:	f7f8 fd42 	bl	8006dc0 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e342:	2b00      	cmp	r3, #0
 800e344:	d008      	beq.n	800e358 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	33d0      	adds	r3, #208	; 0xd0
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7ff f9eb 	bl	800d726 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e350:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e354:	81fb      	strh	r3, [r7, #14]
 800e356:	e019      	b.n	800e38c <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3313      	adds	r3, #19
 800e362:	4619      	mov	r1, r3
 800e364:	4610      	mov	r0, r2
 800e366:	f7ff f978 	bl	800d65a <RingGetAllBytes>
 800e36a:	4603      	mov	r3, r0
 800e36c:	461a      	mov	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e37a:	3301      	adds	r3, #1
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e38a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e392:	2b01      	cmp	r3, #1
 800e394:	d107      	bne.n	800e3a6 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6858      	ldr	r0, [r3, #4]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	33b8      	adds	r3, #184	; 0xb8
 800e39e:	2201      	movs	r2, #1
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	f7f8 fbab 	bl	8006afc <HAL_UART_Receive_IT>
	}

    return i16result;
 800e3a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
	...

0800e3b4 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3c2:	3b02      	subs	r3, #2
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	7cdb      	ldrb	r3, [r3, #19]
 800e3ca:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e3cc:	b21a      	sxth	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	440b      	add	r3, r1
 800e3da:	7cdb      	ldrb	r3, [r3, #19]
 800e3dc:	b21b      	sxth	r3, r3
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e3e2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f103 0213 	add.w	r2, r3, #19
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3f0:	3b02      	subs	r3, #2
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	f000 f939 	bl	800e66e <calcCRC>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	461a      	mov	r2, r3
 800e400:	893b      	ldrh	r3, [r7, #8]
 800e402:	4293      	cmp	r3, r2
 800e404:	d009      	beq.n	800e41a <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e40c:	3301      	adds	r3, #1
 800e40e:	b29a      	uxth	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e416:	23fc      	movs	r3, #252	; 0xfc
 800e418:	e10f      	b.n	800e63a <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800e41a:	2300      	movs	r3, #0
 800e41c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e41e:	2300      	movs	r3, #0
 800e420:	73bb      	strb	r3, [r7, #14]
 800e422:	e00c      	b.n	800e43e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e424:	7bbb      	ldrb	r3, [r7, #14]
 800e426:	4a87      	ldr	r2, [pc, #540]	; (800e644 <validateRequest+0x290>)
 800e428:	5cd2      	ldrb	r2, [r2, r3]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7d1b      	ldrb	r3, [r3, #20]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d102      	bne.n	800e438 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e432:	2301      	movs	r3, #1
 800e434:	73fb      	strb	r3, [r7, #15]
	            break;
 800e436:	e005      	b.n	800e444 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e438:	7bbb      	ldrb	r3, [r7, #14]
 800e43a:	3301      	adds	r3, #1
 800e43c:	73bb      	strb	r3, [r7, #14]
 800e43e:	7bbb      	ldrb	r3, [r7, #14]
 800e440:	2b07      	cmp	r3, #7
 800e442:	d9ef      	bls.n	800e424 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e444:	7bfb      	ldrb	r3, [r7, #15]
 800e446:	f083 0301 	eor.w	r3, r3, #1
 800e44a:	b2db      	uxtb	r3, r3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d009      	beq.n	800e464 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e456:	3301      	adds	r3, #1
 800e458:	b29a      	uxth	r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e460:	2301      	movs	r3, #1
 800e462:	e0ea      	b.n	800e63a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800e464:	2300      	movs	r3, #0
 800e466:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	7d1b      	ldrb	r3, [r3, #20]
 800e470:	3b01      	subs	r3, #1
 800e472:	2b0f      	cmp	r3, #15
 800e474:	f200 80e0 	bhi.w	800e638 <validateRequest+0x284>
 800e478:	a201      	add	r2, pc, #4	; (adr r2, 800e480 <validateRequest+0xcc>)
 800e47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47e:	bf00      	nop
 800e480:	0800e4c1 	.word	0x0800e4c1
 800e484:	0800e4c1 	.word	0x0800e4c1
 800e488:	0800e5d9 	.word	0x0800e5d9
 800e48c:	0800e5d9 	.word	0x0800e5d9
 800e490:	0800e56d 	.word	0x0800e56d
 800e494:	0800e5b5 	.word	0x0800e5b5
 800e498:	0800e639 	.word	0x0800e639
 800e49c:	0800e639 	.word	0x0800e639
 800e4a0:	0800e639 	.word	0x0800e639
 800e4a4:	0800e639 	.word	0x0800e639
 800e4a8:	0800e639 	.word	0x0800e639
 800e4ac:	0800e639 	.word	0x0800e639
 800e4b0:	0800e639 	.word	0x0800e639
 800e4b4:	0800e639 	.word	0x0800e639
 800e4b8:	0800e4c1 	.word	0x0800e4c1
 800e4bc:	0800e5d9 	.word	0x0800e5d9
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	7d5a      	ldrb	r2, [r3, #21]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	7d9b      	ldrb	r3, [r3, #22]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	f000 f8bc 	bl	800e648 <word>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	091b      	lsrs	r3, r3, #4
 800e4d4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	7dda      	ldrb	r2, [r3, #23]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	7e1b      	ldrb	r3, [r3, #24]
 800e4de:	4619      	mov	r1, r3
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	f000 f8b1 	bl	800e648 <word>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	091b      	lsrs	r3, r3, #4
 800e4ea:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	7dda      	ldrb	r2, [r3, #23]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	7e1b      	ldrb	r3, [r3, #24]
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	f000 f8a6 	bl	800e648 <word>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	f003 030f 	and.w	r3, r3, #15
 800e502:	b29b      	uxth	r3, r3
 800e504:	2b00      	cmp	r3, #0
 800e506:	d002      	beq.n	800e50e <validateRequest+0x15a>
 800e508:	897b      	ldrh	r3, [r7, #10]
 800e50a:	3301      	adds	r3, #1
 800e50c:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e50e:	89ba      	ldrh	r2, [r7, #12]
 800e510:	897b      	ldrh	r3, [r7, #10]
 800e512:	4413      	add	r3, r2
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e51a:	4293      	cmp	r3, r2
 800e51c:	dd01      	ble.n	800e522 <validateRequest+0x16e>
 800e51e:	2302      	movs	r3, #2
 800e520:	e08b      	b.n	800e63a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7dda      	ldrb	r2, [r3, #23]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	7e1b      	ldrb	r3, [r3, #24]
 800e52a:	4619      	mov	r1, r3
 800e52c:	4610      	mov	r0, r2
 800e52e:	f000 f88b 	bl	800e648 <word>
 800e532:	4603      	mov	r3, r0
 800e534:	08db      	lsrs	r3, r3, #3
 800e536:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	7dda      	ldrb	r2, [r3, #23]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	7e1b      	ldrb	r3, [r3, #24]
 800e540:	4619      	mov	r1, r3
 800e542:	4610      	mov	r0, r2
 800e544:	f000 f880 	bl	800e648 <word>
 800e548:	4603      	mov	r3, r0
 800e54a:	f003 0307 	and.w	r3, r3, #7
 800e54e:	b29b      	uxth	r3, r3
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <validateRequest+0x1a6>
 800e554:	897b      	ldrh	r3, [r7, #10]
 800e556:	3301      	adds	r3, #1
 800e558:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800e55a:	897b      	ldrh	r3, [r7, #10]
 800e55c:	3305      	adds	r3, #5
 800e55e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800e560:	897b      	ldrh	r3, [r7, #10]
 800e562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e566:	d960      	bls.n	800e62a <validateRequest+0x276>
 800e568:	2303      	movs	r3, #3
 800e56a:	e066      	b.n	800e63a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	7d5a      	ldrb	r2, [r3, #21]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7d9b      	ldrb	r3, [r3, #22]
 800e574:	4619      	mov	r1, r3
 800e576:	4610      	mov	r0, r2
 800e578:	f000 f866 	bl	800e648 <word>
 800e57c:	4603      	mov	r3, r0
 800e57e:	091b      	lsrs	r3, r3, #4
 800e580:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	7d5a      	ldrb	r2, [r3, #21]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	7d9b      	ldrb	r3, [r3, #22]
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f000 f85b 	bl	800e648 <word>
 800e592:	4603      	mov	r3, r0
 800e594:	f003 030f 	and.w	r3, r3, #15
 800e598:	b29b      	uxth	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d002      	beq.n	800e5a4 <validateRequest+0x1f0>
 800e59e:	89bb      	ldrh	r3, [r7, #12]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800e5aa:	89ba      	ldrh	r2, [r7, #12]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d93e      	bls.n	800e62e <validateRequest+0x27a>
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	e042      	b.n	800e63a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	7d5a      	ldrb	r2, [r3, #21]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	7d9b      	ldrb	r3, [r3, #22]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4610      	mov	r0, r2
 800e5c0:	f000 f842 	bl	800e648 <word>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e5ce:	89ba      	ldrh	r2, [r7, #12]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d92e      	bls.n	800e632 <validateRequest+0x27e>
 800e5d4:	2302      	movs	r3, #2
 800e5d6:	e030      	b.n	800e63a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7d5a      	ldrb	r2, [r3, #21]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	7d9b      	ldrb	r3, [r3, #22]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	f000 f830 	bl	800e648 <word>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	7dda      	ldrb	r2, [r3, #23]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	7e1b      	ldrb	r3, [r3, #24]
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	f000 f826 	bl	800e648 <word>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800e600:	89ba      	ldrh	r2, [r7, #12]
 800e602:	897b      	ldrh	r3, [r7, #10]
 800e604:	4413      	add	r3, r2
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800e60c:	4293      	cmp	r3, r2
 800e60e:	dd01      	ble.n	800e614 <validateRequest+0x260>
 800e610:	2302      	movs	r3, #2
 800e612:	e012      	b.n	800e63a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800e614:	897b      	ldrh	r3, [r7, #10]
 800e616:	005b      	lsls	r3, r3, #1
 800e618:	b29b      	uxth	r3, r3
 800e61a:	3305      	adds	r3, #5
 800e61c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800e61e:	897b      	ldrh	r3, [r7, #10]
 800e620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e624:	d907      	bls.n	800e636 <validateRequest+0x282>
 800e626:	2303      	movs	r3, #3
 800e628:	e007      	b.n	800e63a <validateRequest+0x286>
	        break;
 800e62a:	bf00      	nop
 800e62c:	e004      	b.n	800e638 <validateRequest+0x284>
	        break;
 800e62e:	bf00      	nop
 800e630:	e002      	b.n	800e638 <validateRequest+0x284>
	        break;
 800e632:	bf00      	nop
 800e634:	e000      	b.n	800e638 <validateRequest+0x284>
	        break;
 800e636:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800e638:	2300      	movs	r3, #0

}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	0800f424 	.word	0x0800f424

0800e648 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	4603      	mov	r3, r0
 800e650:	460a      	mov	r2, r1
 800e652:	71fb      	strb	r3, [r7, #7]
 800e654:	4613      	mov	r3, r2
 800e656:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e658:	79bb      	ldrb	r3, [r7, #6]
 800e65a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e660:	89bb      	ldrh	r3, [r7, #12]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3714      	adds	r7, #20
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800e66e:	b480      	push	{r7}
 800e670:	b087      	sub	sp, #28
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
 800e676:	460b      	mov	r3, r1
 800e678:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e67a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e67e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e680:	2300      	movs	r3, #0
 800e682:	74fb      	strb	r3, [r7, #19]
 800e684:	e023      	b.n	800e6ce <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e686:	7cfb      	ldrb	r3, [r7, #19]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	4413      	add	r3, r2
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	461a      	mov	r2, r3
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	4053      	eors	r3, r2
 800e694:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e696:	2301      	movs	r3, #1
 800e698:	74bb      	strb	r3, [r7, #18]
 800e69a:	e012      	b.n	800e6c2 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	f003 0301 	and.w	r3, r3, #1
 800e6a2:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	085b      	lsrs	r3, r3, #1
 800e6a8:	617b      	str	r3, [r7, #20]
            if (flag)
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d005      	beq.n	800e6bc <calcCRC+0x4e>
                temp ^= 0xA001;
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e6b6:	f083 0301 	eor.w	r3, r3, #1
 800e6ba:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e6bc:	7cbb      	ldrb	r3, [r7, #18]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	74bb      	strb	r3, [r7, #18]
 800e6c2:	7cbb      	ldrb	r3, [r7, #18]
 800e6c4:	2b08      	cmp	r3, #8
 800e6c6:	d9e9      	bls.n	800e69c <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e6c8:	7cfb      	ldrb	r3, [r7, #19]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	74fb      	strb	r3, [r7, #19]
 800e6ce:	7cfa      	ldrb	r2, [r7, #19]
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d3d7      	bcc.n	800e686 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	0a1b      	lsrs	r3, r3, #8
 800e6da:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	021b      	lsls	r3, r3, #8
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	b29b      	uxth	r3, r3

}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	371c      	adds	r7, #28
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr

0800e6fc <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	4603      	mov	r3, r0
 800e704:	6039      	str	r1, [r7, #0]
 800e706:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	7d1b      	ldrb	r3, [r3, #20]
 800e70c:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	7a1a      	ldrb	r2, [r3, #8]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e716:	7bfb      	ldrb	r3, [r7, #15]
 800e718:	3b80      	subs	r3, #128	; 0x80
 800e71a:	b2da      	uxtb	r2, r3
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	79fa      	ldrb	r2, [r7, #7]
 800e724:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2203      	movs	r2, #3
 800e72a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e72e:	bf00      	nop
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800e73a:	b590      	push	{r4, r7, lr}
 800e73c:	b087      	sub	sp, #28
 800e73e:	af02      	add	r7, sp, #8
 800e740:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f103 0213 	add.w	r2, r3, #19
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e74e:	4619      	mov	r1, r3
 800e750:	4610      	mov	r0, r2
 800e752:	f7ff ff8c 	bl	800e66e <calcCRC>
 800e756:	4603      	mov	r3, r0
 800e758:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e75a:	89fb      	ldrh	r3, [r7, #14]
 800e75c:	0a1b      	lsrs	r3, r3, #8
 800e75e:	b29a      	uxth	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e766:	4619      	mov	r1, r3
 800e768:	b2d2      	uxtb	r2, r2
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	440b      	add	r3, r1
 800e76e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e776:	3301      	adds	r3, #1
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e786:	4619      	mov	r1, r3
 800e788:	89fb      	ldrh	r3, [r7, #14]
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	440b      	add	r3, r1
 800e790:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e798:	3301      	adds	r3, #1
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d00c      	beq.n	800e7c4 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7f8 ff16 	bl	80075e0 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	68d8      	ldr	r0, [r3, #12]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	8a1b      	ldrh	r3, [r3, #16]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	4619      	mov	r1, r3
 800e7c0:	f7f5 fdb6 	bl	8004330 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d10c      	bne.n	800e7e8 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6858      	ldr	r0, [r3, #4]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f103 0113 	add.w	r1, r3, #19
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	f7f8 f8f7 	bl	80069d4 <HAL_UART_Transmit_IT>
 800e7e6:	e00b      	b.n	800e800 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6858      	ldr	r0, [r3, #4]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f103 0113 	add.w	r1, r3, #19
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	f7f8 f9ca 	bl	8006b94 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800e800:	21fa      	movs	r1, #250	; 0xfa
 800e802:	2001      	movs	r0, #1
 800e804:	f7fd fc18 	bl	800c038 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800e808:	bf00      	nop
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	69db      	ldr	r3, [r3, #28]
 800e812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e816:	2b00      	cmp	r3, #0
 800e818:	d0f7      	beq.n	800e80a <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00c      	beq.n	800e83c <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	68d8      	ldr	r0, [r3, #12]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	8a1b      	ldrh	r3, [r3, #16]
 800e82a:	2200      	movs	r2, #0
 800e82c:	4619      	mov	r1, r3
 800e82e:	f7f5 fd7f 	bl	8004330 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	4618      	mov	r0, r3
 800e838:	f7f8 ff26 	bl	8007688 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2b04      	cmp	r3, #4
 800e842:	d10c      	bne.n	800e85e <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800e84a:	f7fc ff23 	bl	800b694 <xTaskGetTickCount>
 800e84e:	4602      	mov	r2, r0
 800e850:	2300      	movs	r3, #0
 800e852:	9300      	str	r3, [sp, #0]
 800e854:	2300      	movs	r3, #0
 800e856:	2102      	movs	r1, #2
 800e858:	4620      	mov	r0, r4
 800e85a:	f7fd ff59 	bl	800c710 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e86c:	3301      	adds	r3, #1
 800e86e:	b29a      	uxth	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800e876:	bf00      	nop
 800e878:	3714      	adds	r7, #20
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd90      	pop	{r4, r7, pc}

0800e87e <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b088      	sub	sp, #32
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	460b      	mov	r3, r1
 800e888:	70fb      	strb	r3, [r7, #3]
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	7d5a      	ldrb	r2, [r3, #21]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	7d9b      	ldrb	r3, [r3, #22]
 800e892:	4619      	mov	r1, r3
 800e894:	4610      	mov	r0, r2
 800e896:	f7ff fed7 	bl	800e648 <word>
 800e89a:	4603      	mov	r3, r0
 800e89c:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	7dda      	ldrb	r2, [r3, #23]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	7e1b      	ldrb	r3, [r3, #24]
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	f7ff fecd 	bl	800e648 <word>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e8b2:	8abb      	ldrh	r3, [r7, #20]
 800e8b4:	08db      	lsrs	r3, r3, #3
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e8ba:	8abb      	ldrh	r3, [r7, #20]
 800e8bc:	f003 0307 	and.w	r3, r3, #7
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d002      	beq.n	800e8cc <process_FC1+0x4e>
 800e8c6:	7ffb      	ldrb	r3, [r7, #31]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	7ffa      	ldrb	r2, [r7, #31]
 800e8d0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2203      	movs	r2, #3
 800e8d6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	7ffb      	ldrb	r3, [r7, #31]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800e8f4:	78fb      	ldrb	r3, [r7, #3]
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	d104      	bne.n	800e904 <process_FC1+0x86>
    	u16regs = modH->u16regsCoils;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e900:	61bb      	str	r3, [r7, #24]
 800e902:	e006      	b.n	800e912 <process_FC1+0x94>
    }
    else if (Database == 2){
 800e904:	78fb      	ldrb	r3, [r7, #3]
 800e906:	2b02      	cmp	r3, #2
 800e908:	d103      	bne.n	800e912 <process_FC1+0x94>
    	u16regs = modH->u16regsCoilsRO;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e910:	61bb      	str	r3, [r7, #24]
    }

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e912:	2300      	movs	r3, #0
 800e914:	83bb      	strh	r3, [r7, #28]
 800e916:	e056      	b.n	800e9c6 <process_FC1+0x148>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e918:	8afa      	ldrh	r2, [r7, #22]
 800e91a:	8bbb      	ldrh	r3, [r7, #28]
 800e91c:	4413      	add	r3, r2
 800e91e:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800e920:	8a3b      	ldrh	r3, [r7, #16]
 800e922:	091b      	lsrs	r3, r3, #4
 800e924:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e926:	8a3b      	ldrh	r3, [r7, #16]
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	f003 030f 	and.w	r3, r3, #15
 800e92e:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800e930:	89fb      	ldrh	r3, [r7, #14]
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	69ba      	ldr	r2, [r7, #24]
 800e936:	4413      	add	r3, r2
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	7b7b      	ldrb	r3, [r7, #13]
 800e93e:	fa42 f303 	asr.w	r3, r2, r3
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	2b00      	cmp	r3, #0
 800e948:	d014      	beq.n	800e974 <process_FC1+0xf6>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e950:	461a      	mov	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4413      	add	r3, r2
 800e956:	7cda      	ldrb	r2, [r3, #19]
 800e958:	7fbb      	ldrb	r3, [r7, #30]
 800e95a:	2101      	movs	r1, #1
 800e95c:	fa01 f303 	lsl.w	r3, r1, r3
 800e960:	b2db      	uxtb	r3, r3
 800e962:	6879      	ldr	r1, [r7, #4]
 800e964:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e968:	4313      	orrs	r3, r2
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	440b      	add	r3, r1
 800e970:	74da      	strb	r2, [r3, #19]
 800e972:	e015      	b.n	800e9a0 <process_FC1+0x122>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e97a:	461a      	mov	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4413      	add	r3, r2
 800e980:	7cda      	ldrb	r2, [r3, #19]
 800e982:	7fbb      	ldrb	r3, [r7, #30]
 800e984:	2101      	movs	r1, #1
 800e986:	fa01 f303 	lsl.w	r3, r1, r3
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	43db      	mvns	r3, r3
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	6879      	ldr	r1, [r7, #4]
 800e992:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e996:	4013      	ands	r3, r2
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	440b      	add	r3, r1
 800e99e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800e9a0:	7fbb      	ldrb	r3, [r7, #30]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800e9a6:	7fbb      	ldrb	r3, [r7, #30]
 800e9a8:	2b07      	cmp	r3, #7
 800e9aa:	d909      	bls.n	800e9c0 <process_FC1+0x142>
        {
            u8bitsno = 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e9c0:	8bbb      	ldrh	r3, [r7, #28]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	83bb      	strh	r3, [r7, #28]
 800e9c6:	8bba      	ldrh	r2, [r7, #28]
 800e9c8:	8abb      	ldrh	r3, [r7, #20]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d3a4      	bcc.n	800e918 <process_FC1+0x9a>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800e9ce:	8abb      	ldrh	r3, [r7, #20]
 800e9d0:	f003 0307 	and.w	r3, r3, #7
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <process_FC1+0x16c>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e9f0:	3302      	adds	r3, #2
 800e9f2:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff fea0 	bl	800e73a <sendTxBuffer>
    return u8CopyBufferSize;
 800e9fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3720      	adds	r7, #32
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b086      	sub	sp, #24
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	460b      	mov	r3, r1
 800ea10:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	7d5a      	ldrb	r2, [r3, #21]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	7d9b      	ldrb	r3, [r3, #22]
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	f7ff fe13 	bl	800e648 <word>
 800ea22:	4603      	mov	r3, r0
 800ea24:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	7dda      	ldrb	r2, [r3, #23]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	7e1b      	ldrb	r3, [r3, #24]
 800ea2e:	4619      	mov	r1, r3
 800ea30:	4610      	mov	r0, r2
 800ea32:	f7ff fe09 	bl	800e648 <word>
 800ea36:	4603      	mov	r3, r0
 800ea38:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800ea3a:	7b7b      	ldrb	r3, [r7, #13]
 800ea3c:	005b      	lsls	r3, r3, #1
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2203      	movs	r2, #3
 800ea48:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800ea4c:	78fb      	ldrb	r3, [r7, #3]
 800ea4e:	2b03      	cmp	r3, #3
 800ea50:	d104      	bne.n	800ea5c <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ea58:	613b      	str	r3, [r7, #16]
 800ea5a:	e006      	b.n	800ea6a <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800ea5c:	78fb      	ldrb	r3, [r7, #3]
 800ea5e:	2b04      	cmp	r3, #4
 800ea60:	d103      	bne.n	800ea6a <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ea68:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800ea6a:	89fb      	ldrh	r3, [r7, #14]
 800ea6c:	82fb      	strh	r3, [r7, #22]
 800ea6e:	e02e      	b.n	800eace <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800ea70:	8afb      	ldrh	r3, [r7, #22]
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	693a      	ldr	r2, [r7, #16]
 800ea76:	4413      	add	r3, r2
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	0a1b      	lsrs	r3, r3, #8
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea84:	4619      	mov	r1, r3
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	440b      	add	r3, r1
 800ea8c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea94:	3301      	adds	r3, #1
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800ea9e:	8afb      	ldrh	r3, [r7, #22]
 800eaa0:	005b      	lsls	r3, r3, #1
 800eaa2:	693a      	ldr	r2, [r7, #16]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	881a      	ldrh	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eaae:	4619      	mov	r1, r3
 800eab0:	b2d2      	uxtb	r2, r2
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	440b      	add	r3, r1
 800eab6:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eabe:	3301      	adds	r3, #1
 800eac0:	b2da      	uxtb	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800eac8:	8afb      	ldrh	r3, [r7, #22]
 800eaca:	3301      	adds	r3, #1
 800eacc:	82fb      	strh	r3, [r7, #22]
 800eace:	8afa      	ldrh	r2, [r7, #22]
 800ead0:	89f9      	ldrh	r1, [r7, #14]
 800ead2:	7b7b      	ldrb	r3, [r7, #13]
 800ead4:	440b      	add	r3, r1
 800ead6:	429a      	cmp	r2, r3
 800ead8:	dbca      	blt.n	800ea70 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eae0:	3302      	adds	r3, #2
 800eae2:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7ff fe28 	bl	800e73a <sendTxBuffer>

    return u8CopyBufferSize;
 800eaea:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3718      	adds	r7, #24
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b084      	sub	sp, #16
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	7d5a      	ldrb	r2, [r3, #21]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	7d9b      	ldrb	r3, [r3, #22]
 800eb06:	4619      	mov	r1, r3
 800eb08:	4610      	mov	r0, r2
 800eb0a:	f7ff fd9d 	bl	800e648 <word>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800eb12:	89fb      	ldrh	r3, [r7, #14]
 800eb14:	091b      	lsrs	r3, r3, #4
 800eb16:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800eb18:	89fb      	ldrh	r3, [r7, #14]
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	f003 030f 	and.w	r3, r3, #15
 800eb20:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	7ddb      	ldrb	r3, [r3, #23]
 800eb26:	2bff      	cmp	r3, #255	; 0xff
 800eb28:	d115      	bne.n	800eb56 <process_FC5+0x60>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eb30:	89bb      	ldrh	r3, [r7, #12]
 800eb32:	005b      	lsls	r3, r3, #1
 800eb34:	4413      	add	r3, r2
 800eb36:	8819      	ldrh	r1, [r3, #0]
 800eb38:	7afb      	ldrb	r3, [r7, #11]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800eb48:	89bb      	ldrh	r3, [r7, #12]
 800eb4a:	005b      	lsls	r3, r3, #1
 800eb4c:	4403      	add	r3, r0
 800eb4e:	430a      	orrs	r2, r1
 800eb50:	b292      	uxth	r2, r2
 800eb52:	801a      	strh	r2, [r3, #0]
 800eb54:	e016      	b.n	800eb84 <process_FC5+0x8e>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eb5c:	89bb      	ldrh	r3, [r7, #12]
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	4413      	add	r3, r2
 800eb62:	8819      	ldrh	r1, [r3, #0]
 800eb64:	7afb      	ldrb	r3, [r7, #11]
 800eb66:	2201      	movs	r2, #1
 800eb68:	fa02 f303 	lsl.w	r3, r2, r3
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	43db      	mvns	r3, r3
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800eb78:	89bb      	ldrh	r3, [r7, #12]
 800eb7a:	005b      	lsls	r3, r3, #1
 800eb7c:	4403      	add	r3, r0
 800eb7e:	400a      	ands	r2, r1
 800eb80:	b292      	uxth	r2, r2
 800eb82:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2206      	movs	r2, #6
 800eb88:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb92:	3302      	adds	r3, #2
 800eb94:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7ff fdcf 	bl	800e73a <sendTxBuffer>

    return u8CopyBufferSize;
 800eb9c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7d5a      	ldrb	r2, [r3, #21]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	7d9b      	ldrb	r3, [r3, #22]
 800ebb8:	4619      	mov	r1, r3
 800ebba:	4610      	mov	r0, r2
 800ebbc:	f7ff fd44 	bl	800e648 <word>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	7dda      	ldrb	r2, [r3, #23]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	7e1b      	ldrb	r3, [r3, #24]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	4610      	mov	r0, r2
 800ebd0:	f7ff fd3a 	bl	800e648 <word>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ebde:	89fb      	ldrh	r3, [r7, #14]
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	4413      	add	r3, r2
 800ebe4:	89ba      	ldrh	r2, [r7, #12]
 800ebe6:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2206      	movs	r2, #6
 800ebec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ebf6:	3302      	adds	r3, #2
 800ebf8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff fd9d 	bl	800e73a <sendTxBuffer>

    return u8CopyBufferSize;
 800ec00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	7d5a      	ldrb	r2, [r3, #21]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	7d9b      	ldrb	r3, [r3, #22]
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4610      	mov	r0, r2
 800ec20:	f7ff fd12 	bl	800e648 <word>
 800ec24:	4603      	mov	r3, r0
 800ec26:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	7dda      	ldrb	r2, [r3, #23]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	7e1b      	ldrb	r3, [r3, #24]
 800ec30:	4619      	mov	r1, r3
 800ec32:	4610      	mov	r0, r2
 800ec34:	f7ff fd08 	bl	800e648 <word>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800ec40:	2307      	movs	r3, #7
 800ec42:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800ec44:	2300      	movs	r3, #0
 800ec46:	82bb      	strh	r3, [r7, #20]
 800ec48:	e058      	b.n	800ecfc <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800ec4a:	8a7a      	ldrh	r2, [r7, #18]
 800ec4c:	8abb      	ldrh	r3, [r7, #20]
 800ec4e:	4413      	add	r3, r2
 800ec50:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800ec52:	89bb      	ldrh	r3, [r7, #12]
 800ec54:	091b      	lsrs	r3, r3, #4
 800ec56:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800ec58:	89bb      	ldrh	r3, [r7, #12]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	f003 030f 	and.w	r3, r3, #15
 800ec60:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	4413      	add	r3, r2
 800ec68:	7cdb      	ldrb	r3, [r3, #19]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	7dbb      	ldrb	r3, [r7, #22]
 800ec6e:	fa42 f303 	asr.w	r3, r2, r3
 800ec72:	f003 0301 	and.w	r3, r3, #1
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	bf14      	ite	ne
 800ec7a:	2301      	movne	r3, #1
 800ec7c:	2300      	moveq	r3, #0
 800ec7e:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800ec80:	7a3b      	ldrb	r3, [r7, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d015      	beq.n	800ecb2 <process_FC15+0xa6>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ec8c:	897b      	ldrh	r3, [r7, #10]
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	4413      	add	r3, r2
 800ec92:	8819      	ldrh	r1, [r3, #0]
 800ec94:	7a7b      	ldrb	r3, [r7, #9]
 800ec96:	2201      	movs	r2, #1
 800ec98:	fa02 f303 	lsl.w	r3, r2, r3
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800eca4:	897b      	ldrh	r3, [r7, #10]
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	4403      	add	r3, r0
 800ecaa:	430a      	orrs	r2, r1
 800ecac:	b292      	uxth	r2, r2
 800ecae:	801a      	strh	r2, [r3, #0]
 800ecb0:	e016      	b.n	800ece0 <process_FC15+0xd4>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ecb8:	897b      	ldrh	r3, [r7, #10]
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	4413      	add	r3, r2
 800ecbe:	8819      	ldrh	r1, [r3, #0]
 800ecc0:	7a7b      	ldrb	r3, [r7, #9]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	43db      	mvns	r3, r3
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ecd4:	897b      	ldrh	r3, [r7, #10]
 800ecd6:	005b      	lsls	r3, r3, #1
 800ecd8:	4403      	add	r3, r0
 800ecda:	400a      	ands	r2, r1
 800ecdc:	b292      	uxth	r2, r2
 800ecde:	801a      	strh	r2, [r3, #0]
            modH->u16regsCoils[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800ece0:	7dbb      	ldrb	r3, [r7, #22]
 800ece2:	3301      	adds	r3, #1
 800ece4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800ece6:	7dbb      	ldrb	r3, [r7, #22]
 800ece8:	2b07      	cmp	r3, #7
 800ecea:	d904      	bls.n	800ecf6 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800ecf0:	7dfb      	ldrb	r3, [r7, #23]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800ecf6:	8abb      	ldrh	r3, [r7, #20]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	82bb      	strh	r3, [r7, #20]
 800ecfc:	8aba      	ldrh	r2, [r7, #20]
 800ecfe:	8a3b      	ldrh	r3, [r7, #16]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d3a2      	bcc.n	800ec4a <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2206      	movs	r2, #6
 800ed08:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ed12:	3302      	adds	r3, #2
 800ed14:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f7ff fd0f 	bl	800e73a <sendTxBuffer>
    return u8CopyBufferSize;
 800ed1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b086      	sub	sp, #24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	7d5b      	ldrb	r3, [r3, #21]
 800ed34:	021b      	lsls	r3, r3, #8
 800ed36:	b21a      	sxth	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	7d9b      	ldrb	r3, [r3, #22]
 800ed3c:	b21b      	sxth	r3, r3
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	b21b      	sxth	r3, r3
 800ed42:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	7ddb      	ldrb	r3, [r3, #23]
 800ed48:	021b      	lsls	r3, r3, #8
 800ed4a:	b21a      	sxth	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	7e1b      	ldrb	r3, [r3, #24]
 800ed50:	b21b      	sxth	r3, r3
 800ed52:	4313      	orrs	r3, r2
 800ed54:	b21b      	sxth	r3, r3
 800ed56:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800ed5e:	8a7b      	ldrh	r3, [r7, #18]
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2206      	movs	r2, #6
 800ed6a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800ed6e:	2300      	movs	r3, #0
 800ed70:	82fb      	strh	r3, [r7, #22]
 800ed72:	e01d      	b.n	800edb0 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800ed74:	8afb      	ldrh	r3, [r7, #22]
 800ed76:	005b      	lsls	r3, r3, #1
 800ed78:	3307      	adds	r3, #7
        temp = word(
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800ed80:	8afb      	ldrh	r3, [r7, #22]
 800ed82:	3304      	adds	r3, #4
 800ed84:	005b      	lsls	r3, r3, #1
        temp = word(
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	4413      	add	r3, r2
 800ed8a:	7cdb      	ldrb	r3, [r3, #19]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	f7ff fc5b 	bl	800e648 <word>
 800ed92:	4603      	mov	r3, r0
 800ed94:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ed9c:	8ab9      	ldrh	r1, [r7, #20]
 800ed9e:	8afb      	ldrh	r3, [r7, #22]
 800eda0:	440b      	add	r3, r1
 800eda2:	005b      	lsls	r3, r3, #1
 800eda4:	4413      	add	r3, r2
 800eda6:	89fa      	ldrh	r2, [r7, #14]
 800eda8:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800edaa:	8afb      	ldrh	r3, [r7, #22]
 800edac:	3301      	adds	r3, #1
 800edae:	82fb      	strh	r3, [r7, #22]
 800edb0:	8afa      	ldrh	r2, [r7, #22]
 800edb2:	8a7b      	ldrh	r3, [r7, #18]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d3dd      	bcc.n	800ed74 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800edbe:	3302      	adds	r3, #2
 800edc0:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7ff fcb9 	bl	800e73a <sendTxBuffer>

    return u8CopyBufferSize;
 800edc8:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af02      	add	r7, sp, #8
 800edda:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800eddc:	2300      	movs	r3, #0
 800edde:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800ede0:	2300      	movs	r3, #0
 800ede2:	60fb      	str	r3, [r7, #12]
 800ede4:	e019      	b.n	800ee1a <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800ede6:	4a17      	ldr	r2, [pc, #92]	; (800ee44 <HAL_UART_TxCpltCallback+0x70>)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d10e      	bne.n	800ee14 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800edf6:	4a13      	ldr	r2, [pc, #76]	; (800ee44 <HAL_UART_TxCpltCallback+0x70>)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edfe:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ee02:	f107 0308 	add.w	r3, r7, #8
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	2300      	movs	r3, #0
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	f7fd fa6d 	bl	800c2ec <xTaskGenericNotifyFromISR>
	   		break;
 800ee12:	e008      	b.n	800ee26 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3301      	adds	r3, #1
 800ee18:	60fb      	str	r3, [r7, #12]
 800ee1a:	4b0b      	ldr	r3, [pc, #44]	; (800ee48 <HAL_UART_TxCpltCallback+0x74>)
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	461a      	mov	r2, r3
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	4293      	cmp	r3, r2
 800ee24:	dbdf      	blt.n	800ede6 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d007      	beq.n	800ee3c <HAL_UART_TxCpltCallback+0x68>
 800ee2c:	4b07      	ldr	r3, [pc, #28]	; (800ee4c <HAL_UART_TxCpltCallback+0x78>)
 800ee2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee32:	601a      	str	r2, [r3, #0]
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800ee3c:	bf00      	nop
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	20002150 	.word	0x20002150
 800ee48:	20002158 	.word	0x20002158
 800ee4c:	e000ed04 	.word	0xe000ed04

0800ee50 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800ee50:	b590      	push	{r4, r7, lr}
 800ee52:	b087      	sub	sp, #28
 800ee54:	af02      	add	r7, sp, #8
 800ee56:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	e042      	b.n	800eee8 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800ee62:	4a2d      	ldr	r2, [pc, #180]	; (800ef18 <HAL_UART_RxCpltCallback+0xc8>)
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d137      	bne.n	800eee2 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800ee72:	4a29      	ldr	r2, [pc, #164]	; (800ef18 <HAL_UART_RxCpltCallback+0xc8>)
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee7a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d139      	bne.n	800eef6 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800ee82:	4a25      	ldr	r2, [pc, #148]	; (800ef18 <HAL_UART_RxCpltCallback+0xc8>)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee8a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ee8e:	4922      	ldr	r1, [pc, #136]	; (800ef18 <HAL_UART_RxCpltCallback+0xc8>)
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ee96:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	f7fe fb95 	bl	800d5cc <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800eea2:	4a1d      	ldr	r2, [pc, #116]	; (800ef18 <HAL_UART_RxCpltCallback+0xc8>)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeaa:	6858      	ldr	r0, [r3, #4]
 800eeac:	4a1a      	ldr	r2, [pc, #104]	; (800ef18 <HAL_UART_RxCpltCallback+0xc8>)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeb4:	33b8      	adds	r3, #184	; 0xb8
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	4619      	mov	r1, r3
 800eeba:	f7f7 fe1f 	bl	8006afc <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800eebe:	4a16      	ldr	r2, [pc, #88]	; (800ef18 <HAL_UART_RxCpltCallback+0xc8>)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eec6:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800eeca:	f7fc fbf3 	bl	800b6b4 <xTaskGetTickCountFromISR>
 800eece:	4602      	mov	r2, r0
 800eed0:	f107 0308 	add.w	r3, r7, #8
 800eed4:	2100      	movs	r1, #0
 800eed6:	9100      	str	r1, [sp, #0]
 800eed8:	2107      	movs	r1, #7
 800eeda:	4620      	mov	r0, r4
 800eedc:	f7fd fc18 	bl	800c710 <xTimerGenericCommand>
    		}
    		break;
 800eee0:	e009      	b.n	800eef6 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	3301      	adds	r3, #1
 800eee6:	60fb      	str	r3, [r7, #12]
 800eee8:	4b0c      	ldr	r3, [pc, #48]	; (800ef1c <HAL_UART_RxCpltCallback+0xcc>)
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	461a      	mov	r2, r3
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	4293      	cmp	r3, r2
 800eef2:	dbb6      	blt.n	800ee62 <HAL_UART_RxCpltCallback+0x12>
 800eef4:	e000      	b.n	800eef8 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800eef6:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d007      	beq.n	800ef0e <HAL_UART_RxCpltCallback+0xbe>
 800eefe:	4b08      	ldr	r3, [pc, #32]	; (800ef20 <HAL_UART_RxCpltCallback+0xd0>)
 800ef00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800ef0e:	bf00      	nop
 800ef10:	3714      	adds	r7, #20
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd90      	pop	{r4, r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20002150 	.word	0x20002150
 800ef1c:	20002158 	.word	0x20002158
 800ef20:	e000ed04 	.word	0xe000ed04

0800ef24 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	e041      	b.n	800efb6 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800ef32:	4a27      	ldr	r2, [pc, #156]	; (800efd0 <HAL_UART_ErrorCallback+0xac>)
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d136      	bne.n	800efb0 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800ef42:	4a23      	ldr	r2, [pc, #140]	; (800efd0 <HAL_UART_ErrorCallback+0xac>)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef4a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ef4e:	2b04      	cmp	r3, #4
 800ef50:	d138      	bne.n	800efc4 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ef52:	e007      	b.n	800ef64 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ef54:	4a1e      	ldr	r2, [pc, #120]	; (800efd0 <HAL_UART_ErrorCallback+0xac>)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7f7 fe98 	bl	8006c94 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ef64:	4a1a      	ldr	r2, [pc, #104]	; (800efd0 <HAL_UART_ErrorCallback+0xac>)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef6c:	6858      	ldr	r0, [r3, #4]
 800ef6e:	4a18      	ldr	r2, [pc, #96]	; (800efd0 <HAL_UART_ErrorCallback+0xac>)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef76:	33d0      	adds	r3, #208	; 0xd0
 800ef78:	2280      	movs	r2, #128	; 0x80
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	f7fa fb81 	bl	8009682 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1e6      	bne.n	800ef54 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ef86:	4a12      	ldr	r2, [pc, #72]	; (800efd0 <HAL_UART_ErrorCallback+0xac>)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	490d      	ldr	r1, [pc, #52]	; (800efd0 <HAL_UART_ErrorCallback+0xac>)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f022 0204 	bic.w	r2, r2, #4
 800efac:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800efae:	e009      	b.n	800efc4 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	3301      	adds	r3, #1
 800efb4:	60fb      	str	r3, [r7, #12]
 800efb6:	4b07      	ldr	r3, [pc, #28]	; (800efd4 <HAL_UART_ErrorCallback+0xb0>)
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	461a      	mov	r2, r3
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	4293      	cmp	r3, r2
 800efc0:	dbb7      	blt.n	800ef32 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800efc2:	e000      	b.n	800efc6 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800efc4:	bf00      	nop
}
 800efc6:	bf00      	nop
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	20002150 	.word	0x20002150
 800efd4:	20002158 	.word	0x20002158

0800efd8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af02      	add	r7, sp, #8
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	460b      	mov	r3, r1
 800efe2:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800efe4:	2300      	movs	r3, #0
 800efe6:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800efe8:	2300      	movs	r3, #0
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	e061      	b.n	800f0b2 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800efee:	4a3c      	ldr	r2, [pc, #240]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	429a      	cmp	r2, r3
 800effc:	d156      	bne.n	800f0ac <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800effe:	4a38      	ldr	r2, [pc, #224]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f006:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f00a:	2b04      	cmp	r3, #4
 800f00c:	d158      	bne.n	800f0c0 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800f00e:	887b      	ldrh	r3, [r7, #2]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d055      	beq.n	800f0c0 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800f014:	4a32      	ldr	r2, [pc, #200]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f01c:	887a      	ldrh	r2, [r7, #2]
 800f01e:	b2d2      	uxtb	r2, r2
 800f020:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800f024:	4a2e      	ldr	r2, [pc, #184]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f02c:	2200      	movs	r2, #0
 800f02e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f032:	e007      	b.n	800f044 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f034:	4a2a      	ldr	r2, [pc, #168]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f7 fe28 	bl	8006c94 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f044:	4a26      	ldr	r2, [pc, #152]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f04c:	6858      	ldr	r0, [r3, #4]
 800f04e:	4a24      	ldr	r2, [pc, #144]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f056:	33d0      	adds	r3, #208	; 0xd0
 800f058:	2280      	movs	r2, #128	; 0x80
 800f05a:	4619      	mov	r1, r3
 800f05c:	f7fa fb11 	bl	8009682 <HAL_UARTEx_ReceiveToIdle_DMA>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1e6      	bne.n	800f034 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f066:	4a1e      	ldr	r2, [pc, #120]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	4919      	ldr	r1, [pc, #100]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f022 0204 	bic.w	r2, r2, #4
 800f08c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800f08e:	4a14      	ldr	r2, [pc, #80]	; (800f0e0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f096:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f09a:	f107 0308 	add.w	r3, r7, #8
 800f09e:	9300      	str	r3, [sp, #0]
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	2203      	movs	r2, #3
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	f7fd f921 	bl	800c2ec <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800f0aa:	e009      	b.n	800f0c0 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	60fb      	str	r3, [r7, #12]
 800f0b2:	4b0c      	ldr	r3, [pc, #48]	; (800f0e4 <HAL_UARTEx_RxEventCallback+0x10c>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	db97      	blt.n	800efee <HAL_UARTEx_RxEventCallback+0x16>
 800f0be:	e000      	b.n	800f0c2 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800f0c0:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d007      	beq.n	800f0d8 <HAL_UARTEx_RxEventCallback+0x100>
 800f0c8:	4b07      	ldr	r3, [pc, #28]	; (800f0e8 <HAL_UARTEx_RxEventCallback+0x110>)
 800f0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0ce:	601a      	str	r2, [r3, #0]
 800f0d0:	f3bf 8f4f 	dsb	sy
 800f0d4:	f3bf 8f6f 	isb	sy
}
 800f0d8:	bf00      	nop
 800f0da:	3710      	adds	r7, #16
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	20002150 	.word	0x20002150
 800f0e4:	20002158 	.word	0x20002158
 800f0e8:	e000ed04 	.word	0xe000ed04

0800f0ec <memset>:
 800f0ec:	4402      	add	r2, r0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d100      	bne.n	800f0f6 <memset+0xa>
 800f0f4:	4770      	bx	lr
 800f0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800f0fa:	e7f9      	b.n	800f0f0 <memset+0x4>

0800f0fc <__libc_init_array>:
 800f0fc:	b570      	push	{r4, r5, r6, lr}
 800f0fe:	4d0d      	ldr	r5, [pc, #52]	; (800f134 <__libc_init_array+0x38>)
 800f100:	4c0d      	ldr	r4, [pc, #52]	; (800f138 <__libc_init_array+0x3c>)
 800f102:	1b64      	subs	r4, r4, r5
 800f104:	10a4      	asrs	r4, r4, #2
 800f106:	2600      	movs	r6, #0
 800f108:	42a6      	cmp	r6, r4
 800f10a:	d109      	bne.n	800f120 <__libc_init_array+0x24>
 800f10c:	4d0b      	ldr	r5, [pc, #44]	; (800f13c <__libc_init_array+0x40>)
 800f10e:	4c0c      	ldr	r4, [pc, #48]	; (800f140 <__libc_init_array+0x44>)
 800f110:	f000 f826 	bl	800f160 <_init>
 800f114:	1b64      	subs	r4, r4, r5
 800f116:	10a4      	asrs	r4, r4, #2
 800f118:	2600      	movs	r6, #0
 800f11a:	42a6      	cmp	r6, r4
 800f11c:	d105      	bne.n	800f12a <__libc_init_array+0x2e>
 800f11e:	bd70      	pop	{r4, r5, r6, pc}
 800f120:	f855 3b04 	ldr.w	r3, [r5], #4
 800f124:	4798      	blx	r3
 800f126:	3601      	adds	r6, #1
 800f128:	e7ee      	b.n	800f108 <__libc_init_array+0xc>
 800f12a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f12e:	4798      	blx	r3
 800f130:	3601      	adds	r6, #1
 800f132:	e7f2      	b.n	800f11a <__libc_init_array+0x1e>
 800f134:	0800f434 	.word	0x0800f434
 800f138:	0800f434 	.word	0x0800f434
 800f13c:	0800f434 	.word	0x0800f434
 800f140:	0800f438 	.word	0x0800f438

0800f144 <memcpy>:
 800f144:	440a      	add	r2, r1
 800f146:	4291      	cmp	r1, r2
 800f148:	f100 33ff 	add.w	r3, r0, #4294967295
 800f14c:	d100      	bne.n	800f150 <memcpy+0xc>
 800f14e:	4770      	bx	lr
 800f150:	b510      	push	{r4, lr}
 800f152:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f15a:	4291      	cmp	r1, r2
 800f15c:	d1f9      	bne.n	800f152 <memcpy+0xe>
 800f15e:	bd10      	pop	{r4, pc}

0800f160 <_init>:
 800f160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f162:	bf00      	nop
 800f164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f166:	bc08      	pop	{r3}
 800f168:	469e      	mov	lr, r3
 800f16a:	4770      	bx	lr

0800f16c <_fini>:
 800f16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16e:	bf00      	nop
 800f170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f172:	bc08      	pop	{r3}
 800f174:	469e      	mov	lr, r3
 800f176:	4770      	bx	lr
